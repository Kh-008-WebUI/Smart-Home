webpackJsonp([1],{"./node_modules/chain-function/index.js":function(e,t,n){"use strict";e.exports=function(){for(var e=arguments.length,t=[],n=0;n<e;n++)t[n]=arguments[n];if(t=t.filter(function(e){return null!=e}),0!==t.length)return 1===t.length?t[0]:t.reduce(function(e,t){return function(){e.apply(this,arguments),t.apply(this,arguments)}})}},"./node_modules/dom-helpers/class/addClass.js":function(e,t,n){"use strict";function o(e,t){e.classList?e.classList.add(t):(0,i.default)(e)||(e.className=e.className+" "+t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=o;var r=n("./node_modules/dom-helpers/class/hasClass.js"),i=function(e){return e&&e.__esModule?e:{default:e}}(r);e.exports=t.default},"./node_modules/dom-helpers/class/hasClass.js":function(e,t,n){"use strict";function o(e,t){return e.classList?!!t&&e.classList.contains(t):-1!==(" "+e.className+" ").indexOf(" "+t+" ")}Object.defineProperty(t,"__esModule",{value:!0}),t.default=o,e.exports=t.default},"./node_modules/dom-helpers/class/removeClass.js":function(e,t,n){"use strict";e.exports=function(e,t){e.classList?e.classList.remove(t):e.className=e.className.replace(new RegExp("(^|\\s)"+t+"(?:\\s|$)","g"),"$1").replace(/\s+/g," ").replace(/^\s*|\s*$/g,"")}},"./node_modules/dom-helpers/transition/properties.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.animationEnd=t.animationDelay=t.animationTiming=t.animationDuration=t.animationName=t.transitionEnd=t.transitionDuration=t.transitionDelay=t.transitionTiming=t.transitionProperty=t.transform=void 0;var o=n("./node_modules/dom-helpers/util/inDOM.js"),r=function(e){return e&&e.__esModule?e:{default:e}}(o),i="transform",a=void 0,s=void 0,u=void 0,l=void 0,c=void 0,p=void 0,d=void 0,f=void 0,m=void 0,h=void 0,y=void 0;if(r.default){var v=function(){for(var e=document.createElement("div").style,t={O:function(e){return"o"+e.toLowerCase()},Moz:function(e){return e.toLowerCase()},Webkit:function(e){return"webkit"+e},ms:function(e){return"MS"+e}},n=Object.keys(t),o=void 0,r=void 0,i="",a=0;a<n.length;a++){var s=n[a];if(s+"TransitionProperty"in e){i="-"+s.toLowerCase(),o=t[s]("TransitionEnd"),r=t[s]("AnimationEnd");break}}return!o&&"transitionProperty"in e&&(o="transitionend"),!r&&"animationName"in e&&(r="animationend"),e=null,{animationEnd:r,transitionEnd:o,prefix:i}}();a=v.prefix,t.transitionEnd=s=v.transitionEnd,t.animationEnd=u=v.animationEnd,t.transform=i=a+"-"+i,t.transitionProperty=l=a+"-transition-property",t.transitionDuration=c=a+"-transition-duration",t.transitionDelay=d=a+"-transition-delay",t.transitionTiming=p=a+"-transition-timing-function",t.animationName=f=a+"-animation-name",t.animationDuration=m=a+"-animation-duration",t.animationTiming=h=a+"-animation-delay",t.animationDelay=y=a+"-animation-timing-function"}t.transform=i,t.transitionProperty=l,t.transitionTiming=p,t.transitionDelay=d,t.transitionDuration=c,t.transitionEnd=s,t.animationName=f,t.animationDuration=m,t.animationTiming=h,t.animationDelay=y,t.animationEnd=u,t.default={transform:i,end:s,property:l,timing:p,delay:d,duration:c}},"./node_modules/dom-helpers/util/inDOM.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=!("undefined"==typeof window||!window.document||!window.document.createElement),e.exports=t.default},"./node_modules/dom-helpers/util/requestAnimationFrame.js":function(e,t,n){"use strict";function o(e){var t=(new Date).getTime(),n=Math.max(0,16-(t-p)),o=setTimeout(e,n);return p=t,o}Object.defineProperty(t,"__esModule",{value:!0});var r=n("./node_modules/dom-helpers/util/inDOM.js"),i=function(e){return e&&e.__esModule?e:{default:e}}(r),a=["","webkit","moz","o","ms"],s="clearTimeout",u=o,l=void 0,c=function(e,t){return e+(e?t[0].toUpperCase()+t.substr(1):t)+"AnimationFrame"};i.default&&a.some(function(e){var t=c(e,"request");if(t in window)return s=c(e,"cancel"),u=function(e){return window[t](e)}});var p=(new Date).getTime();l=function(e){return u(e)},l.cancel=function(e){window[s]&&"function"==typeof window[s]&&window[s](e)},t.default=l,e.exports=t.default},"./node_modules/react-addons-css-transition-group/index.js":function(e,t,n){"use strict";e.exports=n("./node_modules/react-transition-group/CSSTransitionGroup.js")},"./node_modules/react-transition-group/CSSTransitionGroup.js":function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":s(t))&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":s(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.__esModule=!0;var u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},l=n("./node_modules/react/react.js"),c=o(l),p=n("./node_modules/prop-types/index.js"),d=o(p),f=n("./node_modules/react-transition-group/TransitionGroup.js"),m=o(f),h=n("./node_modules/react-transition-group/CSSTransitionGroupChild.js"),y=o(h),v=n("./node_modules/react-transition-group/utils/PropTypes.js"),_=(v.nameShape.isRequired,d.default.bool,d.default.bool,d.default.bool,(0,v.transitionTimeout)("Appear"),(0,v.transitionTimeout)("Enter"),(0,v.transitionTimeout)("Leave"),{transitionAppear:!1,transitionEnter:!0,transitionLeave:!0}),b=function(e){function t(){var n,o,a;r(this,t);for(var s=arguments.length,u=Array(s),l=0;l<s;l++)u[l]=arguments[l];return n=o=i(this,e.call.apply(e,[this].concat(u))),o._wrapChild=function(e){return c.default.createElement(y.default,{name:o.props.transitionName,appear:o.props.transitionAppear,enter:o.props.transitionEnter,leave:o.props.transitionLeave,appearTimeout:o.props.transitionAppearTimeout,enterTimeout:o.props.transitionEnterTimeout,leaveTimeout:o.props.transitionLeaveTimeout},e)},a=n,i(o,a)}return a(t,e),t.prototype.render=function(){return c.default.createElement(m.default,u({},this.props,{childFactory:this._wrapChild}))},t}(c.default.Component);b.displayName="CSSTransitionGroup",b.propTypes={},b.defaultProps=_,t.default=b,e.exports=t.default},"./node_modules/react-transition-group/CSSTransitionGroupChild.js":function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":u(t))&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":u(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function s(e,t){return S.length?S.forEach(function(n){return e.addEventListener(n,t,!1)}):setTimeout(t,0),function(){S.length&&S.forEach(function(n){return e.removeEventListener(n,t,!1)})}}var u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.__esModule=!0;var l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},c=n("./node_modules/dom-helpers/class/addClass.js"),p=o(c),d=n("./node_modules/dom-helpers/class/removeClass.js"),f=o(d),m=n("./node_modules/dom-helpers/util/requestAnimationFrame.js"),h=o(m),y=n("./node_modules/dom-helpers/transition/properties.js"),v=n("./node_modules/react/react.js"),_=o(v),b=n("./node_modules/prop-types/index.js"),g=o(b),j=n("./node_modules/react-dom/index.js"),w=n("./node_modules/react-transition-group/utils/PropTypes.js"),S=[];y.transitionEnd&&S.push(y.transitionEnd),y.animationEnd&&S.push(y.animationEnd);var E=(g.default.node,w.nameShape.isRequired,g.default.bool,g.default.bool,g.default.bool,g.default.number,g.default.number,g.default.number,function(e){function t(){var n,o,a;r(this,t);for(var s=arguments.length,u=Array(s),l=0;l<s;l++)u[l]=arguments[l];return n=o=i(this,e.call.apply(e,[this].concat(u))),o.componentWillAppear=function(e){o.props.appear?o.transition("appear",e,o.props.appearTimeout):e()},o.componentWillEnter=function(e){o.props.enter?o.transition("enter",e,o.props.enterTimeout):e()},o.componentWillLeave=function(e){o.props.leave?o.transition("leave",e,o.props.leaveTimeout):e()},a=n,i(o,a)}return a(t,e),t.prototype.componentWillMount=function(){this.classNameAndNodeQueue=[],this.transitionTimeouts=[]},t.prototype.componentWillUnmount=function(){this.unmounted=!0,this.timeout&&clearTimeout(this.timeout),this.transitionTimeouts.forEach(function(e){clearTimeout(e)}),this.classNameAndNodeQueue.length=0},t.prototype.transition=function(e,t,n){var o=(0,j.findDOMNode)(this);if(!o)return void(t&&t());var r=this.props.name[e]||this.props.name+"-"+e,i=this.props.name[e+"Active"]||r+"-active",a=null,u=void 0;(0,p.default)(o,r),this.queueClassAndNode(i,o);var l=function(e){e&&e.target!==o||(clearTimeout(a),u&&u(),(0,f.default)(o,r),(0,f.default)(o,i),u&&u(),t&&t())};n?(a=setTimeout(l,n),this.transitionTimeouts.push(a)):y.transitionEnd&&(u=s(o,l))},t.prototype.queueClassAndNode=function(e,t){var n=this;this.classNameAndNodeQueue.push({className:e,node:t}),this.rafHandle||(this.rafHandle=(0,h.default)(function(){return n.flushClassNameAndNodeQueue()}))},t.prototype.flushClassNameAndNodeQueue=function(){this.unmounted||this.classNameAndNodeQueue.forEach(function(e){e.node.scrollTop,(0,p.default)(e.node,e.className)}),this.classNameAndNodeQueue.length=0,this.rafHandle=null},t.prototype.render=function(){var e=l({},this.props);return delete e.name,delete e.appear,delete e.enter,delete e.leave,delete e.appearTimeout,delete e.enterTimeout,delete e.leaveTimeout,delete e.children,_.default.cloneElement(_.default.Children.only(this.props.children),e)},t}(_.default.Component));E.displayName="CSSTransitionGroupChild",E.propTypes={},t.default=E,e.exports=t.default},"./node_modules/react-transition-group/TransitionGroup.js":function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":s(t))&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":s(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.__esModule=!0;var u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},l=n("./node_modules/chain-function/index.js"),c=o(l),p=n("./node_modules/react/react.js"),d=o(p),f=n("./node_modules/prop-types/index.js"),m=o(f),h=n("./node_modules/warning/browser.js"),y=(o(h),n("./node_modules/react-transition-group/utils/ChildMapping.js")),v=(m.default.any,m.default.func,m.default.node,{component:"span",childFactory:function(e){return e}}),_=function(e){function t(n,o){r(this,t);var a=i(this,e.call(this,n,o));return a.performAppear=function(e,t){a.currentlyTransitioningKeys[e]=!0,t.componentWillAppear?t.componentWillAppear(a._handleDoneAppearing.bind(a,e,t)):a._handleDoneAppearing(e,t)},a._handleDoneAppearing=function(e,t){t.componentDidAppear&&t.componentDidAppear(),delete a.currentlyTransitioningKeys[e];var n=(0,y.getChildMapping)(a.props.children);n&&n.hasOwnProperty(e)||a.performLeave(e,t)},a.performEnter=function(e,t){a.currentlyTransitioningKeys[e]=!0,t.componentWillEnter?t.componentWillEnter(a._handleDoneEntering.bind(a,e,t)):a._handleDoneEntering(e,t)},a._handleDoneEntering=function(e,t){t.componentDidEnter&&t.componentDidEnter(),delete a.currentlyTransitioningKeys[e];var n=(0,y.getChildMapping)(a.props.children);n&&n.hasOwnProperty(e)||a.performLeave(e,t)},a.performLeave=function(e,t){a.currentlyTransitioningKeys[e]=!0,t.componentWillLeave?t.componentWillLeave(a._handleDoneLeaving.bind(a,e,t)):a._handleDoneLeaving(e,t)},a._handleDoneLeaving=function(e,t){t.componentDidLeave&&t.componentDidLeave(),delete a.currentlyTransitioningKeys[e];var n=(0,y.getChildMapping)(a.props.children);n&&n.hasOwnProperty(e)?a.keysToEnter.push(e):a.setState(function(t){var n=u({},t.children);return delete n[e],{children:n}})},a.childRefs=Object.create(null),a.state={children:(0,y.getChildMapping)(n.children)},a}return a(t,e),t.prototype.componentWillMount=function(){this.currentlyTransitioningKeys={},this.keysToEnter=[],this.keysToLeave=[]},t.prototype.componentDidMount=function(){var e=this.state.children;for(var t in e)e[t]&&this.performAppear(t,this.childRefs[t])},t.prototype.componentWillReceiveProps=function(e){var t=(0,y.getChildMapping)(e.children),n=this.state.children;this.setState({children:(0,y.mergeChildMappings)(n,t)});for(var o in t){var r=n&&n.hasOwnProperty(o);!t[o]||r||this.currentlyTransitioningKeys[o]||this.keysToEnter.push(o)}for(var i in n){var a=t&&t.hasOwnProperty(i);!n[i]||a||this.currentlyTransitioningKeys[i]||this.keysToLeave.push(i)}},t.prototype.componentDidUpdate=function(){var e=this,t=this.keysToEnter;this.keysToEnter=[],t.forEach(function(t){return e.performEnter(t,e.childRefs[t])});var n=this.keysToLeave;this.keysToLeave=[],n.forEach(function(t){return e.performLeave(t,e.childRefs[t])})},t.prototype.render=function(){var e=this,t=[];for(var n in this.state.children)!function(n){var o=e.state.children[n];if(o){var r="string"!=typeof o.ref,i=e.props.childFactory(o),a=function(t){e.childRefs[n]=t};i===o&&r&&(a=(0,c.default)(o.ref,a)),t.push(d.default.cloneElement(i,{key:n,ref:a}))}}(n);var o=u({},this.props);return delete o.transitionLeave,delete o.transitionName,delete o.transitionAppear,delete o.transitionEnter,delete o.childFactory,delete o.transitionLeaveTimeout,delete o.transitionEnterTimeout,delete o.transitionAppearTimeout,delete o.component,d.default.createElement(this.props.component,o,t)},t}(d.default.Component);_.displayName="TransitionGroup",_.propTypes={},_.defaultProps=v,t.default=_,e.exports=t.default},"./node_modules/react-transition-group/utils/ChildMapping.js":function(e,t,n){"use strict";function o(e){if(!e)return e;var t={};return i.Children.map(e,function(e){return e}).forEach(function(e){t[e.key]=e}),t}function r(e,t){function n(n){return t.hasOwnProperty(n)?t[n]:e[n]}e=e||{},t=t||{};var o={},r=[];for(var i in e)t.hasOwnProperty(i)?r.length&&(o[i]=r,r=[]):r.push(i);var a=void 0,s={};for(var u in t){if(o.hasOwnProperty(u))for(a=0;a<o[u].length;a++){var l=o[u][a];s[o[u][a]]=n(l)}s[u]=n(u)}for(a=0;a<r.length;a++)s[r[a]]=n(r[a]);return s}t.__esModule=!0,t.getChildMapping=o,t.mergeChildMappings=r;var i=n("./node_modules/react/react.js")},"./node_modules/react-transition-group/utils/PropTypes.js":function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function r(e){var t="transition"+e+"Timeout",n="transition"+e;return function(e){if(e[n]){if(null==e[t])return new Error(t+" wasn't supplied to CSSTransitionGroup: this can cause unreliable animations and won't be supported in a future version of React. See https://fb.me/react-animation-transition-group-timeout for more information.");if("number"!=typeof e[t])return new Error(t+" must be a number (in milliseconds)")}return null}}t.__esModule=!0,t.nameShape=void 0,t.transitionTimeout=r;var i=n("./node_modules/react/react.js"),a=(o(i),n("./node_modules/prop-types/index.js")),s=o(a);t.nameShape=s.default.oneOfType([s.default.string,s.default.shape({enter:s.default.string,leave:s.default.string,active:s.default.string}),s.default.shape({enter:s.default.string,enterActive:s.default.string,leave:s.default.string,leaveActive:s.default.string,appear:s.default.string,appearActive:s.default.string})])},"./node_modules/reselect/lib/index.js":function(e,t,n){"use strict";function o(e,t){return e===t}function r(e,t,n){if(null===t||null===n||t.length!==n.length)return!1;for(var o=t.length,r=0;r<o;r++)if(!e(t[r],n[r]))return!1;return!0}function i(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:o,n=null,i=null;return function(){return r(t,n,arguments)||(i=e.apply(null,arguments)),n=arguments,i}}function a(e){var t=Array.isArray(e[0])?e[0]:e;if(!t.every(function(e){return"function"==typeof e})){var n=t.map(function(e){return void 0===e?"undefined":l(e)}).join(", ");throw new Error("Selector creators expect all input-selectors to be functions, instead received the following types: ["+n+"]")}return t}function s(e){for(var t=arguments.length,n=Array(t>1?t-1:0),o=1;o<t;o++)n[o-1]=arguments[o];return function(){for(var t=arguments.length,o=Array(t),r=0;r<t;r++)o[r]=arguments[r];var s=0,u=o.pop(),l=a(o),c=e.apply(void 0,[function(){return s++,u.apply(null,arguments)}].concat(n)),p=i(function(){for(var e=[],t=l.length,n=0;n<t;n++)e.push(l[n].apply(null,arguments));return c.apply(null,e)});return p.resultFunc=u,p.recomputations=function(){return s},p.resetRecomputations=function(){return s=0},p}}function u(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:c;if("object"!==(void 0===e?"undefined":l(e)))throw new Error("createStructuredSelector expects first argument to be an object where each property is a selector, instead received a "+(void 0===e?"undefined":l(e)));var n=Object.keys(e);return t(n.map(function(t){return e[t]}),function(){for(var e=arguments.length,t=Array(e),o=0;o<e;o++)t[o]=arguments[o];return t.reduce(function(e,t,o){return e[n[o]]=t,e},{})})}var l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.__esModule=!0,t.defaultMemoize=i,t.createSelectorCreator=s,t.createStructuredSelector=u;var c=t.createSelector=s(i)},"./src/components/DeviceListItem/DeviceListItem.js":function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),u=n("./node_modules/react/react.js"),l=o(u),c=n("./node_modules/react-router-dom/es/index.js"),p=n("./node_modules/prop-types/index.js"),d=o(p),f=n("./src/components/ToggleSettings/ToggleSettings.js"),m=o(f);n("./src/components/DeviceListItem/DeviceListItem.scss");var h=function(e){function t(e){r(this,t);var n=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.setDeviceId=function(e){n.props.setPopupShown(n.props.data._id)},n}return a(t,e),s(t,[{key:"render",value:function(){return l.default.createElement("div",{className:"device-item"},l.default.createElement("div",{className:"device-item__info"},l.default.createElement(c.Link,{className:"device-item__info-name",to:"/devices/device/"+this.props.data._id},this.props.data.name),l.default.createElement("div",{className:"device-item__info-status"},l.default.createElement(m.default,{checked:this.props.data.status,itemId:this.props.data._id,setItemValue:this.props.changeStatus}))),l.default.createElement("div",{className:"device-item__description"},l.default.createElement("div",{className:"device-item__description-location"},this.props.location),l.default.createElement("div",{className:"device-item__description-icon"},l.default.createElement("div",{className:"device-item__description-icon-delete"},l.default.createElement("a",{className:"fa fa-trash",onClick:this.setDeviceId})))))}}]),t}(l.default.Component);h.propTypes={changeStatus:d.default.func,deleteDevice:d.default.func,setPopupShown:d.default.func,location:d.default.string,data:d.default.shape({status:d.default.boolean,_id:d.default.string,name:d.default.string,location:d.default.string})},t.default=h},"./src/components/DeviceListItem/DeviceListItem.scss":function(e,t){},"./src/components/DevisesSection/DevisesSection.js":function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),u=n("./node_modules/react/react.js"),l=o(u),c=(n("./node_modules/react-router-dom/es/index.js"),n("./src/components/Message/Message.js")),p=n("./src/components/Popup/Popup.js"),d=n("./src/components/Button/Button.js"),f=n("./src/components/ListHeader/ListHeader.js"),m=o(f),h=n("./node_modules/prop-types/index.js"),y=o(h),v=function(e){function t(e){return r(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return a(t,e),s(t,[{key:"render",value:function(){var e=this,t=this.props.filterOption;return void 0!==t&&this.props.filterAction(t),l.default.createElement("section",{className:"device-list"},l.default.createElement("h1",{className:"device-list__title"},this.props.locationOfDevices?this.props.locationOfDevices.toUpperCase():"Your devices"),l.default.createElement(m.default,{quantity:this.props.quantity,location:this.props.location,history:this.props.history,match:this.props.match}),l.default.createElement("section",{className:"device-list__content"},this.props.children),l.default.createElement(p.Popup,{setPopupShown:this.props.setPopupShown,popupShown:this.props.popupShown,header:"Confirm the action",text:"Are you sure you want to remove the device?"},l.default.createElement(d.Button,{setPopupShown:this.props.setPopupShown,okHandler:function(){e.props.deleteDevice(e.props.currentId),e.props.setPopupShown()},className:"btn popup__btn",innerText:"Ok"}),l.default.createElement(d.Button,{okHandler:function(){e.props.setPopupShown()},className:"btn btn--default popup__btn",innerText:"Cancel"})),l.default.createElement(c.Message,{clearStatus:this.props.clearStatus,header:"Error"}))}}]),t}(l.default.Component);v.propTypes={changeStatus:y.default.func,deleteDevice:y.default.func,loadDevices:y.default.func,filterOption:y.default.any,filterAction:y.default.func,devices:y.default.array,location:y.default.object,history:y.default.object,match:y.default.object,children:y.default.any,clearStatus:y.default.func,currentId:y.default.string,setPopupShown:y.default.func,popupShown:y.default.bool,quantity:y.default.number,locationOfDevices:y.default.string},t.default=v},"./src/components/FilterSelect/FilterSelect.js":function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var r=n("./node_modules/react/react.js"),i=o(r),a=n("./node_modules/prop-types/index.js"),s=o(a);n("./src/components/FilterSelect/FilterSelect.scss");var u=function(e){return i.default.createElement("div",{className:"filterBox"},i.default.createElement("select",{className:"filterBox__filter",onChange:function(t){return e.handleSelect(t.target.value)}},e.options.map(function(t){return i.default.createElement("option",{value:t.value,key:t.value,selected:t.value===e.value},t.innerText)})))};u.propTypes={handleSelect:s.default.func.isRequired,options:s.default.array,value:s.default.string},t.default=u},"./src/components/FilterSelect/FilterSelect.scss":function(e,t){},"./src/components/ListHeader/ListHeader.js":function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},u=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),l=n("./node_modules/react/react.js"),c=o(l),p=n("./node_modules/react-router-dom/es/index.js"),d=n("./node_modules/react-redux/es/index.js"),f=n("./node_modules/query-string/index.js"),m=o(f),h=n("./src/components/FilterSelect/FilterSelect.js"),y=o(h),v=n("./src/components/Search/Search.js"),_=o(v),b=n("./src/actions/devices.action.js"),g=n("./src/utils/utils.js"),j=n("./src/data/filterOptions.js"),w=n("./node_modules/prop-types/index.js"),S=o(w),E=function(e){function t(e){r(this,t);var n=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.initialParams={search:"",filter:"all"},n.handleFilterSelect=function(e){n.props.filterAction(e),n.updateUrl(s({},n.initialParams,{filter:e}))},n.handleSearchResult=function(e){n.props.findItems(e),n.updateUrl(s({},n.initialParams,{search:e}))},n.updateUrl=function(e){var t=n.props.match,o=n.props.history;n.initialParams=e,o.push({pathname:t.url,search:(0,g.queryFromObject)(e)})},n}return a(t,e),u(t,[{key:"componentDidMount",value:function(){var e=this.props.location,t=m.default.parse(e.search).search,n=m.default.parse(e.search).filter;t&&this.handleSearchResult(t),n&&this.handleFilterSelect(n)}},{key:"componentWillUnmount",value:function(){this.props.filterAction("all"),this.props.findItems("")}},{key:"render",value:function(){return c.default.createElement("header",{className:"device-list__header"},c.default.createElement(_.default,{handleSearch:this.handleSearchResult,quantity:this.props.quantity,value:this.initialParams.search}),c.default.createElement("div",{className:"device-list__header--right"},c.default.createElement(y.default,{handleSelect:this.handleFilterSelect,options:j.options,value:this.initialParams.filter}),c.default.createElement(p.Link,{to:"/builder",className:"btn btn--primary add-item-button"},"New")))}}]),t}(c.default.Component),O=function(e){return{filterOption:e.searchAndFilter.filterOption,search:e.searchAndFilter.searchValue}},T=function(e){return{filterAction:function(t){return e((0,b.filterAction)(t))},findItems:function(t){return e((0,b.searchAction)(t))}}};E.propTypes={search:S.default.string,filterOption:S.default.string,filterAction:S.default.func,findItems:S.default.func,match:S.default.object,history:S.default.object,location:S.default.object,loadDevices:S.default.func,quantity:S.default.number},t.default=(0,d.connect)(O,T)(E)},"./src/components/Pagination/Pagination.js":function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),u=n("./node_modules/react/react.js"),l=o(u),c=n("./node_modules/prop-types/index.js"),p=o(c);n("./src/components/Pagination/Pagination.scss");var d=function(e){function t(e){return r(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return a(t,e),s(t,[{key:"render",value:function(){var e=this,t=[],n=this.props.currentPage;if(!this.props.totalPages||this.props.totalPages<=1)return null;for(var o=1;o<=this.props.totalPages;o++)t.push(o);return l.default.createElement("ul",{className:"pagination-pages"},t.map(function(t){return l.default.createElement("li",{className:n===t?"pagination-pages__num btn":"pagination-pages__num btn btn--default",key:t,id:t,onClick:e.props.handleClick},t)}))}}]),t}(l.default.Component);d.propTypes={handleClick:p.default.func,setPage:p.default.func,currentPage:p.default.number,totalPages:p.default.number},t.default=d},"./src/components/Pagination/Pagination.scss":function(e,t){},"./src/components/Search/Search.js":function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var r=n("./node_modules/react/react.js"),i=o(r),a=n("./node_modules/prop-types/index.js"),s=o(a);n("./src/components/Search/search.scss");var u=function(e){return i.default.createElement("div",{className:"searchBox"},i.default.createElement("div",{className:"searchBox__results"},i.default.createElement("span",null,e.quantity)," devices"),i.default.createElement("div",null,i.default.createElement("input",{type:"text",name:"search",placeholder:"Find a device",value:e.value,className:"searchBox__field",onChange:function(t){e.handleSearch(t.target.value)}})))};u.propTypes={handleSearch:s.default.func.isRequired,quantity:s.default.number,value:s.default.string},t.default=u},"./src/components/Search/search.scss":function(e,t){},"./src/components/ToggleSettings/ToggleSettings.js":function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),u=n("./node_modules/react/react.js"),l=o(u),c=n("./node_modules/prop-types/index.js"),p=o(c);n("./src/components/ToggleSettings/ToggleStyle.scss");var d=function(e){function t(e){r(this,t);var n=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.onChangeValue=function(e){n.props.setItemValue(!n.props.checked,n.props.itemId,n.props.deviceId)},n}return a(t,e),s(t,[{key:"render",value:function(){return l.default.createElement("div",{className:""+this.props.styleName},l.default.createElement("label",{className:"switch"},l.default.createElement("input",{type:"checkbox",checked:this.props.checked,onChange:this.onChangeValue}),l.default.createElement("div",{className:"slider round"})))}}]),t}(l.default.Component);t.default=d,d.propTypes={device:p.default.object,styleName:p.default.string,checked:p.default.bool.isRequired,setItemValue:p.default.func,itemId:p.default.any,newValue:p.default.string,deviceId:p.default.string},d.defaultProps={checked:!1}},"./src/components/ToggleSettings/ToggleStyle.scss":function(e,t){},"./src/data/filterOptions.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.options=[{value:"all",innerText:"All"},{value:"on",innerText:"Show On"},{value:"off",innerText:"Show OFF"}]},"./src/pages/LocationList/LocationList.js":function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),u=n("./node_modules/react/react.js"),l=o(u),c=n("./node_modules/react-redux/es/index.js"),p=n("./src/components/Pagination/Pagination.js"),d=o(p),f=n("./src/components/DeviceListItem/DeviceListItem.js"),m=o(f),h=n("./src/components/DevisesSection/DevisesSection.js"),y=o(h),v=n("./src/actions/devices.action.js"),_=n("./src/actions/notifications.action.js"),b=n("./src/selectors/index.js"),g=n("./node_modules/react-addons-css-transition-group/index.js"),j=o(g),w=n("./node_modules/prop-types/index.js"),S=o(w),E=function(e){function t(e){r(this,t);var n=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={popupShown:!1,currentId:"",currentPage:1,devicesPerPage:12},n.setPopupShown=function(e){var t=n.state.popupShown;n.setState({popupShown:!t,currentId:e})},n.handleClick=function(e){n.setState({currentPage:Number(e.target.id)})},n.setPage=function(e){n.setState({currentPage:e})},n.changeStatus=function(e,t){n.props.changeStatus({status:e},t)},n.deleteDevice=function(e){n.props.deleteDevice(e)},n}return a(t,e),s(t,[{key:"componentDidMount",value:function(){this.props.loadDevices()}},{key:"renderDevices",value:function(e){var t=this;return e.map(function(e,n){return l.default.createElement(m.default,{data:e,key:n,location:"",changeStatus:t.changeStatus,setPopupShown:t.setPopupShown})})}},{key:"renderDeviceGroup",value:function(e){return l.default.createElement("div",{className:"device-group"},l.default.createElement(j.default,{className:"device-group__items",transitionName:"hide",transitionEnterTimeout:500,transitionLeaveTimeout:300},this.renderDevices(e)))}},{key:"render",value:function(){var e=this.props.match.params.filterOption,t=this.props.match.params.location,n=this.props.devices.filter(function(e){return e.location===t}),o=this.state,r=o.currentPage,i=o.devicesPerPage,a=Math.ceil(n.length/i),s=r*i,u=s-i,c=n.slice(u,s);return void 0!==e&&this.props.filterAction(e),l.default.createElement(y.default,{filterOption:this.props.match.params.filterOption,devices:this.props.devices,location:this.props.location,history:this.props.history,match:this.props.match,status:this.props.status,text:this.props.errorText,setPopupShown:this.setPopupShown,popupShown:this.state.popupShown,deleteDevice:this.deleteDevice,clearStatus:this.props.clearStatus,currentId:this.state.currentId,quantity:n.length,locationOfDevices:t},"DONE"===this.props.status&&0===this.props.devices.length?l.default.createElement("span",null,"You need to add device"):this.renderDeviceGroup(c),l.default.createElement(d.default,{handleClick:this.handleClick,setPage:this.setPage,list:this.props.devices,currentPage:this.state.currentPage,totalPages:a}))}}]),t}(l.default.Component),O=function(e){return{devices:(0,b.filterItems)(e),status:e.devicesList.uploadStatus,errorText:e.devicesList.errorText}},T=function(e){return{changeStatus:function(t,n){return e((0,v.updateDevice)(t,n))},loadDevices:function(){return e((0,v.loadDevices)())},deleteDevice:function(t){return e((0,v.deleteDevice)(t))},sendNotificationWS:function(t){return e((0,_.sendNotificationWS)(t))},clearStatus:function(){return e((0,v.clearStatus)())}}};E.propTypes={search:S.default.string,filterOption:S.default.string,match:S.default.object,changeStatus:S.default.func,devices:S.default.array,filterAction:S.default.func,findItems:S.default.func,loadDevices:S.default.func,deleteDevice:S.default.func,history:S.default.object,location:S.default.object,status:S.default.string,sendNotificationWS:S.default.func,errorText:S.default.string,clearStatus:S.default.func},t.default=(0,c.connect)(O,T)(E)},"./src/selectors/index.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.filterItems=void 0;var o=n("./node_modules/reselect/lib/index.js"),r=n("./src/utils/utils.js"),i=function(e){return e.searchAndFilter.filterOption},a=function(e){return e.devicesList.devices},s=function(e){return e.searchAndFilter.searchValue};t.filterItems=(0,o.createSelector)([i,s,a],function(e,t,n){var o=n;return"all"===e?o=n:"on"===e?o=n.filter(function(e){return!0===e.status}):"off"===e&&(o=n.filter(function(e){return!1===e.status})),o.filter(function(e){return(0,r.searchItem)(e,t)})})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vMS5pbmRleF9idW5kbGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jaGFpbi1mdW5jdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L2RvbS1oZWxwZXJzL2NsYXNzL2FkZENsYXNzLmpzIiwid2VicGFjazovLy8uL34vZG9tLWhlbHBlcnMvY2xhc3MvaGFzQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vLy4vfi9kb20taGVscGVycy9jbGFzcy9yZW1vdmVDbGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9+L2RvbS1oZWxwZXJzL3RyYW5zaXRpb24vcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly8vLi9+L2RvbS1oZWxwZXJzL3V0aWwvaW5ET00uanMiLCJ3ZWJwYWNrOi8vLy4vfi9kb20taGVscGVycy91dGlsL3JlcXVlc3RBbmltYXRpb25GcmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWFkZG9ucy1jc3MtdHJhbnNpdGlvbi1ncm91cC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvQ1NTVHJhbnNpdGlvbkdyb3VwLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9DU1NUcmFuc2l0aW9uR3JvdXBDaGlsZC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvVHJhbnNpdGlvbkdyb3VwLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtdHJhbnNpdGlvbi1ncm91cC91dGlscy9DaGlsZE1hcHBpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL3V0aWxzL1Byb3BUeXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9+L3Jlc2VsZWN0L2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9EZXZpY2VMaXN0SXRlbS9EZXZpY2VMaXN0SXRlbS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9EZXZpc2VzU2VjdGlvbi9EZXZpc2VzU2VjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9GaWx0ZXJTZWxlY3QvRmlsdGVyU2VsZWN0LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0xpc3RIZWFkZXIvTGlzdEhlYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9QYWdpbmF0aW9uL1BhZ2luYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2VhcmNoL1NlYXJjaC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ub2dnbGVTZXR0aW5ncy9Ub2dnbGVTZXR0aW5ncy5qcz82MjFlIiwid2VicGFjazovLy8uL3NyYy9kYXRhL2ZpbHRlck9wdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2VzL0xvY2F0aW9uTGlzdC9Mb2NhdGlvbkxpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlbGVjdG9ycy9pbmRleC5qcyJdLCJuYW1lcyI6WyJ3ZWJwYWNrSnNvbnAiLCIuL25vZGVfbW9kdWxlcy9jaGFpbi1mdW5jdGlvbi9pbmRleC5qcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJncyIsImkiLCJmaWx0ZXIiLCJmbiIsInJlZHVjZSIsImN1cnJlbnQiLCJuZXh0IiwiYXBwbHkiLCJ0aGlzIiwiLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvY2xhc3MvYWRkQ2xhc3MuanMiLCJhZGRDbGFzcyIsImVsZW1lbnQiLCJjbGFzc05hbWUiLCJjbGFzc0xpc3QiLCJhZGQiLCJfaGFzQ2xhc3MyIiwiZGVmYXVsdCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJfaGFzQ2xhc3MiLCJvYmoiLCJfX2VzTW9kdWxlIiwiLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvY2xhc3MvaGFzQ2xhc3MuanMiLCJoYXNDbGFzcyIsImNvbnRhaW5zIiwiaW5kZXhPZiIsIi4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2NsYXNzL3JlbW92ZUNsYXNzLmpzIiwicmVtb3ZlIiwicmVwbGFjZSIsIlJlZ0V4cCIsIi4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3RyYW5zaXRpb24vcHJvcGVydGllcy5qcyIsImFuaW1hdGlvbkVuZCIsImFuaW1hdGlvbkRlbGF5IiwiYW5pbWF0aW9uVGltaW5nIiwiYW5pbWF0aW9uRHVyYXRpb24iLCJhbmltYXRpb25OYW1lIiwidHJhbnNpdGlvbkVuZCIsInRyYW5zaXRpb25EdXJhdGlvbiIsInRyYW5zaXRpb25EZWxheSIsInRyYW5zaXRpb25UaW1pbmciLCJ0cmFuc2l0aW9uUHJvcGVydHkiLCJ0cmFuc2Zvcm0iLCJ1bmRlZmluZWQiLCJfaW5ET00iLCJfaW5ET00yIiwicHJlZml4IiwiX2dldFRyYW5zaXRpb25Qcm9wZXJ0Iiwic3R5bGUiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJ2ZW5kb3JNYXAiLCJPIiwiZSIsInRvTG93ZXJDYXNlIiwiTW96IiwiV2Via2l0IiwibXMiLCJ2ZW5kb3JzIiwia2V5cyIsInZlbmRvciIsImVuZCIsInByb3BlcnR5IiwidGltaW5nIiwiZGVsYXkiLCJkdXJhdGlvbiIsIi4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3V0aWwvaW5ET00uanMiLCJ3aW5kb3ciLCIuL25vZGVfbW9kdWxlcy9kb20taGVscGVycy91dGlsL3JlcXVlc3RBbmltYXRpb25GcmFtZS5qcyIsImZhbGxiYWNrIiwiY3VyciIsIkRhdGUiLCJnZXRUaW1lIiwiTWF0aCIsIm1heCIsInByZXYiLCJyZXEiLCJzZXRUaW1lb3V0IiwiY2FuY2VsIiwicmFmIiwiY29tcGF0UmFmIiwiZ2V0S2V5IiwiayIsInRvVXBwZXJDYXNlIiwic3Vic3RyIiwic29tZSIsInJhZktleSIsImNiIiwiaWQiLCIuL25vZGVfbW9kdWxlcy9yZWFjdC1hZGRvbnMtY3NzLXRyYW5zaXRpb24tZ3JvdXAvaW5kZXguanMiLCIuL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL0NTU1RyYW5zaXRpb25Hcm91cC5qcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzZWxmIiwiY2FsbCIsIlJlZmVyZW5jZUVycm9yIiwiX3R5cGVvZiIsIl9pbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsInByb3RvdHlwZSIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwiZW51bWVyYWJsZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJTeW1ib2wiLCJpdGVyYXRvciIsIl9leHRlbmRzIiwiYXNzaWduIiwidGFyZ2V0Iiwic291cmNlIiwia2V5IiwiaGFzT3duUHJvcGVydHkiLCJfcmVhY3QiLCJfcmVhY3QyIiwiX3Byb3BUeXBlcyIsIl9wcm9wVHlwZXMyIiwiX1RyYW5zaXRpb25Hcm91cCIsIl9UcmFuc2l0aW9uR3JvdXAyIiwiX0NTU1RyYW5zaXRpb25Hcm91cENoaWxkIiwiX0NTU1RyYW5zaXRpb25Hcm91cENoaWxkMiIsIl9Qcm9wVHlwZXMiLCJkZWZhdWx0UHJvcHMiLCJuYW1lU2hhcGUiLCJpc1JlcXVpcmVkIiwiYm9vbCIsInRyYW5zaXRpb25UaW1lb3V0IiwidHJhbnNpdGlvbkFwcGVhciIsInRyYW5zaXRpb25FbnRlciIsInRyYW5zaXRpb25MZWF2ZSIsIkNTU1RyYW5zaXRpb25Hcm91cCIsIl9SZWFjdCRDb21wb25lbnQiLCJfdGVtcCIsIl90aGlzIiwiX3JldCIsIl9sZW4iLCJBcnJheSIsIl9rZXkiLCJjb25jYXQiLCJfd3JhcENoaWxkIiwiY2hpbGQiLCJuYW1lIiwicHJvcHMiLCJ0cmFuc2l0aW9uTmFtZSIsImFwcGVhciIsImVudGVyIiwibGVhdmUiLCJhcHBlYXJUaW1lb3V0IiwidHJhbnNpdGlvbkFwcGVhclRpbWVvdXQiLCJlbnRlclRpbWVvdXQiLCJ0cmFuc2l0aW9uRW50ZXJUaW1lb3V0IiwibGVhdmVUaW1lb3V0IiwidHJhbnNpdGlvbkxlYXZlVGltZW91dCIsInJlbmRlciIsImNoaWxkRmFjdG9yeSIsIkNvbXBvbmVudCIsImRpc3BsYXlOYW1lIiwicHJvcFR5cGVzIiwiLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9DU1NUcmFuc2l0aW9uR3JvdXBDaGlsZC5qcyIsImFkZEVuZExpc3RlbmVyIiwibm9kZSIsImxpc3RlbmVyIiwiZXZlbnRzIiwiZm9yRWFjaCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiX2FkZENsYXNzIiwiX2FkZENsYXNzMiIsIl9yZW1vdmVDbGFzcyIsIl9yZW1vdmVDbGFzczIiLCJfcmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiX3JlcXVlc3RBbmltYXRpb25GcmFtZTIiLCJfcHJvcGVydGllcyIsIl9yZWFjdERvbSIsInB1c2giLCJDU1NUcmFuc2l0aW9uR3JvdXBDaGlsZCIsIm51bWJlciIsImNvbXBvbmVudFdpbGxBcHBlYXIiLCJkb25lIiwidHJhbnNpdGlvbiIsImNvbXBvbmVudFdpbGxFbnRlciIsImNvbXBvbmVudFdpbGxMZWF2ZSIsImNvbXBvbmVudFdpbGxNb3VudCIsImNsYXNzTmFtZUFuZE5vZGVRdWV1ZSIsInRyYW5zaXRpb25UaW1lb3V0cyIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwidW5tb3VudGVkIiwidGltZW91dCIsImNsZWFyVGltZW91dCIsImFuaW1hdGlvblR5cGUiLCJmaW5pc2hDYWxsYmFjayIsImZpbmRET01Ob2RlIiwiYWN0aXZlQ2xhc3NOYW1lIiwidGltZXIiLCJyZW1vdmVMaXN0ZW5lcnMiLCJxdWV1ZUNsYXNzQW5kTm9kZSIsImZpbmlzaCIsIl90aGlzMiIsInJhZkhhbmRsZSIsImZsdXNoQ2xhc3NOYW1lQW5kTm9kZVF1ZXVlIiwic2Nyb2xsVG9wIiwiY2hpbGRyZW4iLCJjbG9uZUVsZW1lbnQiLCJDaGlsZHJlbiIsIm9ubHkiLCIuL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL1RyYW5zaXRpb25Hcm91cC5qcyIsIl9jaGFpbkZ1bmN0aW9uIiwiX2NoYWluRnVuY3Rpb24yIiwiX3dhcm5pbmciLCJfQ2hpbGRNYXBwaW5nIiwiYW55IiwiZnVuYyIsImNvbXBvbmVudCIsIlRyYW5zaXRpb25Hcm91cCIsImNvbnRleHQiLCJwZXJmb3JtQXBwZWFyIiwiY3VycmVudGx5VHJhbnNpdGlvbmluZ0tleXMiLCJfaGFuZGxlRG9uZUFwcGVhcmluZyIsImJpbmQiLCJjb21wb25lbnREaWRBcHBlYXIiLCJjdXJyZW50Q2hpbGRNYXBwaW5nIiwiZ2V0Q2hpbGRNYXBwaW5nIiwicGVyZm9ybUxlYXZlIiwicGVyZm9ybUVudGVyIiwiX2hhbmRsZURvbmVFbnRlcmluZyIsImNvbXBvbmVudERpZEVudGVyIiwiX2hhbmRsZURvbmVMZWF2aW5nIiwiY29tcG9uZW50RGlkTGVhdmUiLCJrZXlzVG9FbnRlciIsInNldFN0YXRlIiwic3RhdGUiLCJuZXdDaGlsZHJlbiIsImNoaWxkUmVmcyIsImtleXNUb0xlYXZlIiwiY29tcG9uZW50RGlkTW91bnQiLCJpbml0aWFsQ2hpbGRNYXBwaW5nIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIm5leHRQcm9wcyIsIm5leHRDaGlsZE1hcHBpbmciLCJwcmV2Q2hpbGRNYXBwaW5nIiwibWVyZ2VDaGlsZE1hcHBpbmdzIiwiaGFzUHJldiIsImhhc05leHQiLCJjb21wb25lbnREaWRVcGRhdGUiLCJfdGhpczMiLCJjaGlsZHJlblRvUmVuZGVyIiwiaXNDYWxsYmFja1JlZiIsInJlZiIsImZhY3RvcnlDaGlsZCIsInIiLCIuL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL3V0aWxzL0NoaWxkTWFwcGluZy5qcyIsInJlc3VsdCIsIm1hcCIsImdldFZhbHVlRm9yS2V5IiwibmV4dEtleXNQZW5kaW5nIiwicGVuZGluZ0tleXMiLCJwcmV2S2V5IiwiY2hpbGRNYXBwaW5nIiwibmV4dEtleSIsInBlbmRpbmdOZXh0S2V5IiwiLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC91dGlscy9Qcm9wVHlwZXMuanMiLCJ0cmFuc2l0aW9uVHlwZSIsInRpbWVvdXRQcm9wTmFtZSIsImVuYWJsZWRQcm9wTmFtZSIsIkVycm9yIiwib25lT2ZUeXBlIiwic3RyaW5nIiwic2hhcGUiLCJhY3RpdmUiLCJlbnRlckFjdGl2ZSIsImxlYXZlQWN0aXZlIiwiYXBwZWFyQWN0aXZlIiwiLi9ub2RlX21vZHVsZXMvcmVzZWxlY3QvbGliL2luZGV4LmpzIiwiZGVmYXVsdEVxdWFsaXR5Q2hlY2siLCJhIiwiYiIsImFyZUFyZ3VtZW50c1NoYWxsb3dseUVxdWFsIiwiZXF1YWxpdHlDaGVjayIsImRlZmF1bHRNZW1vaXplIiwibGFzdEFyZ3MiLCJsYXN0UmVzdWx0IiwiZ2V0RGVwZW5kZW5jaWVzIiwiZnVuY3MiLCJkZXBlbmRlbmNpZXMiLCJpc0FycmF5IiwiZXZlcnkiLCJkZXAiLCJkZXBlbmRlbmN5VHlwZXMiLCJqb2luIiwiY3JlYXRlU2VsZWN0b3JDcmVhdG9yIiwibWVtb2l6ZSIsIm1lbW9pemVPcHRpb25zIiwiX2xlbjIiLCJfa2V5MiIsInJlY29tcHV0YXRpb25zIiwicmVzdWx0RnVuYyIsInBvcCIsIm1lbW9pemVkUmVzdWx0RnVuYyIsInNlbGVjdG9yIiwicGFyYW1zIiwicmVzZXRSZWNvbXB1dGF0aW9ucyIsImNyZWF0ZVN0cnVjdHVyZWRTZWxlY3RvciIsInNlbGVjdG9ycyIsInNlbGVjdG9yQ3JlYXRvciIsImNyZWF0ZVNlbGVjdG9yIiwib2JqZWN0S2V5cyIsIl9sZW4zIiwidmFsdWVzIiwiX2tleTMiLCJjb21wb3NpdGlvbiIsImluZGV4IiwiLi9zcmMvY29tcG9uZW50cy9EZXZpY2VMaXN0SXRlbS9EZXZpY2VMaXN0SXRlbS5qcyIsIl9jcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJkZXNjcmlwdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX3JlYWN0Um91dGVyRG9tIiwiX1RvZ2dsZVNldHRpbmdzIiwiX1RvZ2dsZVNldHRpbmdzMiIsIkRldmljZUxpc3RJdGVtIiwiZ2V0UHJvdG90eXBlT2YiLCJzZXREZXZpY2VJZCIsInNldFBvcHVwU2hvd24iLCJkYXRhIiwiX2lkIiwiTGluayIsInRvIiwiY2hlY2tlZCIsInN0YXR1cyIsIml0ZW1JZCIsInNldEl0ZW1WYWx1ZSIsImNoYW5nZVN0YXR1cyIsImxvY2F0aW9uIiwib25DbGljayIsImRlbGV0ZURldmljZSIsImJvb2xlYW4iLCIuL3NyYy9jb21wb25lbnRzL0RldmljZUxpc3RJdGVtL0RldmljZUxpc3RJdGVtLnNjc3MiLCIuL3NyYy9jb21wb25lbnRzL0RldmlzZXNTZWN0aW9uL0RldmlzZXNTZWN0aW9uLmpzIiwiX01lc3NhZ2UiLCJfUG9wdXAiLCJfQnV0dG9uIiwiX0xpc3RIZWFkZXIiLCJfTGlzdEhlYWRlcjIiLCJEZXZpY2VzU2VjdGlvbiIsImZpbHRlck9wdGlvbiIsImZpbHRlckFjdGlvbiIsImxvY2F0aW9uT2ZEZXZpY2VzIiwicXVhbnRpdHkiLCJoaXN0b3J5IiwibWF0Y2giLCJQb3B1cCIsInBvcHVwU2hvd24iLCJoZWFkZXIiLCJ0ZXh0IiwiQnV0dG9uIiwib2tIYW5kbGVyIiwiY3VycmVudElkIiwiaW5uZXJUZXh0IiwiTWVzc2FnZSIsImNsZWFyU3RhdHVzIiwibG9hZERldmljZXMiLCJkZXZpY2VzIiwiYXJyYXkiLCJvYmplY3QiLCIuL3NyYy9jb21wb25lbnRzL0ZpbHRlclNlbGVjdC9GaWx0ZXJTZWxlY3QuanMiLCJGaWx0ZXJTZWxlY3QiLCJvbkNoYW5nZSIsImhhbmRsZVNlbGVjdCIsIm9wdGlvbnMiLCJpdGVtIiwic2VsZWN0ZWQiLCIuL3NyYy9jb21wb25lbnRzL0ZpbHRlclNlbGVjdC9GaWx0ZXJTZWxlY3Quc2NzcyIsIi4vc3JjL2NvbXBvbmVudHMvTGlzdEhlYWRlci9MaXN0SGVhZGVyLmpzIiwiX3JlYWN0UmVkdXgiLCJfcXVlcnlTdHJpbmciLCJfcXVlcnlTdHJpbmcyIiwiX0ZpbHRlclNlbGVjdCIsIl9GaWx0ZXJTZWxlY3QyIiwiX1NlYXJjaCIsIl9TZWFyY2gyIiwiX2RldmljZXMiLCJfdXRpbHMiLCJfZmlsdGVyT3B0aW9ucyIsIkxpc3RIZWFkZXIiLCJpbml0aWFsUGFyYW1zIiwic2VhcmNoIiwiaGFuZGxlRmlsdGVyU2VsZWN0IiwidXBkYXRlVXJsIiwiaGFuZGxlU2VhcmNoUmVzdWx0Iiwic2VhcmNoVmFsdWUiLCJmaW5kSXRlbXMiLCJwYXRobmFtZSIsInVybCIsInF1ZXJ5RnJvbU9iamVjdCIsInBhcnNlIiwiZmlsdGVyVmFsdWUiLCJoYW5kbGVTZWFyY2giLCJtYXBTdGF0ZVRvUHJvcHMiLCJzZWFyY2hBbmRGaWx0ZXIiLCJtYXBEaXNwYXRjaFRvUHJvcHMiLCJkaXNwYXRjaCIsInNlYXJjaEFjdGlvbiIsImNvbm5lY3QiLCIuL3NyYy9jb21wb25lbnRzL1BhZ2luYXRpb24vUGFnaW5hdGlvbi5qcyIsIlBhZ2luYXRpb24iLCJwYWdlTnVtYmVycyIsImN1cnJlbnRQYWdlIiwidG90YWxQYWdlcyIsImhhbmRsZUNsaWNrIiwic2V0UGFnZSIsIi4vc3JjL2NvbXBvbmVudHMvUGFnaW5hdGlvbi9QYWdpbmF0aW9uLnNjc3MiLCIuL3NyYy9jb21wb25lbnRzL1NlYXJjaC9TZWFyY2guanMiLCJTZWFyY2giLCJ0eXBlIiwicGxhY2Vob2xkZXIiLCIuL3NyYy9jb21wb25lbnRzL1NlYXJjaC9zZWFyY2guc2NzcyIsIi4vc3JjL2NvbXBvbmVudHMvVG9nZ2xlU2V0dGluZ3MvVG9nZ2xlU2V0dGluZ3MuanMiLCJUb2dnbGVTZXR0aW5ncyIsIm9uQ2hhbmdlVmFsdWUiLCJkZXZpY2VJZCIsInN0eWxlTmFtZSIsImRldmljZSIsIm5ld1ZhbHVlIiwiLi9zcmMvY29tcG9uZW50cy9Ub2dnbGVTZXR0aW5ncy9Ub2dnbGVTdHlsZS5zY3NzIiwiLi9zcmMvZGF0YS9maWx0ZXJPcHRpb25zLmpzIiwiLi9zcmMvcGFnZXMvTG9jYXRpb25MaXN0L0xvY2F0aW9uTGlzdC5qcyIsIl9QYWdpbmF0aW9uIiwiX1BhZ2luYXRpb24yIiwiX0RldmljZUxpc3RJdGVtIiwiX0RldmljZUxpc3RJdGVtMiIsIl9EZXZpc2VzU2VjdGlvbiIsIl9EZXZpc2VzU2VjdGlvbjIiLCJfbm90aWZpY2F0aW9ucyIsIl9zZWxlY3RvcnMiLCJfcmVhY3RBZGRvbnNDc3NUcmFuc2l0aW9uR3JvdXAiLCJfcmVhY3RBZGRvbnNDc3NUcmFuc2l0aW9uR3JvdXAyIiwiTG9jYXRpb25MaXN0IiwiZGV2aWNlc1BlclBhZ2UiLCJjdXJyZW50U3RhdGUiLCJldmVudCIsIk51bWJlciIsInBhZ2VOdW1iZXIiLCJkZXZpY2VzSW5Mb2NhdGlvbiIsInJlbmRlckRldmljZXMiLCJfc3RhdGUiLCJjZWlsIiwiaW5kZXhPZkxhc3REZXZpY2UiLCJpbmRleE9mRmlyc3REZXZpY2UiLCJjdXJyZW50RGV2aWNlcyIsInNsaWNlIiwiZXJyb3JUZXh0IiwicmVuZGVyRGV2aWNlR3JvdXAiLCJsaXN0IiwiZmlsdGVySXRlbXMiLCJkZXZpY2VzTGlzdCIsInVwbG9hZFN0YXR1cyIsInVwZGF0ZURldmljZSIsInNlbmROb3RpZmljYXRpb25XUyIsIm1lc3NhZ2UiLCIuL3NyYy9zZWxlY3RvcnMvaW5kZXguanMiLCJfcmVzZWxlY3QiLCJnZXRGaWx0ZXJPcHRpb24iLCJnZXREZXZpY2VzIiwiZ2V0U2VhcmNoVmFsdWUiLCJpdGVtcyIsIm5ld0FyciIsInNlYXJjaEl0ZW0iXSwibWFwcGluZ3MiOiJBQUFBQSxjQUFjLElBRVJDLHlDQUNBLFNBQVVDLEVBQVFDLEVBQVNDLEdBRWpDLFlDSkFGLEdBQU9DLFFBQVUsV0FJZixJQUFLLEdBSERFLEdBQU1DLFVBQVVDLE9BQ2hCQyxLQUVLQyxFQUFJLEVBQUdBLEVBQUlKLEVBQUtJLElBQ3ZCRCxFQUFLQyxHQUFLSCxVQUFVRyxFQUl0QixJQUZBRCxFQUFPQSxFQUFLRSxPQUFPLFNBQVNDLEdBQUssTUFBYSxPQUFOQSxJQUVw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dkJpa0V0RHVCLDJCQUNBLFNBQVV6ZCxFQUFRQyxFQUFTQyxHQUVqQyxZQUdBcUIsUUFBT0MsZUFBZXZCLEVBQVMsY0FDN0J3QixPQUFPLElBRVR4QixFQUFRa2QsZ0JBQWNsYSxFd0JydkV0QixJQUFBeWEsR0FBQXhkLEVBQUEsd0NBQ0F5WSxFQUFBelksRUFBQSx3QkFFTXlkLEVBQWtCLFNBQUF4TyxHQUFBLE1BQVNBLEdBQU15SyxnQkFBZ0J0RCxjQUNqRHNILEVBQWEsU0FBQXpPLEdBQUEsTUFBU0EsR0FBTWlPLFlBQVk3RixTQUN4Q3NHLEVBQWlCLFNBQUExTyxHQUFBLE1BQVNBLEdBQU15SyxnQkFBZ0JULFlBRXpDZ0UsZ0JBQWMsRUFBQU8sRUFBQTdKLGlCQUN4QjhKLEVBQWlCRSxFQUFnQkQsR0FDbEMsU0FBQ3RILEVBQWM2QyxFQUFhMkUsR0FDMUIsR0FBSUMsR0FBU0QsQ0FTYixPQVBxQixRQUFqQnhILEVBQ0Z5SCxFQUFTRCxFQUNpQixPQUFqQnhILEVBQ1R5SCxFQUFTRCxFQUFNdGQsT0FBTyxTQUFBdVgsR0FBQSxPQUF3QixJQUFoQkEsRUFBS3pDLFNBQ1QsUUFBakJnQixJQUNUeUgsRUFBU0QsRUFBTXRkLE9BQU8sU0FBQXVYLEdBQUEsT0FBd0IsSUFBaEJBLEVBQUt6QyxVQUU5QnlJLEVBQU92ZCxPQUFPLFNBQUF1WCxHQUFBLE9BQVEsRUFBQVksRUFBQXFGLFlBQVdqRyxFQUFNb0IiLCJmaWxlIjoiMS5pbmRleF9idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ3ZWJwYWNrSnNvbnAoWzFdLHtcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9jaGFpbi1mdW5jdGlvbi9pbmRleC5qc1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNoYWluKCkge1xuICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGFyZ3MgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgfWFyZ3MgPSBhcmdzLmZpbHRlcihmdW5jdGlvbiAoZm4pIHtcbiAgICByZXR1cm4gZm4gIT0gbnVsbDtcbiAgfSk7XG5cbiAgaWYgKGFyZ3MubGVuZ3RoID09PSAwKSByZXR1cm4gdW5kZWZpbmVkO1xuICBpZiAoYXJncy5sZW5ndGggPT09IDEpIHJldHVybiBhcmdzWzBdO1xuXG4gIHJldHVybiBhcmdzLnJlZHVjZShmdW5jdGlvbiAoY3VycmVudCwgbmV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBjaGFpbmVkRnVuY3Rpb24oKSB7XG4gICAgICBjdXJyZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBuZXh0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfSk7XG59O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9jbGFzcy9hZGRDbGFzcy5qc1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gYWRkQ2xhc3M7XG5cbnZhciBfaGFzQ2xhc3MgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvY2xhc3MvaGFzQ2xhc3MuanNcIik7XG5cbnZhciBfaGFzQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGFzQ2xhc3MpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTtcbn1cblxuZnVuY3Rpb24gYWRkQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKSB7XG4gIGlmIChlbGVtZW50LmNsYXNzTGlzdCkgZWxlbWVudC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7ZWxzZSBpZiAoISgwLCBfaGFzQ2xhc3MyLmRlZmF1bHQpKGVsZW1lbnQpKSBlbGVtZW50LmNsYXNzTmFtZSA9IGVsZW1lbnQuY2xhc3NOYW1lICsgJyAnICsgY2xhc3NOYW1lO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2NsYXNzL2hhc0NsYXNzLmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBoYXNDbGFzcztcbmZ1bmN0aW9uIGhhc0NsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSkge1xuICBpZiAoZWxlbWVudC5jbGFzc0xpc3QpIHJldHVybiAhIWNsYXNzTmFtZSAmJiBlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpO2Vsc2UgcmV0dXJuIChcIiBcIiArIGVsZW1lbnQuY2xhc3NOYW1lICsgXCIgXCIpLmluZGV4T2YoXCIgXCIgKyBjbGFzc05hbWUgKyBcIiBcIikgIT09IC0xO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvY2xhc3MvcmVtb3ZlQ2xhc3MuanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZW1vdmVDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtlbHNlIGVsZW1lbnQuY2xhc3NOYW1lID0gZWxlbWVudC5jbGFzc05hbWUucmVwbGFjZShuZXcgUmVnRXhwKCcoXnxcXFxccyknICsgY2xhc3NOYW1lICsgJyg/OlxcXFxzfCQpJywgJ2cnKSwgJyQxJykucmVwbGFjZSgvXFxzKy9nLCAnICcpLnJlcGxhY2UoL15cXHMqfFxccyokL2csICcnKTtcbn07XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3RyYW5zaXRpb24vcHJvcGVydGllcy5qc1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5hbmltYXRpb25FbmQgPSBleHBvcnRzLmFuaW1hdGlvbkRlbGF5ID0gZXhwb3J0cy5hbmltYXRpb25UaW1pbmcgPSBleHBvcnRzLmFuaW1hdGlvbkR1cmF0aW9uID0gZXhwb3J0cy5hbmltYXRpb25OYW1lID0gZXhwb3J0cy50cmFuc2l0aW9uRW5kID0gZXhwb3J0cy50cmFuc2l0aW9uRHVyYXRpb24gPSBleHBvcnRzLnRyYW5zaXRpb25EZWxheSA9IGV4cG9ydHMudHJhbnNpdGlvblRpbWluZyA9IGV4cG9ydHMudHJhbnNpdGlvblByb3BlcnR5ID0gZXhwb3J0cy50cmFuc2Zvcm0gPSB1bmRlZmluZWQ7XG5cbnZhciBfaW5ET00gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvdXRpbC9pbkRPTS5qc1wiKTtcblxudmFyIF9pbkRPTTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbkRPTSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9O1xufVxuXG52YXIgdHJhbnNmb3JtID0gJ3RyYW5zZm9ybSc7XG52YXIgcHJlZml4ID0gdm9pZCAwLFxuICAgIHRyYW5zaXRpb25FbmQgPSB2b2lkIDAsXG4gICAgYW5pbWF0aW9uRW5kID0gdm9pZCAwO1xudmFyIHRyYW5zaXRpb25Qcm9wZXJ0eSA9IHZvaWQgMCxcbiAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSB2b2lkIDAsXG4gICAgdHJhbnNpdGlvblRpbWluZyA9IHZvaWQgMCxcbiAgICB0cmFuc2l0aW9uRGVsYXkgPSB2b2lkIDA7XG52YXIgYW5pbWF0aW9uTmFtZSA9IHZvaWQgMCxcbiAgICBhbmltYXRpb25EdXJhdGlvbiA9IHZvaWQgMCxcbiAgICBhbmltYXRpb25UaW1pbmcgPSB2b2lkIDAsXG4gICAgYW5pbWF0aW9uRGVsYXkgPSB2b2lkIDA7XG5cbmlmIChfaW5ET00yLmRlZmF1bHQpIHtcbiAgdmFyIF9nZXRUcmFuc2l0aW9uUHJvcGVydCA9IGdldFRyYW5zaXRpb25Qcm9wZXJ0aWVzKCk7XG5cbiAgcHJlZml4ID0gX2dldFRyYW5zaXRpb25Qcm9wZXJ0LnByZWZpeDtcbiAgZXhwb3J0cy50cmFuc2l0aW9uRW5kID0gdHJhbnNpdGlvbkVuZCA9IF9nZXRUcmFuc2l0aW9uUHJvcGVydC50cmFuc2l0aW9uRW5kO1xuICBleHBvcnRzLmFuaW1hdGlvbkVuZCA9IGFuaW1hdGlvbkVuZCA9IF9nZXRUcmFuc2l0aW9uUHJvcGVydC5hbmltYXRpb25FbmQ7XG5cbiAgZXhwb3J0cy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm0gPSBwcmVmaXggKyAnLScgKyB0cmFuc2Zvcm07XG4gIGV4cG9ydHMudHJhbnNpdGlvblByb3BlcnR5ID0gdHJhbnNpdGlvblByb3BlcnR5ID0gcHJlZml4ICsgJy10cmFuc2l0aW9uLXByb3BlcnR5JztcbiAgZXhwb3J0cy50cmFuc2l0aW9uRHVyYXRpb24gPSB0cmFuc2l0aW9uRHVyYXRpb24gPSBwcmVmaXggKyAnLXRyYW5zaXRpb24tZHVyYXRpb24nO1xuICBleHBvcnRzLnRyYW5zaXRpb25EZWxheSA9IHRyYW5zaXRpb25EZWxheSA9IHByZWZpeCArICctdHJhbnNpdGlvbi1kZWxheSc7XG4gIGV4cG9ydHMudHJhbnNpdGlvblRpbWluZyA9IHRyYW5zaXRpb25UaW1pbmcgPSBwcmVmaXggKyAnLXRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uJztcblxuICBleHBvcnRzLmFuaW1hdGlvbk5hbWUgPSBhbmltYXRpb25OYW1lID0gcHJlZml4ICsgJy1hbmltYXRpb24tbmFtZSc7XG4gIGV4cG9ydHMuYW5pbWF0aW9uRHVyYXRpb24gPSBhbmltYXRpb25EdXJhdGlvbiA9IHByZWZpeCArICctYW5pbWF0aW9uLWR1cmF0aW9uJztcbiAgZXhwb3J0cy5hbmltYXRpb25UaW1pbmcgPSBhbmltYXRpb25UaW1pbmcgPSBwcmVmaXggKyAnLWFuaW1hdGlvbi1kZWxheSc7XG4gIGV4cG9ydHMuYW5pbWF0aW9uRGVsYXkgPSBhbmltYXRpb25EZWxheSA9IHByZWZpeCArICctYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbic7XG59XG5cbmV4cG9ydHMudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuZXhwb3J0cy50cmFuc2l0aW9uUHJvcGVydHkgPSB0cmFuc2l0aW9uUHJvcGVydHk7XG5leHBvcnRzLnRyYW5zaXRpb25UaW1pbmcgPSB0cmFuc2l0aW9uVGltaW5nO1xuZXhwb3J0cy50cmFuc2l0aW9uRGVsYXkgPSB0cmFuc2l0aW9uRGVsYXk7XG5leHBvcnRzLnRyYW5zaXRpb25EdXJhdGlvbiA9IHRyYW5zaXRpb25EdXJhdGlvbjtcbmV4cG9ydHMudHJhbnNpdGlvbkVuZCA9IHRyYW5zaXRpb25FbmQ7XG5leHBvcnRzLmFuaW1hdGlvbk5hbWUgPSBhbmltYXRpb25OYW1lO1xuZXhwb3J0cy5hbmltYXRpb25EdXJhdGlvbiA9IGFuaW1hdGlvbkR1cmF0aW9uO1xuZXhwb3J0cy5hbmltYXRpb25UaW1pbmcgPSBhbmltYXRpb25UaW1pbmc7XG5leHBvcnRzLmFuaW1hdGlvbkRlbGF5ID0gYW5pbWF0aW9uRGVsYXk7XG5leHBvcnRzLmFuaW1hdGlvbkVuZCA9IGFuaW1hdGlvbkVuZDtcbmV4cG9ydHMuZGVmYXVsdCA9IHtcbiAgdHJhbnNmb3JtOiB0cmFuc2Zvcm0sXG4gIGVuZDogdHJhbnNpdGlvbkVuZCxcbiAgcHJvcGVydHk6IHRyYW5zaXRpb25Qcm9wZXJ0eSxcbiAgdGltaW5nOiB0cmFuc2l0aW9uVGltaW5nLFxuICBkZWxheTogdHJhbnNpdGlvbkRlbGF5LFxuICBkdXJhdGlvbjogdHJhbnNpdGlvbkR1cmF0aW9uXG59O1xuXG5mdW5jdGlvbiBnZXRUcmFuc2l0aW9uUHJvcGVydGllcygpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jykuc3R5bGU7XG5cbiAgdmFyIHZlbmRvck1hcCA9IHtcbiAgICBPOiBmdW5jdGlvbiBPKGUpIHtcbiAgICAgIHJldHVybiAnbycgKyBlLnRvTG93ZXJDYXNlKCk7XG4gICAgfSxcbiAgICBNb3o6IGZ1bmN0aW9uIE1veihlKSB7XG4gICAgICByZXR1cm4gZS50b0xvd2VyQ2FzZSgpO1xuICAgIH0sXG4gICAgV2Via2l0OiBmdW5jdGlvbiBXZWJraXQoZSkge1xuICAgICAgcmV0dXJuICd3ZWJraXQnICsgZTtcbiAgICB9LFxuICAgIG1zOiBmdW5jdGlvbiBtcyhlKSB7XG4gICAgICByZXR1cm4gJ01TJyArIGU7XG4gICAgfVxuICB9O1xuXG4gIHZhciB2ZW5kb3JzID0gT2JqZWN0LmtleXModmVuZG9yTWFwKTtcblxuICB2YXIgdHJhbnNpdGlvbkVuZCA9IHZvaWQgMCxcbiAgICAgIGFuaW1hdGlvbkVuZCA9IHZvaWQgMDtcbiAgdmFyIHByZWZpeCA9ICcnO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmVuZG9ycy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB2ZW5kb3IgPSB2ZW5kb3JzW2ldO1xuXG4gICAgaWYgKHZlbmRvciArICdUcmFuc2l0aW9uUHJvcGVydHknIGluIHN0eWxlKSB7XG4gICAgICBwcmVmaXggPSAnLScgKyB2ZW5kb3IudG9Mb3dlckNhc2UoKTtcbiAgICAgIHRyYW5zaXRpb25FbmQgPSB2ZW5kb3JNYXBbdmVuZG9yXSgnVHJhbnNpdGlvbkVuZCcpO1xuICAgICAgYW5pbWF0aW9uRW5kID0gdmVuZG9yTWFwW3ZlbmRvcl0oJ0FuaW1hdGlvbkVuZCcpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKCF0cmFuc2l0aW9uRW5kICYmICd0cmFuc2l0aW9uUHJvcGVydHknIGluIHN0eWxlKSB0cmFuc2l0aW9uRW5kID0gJ3RyYW5zaXRpb25lbmQnO1xuXG4gIGlmICghYW5pbWF0aW9uRW5kICYmICdhbmltYXRpb25OYW1lJyBpbiBzdHlsZSkgYW5pbWF0aW9uRW5kID0gJ2FuaW1hdGlvbmVuZCc7XG5cbiAgc3R5bGUgPSBudWxsO1xuXG4gIHJldHVybiB7IGFuaW1hdGlvbkVuZDogYW5pbWF0aW9uRW5kLCB0cmFuc2l0aW9uRW5kOiB0cmFuc2l0aW9uRW5kLCBwcmVmaXg6IHByZWZpeCB9O1xufVxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9kb20taGVscGVycy91dGlsL2luRE9NLmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3V0aWwvcmVxdWVzdEFuaW1hdGlvbkZyYW1lLmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfaW5ET00gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvdXRpbC9pbkRPTS5qc1wiKTtcblxudmFyIF9pbkRPTTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbkRPTSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9O1xufVxuXG52YXIgdmVuZG9ycyA9IFsnJywgJ3dlYmtpdCcsICdtb3onLCAnbycsICdtcyddO1xudmFyIGNhbmNlbCA9ICdjbGVhclRpbWVvdXQnO1xudmFyIHJhZiA9IGZhbGxiYWNrO1xudmFyIGNvbXBhdFJhZiA9IHZvaWQgMDtcblxudmFyIGdldEtleSA9IGZ1bmN0aW9uIGdldEtleSh2ZW5kb3IsIGspIHtcbiAgcmV0dXJuIHZlbmRvciArICghdmVuZG9yID8gayA6IGtbMF0udG9VcHBlckNhc2UoKSArIGsuc3Vic3RyKDEpKSArICdBbmltYXRpb25GcmFtZSc7XG59O1xuXG5pZiAoX2luRE9NMi5kZWZhdWx0KSB7XG4gIHZlbmRvcnMuc29tZShmdW5jdGlvbiAodmVuZG9yKSB7XG4gICAgdmFyIHJhZktleSA9IGdldEtleSh2ZW5kb3IsICdyZXF1ZXN0Jyk7XG5cbiAgICBpZiAocmFmS2V5IGluIHdpbmRvdykge1xuICAgICAgY2FuY2VsID0gZ2V0S2V5KHZlbmRvciwgJ2NhbmNlbCcpO1xuICAgICAgcmV0dXJuIHJhZiA9IGZ1bmN0aW9uIHJhZihjYikge1xuICAgICAgICByZXR1cm4gd2luZG93W3JhZktleV0oY2IpO1xuICAgICAgfTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKiBodHRwczovL2dpdGh1Yi5jb20vY29tcG9uZW50L3JhZiAqL1xudmFyIHByZXYgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbmZ1bmN0aW9uIGZhbGxiYWNrKGZuKSB7XG4gIHZhciBjdXJyID0gbmV3IERhdGUoKS5nZXRUaW1lKCksXG4gICAgICBtcyA9IE1hdGgubWF4KDAsIDE2IC0gKGN1cnIgLSBwcmV2KSksXG4gICAgICByZXEgPSBzZXRUaW1lb3V0KGZuLCBtcyk7XG5cbiAgcHJldiA9IGN1cnI7XG4gIHJldHVybiByZXE7XG59XG5cbmNvbXBhdFJhZiA9IGZ1bmN0aW9uIGNvbXBhdFJhZihjYikge1xuICByZXR1cm4gcmFmKGNiKTtcbn07XG5jb21wYXRSYWYuY2FuY2VsID0gZnVuY3Rpb24gKGlkKSB7XG4gIHdpbmRvd1tjYW5jZWxdICYmIHR5cGVvZiB3aW5kb3dbY2FuY2VsXSA9PT0gJ2Z1bmN0aW9uJyAmJiB3aW5kb3dbY2FuY2VsXShpZCk7XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gY29tcGF0UmFmO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL3JlYWN0LWFkZG9ucy1jc3MtdHJhbnNpdGlvbi1ncm91cC9pbmRleC5qc1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL0NTU1RyYW5zaXRpb25Hcm91cC5qc1wiKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9DU1NUcmFuc2l0aW9uR3JvdXAuanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO2ZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9cmV0dXJuIHRhcmdldDtcbn07XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcmVhY3QvcmVhY3QuanNcIik7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzXCIpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX1RyYW5zaXRpb25Hcm91cCA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL1RyYW5zaXRpb25Hcm91cC5qc1wiKTtcblxudmFyIF9UcmFuc2l0aW9uR3JvdXAyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVHJhbnNpdGlvbkdyb3VwKTtcblxudmFyIF9DU1NUcmFuc2l0aW9uR3JvdXBDaGlsZCA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL0NTU1RyYW5zaXRpb25Hcm91cENoaWxkLmpzXCIpO1xuXG52YXIgX0NTU1RyYW5zaXRpb25Hcm91cENoaWxkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NTU1RyYW5zaXRpb25Hcm91cENoaWxkKTtcblxudmFyIF9Qcm9wVHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC91dGlscy9Qcm9wVHlwZXMuanNcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9O1xufVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gIGlmICghc2VsZikge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfXJldHVybiBjYWxsICYmICgodHlwZW9mIGNhbGwgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGNhbGwpKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xufVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgKHR5cGVvZiBzdXBlckNsYXNzID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihzdXBlckNsYXNzKSkpO1xuICB9c3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTtpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59XG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIHRyYW5zaXRpb25OYW1lOiBfUHJvcFR5cGVzLm5hbWVTaGFwZS5pc1JlcXVpcmVkLFxuXG4gIHRyYW5zaXRpb25BcHBlYXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgdHJhbnNpdGlvbkVudGVyOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIHRyYW5zaXRpb25MZWF2ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICB0cmFuc2l0aW9uQXBwZWFyVGltZW91dDogKDAsIF9Qcm9wVHlwZXMudHJhbnNpdGlvblRpbWVvdXQpKCdBcHBlYXInKSxcbiAgdHJhbnNpdGlvbkVudGVyVGltZW91dDogKDAsIF9Qcm9wVHlwZXMudHJhbnNpdGlvblRpbWVvdXQpKCdFbnRlcicpLFxuICB0cmFuc2l0aW9uTGVhdmVUaW1lb3V0OiAoMCwgX1Byb3BUeXBlcy50cmFuc2l0aW9uVGltZW91dCkoJ0xlYXZlJylcbn07XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIHRyYW5zaXRpb25BcHBlYXI6IGZhbHNlLFxuICB0cmFuc2l0aW9uRW50ZXI6IHRydWUsXG4gIHRyYW5zaXRpb25MZWF2ZTogdHJ1ZVxufTtcblxudmFyIENTU1RyYW5zaXRpb25Hcm91cCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhDU1NUcmFuc2l0aW9uR3JvdXAsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIENTU1RyYW5zaXRpb25Hcm91cCgpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENTU1RyYW5zaXRpb25Hcm91cCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuX3dyYXBDaGlsZCA9IGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9DU1NUcmFuc2l0aW9uR3JvdXBDaGlsZDIuZGVmYXVsdCwge1xuICAgICAgICBuYW1lOiBfdGhpcy5wcm9wcy50cmFuc2l0aW9uTmFtZSxcbiAgICAgICAgYXBwZWFyOiBfdGhpcy5wcm9wcy50cmFuc2l0aW9uQXBwZWFyLFxuICAgICAgICBlbnRlcjogX3RoaXMucHJvcHMudHJhbnNpdGlvbkVudGVyLFxuICAgICAgICBsZWF2ZTogX3RoaXMucHJvcHMudHJhbnNpdGlvbkxlYXZlLFxuICAgICAgICBhcHBlYXJUaW1lb3V0OiBfdGhpcy5wcm9wcy50cmFuc2l0aW9uQXBwZWFyVGltZW91dCxcbiAgICAgICAgZW50ZXJUaW1lb3V0OiBfdGhpcy5wcm9wcy50cmFuc2l0aW9uRW50ZXJUaW1lb3V0LFxuICAgICAgICBsZWF2ZVRpbWVvdXQ6IF90aGlzLnByb3BzLnRyYW5zaXRpb25MZWF2ZVRpbWVvdXRcbiAgICAgIH0sIGNoaWxkKTtcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIC8vIFdlIG5lZWQgdG8gcHJvdmlkZSB0aGlzIGNoaWxkRmFjdG9yeSBzbyB0aGF0XG4gIC8vIFJlYWN0Q1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQgY2FuIHJlY2VpdmUgdXBkYXRlcyB0byBuYW1lLCBlbnRlciwgYW5kXG4gIC8vIGxlYXZlIHdoaWxlIGl0IGlzIGxlYXZpbmcuXG5cblxuICBDU1NUcmFuc2l0aW9uR3JvdXAucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1RyYW5zaXRpb25Hcm91cDIuZGVmYXVsdCwgX2V4dGVuZHMoe30sIHRoaXMucHJvcHMsIHsgY2hpbGRGYWN0b3J5OiB0aGlzLl93cmFwQ2hpbGQgfSkpO1xuICB9O1xuXG4gIHJldHVybiBDU1NUcmFuc2l0aW9uR3JvdXA7XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5DU1NUcmFuc2l0aW9uR3JvdXAuZGlzcGxheU5hbWUgPSAnQ1NTVHJhbnNpdGlvbkdyb3VwJztcblxuQ1NTVHJhbnNpdGlvbkdyb3VwLnByb3BUeXBlcyA9ICBmYWxzZSA/IHByb3BUeXBlcyA6IHt9O1xuQ1NTVHJhbnNpdGlvbkdyb3VwLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuZXhwb3J0cy5kZWZhdWx0ID0gQ1NTVHJhbnNpdGlvbkdyb3VwO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvQ1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQuanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO2ZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9cmV0dXJuIHRhcmdldDtcbn07XG5cbnZhciBfYWRkQ2xhc3MgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvY2xhc3MvYWRkQ2xhc3MuanNcIik7XG5cbnZhciBfYWRkQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYWRkQ2xhc3MpO1xuXG52YXIgX3JlbW92ZUNsYXNzID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2NsYXNzL3JlbW92ZUNsYXNzLmpzXCIpO1xuXG52YXIgX3JlbW92ZUNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlbW92ZUNsYXNzKTtcblxudmFyIF9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvdXRpbC9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUuanNcIik7XG5cbnZhciBfcmVxdWVzdEFuaW1hdGlvbkZyYW1lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlcXVlc3RBbmltYXRpb25GcmFtZSk7XG5cbnZhciBfcHJvcGVydGllcyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9kb20taGVscGVycy90cmFuc2l0aW9uL3Byb3BlcnRpZXMuanNcIik7XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcmVhY3QvcmVhY3QuanNcIik7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzXCIpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX3JlYWN0RG9tID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qc1wiKTtcblxudmFyIF9Qcm9wVHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC91dGlscy9Qcm9wVHlwZXMuanNcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9O1xufVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gIGlmICghc2VsZikge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfXJldHVybiBjYWxsICYmICgodHlwZW9mIGNhbGwgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGNhbGwpKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xufVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgKHR5cGVvZiBzdXBlckNsYXNzID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihzdXBlckNsYXNzKSkpO1xuICB9c3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTtpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59XG5cbnZhciBldmVudHMgPSBbXTtcbmlmIChfcHJvcGVydGllcy50cmFuc2l0aW9uRW5kKSBldmVudHMucHVzaChfcHJvcGVydGllcy50cmFuc2l0aW9uRW5kKTtcbmlmIChfcHJvcGVydGllcy5hbmltYXRpb25FbmQpIGV2ZW50cy5wdXNoKF9wcm9wZXJ0aWVzLmFuaW1hdGlvbkVuZCk7XG5cbmZ1bmN0aW9uIGFkZEVuZExpc3RlbmVyKG5vZGUsIGxpc3RlbmVyKSB7XG4gIGlmIChldmVudHMubGVuZ3RoKSB7XG4gICAgZXZlbnRzLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZSwgbGlzdGVuZXIsIGZhbHNlKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBzZXRUaW1lb3V0KGxpc3RlbmVyLCAwKTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFldmVudHMubGVuZ3RoKSByZXR1cm47XG4gICAgZXZlbnRzLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZSwgbGlzdGVuZXIsIGZhbHNlKTtcbiAgICB9KTtcbiAgfTtcbn1cblxudmFyIHByb3BUeXBlcyA9IHtcbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQubm9kZSxcbiAgbmFtZTogX1Byb3BUeXBlcy5uYW1lU2hhcGUuaXNSZXF1aXJlZCxcblxuICAvLyBPbmNlIHdlIHJlcXVpcmUgdGltZW91dHMgdG8gYmUgc3BlY2lmaWVkLCB3ZSBjYW4gcmVtb3ZlIHRoZVxuICAvLyBib29sZWFuIGZsYWdzIChhcHBlYXIgZXRjLikgYW5kIGp1c3QgYWNjZXB0IGEgbnVtYmVyXG4gIC8vIG9yIGEgYm9vbCBmb3IgdGhlIHRpbWVvdXQgZmxhZ3MgKGFwcGVhclRpbWVvdXQgZXRjLilcbiAgYXBwZWFyOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIGVudGVyOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIGxlYXZlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIGFwcGVhclRpbWVvdXQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICBlbnRlclRpbWVvdXQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICBsZWF2ZVRpbWVvdXQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyXG59O1xuXG52YXIgQ1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoQ1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIENTU1RyYW5zaXRpb25Hcm91cENoaWxkKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmNvbXBvbmVudFdpbGxBcHBlYXIgPSBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLmFwcGVhcikge1xuICAgICAgICBfdGhpcy50cmFuc2l0aW9uKCdhcHBlYXInLCBkb25lLCBfdGhpcy5wcm9wcy5hcHBlYXJUaW1lb3V0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5jb21wb25lbnRXaWxsRW50ZXIgPSBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLmVudGVyKSB7XG4gICAgICAgIF90aGlzLnRyYW5zaXRpb24oJ2VudGVyJywgZG9uZSwgX3RoaXMucHJvcHMuZW50ZXJUaW1lb3V0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5jb21wb25lbnRXaWxsTGVhdmUgPSBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLmxlYXZlKSB7XG4gICAgICAgIF90aGlzLnRyYW5zaXRpb24oJ2xlYXZlJywgZG9uZSwgX3RoaXMucHJvcHMubGVhdmVUaW1lb3V0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH1cbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIENTU1RyYW5zaXRpb25Hcm91cENoaWxkLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgdGhpcy5jbGFzc05hbWVBbmROb2RlUXVldWUgPSBbXTtcbiAgICB0aGlzLnRyYW5zaXRpb25UaW1lb3V0cyA9IFtdO1xuICB9O1xuXG4gIENTU1RyYW5zaXRpb25Hcm91cENoaWxkLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMudW5tb3VudGVkID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLnRpbWVvdXQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpO1xuICAgIH1cbiAgICB0aGlzLnRyYW5zaXRpb25UaW1lb3V0cy5mb3JFYWNoKGZ1bmN0aW9uICh0aW1lb3V0KSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLmNsYXNzTmFtZUFuZE5vZGVRdWV1ZS5sZW5ndGggPSAwO1xuICB9O1xuXG4gIENTU1RyYW5zaXRpb25Hcm91cENoaWxkLnByb3RvdHlwZS50cmFuc2l0aW9uID0gZnVuY3Rpb24gdHJhbnNpdGlvbihhbmltYXRpb25UeXBlLCBmaW5pc2hDYWxsYmFjaywgdGltZW91dCkge1xuICAgIHZhciBub2RlID0gKDAsIF9yZWFjdERvbS5maW5kRE9NTm9kZSkodGhpcyk7XG5cbiAgICBpZiAoIW5vZGUpIHtcbiAgICAgIGlmIChmaW5pc2hDYWxsYmFjaykge1xuICAgICAgICBmaW5pc2hDYWxsYmFjaygpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBjbGFzc05hbWUgPSB0aGlzLnByb3BzLm5hbWVbYW5pbWF0aW9uVHlwZV0gfHwgdGhpcy5wcm9wcy5uYW1lICsgJy0nICsgYW5pbWF0aW9uVHlwZTtcbiAgICB2YXIgYWN0aXZlQ2xhc3NOYW1lID0gdGhpcy5wcm9wcy5uYW1lW2FuaW1hdGlvblR5cGUgKyAnQWN0aXZlJ10gfHwgY2xhc3NOYW1lICsgJy1hY3RpdmUnO1xuICAgIHZhciB0aW1lciA9IG51bGw7XG4gICAgdmFyIHJlbW92ZUxpc3RlbmVycyA9IHZvaWQgMDtcblxuICAgICgwLCBfYWRkQ2xhc3MyLmRlZmF1bHQpKG5vZGUsIGNsYXNzTmFtZSk7XG5cbiAgICAvLyBOZWVkIHRvIGRvIHRoaXMgdG8gYWN0dWFsbHkgdHJpZ2dlciBhIHRyYW5zaXRpb24uXG4gICAgdGhpcy5xdWV1ZUNsYXNzQW5kTm9kZShhY3RpdmVDbGFzc05hbWUsIG5vZGUpO1xuXG4gICAgLy8gQ2xlYW4tdXAgdGhlIGFuaW1hdGlvbiBhZnRlciB0aGUgc3BlY2lmaWVkIGRlbGF5XG4gICAgdmFyIGZpbmlzaCA9IGZ1bmN0aW9uIGZpbmlzaChlKSB7XG4gICAgICBpZiAoZSAmJiBlLnRhcmdldCAhPT0gbm9kZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICBpZiAocmVtb3ZlTGlzdGVuZXJzKSByZW1vdmVMaXN0ZW5lcnMoKTtcblxuICAgICAgKDAsIF9yZW1vdmVDbGFzczIuZGVmYXVsdCkobm9kZSwgY2xhc3NOYW1lKTtcbiAgICAgICgwLCBfcmVtb3ZlQ2xhc3MyLmRlZmF1bHQpKG5vZGUsIGFjdGl2ZUNsYXNzTmFtZSk7XG5cbiAgICAgIGlmIChyZW1vdmVMaXN0ZW5lcnMpIHJlbW92ZUxpc3RlbmVycygpO1xuXG4gICAgICAvLyBVc3VhbGx5IHRoaXMgb3B0aW9uYWwgY2FsbGJhY2sgaXMgdXNlZCBmb3IgaW5mb3JtaW5nIGFuIG93bmVyIG9mXG4gICAgICAvLyBhIGxlYXZlIGFuaW1hdGlvbiBhbmQgdGVsbGluZyBpdCB0byByZW1vdmUgdGhlIGNoaWxkLlxuICAgICAgaWYgKGZpbmlzaENhbGxiYWNrKSB7XG4gICAgICAgIGZpbmlzaENhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmICh0aW1lb3V0KSB7XG4gICAgICB0aW1lciA9IHNldFRpbWVvdXQoZmluaXNoLCB0aW1lb3V0KTtcbiAgICAgIHRoaXMudHJhbnNpdGlvblRpbWVvdXRzLnB1c2godGltZXIpO1xuICAgIH0gZWxzZSBpZiAoX3Byb3BlcnRpZXMudHJhbnNpdGlvbkVuZCkge1xuICAgICAgcmVtb3ZlTGlzdGVuZXJzID0gYWRkRW5kTGlzdGVuZXIobm9kZSwgZmluaXNoKTtcbiAgICB9XG4gIH07XG5cbiAgQ1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQucHJvdG90eXBlLnF1ZXVlQ2xhc3NBbmROb2RlID0gZnVuY3Rpb24gcXVldWVDbGFzc0FuZE5vZGUoY2xhc3NOYW1lLCBub2RlKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB0aGlzLmNsYXNzTmFtZUFuZE5vZGVRdWV1ZS5wdXNoKHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgbm9kZTogbm9kZVxuICAgIH0pO1xuXG4gICAgaWYgKCF0aGlzLnJhZkhhbmRsZSkge1xuICAgICAgdGhpcy5yYWZIYW5kbGUgPSAoMCwgX3JlcXVlc3RBbmltYXRpb25GcmFtZTIuZGVmYXVsdCkoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMyLmZsdXNoQ2xhc3NOYW1lQW5kTm9kZVF1ZXVlKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgQ1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQucHJvdG90eXBlLmZsdXNoQ2xhc3NOYW1lQW5kTm9kZVF1ZXVlID0gZnVuY3Rpb24gZmx1c2hDbGFzc05hbWVBbmROb2RlUXVldWUoKSB7XG4gICAgaWYgKCF0aGlzLnVubW91bnRlZCkge1xuICAgICAgdGhpcy5jbGFzc05hbWVBbmROb2RlUXVldWUuZm9yRWFjaChmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIC8vIFRoaXMgaXMgZm9yIHRvIGZvcmNlIGEgcmVwYWludCxcbiAgICAgICAgLy8gd2hpY2ggaXMgbmVjZXNzYXJ5IGluIG9yZGVyIHRvIHRyYW5zaXRpb24gc3R5bGVzIHdoZW4gYWRkaW5nIGEgY2xhc3MgbmFtZS5cbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLWV4cHJlc3Npb25zICovXG4gICAgICAgIG9iai5ub2RlLnNjcm9sbFRvcDtcbiAgICAgICAgLyogZXNsaW50LWVuYWJsZSBuby11bnVzZWQtZXhwcmVzc2lvbnMgKi9cbiAgICAgICAgKDAsIF9hZGRDbGFzczIuZGVmYXVsdCkob2JqLm5vZGUsIG9iai5jbGFzc05hbWUpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXMuY2xhc3NOYW1lQW5kTm9kZVF1ZXVlLmxlbmd0aCA9IDA7XG4gICAgdGhpcy5yYWZIYW5kbGUgPSBudWxsO1xuICB9O1xuXG4gIENTU1RyYW5zaXRpb25Hcm91cENoaWxkLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIHRoaXMucHJvcHMpO1xuICAgIGRlbGV0ZSBwcm9wcy5uYW1lO1xuICAgIGRlbGV0ZSBwcm9wcy5hcHBlYXI7XG4gICAgZGVsZXRlIHByb3BzLmVudGVyO1xuICAgIGRlbGV0ZSBwcm9wcy5sZWF2ZTtcbiAgICBkZWxldGUgcHJvcHMuYXBwZWFyVGltZW91dDtcbiAgICBkZWxldGUgcHJvcHMuZW50ZXJUaW1lb3V0O1xuICAgIGRlbGV0ZSBwcm9wcy5sZWF2ZVRpbWVvdXQ7XG4gICAgZGVsZXRlIHByb3BzLmNoaWxkcmVuO1xuICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY2xvbmVFbGVtZW50KF9yZWFjdDIuZGVmYXVsdC5DaGlsZHJlbi5vbmx5KHRoaXMucHJvcHMuY2hpbGRyZW4pLCBwcm9wcyk7XG4gIH07XG5cbiAgcmV0dXJuIENTU1RyYW5zaXRpb25Hcm91cENoaWxkO1xufShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuQ1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQuZGlzcGxheU5hbWUgPSAnQ1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQnO1xuXG5DU1NUcmFuc2l0aW9uR3JvdXBDaGlsZC5wcm9wVHlwZXMgPSAgZmFsc2UgPyBwcm9wVHlwZXMgOiB7fTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gQ1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9UcmFuc2l0aW9uR3JvdXAuanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO2ZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9cmV0dXJuIHRhcmdldDtcbn07XG5cbnZhciBfY2hhaW5GdW5jdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9jaGFpbi1mdW5jdGlvbi9pbmRleC5qc1wiKTtcblxudmFyIF9jaGFpbkZ1bmN0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NoYWluRnVuY3Rpb24pO1xuXG52YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3JlYWN0L3JlYWN0LmpzXCIpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qc1wiKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF93YXJuaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3dhcm5pbmcvYnJvd3Nlci5qc1wiKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG52YXIgX0NoaWxkTWFwcGluZyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL3V0aWxzL0NoaWxkTWFwcGluZy5qc1wiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07XG59XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgaWYgKCFzZWxmKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9cmV0dXJuIGNhbGwgJiYgKCh0eXBlb2YgY2FsbCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoY2FsbCkpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG59XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyAodHlwZW9mIHN1cGVyQ2xhc3MgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHN1cGVyQ2xhc3MpKSk7XG4gIH1zdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pO2lmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn1cblxudmFyIHByb3BUeXBlcyA9IHtcbiAgY29tcG9uZW50OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmFueSxcbiAgY2hpbGRGYWN0b3J5OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm5vZGVcbn07XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGNvbXBvbmVudDogJ3NwYW4nLFxuICBjaGlsZEZhY3Rvcnk6IGZ1bmN0aW9uIGNoaWxkRmFjdG9yeShjaGlsZCkge1xuICAgIHJldHVybiBjaGlsZDtcbiAgfVxufTtcblxudmFyIFRyYW5zaXRpb25Hcm91cCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhUcmFuc2l0aW9uR3JvdXAsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRyYW5zaXRpb25Hcm91cChwcm9wcywgY29udGV4dCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUcmFuc2l0aW9uR3JvdXApO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSk7XG5cbiAgICBfdGhpcy5wZXJmb3JtQXBwZWFyID0gZnVuY3Rpb24gKGtleSwgY29tcG9uZW50KSB7XG4gICAgICBfdGhpcy5jdXJyZW50bHlUcmFuc2l0aW9uaW5nS2V5c1trZXldID0gdHJ1ZTtcblxuICAgICAgaWYgKGNvbXBvbmVudC5jb21wb25lbnRXaWxsQXBwZWFyKSB7XG4gICAgICAgIGNvbXBvbmVudC5jb21wb25lbnRXaWxsQXBwZWFyKF90aGlzLl9oYW5kbGVEb25lQXBwZWFyaW5nLmJpbmQoX3RoaXMsIGtleSwgY29tcG9uZW50KSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpcy5faGFuZGxlRG9uZUFwcGVhcmluZyhrZXksIGNvbXBvbmVudCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLl9oYW5kbGVEb25lQXBwZWFyaW5nID0gZnVuY3Rpb24gKGtleSwgY29tcG9uZW50KSB7XG4gICAgICBpZiAoY29tcG9uZW50LmNvbXBvbmVudERpZEFwcGVhcikge1xuICAgICAgICBjb21wb25lbnQuY29tcG9uZW50RGlkQXBwZWFyKCk7XG4gICAgICB9XG5cbiAgICAgIGRlbGV0ZSBfdGhpcy5jdXJyZW50bHlUcmFuc2l0aW9uaW5nS2V5c1trZXldO1xuXG4gICAgICB2YXIgY3VycmVudENoaWxkTWFwcGluZyA9ICgwLCBfQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZykoX3RoaXMucHJvcHMuY2hpbGRyZW4pO1xuXG4gICAgICBpZiAoIWN1cnJlbnRDaGlsZE1hcHBpbmcgfHwgIWN1cnJlbnRDaGlsZE1hcHBpbmcuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAvLyBUaGlzIHdhcyByZW1vdmVkIGJlZm9yZSBpdCBoYWQgZnVsbHkgYXBwZWFyZWQuIFJlbW92ZSBpdC5cbiAgICAgICAgX3RoaXMucGVyZm9ybUxlYXZlKGtleSwgY29tcG9uZW50KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMucGVyZm9ybUVudGVyID0gZnVuY3Rpb24gKGtleSwgY29tcG9uZW50KSB7XG4gICAgICBfdGhpcy5jdXJyZW50bHlUcmFuc2l0aW9uaW5nS2V5c1trZXldID0gdHJ1ZTtcblxuICAgICAgaWYgKGNvbXBvbmVudC5jb21wb25lbnRXaWxsRW50ZXIpIHtcbiAgICAgICAgY29tcG9uZW50LmNvbXBvbmVudFdpbGxFbnRlcihfdGhpcy5faGFuZGxlRG9uZUVudGVyaW5nLmJpbmQoX3RoaXMsIGtleSwgY29tcG9uZW50KSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpcy5faGFuZGxlRG9uZUVudGVyaW5nKGtleSwgY29tcG9uZW50KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuX2hhbmRsZURvbmVFbnRlcmluZyA9IGZ1bmN0aW9uIChrZXksIGNvbXBvbmVudCkge1xuICAgICAgaWYgKGNvbXBvbmVudC5jb21wb25lbnREaWRFbnRlcikge1xuICAgICAgICBjb21wb25lbnQuY29tcG9uZW50RGlkRW50ZXIoKTtcbiAgICAgIH1cblxuICAgICAgZGVsZXRlIF90aGlzLmN1cnJlbnRseVRyYW5zaXRpb25pbmdLZXlzW2tleV07XG5cbiAgICAgIHZhciBjdXJyZW50Q2hpbGRNYXBwaW5nID0gKDAsIF9DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKShfdGhpcy5wcm9wcy5jaGlsZHJlbik7XG5cbiAgICAgIGlmICghY3VycmVudENoaWxkTWFwcGluZyB8fCAhY3VycmVudENoaWxkTWFwcGluZy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIC8vIFRoaXMgd2FzIHJlbW92ZWQgYmVmb3JlIGl0IGhhZCBmdWxseSBlbnRlcmVkLiBSZW1vdmUgaXQuXG4gICAgICAgIF90aGlzLnBlcmZvcm1MZWF2ZShrZXksIGNvbXBvbmVudCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLnBlcmZvcm1MZWF2ZSA9IGZ1bmN0aW9uIChrZXksIGNvbXBvbmVudCkge1xuICAgICAgX3RoaXMuY3VycmVudGx5VHJhbnNpdGlvbmluZ0tleXNba2V5XSA9IHRydWU7XG5cbiAgICAgIGlmIChjb21wb25lbnQuY29tcG9uZW50V2lsbExlYXZlKSB7XG4gICAgICAgIGNvbXBvbmVudC5jb21wb25lbnRXaWxsTGVhdmUoX3RoaXMuX2hhbmRsZURvbmVMZWF2aW5nLmJpbmQoX3RoaXMsIGtleSwgY29tcG9uZW50KSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBOb3RlIHRoYXQgdGhpcyBpcyBzb21ld2hhdCBkYW5nZXJvdXMgYi9jIGl0IGNhbGxzIHNldFN0YXRlKClcbiAgICAgICAgLy8gYWdhaW4sIGVmZmVjdGl2ZWx5IG11dGF0aW5nIHRoZSBjb21wb25lbnQgYmVmb3JlIGFsbCB0aGUgd29ya1xuICAgICAgICAvLyBpcyBkb25lLlxuICAgICAgICBfdGhpcy5faGFuZGxlRG9uZUxlYXZpbmcoa2V5LCBjb21wb25lbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5faGFuZGxlRG9uZUxlYXZpbmcgPSBmdW5jdGlvbiAoa2V5LCBjb21wb25lbnQpIHtcbiAgICAgIGlmIChjb21wb25lbnQuY29tcG9uZW50RGlkTGVhdmUpIHtcbiAgICAgICAgY29tcG9uZW50LmNvbXBvbmVudERpZExlYXZlKCk7XG4gICAgICB9XG5cbiAgICAgIGRlbGV0ZSBfdGhpcy5jdXJyZW50bHlUcmFuc2l0aW9uaW5nS2V5c1trZXldO1xuXG4gICAgICB2YXIgY3VycmVudENoaWxkTWFwcGluZyA9ICgwLCBfQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZykoX3RoaXMucHJvcHMuY2hpbGRyZW4pO1xuXG4gICAgICBpZiAoY3VycmVudENoaWxkTWFwcGluZyAmJiBjdXJyZW50Q2hpbGRNYXBwaW5nLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgLy8gVGhpcyBlbnRlcmVkIGFnYWluIGJlZm9yZSBpdCBmdWxseSBsZWZ0LiBBZGQgaXQgYWdhaW4uXG4gICAgICAgIF90aGlzLmtleXNUb0VudGVyLnB1c2goa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICAgIHZhciBuZXdDaGlsZHJlbiA9IF9leHRlbmRzKHt9LCBzdGF0ZS5jaGlsZHJlbik7XG4gICAgICAgICAgZGVsZXRlIG5ld0NoaWxkcmVuW2tleV07XG4gICAgICAgICAgcmV0dXJuIHsgY2hpbGRyZW46IG5ld0NoaWxkcmVuIH07XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5jaGlsZFJlZnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBjaGlsZHJlbjogKDAsIF9DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKShwcm9wcy5jaGlsZHJlbilcbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIFRyYW5zaXRpb25Hcm91cC5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHRoaXMuY3VycmVudGx5VHJhbnNpdGlvbmluZ0tleXMgPSB7fTtcbiAgICB0aGlzLmtleXNUb0VudGVyID0gW107XG4gICAgdGhpcy5rZXlzVG9MZWF2ZSA9IFtdO1xuICB9O1xuXG4gIFRyYW5zaXRpb25Hcm91cC5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB2YXIgaW5pdGlhbENoaWxkTWFwcGluZyA9IHRoaXMuc3RhdGUuY2hpbGRyZW47XG4gICAgZm9yICh2YXIga2V5IGluIGluaXRpYWxDaGlsZE1hcHBpbmcpIHtcbiAgICAgIGlmIChpbml0aWFsQ2hpbGRNYXBwaW5nW2tleV0pIHtcbiAgICAgICAgdGhpcy5wZXJmb3JtQXBwZWFyKGtleSwgdGhpcy5jaGlsZFJlZnNba2V5XSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIFRyYW5zaXRpb25Hcm91cC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgdmFyIG5leHRDaGlsZE1hcHBpbmcgPSAoMCwgX0NoaWxkTWFwcGluZy5nZXRDaGlsZE1hcHBpbmcpKG5leHRQcm9wcy5jaGlsZHJlbik7XG4gICAgdmFyIHByZXZDaGlsZE1hcHBpbmcgPSB0aGlzLnN0YXRlLmNoaWxkcmVuO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBjaGlsZHJlbjogKDAsIF9DaGlsZE1hcHBpbmcubWVyZ2VDaGlsZE1hcHBpbmdzKShwcmV2Q2hpbGRNYXBwaW5nLCBuZXh0Q2hpbGRNYXBwaW5nKVxuICAgIH0pO1xuXG4gICAgZm9yICh2YXIga2V5IGluIG5leHRDaGlsZE1hcHBpbmcpIHtcbiAgICAgIHZhciBoYXNQcmV2ID0gcHJldkNoaWxkTWFwcGluZyAmJiBwcmV2Q2hpbGRNYXBwaW5nLmhhc093blByb3BlcnR5KGtleSk7XG4gICAgICBpZiAobmV4dENoaWxkTWFwcGluZ1trZXldICYmICFoYXNQcmV2ICYmICF0aGlzLmN1cnJlbnRseVRyYW5zaXRpb25pbmdLZXlzW2tleV0pIHtcbiAgICAgICAgdGhpcy5rZXlzVG9FbnRlci5wdXNoKGtleSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2tleSBpbiBwcmV2Q2hpbGRNYXBwaW5nKSB7XG4gICAgICB2YXIgaGFzTmV4dCA9IG5leHRDaGlsZE1hcHBpbmcgJiYgbmV4dENoaWxkTWFwcGluZy5oYXNPd25Qcm9wZXJ0eShfa2V5KTtcbiAgICAgIGlmIChwcmV2Q2hpbGRNYXBwaW5nW19rZXldICYmICFoYXNOZXh0ICYmICF0aGlzLmN1cnJlbnRseVRyYW5zaXRpb25pbmdLZXlzW19rZXldKSB7XG4gICAgICAgIHRoaXMua2V5c1RvTGVhdmUucHVzaChfa2V5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiB3ZSB3YW50IHRvIHNvbWVkYXkgY2hlY2sgZm9yIHJlb3JkZXJpbmcsIHdlIGNvdWxkIGRvIGl0IGhlcmUuXG4gIH07XG5cbiAgVHJhbnNpdGlvbkdyb3VwLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIga2V5c1RvRW50ZXIgPSB0aGlzLmtleXNUb0VudGVyO1xuICAgIHRoaXMua2V5c1RvRW50ZXIgPSBbXTtcbiAgICBrZXlzVG9FbnRlci5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHJldHVybiBfdGhpczIucGVyZm9ybUVudGVyKGtleSwgX3RoaXMyLmNoaWxkUmVmc1trZXldKTtcbiAgICB9KTtcblxuICAgIHZhciBrZXlzVG9MZWF2ZSA9IHRoaXMua2V5c1RvTGVhdmU7XG4gICAgdGhpcy5rZXlzVG9MZWF2ZSA9IFtdO1xuICAgIGtleXNUb0xlYXZlLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuIF90aGlzMi5wZXJmb3JtTGVhdmUoa2V5LCBfdGhpczIuY2hpbGRSZWZzW2tleV0pO1xuICAgIH0pO1xuICB9O1xuXG4gIFRyYW5zaXRpb25Hcm91cC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgLy8gVE9ETzogd2UgY291bGQgZ2V0IHJpZCBvZiB0aGUgbmVlZCBmb3IgdGhlIHdyYXBwZXIgbm9kZVxuICAgIC8vIGJ5IGNsb25pbmcgYSBzaW5nbGUgY2hpbGRcbiAgICB2YXIgY2hpbGRyZW5Ub1JlbmRlciA9IFtdO1xuXG4gICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3Aoa2V5KSB7XG4gICAgICB2YXIgY2hpbGQgPSBfdGhpczMuc3RhdGUuY2hpbGRyZW5ba2V5XTtcbiAgICAgIGlmIChjaGlsZCkge1xuICAgICAgICB2YXIgaXNDYWxsYmFja1JlZiA9IHR5cGVvZiBjaGlsZC5yZWYgIT09ICdzdHJpbmcnO1xuICAgICAgICB2YXIgZmFjdG9yeUNoaWxkID0gX3RoaXMzLnByb3BzLmNoaWxkRmFjdG9yeShjaGlsZCk7XG4gICAgICAgIHZhciByZWYgPSBmdW5jdGlvbiByZWYocikge1xuICAgICAgICAgIF90aGlzMy5jaGlsZFJlZnNba2V5XSA9IHI7XG4gICAgICAgIH07XG5cbiAgICAgICAgIGZhbHNlID8gKDAsIF93YXJuaW5nMi5kZWZhdWx0KShpc0NhbGxiYWNrUmVmLCAnc3RyaW5nIHJlZnMgYXJlIG5vdCBzdXBwb3J0ZWQgb24gY2hpbGRyZW4gb2YgVHJhbnNpdGlvbkdyb3VwIGFuZCB3aWxsIGJlIGlnbm9yZWQuICcgKyAnUGxlYXNlIHVzZSBhIGNhbGxiYWNrIHJlZiBpbnN0ZWFkOiBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3JlZnMtYW5kLXRoZS1kb20uaHRtbCN0aGUtcmVmLWNhbGxiYWNrLWF0dHJpYnV0ZScpIDogdm9pZCAwO1xuXG4gICAgICAgIC8vIEFsd2F5cyBjaGFpbmluZyB0aGUgcmVmcyBsZWFkcyB0byBwcm9ibGVtcyB3aGVuIHRoZSBjaGlsZEZhY3RvcnlcbiAgICAgICAgLy8gd3JhcHMgdGhlIGNoaWxkLiBUaGUgY2hpbGQgcmVmIGNhbGxiYWNrIGdldHMgY2FsbGVkIHR3aWNlIHdpdGggdGhlXG4gICAgICAgIC8vIHdyYXBwZXIgYW5kIHRoZSBjaGlsZC4gU28gd2Ugb25seSBuZWVkIHRvIGNoYWluIHRoZSByZWYgaWYgdGhlXG4gICAgICAgIC8vIGZhY3RvcnlDaGlsZCBpcyBub3QgZGlmZmVyZW50IGZyb20gY2hpbGQuXG4gICAgICAgIGlmIChmYWN0b3J5Q2hpbGQgPT09IGNoaWxkICYmIGlzQ2FsbGJhY2tSZWYpIHtcbiAgICAgICAgICByZWYgPSAoMCwgX2NoYWluRnVuY3Rpb24yLmRlZmF1bHQpKGNoaWxkLnJlZiwgcmVmKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFlvdSBtYXkgbmVlZCB0byBhcHBseSByZWFjdGl2ZSB1cGRhdGVzIHRvIGEgY2hpbGQgYXMgaXQgaXMgbGVhdmluZy5cbiAgICAgICAgLy8gVGhlIG5vcm1hbCBSZWFjdCB3YXkgdG8gZG8gaXQgd29uJ3Qgd29yayBzaW5jZSB0aGUgY2hpbGQgd2lsbCBoYXZlXG4gICAgICAgIC8vIGFscmVhZHkgYmVlbiByZW1vdmVkLiBJbiBjYXNlIHlvdSBuZWVkIHRoaXMgYmVoYXZpb3IgeW91IGNhbiBwcm92aWRlXG4gICAgICAgIC8vIGEgY2hpbGRGYWN0b3J5IGZ1bmN0aW9uIHRvIHdyYXAgZXZlcnkgY2hpbGQsIGV2ZW4gdGhlIG9uZXMgdGhhdCBhcmVcbiAgICAgICAgLy8gbGVhdmluZy5cbiAgICAgICAgY2hpbGRyZW5Ub1JlbmRlci5wdXNoKF9yZWFjdDIuZGVmYXVsdC5jbG9uZUVsZW1lbnQoZmFjdG9yeUNoaWxkLCB7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgcmVmOiByZWZcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5zdGF0ZS5jaGlsZHJlbikge1xuICAgICAgX2xvb3Aoa2V5KTtcbiAgICB9XG5cbiAgICAvLyBEbyBub3QgZm9yd2FyZCBUcmFuc2l0aW9uR3JvdXAgcHJvcHMgdG8gcHJpbWl0aXZlIERPTSBub2Rlc1xuICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCB0aGlzLnByb3BzKTtcbiAgICBkZWxldGUgcHJvcHMudHJhbnNpdGlvbkxlYXZlO1xuICAgIGRlbGV0ZSBwcm9wcy50cmFuc2l0aW9uTmFtZTtcbiAgICBkZWxldGUgcHJvcHMudHJhbnNpdGlvbkFwcGVhcjtcbiAgICBkZWxldGUgcHJvcHMudHJhbnNpdGlvbkVudGVyO1xuICAgIGRlbGV0ZSBwcm9wcy5jaGlsZEZhY3Rvcnk7XG4gICAgZGVsZXRlIHByb3BzLnRyYW5zaXRpb25MZWF2ZVRpbWVvdXQ7XG4gICAgZGVsZXRlIHByb3BzLnRyYW5zaXRpb25FbnRlclRpbWVvdXQ7XG4gICAgZGVsZXRlIHByb3BzLnRyYW5zaXRpb25BcHBlYXJUaW1lb3V0O1xuICAgIGRlbGV0ZSBwcm9wcy5jb21wb25lbnQ7XG5cbiAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQodGhpcy5wcm9wcy5jb21wb25lbnQsIHByb3BzLCBjaGlsZHJlblRvUmVuZGVyKTtcbiAgfTtcblxuICByZXR1cm4gVHJhbnNpdGlvbkdyb3VwO1xufShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuVHJhbnNpdGlvbkdyb3VwLmRpc3BsYXlOYW1lID0gJ1RyYW5zaXRpb25Hcm91cCc7XG5cblRyYW5zaXRpb25Hcm91cC5wcm9wVHlwZXMgPSAgZmFsc2UgPyBwcm9wVHlwZXMgOiB7fTtcblRyYW5zaXRpb25Hcm91cC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFRyYW5zaXRpb25Hcm91cDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL3V0aWxzL0NoaWxkTWFwcGluZy5qc1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5nZXRDaGlsZE1hcHBpbmcgPSBnZXRDaGlsZE1hcHBpbmc7XG5leHBvcnRzLm1lcmdlQ2hpbGRNYXBwaW5ncyA9IG1lcmdlQ2hpbGRNYXBwaW5ncztcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9yZWFjdC9yZWFjdC5qc1wiKTtcblxuLyoqXG4gKiBHaXZlbiBgdGhpcy5wcm9wcy5jaGlsZHJlbmAsIHJldHVybiBhbiBvYmplY3QgbWFwcGluZyBrZXkgdG8gY2hpbGQuXG4gKlxuICogQHBhcmFtIHsqfSBjaGlsZHJlbiBgdGhpcy5wcm9wcy5jaGlsZHJlbmBcbiAqIEByZXR1cm4ge29iamVjdH0gTWFwcGluZyBvZiBrZXkgdG8gY2hpbGRcbiAqL1xuZnVuY3Rpb24gZ2V0Q2hpbGRNYXBwaW5nKGNoaWxkcmVuKSB7XG4gIGlmICghY2hpbGRyZW4pIHtcbiAgICByZXR1cm4gY2hpbGRyZW47XG4gIH1cbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBfcmVhY3QuQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICByZXR1cm4gY2hpbGQ7XG4gIH0pLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgcmVzdWx0W2NoaWxkLmtleV0gPSBjaGlsZDtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogV2hlbiB5b3UncmUgYWRkaW5nIG9yIHJlbW92aW5nIGNoaWxkcmVuIHNvbWUgbWF5IGJlIGFkZGVkIG9yIHJlbW92ZWQgaW4gdGhlXG4gKiBzYW1lIHJlbmRlciBwYXNzLiBXZSB3YW50IHRvIHNob3cgKmJvdGgqIHNpbmNlIHdlIHdhbnQgdG8gc2ltdWx0YW5lb3VzbHlcbiAqIGFuaW1hdGUgZWxlbWVudHMgaW4gYW5kIG91dC4gVGhpcyBmdW5jdGlvbiB0YWtlcyBhIHByZXZpb3VzIHNldCBvZiBrZXlzXG4gKiBhbmQgYSBuZXcgc2V0IG9mIGtleXMgYW5kIG1lcmdlcyB0aGVtIHdpdGggaXRzIGJlc3QgZ3Vlc3Mgb2YgdGhlIGNvcnJlY3RcbiAqIG9yZGVyaW5nLiBJbiB0aGUgZnV0dXJlIHdlIG1heSBleHBvc2Ugc29tZSBvZiB0aGUgdXRpbGl0aWVzIGluXG4gKiBSZWFjdE11bHRpQ2hpbGQgdG8gbWFrZSB0aGlzIGVhc3ksIGJ1dCBmb3Igbm93IFJlYWN0IGl0c2VsZiBkb2VzIG5vdFxuICogZGlyZWN0bHkgaGF2ZSB0aGlzIGNvbmNlcHQgb2YgdGhlIHVuaW9uIG9mIHByZXZDaGlsZHJlbiBhbmQgbmV4dENoaWxkcmVuXG4gKiBzbyB3ZSBpbXBsZW1lbnQgaXQgaGVyZS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gcHJldiBwcmV2IGNoaWxkcmVuIGFzIHJldHVybmVkIGZyb21cbiAqIGBSZWFjdFRyYW5zaXRpb25DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKClgLlxuICogQHBhcmFtIHtvYmplY3R9IG5leHQgbmV4dCBjaGlsZHJlbiBhcyByZXR1cm5lZCBmcm9tXG4gKiBgUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZygpYC5cbiAqIEByZXR1cm4ge29iamVjdH0gYSBrZXkgc2V0IHRoYXQgY29udGFpbnMgYWxsIGtleXMgaW4gYHByZXZgIGFuZCBhbGwga2V5c1xuICogaW4gYG5leHRgIGluIGEgcmVhc29uYWJsZSBvcmRlci5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VDaGlsZE1hcHBpbmdzKHByZXYsIG5leHQpIHtcbiAgcHJldiA9IHByZXYgfHwge307XG4gIG5leHQgPSBuZXh0IHx8IHt9O1xuXG4gIGZ1bmN0aW9uIGdldFZhbHVlRm9yS2V5KGtleSkge1xuICAgIGlmIChuZXh0Lmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIHJldHVybiBuZXh0W2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHByZXZba2V5XTtcbiAgfVxuXG4gIC8vIEZvciBlYWNoIGtleSBvZiBgbmV4dGAsIHRoZSBsaXN0IG9mIGtleXMgdG8gaW5zZXJ0IGJlZm9yZSB0aGF0IGtleSBpblxuICAvLyB0aGUgY29tYmluZWQgbGlzdFxuICB2YXIgbmV4dEtleXNQZW5kaW5nID0ge307XG5cbiAgdmFyIHBlbmRpbmdLZXlzID0gW107XG4gIGZvciAodmFyIHByZXZLZXkgaW4gcHJldikge1xuICAgIGlmIChuZXh0Lmhhc093blByb3BlcnR5KHByZXZLZXkpKSB7XG4gICAgICBpZiAocGVuZGluZ0tleXMubGVuZ3RoKSB7XG4gICAgICAgIG5leHRLZXlzUGVuZGluZ1twcmV2S2V5XSA9IHBlbmRpbmdLZXlzO1xuICAgICAgICBwZW5kaW5nS2V5cyA9IFtdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZW5kaW5nS2V5cy5wdXNoKHByZXZLZXkpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpID0gdm9pZCAwO1xuICB2YXIgY2hpbGRNYXBwaW5nID0ge307XG4gIGZvciAodmFyIG5leHRLZXkgaW4gbmV4dCkge1xuICAgIGlmIChuZXh0S2V5c1BlbmRpbmcuaGFzT3duUHJvcGVydHkobmV4dEtleSkpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHBlbmRpbmdOZXh0S2V5ID0gbmV4dEtleXNQZW5kaW5nW25leHRLZXldW2ldO1xuICAgICAgICBjaGlsZE1hcHBpbmdbbmV4dEtleXNQZW5kaW5nW25leHRLZXldW2ldXSA9IGdldFZhbHVlRm9yS2V5KHBlbmRpbmdOZXh0S2V5KTtcbiAgICAgIH1cbiAgICB9XG4gICAgY2hpbGRNYXBwaW5nW25leHRLZXldID0gZ2V0VmFsdWVGb3JLZXkobmV4dEtleSk7XG4gIH1cblxuICAvLyBGaW5hbGx5LCBhZGQgdGhlIGtleXMgd2hpY2ggZGlkbid0IGFwcGVhciBiZWZvcmUgYW55IGtleSBpbiBgbmV4dGBcbiAgZm9yIChpID0gMDsgaSA8IHBlbmRpbmdLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgY2hpbGRNYXBwaW5nW3BlbmRpbmdLZXlzW2ldXSA9IGdldFZhbHVlRm9yS2V5KHBlbmRpbmdLZXlzW2ldKTtcbiAgfVxuXG4gIHJldHVybiBjaGlsZE1hcHBpbmc7XG59XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvdXRpbHMvUHJvcFR5cGVzLmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLm5hbWVTaGFwZSA9IHVuZGVmaW5lZDtcbmV4cG9ydHMudHJhbnNpdGlvblRpbWVvdXQgPSB0cmFuc2l0aW9uVGltZW91dDtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9yZWFjdC9yZWFjdC5qc1wiKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanNcIik7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9O1xufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uVGltZW91dCh0cmFuc2l0aW9uVHlwZSkge1xuICB2YXIgdGltZW91dFByb3BOYW1lID0gJ3RyYW5zaXRpb24nICsgdHJhbnNpdGlvblR5cGUgKyAnVGltZW91dCc7XG4gIHZhciBlbmFibGVkUHJvcE5hbWUgPSAndHJhbnNpdGlvbicgKyB0cmFuc2l0aW9uVHlwZTtcblxuICByZXR1cm4gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgLy8gSWYgdGhlIHRyYW5zaXRpb24gaXMgZW5hYmxlZFxuICAgIGlmIChwcm9wc1tlbmFibGVkUHJvcE5hbWVdKSB7XG4gICAgICAvLyBJZiBubyB0aW1lb3V0IGR1cmF0aW9uIGlzIHByb3ZpZGVkXG4gICAgICBpZiAocHJvcHNbdGltZW91dFByb3BOYW1lXSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IodGltZW91dFByb3BOYW1lICsgJyB3YXNuXFwndCBzdXBwbGllZCB0byBDU1NUcmFuc2l0aW9uR3JvdXA6ICcgKyAndGhpcyBjYW4gY2F1c2UgdW5yZWxpYWJsZSBhbmltYXRpb25zIGFuZCB3b25cXCd0IGJlIHN1cHBvcnRlZCBpbiAnICsgJ2EgZnV0dXJlIHZlcnNpb24gb2YgUmVhY3QuIFNlZSAnICsgJ2h0dHBzOi8vZmIubWUvcmVhY3QtYW5pbWF0aW9uLXRyYW5zaXRpb24tZ3JvdXAtdGltZW91dCBmb3IgbW9yZSAnICsgJ2luZm9ybWF0aW9uLicpO1xuXG4gICAgICAgIC8vIElmIHRoZSBkdXJhdGlvbiBpc24ndCBhIG51bWJlclxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgcHJvcHNbdGltZW91dFByb3BOYW1lXSAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcih0aW1lb3V0UHJvcE5hbWUgKyAnIG11c3QgYmUgYSBudW1iZXIgKGluIG1pbGxpc2Vjb25kcyknKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcbn1cblxudmFyIG5hbWVTaGFwZSA9IGV4cG9ydHMubmFtZVNoYXBlID0gX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzMi5kZWZhdWx0LnNoYXBlKHtcbiAgZW50ZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBsZWF2ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGFjdGl2ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmdcbn0pLCBfcHJvcFR5cGVzMi5kZWZhdWx0LnNoYXBlKHtcbiAgZW50ZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBlbnRlckFjdGl2ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGxlYXZlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgbGVhdmVBY3RpdmU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBhcHBlYXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBhcHBlYXJBY3RpdmU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nXG59KV0pO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9yZXNlbGVjdC9saWIvaW5kZXguanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0TWVtb2l6ZSA9IGRlZmF1bHRNZW1vaXplO1xuZXhwb3J0cy5jcmVhdGVTZWxlY3RvckNyZWF0b3IgPSBjcmVhdGVTZWxlY3RvckNyZWF0b3I7XG5leHBvcnRzLmNyZWF0ZVN0cnVjdHVyZWRTZWxlY3RvciA9IGNyZWF0ZVN0cnVjdHVyZWRTZWxlY3RvcjtcbmZ1bmN0aW9uIGRlZmF1bHRFcXVhbGl0eUNoZWNrKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59XG5cbmZ1bmN0aW9uIGFyZUFyZ3VtZW50c1NoYWxsb3dseUVxdWFsKGVxdWFsaXR5Q2hlY2ssIHByZXYsIG5leHQpIHtcbiAgaWYgKHByZXYgPT09IG51bGwgfHwgbmV4dCA9PT0gbnVsbCB8fCBwcmV2Lmxlbmd0aCAhPT0gbmV4dC5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBEbyB0aGlzIGluIGEgZm9yIGxvb3AgKGFuZCBub3QgYSBgZm9yRWFjaGAgb3IgYW4gYGV2ZXJ5YCkgc28gd2UgY2FuIGRldGVybWluZSBlcXVhbGl0eSBhcyBmYXN0IGFzIHBvc3NpYmxlLlxuICB2YXIgbGVuZ3RoID0gcHJldi5sZW5ndGg7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWVxdWFsaXR5Q2hlY2socHJldltpXSwgbmV4dFtpXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdE1lbW9pemUoZnVuYykge1xuICB2YXIgZXF1YWxpdHlDaGVjayA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZGVmYXVsdEVxdWFsaXR5Q2hlY2s7XG5cbiAgdmFyIGxhc3RBcmdzID0gbnVsbDtcbiAgdmFyIGxhc3RSZXN1bHQgPSBudWxsO1xuICAvLyB3ZSByZWZlcmVuY2UgYXJndW1lbnRzIGluc3RlYWQgb2Ygc3ByZWFkaW5nIHRoZW0gZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnNcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWFyZUFyZ3VtZW50c1NoYWxsb3dseUVxdWFsKGVxdWFsaXR5Q2hlY2ssIGxhc3RBcmdzLCBhcmd1bWVudHMpKSB7XG4gICAgICAvLyBhcHBseSBhcmd1bWVudHMgaW5zdGVhZCBvZiBzcHJlYWRpbmcgZm9yIHBlcmZvcm1hbmNlLlxuICAgICAgbGFzdFJlc3VsdCA9IGZ1bmMuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBsYXN0QXJncyA9IGFyZ3VtZW50cztcbiAgICByZXR1cm4gbGFzdFJlc3VsdDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0RGVwZW5kZW5jaWVzKGZ1bmNzKSB7XG4gIHZhciBkZXBlbmRlbmNpZXMgPSBBcnJheS5pc0FycmF5KGZ1bmNzWzBdKSA/IGZ1bmNzWzBdIDogZnVuY3M7XG5cbiAgaWYgKCFkZXBlbmRlbmNpZXMuZXZlcnkoZnVuY3Rpb24gKGRlcCkge1xuICAgIHJldHVybiB0eXBlb2YgZGVwID09PSAnZnVuY3Rpb24nO1xuICB9KSkge1xuICAgIHZhciBkZXBlbmRlbmN5VHlwZXMgPSBkZXBlbmRlbmNpZXMubWFwKGZ1bmN0aW9uIChkZXApIHtcbiAgICAgIHJldHVybiB0eXBlb2YgZGVwID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihkZXApO1xuICAgIH0pLmpvaW4oJywgJyk7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdTZWxlY3RvciBjcmVhdG9ycyBleHBlY3QgYWxsIGlucHV0LXNlbGVjdG9ycyB0byBiZSBmdW5jdGlvbnMsICcgKyAoJ2luc3RlYWQgcmVjZWl2ZWQgdGhlIGZvbGxvd2luZyB0eXBlczogWycgKyBkZXBlbmRlbmN5VHlwZXMgKyAnXScpKTtcbiAgfVxuXG4gIHJldHVybiBkZXBlbmRlbmNpZXM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yQ3JlYXRvcihtZW1vaXplKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBtZW1vaXplT3B0aW9ucyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBtZW1vaXplT3B0aW9uc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgZnVuY3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICB2YXIgcmVjb21wdXRhdGlvbnMgPSAwO1xuICAgIHZhciByZXN1bHRGdW5jID0gZnVuY3MucG9wKCk7XG4gICAgdmFyIGRlcGVuZGVuY2llcyA9IGdldERlcGVuZGVuY2llcyhmdW5jcyk7XG5cbiAgICB2YXIgbWVtb2l6ZWRSZXN1bHRGdW5jID0gbWVtb2l6ZS5hcHBseSh1bmRlZmluZWQsIFtmdW5jdGlvbiAoKSB7XG4gICAgICByZWNvbXB1dGF0aW9ucysrO1xuICAgICAgLy8gYXBwbHkgYXJndW1lbnRzIGluc3RlYWQgb2Ygc3ByZWFkaW5nIGZvciBwZXJmb3JtYW5jZS5cbiAgICAgIHJldHVybiByZXN1bHRGdW5jLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfV0uY29uY2F0KG1lbW9pemVPcHRpb25zKSk7XG5cbiAgICAvLyBJZiBhIHNlbGVjdG9yIGlzIGNhbGxlZCB3aXRoIHRoZSBleGFjdCBzYW1lIGFyZ3VtZW50cyB3ZSBkb24ndCBuZWVkIHRvIHRyYXZlcnNlIG91ciBkZXBlbmRlbmNpZXMgYWdhaW4uXG4gICAgdmFyIHNlbGVjdG9yID0gZGVmYXVsdE1lbW9pemUoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHBhcmFtcyA9IFtdO1xuICAgICAgdmFyIGxlbmd0aCA9IGRlcGVuZGVuY2llcy5sZW5ndGg7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gYXBwbHkgYXJndW1lbnRzIGluc3RlYWQgb2Ygc3ByZWFkaW5nIGFuZCBtdXRhdGUgYSBsb2NhbCBsaXN0IG9mIHBhcmFtcyBmb3IgcGVyZm9ybWFuY2UuXG4gICAgICAgIHBhcmFtcy5wdXNoKGRlcGVuZGVuY2llc1tpXS5hcHBseShudWxsLCBhcmd1bWVudHMpKTtcbiAgICAgIH1cblxuICAgICAgLy8gYXBwbHkgYXJndW1lbnRzIGluc3RlYWQgb2Ygc3ByZWFkaW5nIGZvciBwZXJmb3JtYW5jZS5cbiAgICAgIHJldHVybiBtZW1vaXplZFJlc3VsdEZ1bmMuYXBwbHkobnVsbCwgcGFyYW1zKTtcbiAgICB9KTtcblxuICAgIHNlbGVjdG9yLnJlc3VsdEZ1bmMgPSByZXN1bHRGdW5jO1xuICAgIHNlbGVjdG9yLnJlY29tcHV0YXRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHJlY29tcHV0YXRpb25zO1xuICAgIH07XG4gICAgc2VsZWN0b3IucmVzZXRSZWNvbXB1dGF0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiByZWNvbXB1dGF0aW9ucyA9IDA7XG4gICAgfTtcbiAgICByZXR1cm4gc2VsZWN0b3I7XG4gIH07XG59XG5cbnZhciBjcmVhdGVTZWxlY3RvciA9IGV4cG9ydHMuY3JlYXRlU2VsZWN0b3IgPSBjcmVhdGVTZWxlY3RvckNyZWF0b3IoZGVmYXVsdE1lbW9pemUpO1xuXG5mdW5jdGlvbiBjcmVhdGVTdHJ1Y3R1cmVkU2VsZWN0b3Ioc2VsZWN0b3JzKSB7XG4gIHZhciBzZWxlY3RvckNyZWF0b3IgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGNyZWF0ZVNlbGVjdG9yO1xuXG4gIGlmICgodHlwZW9mIHNlbGVjdG9ycyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yoc2VsZWN0b3JzKSkgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjcmVhdGVTdHJ1Y3R1cmVkU2VsZWN0b3IgZXhwZWN0cyBmaXJzdCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QgJyArICgnd2hlcmUgZWFjaCBwcm9wZXJ0eSBpcyBhIHNlbGVjdG9yLCBpbnN0ZWFkIHJlY2VpdmVkIGEgJyArICh0eXBlb2Ygc2VsZWN0b3JzID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihzZWxlY3RvcnMpKSkpO1xuICB9XG4gIHZhciBvYmplY3RLZXlzID0gT2JqZWN0LmtleXMoc2VsZWN0b3JzKTtcbiAgcmV0dXJuIHNlbGVjdG9yQ3JlYXRvcihvYmplY3RLZXlzLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIHNlbGVjdG9yc1trZXldO1xuICB9KSwgZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgdmFsdWVzID0gQXJyYXkoX2xlbjMpLCBfa2V5MyA9IDA7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICAgIHZhbHVlc1tfa2V5M10gPSBhcmd1bWVudHNbX2tleTNdO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZXMucmVkdWNlKGZ1bmN0aW9uIChjb21wb3NpdGlvbiwgdmFsdWUsIGluZGV4KSB7XG4gICAgICBjb21wb3NpdGlvbltvYmplY3RLZXlzW2luZGV4XV0gPSB2YWx1ZTtcbiAgICAgIHJldHVybiBjb21wb3NpdGlvbjtcbiAgICB9LCB7fSk7XG4gIH0pO1xufVxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9jb21wb25lbnRzL0RldmljZUxpc3RJdGVtL0RldmljZUxpc3RJdGVtLmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcmVhY3QvcmVhY3QuanNcIik7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0Um91dGVyRG9tID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvaW5kZXguanNcIik7XG5cbnZhciBfcHJvcFR5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanNcIik7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfVG9nZ2xlU2V0dGluZ3MgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9zcmMvY29tcG9uZW50cy9Ub2dnbGVTZXR0aW5ncy9Ub2dnbGVTZXR0aW5ncy5qc1wiKTtcblxudmFyIF9Ub2dnbGVTZXR0aW5nczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Ub2dnbGVTZXR0aW5ncyk7XG5cbl9fd2VicGFja19yZXF1aXJlX18oXCIuL3NyYy9jb21wb25lbnRzL0RldmljZUxpc3RJdGVtL0RldmljZUxpc3RJdGVtLnNjc3NcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIERldmljZUxpc3RJdGVtID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKERldmljZUxpc3RJdGVtLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBEZXZpY2VMaXN0SXRlbShwcm9wcykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEZXZpY2VMaXN0SXRlbSk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoRGV2aWNlTGlzdEl0ZW0uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihEZXZpY2VMaXN0SXRlbSkpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgIF90aGlzLnNldERldmljZUlkID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIF90aGlzLnByb3BzLnNldFBvcHVwU2hvd24oX3RoaXMucHJvcHMuZGF0YS5faWQpO1xuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKERldmljZUxpc3RJdGVtLCBbe1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsgY2xhc3NOYW1lOiAnZGV2aWNlLWl0ZW0nIH0sXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiAnZGV2aWNlLWl0ZW1fX2luZm8nIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICBfcmVhY3RSb3V0ZXJEb20uTGluayxcbiAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnZGV2aWNlLWl0ZW1fX2luZm8tbmFtZScsIHRvOiAnL2RldmljZXMvZGV2aWNlLycgKyB0aGlzLnByb3BzLmRhdGEuX2lkIH0sXG4gICAgICAgICAgICB0aGlzLnByb3BzLmRhdGEubmFtZVxuICAgICAgICAgICksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnZGV2aWNlLWl0ZW1fX2luZm8tc3RhdHVzJyB9LFxuICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1RvZ2dsZVNldHRpbmdzMi5kZWZhdWx0LCB7XG4gICAgICAgICAgICAgIGNoZWNrZWQ6IHRoaXMucHJvcHMuZGF0YS5zdGF0dXMsXG4gICAgICAgICAgICAgIGl0ZW1JZDogdGhpcy5wcm9wcy5kYXRhLl9pZCxcbiAgICAgICAgICAgICAgc2V0SXRlbVZhbHVlOiB0aGlzLnByb3BzLmNoYW5nZVN0YXR1cyB9KVxuICAgICAgICAgIClcbiAgICAgICAgKSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBjbGFzc05hbWU6ICdkZXZpY2UtaXRlbV9fZGVzY3JpcHRpb24nIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnZGV2aWNlLWl0ZW1fX2Rlc2NyaXB0aW9uLWxvY2F0aW9uJyB9LFxuICAgICAgICAgICAgdGhpcy5wcm9wcy5sb2NhdGlvblxuICAgICAgICAgICksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnZGV2aWNlLWl0ZW1fX2Rlc2NyaXB0aW9uLWljb24nIH0sXG4gICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnZGV2aWNlLWl0ZW1fX2Rlc2NyaXB0aW9uLWljb24tZGVsZXRlJyB9LFxuICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnYScsIHsgY2xhc3NOYW1lOiAnZmEgZmEtdHJhc2gnLFxuICAgICAgICAgICAgICAgIG9uQ2xpY2s6IHRoaXMuc2V0RGV2aWNlSWQgfSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIERldmljZUxpc3RJdGVtO1xufShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuRGV2aWNlTGlzdEl0ZW0ucHJvcFR5cGVzID0ge1xuICBjaGFuZ2VTdGF0dXM6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgZGVsZXRlRGV2aWNlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIHNldFBvcHVwU2hvd246IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgbG9jYXRpb246IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBkYXRhOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnNoYXBlKHtcbiAgICBzdGF0dXM6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbGVhbixcbiAgICBfaWQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIG5hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIGxvY2F0aW9uOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZ1xuICB9KVxufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gRGV2aWNlTGlzdEl0ZW07XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL2NvbXBvbmVudHMvRGV2aWNlTGlzdEl0ZW0vRGV2aWNlTGlzdEl0ZW0uc2Nzc1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG4vLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9jb21wb25lbnRzL0RldmlzZXNTZWN0aW9uL0RldmlzZXNTZWN0aW9uLmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcmVhY3QvcmVhY3QuanNcIik7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0Um91dGVyRG9tID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvaW5kZXguanNcIik7XG5cbnZhciBfTWVzc2FnZSA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3NyYy9jb21wb25lbnRzL01lc3NhZ2UvTWVzc2FnZS5qc1wiKTtcblxudmFyIF9Qb3B1cCA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3NyYy9jb21wb25lbnRzL1BvcHVwL1BvcHVwLmpzXCIpO1xuXG52YXIgX0J1dHRvbiA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3NyYy9jb21wb25lbnRzL0J1dHRvbi9CdXR0b24uanNcIik7XG5cbnZhciBfTGlzdEhlYWRlciA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3NyYy9jb21wb25lbnRzL0xpc3RIZWFkZXIvTGlzdEhlYWRlci5qc1wiKTtcblxudmFyIF9MaXN0SGVhZGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0xpc3RIZWFkZXIpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzXCIpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBEZXZpY2VzU2VjdGlvbiA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhEZXZpY2VzU2VjdGlvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRGV2aWNlc1NlY3Rpb24ocHJvcHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGV2aWNlc1NlY3Rpb24pO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChEZXZpY2VzU2VjdGlvbi5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKERldmljZXNTZWN0aW9uKSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKERldmljZXNTZWN0aW9uLCBbe1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgZmlsdGVyT3B0aW9uID0gdGhpcy5wcm9wcy5maWx0ZXJPcHRpb247XG5cbiAgICAgIGlmICh0eXBlb2YgZmlsdGVyT3B0aW9uICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aGlzLnByb3BzLmZpbHRlckFjdGlvbihmaWx0ZXJPcHRpb24pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdzZWN0aW9uJyxcbiAgICAgICAgeyBjbGFzc05hbWU6ICdkZXZpY2UtbGlzdCcgfSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2gxJyxcbiAgICAgICAgICB7IGNsYXNzTmFtZTogJ2RldmljZS1saXN0X190aXRsZScgfSxcbiAgICAgICAgICB0aGlzLnByb3BzLmxvY2F0aW9uT2ZEZXZpY2VzID8gdGhpcy5wcm9wcy5sb2NhdGlvbk9mRGV2aWNlcy50b1VwcGVyQ2FzZSgpIDogJ1lvdXIgZGV2aWNlcydcbiAgICAgICAgKSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0xpc3RIZWFkZXIyLmRlZmF1bHQsIHtcbiAgICAgICAgICBxdWFudGl0eTogdGhpcy5wcm9wcy5xdWFudGl0eSxcbiAgICAgICAgICBsb2NhdGlvbjogdGhpcy5wcm9wcy5sb2NhdGlvbixcbiAgICAgICAgICBoaXN0b3J5OiB0aGlzLnByb3BzLmhpc3RvcnksXG4gICAgICAgICAgbWF0Y2g6IHRoaXMucHJvcHMubWF0Y2ggfSksXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdzZWN0aW9uJyxcbiAgICAgICAgICB7IGNsYXNzTmFtZTogJ2RldmljZS1saXN0X19jb250ZW50JyB9LFxuICAgICAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICAgICAgKSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgX1BvcHVwLlBvcHVwLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHNldFBvcHVwU2hvd246IHRoaXMucHJvcHMuc2V0UG9wdXBTaG93bixcbiAgICAgICAgICAgIHBvcHVwU2hvd246IHRoaXMucHJvcHMucG9wdXBTaG93bixcbiAgICAgICAgICAgIGhlYWRlcjogJ0NvbmZpcm0gdGhlIGFjdGlvbicsXG4gICAgICAgICAgICB0ZXh0OiAnQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIHJlbW92ZSB0aGUgZGV2aWNlPycgfSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfQnV0dG9uLkJ1dHRvbiwge1xuICAgICAgICAgICAgc2V0UG9wdXBTaG93bjogdGhpcy5wcm9wcy5zZXRQb3B1cFNob3duLFxuICAgICAgICAgICAgb2tIYW5kbGVyOiBmdW5jdGlvbiBva0hhbmRsZXIoKSB7XG4gICAgICAgICAgICAgIF90aGlzMi5wcm9wcy5kZWxldGVEZXZpY2UoX3RoaXMyLnByb3BzLmN1cnJlbnRJZCk7XG4gICAgICAgICAgICAgIF90aGlzMi5wcm9wcy5zZXRQb3B1cFNob3duKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2xhc3NOYW1lOiAnYnRuIHBvcHVwX19idG4nLFxuICAgICAgICAgICAgaW5uZXJUZXh0OiAnT2snXG4gICAgICAgICAgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0J1dHRvbi5CdXR0b24sIHtcbiAgICAgICAgICAgIG9rSGFuZGxlcjogZnVuY3Rpb24gb2tIYW5kbGVyKCkge1xuICAgICAgICAgICAgICBfdGhpczIucHJvcHMuc2V0UG9wdXBTaG93bigpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ2J0biBidG4tLWRlZmF1bHQgcG9wdXBfX2J0bicsXG4gICAgICAgICAgICBpbm5lclRleHQ6ICdDYW5jZWwnXG4gICAgICAgICAgfSlcbiAgICAgICAgKSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX01lc3NhZ2UuTWVzc2FnZSwge1xuICAgICAgICAgIGNsZWFyU3RhdHVzOiB0aGlzLnByb3BzLmNsZWFyU3RhdHVzLFxuICAgICAgICAgIGhlYWRlcjogJ0Vycm9yJ1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRGV2aWNlc1NlY3Rpb247XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5EZXZpY2VzU2VjdGlvbi5wcm9wVHlwZXMgPSB7XG4gIGNoYW5nZVN0YXR1czogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBkZWxldGVEZXZpY2U6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgbG9hZERldmljZXM6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgZmlsdGVyT3B0aW9uOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmFueSxcbiAgZmlsdGVyQWN0aW9uOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIGRldmljZXM6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYXJyYXksXG4gIGxvY2F0aW9uOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgaGlzdG9yeTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIG1hdGNoOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuYW55LFxuICBjbGVhclN0YXR1czogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBjdXJyZW50SWQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBzZXRQb3B1cFNob3duOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIHBvcHVwU2hvd246IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgcXVhbnRpdHk6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICBsb2NhdGlvbk9mRGV2aWNlczogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmdcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IERldmljZXNTZWN0aW9uO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9jb21wb25lbnRzL0ZpbHRlclNlbGVjdC9GaWx0ZXJTZWxlY3QuanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9yZWFjdC9yZWFjdC5qc1wiKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanNcIik7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbl9fd2VicGFja19yZXF1aXJlX18oXCIuL3NyYy9jb21wb25lbnRzL0ZpbHRlclNlbGVjdC9GaWx0ZXJTZWxlY3Quc2Nzc1wiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIEZpbHRlclNlbGVjdCA9IGZ1bmN0aW9uIEZpbHRlclNlbGVjdChwcm9wcykge1xuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgJ2RpdicsXG4gICAgeyBjbGFzc05hbWU6ICdmaWx0ZXJCb3gnIH0sXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnc2VsZWN0JyxcbiAgICAgIHtcbiAgICAgICAgY2xhc3NOYW1lOiAnZmlsdGVyQm94X19maWx0ZXInLFxuICAgICAgICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UoZSkge1xuICAgICAgICAgIHJldHVybiBwcm9wcy5oYW5kbGVTZWxlY3QoZS50YXJnZXQudmFsdWUpO1xuICAgICAgICB9IH0sXG4gICAgICBwcm9wcy5vcHRpb25zLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ29wdGlvbicsXG4gICAgICAgICAge1xuICAgICAgICAgICAgdmFsdWU6IGl0ZW0udmFsdWUsXG4gICAgICAgICAgICBrZXk6IGl0ZW0udmFsdWUsXG4gICAgICAgICAgICBzZWxlY3RlZDogaXRlbS52YWx1ZSA9PT0gcHJvcHMudmFsdWUgfSxcbiAgICAgICAgICBpdGVtLmlubmVyVGV4dFxuICAgICAgICApO1xuICAgICAgfSlcbiAgICApXG4gICk7XG59O1xuXG5GaWx0ZXJTZWxlY3QucHJvcFR5cGVzID0ge1xuICBoYW5kbGVTZWxlY3Q6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYy5pc1JlcXVpcmVkLFxuICBvcHRpb25zOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmFycmF5LFxuICB2YWx1ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmdcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEZpbHRlclNlbGVjdDtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvY29tcG9uZW50cy9GaWx0ZXJTZWxlY3QvRmlsdGVyU2VsZWN0LnNjc3NcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvY29tcG9uZW50cy9MaXN0SGVhZGVyL0xpc3RIZWFkZXIuanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9yZWFjdC9yZWFjdC5qc1wiKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3RSb3V0ZXJEb20gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9pbmRleC5qc1wiKTtcblxudmFyIF9yZWFjdFJlZHV4ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2luZGV4LmpzXCIpO1xuXG52YXIgX3F1ZXJ5U3RyaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3F1ZXJ5LXN0cmluZy9pbmRleC5qc1wiKTtcblxudmFyIF9xdWVyeVN0cmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9xdWVyeVN0cmluZyk7XG5cbnZhciBfRmlsdGVyU2VsZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vc3JjL2NvbXBvbmVudHMvRmlsdGVyU2VsZWN0L0ZpbHRlclNlbGVjdC5qc1wiKTtcblxudmFyIF9GaWx0ZXJTZWxlY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRmlsdGVyU2VsZWN0KTtcblxudmFyIF9TZWFyY2ggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9zcmMvY29tcG9uZW50cy9TZWFyY2gvU2VhcmNoLmpzXCIpO1xuXG52YXIgX1NlYXJjaDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TZWFyY2gpO1xuXG52YXIgX2RldmljZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9zcmMvYWN0aW9ucy9kZXZpY2VzLmFjdGlvbi5qc1wiKTtcblxudmFyIF91dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3NyYy91dGlscy91dGlscy5qc1wiKTtcblxudmFyIF9maWx0ZXJPcHRpb25zID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vc3JjL2RhdGEvZmlsdGVyT3B0aW9ucy5qc1wiKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qc1wiKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgTGlzdEhlYWRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhMaXN0SGVhZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMaXN0SGVhZGVyKHByb3BzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExpc3RIZWFkZXIpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKExpc3RIZWFkZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMaXN0SGVhZGVyKSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgX3RoaXMuaW5pdGlhbFBhcmFtcyA9IHtcbiAgICAgIHNlYXJjaDogJycsXG4gICAgICBmaWx0ZXI6ICdhbGwnXG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUZpbHRlclNlbGVjdCA9IGZ1bmN0aW9uIChmaWx0ZXJPcHRpb24pIHtcbiAgICAgIF90aGlzLnByb3BzLmZpbHRlckFjdGlvbihmaWx0ZXJPcHRpb24pO1xuICAgICAgX3RoaXMudXBkYXRlVXJsKF9leHRlbmRzKHt9LCBfdGhpcy5pbml0aWFsUGFyYW1zLCB7IGZpbHRlcjogZmlsdGVyT3B0aW9uIH0pKTtcbiAgICB9O1xuICAgIF90aGlzLmhhbmRsZVNlYXJjaFJlc3VsdCA9IGZ1bmN0aW9uIChzZWFyY2hWYWx1ZSkge1xuICAgICAgX3RoaXMucHJvcHMuZmluZEl0ZW1zKHNlYXJjaFZhbHVlKTtcbiAgICAgIF90aGlzLnVwZGF0ZVVybChfZXh0ZW5kcyh7fSwgX3RoaXMuaW5pdGlhbFBhcmFtcywgeyBzZWFyY2g6IHNlYXJjaFZhbHVlIH0pKTtcbiAgICB9O1xuICAgIF90aGlzLnVwZGF0ZVVybCA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgIHZhciBtYXRjaCA9IF90aGlzLnByb3BzLm1hdGNoO1xuICAgICAgdmFyIGhpc3RvcnkgPSBfdGhpcy5wcm9wcy5oaXN0b3J5O1xuXG4gICAgICBfdGhpcy5pbml0aWFsUGFyYW1zID0gcGFyYW1zO1xuICAgICAgaGlzdG9yeS5wdXNoKHtcbiAgICAgICAgcGF0aG5hbWU6IG1hdGNoLnVybCxcbiAgICAgICAgc2VhcmNoOiAoMCwgX3V0aWxzLnF1ZXJ5RnJvbU9iamVjdCkocGFyYW1zKVxuICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTGlzdEhlYWRlciwgW3tcbiAgICBrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdmFyIGxvY2F0aW9uID0gdGhpcy5wcm9wcy5sb2NhdGlvbjtcbiAgICAgIHZhciBzZWFyY2hWYWx1ZSA9IF9xdWVyeVN0cmluZzIuZGVmYXVsdC5wYXJzZShsb2NhdGlvbi5zZWFyY2gpLnNlYXJjaDtcbiAgICAgIHZhciBmaWx0ZXJWYWx1ZSA9IF9xdWVyeVN0cmluZzIuZGVmYXVsdC5wYXJzZShsb2NhdGlvbi5zZWFyY2gpLmZpbHRlcjtcblxuICAgICAgaWYgKHNlYXJjaFZhbHVlKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlU2VhcmNoUmVzdWx0KHNlYXJjaFZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZpbHRlclZhbHVlKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlRmlsdGVyU2VsZWN0KGZpbHRlclZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsVW5tb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy5wcm9wcy5maWx0ZXJBY3Rpb24oJ2FsbCcpO1xuICAgICAgdGhpcy5wcm9wcy5maW5kSXRlbXMoJycpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2hlYWRlcicsXG4gICAgICAgIHsgY2xhc3NOYW1lOiAnZGV2aWNlLWxpc3RfX2hlYWRlcicgfSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1NlYXJjaDIuZGVmYXVsdCwge1xuICAgICAgICAgIGhhbmRsZVNlYXJjaDogdGhpcy5oYW5kbGVTZWFyY2hSZXN1bHQsXG4gICAgICAgICAgcXVhbnRpdHk6IHRoaXMucHJvcHMucXVhbnRpdHksXG4gICAgICAgICAgdmFsdWU6IHRoaXMuaW5pdGlhbFBhcmFtcy5zZWFyY2hcbiAgICAgICAgfSksXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiAnZGV2aWNlLWxpc3RfX2hlYWRlci0tcmlnaHQnIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0ZpbHRlclNlbGVjdDIuZGVmYXVsdCwge1xuICAgICAgICAgICAgaGFuZGxlU2VsZWN0OiB0aGlzLmhhbmRsZUZpbHRlclNlbGVjdCxcbiAgICAgICAgICAgIG9wdGlvbnM6IF9maWx0ZXJPcHRpb25zLm9wdGlvbnMsXG4gICAgICAgICAgICB2YWx1ZTogdGhpcy5pbml0aWFsUGFyYW1zLmZpbHRlclxuICAgICAgICAgIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgX3JlYWN0Um91dGVyRG9tLkxpbmssXG4gICAgICAgICAgICB7IHRvOiAnL2J1aWxkZXInLCBjbGFzc05hbWU6ICdidG4gYnRuLS1wcmltYXJ5IGFkZC1pdGVtLWJ1dHRvbicgfSxcbiAgICAgICAgICAgICdOZXcnXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBMaXN0SGVhZGVyO1xufShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxudmFyIG1hcFN0YXRlVG9Qcm9wcyA9IGZ1bmN0aW9uIG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSkge1xuICByZXR1cm4ge1xuICAgIGZpbHRlck9wdGlvbjogc3RhdGUuc2VhcmNoQW5kRmlsdGVyLmZpbHRlck9wdGlvbixcbiAgICBzZWFyY2g6IHN0YXRlLnNlYXJjaEFuZEZpbHRlci5zZWFyY2hWYWx1ZVxuICB9O1xufTtcblxudmFyIG1hcERpc3BhdGNoVG9Qcm9wcyA9IGZ1bmN0aW9uIG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCkge1xuICByZXR1cm4ge1xuICAgIGZpbHRlckFjdGlvbjogZnVuY3Rpb24gZmlsdGVyQWN0aW9uKGZpbHRlck9wdGlvbikge1xuICAgICAgcmV0dXJuIGRpc3BhdGNoKCgwLCBfZGV2aWNlcy5maWx0ZXJBY3Rpb24pKGZpbHRlck9wdGlvbikpO1xuICAgIH0sXG4gICAgZmluZEl0ZW1zOiBmdW5jdGlvbiBmaW5kSXRlbXMoc2VhcmNoVmFsdWUpIHtcbiAgICAgIHJldHVybiBkaXNwYXRjaCgoMCwgX2RldmljZXMuc2VhcmNoQWN0aW9uKShzZWFyY2hWYWx1ZSkpO1xuICAgIH1cbiAgfTtcbn07XG5cbkxpc3RIZWFkZXIucHJvcFR5cGVzID0ge1xuICBzZWFyY2g6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBmaWx0ZXJPcHRpb246IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBmaWx0ZXJBY3Rpb246IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgZmluZEl0ZW1zOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIG1hdGNoOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgaGlzdG9yeTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIGxvY2F0aW9uOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgbG9hZERldmljZXM6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgcXVhbnRpdHk6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyXG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSAoMCwgX3JlYWN0UmVkdXguY29ubmVjdCkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMpKExpc3RIZWFkZXIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9jb21wb25lbnRzL1BhZ2luYXRpb24vUGFnaW5hdGlvbi5qc1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3JlYWN0L3JlYWN0LmpzXCIpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qc1wiKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vc3JjL2NvbXBvbmVudHMvUGFnaW5hdGlvbi9QYWdpbmF0aW9uLnNjc3NcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFBhZ2luYXRpb24gPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUGFnaW5hdGlvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUGFnaW5hdGlvbihwcm9wcykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQYWdpbmF0aW9uKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoUGFnaW5hdGlvbi5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFBhZ2luYXRpb24pKS5jYWxsKHRoaXMsIHByb3BzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUGFnaW5hdGlvbiwgW3tcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIHBhZ2VOdW1iZXJzID0gW107XG4gICAgICB2YXIgY3VycmVudFBhZ2UgPSB0aGlzLnByb3BzLmN1cnJlbnRQYWdlO1xuXG4gICAgICBpZiAoIXRoaXMucHJvcHMudG90YWxQYWdlcyB8fCB0aGlzLnByb3BzLnRvdGFsUGFnZXMgPD0gMSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gdGhpcy5wcm9wcy50b3RhbFBhZ2VzOyBpKyspIHtcbiAgICAgICAgcGFnZU51bWJlcnMucHVzaChpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAndWwnLFxuICAgICAgICB7IGNsYXNzTmFtZTogJ3BhZ2luYXRpb24tcGFnZXMnIH0sXG4gICAgICAgIHBhZ2VOdW1iZXJzLm1hcChmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2xpJyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiBjdXJyZW50UGFnZSA9PT0gbnVtYmVyID8gJ3BhZ2luYXRpb24tcGFnZXNfX251bSBidG4nIDogJ3BhZ2luYXRpb24tcGFnZXNfX251bSBidG4gYnRuLS1kZWZhdWx0JyxcbiAgICAgICAgICAgICAga2V5OiBudW1iZXIsXG4gICAgICAgICAgICAgIGlkOiBudW1iZXIsXG4gICAgICAgICAgICAgIG9uQ2xpY2s6IF90aGlzMi5wcm9wcy5oYW5kbGVDbGljayB9LFxuICAgICAgICAgICAgbnVtYmVyXG4gICAgICAgICAgKTtcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFBhZ2luYXRpb247XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5QYWdpbmF0aW9uLnByb3BUeXBlcyA9IHtcbiAgaGFuZGxlQ2xpY2s6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgc2V0UGFnZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBjdXJyZW50UGFnZTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gIHRvdGFsUGFnZXM6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyXG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBQYWdpbmF0aW9uO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9jb21wb25lbnRzL1BhZ2luYXRpb24vUGFnaW5hdGlvbi5zY3NzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL2NvbXBvbmVudHMvU2VhcmNoL1NlYXJjaC5qc1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3JlYWN0L3JlYWN0LmpzXCIpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qc1wiKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vc3JjL2NvbXBvbmVudHMvU2VhcmNoL3NlYXJjaC5zY3NzXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgU2VhcmNoID0gZnVuY3Rpb24gU2VhcmNoKHByb3BzKSB7XG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAnZGl2JyxcbiAgICB7IGNsYXNzTmFtZTogJ3NlYXJjaEJveCcgfSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBjbGFzc05hbWU6ICdzZWFyY2hCb3hfX3Jlc3VsdHMnIH0sXG4gICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ3NwYW4nLFxuICAgICAgICBudWxsLFxuICAgICAgICBwcm9wcy5xdWFudGl0eVxuICAgICAgKSxcbiAgICAgICcgZGV2aWNlcydcbiAgICApLFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICBudWxsLFxuICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jywge1xuICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgIG5hbWU6ICdzZWFyY2gnLFxuICAgICAgICBwbGFjZWhvbGRlcjogJ0ZpbmQgYSBkZXZpY2UnLFxuICAgICAgICB2YWx1ZTogcHJvcHMudmFsdWUsXG4gICAgICAgIGNsYXNzTmFtZTogJ3NlYXJjaEJveF9fZmllbGQnLFxuICAgICAgICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UoZSkge1xuICAgICAgICAgIHByb3BzLmhhbmRsZVNlYXJjaChlLnRhcmdldC52YWx1ZSk7XG4gICAgICAgIH0gfSlcbiAgICApXG4gICk7XG59O1xuXG5TZWFyY2gucHJvcFR5cGVzID0ge1xuICBoYW5kbGVTZWFyY2g6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYy5pc1JlcXVpcmVkLFxuICBxdWFudGl0eTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gIHZhbHVlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZ1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gU2VhcmNoO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9jb21wb25lbnRzL1NlYXJjaC9zZWFyY2guc2Nzc1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG4vLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9jb21wb25lbnRzL1RvZ2dsZVNldHRpbmdzL1RvZ2dsZVNldHRpbmdzLmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB1bmRlZmluZWQ7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcmVhY3QvcmVhY3QuanNcIik7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzXCIpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9zcmMvY29tcG9uZW50cy9Ub2dnbGVTZXR0aW5ncy9Ub2dnbGVTdHlsZS5zY3NzXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBUb2dnbGVTZXR0aW5ncyA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhUb2dnbGVTZXR0aW5ncywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVG9nZ2xlU2V0dGluZ3MocHJvcHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVG9nZ2xlU2V0dGluZ3MpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFRvZ2dsZVNldHRpbmdzLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVG9nZ2xlU2V0dGluZ3MpKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfdGhpcy5vbkNoYW5nZVZhbHVlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIF90aGlzLnByb3BzLnNldEl0ZW1WYWx1ZSghX3RoaXMucHJvcHMuY2hlY2tlZCwgX3RoaXMucHJvcHMuaXRlbUlkLCBfdGhpcy5wcm9wcy5kZXZpY2VJZCk7XG4gICAgfTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhUb2dnbGVTZXR0aW5ncywgW3tcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IGNsYXNzTmFtZTogJycgKyB0aGlzLnByb3BzLnN0eWxlTmFtZSB9LFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnbGFiZWwnLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiAnc3dpdGNoJyB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdpbnB1dCcsIHtcbiAgICAgICAgICAgIHR5cGU6ICdjaGVja2JveCcsXG4gICAgICAgICAgICBjaGVja2VkOiB0aGlzLnByb3BzLmNoZWNrZWQsXG4gICAgICAgICAgICBvbkNoYW5nZTogdGhpcy5vbkNoYW5nZVZhbHVlXG4gICAgICAgICAgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiAnc2xpZGVyIHJvdW5kJyB9KVxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBUb2dnbGVTZXR0aW5ncztcbn0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFRvZ2dsZVNldHRpbmdzO1xuXG5cblRvZ2dsZVNldHRpbmdzLnByb3BUeXBlcyA9IHtcbiAgZGV2aWNlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgc3R5bGVOYW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgY2hlY2tlZDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLmlzUmVxdWlyZWQsXG4gIHNldEl0ZW1WYWx1ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBpdGVtSWQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYW55LFxuICBuZXdWYWx1ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGRldmljZUlkOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZ1xufTtcblRvZ2dsZVNldHRpbmdzLmRlZmF1bHRQcm9wcyA9IHtcbiAgY2hlY2tlZDogZmFsc2Vcbn07XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL2NvbXBvbmVudHMvVG9nZ2xlU2V0dGluZ3MvVG9nZ2xlU3R5bGUuc2Nzc1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG4vLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9kYXRhL2ZpbHRlck9wdGlvbnMuanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbnZhciBvcHRpb25zID0gZXhwb3J0cy5vcHRpb25zID0gW3tcbiAgdmFsdWU6ICdhbGwnLFxuICBpbm5lclRleHQ6ICdBbGwnXG59LCB7XG4gIHZhbHVlOiAnb24nLFxuICBpbm5lclRleHQ6ICdTaG93IE9uJ1xufSwge1xuICB2YWx1ZTogJ29mZicsXG4gIGlubmVyVGV4dDogJ1Nob3cgT0ZGJ1xufV07XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL3BhZ2VzL0xvY2F0aW9uTGlzdC9Mb2NhdGlvbkxpc3QuanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9yZWFjdC9yZWFjdC5qc1wiKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3RSZWR1eCA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9pbmRleC5qc1wiKTtcblxudmFyIF9QYWdpbmF0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vc3JjL2NvbXBvbmVudHMvUGFnaW5hdGlvbi9QYWdpbmF0aW9uLmpzXCIpO1xuXG52YXIgX1BhZ2luYXRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUGFnaW5hdGlvbik7XG5cbnZhciBfRGV2aWNlTGlzdEl0ZW0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9zcmMvY29tcG9uZW50cy9EZXZpY2VMaXN0SXRlbS9EZXZpY2VMaXN0SXRlbS5qc1wiKTtcblxudmFyIF9EZXZpY2VMaXN0SXRlbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9EZXZpY2VMaXN0SXRlbSk7XG5cbnZhciBfRGV2aXNlc1NlY3Rpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9zcmMvY29tcG9uZW50cy9EZXZpc2VzU2VjdGlvbi9EZXZpc2VzU2VjdGlvbi5qc1wiKTtcblxudmFyIF9EZXZpc2VzU2VjdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9EZXZpc2VzU2VjdGlvbik7XG5cbnZhciBfZGV2aWNlcyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3NyYy9hY3Rpb25zL2RldmljZXMuYWN0aW9uLmpzXCIpO1xuXG52YXIgX25vdGlmaWNhdGlvbnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9zcmMvYWN0aW9ucy9ub3RpZmljYXRpb25zLmFjdGlvbi5qc1wiKTtcblxudmFyIF9zZWxlY3RvcnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9zcmMvc2VsZWN0b3JzL2luZGV4LmpzXCIpO1xuXG52YXIgX3JlYWN0QWRkb25zQ3NzVHJhbnNpdGlvbkdyb3VwID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3JlYWN0LWFkZG9ucy1jc3MtdHJhbnNpdGlvbi1ncm91cC9pbmRleC5qc1wiKTtcblxudmFyIF9yZWFjdEFkZG9uc0Nzc1RyYW5zaXRpb25Hcm91cDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdEFkZG9uc0Nzc1RyYW5zaXRpb25Hcm91cCk7XG5cbnZhciBfcHJvcFR5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanNcIik7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIExvY2F0aW9uTGlzdCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhMb2NhdGlvbkxpc3QsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIExvY2F0aW9uTGlzdChwcm9wcykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMb2NhdGlvbkxpc3QpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKExvY2F0aW9uTGlzdC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExvY2F0aW9uTGlzdCkpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgcG9wdXBTaG93bjogZmFsc2UsXG4gICAgICBjdXJyZW50SWQ6ICcnLFxuICAgICAgY3VycmVudFBhZ2U6IDEsXG4gICAgICBkZXZpY2VzUGVyUGFnZTogMTJcbiAgICB9O1xuXG4gICAgX3RoaXMuc2V0UG9wdXBTaG93biA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgdmFyIGN1cnJlbnRTdGF0ZSA9IF90aGlzLnN0YXRlLnBvcHVwU2hvd247XG5cbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgcG9wdXBTaG93bjogIWN1cnJlbnRTdGF0ZSxcbiAgICAgICAgY3VycmVudElkOiBpZFxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGN1cnJlbnRQYWdlOiBOdW1iZXIoZXZlbnQudGFyZ2V0LmlkKVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLnNldFBhZ2UgPSBmdW5jdGlvbiAocGFnZU51bWJlcikge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBjdXJyZW50UGFnZTogcGFnZU51bWJlclxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLmNoYW5nZVN0YXR1cyA9IGZ1bmN0aW9uIChzdGF0dXMsIGlkKSB7XG4gICAgICBfdGhpcy5wcm9wcy5jaGFuZ2VTdGF0dXMoeyBzdGF0dXM6IHN0YXR1cyB9LCBpZCk7XG4gICAgfTtcbiAgICBfdGhpcy5kZWxldGVEZXZpY2UgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIF90aGlzLnByb3BzLmRlbGV0ZURldmljZShpZCk7XG4gICAgfTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTG9jYXRpb25MaXN0LCBbe1xuICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLnByb3BzLmxvYWREZXZpY2VzKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyRGV2aWNlcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckRldmljZXMoZGV2aWNlc0luTG9jYXRpb24pIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICByZXR1cm4gZGV2aWNlc0luTG9jYXRpb24ubWFwKGZ1bmN0aW9uIChkZXZpY2UsIGkpIHtcbiAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9EZXZpY2VMaXN0SXRlbTIuZGVmYXVsdCwge1xuICAgICAgICAgIGRhdGE6IGRldmljZSxcbiAgICAgICAgICBrZXk6IGksXG4gICAgICAgICAgbG9jYXRpb246ICcnLFxuICAgICAgICAgIGNoYW5nZVN0YXR1czogX3RoaXMyLmNoYW5nZVN0YXR1cyxcbiAgICAgICAgICBzZXRQb3B1cFNob3duOiBfdGhpczIuc2V0UG9wdXBTaG93biB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlckRldmljZUdyb3VwJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyRGV2aWNlR3JvdXAoZGV2aWNlc0luTG9jYXRpb24pIHtcbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsgY2xhc3NOYW1lOiAnZGV2aWNlLWdyb3VwJyB9LFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBfcmVhY3RBZGRvbnNDc3NUcmFuc2l0aW9uR3JvdXAyLmRlZmF1bHQsXG4gICAgICAgICAge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiAnZGV2aWNlLWdyb3VwX19pdGVtcycsXG4gICAgICAgICAgICB0cmFuc2l0aW9uTmFtZTogJ2hpZGUnLFxuICAgICAgICAgICAgdHJhbnNpdGlvbkVudGVyVGltZW91dDogNTAwLFxuICAgICAgICAgICAgdHJhbnNpdGlvbkxlYXZlVGltZW91dDogMzAwIH0sXG4gICAgICAgICAgdGhpcy5yZW5kZXJEZXZpY2VzKGRldmljZXNJbkxvY2F0aW9uKVxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBmaWx0ZXJPcHRpb24gPSB0aGlzLnByb3BzLm1hdGNoLnBhcmFtcy5maWx0ZXJPcHRpb247XG4gICAgICB2YXIgbG9jYXRpb25PZkRldmljZXMgPSB0aGlzLnByb3BzLm1hdGNoLnBhcmFtcy5sb2NhdGlvbjtcbiAgICAgIHZhciBkZXZpY2VzSW5Mb2NhdGlvbiA9IHRoaXMucHJvcHMuZGV2aWNlcy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0ubG9jYXRpb24gPT09IGxvY2F0aW9uT2ZEZXZpY2VzO1xuICAgICAgfSk7XG4gICAgICB2YXIgX3N0YXRlID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICBjdXJyZW50UGFnZSA9IF9zdGF0ZS5jdXJyZW50UGFnZSxcbiAgICAgICAgICBkZXZpY2VzUGVyUGFnZSA9IF9zdGF0ZS5kZXZpY2VzUGVyUGFnZTtcblxuICAgICAgdmFyIHRvdGFsUGFnZXMgPSBNYXRoLmNlaWwoZGV2aWNlc0luTG9jYXRpb24ubGVuZ3RoIC8gZGV2aWNlc1BlclBhZ2UpO1xuICAgICAgdmFyIGluZGV4T2ZMYXN0RGV2aWNlID0gY3VycmVudFBhZ2UgKiBkZXZpY2VzUGVyUGFnZTtcbiAgICAgIHZhciBpbmRleE9mRmlyc3REZXZpY2UgPSBpbmRleE9mTGFzdERldmljZSAtIGRldmljZXNQZXJQYWdlO1xuICAgICAgdmFyIGN1cnJlbnREZXZpY2VzID0gZGV2aWNlc0luTG9jYXRpb24uc2xpY2UoaW5kZXhPZkZpcnN0RGV2aWNlLCBpbmRleE9mTGFzdERldmljZSk7XG5cbiAgICAgIGlmICh0eXBlb2YgZmlsdGVyT3B0aW9uICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aGlzLnByb3BzLmZpbHRlckFjdGlvbihmaWx0ZXJPcHRpb24pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIF9EZXZpc2VzU2VjdGlvbjIuZGVmYXVsdCxcbiAgICAgICAge1xuICAgICAgICAgIGZpbHRlck9wdGlvbjogdGhpcy5wcm9wcy5tYXRjaC5wYXJhbXMuZmlsdGVyT3B0aW9uLFxuICAgICAgICAgIGRldmljZXM6IHRoaXMucHJvcHMuZGV2aWNlcyxcbiAgICAgICAgICBsb2NhdGlvbjogdGhpcy5wcm9wcy5sb2NhdGlvbixcbiAgICAgICAgICBoaXN0b3J5OiB0aGlzLnByb3BzLmhpc3RvcnksXG4gICAgICAgICAgbWF0Y2g6IHRoaXMucHJvcHMubWF0Y2gsXG4gICAgICAgICAgc3RhdHVzOiB0aGlzLnByb3BzLnN0YXR1cyxcbiAgICAgICAgICB0ZXh0OiB0aGlzLnByb3BzLmVycm9yVGV4dCxcbiAgICAgICAgICBzZXRQb3B1cFNob3duOiB0aGlzLnNldFBvcHVwU2hvd24sXG4gICAgICAgICAgcG9wdXBTaG93bjogdGhpcy5zdGF0ZS5wb3B1cFNob3duLFxuICAgICAgICAgIGRlbGV0ZURldmljZTogdGhpcy5kZWxldGVEZXZpY2UsXG4gICAgICAgICAgY2xlYXJTdGF0dXM6IHRoaXMucHJvcHMuY2xlYXJTdGF0dXMsXG4gICAgICAgICAgY3VycmVudElkOiB0aGlzLnN0YXRlLmN1cnJlbnRJZCxcbiAgICAgICAgICBxdWFudGl0eTogZGV2aWNlc0luTG9jYXRpb24ubGVuZ3RoLFxuICAgICAgICAgIGxvY2F0aW9uT2ZEZXZpY2VzOiBsb2NhdGlvbk9mRGV2aWNlcyB9LFxuICAgICAgICB0aGlzLnByb3BzLnN0YXR1cyA9PT0gJ0RPTkUnICYmIHRoaXMucHJvcHMuZGV2aWNlcy5sZW5ndGggPT09IDAgPyBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnc3BhbicsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICAnWW91IG5lZWQgdG8gYWRkIGRldmljZSdcbiAgICAgICAgKSA6IHRoaXMucmVuZGVyRGV2aWNlR3JvdXAoY3VycmVudERldmljZXMpLFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfUGFnaW5hdGlvbjIuZGVmYXVsdCwge1xuICAgICAgICAgIGhhbmRsZUNsaWNrOiB0aGlzLmhhbmRsZUNsaWNrLFxuICAgICAgICAgIHNldFBhZ2U6IHRoaXMuc2V0UGFnZSxcbiAgICAgICAgICBsaXN0OiB0aGlzLnByb3BzLmRldmljZXMsXG4gICAgICAgICAgY3VycmVudFBhZ2U6IHRoaXMuc3RhdGUuY3VycmVudFBhZ2UsXG4gICAgICAgICAgdG90YWxQYWdlczogdG90YWxQYWdlcyB9KVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTG9jYXRpb25MaXN0O1xufShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxudmFyIG1hcFN0YXRlVG9Qcm9wcyA9IGZ1bmN0aW9uIG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSkge1xuICByZXR1cm4ge1xuICAgIGRldmljZXM6ICgwLCBfc2VsZWN0b3JzLmZpbHRlckl0ZW1zKShzdGF0ZSksXG4gICAgc3RhdHVzOiBzdGF0ZS5kZXZpY2VzTGlzdC51cGxvYWRTdGF0dXMsXG4gICAgZXJyb3JUZXh0OiBzdGF0ZS5kZXZpY2VzTGlzdC5lcnJvclRleHRcbiAgfTtcbn07XG5cbnZhciBtYXBEaXNwYXRjaFRvUHJvcHMgPSBmdW5jdGlvbiBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gpIHtcbiAgcmV0dXJuIHtcbiAgICBjaGFuZ2VTdGF0dXM6IGZ1bmN0aW9uIGNoYW5nZVN0YXR1cyhkYXRhLCBpZCkge1xuICAgICAgcmV0dXJuIGRpc3BhdGNoKCgwLCBfZGV2aWNlcy51cGRhdGVEZXZpY2UpKGRhdGEsIGlkKSk7XG4gICAgfSxcbiAgICBsb2FkRGV2aWNlczogZnVuY3Rpb24gbG9hZERldmljZXMoKSB7XG4gICAgICByZXR1cm4gZGlzcGF0Y2goKDAsIF9kZXZpY2VzLmxvYWREZXZpY2VzKSgpKTtcbiAgICB9LFxuICAgIGRlbGV0ZURldmljZTogZnVuY3Rpb24gZGVsZXRlRGV2aWNlKGlkKSB7XG4gICAgICByZXR1cm4gZGlzcGF0Y2goKDAsIF9kZXZpY2VzLmRlbGV0ZURldmljZSkoaWQpKTtcbiAgICB9LFxuICAgIHNlbmROb3RpZmljYXRpb25XUzogZnVuY3Rpb24gc2VuZE5vdGlmaWNhdGlvbldTKG1lc3NhZ2UpIHtcbiAgICAgIHJldHVybiBkaXNwYXRjaCgoMCwgX25vdGlmaWNhdGlvbnMuc2VuZE5vdGlmaWNhdGlvbldTKShtZXNzYWdlKSk7XG4gICAgfSxcbiAgICBjbGVhclN0YXR1czogZnVuY3Rpb24gY2xlYXJTdGF0dXMoKSB7XG4gICAgICByZXR1cm4gZGlzcGF0Y2goKDAsIF9kZXZpY2VzLmNsZWFyU3RhdHVzKSgpKTtcbiAgICB9XG4gIH07XG59O1xuXG5Mb2NhdGlvbkxpc3QucHJvcFR5cGVzID0ge1xuICBzZWFyY2g6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBmaWx0ZXJPcHRpb246IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBtYXRjaDogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIGNoYW5nZVN0YXR1czogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBkZXZpY2VzOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmFycmF5LFxuICBmaWx0ZXJBY3Rpb246IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgZmluZEl0ZW1zOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIGxvYWREZXZpY2VzOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIGRlbGV0ZURldmljZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBoaXN0b3J5OiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgbG9jYXRpb246IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICBzdGF0dXM6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBzZW5kTm90aWZpY2F0aW9uV1M6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgZXJyb3JUZXh0OiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgY2xlYXJTdGF0dXM6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuY1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gKDAsIF9yZWFjdFJlZHV4LmNvbm5lY3QpKG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKShMb2NhdGlvbkxpc3QpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9zZWxlY3RvcnMvaW5kZXguanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZmlsdGVySXRlbXMgPSB1bmRlZmluZWQ7XG5cbnZhciBfcmVzZWxlY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcmVzZWxlY3QvbGliL2luZGV4LmpzXCIpO1xuXG52YXIgX3V0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vc3JjL3V0aWxzL3V0aWxzLmpzXCIpO1xuXG52YXIgZ2V0RmlsdGVyT3B0aW9uID0gZnVuY3Rpb24gZ2V0RmlsdGVyT3B0aW9uKHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZS5zZWFyY2hBbmRGaWx0ZXIuZmlsdGVyT3B0aW9uO1xufTtcbnZhciBnZXREZXZpY2VzID0gZnVuY3Rpb24gZ2V0RGV2aWNlcyhzdGF0ZSkge1xuICByZXR1cm4gc3RhdGUuZGV2aWNlc0xpc3QuZGV2aWNlcztcbn07XG52YXIgZ2V0U2VhcmNoVmFsdWUgPSBmdW5jdGlvbiBnZXRTZWFyY2hWYWx1ZShzdGF0ZSkge1xuICByZXR1cm4gc3RhdGUuc2VhcmNoQW5kRmlsdGVyLnNlYXJjaFZhbHVlO1xufTtcblxudmFyIGZpbHRlckl0ZW1zID0gZXhwb3J0cy5maWx0ZXJJdGVtcyA9ICgwLCBfcmVzZWxlY3QuY3JlYXRlU2VsZWN0b3IpKFtnZXRGaWx0ZXJPcHRpb24sIGdldFNlYXJjaFZhbHVlLCBnZXREZXZpY2VzXSwgZnVuY3Rpb24gKGZpbHRlck9wdGlvbiwgc2VhcmNoVmFsdWUsIGl0ZW1zKSB7XG4gIHZhciBuZXdBcnIgPSBpdGVtcztcblxuICBpZiAoZmlsdGVyT3B0aW9uID09PSAnYWxsJykge1xuICAgIG5ld0FyciA9IGl0ZW1zO1xuICB9IGVsc2UgaWYgKGZpbHRlck9wdGlvbiA9PT0gJ29uJykge1xuICAgIG5ld0FyciA9IGl0ZW1zLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgcmV0dXJuIGl0ZW0uc3RhdHVzID09PSB0cnVlO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKGZpbHRlck9wdGlvbiA9PT0gJ29mZicpIHtcbiAgICBuZXdBcnIgPSBpdGVtcy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHJldHVybiBpdGVtLnN0YXR1cyA9PT0gZmFsc2U7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIG5ld0Fyci5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICByZXR1cm4gKDAsIF91dGlscy5zZWFyY2hJdGVtKShpdGVtLCBzZWFyY2hWYWx1ZSk7XG4gIH0pO1xufSk7XG5cbi8qKiovIH0pXG5cbn0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAxLmluZGV4X2J1bmRsZS5qcyIsIlxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNoYWluKCl7XHJcbiAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGhcclxuICB2YXIgYXJncyA9IFtdO1xyXG5cclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKVxyXG4gICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXVxyXG5cclxuICBhcmdzID0gYXJncy5maWx0ZXIoZnVuY3Rpb24oZm4peyByZXR1cm4gZm4gIT0gbnVsbCB9KVxyXG5cclxuICBpZiAoYXJncy5sZW5ndGggPT09IDApIHJldHVybiB1bmRlZmluZWRcclxuICBpZiAoYXJncy5sZW5ndGggPT09IDEpIHJldHVybiBhcmdzWzBdXHJcblxyXG4gIHJldHVybiBhcmdzLnJlZHVjZShmdW5jdGlvbihjdXJyZW50LCBuZXh0KXtcclxuICAgIHJldHVybiBmdW5jdGlvbiBjaGFpbmVkRnVuY3Rpb24oKSB7XHJcbiAgICAgIGN1cnJlbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICAgICAgbmV4dC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgfTtcclxuICB9KVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vY2hhaW4tZnVuY3Rpb24vaW5kZXguanMiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBhZGRDbGFzcztcblxudmFyIF9oYXNDbGFzcyA9IHJlcXVpcmUoJy4vaGFzQ2xhc3MnKTtcblxudmFyIF9oYXNDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oYXNDbGFzcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGFkZENsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSkge1xuICBpZiAoZWxlbWVudC5jbGFzc0xpc3QpIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO2Vsc2UgaWYgKCEoMCwgX2hhc0NsYXNzMi5kZWZhdWx0KShlbGVtZW50KSkgZWxlbWVudC5jbGFzc05hbWUgPSBlbGVtZW50LmNsYXNzTmFtZSArICcgJyArIGNsYXNzTmFtZTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vZG9tLWhlbHBlcnMvY2xhc3MvYWRkQ2xhc3MuanMiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGhhc0NsYXNzO1xuZnVuY3Rpb24gaGFzQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKSB7XG4gIGlmIChlbGVtZW50LmNsYXNzTGlzdCkgcmV0dXJuICEhY2xhc3NOYW1lICYmIGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSk7ZWxzZSByZXR1cm4gKFwiIFwiICsgZWxlbWVudC5jbGFzc05hbWUgKyBcIiBcIikuaW5kZXhPZihcIiBcIiArIGNsYXNzTmFtZSArIFwiIFwiKSAhPT0gLTE7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vZG9tLWhlbHBlcnMvY2xhc3MvaGFzQ2xhc3MuanMiLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmVtb3ZlQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKSB7XG4gIGlmIChlbGVtZW50LmNsYXNzTGlzdCkgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7ZWxzZSBlbGVtZW50LmNsYXNzTmFtZSA9IGVsZW1lbnQuY2xhc3NOYW1lLnJlcGxhY2UobmV3IFJlZ0V4cCgnKF58XFxcXHMpJyArIGNsYXNzTmFtZSArICcoPzpcXFxcc3wkKScsICdnJyksICckMScpLnJlcGxhY2UoL1xccysvZywgJyAnKS5yZXBsYWNlKC9eXFxzKnxcXHMqJC9nLCAnJyk7XG59O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vZG9tLWhlbHBlcnMvY2xhc3MvcmVtb3ZlQ2xhc3MuanMiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmFuaW1hdGlvbkVuZCA9IGV4cG9ydHMuYW5pbWF0aW9uRGVsYXkgPSBleHBvcnRzLmFuaW1hdGlvblRpbWluZyA9IGV4cG9ydHMuYW5pbWF0aW9uRHVyYXRpb24gPSBleHBvcnRzLmFuaW1hdGlvbk5hbWUgPSBleHBvcnRzLnRyYW5zaXRpb25FbmQgPSBleHBvcnRzLnRyYW5zaXRpb25EdXJhdGlvbiA9IGV4cG9ydHMudHJhbnNpdGlvbkRlbGF5ID0gZXhwb3J0cy50cmFuc2l0aW9uVGltaW5nID0gZXhwb3J0cy50cmFuc2l0aW9uUHJvcGVydHkgPSBleHBvcnRzLnRyYW5zZm9ybSA9IHVuZGVmaW5lZDtcblxudmFyIF9pbkRPTSA9IHJlcXVpcmUoJy4uL3V0aWwvaW5ET00nKTtcblxudmFyIF9pbkRPTTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbkRPTSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciB0cmFuc2Zvcm0gPSAndHJhbnNmb3JtJztcbnZhciBwcmVmaXggPSB2b2lkIDAsXG4gICAgdHJhbnNpdGlvbkVuZCA9IHZvaWQgMCxcbiAgICBhbmltYXRpb25FbmQgPSB2b2lkIDA7XG52YXIgdHJhbnNpdGlvblByb3BlcnR5ID0gdm9pZCAwLFxuICAgIHRyYW5zaXRpb25EdXJhdGlvbiA9IHZvaWQgMCxcbiAgICB0cmFuc2l0aW9uVGltaW5nID0gdm9pZCAwLFxuICAgIHRyYW5zaXRpb25EZWxheSA9IHZvaWQgMDtcbnZhciBhbmltYXRpb25OYW1lID0gdm9pZCAwLFxuICAgIGFuaW1hdGlvbkR1cmF0aW9uID0gdm9pZCAwLFxuICAgIGFuaW1hdGlvblRpbWluZyA9IHZvaWQgMCxcbiAgICBhbmltYXRpb25EZWxheSA9IHZvaWQgMDtcblxuaWYgKF9pbkRPTTIuZGVmYXVsdCkge1xuICB2YXIgX2dldFRyYW5zaXRpb25Qcm9wZXJ0ID0gZ2V0VHJhbnNpdGlvblByb3BlcnRpZXMoKTtcblxuICBwcmVmaXggPSBfZ2V0VHJhbnNpdGlvblByb3BlcnQucHJlZml4O1xuICBleHBvcnRzLnRyYW5zaXRpb25FbmQgPSB0cmFuc2l0aW9uRW5kID0gX2dldFRyYW5zaXRpb25Qcm9wZXJ0LnRyYW5zaXRpb25FbmQ7XG4gIGV4cG9ydHMuYW5pbWF0aW9uRW5kID0gYW5pbWF0aW9uRW5kID0gX2dldFRyYW5zaXRpb25Qcm9wZXJ0LmFuaW1hdGlvbkVuZDtcblxuXG4gIGV4cG9ydHMudHJhbnNmb3JtID0gdHJhbnNmb3JtID0gcHJlZml4ICsgJy0nICsgdHJhbnNmb3JtO1xuICBleHBvcnRzLnRyYW5zaXRpb25Qcm9wZXJ0eSA9IHRyYW5zaXRpb25Qcm9wZXJ0eSA9IHByZWZpeCArICctdHJhbnNpdGlvbi1wcm9wZXJ0eSc7XG4gIGV4cG9ydHMudHJhbnNpdGlvbkR1cmF0aW9uID0gdHJhbnNpdGlvbkR1cmF0aW9uID0gcHJlZml4ICsgJy10cmFuc2l0aW9uLWR1cmF0aW9uJztcbiAgZXhwb3J0cy50cmFuc2l0aW9uRGVsYXkgPSB0cmFuc2l0aW9uRGVsYXkgPSBwcmVmaXggKyAnLXRyYW5zaXRpb24tZGVsYXknO1xuICBleHBvcnRzLnRyYW5zaXRpb25UaW1pbmcgPSB0cmFuc2l0aW9uVGltaW5nID0gcHJlZml4ICsgJy10cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbic7XG5cbiAgZXhwb3J0cy5hbmltYXRpb25OYW1lID0gYW5pbWF0aW9uTmFtZSA9IHByZWZpeCArICctYW5pbWF0aW9uLW5hbWUnO1xuICBleHBvcnRzLmFuaW1hdGlvbkR1cmF0aW9uID0gYW5pbWF0aW9uRHVyYXRpb24gPSBwcmVmaXggKyAnLWFuaW1hdGlvbi1kdXJhdGlvbic7XG4gIGV4cG9ydHMuYW5pbWF0aW9uVGltaW5nID0gYW5pbWF0aW9uVGltaW5nID0gcHJlZml4ICsgJy1hbmltYXRpb24tZGVsYXknO1xuICBleHBvcnRzLmFuaW1hdGlvbkRlbGF5ID0gYW5pbWF0aW9uRGVsYXkgPSBwcmVmaXggKyAnLWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb24nO1xufVxuXG5leHBvcnRzLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbmV4cG9ydHMudHJhbnNpdGlvblByb3BlcnR5ID0gdHJhbnNpdGlvblByb3BlcnR5O1xuZXhwb3J0cy50cmFuc2l0aW9uVGltaW5nID0gdHJhbnNpdGlvblRpbWluZztcbmV4cG9ydHMudHJhbnNpdGlvbkRlbGF5ID0gdHJhbnNpdGlvbkRlbGF5O1xuZXhwb3J0cy50cmFuc2l0aW9uRHVyYXRpb24gPSB0cmFuc2l0aW9uRHVyYXRpb247XG5leHBvcnRzLnRyYW5zaXRpb25FbmQgPSB0cmFuc2l0aW9uRW5kO1xuZXhwb3J0cy5hbmltYXRpb25OYW1lID0gYW5pbWF0aW9uTmFtZTtcbmV4cG9ydHMuYW5pbWF0aW9uRHVyYXRpb24gPSBhbmltYXRpb25EdXJhdGlvbjtcbmV4cG9ydHMuYW5pbWF0aW9uVGltaW5nID0gYW5pbWF0aW9uVGltaW5nO1xuZXhwb3J0cy5hbmltYXRpb25EZWxheSA9IGFuaW1hdGlvbkRlbGF5O1xuZXhwb3J0cy5hbmltYXRpb25FbmQgPSBhbmltYXRpb25FbmQ7XG5leHBvcnRzLmRlZmF1bHQgPSB7XG4gIHRyYW5zZm9ybTogdHJhbnNmb3JtLFxuICBlbmQ6IHRyYW5zaXRpb25FbmQsXG4gIHByb3BlcnR5OiB0cmFuc2l0aW9uUHJvcGVydHksXG4gIHRpbWluZzogdHJhbnNpdGlvblRpbWluZyxcbiAgZGVsYXk6IHRyYW5zaXRpb25EZWxheSxcbiAgZHVyYXRpb246IHRyYW5zaXRpb25EdXJhdGlvblxufTtcblxuXG5mdW5jdGlvbiBnZXRUcmFuc2l0aW9uUHJvcGVydGllcygpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jykuc3R5bGU7XG5cbiAgdmFyIHZlbmRvck1hcCA9IHtcbiAgICBPOiBmdW5jdGlvbiBPKGUpIHtcbiAgICAgIHJldHVybiAnbycgKyBlLnRvTG93ZXJDYXNlKCk7XG4gICAgfSxcbiAgICBNb3o6IGZ1bmN0aW9uIE1veihlKSB7XG4gICAgICByZXR1cm4gZS50b0xvd2VyQ2FzZSgpO1xuICAgIH0sXG4gICAgV2Via2l0OiBmdW5jdGlvbiBXZWJraXQoZSkge1xuICAgICAgcmV0dXJuICd3ZWJraXQnICsgZTtcbiAgICB9LFxuICAgIG1zOiBmdW5jdGlvbiBtcyhlKSB7XG4gICAgICByZXR1cm4gJ01TJyArIGU7XG4gICAgfVxuICB9O1xuXG4gIHZhciB2ZW5kb3JzID0gT2JqZWN0LmtleXModmVuZG9yTWFwKTtcblxuICB2YXIgdHJhbnNpdGlvbkVuZCA9IHZvaWQgMCxcbiAgICAgIGFuaW1hdGlvbkVuZCA9IHZvaWQgMDtcbiAgdmFyIHByZWZpeCA9ICcnO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmVuZG9ycy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB2ZW5kb3IgPSB2ZW5kb3JzW2ldO1xuXG4gICAgaWYgKHZlbmRvciArICdUcmFuc2l0aW9uUHJvcGVydHknIGluIHN0eWxlKSB7XG4gICAgICBwcmVmaXggPSAnLScgKyB2ZW5kb3IudG9Mb3dlckNhc2UoKTtcbiAgICAgIHRyYW5zaXRpb25FbmQgPSB2ZW5kb3JNYXBbdmVuZG9yXSgnVHJhbnNpdGlvbkVuZCcpO1xuICAgICAgYW5pbWF0aW9uRW5kID0gdmVuZG9yTWFwW3ZlbmRvcl0oJ0FuaW1hdGlvbkVuZCcpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKCF0cmFuc2l0aW9uRW5kICYmICd0cmFuc2l0aW9uUHJvcGVydHknIGluIHN0eWxlKSB0cmFuc2l0aW9uRW5kID0gJ3RyYW5zaXRpb25lbmQnO1xuXG4gIGlmICghYW5pbWF0aW9uRW5kICYmICdhbmltYXRpb25OYW1lJyBpbiBzdHlsZSkgYW5pbWF0aW9uRW5kID0gJ2FuaW1hdGlvbmVuZCc7XG5cbiAgc3R5bGUgPSBudWxsO1xuXG4gIHJldHVybiB7IGFuaW1hdGlvbkVuZDogYW5pbWF0aW9uRW5kLCB0cmFuc2l0aW9uRW5kOiB0cmFuc2l0aW9uRW5kLCBwcmVmaXg6IHByZWZpeCB9O1xufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vZG9tLWhlbHBlcnMvdHJhbnNpdGlvbi9wcm9wZXJ0aWVzLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vZG9tLWhlbHBlcnMvdXRpbC9pbkRPTS5qcyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9pbkRPTSA9IHJlcXVpcmUoJy4vaW5ET00nKTtcblxudmFyIF9pbkRPTTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbkRPTSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciB2ZW5kb3JzID0gWycnLCAnd2Via2l0JywgJ21veicsICdvJywgJ21zJ107XG52YXIgY2FuY2VsID0gJ2NsZWFyVGltZW91dCc7XG52YXIgcmFmID0gZmFsbGJhY2s7XG52YXIgY29tcGF0UmFmID0gdm9pZCAwO1xuXG52YXIgZ2V0S2V5ID0gZnVuY3Rpb24gZ2V0S2V5KHZlbmRvciwgaykge1xuICByZXR1cm4gdmVuZG9yICsgKCF2ZW5kb3IgPyBrIDoga1swXS50b1VwcGVyQ2FzZSgpICsgay5zdWJzdHIoMSkpICsgJ0FuaW1hdGlvbkZyYW1lJztcbn07XG5cbmlmIChfaW5ET00yLmRlZmF1bHQpIHtcbiAgdmVuZG9ycy5zb21lKGZ1bmN0aW9uICh2ZW5kb3IpIHtcbiAgICB2YXIgcmFmS2V5ID0gZ2V0S2V5KHZlbmRvciwgJ3JlcXVlc3QnKTtcblxuICAgIGlmIChyYWZLZXkgaW4gd2luZG93KSB7XG4gICAgICBjYW5jZWwgPSBnZXRLZXkodmVuZG9yLCAnY2FuY2VsJyk7XG4gICAgICByZXR1cm4gcmFmID0gZnVuY3Rpb24gcmFmKGNiKSB7XG4gICAgICAgIHJldHVybiB3aW5kb3dbcmFmS2V5XShjYik7XG4gICAgICB9O1xuICAgIH1cbiAgfSk7XG59XG5cbi8qIGh0dHBzOi8vZ2l0aHViLmNvbS9jb21wb25lbnQvcmFmICovXG52YXIgcHJldiA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuZnVuY3Rpb24gZmFsbGJhY2soZm4pIHtcbiAgdmFyIGN1cnIgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSxcbiAgICAgIG1zID0gTWF0aC5tYXgoMCwgMTYgLSAoY3VyciAtIHByZXYpKSxcbiAgICAgIHJlcSA9IHNldFRpbWVvdXQoZm4sIG1zKTtcblxuICBwcmV2ID0gY3VycjtcbiAgcmV0dXJuIHJlcTtcbn1cblxuY29tcGF0UmFmID0gZnVuY3Rpb24gY29tcGF0UmFmKGNiKSB7XG4gIHJldHVybiByYWYoY2IpO1xufTtcbmNvbXBhdFJhZi5jYW5jZWwgPSBmdW5jdGlvbiAoaWQpIHtcbiAgd2luZG93W2NhbmNlbF0gJiYgdHlwZW9mIHdpbmRvd1tjYW5jZWxdID09PSAnZnVuY3Rpb24nICYmIHdpbmRvd1tjYW5jZWxdKGlkKTtcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBjb21wYXRSYWY7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2RvbS1oZWxwZXJzL3V0aWwvcmVxdWVzdEFuaW1hdGlvbkZyYW1lLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvQ1NTVHJhbnNpdGlvbkdyb3VwJyk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWFkZG9ucy1jc3MtdHJhbnNpdGlvbi1ncm91cC9pbmRleC5qcyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9UcmFuc2l0aW9uR3JvdXAgPSByZXF1aXJlKCcuL1RyYW5zaXRpb25Hcm91cCcpO1xuXG52YXIgX1RyYW5zaXRpb25Hcm91cDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9UcmFuc2l0aW9uR3JvdXApO1xuXG52YXIgX0NTU1RyYW5zaXRpb25Hcm91cENoaWxkID0gcmVxdWlyZSgnLi9DU1NUcmFuc2l0aW9uR3JvdXBDaGlsZCcpO1xuXG52YXIgX0NTU1RyYW5zaXRpb25Hcm91cENoaWxkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NTU1RyYW5zaXRpb25Hcm91cENoaWxkKTtcblxudmFyIF9Qcm9wVHlwZXMgPSByZXF1aXJlKCcuL3V0aWxzL1Byb3BUeXBlcycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIHRyYW5zaXRpb25OYW1lOiBfUHJvcFR5cGVzLm5hbWVTaGFwZS5pc1JlcXVpcmVkLFxuXG4gIHRyYW5zaXRpb25BcHBlYXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgdHJhbnNpdGlvbkVudGVyOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIHRyYW5zaXRpb25MZWF2ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICB0cmFuc2l0aW9uQXBwZWFyVGltZW91dDogKDAsIF9Qcm9wVHlwZXMudHJhbnNpdGlvblRpbWVvdXQpKCdBcHBlYXInKSxcbiAgdHJhbnNpdGlvbkVudGVyVGltZW91dDogKDAsIF9Qcm9wVHlwZXMudHJhbnNpdGlvblRpbWVvdXQpKCdFbnRlcicpLFxuICB0cmFuc2l0aW9uTGVhdmVUaW1lb3V0OiAoMCwgX1Byb3BUeXBlcy50cmFuc2l0aW9uVGltZW91dCkoJ0xlYXZlJylcbn07XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIHRyYW5zaXRpb25BcHBlYXI6IGZhbHNlLFxuICB0cmFuc2l0aW9uRW50ZXI6IHRydWUsXG4gIHRyYW5zaXRpb25MZWF2ZTogdHJ1ZVxufTtcblxudmFyIENTU1RyYW5zaXRpb25Hcm91cCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhDU1NUcmFuc2l0aW9uR3JvdXAsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIENTU1RyYW5zaXRpb25Hcm91cCgpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENTU1RyYW5zaXRpb25Hcm91cCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuX3dyYXBDaGlsZCA9IGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9DU1NUcmFuc2l0aW9uR3JvdXBDaGlsZDIuZGVmYXVsdCwge1xuICAgICAgICBuYW1lOiBfdGhpcy5wcm9wcy50cmFuc2l0aW9uTmFtZSxcbiAgICAgICAgYXBwZWFyOiBfdGhpcy5wcm9wcy50cmFuc2l0aW9uQXBwZWFyLFxuICAgICAgICBlbnRlcjogX3RoaXMucHJvcHMudHJhbnNpdGlvbkVudGVyLFxuICAgICAgICBsZWF2ZTogX3RoaXMucHJvcHMudHJhbnNpdGlvbkxlYXZlLFxuICAgICAgICBhcHBlYXJUaW1lb3V0OiBfdGhpcy5wcm9wcy50cmFuc2l0aW9uQXBwZWFyVGltZW91dCxcbiAgICAgICAgZW50ZXJUaW1lb3V0OiBfdGhpcy5wcm9wcy50cmFuc2l0aW9uRW50ZXJUaW1lb3V0LFxuICAgICAgICBsZWF2ZVRpbWVvdXQ6IF90aGlzLnByb3BzLnRyYW5zaXRpb25MZWF2ZVRpbWVvdXRcbiAgICAgIH0sIGNoaWxkKTtcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIC8vIFdlIG5lZWQgdG8gcHJvdmlkZSB0aGlzIGNoaWxkRmFjdG9yeSBzbyB0aGF0XG4gIC8vIFJlYWN0Q1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQgY2FuIHJlY2VpdmUgdXBkYXRlcyB0byBuYW1lLCBlbnRlciwgYW5kXG4gIC8vIGxlYXZlIHdoaWxlIGl0IGlzIGxlYXZpbmcuXG5cblxuICBDU1NUcmFuc2l0aW9uR3JvdXAucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1RyYW5zaXRpb25Hcm91cDIuZGVmYXVsdCwgX2V4dGVuZHMoe30sIHRoaXMucHJvcHMsIHsgY2hpbGRGYWN0b3J5OiB0aGlzLl93cmFwQ2hpbGQgfSkpO1xuICB9O1xuXG4gIHJldHVybiBDU1NUcmFuc2l0aW9uR3JvdXA7XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5DU1NUcmFuc2l0aW9uR3JvdXAuZGlzcGxheU5hbWUgPSAnQ1NTVHJhbnNpdGlvbkdyb3VwJztcblxuXG5DU1NUcmFuc2l0aW9uR3JvdXAucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gcHJvcFR5cGVzIDoge307XG5DU1NUcmFuc2l0aW9uR3JvdXAuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBDU1NUcmFuc2l0aW9uR3JvdXA7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvQ1NTVHJhbnNpdGlvbkdyb3VwLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2FkZENsYXNzID0gcmVxdWlyZSgnZG9tLWhlbHBlcnMvY2xhc3MvYWRkQ2xhc3MnKTtcblxudmFyIF9hZGRDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hZGRDbGFzcyk7XG5cbnZhciBfcmVtb3ZlQ2xhc3MgPSByZXF1aXJlKCdkb20taGVscGVycy9jbGFzcy9yZW1vdmVDbGFzcycpO1xuXG52YXIgX3JlbW92ZUNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlbW92ZUNsYXNzKTtcblxudmFyIF9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSByZXF1aXJlKCdkb20taGVscGVycy91dGlsL3JlcXVlc3RBbmltYXRpb25GcmFtZScpO1xuXG52YXIgX3JlcXVlc3RBbmltYXRpb25GcmFtZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpO1xuXG52YXIgX3Byb3BlcnRpZXMgPSByZXF1aXJlKCdkb20taGVscGVycy90cmFuc2l0aW9uL3Byb3BlcnRpZXMnKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9yZWFjdERvbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xuXG52YXIgX1Byb3BUeXBlcyA9IHJlcXVpcmUoJy4vdXRpbHMvUHJvcFR5cGVzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIGV2ZW50cyA9IFtdO1xuaWYgKF9wcm9wZXJ0aWVzLnRyYW5zaXRpb25FbmQpIGV2ZW50cy5wdXNoKF9wcm9wZXJ0aWVzLnRyYW5zaXRpb25FbmQpO1xuaWYgKF9wcm9wZXJ0aWVzLmFuaW1hdGlvbkVuZCkgZXZlbnRzLnB1c2goX3Byb3BlcnRpZXMuYW5pbWF0aW9uRW5kKTtcblxuZnVuY3Rpb24gYWRkRW5kTGlzdGVuZXIobm9kZSwgbGlzdGVuZXIpIHtcbiAgaWYgKGV2ZW50cy5sZW5ndGgpIHtcbiAgICBldmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZSkge1xuICAgICAgcmV0dXJuIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihlLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHNldFRpbWVvdXQobGlzdGVuZXIsIDApO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWV2ZW50cy5sZW5ndGgpIHJldHVybjtcbiAgICBldmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZSkge1xuICAgICAgcmV0dXJuIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihlLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAgIH0pO1xuICB9O1xufVxuXG52YXIgcHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ub2RlLFxuICBuYW1lOiBfUHJvcFR5cGVzLm5hbWVTaGFwZS5pc1JlcXVpcmVkLFxuXG4gIC8vIE9uY2Ugd2UgcmVxdWlyZSB0aW1lb3V0cyB0byBiZSBzcGVjaWZpZWQsIHdlIGNhbiByZW1vdmUgdGhlXG4gIC8vIGJvb2xlYW4gZmxhZ3MgKGFwcGVhciBldGMuKSBhbmQganVzdCBhY2NlcHQgYSBudW1iZXJcbiAgLy8gb3IgYSBib29sIGZvciB0aGUgdGltZW91dCBmbGFncyAoYXBwZWFyVGltZW91dCBldGMuKVxuICBhcHBlYXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgZW50ZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgbGVhdmU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgYXBwZWFyVGltZW91dDogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gIGVudGVyVGltZW91dDogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gIGxlYXZlVGltZW91dDogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXJcbn07XG5cbnZhciBDU1NUcmFuc2l0aW9uR3JvdXBDaGlsZCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhDU1NUcmFuc2l0aW9uR3JvdXBDaGlsZCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQ1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDU1NUcmFuc2l0aW9uR3JvdXBDaGlsZCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuY29tcG9uZW50V2lsbEFwcGVhciA9IGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMuYXBwZWFyKSB7XG4gICAgICAgIF90aGlzLnRyYW5zaXRpb24oJ2FwcGVhcicsIGRvbmUsIF90aGlzLnByb3BzLmFwcGVhclRpbWVvdXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfVxuICAgIH0sIF90aGlzLmNvbXBvbmVudFdpbGxFbnRlciA9IGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMuZW50ZXIpIHtcbiAgICAgICAgX3RoaXMudHJhbnNpdGlvbignZW50ZXInLCBkb25lLCBfdGhpcy5wcm9wcy5lbnRlclRpbWVvdXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfVxuICAgIH0sIF90aGlzLmNvbXBvbmVudFdpbGxMZWF2ZSA9IGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMubGVhdmUpIHtcbiAgICAgICAgX3RoaXMudHJhbnNpdGlvbignbGVhdmUnLCBkb25lLCBfdGhpcy5wcm9wcy5sZWF2ZVRpbWVvdXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfVxuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgQ1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB0aGlzLmNsYXNzTmFtZUFuZE5vZGVRdWV1ZSA9IFtdO1xuICAgIHRoaXMudHJhbnNpdGlvblRpbWVvdXRzID0gW107XG4gIH07XG5cbiAgQ1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy51bm1vdW50ZWQgPSB0cnVlO1xuXG4gICAgaWYgKHRoaXMudGltZW91dCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XG4gICAgfVxuICAgIHRoaXMudHJhbnNpdGlvblRpbWVvdXRzLmZvckVhY2goZnVuY3Rpb24gKHRpbWVvdXQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICB9KTtcblxuICAgIHRoaXMuY2xhc3NOYW1lQW5kTm9kZVF1ZXVlLmxlbmd0aCA9IDA7XG4gIH07XG5cbiAgQ1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQucHJvdG90eXBlLnRyYW5zaXRpb24gPSBmdW5jdGlvbiB0cmFuc2l0aW9uKGFuaW1hdGlvblR5cGUsIGZpbmlzaENhbGxiYWNrLCB0aW1lb3V0KSB7XG4gICAgdmFyIG5vZGUgPSAoMCwgX3JlYWN0RG9tLmZpbmRET01Ob2RlKSh0aGlzKTtcblxuICAgIGlmICghbm9kZSkge1xuICAgICAgaWYgKGZpbmlzaENhbGxiYWNrKSB7XG4gICAgICAgIGZpbmlzaENhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGNsYXNzTmFtZSA9IHRoaXMucHJvcHMubmFtZVthbmltYXRpb25UeXBlXSB8fCB0aGlzLnByb3BzLm5hbWUgKyAnLScgKyBhbmltYXRpb25UeXBlO1xuICAgIHZhciBhY3RpdmVDbGFzc05hbWUgPSB0aGlzLnByb3BzLm5hbWVbYW5pbWF0aW9uVHlwZSArICdBY3RpdmUnXSB8fCBjbGFzc05hbWUgKyAnLWFjdGl2ZSc7XG4gICAgdmFyIHRpbWVyID0gbnVsbDtcbiAgICB2YXIgcmVtb3ZlTGlzdGVuZXJzID0gdm9pZCAwO1xuXG4gICAgKDAsIF9hZGRDbGFzczIuZGVmYXVsdCkobm9kZSwgY2xhc3NOYW1lKTtcblxuICAgIC8vIE5lZWQgdG8gZG8gdGhpcyB0byBhY3R1YWxseSB0cmlnZ2VyIGEgdHJhbnNpdGlvbi5cbiAgICB0aGlzLnF1ZXVlQ2xhc3NBbmROb2RlKGFjdGl2ZUNsYXNzTmFtZSwgbm9kZSk7XG5cbiAgICAvLyBDbGVhbi11cCB0aGUgYW5pbWF0aW9uIGFmdGVyIHRoZSBzcGVjaWZpZWQgZGVsYXlcbiAgICB2YXIgZmluaXNoID0gZnVuY3Rpb24gZmluaXNoKGUpIHtcbiAgICAgIGlmIChlICYmIGUudGFyZ2V0ICE9PSBub2RlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgIGlmIChyZW1vdmVMaXN0ZW5lcnMpIHJlbW92ZUxpc3RlbmVycygpO1xuXG4gICAgICAoMCwgX3JlbW92ZUNsYXNzMi5kZWZhdWx0KShub2RlLCBjbGFzc05hbWUpO1xuICAgICAgKDAsIF9yZW1vdmVDbGFzczIuZGVmYXVsdCkobm9kZSwgYWN0aXZlQ2xhc3NOYW1lKTtcblxuICAgICAgaWYgKHJlbW92ZUxpc3RlbmVycykgcmVtb3ZlTGlzdGVuZXJzKCk7XG5cbiAgICAgIC8vIFVzdWFsbHkgdGhpcyBvcHRpb25hbCBjYWxsYmFjayBpcyB1c2VkIGZvciBpbmZvcm1pbmcgYW4gb3duZXIgb2ZcbiAgICAgIC8vIGEgbGVhdmUgYW5pbWF0aW9uIGFuZCB0ZWxsaW5nIGl0IHRvIHJlbW92ZSB0aGUgY2hpbGQuXG4gICAgICBpZiAoZmluaXNoQ2FsbGJhY2spIHtcbiAgICAgICAgZmluaXNoQ2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKHRpbWVvdXQpIHtcbiAgICAgIHRpbWVyID0gc2V0VGltZW91dChmaW5pc2gsIHRpbWVvdXQpO1xuICAgICAgdGhpcy50cmFuc2l0aW9uVGltZW91dHMucHVzaCh0aW1lcik7XG4gICAgfSBlbHNlIGlmIChfcHJvcGVydGllcy50cmFuc2l0aW9uRW5kKSB7XG4gICAgICByZW1vdmVMaXN0ZW5lcnMgPSBhZGRFbmRMaXN0ZW5lcihub2RlLCBmaW5pc2gpO1xuICAgIH1cbiAgfTtcblxuICBDU1NUcmFuc2l0aW9uR3JvdXBDaGlsZC5wcm90b3R5cGUucXVldWVDbGFzc0FuZE5vZGUgPSBmdW5jdGlvbiBxdWV1ZUNsYXNzQW5kTm9kZShjbGFzc05hbWUsIG5vZGUpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHRoaXMuY2xhc3NOYW1lQW5kTm9kZVF1ZXVlLnB1c2goe1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICBub2RlOiBub2RlXG4gICAgfSk7XG5cbiAgICBpZiAoIXRoaXMucmFmSGFuZGxlKSB7XG4gICAgICB0aGlzLnJhZkhhbmRsZSA9ICgwLCBfcmVxdWVzdEFuaW1hdGlvbkZyYW1lMi5kZWZhdWx0KShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczIuZmx1c2hDbGFzc05hbWVBbmROb2RlUXVldWUoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBDU1NUcmFuc2l0aW9uR3JvdXBDaGlsZC5wcm90b3R5cGUuZmx1c2hDbGFzc05hbWVBbmROb2RlUXVldWUgPSBmdW5jdGlvbiBmbHVzaENsYXNzTmFtZUFuZE5vZGVRdWV1ZSgpIHtcbiAgICBpZiAoIXRoaXMudW5tb3VudGVkKSB7XG4gICAgICB0aGlzLmNsYXNzTmFtZUFuZE5vZGVRdWV1ZS5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgLy8gVGhpcyBpcyBmb3IgdG8gZm9yY2UgYSByZXBhaW50LFxuICAgICAgICAvLyB3aGljaCBpcyBuZWNlc3NhcnkgaW4gb3JkZXIgdG8gdHJhbnNpdGlvbiBzdHlsZXMgd2hlbiBhZGRpbmcgYSBjbGFzcyBuYW1lLlxuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtZXhwcmVzc2lvbnMgKi9cbiAgICAgICAgb2JqLm5vZGUuc2Nyb2xsVG9wO1xuICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVudXNlZC1leHByZXNzaW9ucyAqL1xuICAgICAgICAoMCwgX2FkZENsYXNzMi5kZWZhdWx0KShvYmoubm9kZSwgb2JqLmNsYXNzTmFtZSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5jbGFzc05hbWVBbmROb2RlUXVldWUubGVuZ3RoID0gMDtcbiAgICB0aGlzLnJhZkhhbmRsZSA9IG51bGw7XG4gIH07XG5cbiAgQ1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcyk7XG4gICAgZGVsZXRlIHByb3BzLm5hbWU7XG4gICAgZGVsZXRlIHByb3BzLmFwcGVhcjtcbiAgICBkZWxldGUgcHJvcHMuZW50ZXI7XG4gICAgZGVsZXRlIHByb3BzLmxlYXZlO1xuICAgIGRlbGV0ZSBwcm9wcy5hcHBlYXJUaW1lb3V0O1xuICAgIGRlbGV0ZSBwcm9wcy5lbnRlclRpbWVvdXQ7XG4gICAgZGVsZXRlIHByb3BzLmxlYXZlVGltZW91dDtcbiAgICBkZWxldGUgcHJvcHMuY2hpbGRyZW47XG4gICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jbG9uZUVsZW1lbnQoX3JlYWN0Mi5kZWZhdWx0LkNoaWxkcmVuLm9ubHkodGhpcy5wcm9wcy5jaGlsZHJlbiksIHByb3BzKTtcbiAgfTtcblxuICByZXR1cm4gQ1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQ7XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5DU1NUcmFuc2l0aW9uR3JvdXBDaGlsZC5kaXNwbGF5TmFtZSA9ICdDU1NUcmFuc2l0aW9uR3JvdXBDaGlsZCc7XG5cblxuQ1NTVHJhbnNpdGlvbkdyb3VwQ2hpbGQucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gcHJvcFR5cGVzIDoge307XG5cbmV4cG9ydHMuZGVmYXVsdCA9IENTU1RyYW5zaXRpb25Hcm91cENoaWxkO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL0NTU1RyYW5zaXRpb25Hcm91cENoaWxkLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2NoYWluRnVuY3Rpb24gPSByZXF1aXJlKCdjaGFpbi1mdW5jdGlvbicpO1xuXG52YXIgX2NoYWluRnVuY3Rpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2hhaW5GdW5jdGlvbik7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG52YXIgX0NoaWxkTWFwcGluZyA9IHJlcXVpcmUoJy4vdXRpbHMvQ2hpbGRNYXBwaW5nJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIHByb3BUeXBlcyA9IHtcbiAgY29tcG9uZW50OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmFueSxcbiAgY2hpbGRGYWN0b3J5OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm5vZGVcbn07XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGNvbXBvbmVudDogJ3NwYW4nLFxuICBjaGlsZEZhY3Rvcnk6IGZ1bmN0aW9uIGNoaWxkRmFjdG9yeShjaGlsZCkge1xuICAgIHJldHVybiBjaGlsZDtcbiAgfVxufTtcblxudmFyIFRyYW5zaXRpb25Hcm91cCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhUcmFuc2l0aW9uR3JvdXAsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRyYW5zaXRpb25Hcm91cChwcm9wcywgY29udGV4dCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUcmFuc2l0aW9uR3JvdXApO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSk7XG5cbiAgICBfdGhpcy5wZXJmb3JtQXBwZWFyID0gZnVuY3Rpb24gKGtleSwgY29tcG9uZW50KSB7XG4gICAgICBfdGhpcy5jdXJyZW50bHlUcmFuc2l0aW9uaW5nS2V5c1trZXldID0gdHJ1ZTtcblxuICAgICAgaWYgKGNvbXBvbmVudC5jb21wb25lbnRXaWxsQXBwZWFyKSB7XG4gICAgICAgIGNvbXBvbmVudC5jb21wb25lbnRXaWxsQXBwZWFyKF90aGlzLl9oYW5kbGVEb25lQXBwZWFyaW5nLmJpbmQoX3RoaXMsIGtleSwgY29tcG9uZW50KSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpcy5faGFuZGxlRG9uZUFwcGVhcmluZyhrZXksIGNvbXBvbmVudCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLl9oYW5kbGVEb25lQXBwZWFyaW5nID0gZnVuY3Rpb24gKGtleSwgY29tcG9uZW50KSB7XG4gICAgICBpZiAoY29tcG9uZW50LmNvbXBvbmVudERpZEFwcGVhcikge1xuICAgICAgICBjb21wb25lbnQuY29tcG9uZW50RGlkQXBwZWFyKCk7XG4gICAgICB9XG5cbiAgICAgIGRlbGV0ZSBfdGhpcy5jdXJyZW50bHlUcmFuc2l0aW9uaW5nS2V5c1trZXldO1xuXG4gICAgICB2YXIgY3VycmVudENoaWxkTWFwcGluZyA9ICgwLCBfQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZykoX3RoaXMucHJvcHMuY2hpbGRyZW4pO1xuXG4gICAgICBpZiAoIWN1cnJlbnRDaGlsZE1hcHBpbmcgfHwgIWN1cnJlbnRDaGlsZE1hcHBpbmcuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAvLyBUaGlzIHdhcyByZW1vdmVkIGJlZm9yZSBpdCBoYWQgZnVsbHkgYXBwZWFyZWQuIFJlbW92ZSBpdC5cbiAgICAgICAgX3RoaXMucGVyZm9ybUxlYXZlKGtleSwgY29tcG9uZW50KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMucGVyZm9ybUVudGVyID0gZnVuY3Rpb24gKGtleSwgY29tcG9uZW50KSB7XG4gICAgICBfdGhpcy5jdXJyZW50bHlUcmFuc2l0aW9uaW5nS2V5c1trZXldID0gdHJ1ZTtcblxuICAgICAgaWYgKGNvbXBvbmVudC5jb21wb25lbnRXaWxsRW50ZXIpIHtcbiAgICAgICAgY29tcG9uZW50LmNvbXBvbmVudFdpbGxFbnRlcihfdGhpcy5faGFuZGxlRG9uZUVudGVyaW5nLmJpbmQoX3RoaXMsIGtleSwgY29tcG9uZW50KSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpcy5faGFuZGxlRG9uZUVudGVyaW5nKGtleSwgY29tcG9uZW50KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuX2hhbmRsZURvbmVFbnRlcmluZyA9IGZ1bmN0aW9uIChrZXksIGNvbXBvbmVudCkge1xuICAgICAgaWYgKGNvbXBvbmVudC5jb21wb25lbnREaWRFbnRlcikge1xuICAgICAgICBjb21wb25lbnQuY29tcG9uZW50RGlkRW50ZXIoKTtcbiAgICAgIH1cblxuICAgICAgZGVsZXRlIF90aGlzLmN1cnJlbnRseVRyYW5zaXRpb25pbmdLZXlzW2tleV07XG5cbiAgICAgIHZhciBjdXJyZW50Q2hpbGRNYXBwaW5nID0gKDAsIF9DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKShfdGhpcy5wcm9wcy5jaGlsZHJlbik7XG5cbiAgICAgIGlmICghY3VycmVudENoaWxkTWFwcGluZyB8fCAhY3VycmVudENoaWxkTWFwcGluZy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIC8vIFRoaXMgd2FzIHJlbW92ZWQgYmVmb3JlIGl0IGhhZCBmdWxseSBlbnRlcmVkLiBSZW1vdmUgaXQuXG4gICAgICAgIF90aGlzLnBlcmZvcm1MZWF2ZShrZXksIGNvbXBvbmVudCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLnBlcmZvcm1MZWF2ZSA9IGZ1bmN0aW9uIChrZXksIGNvbXBvbmVudCkge1xuICAgICAgX3RoaXMuY3VycmVudGx5VHJhbnNpdGlvbmluZ0tleXNba2V5XSA9IHRydWU7XG5cbiAgICAgIGlmIChjb21wb25lbnQuY29tcG9uZW50V2lsbExlYXZlKSB7XG4gICAgICAgIGNvbXBvbmVudC5jb21wb25lbnRXaWxsTGVhdmUoX3RoaXMuX2hhbmRsZURvbmVMZWF2aW5nLmJpbmQoX3RoaXMsIGtleSwgY29tcG9uZW50KSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBOb3RlIHRoYXQgdGhpcyBpcyBzb21ld2hhdCBkYW5nZXJvdXMgYi9jIGl0IGNhbGxzIHNldFN0YXRlKClcbiAgICAgICAgLy8gYWdhaW4sIGVmZmVjdGl2ZWx5IG11dGF0aW5nIHRoZSBjb21wb25lbnQgYmVmb3JlIGFsbCB0aGUgd29ya1xuICAgICAgICAvLyBpcyBkb25lLlxuICAgICAgICBfdGhpcy5faGFuZGxlRG9uZUxlYXZpbmcoa2V5LCBjb21wb25lbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5faGFuZGxlRG9uZUxlYXZpbmcgPSBmdW5jdGlvbiAoa2V5LCBjb21wb25lbnQpIHtcbiAgICAgIGlmIChjb21wb25lbnQuY29tcG9uZW50RGlkTGVhdmUpIHtcbiAgICAgICAgY29tcG9uZW50LmNvbXBvbmVudERpZExlYXZlKCk7XG4gICAgICB9XG5cbiAgICAgIGRlbGV0ZSBfdGhpcy5jdXJyZW50bHlUcmFuc2l0aW9uaW5nS2V5c1trZXldO1xuXG4gICAgICB2YXIgY3VycmVudENoaWxkTWFwcGluZyA9ICgwLCBfQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZykoX3RoaXMucHJvcHMuY2hpbGRyZW4pO1xuXG4gICAgICBpZiAoY3VycmVudENoaWxkTWFwcGluZyAmJiBjdXJyZW50Q2hpbGRNYXBwaW5nLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgLy8gVGhpcyBlbnRlcmVkIGFnYWluIGJlZm9yZSBpdCBmdWxseSBsZWZ0LiBBZGQgaXQgYWdhaW4uXG4gICAgICAgIF90aGlzLmtleXNUb0VudGVyLnB1c2goa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICAgIHZhciBuZXdDaGlsZHJlbiA9IF9leHRlbmRzKHt9LCBzdGF0ZS5jaGlsZHJlbik7XG4gICAgICAgICAgZGVsZXRlIG5ld0NoaWxkcmVuW2tleV07XG4gICAgICAgICAgcmV0dXJuIHsgY2hpbGRyZW46IG5ld0NoaWxkcmVuIH07XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5jaGlsZFJlZnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBjaGlsZHJlbjogKDAsIF9DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKShwcm9wcy5jaGlsZHJlbilcbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIFRyYW5zaXRpb25Hcm91cC5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHRoaXMuY3VycmVudGx5VHJhbnNpdGlvbmluZ0tleXMgPSB7fTtcbiAgICB0aGlzLmtleXNUb0VudGVyID0gW107XG4gICAgdGhpcy5rZXlzVG9MZWF2ZSA9IFtdO1xuICB9O1xuXG4gIFRyYW5zaXRpb25Hcm91cC5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB2YXIgaW5pdGlhbENoaWxkTWFwcGluZyA9IHRoaXMuc3RhdGUuY2hpbGRyZW47XG4gICAgZm9yICh2YXIga2V5IGluIGluaXRpYWxDaGlsZE1hcHBpbmcpIHtcbiAgICAgIGlmIChpbml0aWFsQ2hpbGRNYXBwaW5nW2tleV0pIHtcbiAgICAgICAgdGhpcy5wZXJmb3JtQXBwZWFyKGtleSwgdGhpcy5jaGlsZFJlZnNba2V5XSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIFRyYW5zaXRpb25Hcm91cC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgdmFyIG5leHRDaGlsZE1hcHBpbmcgPSAoMCwgX0NoaWxkTWFwcGluZy5nZXRDaGlsZE1hcHBpbmcpKG5leHRQcm9wcy5jaGlsZHJlbik7XG4gICAgdmFyIHByZXZDaGlsZE1hcHBpbmcgPSB0aGlzLnN0YXRlLmNoaWxkcmVuO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBjaGlsZHJlbjogKDAsIF9DaGlsZE1hcHBpbmcubWVyZ2VDaGlsZE1hcHBpbmdzKShwcmV2Q2hpbGRNYXBwaW5nLCBuZXh0Q2hpbGRNYXBwaW5nKVxuICAgIH0pO1xuXG4gICAgZm9yICh2YXIga2V5IGluIG5leHRDaGlsZE1hcHBpbmcpIHtcbiAgICAgIHZhciBoYXNQcmV2ID0gcHJldkNoaWxkTWFwcGluZyAmJiBwcmV2Q2hpbGRNYXBwaW5nLmhhc093blByb3BlcnR5KGtleSk7XG4gICAgICBpZiAobmV4dENoaWxkTWFwcGluZ1trZXldICYmICFoYXNQcmV2ICYmICF0aGlzLmN1cnJlbnRseVRyYW5zaXRpb25pbmdLZXlzW2tleV0pIHtcbiAgICAgICAgdGhpcy5rZXlzVG9FbnRlci5wdXNoKGtleSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2tleSBpbiBwcmV2Q2hpbGRNYXBwaW5nKSB7XG4gICAgICB2YXIgaGFzTmV4dCA9IG5leHRDaGlsZE1hcHBpbmcgJiYgbmV4dENoaWxkTWFwcGluZy5oYXNPd25Qcm9wZXJ0eShfa2V5KTtcbiAgICAgIGlmIChwcmV2Q2hpbGRNYXBwaW5nW19rZXldICYmICFoYXNOZXh0ICYmICF0aGlzLmN1cnJlbnRseVRyYW5zaXRpb25pbmdLZXlzW19rZXldKSB7XG4gICAgICAgIHRoaXMua2V5c1RvTGVhdmUucHVzaChfa2V5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiB3ZSB3YW50IHRvIHNvbWVkYXkgY2hlY2sgZm9yIHJlb3JkZXJpbmcsIHdlIGNvdWxkIGRvIGl0IGhlcmUuXG4gIH07XG5cbiAgVHJhbnNpdGlvbkdyb3VwLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIga2V5c1RvRW50ZXIgPSB0aGlzLmtleXNUb0VudGVyO1xuICAgIHRoaXMua2V5c1RvRW50ZXIgPSBbXTtcbiAgICBrZXlzVG9FbnRlci5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHJldHVybiBfdGhpczIucGVyZm9ybUVudGVyKGtleSwgX3RoaXMyLmNoaWxkUmVmc1trZXldKTtcbiAgICB9KTtcblxuICAgIHZhciBrZXlzVG9MZWF2ZSA9IHRoaXMua2V5c1RvTGVhdmU7XG4gICAgdGhpcy5rZXlzVG9MZWF2ZSA9IFtdO1xuICAgIGtleXNUb0xlYXZlLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuIF90aGlzMi5wZXJmb3JtTGVhdmUoa2V5LCBfdGhpczIuY2hpbGRSZWZzW2tleV0pO1xuICAgIH0pO1xuICB9O1xuXG4gIFRyYW5zaXRpb25Hcm91cC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgLy8gVE9ETzogd2UgY291bGQgZ2V0IHJpZCBvZiB0aGUgbmVlZCBmb3IgdGhlIHdyYXBwZXIgbm9kZVxuICAgIC8vIGJ5IGNsb25pbmcgYSBzaW5nbGUgY2hpbGRcbiAgICB2YXIgY2hpbGRyZW5Ub1JlbmRlciA9IFtdO1xuXG4gICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3Aoa2V5KSB7XG4gICAgICB2YXIgY2hpbGQgPSBfdGhpczMuc3RhdGUuY2hpbGRyZW5ba2V5XTtcbiAgICAgIGlmIChjaGlsZCkge1xuICAgICAgICB2YXIgaXNDYWxsYmFja1JlZiA9IHR5cGVvZiBjaGlsZC5yZWYgIT09ICdzdHJpbmcnO1xuICAgICAgICB2YXIgZmFjdG9yeUNoaWxkID0gX3RoaXMzLnByb3BzLmNoaWxkRmFjdG9yeShjaGlsZCk7XG4gICAgICAgIHZhciByZWYgPSBmdW5jdGlvbiByZWYocikge1xuICAgICAgICAgIF90aGlzMy5jaGlsZFJlZnNba2V5XSA9IHI7XG4gICAgICAgIH07XG5cbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/ICgwLCBfd2FybmluZzIuZGVmYXVsdCkoaXNDYWxsYmFja1JlZiwgJ3N0cmluZyByZWZzIGFyZSBub3Qgc3VwcG9ydGVkIG9uIGNoaWxkcmVuIG9mIFRyYW5zaXRpb25Hcm91cCBhbmQgd2lsbCBiZSBpZ25vcmVkLiAnICsgJ1BsZWFzZSB1c2UgYSBjYWxsYmFjayByZWYgaW5zdGVhZDogaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy9yZWZzLWFuZC10aGUtZG9tLmh0bWwjdGhlLXJlZi1jYWxsYmFjay1hdHRyaWJ1dGUnKSA6IHZvaWQgMDtcblxuICAgICAgICAvLyBBbHdheXMgY2hhaW5pbmcgdGhlIHJlZnMgbGVhZHMgdG8gcHJvYmxlbXMgd2hlbiB0aGUgY2hpbGRGYWN0b3J5XG4gICAgICAgIC8vIHdyYXBzIHRoZSBjaGlsZC4gVGhlIGNoaWxkIHJlZiBjYWxsYmFjayBnZXRzIGNhbGxlZCB0d2ljZSB3aXRoIHRoZVxuICAgICAgICAvLyB3cmFwcGVyIGFuZCB0aGUgY2hpbGQuIFNvIHdlIG9ubHkgbmVlZCB0byBjaGFpbiB0aGUgcmVmIGlmIHRoZVxuICAgICAgICAvLyBmYWN0b3J5Q2hpbGQgaXMgbm90IGRpZmZlcmVudCBmcm9tIGNoaWxkLlxuICAgICAgICBpZiAoZmFjdG9yeUNoaWxkID09PSBjaGlsZCAmJiBpc0NhbGxiYWNrUmVmKSB7XG4gICAgICAgICAgcmVmID0gKDAsIF9jaGFpbkZ1bmN0aW9uMi5kZWZhdWx0KShjaGlsZC5yZWYsIHJlZik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBZb3UgbWF5IG5lZWQgdG8gYXBwbHkgcmVhY3RpdmUgdXBkYXRlcyB0byBhIGNoaWxkIGFzIGl0IGlzIGxlYXZpbmcuXG4gICAgICAgIC8vIFRoZSBub3JtYWwgUmVhY3Qgd2F5IHRvIGRvIGl0IHdvbid0IHdvcmsgc2luY2UgdGhlIGNoaWxkIHdpbGwgaGF2ZVxuICAgICAgICAvLyBhbHJlYWR5IGJlZW4gcmVtb3ZlZC4gSW4gY2FzZSB5b3UgbmVlZCB0aGlzIGJlaGF2aW9yIHlvdSBjYW4gcHJvdmlkZVxuICAgICAgICAvLyBhIGNoaWxkRmFjdG9yeSBmdW5jdGlvbiB0byB3cmFwIGV2ZXJ5IGNoaWxkLCBldmVuIHRoZSBvbmVzIHRoYXQgYXJlXG4gICAgICAgIC8vIGxlYXZpbmcuXG4gICAgICAgIGNoaWxkcmVuVG9SZW5kZXIucHVzaChfcmVhY3QyLmRlZmF1bHQuY2xvbmVFbGVtZW50KGZhY3RvcnlDaGlsZCwge1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHJlZjogcmVmXG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZm9yICh2YXIga2V5IGluIHRoaXMuc3RhdGUuY2hpbGRyZW4pIHtcbiAgICAgIF9sb29wKGtleSk7XG4gICAgfVxuXG4gICAgLy8gRG8gbm90IGZvcndhcmQgVHJhbnNpdGlvbkdyb3VwIHByb3BzIHRvIHByaW1pdGl2ZSBET00gbm9kZXNcbiAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcyk7XG4gICAgZGVsZXRlIHByb3BzLnRyYW5zaXRpb25MZWF2ZTtcbiAgICBkZWxldGUgcHJvcHMudHJhbnNpdGlvbk5hbWU7XG4gICAgZGVsZXRlIHByb3BzLnRyYW5zaXRpb25BcHBlYXI7XG4gICAgZGVsZXRlIHByb3BzLnRyYW5zaXRpb25FbnRlcjtcbiAgICBkZWxldGUgcHJvcHMuY2hpbGRGYWN0b3J5O1xuICAgIGRlbGV0ZSBwcm9wcy50cmFuc2l0aW9uTGVhdmVUaW1lb3V0O1xuICAgIGRlbGV0ZSBwcm9wcy50cmFuc2l0aW9uRW50ZXJUaW1lb3V0O1xuICAgIGRlbGV0ZSBwcm9wcy50cmFuc2l0aW9uQXBwZWFyVGltZW91dDtcbiAgICBkZWxldGUgcHJvcHMuY29tcG9uZW50O1xuXG4gICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KHRoaXMucHJvcHMuY29tcG9uZW50LCBwcm9wcywgY2hpbGRyZW5Ub1JlbmRlcik7XG4gIH07XG5cbiAgcmV0dXJuIFRyYW5zaXRpb25Hcm91cDtcbn0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cblRyYW5zaXRpb25Hcm91cC5kaXNwbGF5TmFtZSA9ICdUcmFuc2l0aW9uR3JvdXAnO1xuXG5cblRyYW5zaXRpb25Hcm91cC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBwcm9wVHlwZXMgOiB7fTtcblRyYW5zaXRpb25Hcm91cC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFRyYW5zaXRpb25Hcm91cDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9UcmFuc2l0aW9uR3JvdXAuanMiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmdldENoaWxkTWFwcGluZyA9IGdldENoaWxkTWFwcGluZztcbmV4cG9ydHMubWVyZ2VDaGlsZE1hcHBpbmdzID0gbWVyZ2VDaGlsZE1hcHBpbmdzO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxuLyoqXG4gKiBHaXZlbiBgdGhpcy5wcm9wcy5jaGlsZHJlbmAsIHJldHVybiBhbiBvYmplY3QgbWFwcGluZyBrZXkgdG8gY2hpbGQuXG4gKlxuICogQHBhcmFtIHsqfSBjaGlsZHJlbiBgdGhpcy5wcm9wcy5jaGlsZHJlbmBcbiAqIEByZXR1cm4ge29iamVjdH0gTWFwcGluZyBvZiBrZXkgdG8gY2hpbGRcbiAqL1xuZnVuY3Rpb24gZ2V0Q2hpbGRNYXBwaW5nKGNoaWxkcmVuKSB7XG4gIGlmICghY2hpbGRyZW4pIHtcbiAgICByZXR1cm4gY2hpbGRyZW47XG4gIH1cbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBfcmVhY3QuQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICByZXR1cm4gY2hpbGQ7XG4gIH0pLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgcmVzdWx0W2NoaWxkLmtleV0gPSBjaGlsZDtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogV2hlbiB5b3UncmUgYWRkaW5nIG9yIHJlbW92aW5nIGNoaWxkcmVuIHNvbWUgbWF5IGJlIGFkZGVkIG9yIHJlbW92ZWQgaW4gdGhlXG4gKiBzYW1lIHJlbmRlciBwYXNzLiBXZSB3YW50IHRvIHNob3cgKmJvdGgqIHNpbmNlIHdlIHdhbnQgdG8gc2ltdWx0YW5lb3VzbHlcbiAqIGFuaW1hdGUgZWxlbWVudHMgaW4gYW5kIG91dC4gVGhpcyBmdW5jdGlvbiB0YWtlcyBhIHByZXZpb3VzIHNldCBvZiBrZXlzXG4gKiBhbmQgYSBuZXcgc2V0IG9mIGtleXMgYW5kIG1lcmdlcyB0aGVtIHdpdGggaXRzIGJlc3QgZ3Vlc3Mgb2YgdGhlIGNvcnJlY3RcbiAqIG9yZGVyaW5nLiBJbiB0aGUgZnV0dXJlIHdlIG1heSBleHBvc2Ugc29tZSBvZiB0aGUgdXRpbGl0aWVzIGluXG4gKiBSZWFjdE11bHRpQ2hpbGQgdG8gbWFrZSB0aGlzIGVhc3ksIGJ1dCBmb3Igbm93IFJlYWN0IGl0c2VsZiBkb2VzIG5vdFxuICogZGlyZWN0bHkgaGF2ZSB0aGlzIGNvbmNlcHQgb2YgdGhlIHVuaW9uIG9mIHByZXZDaGlsZHJlbiBhbmQgbmV4dENoaWxkcmVuXG4gKiBzbyB3ZSBpbXBsZW1lbnQgaXQgaGVyZS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gcHJldiBwcmV2IGNoaWxkcmVuIGFzIHJldHVybmVkIGZyb21cbiAqIGBSZWFjdFRyYW5zaXRpb25DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKClgLlxuICogQHBhcmFtIHtvYmplY3R9IG5leHQgbmV4dCBjaGlsZHJlbiBhcyByZXR1cm5lZCBmcm9tXG4gKiBgUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZygpYC5cbiAqIEByZXR1cm4ge29iamVjdH0gYSBrZXkgc2V0IHRoYXQgY29udGFpbnMgYWxsIGtleXMgaW4gYHByZXZgIGFuZCBhbGwga2V5c1xuICogaW4gYG5leHRgIGluIGEgcmVhc29uYWJsZSBvcmRlci5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VDaGlsZE1hcHBpbmdzKHByZXYsIG5leHQpIHtcbiAgcHJldiA9IHByZXYgfHwge307XG4gIG5leHQgPSBuZXh0IHx8IHt9O1xuXG4gIGZ1bmN0aW9uIGdldFZhbHVlRm9yS2V5KGtleSkge1xuICAgIGlmIChuZXh0Lmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIHJldHVybiBuZXh0W2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHByZXZba2V5XTtcbiAgfVxuXG4gIC8vIEZvciBlYWNoIGtleSBvZiBgbmV4dGAsIHRoZSBsaXN0IG9mIGtleXMgdG8gaW5zZXJ0IGJlZm9yZSB0aGF0IGtleSBpblxuICAvLyB0aGUgY29tYmluZWQgbGlzdFxuICB2YXIgbmV4dEtleXNQZW5kaW5nID0ge307XG5cbiAgdmFyIHBlbmRpbmdLZXlzID0gW107XG4gIGZvciAodmFyIHByZXZLZXkgaW4gcHJldikge1xuICAgIGlmIChuZXh0Lmhhc093blByb3BlcnR5KHByZXZLZXkpKSB7XG4gICAgICBpZiAocGVuZGluZ0tleXMubGVuZ3RoKSB7XG4gICAgICAgIG5leHRLZXlzUGVuZGluZ1twcmV2S2V5XSA9IHBlbmRpbmdLZXlzO1xuICAgICAgICBwZW5kaW5nS2V5cyA9IFtdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZW5kaW5nS2V5cy5wdXNoKHByZXZLZXkpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpID0gdm9pZCAwO1xuICB2YXIgY2hpbGRNYXBwaW5nID0ge307XG4gIGZvciAodmFyIG5leHRLZXkgaW4gbmV4dCkge1xuICAgIGlmIChuZXh0S2V5c1BlbmRpbmcuaGFzT3duUHJvcGVydHkobmV4dEtleSkpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHBlbmRpbmdOZXh0S2V5ID0gbmV4dEtleXNQZW5kaW5nW25leHRLZXldW2ldO1xuICAgICAgICBjaGlsZE1hcHBpbmdbbmV4dEtleXNQZW5kaW5nW25leHRLZXldW2ldXSA9IGdldFZhbHVlRm9yS2V5KHBlbmRpbmdOZXh0S2V5KTtcbiAgICAgIH1cbiAgICB9XG4gICAgY2hpbGRNYXBwaW5nW25leHRLZXldID0gZ2V0VmFsdWVGb3JLZXkobmV4dEtleSk7XG4gIH1cblxuICAvLyBGaW5hbGx5LCBhZGQgdGhlIGtleXMgd2hpY2ggZGlkbid0IGFwcGVhciBiZWZvcmUgYW55IGtleSBpbiBgbmV4dGBcbiAgZm9yIChpID0gMDsgaSA8IHBlbmRpbmdLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgY2hpbGRNYXBwaW5nW3BlbmRpbmdLZXlzW2ldXSA9IGdldFZhbHVlRm9yS2V5KHBlbmRpbmdLZXlzW2ldKTtcbiAgfVxuXG4gIHJldHVybiBjaGlsZE1hcHBpbmc7XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL3V0aWxzL0NoaWxkTWFwcGluZy5qcyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMubmFtZVNoYXBlID0gdW5kZWZpbmVkO1xuZXhwb3J0cy50cmFuc2l0aW9uVGltZW91dCA9IHRyYW5zaXRpb25UaW1lb3V0O1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uVGltZW91dCh0cmFuc2l0aW9uVHlwZSkge1xuICB2YXIgdGltZW91dFByb3BOYW1lID0gJ3RyYW5zaXRpb24nICsgdHJhbnNpdGlvblR5cGUgKyAnVGltZW91dCc7XG4gIHZhciBlbmFibGVkUHJvcE5hbWUgPSAndHJhbnNpdGlvbicgKyB0cmFuc2l0aW9uVHlwZTtcblxuICByZXR1cm4gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgLy8gSWYgdGhlIHRyYW5zaXRpb24gaXMgZW5hYmxlZFxuICAgIGlmIChwcm9wc1tlbmFibGVkUHJvcE5hbWVdKSB7XG4gICAgICAvLyBJZiBubyB0aW1lb3V0IGR1cmF0aW9uIGlzIHByb3ZpZGVkXG4gICAgICBpZiAocHJvcHNbdGltZW91dFByb3BOYW1lXSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IodGltZW91dFByb3BOYW1lICsgJyB3YXNuXFwndCBzdXBwbGllZCB0byBDU1NUcmFuc2l0aW9uR3JvdXA6ICcgKyAndGhpcyBjYW4gY2F1c2UgdW5yZWxpYWJsZSBhbmltYXRpb25zIGFuZCB3b25cXCd0IGJlIHN1cHBvcnRlZCBpbiAnICsgJ2EgZnV0dXJlIHZlcnNpb24gb2YgUmVhY3QuIFNlZSAnICsgJ2h0dHBzOi8vZmIubWUvcmVhY3QtYW5pbWF0aW9uLXRyYW5zaXRpb24tZ3JvdXAtdGltZW91dCBmb3IgbW9yZSAnICsgJ2luZm9ybWF0aW9uLicpO1xuXG4gICAgICAgIC8vIElmIHRoZSBkdXJhdGlvbiBpc24ndCBhIG51bWJlclxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgcHJvcHNbdGltZW91dFByb3BOYW1lXSAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcih0aW1lb3V0UHJvcE5hbWUgKyAnIG11c3QgYmUgYSBudW1iZXIgKGluIG1pbGxpc2Vjb25kcyknKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcbn1cblxudmFyIG5hbWVTaGFwZSA9IGV4cG9ydHMubmFtZVNoYXBlID0gX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzMi5kZWZhdWx0LnNoYXBlKHtcbiAgZW50ZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBsZWF2ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGFjdGl2ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmdcbn0pLCBfcHJvcFR5cGVzMi5kZWZhdWx0LnNoYXBlKHtcbiAgZW50ZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBlbnRlckFjdGl2ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGxlYXZlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgbGVhdmVBY3RpdmU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBhcHBlYXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBhcHBlYXJBY3RpdmU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nXG59KV0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtdHJhbnNpdGlvbi1ncm91cC91dGlscy9Qcm9wVHlwZXMuanMiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHRNZW1vaXplID0gZGVmYXVsdE1lbW9pemU7XG5leHBvcnRzLmNyZWF0ZVNlbGVjdG9yQ3JlYXRvciA9IGNyZWF0ZVNlbGVjdG9yQ3JlYXRvcjtcbmV4cG9ydHMuY3JlYXRlU3RydWN0dXJlZFNlbGVjdG9yID0gY3JlYXRlU3RydWN0dXJlZFNlbGVjdG9yO1xuZnVuY3Rpb24gZGVmYXVsdEVxdWFsaXR5Q2hlY2soYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn1cblxuZnVuY3Rpb24gYXJlQXJndW1lbnRzU2hhbGxvd2x5RXF1YWwoZXF1YWxpdHlDaGVjaywgcHJldiwgbmV4dCkge1xuICBpZiAocHJldiA9PT0gbnVsbCB8fCBuZXh0ID09PSBudWxsIHx8IHByZXYubGVuZ3RoICE9PSBuZXh0Lmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIERvIHRoaXMgaW4gYSBmb3IgbG9vcCAoYW5kIG5vdCBhIGBmb3JFYWNoYCBvciBhbiBgZXZlcnlgKSBzbyB3ZSBjYW4gZGV0ZXJtaW5lIGVxdWFsaXR5IGFzIGZhc3QgYXMgcG9zc2libGUuXG4gIHZhciBsZW5ndGggPSBwcmV2Lmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGlmICghZXF1YWxpdHlDaGVjayhwcmV2W2ldLCBuZXh0W2ldKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0TWVtb2l6ZShmdW5jKSB7XG4gIHZhciBlcXVhbGl0eUNoZWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBkZWZhdWx0RXF1YWxpdHlDaGVjaztcblxuICB2YXIgbGFzdEFyZ3MgPSBudWxsO1xuICB2YXIgbGFzdFJlc3VsdCA9IG51bGw7XG4gIC8vIHdlIHJlZmVyZW5jZSBhcmd1bWVudHMgaW5zdGVhZCBvZiBzcHJlYWRpbmcgdGhlbSBmb3IgcGVyZm9ybWFuY2UgcmVhc29uc1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghYXJlQXJndW1lbnRzU2hhbGxvd2x5RXF1YWwoZXF1YWxpdHlDaGVjaywgbGFzdEFyZ3MsIGFyZ3VtZW50cykpIHtcbiAgICAgIC8vIGFwcGx5IGFyZ3VtZW50cyBpbnN0ZWFkIG9mIHNwcmVhZGluZyBmb3IgcGVyZm9ybWFuY2UuXG4gICAgICBsYXN0UmVzdWx0ID0gZnVuYy5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIGxhc3RBcmdzID0gYXJndW1lbnRzO1xuICAgIHJldHVybiBsYXN0UmVzdWx0O1xuICB9O1xufVxuXG5mdW5jdGlvbiBnZXREZXBlbmRlbmNpZXMoZnVuY3MpIHtcbiAgdmFyIGRlcGVuZGVuY2llcyA9IEFycmF5LmlzQXJyYXkoZnVuY3NbMF0pID8gZnVuY3NbMF0gOiBmdW5jcztcblxuICBpZiAoIWRlcGVuZGVuY2llcy5ldmVyeShmdW5jdGlvbiAoZGVwKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBkZXAgPT09ICdmdW5jdGlvbic7XG4gIH0pKSB7XG4gICAgdmFyIGRlcGVuZGVuY3lUeXBlcyA9IGRlcGVuZGVuY2llcy5tYXAoZnVuY3Rpb24gKGRlcCkge1xuICAgICAgcmV0dXJuIHR5cGVvZiBkZXA7XG4gICAgfSkuam9pbignLCAnKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlbGVjdG9yIGNyZWF0b3JzIGV4cGVjdCBhbGwgaW5wdXQtc2VsZWN0b3JzIHRvIGJlIGZ1bmN0aW9ucywgJyArICgnaW5zdGVhZCByZWNlaXZlZCB0aGUgZm9sbG93aW5nIHR5cGVzOiBbJyArIGRlcGVuZGVuY3lUeXBlcyArICddJykpO1xuICB9XG5cbiAgcmV0dXJuIGRlcGVuZGVuY2llcztcbn1cblxuZnVuY3Rpb24gY3JlYXRlU2VsZWN0b3JDcmVhdG9yKG1lbW9pemUpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIG1lbW9pemVPcHRpb25zID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIG1lbW9pemVPcHRpb25zW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBmdW5jcyA9IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICBmdW5jc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cblxuICAgIHZhciByZWNvbXB1dGF0aW9ucyA9IDA7XG4gICAgdmFyIHJlc3VsdEZ1bmMgPSBmdW5jcy5wb3AoKTtcbiAgICB2YXIgZGVwZW5kZW5jaWVzID0gZ2V0RGVwZW5kZW5jaWVzKGZ1bmNzKTtcblxuICAgIHZhciBtZW1vaXplZFJlc3VsdEZ1bmMgPSBtZW1vaXplLmFwcGx5KHVuZGVmaW5lZCwgW2Z1bmN0aW9uICgpIHtcbiAgICAgIHJlY29tcHV0YXRpb25zKys7XG4gICAgICAvLyBhcHBseSBhcmd1bWVudHMgaW5zdGVhZCBvZiBzcHJlYWRpbmcgZm9yIHBlcmZvcm1hbmNlLlxuICAgICAgcmV0dXJuIHJlc3VsdEZ1bmMuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB9XS5jb25jYXQobWVtb2l6ZU9wdGlvbnMpKTtcblxuICAgIC8vIElmIGEgc2VsZWN0b3IgaXMgY2FsbGVkIHdpdGggdGhlIGV4YWN0IHNhbWUgYXJndW1lbnRzIHdlIGRvbid0IG5lZWQgdG8gdHJhdmVyc2Ugb3VyIGRlcGVuZGVuY2llcyBhZ2Fpbi5cbiAgICB2YXIgc2VsZWN0b3IgPSBkZWZhdWx0TWVtb2l6ZShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcGFyYW1zID0gW107XG4gICAgICB2YXIgbGVuZ3RoID0gZGVwZW5kZW5jaWVzLmxlbmd0aDtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBhcHBseSBhcmd1bWVudHMgaW5zdGVhZCBvZiBzcHJlYWRpbmcgYW5kIG11dGF0ZSBhIGxvY2FsIGxpc3Qgb2YgcGFyYW1zIGZvciBwZXJmb3JtYW5jZS5cbiAgICAgICAgcGFyYW1zLnB1c2goZGVwZW5kZW5jaWVzW2ldLmFwcGx5KG51bGwsIGFyZ3VtZW50cykpO1xuICAgICAgfVxuXG4gICAgICAvLyBhcHBseSBhcmd1bWVudHMgaW5zdGVhZCBvZiBzcHJlYWRpbmcgZm9yIHBlcmZvcm1hbmNlLlxuICAgICAgcmV0dXJuIG1lbW9pemVkUmVzdWx0RnVuYy5hcHBseShudWxsLCBwYXJhbXMpO1xuICAgIH0pO1xuXG4gICAgc2VsZWN0b3IucmVzdWx0RnVuYyA9IHJlc3VsdEZ1bmM7XG4gICAgc2VsZWN0b3IucmVjb21wdXRhdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcmVjb21wdXRhdGlvbnM7XG4gICAgfTtcbiAgICBzZWxlY3Rvci5yZXNldFJlY29tcHV0YXRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHJlY29tcHV0YXRpb25zID0gMDtcbiAgICB9O1xuICAgIHJldHVybiBzZWxlY3RvcjtcbiAgfTtcbn1cblxudmFyIGNyZWF0ZVNlbGVjdG9yID0gZXhwb3J0cy5jcmVhdGVTZWxlY3RvciA9IGNyZWF0ZVNlbGVjdG9yQ3JlYXRvcihkZWZhdWx0TWVtb2l6ZSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0cnVjdHVyZWRTZWxlY3RvcihzZWxlY3RvcnMpIHtcbiAgdmFyIHNlbGVjdG9yQ3JlYXRvciA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogY3JlYXRlU2VsZWN0b3I7XG5cbiAgaWYgKHR5cGVvZiBzZWxlY3RvcnMgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjcmVhdGVTdHJ1Y3R1cmVkU2VsZWN0b3IgZXhwZWN0cyBmaXJzdCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QgJyArICgnd2hlcmUgZWFjaCBwcm9wZXJ0eSBpcyBhIHNlbGVjdG9yLCBpbnN0ZWFkIHJlY2VpdmVkIGEgJyArIHR5cGVvZiBzZWxlY3RvcnMpKTtcbiAgfVxuICB2YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzKHNlbGVjdG9ycyk7XG4gIHJldHVybiBzZWxlY3RvckNyZWF0b3Iob2JqZWN0S2V5cy5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBzZWxlY3RvcnNba2V5XTtcbiAgfSksIGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIHZhbHVlcyA9IEFycmF5KF9sZW4zKSwgX2tleTMgPSAwOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG4gICAgICB2YWx1ZXNbX2tleTNdID0gYXJndW1lbnRzW19rZXkzXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWVzLnJlZHVjZShmdW5jdGlvbiAoY29tcG9zaXRpb24sIHZhbHVlLCBpbmRleCkge1xuICAgICAgY29tcG9zaXRpb25bb2JqZWN0S2V5c1tpbmRleF1dID0gdmFsdWU7XG4gICAgICByZXR1cm4gY29tcG9zaXRpb247XG4gICAgfSwge30pO1xuICB9KTtcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3Jlc2VsZWN0L2xpYi9pbmRleC5qcyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcclxuaW1wb3J0IFRvZ2dsZVNldHRpbmdzIGZyb20gJy4uL1RvZ2dsZVNldHRpbmdzL1RvZ2dsZVNldHRpbmdzJztcclxuaW1wb3J0ICcuL0RldmljZUxpc3RJdGVtLnNjc3MnO1xyXG5cclxuY2xhc3MgRGV2aWNlTGlzdEl0ZW0gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gIGNvbnN0cnVjdG9yIChwcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG5cclxuICAgIHRoaXMuc2V0RGV2aWNlSWQgPSAoZSkgPT57XHJcbiAgICAgIHRoaXMucHJvcHMuc2V0UG9wdXBTaG93bih0aGlzLnByb3BzLmRhdGEuX2lkKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICByZW5kZXIgKCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJkZXZpY2UtaXRlbVwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZGV2aWNlLWl0ZW1fX2luZm9cIj5cclxuICAgICAgICAgIDxMaW5rIGNsYXNzTmFtZT1cImRldmljZS1pdGVtX19pbmZvLW5hbWVcIiB0bz17XHJcbiAgICAgICAgICAgIGAvZGV2aWNlcy9kZXZpY2UvJHt0aGlzLnByb3BzLmRhdGEuX2lkfWBcclxuICAgICAgICAgIH0+XHJcbiAgICAgICAgICAgIHt0aGlzLnByb3BzLmRhdGEubmFtZX1cclxuICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZGV2aWNlLWl0ZW1fX2luZm8tc3RhdHVzXCI+XHJcbiAgICAgICAgICAgIDxUb2dnbGVTZXR0aW5nc1xyXG4gICAgICAgICAgICAgIGNoZWNrZWQ9e3RoaXMucHJvcHMuZGF0YS5zdGF0dXN9XHJcbiAgICAgICAgICAgICAgaXRlbUlkPXt0aGlzLnByb3BzLmRhdGEuX2lkfVxyXG4gICAgICAgICAgICAgIHNldEl0ZW1WYWx1ZT17dGhpcy5wcm9wcy5jaGFuZ2VTdGF0dXN9Lz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZGV2aWNlLWl0ZW1fX2Rlc2NyaXB0aW9uXCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZGV2aWNlLWl0ZW1fX2Rlc2NyaXB0aW9uLWxvY2F0aW9uXCI+XHJcbiAgICAgICAgICAgICAge3RoaXMucHJvcHMubG9jYXRpb259PC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZGV2aWNlLWl0ZW1fX2Rlc2NyaXB0aW9uLWljb25cIj5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRldmljZS1pdGVtX19kZXNjcmlwdGlvbi1pY29uLWRlbGV0ZVwiPlxyXG4gICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwiZmEgZmEtdHJhc2hcIlxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuc2V0RGV2aWNlSWR9PlxyXG4gICAgICAgICAgICAgICAgPC9hPlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuRGV2aWNlTGlzdEl0ZW0ucHJvcFR5cGVzID0ge1xyXG4gIGNoYW5nZVN0YXR1czogUHJvcFR5cGVzLmZ1bmMsXHJcbiAgZGVsZXRlRGV2aWNlOiBQcm9wVHlwZXMuZnVuYyxcclxuICBzZXRQb3B1cFNob3duOiBQcm9wVHlwZXMuZnVuYyxcclxuICBsb2NhdGlvbjogUHJvcFR5cGVzLnN0cmluZyxcclxuICBkYXRhOiBQcm9wVHlwZXMuc2hhcGUoe1xyXG4gICAgc3RhdHVzOiBQcm9wVHlwZXMuYm9vbGVhbixcclxuICAgIF9pZDogUHJvcFR5cGVzLnN0cmluZyxcclxuICAgIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXHJcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLnN0cmluZ1xyXG4gIH0pXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBEZXZpY2VMaXN0SXRlbTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbXBvbmVudHMvRGV2aWNlTGlzdEl0ZW0vRGV2aWNlTGlzdEl0ZW0uanMiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XHJcbmltcG9ydCB7IE1lc3NhZ2UgfSBmcm9tICcuLi8uLi9jb21wb25lbnRzL01lc3NhZ2UvTWVzc2FnZSc7XHJcbmltcG9ydCB7IFBvcHVwIH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9Qb3B1cC9Qb3B1cCc7XHJcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvQnV0dG9uL0J1dHRvbic7XHJcbmltcG9ydCBMaXN0SGVhZGVyIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvTGlzdEhlYWRlci9MaXN0SGVhZGVyJztcclxuXHJcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XHJcblxyXG5jbGFzcyBEZXZpY2VzU2VjdGlvbiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgY29uc3RydWN0b3IgKHByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIgKCkge1xyXG4gICAgY29uc3QgZmlsdGVyT3B0aW9uID0gdGhpcy5wcm9wcy5maWx0ZXJPcHRpb247XHJcblxyXG4gICAgaWYgKHR5cGVvZiBmaWx0ZXJPcHRpb24gIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgIHRoaXMucHJvcHMuZmlsdGVyQWN0aW9uKGZpbHRlck9wdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwiZGV2aWNlLWxpc3RcIj5cclxuICAgICAgICA8aDEgY2xhc3NOYW1lPVwiZGV2aWNlLWxpc3RfX3RpdGxlXCI+XHJcbiAgICAgICAgICB7dGhpcy5wcm9wcy5sb2NhdGlvbk9mRGV2aWNlcyA/XHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMubG9jYXRpb25PZkRldmljZXMudG9VcHBlckNhc2UoKVxyXG4gICAgICAgICAgICA6ICdZb3VyIGRldmljZXMnfVxyXG4gICAgICAgIDwvaDE+XHJcbiAgICAgICAgPExpc3RIZWFkZXJcclxuICAgICAgICAgIHF1YW50aXR5PXt0aGlzLnByb3BzLnF1YW50aXR5fVxyXG4gICAgICAgICAgbG9jYXRpb249e3RoaXMucHJvcHMubG9jYXRpb259XHJcbiAgICAgICAgICBoaXN0b3J5PXt0aGlzLnByb3BzLmhpc3Rvcnl9XHJcbiAgICAgICAgICBtYXRjaD17dGhpcy5wcm9wcy5tYXRjaH0gLz5cclxuICAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJkZXZpY2UtbGlzdF9fY29udGVudFwiPlxyXG4gICAgICAgICAgeyB0aGlzLnByb3BzLmNoaWxkcmVuIH1cclxuICAgICAgICA8L3NlY3Rpb24+XHJcbiAgICAgICAgPFBvcHVwXHJcbiAgICAgICAgICBzZXRQb3B1cFNob3duPXt0aGlzLnByb3BzLnNldFBvcHVwU2hvd259XHJcbiAgICAgICAgICBwb3B1cFNob3duPXt0aGlzLnByb3BzLnBvcHVwU2hvd259XHJcbiAgICAgICAgICBoZWFkZXI9XCJDb25maXJtIHRoZSBhY3Rpb25cIlxyXG4gICAgICAgICAgdGV4dD1cIkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byByZW1vdmUgdGhlIGRldmljZT9cIj5cclxuICAgICAgICAgIDxCdXR0b25cclxuICAgICAgICAgICAgc2V0UG9wdXBTaG93bj17dGhpcy5wcm9wcy5zZXRQb3B1cFNob3dufVxyXG4gICAgICAgICAgICBva0hhbmRsZXI9eygpID0+IHtcclxuICAgICAgICAgICAgICB0aGlzLnByb3BzLmRlbGV0ZURldmljZSh0aGlzLnByb3BzLmN1cnJlbnRJZCk7XHJcbiAgICAgICAgICAgICAgdGhpcy5wcm9wcy5zZXRQb3B1cFNob3duKCk7XHJcbiAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgIGNsYXNzTmFtZT17J2J0biBwb3B1cF9fYnRuJ31cclxuICAgICAgICAgICAgaW5uZXJUZXh0PXsnT2snfVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICAgIDxCdXR0b25cclxuICAgICAgICAgICAgb2tIYW5kbGVyPXsoKSA9PiB7XHJcbiAgICAgICAgICAgICAgdGhpcy5wcm9wcy5zZXRQb3B1cFNob3duKCk7XHJcbiAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgIGNsYXNzTmFtZT17J2J0biBidG4tLWRlZmF1bHQgcG9wdXBfX2J0bid9XHJcbiAgICAgICAgICAgIGlubmVyVGV4dD17J0NhbmNlbCd9XHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgIDwvUG9wdXA+XHJcbiAgICAgICAgPE1lc3NhZ2VcclxuICAgICAgICAgIGNsZWFyU3RhdHVzPXt0aGlzLnByb3BzLmNsZWFyU3RhdHVzfVxyXG4gICAgICAgICAgaGVhZGVyPXsnRXJyb3InfVxyXG4gICAgICAgIC8+XHJcbiAgICAgIDwvc2VjdGlvbj5cclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5cclxuRGV2aWNlc1NlY3Rpb24ucHJvcFR5cGVzID0ge1xyXG4gIGNoYW5nZVN0YXR1czogUHJvcFR5cGVzLmZ1bmMsXHJcbiAgZGVsZXRlRGV2aWNlOiBQcm9wVHlwZXMuZnVuYyxcclxuICBsb2FkRGV2aWNlczogUHJvcFR5cGVzLmZ1bmMsXHJcbiAgZmlsdGVyT3B0aW9uOiBQcm9wVHlwZXMuYW55LFxyXG4gIGZpbHRlckFjdGlvbjogUHJvcFR5cGVzLmZ1bmMsXHJcbiAgZGV2aWNlczogUHJvcFR5cGVzLmFycmF5LFxyXG4gIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxyXG4gIGhpc3Rvcnk6IFByb3BUeXBlcy5vYmplY3QsXHJcbiAgbWF0Y2g6IFByb3BUeXBlcy5vYmplY3QsXHJcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5hbnksXHJcbiAgY2xlYXJTdGF0dXM6IFByb3BUeXBlcy5mdW5jLFxyXG4gIGN1cnJlbnRJZDogUHJvcFR5cGVzLnN0cmluZyxcclxuICBzZXRQb3B1cFNob3duOiBQcm9wVHlwZXMuZnVuYyxcclxuICBwb3B1cFNob3duOiBQcm9wVHlwZXMuYm9vbCxcclxuICBxdWFudGl0eTogUHJvcFR5cGVzLm51bWJlcixcclxuICBsb2NhdGlvbk9mRGV2aWNlczogUHJvcFR5cGVzLnN0cmluZ1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgRGV2aWNlc1NlY3Rpb247XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9jb21wb25lbnRzL0RldmlzZXNTZWN0aW9uL0RldmlzZXNTZWN0aW9uLmpzIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcclxuaW1wb3J0ICcuL0ZpbHRlclNlbGVjdC5zY3NzJztcclxuXHJcbmNvbnN0IEZpbHRlclNlbGVjdCA9IChwcm9wcykgPT4ge1xyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImZpbHRlckJveFwiPlxyXG4gICAgICA8c2VsZWN0XHJcbiAgICAgICAgY2xhc3NOYW1lPVwiZmlsdGVyQm94X19maWx0ZXJcIlxyXG4gICAgICAgIG9uQ2hhbmdlPXtlID0+IHByb3BzLmhhbmRsZVNlbGVjdChlLnRhcmdldC52YWx1ZSl9PlxyXG4gICAgICAgICAge3Byb3BzLm9wdGlvbnMubWFwKGl0ZW0gPT5cclxuICAgICAgICAgICAgPG9wdGlvblxyXG4gICAgICAgICAgICAgIHZhbHVlPXsgaXRlbS52YWx1ZX1cclxuICAgICAgICAgICAgICBrZXk9e2l0ZW0udmFsdWV9XHJcbiAgICAgICAgICAgICAgc2VsZWN0ZWQ9e2l0ZW0udmFsdWUgPT09IHByb3BzLnZhbHVlfT5cclxuICAgICAgICAgICAgICAgIHtpdGVtLmlubmVyVGV4dH1cclxuICAgICAgICAgICAgICA8L29wdGlvbj5cclxuICAgICAgICAgICl9XHJcbiAgICAgIDwvc2VsZWN0PlxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufTtcclxuXHJcbkZpbHRlclNlbGVjdC5wcm9wVHlwZXMgPSB7XHJcbiAgaGFuZGxlU2VsZWN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxyXG4gIG9wdGlvbnM6IFByb3BUeXBlcy5hcnJheSxcclxuICB2YWx1ZTogUHJvcFR5cGVzLnN0cmluZ1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgRmlsdGVyU2VsZWN0O1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29tcG9uZW50cy9GaWx0ZXJTZWxlY3QvRmlsdGVyU2VsZWN0LmpzIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xyXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xyXG5pbXBvcnQgcXVlcnlTdHJpbmcgZnJvbSAncXVlcnktc3RyaW5nJztcclxuaW1wb3J0IEZpbHRlclNlbGVjdCBmcm9tICcuLi9GaWx0ZXJTZWxlY3QvRmlsdGVyU2VsZWN0JztcclxuaW1wb3J0IFNlYXJjaCBmcm9tICcuLi9TZWFyY2gvU2VhcmNoJztcclxuaW1wb3J0IHtcclxuICBmaWx0ZXJBY3Rpb24sXHJcbiAgc2VhcmNoQWN0aW9uIH0gZnJvbSAnLi4vLi4vYWN0aW9ucy9kZXZpY2VzLmFjdGlvbic7XHJcbmltcG9ydCB7IHF1ZXJ5RnJvbU9iamVjdCB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IHsgb3B0aW9ucyB9IGZyb20gJy4uLy4uL2RhdGEvZmlsdGVyT3B0aW9ucyc7XHJcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XHJcblxyXG5jbGFzcyBMaXN0SGVhZGVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICBjb25zdHJ1Y3RvciAocHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICAgIHRoaXMuaW5pdGlhbFBhcmFtcyA9IHtcclxuICAgICAgc2VhcmNoOiAnJyxcclxuICAgICAgZmlsdGVyOiAnYWxsJ1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmhhbmRsZUZpbHRlclNlbGVjdCA9IChmaWx0ZXJPcHRpb24pID0+IHtcclxuICAgICAgdGhpcy5wcm9wcy5maWx0ZXJBY3Rpb24oZmlsdGVyT3B0aW9uKTtcclxuICAgICAgdGhpcy51cGRhdGVVcmwoeyAuLi50aGlzLmluaXRpYWxQYXJhbXMsIGZpbHRlcjogZmlsdGVyT3B0aW9uIH0pO1xyXG4gICAgfTtcclxuICAgIHRoaXMuaGFuZGxlU2VhcmNoUmVzdWx0ID0gKHNlYXJjaFZhbHVlKSA9PiB7XHJcbiAgICAgIHRoaXMucHJvcHMuZmluZEl0ZW1zKHNlYXJjaFZhbHVlKTtcclxuICAgICAgdGhpcy51cGRhdGVVcmwoeyAuLi50aGlzLmluaXRpYWxQYXJhbXMsIHNlYXJjaDogc2VhcmNoVmFsdWUgfSk7XHJcbiAgICB9O1xyXG4gICAgdGhpcy51cGRhdGVVcmwgPSAocGFyYW1zKSA9PiB7XHJcbiAgICAgIGNvbnN0IG1hdGNoID0gdGhpcy5wcm9wcy5tYXRjaDtcclxuICAgICAgY29uc3QgaGlzdG9yeSA9IHRoaXMucHJvcHMuaGlzdG9yeTtcclxuXHJcbiAgICAgIHRoaXMuaW5pdGlhbFBhcmFtcyA9IHBhcmFtcztcclxuICAgICAgaGlzdG9yeS5wdXNoKHtcclxuICAgICAgICBwYXRobmFtZTogbWF0Y2gudXJsLFxyXG4gICAgICAgIHNlYXJjaDogcXVlcnlGcm9tT2JqZWN0KHBhcmFtcylcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG4gIH1cclxuICBjb21wb25lbnREaWRNb3VudCAoKSB7XHJcbiAgICBjb25zdCBsb2NhdGlvbiA9IHRoaXMucHJvcHMubG9jYXRpb247XHJcbiAgICBjb25zdCBzZWFyY2hWYWx1ZSA9IHF1ZXJ5U3RyaW5nLnBhcnNlKGxvY2F0aW9uLnNlYXJjaCkuc2VhcmNoO1xyXG4gICAgY29uc3QgZmlsdGVyVmFsdWUgPSBxdWVyeVN0cmluZy5wYXJzZShsb2NhdGlvbi5zZWFyY2gpLmZpbHRlcjtcclxuXHJcbiAgICBpZiAoc2VhcmNoVmFsdWUpIHtcclxuICAgICAgdGhpcy5oYW5kbGVTZWFyY2hSZXN1bHQoc2VhcmNoVmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChmaWx0ZXJWYWx1ZSkge1xyXG4gICAgICB0aGlzLmhhbmRsZUZpbHRlclNlbGVjdChmaWx0ZXJWYWx1ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50ICgpIHtcclxuICAgIHRoaXMucHJvcHMuZmlsdGVyQWN0aW9uKCdhbGwnKTtcclxuICAgIHRoaXMucHJvcHMuZmluZEl0ZW1zKCcnKTtcclxuICB9XHJcblxyXG4gIHJlbmRlciAoKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8aGVhZGVyIGNsYXNzTmFtZT1cImRldmljZS1saXN0X19oZWFkZXJcIj5cclxuICAgICAgICA8U2VhcmNoXHJcbiAgICAgICAgICBoYW5kbGVTZWFyY2g9e3RoaXMuaGFuZGxlU2VhcmNoUmVzdWx0fVxyXG4gICAgICAgICAgcXVhbnRpdHk9e3RoaXMucHJvcHMucXVhbnRpdHl9XHJcbiAgICAgICAgICB2YWx1ZT17dGhpcy5pbml0aWFsUGFyYW1zLnNlYXJjaH1cclxuICAgICAgICAvPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZGV2aWNlLWxpc3RfX2hlYWRlci0tcmlnaHRcIj5cclxuICAgICAgICAgIDxGaWx0ZXJTZWxlY3RcclxuICAgICAgICAgICAgaGFuZGxlU2VsZWN0PXt0aGlzLmhhbmRsZUZpbHRlclNlbGVjdH1cclxuICAgICAgICAgICAgb3B0aW9ucz17b3B0aW9uc31cclxuICAgICAgICAgICAgdmFsdWU9e3RoaXMuaW5pdGlhbFBhcmFtcy5maWx0ZXJ9XHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgICAgPExpbmsgdG89eycvYnVpbGRlcid9IGNsYXNzTmFtZT1cImJ0biBidG4tLXByaW1hcnkgYWRkLWl0ZW0tYnV0dG9uXCI+XHJcbiAgICAgICAgICAgIE5ld1xyXG4gICAgICAgICAgPC9MaW5rPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2hlYWRlcj5cclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSBzdGF0ZSA9Pih7XHJcbiAgZmlsdGVyT3B0aW9uOiBzdGF0ZS5zZWFyY2hBbmRGaWx0ZXIuZmlsdGVyT3B0aW9uLFxyXG4gIHNlYXJjaDogc3RhdGUuc2VhcmNoQW5kRmlsdGVyLnNlYXJjaFZhbHVlXHJcbn0pO1xyXG5cclxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gKGRpc3BhdGNoKSA9PiAoe1xyXG4gIGZpbHRlckFjdGlvbjogKGZpbHRlck9wdGlvbikgPT4gZGlzcGF0Y2goZmlsdGVyQWN0aW9uKGZpbHRlck9wdGlvbikpLFxyXG4gIGZpbmRJdGVtczogKHNlYXJjaFZhbHVlKSA9PiBkaXNwYXRjaChzZWFyY2hBY3Rpb24oc2VhcmNoVmFsdWUpKVxyXG59KTtcclxuXHJcbkxpc3RIZWFkZXIucHJvcFR5cGVzID0ge1xyXG4gIHNlYXJjaDogUHJvcFR5cGVzLnN0cmluZyxcclxuICBmaWx0ZXJPcHRpb246IFByb3BUeXBlcy5zdHJpbmcsXHJcbiAgZmlsdGVyQWN0aW9uOiBQcm9wVHlwZXMuZnVuYyxcclxuICBmaW5kSXRlbXM6IFByb3BUeXBlcy5mdW5jLFxyXG4gIG1hdGNoOiBQcm9wVHlwZXMub2JqZWN0LFxyXG4gIGhpc3Rvcnk6IFByb3BUeXBlcy5vYmplY3QsXHJcbiAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3QsXHJcbiAgbG9hZERldmljZXM6IFByb3BUeXBlcy5mdW5jLFxyXG4gIHF1YW50aXR5OiBQcm9wVHlwZXMubnVtYmVyXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKShMaXN0SGVhZGVyKTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbXBvbmVudHMvTGlzdEhlYWRlci9MaXN0SGVhZGVyLmpzIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcclxuaW1wb3J0ICcuL1BhZ2luYXRpb24uc2Nzcyc7XHJcblxyXG5jbGFzcyBQYWdpbmF0aW9uIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICBjb25zdHJ1Y3RvciAocHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICB9XHJcblxyXG4gIHJlbmRlciAoKSB7XHJcbiAgICBjb25zdCBwYWdlTnVtYmVycyA9IFtdO1xyXG4gICAgY29uc3QgY3VycmVudFBhZ2UgPSB0aGlzLnByb3BzLmN1cnJlbnRQYWdlO1xyXG5cclxuICAgIGlmICghdGhpcy5wcm9wcy50b3RhbFBhZ2VzIHx8IHRoaXMucHJvcHMudG90YWxQYWdlcyA8PSAxKSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IHRoaXMucHJvcHMudG90YWxQYWdlczsgaSsrKSB7XHJcbiAgICAgIHBhZ2VOdW1iZXJzLnB1c2goaSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgPHVsIGNsYXNzTmFtZT1cInBhZ2luYXRpb24tcGFnZXNcIj5cclxuICAgICAgICB7XHJcbiAgICAgICAgICBwYWdlTnVtYmVycy5tYXAobnVtYmVyID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICA8bGlcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3VycmVudFBhZ2UgPT09IG51bWJlciA/XHJcbiAgICAgICAgICAgICAgICAncGFnaW5hdGlvbi1wYWdlc19fbnVtIGJ0bicgOlxyXG4gICAgICAgICAgICAgICAgJ3BhZ2luYXRpb24tcGFnZXNfX251bSBidG4gYnRuLS1kZWZhdWx0J1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAga2V5PXtudW1iZXJ9XHJcbiAgICAgICAgICAgICAgICBpZD17bnVtYmVyfVxyXG4gICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5wcm9wcy5oYW5kbGVDbGlja30+XHJcbiAgICAgICAgICAgICAgICB7bnVtYmVyfVxyXG4gICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgPC91bD5cclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5QYWdpbmF0aW9uLnByb3BUeXBlcyA9IHtcclxuICBoYW5kbGVDbGljazogUHJvcFR5cGVzLmZ1bmMsXHJcbiAgc2V0UGFnZTogUHJvcFR5cGVzLmZ1bmMsXHJcbiAgY3VycmVudFBhZ2U6IFByb3BUeXBlcy5udW1iZXIsXHJcbiAgdG90YWxQYWdlczogUHJvcFR5cGVzLm51bWJlclxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgUGFnaW5hdGlvbjtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbXBvbmVudHMvUGFnaW5hdGlvbi9QYWdpbmF0aW9uLmpzIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcclxuaW1wb3J0ICcuL3NlYXJjaC5zY3NzJztcclxuXHJcbmNvbnN0IFNlYXJjaCA9IChwcm9wcykgPT4ge1xyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IGNsYXNzTmFtZT1cInNlYXJjaEJveFwiPlxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlYXJjaEJveF9fcmVzdWx0c1wiPlxyXG4gICAgICAgIDxzcGFuPntwcm9wcy5xdWFudGl0eX08L3NwYW4+IGRldmljZXNcclxuICAgICAgPC9kaXY+XHJcbiAgICAgIDxkaXY+XHJcbiAgICAgICAgPGlucHV0XHJcbiAgICAgICAgICB0eXBlPVwidGV4dFwiXHJcbiAgICAgICAgICBuYW1lPVwic2VhcmNoXCJcclxuICAgICAgICAgIHBsYWNlaG9sZGVyPVwiRmluZCBhIGRldmljZVwiXHJcbiAgICAgICAgICB2YWx1ZT17cHJvcHMudmFsdWV9XHJcbiAgICAgICAgICBjbGFzc05hbWU9XCJzZWFyY2hCb3hfX2ZpZWxkXCJcclxuICAgICAgICAgIG9uQ2hhbmdlPXtlID0+IHtcclxuICAgICAgICAgICAgcHJvcHMuaGFuZGxlU2VhcmNoKGUudGFyZ2V0LnZhbHVlKTtcclxuICAgICAgICAgIH19Lz5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICApO1xyXG59O1xyXG5cclxuU2VhcmNoLnByb3BUeXBlcyA9IHtcclxuICBoYW5kbGVTZWFyY2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXHJcbiAgcXVhbnRpdHk6IFByb3BUeXBlcy5udW1iZXIsXHJcbiAgdmFsdWU6IFByb3BUeXBlcy5zdHJpbmdcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNlYXJjaDtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbXBvbmVudHMvU2VhcmNoL1NlYXJjaC5qcyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XHJcbmltcG9ydCAnLi9Ub2dnbGVTdHlsZS5zY3NzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRvZ2dsZVNldHRpbmdzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuXHJcbiAgY29uc3RydWN0b3IgKHByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgfVxyXG5cclxuICBvbkNoYW5nZVZhbHVlID0gKGUpID0+IHtcclxuICAgIHRoaXMucHJvcHMuc2V0SXRlbVZhbHVlKCF0aGlzLnByb3BzLmNoZWNrZWQsXHJcbiAgICAgIHRoaXMucHJvcHMuaXRlbUlkLFxyXG4gICAgICB0aGlzLnByb3BzLmRldmljZUlkKTtcclxuICB9XHJcblxyXG4gIHJlbmRlciAoKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17IGAkeyB0aGlzLnByb3BzLnN0eWxlTmFtZSB9YCB9PlxyXG4gICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJzd2l0Y2hcIj5cclxuICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxyXG4gICAgICAgICAgICBjaGVja2VkPXt0aGlzLnByb3BzLmNoZWNrZWR9XHJcbiAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uQ2hhbmdlVmFsdWV9XHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzbGlkZXIgcm91bmRcIj48L2Rpdj5cclxuICAgICAgICA8L2xhYmVsPlxyXG4gICAgICA8L2Rpdj5cclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5Ub2dnbGVTZXR0aW5ncy5wcm9wVHlwZXMgPSB7XHJcbiAgZGV2aWNlOiBQcm9wVHlwZXMub2JqZWN0LFxyXG4gIHN0eWxlTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcclxuICBjaGVja2VkOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxyXG4gIHNldEl0ZW1WYWx1ZTogUHJvcFR5cGVzLmZ1bmMsXHJcbiAgaXRlbUlkOiBQcm9wVHlwZXMuYW55LFxyXG4gIG5ld1ZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG4gIGRldmljZUlkOiBQcm9wVHlwZXMuc3RyaW5nXHJcbn07XHJcblRvZ2dsZVNldHRpbmdzLmRlZmF1bHRQcm9wcyA9IHtcclxuICBjaGVja2VkOiBmYWxzZVxyXG59O1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29tcG9uZW50cy9Ub2dnbGVTZXR0aW5ncy9Ub2dnbGVTZXR0aW5ncy5qcyIsImV4cG9ydCBjb25zdCBvcHRpb25zID0gW1xyXG4gIHtcclxuICAgIHZhbHVlOiAnYWxsJyxcclxuICAgIGlubmVyVGV4dDogJ0FsbCdcclxuICB9LFxyXG4gIHtcclxuICAgIHZhbHVlOiAnb24nLFxyXG4gICAgaW5uZXJUZXh0OiAnU2hvdyBPbidcclxuICB9LFxyXG4gIHtcclxuICAgIHZhbHVlOiAnb2ZmJyxcclxuICAgIGlubmVyVGV4dDogJ1Nob3cgT0ZGJ1xyXG4gIH1cclxuXTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2RhdGEvZmlsdGVyT3B0aW9ucy5qcyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XHJcbmltcG9ydCBQYWdpbmF0aW9uIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvUGFnaW5hdGlvbi9QYWdpbmF0aW9uJztcclxuaW1wb3J0IERldmljZUxpc3RJdGVtIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvRGV2aWNlTGlzdEl0ZW0vRGV2aWNlTGlzdEl0ZW0nO1xyXG5pbXBvcnQgRGV2aWNlc1NlY3Rpb24gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9EZXZpc2VzU2VjdGlvbi9EZXZpc2VzU2VjdGlvbic7XHJcbmltcG9ydCB7XHJcbiAgbG9hZERldmljZXMsXHJcbiAgY2hhbmdlU3RhdHVzLFxyXG4gIGRlbGV0ZURldmljZSxcclxuICB1cGRhdGVEZXZpY2UsXHJcbiAgY2xlYXJTdGF0dXMgfSBmcm9tICcuLi8uLi9hY3Rpb25zL2RldmljZXMuYWN0aW9uJztcclxuaW1wb3J0IHsgc2VuZE5vdGlmaWNhdGlvbldTIH0gZnJvbSAnLi4vLi4vYWN0aW9ucy9ub3RpZmljYXRpb25zLmFjdGlvbic7XHJcbmltcG9ydCB7IGZpbHRlckl0ZW1zIH0gZnJvbSAnLi4vLi4vc2VsZWN0b3JzJztcclxuaW1wb3J0IFJlYWN0Q1NTVHJhbnNpdGlvbkdyb3VwIGZyb20gJ3JlYWN0LWFkZG9ucy1jc3MtdHJhbnNpdGlvbi1ncm91cCc7XHJcblxyXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xyXG5cclxuY2xhc3MgTG9jYXRpb25MaXN0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICBjb25zdHJ1Y3RvciAocHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuXHJcbiAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICBwb3B1cFNob3duOiBmYWxzZSxcclxuICAgICAgY3VycmVudElkOiAnJyxcclxuICAgICAgY3VycmVudFBhZ2U6IDEsXHJcbiAgICAgIGRldmljZXNQZXJQYWdlOiAxMlxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnNldFBvcHVwU2hvd24gPSAoaWQpID0+IHtcclxuICAgICAgY29uc3QgY3VycmVudFN0YXRlID0gdGhpcy5zdGF0ZS5wb3B1cFNob3duO1xyXG5cclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgcG9wdXBTaG93bjogIWN1cnJlbnRTdGF0ZSxcclxuICAgICAgICBjdXJyZW50SWQ6IGlkXHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmhhbmRsZUNsaWNrID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIGN1cnJlbnRQYWdlOiBOdW1iZXIoZXZlbnQudGFyZ2V0LmlkKVxyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5zZXRQYWdlID0gKHBhZ2VOdW1iZXIpID0+IHtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgY3VycmVudFBhZ2U6IHBhZ2VOdW1iZXJcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuY2hhbmdlU3RhdHVzID0gKHN0YXR1cywgaWQpID0+IHtcclxuICAgICAgdGhpcy5wcm9wcy5jaGFuZ2VTdGF0dXMoeyBzdGF0dXMgfSwgaWQpO1xyXG4gICAgfTtcclxuICAgIHRoaXMuZGVsZXRlRGV2aWNlID0gKGlkKSA9PiB7XHJcbiAgICAgIHRoaXMucHJvcHMuZGVsZXRlRGV2aWNlKGlkKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBjb21wb25lbnREaWRNb3VudCAoKSB7XHJcbiAgICB0aGlzLnByb3BzLmxvYWREZXZpY2VzKCk7XHJcbiAgfVxyXG5cclxuICByZW5kZXJEZXZpY2VzIChkZXZpY2VzSW5Mb2NhdGlvbikge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgZGV2aWNlc0luTG9jYXRpb24ubWFwKChkZXZpY2UsIGkpID0+IHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgPERldmljZUxpc3RJdGVtXHJcbiAgICAgICAgICAgIGRhdGE9e2RldmljZX1cclxuICAgICAgICAgICAga2V5PXtpfVxyXG4gICAgICAgICAgICBsb2NhdGlvbj17Jyd9XHJcbiAgICAgICAgICAgIGNoYW5nZVN0YXR1cz17dGhpcy5jaGFuZ2VTdGF0dXN9XHJcbiAgICAgICAgICAgIHNldFBvcHVwU2hvd249e3RoaXMuc2V0UG9wdXBTaG93bn0vPlxyXG4gICAgICAgICk7XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyRGV2aWNlR3JvdXAgKGRldmljZXNJbkxvY2F0aW9uKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImRldmljZS1ncm91cFwiPlxyXG4gICAgICAgIDxSZWFjdENTU1RyYW5zaXRpb25Hcm91cFxyXG4gICAgICAgICAgY2xhc3NOYW1lPVwiZGV2aWNlLWdyb3VwX19pdGVtc1wiXHJcbiAgICAgICAgICB0cmFuc2l0aW9uTmFtZT1cImhpZGVcIlxyXG4gICAgICAgICAgdHJhbnNpdGlvbkVudGVyVGltZW91dD17NTAwfVxyXG4gICAgICAgICAgdHJhbnNpdGlvbkxlYXZlVGltZW91dD17MzAwfT5cclxuICAgICAgICAgIHt0aGlzLnJlbmRlckRldmljZXMoZGV2aWNlc0luTG9jYXRpb24pfVxyXG4gICAgICAgIDwvUmVhY3RDU1NUcmFuc2l0aW9uR3JvdXA+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHJlbmRlciAoKSB7XHJcbiAgICBjb25zdCBmaWx0ZXJPcHRpb24gPSB0aGlzLnByb3BzLm1hdGNoLnBhcmFtcy5maWx0ZXJPcHRpb247XHJcbiAgICBjb25zdCBsb2NhdGlvbk9mRGV2aWNlcyA9IHRoaXMucHJvcHMubWF0Y2gucGFyYW1zLmxvY2F0aW9uO1xyXG4gICAgY29uc3QgZGV2aWNlc0luTG9jYXRpb24gPSB0aGlzLnByb3BzLmRldmljZXNcclxuICAgICAgLmZpbHRlcihpdGVtID0+IGl0ZW0ubG9jYXRpb24gPT09IGxvY2F0aW9uT2ZEZXZpY2VzKTtcclxuICAgIGNvbnN0IHsgY3VycmVudFBhZ2UsIGRldmljZXNQZXJQYWdlIH0gPSB0aGlzLnN0YXRlO1xyXG4gICAgY29uc3QgdG90YWxQYWdlcyA9IE1hdGguY2VpbChcclxuICAgICAgZGV2aWNlc0luTG9jYXRpb24ubGVuZ3RoIC8gZGV2aWNlc1BlclBhZ2UpO1xyXG4gICAgY29uc3QgaW5kZXhPZkxhc3REZXZpY2UgPSBjdXJyZW50UGFnZSAqIGRldmljZXNQZXJQYWdlO1xyXG4gICAgY29uc3QgaW5kZXhPZkZpcnN0RGV2aWNlID0gaW5kZXhPZkxhc3REZXZpY2UgLSBkZXZpY2VzUGVyUGFnZTtcclxuICAgIGNvbnN0IGN1cnJlbnREZXZpY2VzID0gZGV2aWNlc0luTG9jYXRpb25cclxuICAgICAgLnNsaWNlKGluZGV4T2ZGaXJzdERldmljZSwgaW5kZXhPZkxhc3REZXZpY2UpO1xyXG5cclxuICAgIGlmICh0eXBlb2YgZmlsdGVyT3B0aW9uICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICB0aGlzLnByb3BzLmZpbHRlckFjdGlvbihmaWx0ZXJPcHRpb24pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxEZXZpY2VzU2VjdGlvblxyXG4gICAgICAgIGZpbHRlck9wdGlvbj17dGhpcy5wcm9wcy5tYXRjaC5wYXJhbXMuZmlsdGVyT3B0aW9ufVxyXG4gICAgICAgIGRldmljZXM9e3RoaXMucHJvcHMuZGV2aWNlc31cclxuICAgICAgICBsb2NhdGlvbj17dGhpcy5wcm9wcy5sb2NhdGlvbn1cclxuICAgICAgICBoaXN0b3J5PXt0aGlzLnByb3BzLmhpc3Rvcnl9XHJcbiAgICAgICAgbWF0Y2g9e3RoaXMucHJvcHMubWF0Y2h9XHJcbiAgICAgICAgc3RhdHVzPXt0aGlzLnByb3BzLnN0YXR1c31cclxuICAgICAgICB0ZXh0PXt0aGlzLnByb3BzLmVycm9yVGV4dH1cclxuICAgICAgICBzZXRQb3B1cFNob3duPXt0aGlzLnNldFBvcHVwU2hvd259XHJcbiAgICAgICAgcG9wdXBTaG93bj17dGhpcy5zdGF0ZS5wb3B1cFNob3dufVxyXG4gICAgICAgIGRlbGV0ZURldmljZT17dGhpcy5kZWxldGVEZXZpY2V9XHJcbiAgICAgICAgY2xlYXJTdGF0dXM9e3RoaXMucHJvcHMuY2xlYXJTdGF0dXN9XHJcbiAgICAgICAgY3VycmVudElkPXt0aGlzLnN0YXRlLmN1cnJlbnRJZH1cclxuICAgICAgICBxdWFudGl0eT17ZGV2aWNlc0luTG9jYXRpb24ubGVuZ3RofVxyXG4gICAgICAgIGxvY2F0aW9uT2ZEZXZpY2VzPXtsb2NhdGlvbk9mRGV2aWNlc30+XHJcblxyXG4gICAgICAgIHsgdGhpcy5wcm9wcy5zdGF0dXMgPT09ICdET05FJyAmJiB0aGlzLnByb3BzLmRldmljZXMubGVuZ3RoID09PSAwID9cclxuICAgICAgICAgIDxzcGFuPllvdSBuZWVkIHRvIGFkZCBkZXZpY2U8L3NwYW4+IDpcclxuICAgICAgICAgIHRoaXMucmVuZGVyRGV2aWNlR3JvdXAoY3VycmVudERldmljZXMpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIDxQYWdpbmF0aW9uXHJcbiAgICAgICAgICBoYW5kbGVDbGljaz17dGhpcy5oYW5kbGVDbGlja31cclxuICAgICAgICAgIHNldFBhZ2U9e3RoaXMuc2V0UGFnZX1cclxuICAgICAgICAgIGxpc3Q9e3RoaXMucHJvcHMuZGV2aWNlc31cclxuICAgICAgICAgIGN1cnJlbnRQYWdlPXt0aGlzLnN0YXRlLmN1cnJlbnRQYWdlfVxyXG4gICAgICAgICAgdG90YWxQYWdlcz17dG90YWxQYWdlc30vPlxyXG4gICAgICA8L0RldmljZXNTZWN0aW9uPlxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IHN0YXRlID0+KHtcclxuICBkZXZpY2VzOiBmaWx0ZXJJdGVtcyhzdGF0ZSksXHJcbiAgc3RhdHVzOiBzdGF0ZS5kZXZpY2VzTGlzdC51cGxvYWRTdGF0dXMsXHJcbiAgZXJyb3JUZXh0OiBzdGF0ZS5kZXZpY2VzTGlzdC5lcnJvclRleHRcclxufSk7XHJcblxyXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSAoZGlzcGF0Y2gpID0+ICh7XHJcbiAgY2hhbmdlU3RhdHVzOiAoZGF0YSwgaWQpID0+IGRpc3BhdGNoKHVwZGF0ZURldmljZShkYXRhLCBpZCkpLFxyXG4gIGxvYWREZXZpY2VzOiAoKSA9PiBkaXNwYXRjaChsb2FkRGV2aWNlcygpKSxcclxuICBkZWxldGVEZXZpY2U6IChpZCkgPT4gZGlzcGF0Y2goZGVsZXRlRGV2aWNlKGlkKSksXHJcbiAgc2VuZE5vdGlmaWNhdGlvbldTOiAobWVzc2FnZSkgPT4gZGlzcGF0Y2goc2VuZE5vdGlmaWNhdGlvbldTKG1lc3NhZ2UpKSxcclxuICBjbGVhclN0YXR1czogKCkgPT4gZGlzcGF0Y2goY2xlYXJTdGF0dXMoKSlcclxufSk7XHJcblxyXG5Mb2NhdGlvbkxpc3QucHJvcFR5cGVzID0ge1xyXG4gIHNlYXJjaDogUHJvcFR5cGVzLnN0cmluZyxcclxuICBmaWx0ZXJPcHRpb246ICBQcm9wVHlwZXMuc3RyaW5nLFxyXG4gIG1hdGNoOiBQcm9wVHlwZXMub2JqZWN0LFxyXG4gIGNoYW5nZVN0YXR1czogUHJvcFR5cGVzLmZ1bmMsXHJcbiAgZGV2aWNlczogUHJvcFR5cGVzLmFycmF5LFxyXG4gIGZpbHRlckFjdGlvbjogUHJvcFR5cGVzLmZ1bmMsXHJcbiAgZmluZEl0ZW1zOiBQcm9wVHlwZXMuZnVuYyxcclxuICBsb2FkRGV2aWNlczogUHJvcFR5cGVzLmZ1bmMsXHJcbiAgZGVsZXRlRGV2aWNlOiBQcm9wVHlwZXMuZnVuYyxcclxuICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LFxyXG4gIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxyXG4gIHN0YXR1czogUHJvcFR5cGVzLnN0cmluZyxcclxuICBzZW5kTm90aWZpY2F0aW9uV1M6IFByb3BUeXBlcy5mdW5jLFxyXG4gIGVycm9yVGV4dDogUHJvcFR5cGVzLnN0cmluZyxcclxuICBjbGVhclN0YXR1czogUHJvcFR5cGVzLmZ1bmNcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMpKExvY2F0aW9uTGlzdCk7XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9wYWdlcy9Mb2NhdGlvbkxpc3QvTG9jYXRpb25MaXN0LmpzIiwiaW1wb3J0IHsgY3JlYXRlU2VsZWN0b3IgfSBmcm9tICdyZXNlbGVjdCc7XHJcbmltcG9ydCB7IHNlYXJjaEl0ZW0gfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcblxyXG5jb25zdCBnZXRGaWx0ZXJPcHRpb24gPSBzdGF0ZSA9PiBzdGF0ZS5zZWFyY2hBbmRGaWx0ZXIuZmlsdGVyT3B0aW9uO1xyXG5jb25zdCBnZXREZXZpY2VzID0gc3RhdGUgPT4gc3RhdGUuZGV2aWNlc0xpc3QuZGV2aWNlcztcclxuY29uc3QgZ2V0U2VhcmNoVmFsdWUgPSBzdGF0ZSA9PiBzdGF0ZS5zZWFyY2hBbmRGaWx0ZXIuc2VhcmNoVmFsdWU7XHJcblxyXG5leHBvcnQgY29uc3QgZmlsdGVySXRlbXMgPSBjcmVhdGVTZWxlY3RvcihcclxuICBbZ2V0RmlsdGVyT3B0aW9uLCBnZXRTZWFyY2hWYWx1ZSwgZ2V0RGV2aWNlc10sXHJcbiAgKGZpbHRlck9wdGlvbiwgc2VhcmNoVmFsdWUsIGl0ZW1zKSA9PiB7XHJcbiAgICBsZXQgbmV3QXJyID0gaXRlbXM7XHJcblxyXG4gICAgaWYgKGZpbHRlck9wdGlvbiA9PT0gJ2FsbCcpIHtcclxuICAgICAgbmV3QXJyID0gaXRlbXM7XHJcbiAgICB9IGVsc2UgaWYgKGZpbHRlck9wdGlvbiA9PT0gJ29uJykge1xyXG4gICAgICBuZXdBcnIgPSBpdGVtcy5maWx0ZXIoaXRlbSA9PiBpdGVtLnN0YXR1cyA9PT0gdHJ1ZSk7XHJcbiAgICB9IGVsc2UgaWYgKGZpbHRlck9wdGlvbiA9PT0gJ29mZicpIHtcclxuICAgICAgbmV3QXJyID0gaXRlbXMuZmlsdGVyKGl0ZW0gPT4gaXRlbS5zdGF0dXMgPT09IGZhbHNlKTtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXdBcnIuZmlsdGVyKGl0ZW0gPT4gc2VhcmNoSXRlbShpdGVtLCBzZWFyY2hWYWx1ZSkpO1xyXG4gIH1cclxuKTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3NlbGVjdG9ycy9pbmRleC5qcyJdLCJzb3VyY2VSb290IjoiIn0=