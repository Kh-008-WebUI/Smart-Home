webpackJsonp([3],{"./node_modules/d3/build/d3.js":function(t,n,e){"use strict";var r,i,o,u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};!function(e,a){"object"===u(n)&&void 0!==t?a(n):(i=[n],r=a,void 0!==(o="function"==typeof r?r.apply(n,i):r)&&(t.exports=o))}(0,function(t){function n(t){return function(n,e){return Qs(t(n),e)}}function e(t,n){return[t,n]}function r(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=yl?10:o>=_l?5:o>=gl?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=yl?10:o>=_l?5:o>=gl?2:1)}function i(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=yl?i*=10:o>=_l?i*=5:o>=gl&&(i*=2),n<t?-i:i}function o(t){return t.length}function a(t){return"translate("+(t+.5)+",0)"}function c(t){return"translate(0,"+(t+.5)+")"}function s(t){return function(n){return+t(n)}}function l(t){var n=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(n=Math.round(n)),function(e){return+t(e)+n}}function f(){return!this.__axis}function h(t,n){function e(e){var a=null==i?n.ticks?n.ticks.apply(n,r):n.domain():i,c=null==o?n.tickFormat?n.tickFormat.apply(n,r):Rl:o,_=Math.max(u,0)+p,g=n.range(),m=+g[0]+.5,x=+g[g.length-1]+.5,b=(n.bandwidth?l:s)(n.copy()),w=e.selection?e.selection():e,M=w.selectAll(".domain").data([null]),E=w.selectAll(".tick").data(a,n).order(),S=E.exit(),T=E.enter().append("g").attr("class","tick"),k=E.select("line"),N=E.select("text");M=M.merge(M.enter().insert("path",".tick").attr("class","domain").attr("stroke","#000")),E=E.merge(T),k=k.merge(T.append("line").attr("stroke","#000").attr(v+"2",d*u)),N=N.merge(T.append("text").attr("fill","#000").attr(v,d*_).attr("dy",t===Ul?"0em":t===Il?"0.71em":"0.32em")),e!==w&&(M=M.transition(e),E=E.transition(e),k=k.transition(e),N=N.transition(e),S=S.transition(e).attr("opacity",Yl).attr("transform",function(t){return isFinite(t=b(t))?y(t):this.getAttribute("transform")}),T.attr("opacity",Yl).attr("transform",function(t){var n=this.parentNode.__axis;return y(n&&isFinite(n=n(t))?n:b(t))})),S.remove(),M.attr("d",t===Fl||t==ql?"M"+d*h+","+m+"H0.5V"+x+"H"+d*h:"M"+m+","+d*h+"V0.5H"+x+"V"+d*h),E.attr("opacity",1).attr("transform",function(t){return y(b(t))}),k.attr(v+"2",d*u),N.attr(v,d*_).text(c),w.filter(f).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===ql?"start":t===Fl?"end":"middle"),w.each(function(){this.__axis=b})}var r=[],i=null,o=null,u=6,h=6,p=3,d=t===Ul||t===Fl?-1:1,v=t===Fl||t===ql?"x":"y",y=t===Ul||t===Il?a:c;return e.scale=function(t){return arguments.length?(n=t,e):n},e.ticks=function(){return r=Ll.call(arguments),e},e.tickArguments=function(t){return arguments.length?(r=null==t?[]:Ll.call(t),e):r.slice()},e.tickValues=function(t){return arguments.length?(i=null==t?null:Ll.call(t),e):i&&i.slice()},e.tickFormat=function(t){return arguments.length?(o=t,e):o},e.tickSize=function(t){return arguments.length?(u=h=+t,e):u},e.tickSizeInner=function(t){return arguments.length?(u=+t,e):u},e.tickSizeOuter=function(t){return arguments.length?(h=+t,e):h},e.tickPadding=function(t){return arguments.length?(p=+t,e):p},e}function p(t){return h(Ul,t)}function d(t){return h(ql,t)}function v(t){return h(Il,t)}function y(t){return h(Fl,t)}function _(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new g(r)}function g(t){this._=t}function m(t,n){return t.trim().split(/^|\s+/).map(function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}})}function x(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function b(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=Bl,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}function w(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===Hl&&n.documentElement.namespaceURI===Hl?n.createElement(t):n.createElementNS(e,t)}}function M(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function E(){return new S}function S(){this._="@"+(++$l).toString(36)}function T(t,n,e){return t=k(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function k(n,e,r){return function(i){var o=t.event;t.event=i;try{n.call(this,this.__data__,e,r)}finally{t.event=o}}}function N(t){return t.trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}})}function C(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function A(t,n,e){var r=Kl.hasOwnProperty(t.type)?T:k;return function(i,o,u){var a,c=this.__on,s=r(n,o,u);if(c)for(var l=0,f=c.length;l<f;++l)if((a=c[l]).type===t.type&&a.name===t.name)return this.removeEventListener(a.type,a.listener,a.capture),this.addEventListener(a.type,a.listener=s,a.capture=e),void(a.value=n);this.addEventListener(t.type,s,e),a={type:t.type,name:t.name,value:n,listener:s,capture:e},c?c.push(a):this.__on=[a]}}function P(n,e,r,i){var o=t.event;n.sourceEvent=t.event,t.event=n;try{return e.apply(r,i)}finally{t.event=o}}function j(){}function O(){return[]}function D(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}function z(t,n,e,r,i,o){for(var u,a=0,c=n.length,s=o.length;a<s;++a)(u=n[a])?(u.__data__=o[a],r[a]=u):e[a]=new D(t,o[a]);for(;a<c;++a)(u=n[a])&&(i[a]=u)}function L(t,n,e,r,i,o,u){var a,c,s,l={},f=n.length,h=o.length,p=new Array(f);for(a=0;a<f;++a)(c=n[a])&&(p[a]=s=pf+u.call(c,c.__data__,a,n),s in l?i[a]=c:l[s]=c);for(a=0;a<h;++a)s=pf+u.call(t,o[a],a,o),(c=l[s])?(r[a]=c,c.__data__=o[a],l[s]=null):e[a]=new D(t,o[a]);for(a=0;a<f;++a)(c=n[a])&&l[p[a]]===c&&(i[a]=c)}function R(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}function U(t){return function(){this.removeAttribute(t)}}function q(t){return function(){this.removeAttributeNS(t.space,t.local)}}function I(t,n){return function(){this.setAttribute(t,n)}}function F(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function Y(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function B(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}function H(t){return function(){this.style.removeProperty(t)}}function X(t,n,e){return function(){this.style.setProperty(t,n,e)}}function V(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function W(t,n){return t.style.getPropertyValue(n)||Tf(t).getComputedStyle(t,null).getPropertyValue(n)}function $(t){return function(){delete this[t]}}function G(t,n){return function(){this[t]=n}}function Z(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function J(t){return t.trim().split(/^|\s+/)}function Q(t){return t.classList||new K(t)}function K(t){this._node=t,this._names=J(t.getAttribute("class")||"")}function tt(t,n){for(var e=Q(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function nt(t,n){for(var e=Q(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function et(t){return function(){tt(this,t)}}function rt(t){return function(){nt(this,t)}}function it(t,n){return function(){(n.apply(this,arguments)?tt:nt)(this,t)}}function ot(){this.textContent=""}function ut(t){return function(){this.textContent=t}}function at(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function ct(){this.innerHTML=""}function st(t){return function(){this.innerHTML=t}}function lt(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function ft(){this.nextSibling&&this.parentNode.appendChild(this)}function ht(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function pt(){return null}function dt(){var t=this.parentNode;t&&t.removeChild(this)}function vt(t,n,e){var r=Tf(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function yt(t,n){return function(){return vt(this,t,n)}}function _t(t,n){return function(){return vt(this,t,n.apply(this,arguments))}}function gt(t,n){this._groups=t,this._parents=n}function mt(){return new gt([[document.documentElement]],qf)}function xt(){t.event.stopImmediatePropagation()}function bt(t,n){var e=t.document.documentElement,r=If(t).on("dragstart.drag",null);n&&(r.on("click.drag",Hf,!0),setTimeout(function(){r.on("click.drag",null)},0)),"onselectstart"in e?r.on("selectstart.drag",null):(e.style.MozUserSelect=e.__noselect,delete e.__noselect)}function wt(t,n,e,r,i,o,u,a,c,s){this.target=t,this.type=n,this.subject=e,this.identifier=r,this.active=i,this.x=o,this.y=u,this.dx=a,this.dy=c,this._=s}function Mt(){return!t.event.button}function Et(){return this.parentNode}function St(n){return null==n?{x:t.event.x,y:t.event.y}:n}function Tt(){return"ontouchstart"in this}function kt(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function Nt(){}function Ct(t){var n;return t=(t+"").trim().toLowerCase(),(n=Qf.exec(t))?(n=parseInt(n[1],16),new Dt(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1)):(n=Kf.exec(t))?At(parseInt(n[1],16)):(n=th.exec(t))?new Dt(n[1],n[2],n[3],1):(n=nh.exec(t))?new Dt(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=eh.exec(t))?Pt(n[1],n[2],n[3],n[4]):(n=rh.exec(t))?Pt(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=ih.exec(t))?zt(n[1],n[2]/100,n[3]/100,1):(n=oh.exec(t))?zt(n[1],n[2]/100,n[3]/100,n[4]):uh.hasOwnProperty(t)?At(uh[t]):"transparent"===t?new Dt(NaN,NaN,NaN,0):null}function At(t){return new Dt(t>>16&255,t>>8&255,255&t,1)}function Pt(t,n,e,r){return r<=0&&(t=n=e=NaN),new Dt(t,n,e,r)}function jt(t){return t instanceof Nt||(t=Ct(t)),t?(t=t.rgb(),new Dt(t.r,t.g,t.b,t.opacity)):new Dt}function Ot(t,n,e,r){return 1===arguments.length?jt(t):new Dt(t,n,e,null==r?1:r)}function Dt(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function zt(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new Ut(t,n,e,r)}function Lt(t){if(t instanceof Ut)return new Ut(t.h,t.s,t.l,t.opacity);if(t instanceof Nt||(t=Ct(t)),!t)return new Ut;if(t instanceof Ut)return t;t=t.rgb();var n=t.r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),u=NaN,a=o-i,c=(o+i)/2;return a?(u=n===o?(e-r)/a+6*(e<r):e===o?(r-n)/a+2:(n-e)/a+4,a/=c<.5?o+i:2-o-i,u*=60):a=c>0&&c<1?0:u,new Ut(u,a,c,t.opacity)}function Rt(t,n,e,r){return 1===arguments.length?Lt(t):new Ut(t,n,e,null==r?1:r)}function Ut(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function qt(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}function It(t){if(t instanceof Yt)return new Yt(t.l,t.a,t.b,t.opacity);if(t instanceof Gt){var n=t.h*ah;return new Yt(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}t instanceof Dt||(t=jt(t));var e=Vt(t.r),r=Vt(t.g),i=Vt(t.b),o=Bt((.4124564*e+.3575761*r+.1804375*i)/sh),u=Bt((.2126729*e+.7151522*r+.072175*i)/lh);return new Yt(116*u-16,500*(o-u),200*(u-Bt((.0193339*e+.119192*r+.9503041*i)/fh)),t.opacity)}function Ft(t,n,e,r){return 1===arguments.length?It(t):new Yt(t,n,e,null==r?1:r)}function Yt(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function Bt(t){return t>vh?Math.pow(t,1/3):t/dh+hh}function Ht(t){return t>ph?t*t*t:dh*(t-hh)}function Xt(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function Vt(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function Wt(t){if(t instanceof Gt)return new Gt(t.h,t.c,t.l,t.opacity);t instanceof Yt||(t=It(t));var n=Math.atan2(t.b,t.a)*ch;return new Gt(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function $t(t,n,e,r){return 1===arguments.length?Wt(t):new Gt(t,n,e,null==r?1:r)}function Gt(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}function Zt(t){if(t instanceof Qt)return new Qt(t.h,t.s,t.l,t.opacity);t instanceof Dt||(t=jt(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(Mh*r+bh*n-wh*e)/(Mh+bh-wh),o=r-i,u=(xh*(e-i)-gh*o)/mh,a=Math.sqrt(u*u+o*o)/(xh*i*(1-i)),c=a?Math.atan2(u,o)*ch-120:NaN;return new Qt(c<0?c+360:c,a,i,t.opacity)}function Jt(t,n,e,r){return 1===arguments.length?Zt(t):new Qt(t,n,e,null==r?1:r)}function Qt(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function Kt(t,n,e,r,i){var o=t*t,u=o*t;return((1-3*t+3*o-u)*n+(4-6*o+3*u)*e+(1+3*t+3*o-3*u)*r+u*i)/6}function tn(t,n){return function(e){return t+e*n}}function nn(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}function en(t,n){var e=n-t;return e?tn(t,e>180||e<-180?e-360*Math.round(e/360):e):jh(isNaN(t)?n:t)}function rn(t){return 1==(t=+t)?on:function(n,e){return e-n?nn(n,e,t):jh(isNaN(n)?e:n)}}function on(t,n){var e=n-t;return e?tn(t,e):jh(isNaN(t)?n:t)}function un(t){return function(n){var e,r,i=n.length,o=new Array(i),u=new Array(i),a=new Array(i);for(e=0;e<i;++e)r=Ot(n[e]),o[e]=r.r||0,u[e]=r.g||0,a[e]=r.b||0;return o=t(o),u=t(u),a=t(a),r.opacity=1,function(t){return r.r=o(t),r.g=u(t),r.b=a(t),r+""}}}function an(t){return function(){return t}}function cn(t){return function(n){return t(n)+""}}function sn(t){return"none"===t?Vh:(Eh||(Eh=document.createElement("DIV"),Sh=document.documentElement,Th=document.defaultView),Eh.style.transform=t,t=Th.getComputedStyle(Sh.appendChild(Eh),null).getPropertyValue("transform"),Sh.removeChild(Eh),t=t.slice(7,-1).split(","),Wh(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}function ln(t){return null==t?Vh:(kh||(kh=document.createElementNS("http://www.w3.org/2000/svg","g")),kh.setAttribute("transform",t),(t=kh.transform.baseVal.consolidate())?(t=t.matrix,Wh(t.a,t.b,t.c,t.d,t.e,t.f)):Vh)}function fn(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}function o(t,r,i,o,u,a){if(t!==i||r!==o){var c=u.push("translate(",null,n,null,e);a.push({i:c-4,x:Uh(t,i)},{i:c-2,x:Uh(r,o)})}else(i||o)&&u.push("translate("+i+n+o+e)}function u(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:Uh(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}function a(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:Uh(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}function c(t,n,e,r,o,u){if(t!==e||n!==r){var a=o.push(i(o)+"scale(",null,",",null,")");u.push({i:a-4,x:Uh(t,e)},{i:a-2,x:Uh(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}return function(n,e){var r=[],i=[];return n=t(n),e=t(e),o(n.translateX,n.translateY,e.translateX,e.translateY,r,i),u(n.rotate,e.rotate,r,i),a(n.skewX,e.skewX,r,i),c(n.scaleX,n.scaleY,e.scaleX,e.scaleY,r,i),n=e=null,function(t){for(var n,e=-1,o=i.length;++e<o;)r[(n=i[e]).i]=n.x(t);return r.join("")}}}function hn(t){return((t=Math.exp(t))+1/t)/2}function pn(t){return((t=Math.exp(t))-1/t)/2}function dn(t){return((t=Math.exp(2*t))-1)/(t+1)}function vn(t){return function(n,e){var r=t((n=Rt(n)).h,(e=Rt(e)).h),i=on(n.s,e.s),o=on(n.l,e.l),u=on(n.opacity,e.opacity);return function(t){return n.h=r(t),n.s=i(t),n.l=o(t),n.opacity=u(t),n+""}}}function yn(t,n){var e=on((t=Ft(t)).l,(n=Ft(n)).l),r=on(t.a,n.a),i=on(t.b,n.b),o=on(t.opacity,n.opacity);return function(n){return t.l=e(n),t.a=r(n),t.b=i(n),t.opacity=o(n),t+""}}function _n(t){return function(n,e){var r=t((n=$t(n)).h,(e=$t(e)).h),i=on(n.c,e.c),o=on(n.l,e.l),u=on(n.opacity,e.opacity);return function(t){return n.h=r(t),n.c=i(t),n.l=o(t),n.opacity=u(t),n+""}}}function gn(t){return function n(e){function r(n,r){var i=t((n=Jt(n)).h,(r=Jt(r)).h),o=on(n.s,r.s),u=on(n.l,r.l),a=on(n.opacity,r.opacity);return function(t){return n.h=i(t),n.s=o(t),n.l=u(Math.pow(t,e)),n.opacity=a(t),n+""}}return e=+e,r.gamma=n,r}(1)}function mn(){return lp||(pp(xn),lp=hp.now()+fp)}function xn(){lp=0}function bn(){this._call=this._time=this._next=null}function wn(t,n,e){var r=new bn;return r.restart(t,n,e),r}function Mn(){mn(),++op;for(var t,n=Nh;n;)(t=lp-n._time)>=0&&n._call.call(null,t),n=n._next;--op}function En(){lp=(sp=hp.now())+fp,op=up=0;try{Mn()}finally{op=0,Tn(),lp=0}}function Sn(){var t=hp.now(),n=t-sp;n>cp&&(fp-=n,sp=t)}function Tn(){for(var t,n,e=Nh,r=1/0;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:Nh=n);Ch=t,kn(r)}function kn(t){if(!op){up&&(up=clearTimeout(up));var n=t-lp;n>24?(t<1/0&&(up=setTimeout(En,n)),ap&&(ap=clearInterval(ap))):(ap||(sp=lp,ap=setInterval(Sn,cp)),op=1,pp(En))}}function Nn(t,n){var e=t.__transition;if(!e||!(e=e[n])||e.state>gp)throw new Error("too late");return e}function Cn(t,n){var e=t.__transition;if(!e||!(e=e[n])||e.state>xp)throw new Error("too late");return e}function An(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("too late");return e}function Pn(t,n,e){function r(t){e.state=mp,e.timer.restart(i,e.delay,e.time),e.delay<=t&&i(t-e.delay)}function i(r){var s,l,f,h;if(e.state!==mp)return u();for(s in c)if(h=c[s],h.name===e.name){if(h.state===bp)return dp(i);h.state===wp?(h.state=Ep,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete c[s]):+s<n&&(h.state=Ep,h.timer.stop(),delete c[s])}if(dp(function(){e.state===bp&&(e.state=wp,e.timer.restart(o,e.delay,e.time),o(r))}),e.state=xp,e.on.call("start",t,t.__data__,e.index,e.group),e.state===xp){for(e.state=bp,a=new Array(f=e.tween.length),s=0,l=-1;s<f;++s)(h=e.tween[s].value.call(t,t.__data__,e.index,e.group))&&(a[++l]=h);a.length=l+1}}function o(n){for(var r=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(u),e.state=Mp,1),i=-1,o=a.length;++i<o;)a[i].call(null,r);e.state===Mp&&(e.on.call("end",t,t.__data__,e.index,e.group),u())}function u(){e.state=Ep,e.timer.stop(),delete c[n];for(var r in c)return;delete t.__transition}var a,c=t.__transition;c[n]=e,e.timer=wn(r,0,e.time)}function jn(t,n){var e,r;return function(){var i=Cn(this,t),o=i.tween;if(o!==e){r=e=o;for(var u=0,a=r.length;u<a;++u)if(r[u].name===n){r=r.slice(),r.splice(u,1);break}}i.tween=r}}function On(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=Cn(this,t),u=o.tween;if(u!==r){i=(r=u).slice();for(var a={name:n,value:e},c=0,s=i.length;c<s;++c)if(i[c].name===n){i[c]=a;break}c===s&&i.push(a)}o.tween=i}}function Dn(t,n,e){var r=t._id;return t.each(function(){var t=Cn(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)}),function(t){return An(t,r).value[n]}}function zn(t){return function(){this.removeAttribute(t)}}function Ln(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Rn(t,n,e){var r,i;return function(){var o=this.getAttribute(t);return o===e?null:o===r?i:i=n(r=o,e)}}function Un(t,n,e){var r,i;return function(){var o=this.getAttributeNS(t.space,t.local);return o===e?null:o===r?i:i=n(r=o,e)}}function qn(t,n,e){var r,i,o;return function(){var u,a=e(this);return null==a?void this.removeAttribute(t):(u=this.getAttribute(t),u===a?null:u===r&&a===i?o:o=n(r=u,i=a))}}function In(t,n,e){var r,i,o;return function(){var u,a=e(this);return null==a?void this.removeAttributeNS(t.space,t.local):(u=this.getAttributeNS(t.space,t.local),u===a?null:u===r&&a===i?o:o=n(r=u,i=a))}}function Fn(t,n){function e(){var e=this,r=n.apply(e,arguments);return r&&function(n){e.setAttributeNS(t.space,t.local,r(n))}}return e._value=n,e}function Yn(t,n){function e(){var e=this,r=n.apply(e,arguments);return r&&function(n){e.setAttribute(t,r(n))}}return e._value=n,e}function Bn(t,n){return function(){Nn(this,t).delay=+n.apply(this,arguments)}}function Hn(t,n){return n=+n,function(){Nn(this,t).delay=n}}function Xn(t,n){return function(){Cn(this,t).duration=+n.apply(this,arguments)}}function Vn(t,n){return n=+n,function(){Cn(this,t).duration=n}}function Wn(t,n){if("function"!=typeof n)throw new Error;return function(){Cn(this,t).ease=n}}function $n(t){return(t+"").trim().split(/^|\s+/).every(function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t})}function Gn(t,n,e){var r,i,o=$n(n)?Nn:Cn;return function(){var u=o(this,t),a=u.on;a!==r&&(i=(r=a).copy()).on(n,e),u.on=i}}function Zn(t){return function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}}function Jn(t,n){var e,r,i;return function(){var o=W(this,t),u=(this.style.removeProperty(t),W(this,t));return o===u?null:o===e&&u===r?i:i=n(e=o,r=u)}}function Qn(t){return function(){this.style.removeProperty(t)}}function Kn(t,n,e){var r,i;return function(){var o=W(this,t);return o===e?null:o===r?i:i=n(r=o,e)}}function te(t,n,e){var r,i,o;return function(){var u=W(this,t),a=e(this);return null==a&&(this.style.removeProperty(t),a=W(this,t)),u===a?null:u===r&&a===i?o:o=n(r=u,i=a)}}function ne(t,n,e){function r(){var r=this,i=n.apply(r,arguments);return i&&function(n){r.style.setProperty(t,i(n),e)}}return r._value=n,r}function ee(t){return function(){this.textContent=t}}function re(t){return function(){var n=t(this);this.textContent=null==n?"":n}}function ie(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function oe(t){return mt().transition(t)}function ue(){return++Wp}function ae(t){return+t}function ce(t){return t*t}function se(t){return t*(2-t)}function le(t){return((t*=2)<=1?t*t:--t*(2-t)+1)/2}function fe(t){return t*t*t}function he(t){return--t*t*t+1}function pe(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}function de(t){return 1-Math.cos(t*Kp)}function ve(t){return Math.sin(t*Kp)}function ye(t){return(1-Math.cos(Qp*t))/2}function _e(t){return Math.pow(2,10*t-10)}function ge(t){return 1-Math.pow(2,-10*t)}function me(t){return((t*=2)<=1?Math.pow(2,10*t-10):2-Math.pow(2,10-10*t))/2}function xe(t){return 1-Math.sqrt(1-t*t)}function be(t){return Math.sqrt(1- --t*t)}function we(t){return((t*=2)<=1?1-Math.sqrt(1-t*t):Math.sqrt(1-(t-=2)*t)+1)/2}function Me(t){return 1-Ee(1-t)}function Ee(t){return(t=+t)<td?sd*t*t:t<ed?sd*(t-=nd)*t+rd:t<od?sd*(t-=id)*t+ud:sd*(t-=ad)*t+cd}function Se(t){return((t*=2)<=1?1-Ee(1-t):Ee(t-1)+1)/2}function Te(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return _d.time=mn(),_d;return e}function ke(){t.event.stopImmediatePropagation()}function Ne(t){return{type:t}}function Ce(){return!t.event.button}function Ae(){var t=this.ownerSVGElement||this;return[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function Pe(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function je(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function Oe(t){var n=t.__brush;return n?n.dim.output(n.selection):null}function De(){return Le(Nd)}function ze(){return Le(Cd)}function Le(n){function e(t){var e=t.property("__brush",a).selectAll(".overlay").data([Ne("overlay")]);e.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",Pd.overlay).merge(e).each(function(){var t=Pe(this).extent;If(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])}),t.selectAll(".selection").data([Ne("selection")]).enter().append("rect").attr("class","selection").attr("cursor",Pd.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var i=t.selectAll(".handle").data(n.handles,function(t){return t.type});i.exit().remove(),i.enter().append("rect").attr("class",function(t){return"handle handle--"+t.type}).attr("cursor",function(t){return Pd[t.type]}),t.each(r).attr("fill","none").attr("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush touchstart.brush",u)}function r(){var t=If(this),n=Pe(this).selection;n?(t.selectAll(".selection").style("display",null).attr("x",n[0][0]).attr("y",n[0][1]).attr("width",n[1][0]-n[0][0]).attr("height",n[1][1]-n[0][1]),t.selectAll(".handle").style("display",null).attr("x",function(t){return"e"===t.type[t.type.length-1]?n[1][0]-h/2:n[0][0]-h/2}).attr("y",function(t){return"s"===t.type[0]?n[1][1]-h/2:n[0][1]-h/2}).attr("width",function(t){return"n"===t.type||"s"===t.type?n[1][0]-n[0][0]+h:h}).attr("height",function(t){return"e"===t.type||"w"===t.type?n[1][1]-n[0][1]+h:h})):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function i(t,n){return t.__brush.emitter||new o(t,n)}function o(t,n){this.that=t,this.args=n,this.state=t.__brush,this.active=0}function u(){function e(){var t=rf(E);!L||w||M||(Math.abs(t[0]-U[0])>Math.abs(t[1]-U[1])?M=!0:w=!0),U=t,b=!0,Md(),o()}function o(){var t;switch(m=U[0]-R[0],x=U[1]-R[1],T){case Sd:case Ed:k&&(m=Math.max(j-f,Math.min(D-v,m)),h=f+m,y=v+m),N&&(x=Math.max(O-p,Math.min(z-_,x)),d=p+x,g=_+x);break;case Td:k<0?(m=Math.max(j-f,Math.min(D-f,m)),h=f+m,y=v):k>0&&(m=Math.max(j-v,Math.min(D-v,m)),h=f,y=v+m),N<0?(x=Math.max(O-p,Math.min(z-p,x)),d=p+x,g=_):N>0&&(x=Math.max(O-_,Math.min(z-_,x)),d=p,g=_+x);break;case kd:k&&(h=Math.max(j,Math.min(D,f-m*k)),y=Math.max(j,Math.min(D,v+m*k))),N&&(d=Math.max(O,Math.min(z,p-x*N)),g=Math.max(O,Math.min(z,_+x*N)))}y<h&&(k*=-1,t=f,f=v,v=t,t=h,h=y,y=t,S in jd&&F.attr("cursor",Pd[S=jd[S]])),g<d&&(N*=-1,t=p,p=_,_=t,t=d,d=g,g=t,S in Od&&F.attr("cursor",Pd[S=Od[S]])),C.selection&&(P=C.selection),w&&(h=P[0][0],y=P[1][0]),M&&(d=P[0][1],g=P[1][1]),P[0][0]===h&&P[0][1]===d&&P[1][0]===y&&P[1][1]===g||(C.selection=[[h,d],[y,g]],r.call(E),q.brush())}function u(){if(ke(),t.event.touches){if(t.event.touches.length)return;c&&clearTimeout(c),c=setTimeout(function(){c=null},500),I.on("touchmove.brush touchend.brush touchcancel.brush",null)}else bt(t.event.view,b),Y.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);I.attr("pointer-events","all"),F.attr("cursor",Pd.overlay),C.selection&&(P=C.selection),je(P)&&(C.selection=null,r.call(E)),q.end()}function a(){switch(t.event.keyCode){case 16:L=k&&N;break;case 18:T===Td&&(k&&(v=y-m*k,f=h+m*k),N&&(_=g-x*N,p=d+x*N),T=kd,o());break;case 32:T!==Td&&T!==kd||(k<0?v=y-m:k>0&&(f=h-m),N<0?_=g-x:N>0&&(p=d-x),T=Sd,F.attr("cursor",Pd.selection),o());break;default:return}Md()}function s(){switch(t.event.keyCode){case 16:L&&(w=M=L=!1,o());break;case 18:T===kd&&(k<0?v=y:k>0&&(f=h),N<0?_=g:N>0&&(p=d),T=Td,o());break;case 32:T===Sd&&(t.event.altKey?(k&&(v=y-m*k,f=h+m*k),N&&(_=g-x*N,p=d+x*N),T=kd):(k<0?v=y:k>0&&(f=h),N<0?_=g:N>0&&(p=d),T=Td),F.attr("cursor",Pd[S]),o());break;default:return}Md()}if(t.event.touches){if(t.event.changedTouches.length<t.event.touches.length)return Md()}else if(c)return;if(l.apply(this,arguments)){var f,h,p,d,v,y,_,g,m,x,b,w,M,E=this,S=t.event.target.__data__.type,T="selection"===(t.event.metaKey?S="overlay":S)?Ed:t.event.altKey?kd:Td,k=n===Cd?null:Dd[S],N=n===Nd?null:zd[S],C=Pe(E),A=C.extent,P=C.selection,j=A[0][0],O=A[0][1],D=A[1][0],z=A[1][1],L=k&&N&&t.event.shiftKey,R=rf(E),U=R,q=i(E,arguments).beforestart();"overlay"===S?C.selection=P=[[f=n===Cd?j:R[0],p=n===Nd?O:R[1]],[v=n===Cd?D:f,_=n===Nd?z:p]]:(f=P[0][0],p=P[0][1],v=P[1][0],_=P[1][1]),h=f,d=p,y=v,g=_;var I=If(E).attr("pointer-events","none"),F=I.selectAll(".overlay").attr("cursor",Pd[S]);if(t.event.touches)I.on("touchmove.brush",e,!0).on("touchend.brush touchcancel.brush",u,!0);else{var Y=If(t.event.view).on("keydown.brush",a,!0).on("keyup.brush",s,!0).on("mousemove.brush",e,!0).on("mouseup.brush",u,!0);Xf(t.event.view)}ke(),Tp(E),r.call(E),q.start()}}function a(){var t=this.__brush||{selection:null};return t.extent=s.apply(this,arguments),t.dim=n,t}var c,s=Ae,l=Ce,f=_(e,"start","brush","end"),h=6;return e.move=function(t,e){t.selection?t.on("start.brush",function(){i(this,arguments).beforestart().start()}).on("interrupt.brush end.brush",function(){i(this,arguments).end()}).tween("brush",function(){function t(t){u.selection=1===t&&je(s)?null:l(t),r.call(o),a.brush()}var o=this,u=o.__brush,a=i(o,arguments),c=u.selection,s=n.input("function"==typeof e?e.apply(this,arguments):e,u.extent),l=Bh(c,s);return c&&s?t:t(1)}):t.each(function(){var t=this,o=arguments,u=t.__brush,a=n.input("function"==typeof e?e.apply(t,o):e,u.extent),c=i(t,o).beforestart();Tp(t),u.selection=null==a||je(a)?null:a,r.call(t),c.start().brush().end()})},o.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting&&(this.starting=!1,this.emit("start")),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(t){P(new wd(e,t,n.output(this.state.selection)),f.apply,f,[t,this.that,this.args])}},e.extent=function(t){return arguments.length?(s="function"==typeof t?t:bd([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),e):s},e.filter=function(t){return arguments.length?(l="function"==typeof t?t:bd(!!t),e):l},e.handleSize=function(t){return arguments.length?(h=+t,e):h},e.on=function(){var t=f.on.apply(f,arguments);return t===f?e:t},e}function Re(t){return function(n,e){return t(n.source.value+n.target.value,e.source.value+e.target.value)}}function Ue(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function qe(){return new Ue}function Ie(t){return t.source}function Fe(t){return t.target}function Ye(t){return t.radius}function Be(t){return t.startAngle}function He(t){return t.endAngle}function Xe(){}function Ve(t,n){var e=new Xe;if(t instanceof Xe)t.each(function(t,n){e.set(n,t)});else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==n)for(;++i<o;)e.set(i,t[i]);else for(;++i<o;)e.set(n(r=t[i],i,t),r)}else if(t)for(var u in t)e.set(u,t[u]);return e}function We(){return{}}function $e(t,n,e){t[n]=e}function Ge(){return Ve()}function Ze(t,n,e){t.set(n,e)}function Je(){}function Qe(t,n){var e=new Je;if(t instanceof Je)t.each(function(t){e.add(t)});else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}function Ke(t){return new Function("d","return {"+t.map(function(t,n){return JSON.stringify(t)+": d["+n+"]"}).join(",")+"}")}function tr(t,n){var e=Ke(t);return function(r,i){return n(e(r),i,t)}}function nr(t){var n=Object.create(null),e=[];return t.forEach(function(t){for(var r in t)r in n||e.push(n[r]=r)}),e}function er(t,n,e,r){if(isNaN(n)||isNaN(e))return t;var i,o,u,a,c,s,l,f,h,p=t._root,d={data:r},v=t._x0,y=t._y0,_=t._x1,g=t._y1;if(!p)return t._root=d,t;for(;p.length;)if((s=n>=(o=(v+_)/2))?v=o:_=o,(l=e>=(u=(y+g)/2))?y=u:g=u,i=p,!(p=p[f=l<<1|s]))return i[f]=d,t;if(a=+t._x.call(null,p.data),c=+t._y.call(null,p.data),n===a&&e===c)return d.next=p,i?i[f]=d:t._root=d,t;do{i=i?i[f]=new Array(4):t._root=new Array(4),(s=n>=(o=(v+_)/2))?v=o:_=o,(l=e>=(u=(y+g)/2))?y=u:g=u}while((f=l<<1|s)==(h=(c>=u)<<1|a>=o));return i[h]=p,i[f]=d,t}function rr(t){var n,e,r,i,o=t.length,u=new Array(o),a=new Array(o),c=1/0,s=1/0,l=-1/0,f=-1/0;for(e=0;e<o;++e)isNaN(r=+this._x.call(null,n=t[e]))||isNaN(i=+this._y.call(null,n))||(u[e]=r,a[e]=i,r<c&&(c=r),r>l&&(l=r),i<s&&(s=i),i>f&&(f=i));for(l<c&&(c=this._x0,l=this._x1),f<s&&(s=this._y0,f=this._y1),this.cover(c,s).cover(l,f),e=0;e<o;++e)er(this,u[e],a[e],t[e]);return this}function ir(t){for(var n=0,e=t.length;n<e;++n)this.remove(t[n]);return this}function or(t){return t[0]}function ur(t){return t[1]}function ar(t,n,e){var r=new cr(null==n?or:n,null==e?ur:e,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function cr(t,n,e,r,i,o){this._x=t,this._y=n,this._x0=e,this._y0=r,this._x1=i,this._y1=o,this._root=void 0}function sr(t){for(var n={data:t.data},e=n;t=t.next;)e=e.next={data:t.data};return n}function lr(t){return t.x+t.vx}function fr(t){return t.y+t.vy}function hr(t){return t.index}function pr(t,n){var e=t.get(n);if(!e)throw new Error("missing: "+n);return e}function dr(t){return t.x}function vr(t){return t.y}function yr(t){return new _r(t)}function _r(t){if(!(n=Vv.exec(t)))throw new Error("invalid format: "+t);var n,e=n[1]||" ",r=n[2]||">",i=n[3]||"-",o=n[4]||"",u=!!n[5],a=n[6]&&+n[6],c=!!n[7],s=n[8]&&+n[8].slice(1),l=n[9]||"";"n"===l?(c=!0,l="g"):Xv[l]||(l=""),(u||"0"===e&&"="===r)&&(u=!0,e="0",r="="),this.fill=e,this.align=r,this.sign=i,this.symbol=o,this.zero=u,this.width=a,this.comma=c,this.precision=s,this.type=l}function gr(n){return Wv=Zv(n),t.format=Wv.format,t.formatPrefix=Wv.formatPrefix,Wv}function mr(){this.reset()}function xr(t,n,e){var r=t.s=n+e,i=r-n,o=r-i;t.t=n-o+(e-i)}function br(t){return t>1?0:t<-1?Dy:Math.acos(t)}function wr(t){return t>1?zy:t<-1?-zy:Math.asin(t)}function Mr(t){return(t=$y(t/2))*t}function Er(){}function Sr(t,n){t&&Ky.hasOwnProperty(t.type)&&Ky[t.type](t,n)}function Tr(t,n,e){var r,i=-1,o=t.length-e;for(n.lineStart();++i<o;)r=t[i],n.point(r[0],r[1],r[2]);n.lineEnd()}function kr(t,n){var e=-1,r=t.length;for(n.polygonStart();++e<r;)Tr(t[e],n,1);n.polygonEnd()}function Nr(){r_.point=Ar}function Cr(){Pr(ny,ey)}function Ar(t,n){r_.point=Pr,ny=t,ey=n,t*=qy,n*=qy,ry=t,iy=By(n=n/2+Ly),oy=$y(n)}function Pr(t,n){t*=qy,n*=qy,n=n/2+Ly;var e=t-ry,r=e>=0?1:-1,i=r*e,o=By(n),u=$y(n),a=oy*u,c=iy*o+a*By(i),s=a*r*$y(i);n_.add(Yy(s,c)),ry=t,iy=o,oy=u}function jr(t){return[Yy(t[1],t[0]),wr(t[2])]}function Or(t){var n=t[0],e=t[1],r=By(e);return[r*By(n),r*$y(n),$y(e)]}function Dr(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function zr(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function Lr(t,n){t[0]+=n[0],t[1]+=n[1],t[2]+=n[2]}function Rr(t,n){return[t[0]*n,t[1]*n,t[2]*n]}function Ur(t){var n=Zy(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}function qr(t,n){dy.push(vy=[uy=t,cy=t]),n<ay&&(ay=n),n>sy&&(sy=n)}function Ir(t,n){var e=Or([t*qy,n*qy]);if(py){var r=zr(py,e),i=[r[1],-r[0],0],o=zr(i,r);Ur(o),o=jr(o);var u,a=t-ly,c=a>0?1:-1,s=o[0]*Uy*c,l=Iy(a)>180;l^(c*ly<s&&s<c*t)?(u=o[1]*Uy)>sy&&(sy=u):(s=(s+360)%360-180,l^(c*ly<s&&s<c*t)?(u=-o[1]*Uy)<ay&&(ay=u):(n<ay&&(ay=n),n>sy&&(sy=n))),l?t<ly?Vr(uy,t)>Vr(uy,cy)&&(cy=t):Vr(t,cy)>Vr(uy,cy)&&(uy=t):cy>=uy?(t<uy&&(uy=t),t>cy&&(cy=t)):t>ly?Vr(uy,t)>Vr(uy,cy)&&(cy=t):Vr(t,cy)>Vr(uy,cy)&&(uy=t)}else dy.push(vy=[uy=t,cy=t]);n<ay&&(ay=n),n>sy&&(sy=n),py=e,ly=t}function Fr(){u_.point=Ir}function Yr(){vy[0]=uy,vy[1]=cy,u_.point=qr,py=null}function Br(t,n){if(py){var e=t-ly;o_.add(Iy(e)>180?e+(e>0?360:-360):e)}else fy=t,hy=n;r_.point(t,n),Ir(t,n)}function Hr(){r_.lineStart()}function Xr(){Br(fy,hy),r_.lineEnd(),Iy(o_)>Oy&&(uy=-(cy=180)),vy[0]=uy,vy[1]=cy,py=null}function Vr(t,n){return(n-=t)<0?n+360:n}function Wr(t,n){return t[0]-n[0]}function $r(t,n){return t[0]<=t[1]?t[0]<=n&&n<=t[1]:n<t[0]||t[1]<n}function Gr(t,n){t*=qy,n*=qy;var e=By(n);Zr(e*By(t),e*$y(t),$y(n))}function Zr(t,n,e){++yy,gy+=(t-gy)/yy,my+=(n-my)/yy,xy+=(e-xy)/yy}function Jr(){c_.point=Qr}function Qr(t,n){t*=qy,n*=qy;var e=By(n);Cy=e*By(t),Ay=e*$y(t),Py=$y(n),c_.point=Kr,Zr(Cy,Ay,Py)}function Kr(t,n){t*=qy,n*=qy;var e=By(n),r=e*By(t),i=e*$y(t),o=$y(n),u=Yy(Zy((u=Ay*o-Py*i)*u+(u=Py*r-Cy*o)*u+(u=Cy*i-Ay*r)*u),Cy*r+Ay*i+Py*o);_y+=u,by+=u*(Cy+(Cy=r)),wy+=u*(Ay+(Ay=i)),My+=u*(Py+(Py=o)),Zr(Cy,Ay,Py)}function ti(){c_.point=Gr}function ni(){c_.point=ri}function ei(){ii(ky,Ny),c_.point=Gr}function ri(t,n){ky=t,Ny=n,t*=qy,n*=qy,c_.point=ii;var e=By(n);Cy=e*By(t),Ay=e*$y(t),Py=$y(n),Zr(Cy,Ay,Py)}function ii(t,n){t*=qy,n*=qy;var e=By(n),r=e*By(t),i=e*$y(t),o=$y(n),u=Ay*o-Py*i,a=Py*r-Cy*o,c=Cy*i-Ay*r,s=Zy(u*u+a*a+c*c),l=wr(s),f=s&&-l/s;Ey+=f*u,Sy+=f*a,Ty+=f*c,_y+=l,by+=l*(Cy+(Cy=r)),wy+=l*(Ay+(Ay=i)),My+=l*(Py+(Py=o)),Zr(Cy,Ay,Py)}function oi(t,n){return[t>Dy?t-Ry:t<-Dy?t+Ry:t,n]}function ui(t,n,e){return(t%=Ry)?n||e?f_(ci(t),si(n,e)):ci(t):n||e?si(n,e):oi}function ai(t){return function(n,e){return n+=t,[n>Dy?n-Ry:n<-Dy?n+Ry:n,e]}}function ci(t){var n=ai(t);return n.invert=ai(-t),n}function si(t,n){function e(t,n){var e=By(n),a=By(t)*e,c=$y(t)*e,s=$y(n),l=s*r+a*i;return[Yy(c*o-l*u,a*r-s*i),wr(l*o+c*u)]}var r=By(t),i=$y(t),o=By(n),u=$y(n);return e.invert=function(t,n){var e=By(n),a=By(t)*e,c=$y(t)*e,s=$y(n),l=s*o-c*u;return[Yy(c*o+s*u,a*r+l*i),wr(l*r-a*i)]},e}function li(t,n,e,r,i,o){if(e){var u=By(n),a=$y(n),c=r*e;null==i?(i=n+r*Ry,o=n-c/2):(i=fi(u,i),o=fi(u,o),(r>0?i<o:i>o)&&(i+=r*Ry));for(var s,l=i;r>0?l>o:l<o;l-=c)s=jr([u,-a*By(l),-a*$y(l)]),t.point(s[0],s[1])}}function fi(t,n){n=Or(n),n[0]-=t,Ur(n);var e=br(-n[1]);return((-n[2]<0?-e:e)+Ry-Oy)%Ry}function hi(t,n,e,r){this.x=t,this.z=n,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}function pi(t){if(n=t.length){for(var n,e,r=0,i=t[0];++r<n;)i.n=e=t[r],e.p=i,i=e;i.n=e=t[0],e.p=i}}function di(t,n,e,r){function i(i,o){return t<=i&&i<=e&&n<=o&&o<=r}function o(i,o,a,s){var l=0,f=0;if(null==i||(l=u(i,a))!==(f=u(o,a))||c(i,o)<0^a>0)do{s.point(0===l||3===l?t:e,l>1?r:n)}while((l=(l+a+4)%4)!==f);else s.point(o[0],o[1])}function u(r,i){return Iy(r[0]-t)<Oy?i>0?0:3:Iy(r[0]-e)<Oy?i>0?2:1:Iy(r[1]-n)<Oy?i>0?1:0:i>0?3:2}function a(t,n){return c(t.x,n.x)}function c(t,n){var e=u(t,1),r=u(n,1);return e!==r?e-r:0===e?n[1]-t[1]:1===e?t[0]-n[0]:2===e?t[1]-n[1]:n[0]-t[0]}return function(u){function c(t,n){i(t,n)&&T.point(t,n)}function s(){for(var n=0,e=0,i=y.length;e<i;++e)for(var o,u,a=y[e],c=1,s=a.length,l=a[0],f=l[0],h=l[1];c<s;++c)o=f,u=h,l=a[c],f=l[0],h=l[1],u<=r?h>r&&(f-o)*(r-u)>(h-u)*(t-o)&&++n:h<=r&&(f-o)*(r-u)<(h-u)*(t-o)&&--n;return n}function l(){T=k,v=[],y=[],S=!0}function f(){var t=s(),n=S&&t,e=(v=Nl(v)).length;(n||e)&&(u.polygonStart(),n&&(u.lineStart(),o(null,null,1,u),u.lineEnd()),e&&N_(v,a,t,o,u),u.polygonEnd()),T=u,v=y=_=null}function h(){N.point=d,y&&y.push(_=[]),E=!0,M=!1,b=w=NaN}function p(){v&&(d(g,m),x&&M&&k.rejoin(),v.push(k.result())),N.point=c,M&&T.lineEnd()}function d(o,u){var a=i(o,u);if(y&&_.push([o,u]),E)g=o,m=u,x=a,E=!1,a&&(T.lineStart(),T.point(o,u));else if(a&&M)T.point(o,u);else{var c=[b=Math.max(A_,Math.min(C_,b)),w=Math.max(A_,Math.min(C_,w))],s=[o=Math.max(A_,Math.min(C_,o)),u=Math.max(A_,Math.min(C_,u))];T_(c,s,t,n,e,r)?(M||(T.lineStart(),T.point(c[0],c[1])),T.point(s[0],s[1]),a||T.lineEnd(),S=!1):a&&(T.lineStart(),T.point(o,u),S=!1)}b=o,w=u,M=a}var v,y,_,g,m,x,b,w,M,E,S,T=u,k=S_(),N={point:c,lineStart:h,lineEnd:p,polygonStart:l,polygonEnd:f};return N}}function vi(){z_.point=_i,z_.lineEnd=yi}function yi(){z_.point=z_.lineEnd=Er}function _i(t,n){t*=qy,n*=qy,h_=t,p_=$y(n),d_=By(n),z_.point=gi}function gi(t,n){t*=qy,n*=qy;var e=$y(n),r=By(n),i=Iy(t-h_),o=By(i),u=$y(i),a=r*u,c=d_*e-p_*r*o,s=p_*e+d_*r*o;D_.add(Yy(Zy(a*a+c*c),s)),h_=t,p_=e,d_=r}function mi(t,n){return!(!t||!F_.hasOwnProperty(t.type))&&F_[t.type](t,n)}function xi(t,n){return 0===q_(t,n)}function bi(t,n){var e=q_(t[0],t[1]);return q_(t[0],n)+q_(n,t[1])<=e+Oy}function wi(t,n){return!!O_(t.map(Mi),Ei(n))}function Mi(t){return t=t.map(Ei),t.pop(),t}function Ei(t){return[t[0]*qy,t[1]*qy]}function Si(t,n,e){var r=vl(t,n-Oy,e).concat(n);return function(t){return r.map(function(n){return[t,n]})}}function Ti(t,n,e){var r=vl(t,n-Oy,e).concat(n);return function(t){return r.map(function(n){return[n,t]})}}function ki(){function t(){return{type:"MultiLineString",coordinates:n()}}function n(){return vl(Hy(o/y)*y,i,y).map(h).concat(vl(Hy(s/_)*_,c,_).map(p)).concat(vl(Hy(r/d)*d,e,d).filter(function(t){return Iy(t%y)>Oy}).map(l)).concat(vl(Hy(a/v)*v,u,v).filter(function(t){return Iy(t%_)>Oy}).map(f))}var e,r,i,o,u,a,c,s,l,f,h,p,d=10,v=d,y=90,_=360,g=2.5;return t.lines=function(){return n().map(function(t){return{type:"LineString",coordinates:t}})},t.outline=function(){return{type:"Polygon",coordinates:[h(o).concat(p(c).slice(1),h(i).reverse().slice(1),p(s).reverse().slice(1))]}},t.extent=function(n){return arguments.length?t.extentMajor(n).extentMinor(n):t.extentMinor()},t.extentMajor=function(n){return arguments.length?(o=+n[0][0],i=+n[1][0],s=+n[0][1],c=+n[1][1],o>i&&(n=o,o=i,i=n),s>c&&(n=s,s=c,c=n),t.precision(g)):[[o,s],[i,c]]},t.extentMinor=function(n){return arguments.length?(r=+n[0][0],e=+n[1][0],a=+n[0][1],u=+n[1][1],r>e&&(n=r,r=e,e=n),a>u&&(n=a,a=u,u=n),t.precision(g)):[[r,a],[e,u]]},t.step=function(n){return arguments.length?t.stepMajor(n).stepMinor(n):t.stepMinor()},t.stepMajor=function(n){return arguments.length?(y=+n[0],_=+n[1],t):[y,_]},t.stepMinor=function(n){return arguments.length?(d=+n[0],v=+n[1],t):[d,v]},t.precision=function(n){return arguments.length?(g=+n,l=Si(a,u,90),f=Ti(r,e,g),h=Si(s,c,90),p=Ti(o,i,g),t):g},t.extentMajor([[-180,-90+Oy],[180,90-Oy]]).extentMinor([[-180,-80-Oy],[180,80+Oy]])}function Ni(){return ki()()}function Ci(){W_.point=Ai}function Ai(t,n){W_.point=Pi,v_=__=t,y_=g_=n}function Pi(t,n){V_.add(g_*t-__*n),__=t,g_=n}function ji(){Pi(v_,y_)}function Oi(t,n){t<$_&&($_=t),t>Z_&&(Z_=t),n<G_&&(G_=n),n>J_&&(J_=n)}function Di(t,n){K_+=t,tg+=n,++ng}function zi(){cg.point=Li}function Li(t,n){cg.point=Ri,Di(b_=t,w_=n)}function Ri(t,n){var e=t-b_,r=n-w_,i=Zy(e*e+r*r);eg+=i*(b_+t)/2,rg+=i*(w_+n)/2,ig+=i,Di(b_=t,w_=n)}function Ui(){cg.point=Di}function qi(){cg.point=Fi}function Ii(){Yi(m_,x_)}function Fi(t,n){cg.point=Yi,Di(m_=b_=t,x_=w_=n)}function Yi(t,n){var e=t-b_,r=n-w_,i=Zy(e*e+r*r);eg+=i*(b_+t)/2,rg+=i*(w_+n)/2,ig+=i,i=w_*t-b_*n,og+=i*(b_+t),ug+=i*(w_+n),ag+=3*i,Di(b_=t,w_=n)}function Bi(t){this._context=t}function Hi(t,n){vg.point=Xi,lg=hg=t,fg=pg=n}function Xi(t,n){hg-=t,pg-=n,dg.add(Zy(hg*hg+pg*pg)),hg=t,pg=n}function Vi(){this._string=[]}function Wi(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}function $i(t){return t.length>1}function Gi(t,n){return((t=t.x)[0]<0?t[1]-zy-Oy:zy-t[1])-((n=n.x)[0]<0?n[1]-zy-Oy:zy-n[1])}function Zi(t){var n,e=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(o,u){var a=o>0?Dy:-Dy,c=Iy(o-e);Iy(c-Dy)<Oy?(t.point(e,r=(r+u)/2>0?zy:-zy),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(a,r),t.point(o,r),n=0):i!==a&&c>=Dy&&(Iy(e-i)<Oy&&(e-=i*Oy),Iy(o-a)<Oy&&(o-=a*Oy),r=Ji(e,r,o,u),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(a,r),n=0),t.point(e=o,r=u),i=a},lineEnd:function(){t.lineEnd(),e=r=NaN},clean:function(){return 2-n}}}function Ji(t,n,e,r){var i,o,u=$y(t-e);return Iy(u)>Oy?Fy(($y(n)*(o=By(r))*$y(e)-$y(r)*(i=By(n))*$y(t))/(i*o*u)):(n+r)/2}function Qi(t,n,e,r){var i;if(null==t)i=e*zy,r.point(-Dy,i),r.point(0,i),r.point(Dy,i),r.point(Dy,0),r.point(Dy,-i),r.point(0,-i),r.point(-Dy,-i),r.point(-Dy,0),r.point(-Dy,i);else if(Iy(t[0]-n[0])>Oy){var o=t[0]<n[0]?Dy:-Dy;i=e*o/2,r.point(-o,i),r.point(0,i),r.point(o,i)}else r.point(n[0],n[1])}function Ki(t){return function(n){var e=new to;for(var r in t)e[r]=t[r];return e.stream=n,e}}function to(){}function no(t,n,e){var r=n[1][0]-n[0][0],i=n[1][1]-n[0][1],o=t.clipExtent&&t.clipExtent();t.scale(150).translate([0,0]),null!=o&&t.clipExtent(null),t_(e,t.stream(Q_));var u=Q_.result(),a=Math.min(r/(u[1][0]-u[0][0]),i/(u[1][1]-u[0][1])),c=+n[0][0]+(r-a*(u[1][0]+u[0][0]))/2,s=+n[0][1]+(i-a*(u[1][1]+u[0][1]))/2;return null!=o&&t.clipExtent(o),t.scale(150*a).translate([c,s])}function eo(t,n,e){return no(t,[[0,0],n],e)}function ro(t){return Ki({point:function(n,e){n=t(n,e),this.stream.point(n[0],n[1])}})}function io(t,n){function e(r,i,o,u,a,c,s,l,f,h,p,d,v,y){var _=s-r,g=l-i,m=_*_+g*g;if(m>4*n&&v--){var x=u+h,b=a+p,w=c+d,M=Zy(x*x+b*b+w*w),E=wr(w/=M),S=Iy(Iy(w)-1)<Oy||Iy(o-f)<Oy?(o+f)/2:Yy(b,x),T=t(S,E),k=T[0],N=T[1],C=k-r,A=N-i,P=g*C-_*A;(P*P/m>n||Iy((_*C+g*A)/m-.5)>.3||u*h+a*p+c*d<wg)&&(e(r,i,o,u,a,c,k,N,S,x/=M,b/=M,w,v,y),y.point(k,N),e(k,N,S,x,b,w,s,l,f,h,p,d,v,y))}}return function(n){function r(e,r){e=t(e,r),n.point(e[0],e[1])}function i(){_=NaN,w.point=o,n.lineStart()}function o(r,i){var o=Or([r,i]),u=t(r,i);e(_,g,y,m,x,b,_=u[0],g=u[1],y=r,m=o[0],x=o[1],b=o[2],bg,n),n.point(_,g)}function u(){w.point=r,n.lineEnd()}function a(){i(),w.point=c,w.lineEnd=s}function c(t,n){o(l=t,n),f=_,h=g,p=m,d=x,v=b,w.point=o}function s(){e(_,g,y,m,x,b,f,h,l,p,d,v,bg,n),w.lineEnd=u,u()}var l,f,h,p,d,v,y,_,g,m,x,b,w={point:r,lineStart:i,lineEnd:u,polygonStart:function(){n.polygonStart(),w.lineStart=a},polygonEnd:function(){n.polygonEnd(),w.lineStart=i}};return w}}function oo(t){return uo(function(){return t})()}function uo(t){function n(t){return t=l(t[0]*qy,t[1]*qy),[t[0]*y+a,c-t[1]*y]}function e(t){return(t=l.invert((t[0]-a)/y,(c-t[1])/y))&&[t[0]*Uy,t[1]*Uy]}function r(t,n){return t=u(t,n),[t[0]*y+a,c-t[1]*y]}function i(){l=f_(s=ui(b,w,M),u);var t=u(m,x);return a=_-t[0]*y,c=g+t[1]*y,o()}function o(){return d=v=null,n}var u,a,c,s,l,f,h,p,d,v,y=150,_=480,g=250,m=0,x=0,b=0,w=0,M=0,E=null,S=gg,T=null,k=H_,N=.5,C=Mg(r,N);return n.stream=function(t){return d&&v===t?d:d=Eg(S(s,C(k(v=t))))},n.clipAngle=function(t){return arguments.length?(S=+t?mg(E=t*qy,6*qy):(E=null,gg),o()):E*Uy},n.clipExtent=function(t){return arguments.length?(k=null==t?(T=f=h=p=null,H_):di(T=+t[0][0],f=+t[0][1],h=+t[1][0],p=+t[1][1]),o()):null==T?null:[[T,f],[h,p]]},n.scale=function(t){return arguments.length?(y=+t,i()):y},n.translate=function(t){return arguments.length?(_=+t[0],g=+t[1],i()):[_,g]},n.center=function(t){return arguments.length?(m=t[0]%360*qy,x=t[1]%360*qy,i()):[m*Uy,x*Uy]},n.rotate=function(t){return arguments.length?(b=t[0]%360*qy,w=t[1]%360*qy,M=t.length>2?t[2]%360*qy:0,i()):[b*Uy,w*Uy,M*Uy]},n.precision=function(t){return arguments.length?(C=Mg(r,N=t*t),o()):Zy(N)},n.fitExtent=function(t,e){return no(n,t,e)},n.fitSize=function(t,e){return eo(n,t,e)},function(){return u=t.apply(this,arguments),n.invert=u.invert&&e,i()}}function ao(t){var n=0,e=Dy/3,r=uo(t),i=r(n,e);return i.parallels=function(t){return arguments.length?r(n=t[0]*qy,e=t[1]*qy):[n*Uy,e*Uy]},i}function co(t){function n(t,n){return[t*e,$y(n)/e]}var e=By(t);return n.invert=function(t,n){return[t/e,wr(n*e)]},n}function so(t,n){function e(t,n){var e=Zy(o-2*i*$y(n))/i;return[e*$y(t*=i),u-e*By(t)]}var r=$y(t),i=(r+$y(n))/2;if(Iy(i)<Oy)return co(t);var o=1+r*(2*i-r),u=Zy(o)/i;return e.invert=function(t,n){var e=u-n;return[Yy(t,Iy(e))/i*Gy(e),wr((o-(t*t+e*e)*i*i)/(2*i))]},e}function lo(t){var n=t.length;return{point:function(e,r){for(var i=-1;++i<n;)t[i].point(e,r)},sphere:function(){for(var e=-1;++e<n;)t[e].sphere()},lineStart:function(){for(var e=-1;++e<n;)t[e].lineStart()},lineEnd:function(){for(var e=-1;++e<n;)t[e].lineEnd()},polygonStart:function(){for(var e=-1;++e<n;)t[e].polygonStart()},polygonEnd:function(){for(var e=-1;++e<n;)t[e].polygonEnd()}}}function fo(t){return function(n,e){var r=By(n),i=By(e),o=t(r*i);return[o*i*$y(n),o*$y(e)]}}function ho(t){return function(n,e){var r=Zy(n*n+e*e),i=t(r),o=$y(i),u=By(i);return[Yy(n*o,r*u),wr(r&&e*o/r)]}}function po(t,n){return[t,Vy(Jy((zy+n)/2))]}function vo(t){function n(){var n=Dy*a(),u=o(M_(o.rotate()).invert([0,0]));return s(null==l?[[u[0]-n,u[1]-n],[u[0]+n,u[1]+n]]:t===po?[[Math.max(u[0]-n,l),e],[Math.min(u[0]+n,r),i]]:[[l,Math.max(u[1]-n,e)],[r,Math.min(u[1]+n,i)]])}var e,r,i,o=oo(t),u=o.center,a=o.scale,c=o.translate,s=o.clipExtent,l=null;return o.scale=function(t){return arguments.length?(a(t),n()):a()},o.translate=function(t){return arguments.length?(c(t),n()):c()},o.center=function(t){return arguments.length?(u(t),n()):u()},o.clipExtent=function(t){return arguments.length?(null==t?l=e=r=i=null:(l=+t[0][0],e=+t[0][1],r=+t[1][0],i=+t[1][1]),n()):null==l?null:[[l,e],[r,i]]},n()}function yo(t){return Jy((zy+t)/2)}function _o(t,n){function e(t,n){o>0?n<-zy+Oy&&(n=-zy+Oy):n>zy-Oy&&(n=zy-Oy);var e=o/Wy(yo(n),i);return[e*$y(i*t),o-e*By(i*t)]}var r=By(t),i=t===n?$y(t):Vy(r/By(n))/Vy(yo(n)/yo(t)),o=r*Wy(yo(t),i)/i;return i?(e.invert=function(t,n){var e=o-n,r=Gy(i)*Zy(t*t+e*e);return[Yy(t,Iy(e))/i*Gy(e),2*Fy(Wy(o/r,1/i))-zy]},e):po}function go(t,n){return[t,n]}function mo(t,n){function e(t,n){var e=o-n,r=i*t;return[e*$y(r),o-e*By(r)]}var r=By(t),i=t===n?$y(t):(r-By(n))/(n-t),o=r/i+t;return Iy(i)<Oy?go:(e.invert=function(t,n){var e=o-n;return[Yy(t,Iy(e))/i*Gy(e),o-Gy(i)*Zy(t*t+e*e)]},e)}function xo(t,n){var e=By(n),r=By(t)*e;return[e*$y(t)/r,$y(n)/r]}function bo(t,n,e,r){return 1===t&&1===n&&0===e&&0===r?H_:Ki({point:function(i,o){this.stream.point(i*t+e,o*n+r)}})}function wo(t,n){return[By(n)*$y(t),$y(n)]}function Mo(t,n){var e=By(n),r=1+By(t)*e;return[e*$y(t)/r,$y(n)/r]}function Eo(t,n){return[Vy(Jy((zy+n)/2)),-t]}function So(t,n){return t.parent===n.parent?1:2}function To(t){return t.reduce(ko,0)/t.length}function ko(t,n){return t+n.x}function No(t){return 1+t.reduce(Co,0)}function Co(t,n){return Math.max(t,n.y)}function Ao(t){for(var n;n=t.children;)t=n[0];return t}function Po(t){for(var n;n=t.children;)t=n[n.length-1];return t}function jo(t){var n=0,e=t.children,r=e&&e.length;if(r)for(;--r>=0;)n+=e[r].value;else n=1;t.value=n}function Oo(t,n){if(t===n)return t;var e=t.ancestors(),r=n.ancestors(),i=null;for(t=e.pop(),n=r.pop();t===n;)i=t,t=e.pop(),n=r.pop();return i}function Do(t,n){var e,r,i,o,u,a=new qo(t),c=+t.value&&(a.value=t.value),s=[a];for(null==n&&(n=Lo);e=s.pop();)if(c&&(e.value=+e.data.value),(i=n(e.data))&&(u=i.length))for(e.children=new Array(u),o=u-1;o>=0;--o)s.push(r=e.children[o]=new qo(i[o])),r.parent=e,r.depth=e.depth+1;return a.eachBefore(Uo)}function zo(){return Do(this).eachBefore(Ro)}function Lo(t){return t.children}function Ro(t){t.data=t.data.data}function Uo(t){var n=0;do{t.height=n}while((t=t.parent)&&t.height<++n)}function qo(t){this.data=t,this.depth=this.height=0,this.parent=null}function Io(t){for(var n,e,r=t.length;r;)e=Math.random()*r--|0,n=t[r],t[r]=t[e],t[e]=n;return t}function Fo(t,n){var e,r;if(Ho(n,t))return[n];for(e=0;e<t.length;++e)if(Yo(n,t[e])&&Ho(Wo(t[e],n),t))return[t[e],n];for(e=0;e<t.length-1;++e)for(r=e+1;r<t.length;++r)if(Yo(Wo(t[e],t[r]),n)&&Yo(Wo(t[e],n),t[r])&&Yo(Wo(t[r],n),t[e])&&Ho($o(t[e],t[r],n),t))return[t[e],t[r],n];throw new Error}function Yo(t,n){var e=t.r-n.r,r=n.x-t.x,i=n.y-t.y;return e<0||e*e<r*r+i*i}function Bo(t,n){var e=t.r-n.r+1e-6,r=n.x-t.x,i=n.y-t.y;return e>0&&e*e>r*r+i*i}function Ho(t,n){for(var e=0;e<n.length;++e)if(!Bo(t,n[e]))return!1;return!0}function Xo(t){switch(t.length){case 1:return Vo(t[0]);case 2:return Wo(t[0],t[1]);case 3:return $o(t[0],t[1],t[2])}}function Vo(t){return{x:t.x,y:t.y,r:t.r}}function Wo(t,n){var e=t.x,r=t.y,i=t.r,o=n.x,u=n.y,a=n.r,c=o-e,s=u-r,l=a-i,f=Math.sqrt(c*c+s*s);return{x:(e+o+c/f*l)/2,y:(r+u+s/f*l)/2,r:(f+i+a)/2}}function $o(t,n,e){var r=t.x,i=t.y,o=t.r,u=n.x,a=n.y,c=n.r,s=e.x,l=e.y,f=e.r,h=r-u,p=r-s,d=i-a,v=i-l,y=c-o,_=f-o,g=r*r+i*i-o*o,m=g-u*u-a*a+c*c,x=g-s*s-l*l+f*f,b=p*d-h*v,w=(d*x-v*m)/(2*b)-r,M=(v*y-d*_)/b,E=(p*m-h*x)/(2*b)-i,S=(h*_-p*y)/b,T=M*M+S*S-1,k=2*(o+w*M+E*S),N=w*w+E*E-o*o,C=-(T?(k+Math.sqrt(k*k-4*T*N))/(2*T):N/k);return{x:r+w+M*C,y:i+E+S*C,r:C}}function Go(t,n,e){var r=t.x,i=t.y,o=n.r+e.r,u=t.r+e.r,a=n.x-r,c=n.y-i,s=a*a+c*c;if(s){var l=.5+((u*=u)-(o*=o))/(2*s),f=Math.sqrt(Math.max(0,2*o*(u+s)-(u-=s)*u-o*o))/(2*s);e.x=r+l*a+f*c,e.y=i+l*c-f*a}else e.x=r+u,e.y=i}function Zo(t,n){var e=n.x-t.x,r=n.y-t.y,i=t.r+n.r;return i*i-1e-6>e*e+r*r}function Jo(t){var n=t._,e=t.next._,r=n.r+e.r,i=(n.x*e.r+e.x*n.r)/r,o=(n.y*e.r+e.y*n.r)/r;return i*i+o*o}function Qo(t){this._=t,this.next=null,this.previous=null}function Ko(t){if(!(i=t.length))return 0;var n,e,r,i,o,u,a,c,s,l,f;if(n=t[0],n.x=0,n.y=0,!(i>1))return n.r;if(e=t[1],n.x=-e.r,e.x=n.r,e.y=0,!(i>2))return n.r+e.r;Go(e,n,r=t[2]),n=new Qo(n),e=new Qo(e),r=new Qo(r),n.next=r.previous=e,e.next=n.previous=r,r.next=e.previous=n;t:for(a=3;a<i;++a){Go(n._,e._,r=t[a]),r=new Qo(r),c=e.next,s=n.previous,l=e._.r,f=n._.r;do{if(l<=f){if(Zo(c._,r._)){e=c,n.next=e,e.previous=n,--a;continue t}l+=c._.r,c=c.next}else{if(Zo(s._,r._)){n=s,n.next=e,e.previous=n,--a;continue t}f+=s._.r,s=s.previous}}while(c!==s.next);for(r.previous=n,r.next=e,n.next=e.previous=e=r,o=Jo(n);(r=r.next)!==e;)(u=Jo(r))<o&&(n=r,o=u);e=n.next}for(n=[e._],r=e;(r=r.next)!==e;)n.push(r._);for(r=tm(n),a=0;a<i;++a)n=t[a],n.x-=r.x,n.y-=r.y;return r.r}function tu(t){return null==t?null:nu(t)}function nu(t){if("function"!=typeof t)throw new Error;return t}function eu(){return 0}function ru(t){return Math.sqrt(t.value)}function iu(t){return function(n){n.children||(n.r=Math.max(0,+t(n)||0))}}function ou(t,n){return function(e){if(r=e.children){var r,i,o,u=r.length,a=t(e)*n||0;if(a)for(i=0;i<u;++i)r[i].r+=a;if(o=Ko(r),a)for(i=0;i<u;++i)r[i].r-=a;e.r=o+a}}}function uu(t){return function(n){var e=n.parent;n.r*=t,e&&(n.x=e.x+t*n.x,n.y=e.y+t*n.y)}}function au(t){return t.id}function cu(t){return t.parentId}function su(t,n){return t.parent===n.parent?1:2}function lu(t){var n=t.children;return n?n[0]:t.t}function fu(t){var n=t.children;return n?n[n.length-1]:t.t}function hu(t,n,e){var r=e/(n.i-t.i);n.c-=r,n.s+=e,t.c+=r,n.z+=e,n.m+=e}function pu(t){for(var n,e=0,r=0,i=t.children,o=i.length;--o>=0;)n=i[o],n.z+=e,n.m+=e,e+=n.s+(r+=n.c)}function du(t,n,e){return t.a.parent===n.parent?t.a:e}function vu(t,n){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=n}function yu(t){for(var n,e,r,i,o,u=new vu(t,0),a=[u];n=a.pop();)if(r=n._.children)for(n.children=new Array(o=r.length),i=o-1;i>=0;--i)a.push(e=n.children[i]=new vu(r[i],i)),e.parent=n;return(u.parent=new vu(null,0)).children=[u],u}function _u(t,n,e,r,i,o){for(var u,a,c,s,l,f,h,p,d,v,y,_=[],g=n.children,m=0,x=0,b=g.length,w=n.value;m<b;){c=i-e,s=o-r;do{l=g[x++].value}while(!l&&x<b);for(f=h=l,v=Math.max(s/c,c/s)/(w*t),y=l*l*v,d=Math.max(h/y,y/f);x<b;++x){if(l+=a=g[x].value,a<f&&(f=a),a>h&&(h=a),y=l*l*v,(p=Math.max(h/y,y/f))>d){l-=a;break}d=p}_.push(u={value:l,dice:c<s,children:g.slice(m,x)}),u.dice?om(u,e,r,i,w?r+=s*l/w:o):hm(u,e,r,w?e+=c*l/w:i,o),w-=l,m=x}return _}function gu(t,n){return t[0]-n[0]||t[1]-n[1]}function mu(t){for(var n=t.length,e=[0,1],r=2,i=2;i<n;++i){for(;r>1&&bm(t[e[r-2]],t[e[r-1]],t[i])<=0;)--r;e[r++]=i}return e.slice(0,r)}function xu(t){this._size=t,this._call=this._error=null,this._tasks=[],this._data=[],this._waiting=this._active=this._ended=this._start=0}function bu(t){if(!t._start)try{wu(t)}catch(n){if(t._tasks[t._ended+t._active-1])Eu(t,n);else if(!t._data)throw n}}function wu(t){for(;t._start=t._waiting&&t._active<t._size;){var n=t._ended+t._active,e=t._tasks[n],r=e.length-1,i=e[r];e[r]=Mu(t,n),--t._waiting,++t._active,e=i.apply(null,e),t._tasks[n]&&(t._tasks[n]=e||Tm)}}function Mu(t,n){return function(e,r){t._tasks[n]&&(--t._active,++t._ended,t._tasks[n]=null,null==t._error&&(null!=e?Eu(t,e):(t._data[n]=r,t._waiting?bu(t):Su(t))))}}function Eu(t,n){var e,r=t._tasks.length;for(t._error=n,t._data=void 0,t._waiting=NaN;--r>=0;)if((e=t._tasks[r])&&(t._tasks[r]=null,e.abort))try{e.abort()}catch(n){}t._active=NaN,Su(t)}function Su(t){if(!t._active&&t._call){var n=t._data;t._data=void 0,t._call(t._error,n)}}function Tu(t){if(null==t)t=1/0;else if(!((t=+t)>=1))throw new Error("invalid concurrency");return new xu(t)}function ku(t){return function(n,e){t(null==n?e:null)}}function Nu(t){var n=t.responseType;return n&&"text"!==n?t.response:t.responseText}function Cu(t,n){return function(e){return t(e.responseText,n)}}function Au(t){function n(n){var o=n+"",u=e.get(o);if(!u){if(i!==Vm)return i;e.set(o,u=r.push(n))}return t[(u-1)%t.length]}var e=Ve(),r=[],i=Vm;return t=null==t?[]:Xm.call(t),n.domain=function(t){if(!arguments.length)return r.slice();r=[],e=Ve();for(var i,o,u=-1,a=t.length;++u<a;)e.has(o=(i=t[u])+"")||e.set(o,r.push(i));return n},n.range=function(e){return arguments.length?(t=Xm.call(e),n):t.slice()},n.unknown=function(t){return arguments.length?(i=t,n):i},n.copy=function(){return Au().domain(r).range(t).unknown(i)},n}function Pu(){function t(){var t=i().length,r=u[1]<u[0],f=u[r-0],h=u[1-r];n=(h-f)/Math.max(1,t-c+2*s),a&&(n=Math.floor(n)),f+=(h-f-n*(t-c))*l,e=n*(1-c),a&&(f=Math.round(f),e=Math.round(e));var p=vl(t).map(function(t){return f+n*t});return o(r?p.reverse():p)}var n,e,r=Au().unknown(void 0),i=r.domain,o=r.range,u=[0,1],a=!1,c=0,s=0,l=.5;return delete r.unknown,r.domain=function(n){return arguments.length?(i(n),t()):i()},r.range=function(n){return arguments.length?(u=[+n[0],+n[1]],t()):u.slice()},r.rangeRound=function(n){return u=[+n[0],+n[1]],a=!0,t()},r.bandwidth=function(){return e},r.step=function(){return n},r.round=function(n){return arguments.length?(a=!!n,t()):a},r.padding=function(n){return arguments.length?(c=s=Math.max(0,Math.min(1,n)),t()):c},r.paddingInner=function(n){return arguments.length?(c=Math.max(0,Math.min(1,n)),t()):c},r.paddingOuter=function(n){return arguments.length?(s=Math.max(0,Math.min(1,n)),t()):s},r.align=function(n){return arguments.length?(l=Math.max(0,Math.min(1,n)),t()):l},r.copy=function(){return Pu().domain(i()).range(u).round(a).paddingInner(c).paddingOuter(s).align(l)},t()}function ju(t){var n=t.copy;return t.padding=t.paddingOuter,delete t.paddingInner,delete t.paddingOuter,t.copy=function(){return ju(n())},t}function Ou(){return ju(Pu().paddingInner(1))}function Du(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:Wm(n)}function zu(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return t<=n?0:t>=e?1:r(t)}}}function Lu(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return t<=0?n:t>=1?e:r(t)}}}function Ru(t,n,e,r){var i=t[0],o=t[1],u=n[0],a=n[1];return o<i?(i=e(o,i),u=r(a,u)):(i=e(i,o),u=r(u,a)),function(t){return u(i(t))}}function Uu(t,n,e,r){var i=Math.min(t.length,n.length)-1,o=new Array(i),u=new Array(i),a=-1;for(t[i]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++a<i;)o[a]=e(t[a],t[a+1]),u[a]=r(n[a],n[a+1]);return function(n){var e=nl(t,n,1,i)-1;return u[e](o[e](n))}}function qu(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp())}function Iu(t,n){function e(){return i=Math.min(a.length,c.length)>2?Uu:Ru,o=u=null,r}function r(n){return(o||(o=i(a,c,l?zu(t):t,s)))(+n)}var i,o,u,a=Gm,c=Gm,s=Bh,l=!1;return r.invert=function(t){return(u||(u=i(c,a,Du,l?Lu(n):n)))(+t)},r.domain=function(t){return arguments.length?(a=Hm.call(t,$m),e()):a.slice()},r.range=function(t){return arguments.length?(c=Xm.call(t),e()):c.slice()},r.rangeRound=function(t){return c=Xm.call(t),s=Hh,e()},r.clamp=function(t){return arguments.length?(l=!!t,e()):l},r.interpolate=function(t){return arguments.length?(s=t,e()):s},e()}function Fu(t){var n=t.domain;return t.ticks=function(t){var e=n();return ml(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){return Zm(n(),t,e)},t.nice=function(e){null==e&&(e=10);var i,o=n(),u=0,a=o.length-1,c=o[u],s=o[a];return s<c&&(i=c,c=s,s=i,i=u,u=a,a=i),i=r(c,s,e),i>0?(c=Math.floor(c/i)*i,s=Math.ceil(s/i)*i,i=r(c,s,e)):i<0&&(c=Math.ceil(c*i)/i,s=Math.floor(s*i)/i,i=r(c,s,e)),i>0?(o[u]=Math.floor(c/i)*i,o[a]=Math.ceil(s/i)*i,n(o)):i<0&&(o[u]=Math.ceil(c*i)/i,o[a]=Math.floor(s*i)/i,n(o)),t},t}function Yu(){var t=Iu(Du,Uh);return t.copy=function(){return qu(t,Yu())},Fu(t)}function Bu(){function t(t){return+t}var n=[0,1];return t.invert=t,t.domain=t.range=function(e){return arguments.length?(n=Hm.call(e,$m),t):n.slice()},t.copy=function(){return Bu().domain(n)},Fu(t)}function Hu(t,n){return(n=Math.log(n/t))?function(e){return Math.log(e/t)/n}:Wm(n)}function Xu(t,n){return t<0?function(e){return-Math.pow(-n,e)*Math.pow(-t,1-e)}:function(e){return Math.pow(n,e)*Math.pow(t,1-e)}}function Vu(t){return isFinite(t)?+("1e"+t):t<0?0:t}function Wu(t){return 10===t?Vu:t===Math.E?Math.exp:function(n){return Math.pow(t,n)}}function $u(t){return t===Math.E?Math.log:10===t&&Math.log10||2===t&&Math.log2||(t=Math.log(t),function(n){return Math.log(n)/t})}function Gu(t){return function(n){return-t(-n)}}function Zu(){function n(){return o=$u(i),u=Wu(i),r()[0]<0&&(o=Gu(o),u=Gu(u)),e}var e=Iu(Hu,Xu).domain([1,10]),r=e.domain,i=10,o=$u(10),u=Wu(10);return e.base=function(t){return arguments.length?(i=+t,n()):i},e.domain=function(t){return arguments.length?(r(t),n()):r()},e.ticks=function(t){var n,e=r(),a=e[0],c=e[e.length-1];(n=c<a)&&(h=a,a=c,c=h);var s,l,f,h=o(a),p=o(c),d=null==t?10:+t,v=[];if(!(i%1)&&p-h<d){if(h=Math.round(h)-1,p=Math.round(p)+1,a>0){for(;h<p;++h)for(l=1,s=u(h);l<i;++l)if(!((f=s*l)<a)){if(f>c)break;v.push(f)}}else for(;h<p;++h)for(l=i-1,s=u(h);l>=1;--l)if(!((f=s*l)<a)){if(f>c)break;v.push(f)}}else v=ml(h,p,Math.min(p-h,d)).map(u);return n?v.reverse():v},e.tickFormat=function(n,r){if(null==r&&(r=10===i?".0e":","),"function"!=typeof r&&(r=t.format(r)),n===1/0)return r;null==n&&(n=10);var a=Math.max(1,i*n/e.ticks().length);return function(t){var n=t/u(Math.round(o(t)));return n*i<i-.5&&(n*=i),n<=a?r(t):""}},e.nice=function(){return r(Jm(r(),{floor:function(t){return u(Math.floor(o(t)))},ceil:function(t){return u(Math.ceil(o(t)))}}))},e.copy=function(){return qu(e,Zu().base(i))},e}function Ju(t,n){return t<0?-Math.pow(-t,n):Math.pow(t,n)}function Qu(){function t(t,n){return(n=Ju(n,e)-(t=Ju(t,e)))?function(r){return(Ju(r,e)-t)/n}:Wm(n)}function n(t,n){return n=Ju(n,e)-(t=Ju(t,e)),function(r){return Ju(t+n*r,1/e)}}var e=1,r=Iu(t,n),i=r.domain;return r.exponent=function(t){return arguments.length?(e=+t,i(i())):e},r.copy=function(){return qu(r,Qu().exponent(e))},Fu(r)}function Ku(){return Qu().exponent(.5)}function ta(){function t(){var t=0,o=Math.max(1,r.length);for(i=new Array(o-1);++t<o;)i[t-1]=wl(e,t/o);return n}function n(t){if(!isNaN(t=+t))return r[nl(i,t)]}var e=[],r=[],i=[];return n.invertExtent=function(t){var n=r.indexOf(t);return n<0?[NaN,NaN]:[n>0?i[n-1]:e[0],n<i.length?i[n]:e[e.length-1]]},n.domain=function(n){if(!arguments.length)return e.slice();e=[];for(var r,i=0,o=n.length;i<o;++i)null==(r=n[i])||isNaN(r=+r)||e.push(r);return e.sort(Qs),t()},n.range=function(n){return arguments.length?(r=Xm.call(n),t()):r.slice()},n.quantiles=function(){return i.slice()},n.copy=function(){return ta().domain(e).range(r)},n}function na(){function t(t){if(t<=t)return u[nl(o,t,0,i)]}function n(){var n=-1;for(o=new Array(i);++n<i;)o[n]=((n+1)*r-(n-i)*e)/(i+1);return t}var e=0,r=1,i=1,o=[.5],u=[0,1];return t.domain=function(t){return arguments.length?(e=+t[0],r=+t[1],n()):[e,r]},t.range=function(t){return arguments.length?(i=(u=Xm.call(t)).length-1,n()):u.slice()},t.invertExtent=function(t){var n=u.indexOf(t);return n<0?[NaN,NaN]:n<1?[e,o[0]]:n>=i?[o[i-1],r]:[o[n-1],o[n]]},t.copy=function(){return na().domain([e,r]).range(u)},Fu(t)}function ea(){function t(t){if(t<=t)return e[nl(n,t,0,r)]}var n=[.5],e=[0,1],r=1;return t.domain=function(i){return arguments.length?(n=Xm.call(i),r=Math.min(n.length,e.length-1),t):n.slice()},t.range=function(i){return arguments.length?(e=Xm.call(i),r=Math.min(n.length,e.length-1),t):e.slice()},t.invertExtent=function(t){var r=e.indexOf(t);return[n[r-1],n[r]]},t.copy=function(){return ea().domain(n).range(e)},t}function ra(t,n,e,r){function i(n){return t(n=new Date(+n)),n}return i.floor=i,i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,o){var u=[];if(e=i.ceil(e),o=null==o?1:Math.floor(o),!(e<r&&o>0))return u;do{u.push(new Date(+e))}while(n(e,o),t(e),e<r);return u},i.filter=function(e){return ra(function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)},function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););})},e&&(i.count=function(n,r){return Qm.setTime(+n),Km.setTime(+r),t(Qm),t(Km),Math.floor(e(Qm,Km))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}function ia(t){return ra(function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+7*n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*ex)/rx})}function oa(t){return ra(function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+7*n)},function(t,n){return(n-t)/rx})}function ua(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function aa(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function ca(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}function sa(t){function n(t,n){return function(e){var r,i,o,u=[],a=-1,c=0,s=t.length;for(e instanceof Date||(e=new Date(+e));++a<s;)37===t.charCodeAt(a)&&(u.push(t.slice(c,a)),null!=(i=nb[r=t.charAt(++a)])?r=t.charAt(++a):i="e"===r?" ":"0",(o=n[r])&&(r=o(e,i)),u.push(r),c=a+1);return u.push(t.slice(c,a)),u.join("")}}function e(t,n){return function(e){var i=ca(1900);if(r(i,t,e+="",0)!=e.length)return null;if("p"in i&&(i.H=i.H%12+12*i.p),"W"in i||"U"in i){"w"in i||(i.w="W"in i?1:0);var o="Z"in i?aa(ca(i.y)).getUTCDay():n(ca(i.y)).getDay();i.m=0,i.d="W"in i?(i.w+6)%7+7*i.W-(o+5)%7:i.w+7*i.U-(o+6)%7}return"Z"in i?(i.H+=i.Z/100|0,i.M+=i.Z%100,aa(i)):n(i)}}function r(t,n,e,r){for(var i,o,u=0,a=n.length,c=e.length;u<a;){if(r>=c)return-1;if(37===(i=n.charCodeAt(u++))){if(i=n.charAt(u++),!(o=Y[i in nb?n.charAt(u++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}function i(t,n,e){var r=A.exec(n.slice(e));return r?(t.p=P[r[0].toLowerCase()],e+r[0].length):-1}function o(t,n,e){var r=D.exec(n.slice(e));return r?(t.w=z[r[0].toLowerCase()],e+r[0].length):-1}function u(t,n,e){var r=j.exec(n.slice(e));return r?(t.w=O[r[0].toLowerCase()],e+r[0].length):-1}function a(t,n,e){var r=U.exec(n.slice(e));return r?(t.m=q[r[0].toLowerCase()],e+r[0].length):-1}function c(t,n,e){var r=L.exec(n.slice(e));return r?(t.m=R[r[0].toLowerCase()],e+r[0].length):-1}function s(t,n,e){return r(t,w,n,e)}function l(t,n,e){return r(t,M,n,e)}function f(t,n,e){return r(t,E,n,e)}function h(t){return k[t.getDay()]}function p(t){return T[t.getDay()]}function d(t){return C[t.getMonth()]}function v(t){return N[t.getMonth()]}function y(t){return S[+(t.getHours()>=12)]}function _(t){return k[t.getUTCDay()]}function g(t){return T[t.getUTCDay()]}function m(t){return C[t.getUTCMonth()]}function x(t){return N[t.getUTCMonth()]}function b(t){return S[+(t.getUTCHours()>=12)]}var w=t.dateTime,M=t.date,E=t.time,S=t.periods,T=t.days,k=t.shortDays,N=t.months,C=t.shortMonths,A=ha(S),P=pa(S),j=ha(T),O=pa(T),D=ha(k),z=pa(k),L=ha(N),R=pa(N),U=ha(C),q=pa(C),I={a:h,A:p,b:d,B:v,c:null,d:Na,e:Na,H:Ca,I:Aa,j:Pa,L:ja,m:Oa,M:Da,p:y,S:za,U:La,w:Ra,W:Ua,x:null,X:null,y:qa,Y:Ia,Z:Fa,"%":ec},F={a:_,A:g,b:m,B:x,c:null,d:Ya,e:Ya,H:Ba,I:Ha,j:Xa,L:Va,m:Wa,M:$a,p:b,S:Ga,U:Za,w:Ja,W:Qa,x:null,X:null,y:Ka,Y:tc,Z:nc,"%":ec},Y={a:o,A:u,b:a,B:c,c:s,d:ba,e:ba,H:Ma,I:Ma,j:wa,L:Ta,m:xa,M:Ea,p:i,S:Sa,U:va,w:da,W:ya,x:l,X:f,y:ga,Y:_a,Z:ma,"%":ka};return I.x=n(M,I),I.X=n(E,I),I.c=n(w,I),F.x=n(M,F),F.X=n(E,F),F.c=n(w,F),{format:function(t){var e=n(t+="",I);return e.toString=function(){return t},e},parse:function(t){var n=e(t+="",ua);return n.toString=function(){return t},n},utcFormat:function(t){var e=n(t+="",F);return e.toString=function(){return t},e},utcParse:function(t){var n=e(t,aa);return n.toString=function(){return t},n}}}function la(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function fa(t){return t.replace(ib,"\\$&")}function ha(t){return new RegExp("^(?:"+t.map(fa).join("|")+")","i")}function pa(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function da(t,n,e){var r=eb.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function va(t,n,e){var r=eb.exec(n.slice(e));return r?(t.U=+r[0],e+r[0].length):-1}function ya(t,n,e){var r=eb.exec(n.slice(e));return r?(t.W=+r[0],e+r[0].length):-1}function _a(t,n,e){var r=eb.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function ga(t,n,e){var r=eb.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function ma(t,n,e){var r=/^(Z)|([+-]\d\d)(?:\:?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function xa(t,n,e){var r=eb.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function ba(t,n,e){var r=eb.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function wa(t,n,e){var r=eb.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function Ma(t,n,e){var r=eb.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function Ea(t,n,e){var r=eb.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function Sa(t,n,e){var r=eb.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function Ta(t,n,e){var r=eb.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function ka(t,n,e){var r=rb.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function Na(t,n){return la(t.getDate(),n,2)}function Ca(t,n){return la(t.getHours(),n,2)}function Aa(t,n){return la(t.getHours()%12||12,n,2)}function Pa(t,n){return la(1+lx.count(Nx(t),t),n,3)}function ja(t,n){return la(t.getMilliseconds(),n,3)}function Oa(t,n){return la(t.getMonth()+1,n,2)}function Da(t,n){return la(t.getMinutes(),n,2)}function za(t,n){return la(t.getSeconds(),n,2)}function La(t,n){return la(hx.count(Nx(t),t),n,2)}function Ra(t){return t.getDay()}function Ua(t,n){return la(px.count(Nx(t),t),n,2)}function qa(t,n){return la(t.getFullYear()%100,n,2)}function Ia(t,n){return la(t.getFullYear()%1e4,n,4)}function Fa(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+la(n/60|0,"0",2)+la(n%60,"0",2)}function Ya(t,n){return la(t.getUTCDate(),n,2)}function Ba(t,n){return la(t.getUTCHours(),n,2)}function Ha(t,n){return la(t.getUTCHours()%12||12,n,2)}function Xa(t,n){return la(1+Dx.count(Qx(t),t),n,3)}function Va(t,n){return la(t.getUTCMilliseconds(),n,3)}function Wa(t,n){return la(t.getUTCMonth()+1,n,2)}function $a(t,n){return la(t.getUTCMinutes(),n,2)}function Ga(t,n){return la(t.getUTCSeconds(),n,2)}function Za(t,n){return la(Lx.count(Qx(t),t),n,2)}function Ja(t){return t.getUTCDay()}function Qa(t,n){return la(Rx.count(Qx(t),t),n,2)}function Ka(t,n){return la(t.getUTCFullYear()%100,n,2)}function tc(t,n){return la(t.getUTCFullYear()%1e4,n,4)}function nc(){return"+0000"}function ec(){return"%"}function rc(n){return Kx=sa(n),t.timeFormat=Kx.format,t.timeParse=Kx.parse,t.utcFormat=Kx.utcFormat,t.utcParse=Kx.utcParse,Kx}function ic(t){return t.toISOString()}function oc(t){var n=new Date(t);return isNaN(n)?null:n}function uc(t){return new Date(t)}function ac(t){return t instanceof Date?+t:+new Date(+t)}function cc(t,n,e,r,o,u,a,c,s){function l(i){return(a(i)<i?v:u(i)<i?y:o(i)<i?_:r(i)<i?g:n(i)<i?e(i)<i?m:x:t(i)<i?b:w)(i)}function f(n,e,r,o){if(null==n&&(n=10),"number"==typeof n){var u=Math.abs(r-e)/n,a=Ks(function(t){return t[2]}).right(M,u);a===M.length?(o=i(e/pb,r/pb,n),n=t):a?(a=M[u/M[a-1][2]<M[a][2]/u?a-1:a],o=a[1],n=a[0]):(o=i(e,r,n),n=c)}return null==o?n:n.every(o)}var h=Iu(Du,Uh),p=h.invert,d=h.domain,v=s(".%L"),y=s(":%S"),_=s("%I:%M"),g=s("%I %p"),m=s("%a %d"),x=s("%b %d"),b=s("%B"),w=s("%Y"),M=[[a,1,ab],[a,5,5*ab],[a,15,15*ab],[a,30,30*ab],[u,1,cb],[u,5,5*cb],[u,15,15*cb],[u,30,30*cb],[o,1,sb],[o,3,3*sb],[o,6,6*sb],[o,12,12*sb],[r,1,lb],[r,2,2*lb],[e,1,fb],[n,1,hb],[n,3,3*hb],[t,1,pb]];return h.invert=function(t){return new Date(p(t))},h.domain=function(t){return arguments.length?d(Hm.call(t,ac)):d().map(uc)},h.ticks=function(t,n){var e,r=d(),i=r[0],o=r[r.length-1],u=o<i;return u&&(e=i,i=o,o=e),e=f(t,i,o,n),e=e?e.range(i,o+1):[],u?e.reverse():e},h.tickFormat=function(t,n){return null==n?l:s(n)},h.nice=function(t,n){var e=d();return(t=f(t,e[0],e[e.length-1],n))?d(Jm(e,t)):h},h.copy=function(){return qu(h,cc(t,n,e,r,o,u,a,c,s))},h}function sc(t){var n=t.length;return function(e){return t[Math.max(0,Math.min(n-1,Math.floor(e*n)))]}}function lc(t){function n(n){var o=(n-e)/(r-e);return t(i?Math.max(0,Math.min(1,o)):o)}var e=0,r=1,i=!1;return n.domain=function(t){return arguments.length?(e=+t[0],r=+t[1],n):[e,r]},n.clamp=function(t){return arguments.length?(i=!!t,n):i},n.interpolator=function(e){return arguments.length?(t=e,n):t},n.copy=function(){return lc(t).domain([e,r]).clamp(i)},Fu(n)}function fc(t){return t>1?0:t<-1?qb:Math.acos(t)}function hc(t){return t>=1?Ib:t<=-1?-Ib:Math.asin(t)}function pc(t){return t.innerRadius}function dc(t){return t.outerRadius}function vc(t){return t.startAngle}function yc(t){return t.endAngle}function _c(t){return t&&t.padAngle}function gc(t,n,e,r,i,o,u,a){var c=e-t,s=r-n,l=u-i,f=a-o,h=(l*(n-o)-f*(t-i))/(f*c-l*s);return[t+h*c,n+h*s]}function mc(t,n,e,r,i,o,u){var a=t-e,c=n-r,s=(u?o:-o)/Rb(a*a+c*c),l=s*c,f=-s*a,h=t+l,p=n+f,d=e+l,v=r+f,y=(h+d)/2,_=(p+v)/2,g=d-h,m=v-p,x=g*g+m*m,b=i-o,w=h*v-d*p,M=(m<0?-1:1)*Rb(Db(0,b*b*x-w*w)),E=(w*m-g*M)/x,S=(-w*g-m*M)/x,T=(w*m+g*M)/x,k=(-w*g+m*M)/x,N=E-y,C=S-_,A=T-y,P=k-_;return N*N+C*C>A*A+P*P&&(E=T,S=k),{cx:E,cy:S,x01:-l,y01:-f,x11:E*(i/b-1),y11:S*(i/b-1)}}function xc(t){this._context=t}function bc(t){return t[0]}function wc(t){return t[1]}function Mc(t){this._curve=t}function Ec(t){function n(n){return new Mc(t(n))}return n._curve=t,n}function Sc(t){var n=t.curve;return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t.curve=function(t){return arguments.length?n(Ec(t)):n()._curve},t}function Tc(t){return t.source}function kc(t){return t.target}function Nc(t){function n(){var n,a=Kb.call(arguments),c=e.apply(this,a),s=r.apply(this,a);if(u||(u=n=qe()),t(u,+i.apply(this,(a[0]=c,a)),+o.apply(this,a),+i.apply(this,(a[0]=s,a)),+o.apply(this,a)),n)return u=null,n+""||null}var e=Tc,r=kc,i=bc,o=wc,u=null;return n.source=function(t){return arguments.length?(e=t,n):e},n.target=function(t){return arguments.length?(r=t,n):r},n.x=function(t){return arguments.length?(i="function"==typeof t?t:Ab(+t),n):i},n.y=function(t){return arguments.length?(o="function"==typeof t?t:Ab(+t),n):o},n.context=function(t){return arguments.length?(u=null==t?null:t,n):u},n}function Cc(t,n,e,r,i){t.moveTo(n,e),t.bezierCurveTo(n=(n+r)/2,e,n,i,r,i)}function Ac(t,n,e,r,i){t.moveTo(n,e),t.bezierCurveTo(n,e=(e+i)/2,r,e,r,i)}function Pc(t,n,e,r,i){var o=Qb(n,e),u=Qb(n,e=(e+i)/2),a=Qb(r,e),c=Qb(r,i);t.moveTo(o[0],o[1]),t.bezierCurveTo(u[0],u[1],a[0],a[1],c[0],c[1])}function jc(){return Nc(Cc)}function Oc(){return Nc(Ac)}function Dc(){var t=Nc(Pc);return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t}function zc(t,n,e){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+n)/6,(t._y0+4*t._y1+e)/6)}function Lc(t){this._context=t}function Rc(t){this._context=t}function Uc(t){this._context=t}function qc(t,n){this._basis=new Lc(t),this._beta=n}function Ic(t,n,e){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-n),t._y2+t._k*(t._y1-e),t._x2,t._y2)}function Fc(t,n){this._context=t,this._k=(1-n)/6}function Yc(t,n){this._context=t,this._k=(1-n)/6}function Bc(t,n){this._context=t,this._k=(1-n)/6}function Hc(t,n,e){var r=t._x1,i=t._y1,o=t._x2,u=t._y2;if(t._l01_a>Ub){var a=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,c=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*a-t._x0*t._l12_2a+t._x2*t._l01_2a)/c,i=(i*a-t._y0*t._l12_2a+t._y2*t._l01_2a)/c}if(t._l23_a>Ub){var s=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,l=3*t._l23_a*(t._l23_a+t._l12_a);o=(o*s+t._x1*t._l23_2a-n*t._l12_2a)/l,u=(u*s+t._y1*t._l23_2a-e*t._l12_2a)/l}t._context.bezierCurveTo(r,i,o,u,t._x2,t._y2)}function Xc(t,n){this._context=t,this._alpha=n}function Vc(t,n){this._context=t,this._alpha=n}function Wc(t,n){this._context=t,this._alpha=n}function $c(t){this._context=t}function Gc(t){return t<0?-1:1}function Zc(t,n,e){var r=t._x1-t._x0,i=n-t._x1,o=(t._y1-t._y0)/(r||i<0&&-0),u=(e-t._y1)/(i||r<0&&-0),a=(o*i+u*r)/(r+i);return(Gc(o)+Gc(u))*Math.min(Math.abs(o),Math.abs(u),.5*Math.abs(a))||0}function Jc(t,n){var e=t._x1-t._x0;return e?(3*(t._y1-t._y0)/e-n)/2:n}function Qc(t,n,e){var r=t._x0,i=t._y0,o=t._x1,u=t._y1,a=(o-r)/3;t._context.bezierCurveTo(r+a,i+a*n,o-a,u-a*e,o,u)}function Kc(t){this._context=t}function ts(t){this._context=new ns(t)}function ns(t){this._context=t}function es(t){return new Kc(t)}function rs(t){return new ts(t)}function is(t){this._context=t}function os(t){var n,e,r=t.length-1,i=new Array(r),o=new Array(r),u=new Array(r);for(i[0]=0,o[0]=2,u[0]=t[0]+2*t[1],n=1;n<r-1;++n)i[n]=1,o[n]=4,u[n]=4*t[n]+2*t[n+1];for(i[r-1]=2,o[r-1]=7,u[r-1]=8*t[r-1]+t[r],n=1;n<r;++n)e=i[n]/o[n-1],o[n]-=e,u[n]-=e*u[n-1];for(i[r-1]=u[r-1]/o[r-1],n=r-2;n>=0;--n)i[n]=(u[n]-i[n+1])/o[n];for(o[r-1]=(t[r]+i[r-1])/2,n=0;n<r-1;++n)o[n]=2*t[n+1]-i[n+1];return[i,o]}function us(t,n){this._context=t,this._t=n}function as(t){return new us(t,0)}function cs(t){return new us(t,1)}function ss(t,n){return t[n]}function ls(t){for(var n,e=0,r=-1,i=t.length;++r<i;)(n=+t[r][1])&&(e+=n);return e}function fs(t){return t[0]}function hs(t){return t[1]}function ps(){this._=null}function ds(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function vs(t,n){var e=n,r=n.R,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function ys(t,n){var e=n,r=n.L,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function _s(t){for(;t.L;)t=t.L;return t}function gs(t,n,e,r){var i=[null,null],o=Gw.push(i)-1;return i.left=t,i.right=n,e&&xs(i,t,n,e),r&&xs(i,n,t,r),Ww[t.index].halfedges.push(o),Ww[n.index].halfedges.push(o),i}function ms(t,n,e){var r=[n,e];return r.left=t,r}function xs(t,n,e,r){t[0]||t[1]?t.left===e?t[1]=r:t[0]=r:(t[0]=r,t.left=n,t.right=e)}function bs(t,n,e,r,i){var o,u=t[0],a=t[1],c=u[0],s=u[1],l=a[0],f=a[1],h=0,p=1,d=l-c,v=f-s;if(o=n-c,d||!(o>0)){if(o/=d,d<0){if(o<h)return;o<p&&(p=o)}else if(d>0){if(o>p)return;o>h&&(h=o)}if(o=r-c,d||!(o<0)){if(o/=d,d<0){if(o>p)return;o>h&&(h=o)}else if(d>0){if(o<h)return;o<p&&(p=o)}if(o=e-s,v||!(o>0)){if(o/=v,v<0){if(o<h)return;o<p&&(p=o)}else if(v>0){if(o>p)return;o>h&&(h=o)}if(o=i-s,v||!(o<0)){if(o/=v,v<0){if(o>p)return;o>h&&(h=o)}else if(v>0){if(o<h)return;o<p&&(p=o)}return!(h>0||p<1)||(h>0&&(t[0]=[c+h*d,s+h*v]),p<1&&(t[1]=[c+p*d,s+p*v]),!0)}}}}}function ws(t,n,e,r,i){var o=t[1];if(o)return!0;var u,a,c=t[0],s=t.left,l=t.right,f=s[0],h=s[1],p=l[0],d=l[1],v=(f+p)/2,y=(h+d)/2;if(d===h){if(v<n||v>=r)return;if(f>p){if(c){if(c[1]>=i)return}else c=[v,e];o=[v,i]}else{if(c){if(c[1]<e)return}else c=[v,i];o=[v,e]}}else if(u=(f-p)/(d-h),a=y-u*v,u<-1||u>1)if(f>p){if(c){if(c[1]>=i)return}else c=[(e-a)/u,e];o=[(i-a)/u,i]}else{if(c){if(c[1]<e)return}else c=[(i-a)/u,i];o=[(e-a)/u,e]}else if(h<d){if(c){if(c[0]>=r)return}else c=[n,u*n+a];o=[r,u*r+a]}else{if(c){if(c[0]<n)return}else c=[r,u*r+a];o=[n,u*n+a]}return t[0]=c,t[1]=o,!0}function Ms(t,n,e,r){for(var i,o=Gw.length;o--;)ws(i=Gw[o],t,n,e,r)&&bs(i,t,n,e,r)&&(Math.abs(i[0][0]-i[1][0])>Qw||Math.abs(i[0][1]-i[1][1])>Qw)||delete Gw[o]}function Es(t){return Ww[t.index]={site:t,halfedges:[]}}function Ss(t,n){var e=t.site,r=n.left,i=n.right;return e===i&&(i=r,r=e),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(e===r?(r=n[1],i=n[0]):(r=n[0],i=n[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function Ts(t,n){return n[+(n.left!==t.site)]}function ks(t,n){return n[+(n.left===t.site)]}function Ns(){for(var t,n,e,r,i=0,o=Ww.length;i<o;++i)if((t=Ww[i])&&(r=(n=t.halfedges).length)){var u=new Array(r),a=new Array(r);for(e=0;e<r;++e)u[e]=e,a[e]=Ss(t,Gw[n[e]]);for(u.sort(function(t,n){return a[n]-a[t]}),e=0;e<r;++e)a[e]=n[u[e]];for(e=0;e<r;++e)n[e]=a[e]}}function Cs(t,n,e,r){var i,o,u,a,c,s,l,f,h,p,d,v,y=Ww.length,_=!0;for(i=0;i<y;++i)if(o=Ww[i]){for(u=o.site,c=o.halfedges,a=c.length;a--;)Gw[c[a]]||c.splice(a,1);for(a=0,s=c.length;a<s;)p=ks(o,Gw[c[a]]),d=p[0],v=p[1],l=Ts(o,Gw[c[++a%s]]),f=l[0],h=l[1],(Math.abs(d-f)>Qw||Math.abs(v-h)>Qw)&&(c.splice(a,0,Gw.push(ms(u,p,Math.abs(d-t)<Qw&&r-v>Qw?[t,Math.abs(f-t)<Qw?h:r]:Math.abs(v-r)<Qw&&e-d>Qw?[Math.abs(h-r)<Qw?f:e,r]:Math.abs(d-e)<Qw&&v-n>Qw?[e,Math.abs(f-e)<Qw?h:n]:Math.abs(v-n)<Qw&&d-t>Qw?[Math.abs(h-n)<Qw?f:t,n]:null))-1),++s);s&&(_=!1)}if(_){var g,m,x,b=1/0;for(i=0,_=null;i<y;++i)(o=Ww[i])&&(u=o.site,g=u[0]-t,m=u[1]-n,(x=g*g+m*m)<b&&(b=x,_=o));if(_){var w=[t,n],M=[t,r],E=[e,r],S=[e,n];_.halfedges.push(Gw.push(ms(u=_.site,w,M))-1,Gw.push(ms(u,M,E))-1,Gw.push(ms(u,E,S))-1,Gw.push(ms(u,S,w))-1)}}for(i=0;i<y;++i)(o=Ww[i])&&(o.halfedges.length||delete Ww[i])}function As(){ds(this),this.x=this.y=this.arc=this.site=this.cy=null}function Ps(t){var n=t.P,e=t.N;if(n&&e){var r=n.site,i=t.site,o=e.site;if(r!==o){var u=i[0],a=i[1],c=r[0]-u,s=r[1]-a,l=o[0]-u,f=o[1]-a,h=2*(c*f-s*l);if(!(h>=-Kw)){var p=c*c+s*s,d=l*l+f*f,v=(f*p-s*d)/h,y=(c*d-l*p)/h,_=Zw.pop()||new As;_.arc=t,_.site=i,_.x=v+u,_.y=(_.cy=y+a)+Math.sqrt(v*v+y*y),t.circle=_;for(var g=null,m=$w._;m;)if(_.y<m.y||_.y===m.y&&_.x<=m.x){if(!m.L){g=m.P;break}m=m.L}else{if(!m.R){g=m;break}m=m.R}$w.insert(g,_),g||(Xw=_)}}}}function js(t){var n=t.circle;n&&(n.P||(Xw=n.N),$w.remove(n),Zw.push(n),ds(n),t.circle=null)}function Os(){ds(this),this.edge=this.site=this.circle=null}function Ds(t){var n=Jw.pop()||new Os;return n.site=t,n}function zs(t){js(t),Vw.remove(t),Jw.push(t),ds(t)}function Ls(t){var n=t.circle,e=n.x,r=n.cy,i=[e,r],o=t.P,u=t.N,a=[t];zs(t);for(var c=o;c.circle&&Math.abs(e-c.circle.x)<Qw&&Math.abs(r-c.circle.cy)<Qw;)o=c.P,a.unshift(c),zs(c),c=o;a.unshift(c),js(c);for(var s=u;s.circle&&Math.abs(e-s.circle.x)<Qw&&Math.abs(r-s.circle.cy)<Qw;)u=s.N,a.push(s),zs(s),s=u;a.push(s),js(s);var l,f=a.length;for(l=1;l<f;++l)s=a[l],c=a[l-1],xs(s.edge,c.site,s.site,i);c=a[0],s=a[f-1],s.edge=gs(c.site,s.site,null,i),Ps(c),Ps(s)}function Rs(t){for(var n,e,r,i,o=t[0],u=t[1],a=Vw._;a;)if((r=Us(a,u)-o)>Qw)a=a.L;else{if(!((i=o-qs(a,u))>Qw)){r>-Qw?(n=a.P,e=a):i>-Qw?(n=a,e=a.N):n=e=a;break}if(!a.R){n=a;break}a=a.R}Es(t);var c=Ds(t);if(Vw.insert(n,c),n||e){if(n===e)return js(n),e=Ds(n.site),Vw.insert(c,e),c.edge=e.edge=gs(n.site,c.site),Ps(n),void Ps(e);if(!e)return void(c.edge=gs(n.site,c.site));js(n),js(e);var s=n.site,l=s[0],f=s[1],h=t[0]-l,p=t[1]-f,d=e.site,v=d[0]-l,y=d[1]-f,_=2*(h*y-p*v),g=h*h+p*p,m=v*v+y*y,x=[(y*g-p*m)/_+l,(h*m-v*g)/_+f];xs(e.edge,s,d,x),c.edge=gs(s,t,null,x),e.edge=gs(t,d,null,x),Ps(n),Ps(e)}}function Us(t,n){var e=t.site,r=e[0],i=e[1],o=i-n;if(!o)return r;var u=t.P;if(!u)return-1/0;e=u.site;var a=e[0],c=e[1],s=c-n;if(!s)return a;var l=a-r,f=1/o-1/s,h=l/s;return f?(-h+Math.sqrt(h*h-2*f*(l*l/(-2*s)-c+s/2+i-o/2)))/f+r:(r+a)/2}function qs(t,n){var e=t.N;if(e)return Us(e,n);var r=t.site;return r[1]===n?r[0]:1/0}function Is(t,n,e){return(t[0]-e[0])*(n[1]-t[1])-(t[0]-n[0])*(e[1]-t[1])}function Fs(t,n){return n[1]-t[1]||n[0]-t[0]}function Ys(t,n){var e,r,i,o=t.sort(Fs).pop();for(Gw=[],Ww=new Array(t.length),Vw=new ps,$w=new ps;;)if(i=Xw,o&&(!i||o[1]<i.y||o[1]===i.y&&o[0]<i.x))o[0]===e&&o[1]===r||(Rs(o),e=o[0],r=o[1]),o=t.pop();else{if(!i)break;Ls(i.arc)}if(Ns(),n){var u=+n[0][0],a=+n[0][1],c=+n[1][0],s=+n[1][1];Ms(u,a,c,s),Cs(u,a,c,s)}this.edges=Gw,this.cells=Ww,Vw=$w=Gw=Ww=null}function Bs(t,n,e){this.target=t,this.type=n,this.transform=e}function Hs(t,n,e){this.k=t,this.x=n,this.y=e}function Xs(t){return t.__zoom||eM}function Vs(){t.event.stopImmediatePropagation()}function Ws(){return!t.event.button}function $s(){var t,n,e=this;return e instanceof SVGElement?(e=e.ownerSVGElement||e,t=e.width.baseVal.value,n=e.height.baseVal.value):(t=e.clientWidth,n=e.clientHeight),[[0,0],[t,n]]}function Gs(){return this.__zoom||eM}function Zs(){return-t.event.deltaY*(t.event.deltaMode?120:1)/500}function Js(){return"ontouchstart"in this}var Qs=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN},Ks=function(t){return 1===t.length&&(t=n(t)),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)<0?r=o+1:i=o}return r},right:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)>0?i=o:r=o+1}return r}}},tl=Ks(Qs),nl=tl.right,el=tl.left,rl=function(t,n){null==n&&(n=e);for(var r=0,i=t.length-1,o=t[0],u=new Array(i<0?0:i);r<i;)u[r]=n(o,o=t[++r]);return u},il=function(t,n,r){var i,o,u,a,c=t.length,s=n.length,l=new Array(c*s);for(null==r&&(r=e),i=u=0;i<c;++i)for(a=t[i],o=0;o<s;++o,++u)l[u]=r(a,n[o]);return l},ol=function(t,n){return n<t?-1:n>t?1:n>=t?0:NaN},ul=function(t){return null===t?NaN:+t},al=function(t,n){var e,r,i=t.length,o=0,u=-1,a=0,c=0;if(null==n)for(;++u<i;)isNaN(e=ul(t[u]))||(r=e-a,a+=r/++o,c+=r*(e-a));else for(;++u<i;)isNaN(e=ul(n(t[u],u,t)))||(r=e-a,a+=r/++o,c+=r*(e-a));if(o>1)return c/(o-1)},cl=function(t,n){var e=al(t,n);return e?Math.sqrt(e):e},sl=function(t,n){var e,r,i,o=t.length,u=-1;if(null==n){for(;++u<o;)if(null!=(e=t[u])&&e>=e)for(r=i=e;++u<o;)null!=(e=t[u])&&(r>e&&(r=e),i<e&&(i=e))}else for(;++u<o;)if(null!=(e=n(t[u],u,t))&&e>=e)for(r=i=e;++u<o;)null!=(e=n(t[u],u,t))&&(r>e&&(r=e),i<e&&(i=e));return[r,i]},ll=Array.prototype,fl=ll.slice,hl=ll.map,pl=function(t){return function(){return t}},dl=function(t){return t},vl=function(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):i<3?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),o=new Array(i);++r<i;)o[r]=t+r*e;return o},yl=Math.sqrt(50),_l=Math.sqrt(10),gl=Math.sqrt(2),ml=function(t,n,e){var i,o,u,a=n<t,c=-1;if(a&&(i=t,t=n,n=i),0===(u=r(t,n,e))||!isFinite(u))return[];if(u>0)for(t=Math.ceil(t/u),n=Math.floor(n/u),o=new Array(i=Math.ceil(n-t+1));++c<i;)o[c]=(t+c)*u;else for(t=Math.floor(t*u),n=Math.ceil(n*u),o=new Array(i=Math.ceil(t-n+1));++c<i;)o[c]=(t-c)/u;return a&&o.reverse(),o},xl=function(t){return Math.ceil(Math.log(t.length)/Math.LN2)+1},bl=function(){function t(t){var o,u,a=t.length,c=new Array(a);for(o=0;o<a;++o)c[o]=n(t[o],o,t);var s=e(c),l=s[0],f=s[1],h=r(c,l,f);Array.isArray(h)||(h=i(l,f,h),h=vl(Math.ceil(l/h)*h,Math.floor(f/h)*h,h));for(var p=h.length;h[0]<=l;)h.shift(),--p;for(;h[p-1]>f;)h.pop(),--p;var d,v=new Array(p+1);for(o=0;o<=p;++o)d=v[o]=[],d.x0=o>0?h[o-1]:l,d.x1=o<p?h[o]:f;for(o=0;o<a;++o)u=c[o],l<=u&&u<=f&&v[nl(h,u,0,p)].push(t[o]);return v}var n=dl,e=sl,r=xl;return t.value=function(e){return arguments.length?(n="function"==typeof e?e:pl(e),t):n},t.domain=function(n){return arguments.length?(e="function"==typeof n?n:pl([n[0],n[1]]),t):e},t.thresholds=function(n){return arguments.length?(r="function"==typeof n?n:pl(Array.isArray(n)?fl.call(n):n),t):r},t},wl=function(t,n,e){if(null==e&&(e=ul),r=t.length){if((n=+n)<=0||r<2)return+e(t[0],0,t);if(n>=1)return+e(t[r-1],r-1,t);var r,i=(r-1)*n,o=Math.floor(i),u=+e(t[o],o,t);return u+(+e(t[o+1],o+1,t)-u)*(i-o)}},Ml=function(t,n,e){return t=hl.call(t,ul).sort(Qs),Math.ceil((e-n)/(2*(wl(t,.75)-wl(t,.25))*Math.pow(t.length,-1/3)))},El=function(t,n,e){return Math.ceil((e-n)/(3.5*cl(t)*Math.pow(t.length,-1/3)))},Sl=function(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&e>r&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&e>r&&(r=e);return r},Tl=function(t,n){var e,r=t.length,i=r,o=-1,u=0;if(null==n)for(;++o<r;)isNaN(e=ul(t[o]))?--i:u+=e;else for(;++o<r;)isNaN(e=ul(n(t[o],o,t)))?--i:u+=e;if(i)return u/i},kl=function(t,n){var e,r=t.length,i=-1,o=[];if(null==n)for(;++i<r;)isNaN(e=ul(t[i]))||o.push(e);else for(;++i<r;)isNaN(e=ul(n(t[i],i,t)))||o.push(e);return wl(o.sort(Qs),.5)},Nl=function(t){for(var n,e,r,i=t.length,o=-1,u=0;++o<i;)u+=t[o].length;for(e=new Array(u);--i>=0;)for(r=t[i],n=r.length;--n>=0;)e[--u]=r[n];return e},Cl=function(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&r>e&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&r>e&&(r=e);return r},Al=function(t,n){for(var e=n.length,r=new Array(e);e--;)r[e]=t[n[e]];return r},Pl=function(t,n){if(e=t.length){var e,r,i=0,o=0,u=t[o];for(null==n&&(n=Qs);++i<e;)(n(r=t[i],u)<0||0!==n(u,u))&&(u=r,o=i);return 0===n(u,u)?o:void 0}},jl=function(t,n,e){for(var r,i,o=(null==e?t.length:e)-(n=null==n?0:+n);o;)i=Math.random()*o--|0,r=t[o+n],t[o+n]=t[i+n],t[i+n]=r;return t},Ol=function(t,n){var e,r=t.length,i=-1,o=0;if(null==n)for(;++i<r;)(e=+t[i])&&(o+=e);else for(;++i<r;)(e=+n(t[i],i,t))&&(o+=e);return o},Dl=function(t){if(!(i=t.length))return[];for(var n=-1,e=Cl(t,o),r=new Array(e);++n<e;)for(var i,u=-1,a=r[n]=new Array(i);++u<i;)a[u]=t[u][n];return r},zl=function(){return Dl(arguments)},Ll=Array.prototype.slice,Rl=function(t){return t},Ul=1,ql=2,Il=3,Fl=4,Yl=1e-6,Bl={value:function(){}};g.prototype=_.prototype={constructor:g,on:function(t,n){var e,r=this._,i=m(t+"",r),o=-1,u=i.length;{if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++o<u;)if(e=(t=i[o]).type)r[e]=b(r[e],t.name,n);else if(null==n)for(e in r)r[e]=b(r[e],t.name,null);return this}for(;++o<u;)if((e=(t=i[o]).type)&&(e=x(r[e],t.name)))return e}},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new g(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(r=this._[t],o=0,e=r.length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};var Hl="http://www.w3.org/1999/xhtml",Xl={svg:"http://www.w3.org/2000/svg",xhtml:Hl,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},Vl=function(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),Xl.hasOwnProperty(n)?{space:Xl[n],local:t}:t},Wl=function(t){var n=Vl(t);return(n.local?M:w)(n)},$l=0;S.prototype=E.prototype={constructor:S,get:function(t){for(var n=this._;!(n in t);)if(!(t=t.parentNode))return;return t[n]},set:function(t,n){return t[this._]=n},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};var Gl=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var Zl=document.documentElement;if(!Zl.matches){var Jl=Zl.webkitMatchesSelector||Zl.msMatchesSelector||Zl.mozMatchesSelector||Zl.oMatchesSelector;Gl=function(t){return function(){return Jl.call(this,t)}}}}var Ql=Gl,Kl={};if(t.event=null,"undefined"!=typeof document){"onmouseenter"in document.documentElement||(Kl={mouseenter:"mouseover",mouseleave:"mouseout"})}var tf=function(t,n,e){var r,i,o=N(t+""),u=o.length;{if(!(arguments.length<2)){for(a=n?A:C,null==e&&(e=!1),r=0;r<u;++r)this.each(a(o[r],n,e));return this}var a=this.node().__on;if(a)for(var c,s=0,l=a.length;s<l;++s)for(r=0,c=a[s];r<u;++r)if((i=o[r]).type===c.type&&i.name===c.name)return c.value}},nf=function(){for(var n,e=t.event;n=e.sourceEvent;)e=n;return e},ef=function(t,n){var e=t.ownerSVGElement||t;if(e.createSVGPoint){var r=e.createSVGPoint();return r.x=n.clientX,r.y=n.clientY,r=r.matrixTransform(t.getScreenCTM().inverse()),[r.x,r.y]}var i=t.getBoundingClientRect();return[n.clientX-i.left-t.clientLeft,n.clientY-i.top-t.clientTop]},rf=function(t){var n=nf();return n.changedTouches&&(n=n.changedTouches[0]),ef(t,n)},of=function(t){return null==t?j:function(){return this.querySelector(t)}},uf=function(t){"function"!=typeof t&&(t=of(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u,a=n[i],c=a.length,s=r[i]=new Array(c),l=0;l<c;++l)(o=a[l])&&(u=t.call(o,o.__data__,l,a))&&("__data__"in o&&(u.__data__=o.__data__),s[l]=u);return new gt(r,this._parents)},af=function(t){return null==t?O:function(){return this.querySelectorAll(t)}},cf=function(t){"function"!=typeof t&&(t=af(t));for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var u,a=n[o],c=a.length,s=0;s<c;++s)(u=a[s])&&(r.push(t.call(u,u.__data__,s,a)),i.push(u));return new gt(r,i)},sf=function(t){"function"!=typeof t&&(t=Ql(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u=n[i],a=u.length,c=r[i]=[],s=0;s<a;++s)(o=u[s])&&t.call(o,o.__data__,s,u)&&c.push(o);return new gt(r,this._parents)},lf=function(t){return new Array(t.length)},ff=function(){return new gt(this._enter||this._groups.map(lf),this._parents)};D.prototype={constructor:D,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var hf=function(t){return function(){return t}},pf="$",df=function(t,n){if(!t)return p=new Array(this.size()),s=-1,this.each(function(t){p[++s]=t}),p;var e=n?L:z,r=this._parents,i=this._groups;"function"!=typeof t&&(t=hf(t));for(var o=i.length,u=new Array(o),a=new Array(o),c=new Array(o),s=0;s<o;++s){var l=r[s],f=i[s],h=f.length,p=t.call(l,l&&l.__data__,s,r),d=p.length,v=a[s]=new Array(d),y=u[s]=new Array(d);e(l,f,v,y,c[s]=new Array(h),p,n);for(var _,g,m=0,x=0;m<d;++m)if(_=v[m]){for(m>=x&&(x=m+1);!(g=y[x])&&++x<d;);_._next=g||null}}return u=new gt(u,r),u._enter=a,u._exit=c,u},vf=function(){return new gt(this._exit||this._groups.map(lf),this._parents)},yf=function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),u=new Array(r),a=0;a<o;++a)for(var c,s=n[a],l=e[a],f=s.length,h=u[a]=new Array(f),p=0;p<f;++p)(c=s[p]||l[p])&&(h[p]=c);for(;a<r;++a)u[a]=n[a];return new gt(u,this._parents)},_f=function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,u=i[o];--o>=0;)(r=i[o])&&(u&&u!==r.nextSibling&&u.parentNode.insertBefore(r,u),u=r);return this},gf=function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=R);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var u,a=e[o],c=a.length,s=i[o]=new Array(c),l=0;l<c;++l)(u=a[l])&&(s[l]=u);s.sort(n)}return new gt(i,this._parents).order()},mf=function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},xf=function(){var t=new Array(this.size()),n=-1;return this.each(function(){t[++n]=this}),t},bf=function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var u=r[i];if(u)return u}return null},wf=function(){var t=0;return this.each(function(){++t}),t},Mf=function(){return!this.node()},Ef=function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],u=0,a=o.length;u<a;++u)(i=o[u])&&t.call(i,i.__data__,u,o);return this},Sf=function(t,n){var e=Vl(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?q:U:"function"==typeof n?e.local?B:Y:e.local?F:I)(e,n))},Tf=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView},kf=function(t,n,e){return arguments.length>1?this.each((null==n?H:"function"==typeof n?V:X)(t,n,null==e?"":e)):W(this.node(),t)},Nf=function(t,n){return arguments.length>1?this.each((null==n?$:"function"==typeof n?Z:G)(t,n)):this.node()[t]};K.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var Cf=function(t,n){var e=J(t+"");if(arguments.length<2){for(var r=Q(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?it:n?et:rt)(e,n))},Af=function(t){return arguments.length?this.each(null==t?ot:("function"==typeof t?at:ut)(t)):this.node().textContent},Pf=function(t){return arguments.length?this.each(null==t?ct:("function"==typeof t?lt:st)(t)):this.node().innerHTML},jf=function(){return this.each(ft)},Of=function(){return this.each(ht)},Df=function(t){var n="function"==typeof t?t:Wl(t);return this.select(function(){return this.appendChild(n.apply(this,arguments))})},zf=function(t,n){var e="function"==typeof t?t:Wl(t),r=null==n?pt:"function"==typeof n?n:of(n);return this.select(function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)})},Lf=function(){return this.each(dt)},Rf=function(t){return arguments.length?this.property("__data__",t):this.node().__data__},Uf=function(t,n){return this.each(("function"==typeof n?_t:yt)(t,n))},qf=[null];gt.prototype=mt.prototype={constructor:gt,select:uf,selectAll:cf,filter:sf,data:df,enter:ff,exit:vf,merge:yf,order:_f,sort:gf,call:mf,nodes:xf,node:bf,size:wf,empty:Mf,each:Ef,attr:Sf,style:kf,property:Nf,classed:Cf,text:Af,html:Pf,raise:jf,lower:Of,append:Df,insert:zf,remove:Lf,datum:Rf,on:tf,dispatch:Uf};var If=function(t){return"string"==typeof t?new gt([[document.querySelector(t)]],[document.documentElement]):new gt([[t]],qf)},Ff=function(t){return"string"==typeof t?new gt([document.querySelectorAll(t)],[document.documentElement]):new gt([null==t?[]:t],qf)},Yf=function(t,n,e){arguments.length<3&&(e=n,n=nf().changedTouches);for(var r,i=0,o=n?n.length:0;i<o;++i)if((r=n[i]).identifier===e)return ef(t,r);return null},Bf=function(t,n){null==n&&(n=nf().touches);for(var e=0,r=n?n.length:0,i=new Array(r);e<r;++e)i[e]=ef(t,n[e]);return i},Hf=function(){t.event.preventDefault(),t.event.stopImmediatePropagation()},Xf=function(t){var n=t.document.documentElement,e=If(t).on("dragstart.drag",Hf,!0);"onselectstart"in n?e.on("selectstart.drag",Hf,!0):(n.__noselect=n.style.MozUserSelect,n.style.MozUserSelect="none")},Vf=function(t){return function(){return t}};wt.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var Wf=function(){function n(t){t.on("mousedown.drag",e).filter(Tt).on("touchstart.drag",o).on("touchmove.drag",u).on("touchend.drag touchcancel.drag",a).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function e(){if(!h&&p.apply(this,arguments)){var n=c("mouse",d.apply(this,arguments),rf,this,arguments);n&&(If(t.event.view).on("mousemove.drag",r,!0).on("mouseup.drag",i,!0),Xf(t.event.view),xt(),f=!1,s=t.event.clientX,l=t.event.clientY,n("start"))}}function r(){if(Hf(),!f){var n=t.event.clientX-s,e=t.event.clientY-l;f=n*n+e*e>x}y.mouse("drag")}function i(){If(t.event.view).on("mousemove.drag mouseup.drag",null),bt(t.event.view,f),Hf(),y.mouse("end")}function o(){if(p.apply(this,arguments)){var n,e,r=t.event.changedTouches,i=d.apply(this,arguments),o=r.length;for(n=0;n<o;++n)(e=c(r[n].identifier,i,Yf,this,arguments))&&(xt(),e("start"))}}function u(){var n,e,r=t.event.changedTouches,i=r.length;for(n=0;n<i;++n)(e=y[r[n].identifier])&&(Hf(),e("drag"))}function a(){var n,e,r=t.event.changedTouches,i=r.length;for(h&&clearTimeout(h),h=setTimeout(function(){h=null},500),n=0;n<i;++n)(e=y[r[n].identifier])&&(xt(),e("end"))}function c(e,r,i,o,u){var a,c,s,l=i(r,e),f=g.copy();if(P(new wt(n,"beforestart",a,e,m,l[0],l[1],0,0,f),function(){return null!=(t.event.subject=a=v.apply(o,u))&&(c=a.x-l[0]||0,s=a.y-l[1]||0,!0)}))return function t(h){var p,d=l;switch(h){case"start":y[e]=t,p=m++;break;case"end":delete y[e],--m;case"drag":l=i(r,e),p=m}P(new wt(n,h,a,e,p,l[0]+c,l[1]+s,l[0]-d[0],l[1]-d[1],f),f.apply,f,[h,o,u])}}var s,l,f,h,p=Mt,d=Et,v=St,y={},g=_("start","drag","end"),m=0,x=0;return n.filter=function(t){return arguments.length?(p="function"==typeof t?t:Vf(!!t),n):p},n.container=function(t){return arguments.length?(d="function"==typeof t?t:Vf(t),n):d},n.subject=function(t){return arguments.length?(v="function"==typeof t?t:Vf(t),n):v},n.on=function(){var t=g.on.apply(g,arguments);return t===g?n:t},n.clickDistance=function(t){return arguments.length?(x=(t=+t)*t,n):Math.sqrt(x)},n},$f=function(t,n,e){t.prototype=n.prototype=e,e.constructor=t},Gf="\\s*([+-]?\\d+)\\s*",Zf="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Jf="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Qf=/^#([0-9a-f]{3})$/,Kf=/^#([0-9a-f]{6})$/,th=new RegExp("^rgb\\("+[Gf,Gf,Gf]+"\\)$"),nh=new RegExp("^rgb\\("+[Jf,Jf,Jf]+"\\)$"),eh=new RegExp("^rgba\\("+[Gf,Gf,Gf,Zf]+"\\)$"),rh=new RegExp("^rgba\\("+[Jf,Jf,Jf,Zf]+"\\)$"),ih=new RegExp("^hsl\\("+[Zf,Jf,Jf]+"\\)$"),oh=new RegExp("^hsla\\("+[Zf,Jf,Jf,Zf]+"\\)$"),uh={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};$f(Nt,Ct,{displayable:function(){return this.rgb().displayable()},toString:function(){return this.rgb()+""}}),$f(Dt,Ot,kt(Nt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Dt(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Dt(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},toString:function(){var t=this.opacity;return t=isNaN(t)?1:Math.max(0,Math.min(1,t)),(1===t?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),$f(Ut,Rt,kt(Nt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Ut(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Ut(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new Dt(qt(t>=240?t-240:t+120,i,r),qt(t,i,r),qt(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var ah=Math.PI/180,ch=180/Math.PI,sh=.95047,lh=1,fh=1.08883,hh=4/29,ph=6/29,dh=3*ph*ph,vh=ph*ph*ph;$f(Yt,Ft,kt(Nt,{brighter:function(t){return new Yt(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new Yt(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return t=lh*Ht(t),n=sh*Ht(n),e=fh*Ht(e),new Dt(Xt(3.2404542*n-1.5371385*t-.4985314*e),Xt(-.969266*n+1.8760108*t+.041556*e),Xt(.0556434*n-.2040259*t+1.0572252*e),this.opacity)}})),$f(Gt,$t,kt(Nt,{brighter:function(t){return new Gt(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new Gt(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return It(this).rgb()}}));var yh=-.14861,_h=1.78277,gh=-.29227,mh=-.90649,xh=1.97294,bh=xh*mh,wh=xh*_h,Mh=_h*gh-mh*yh;$f(Qt,Jt,kt(Nt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Qt(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Qt(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*ah,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new Dt(255*(n+e*(yh*r+_h*i)),255*(n+e*(gh*r+mh*i)),255*(n+e*(xh*r)),this.opacity)}}));var Eh,Sh,Th,kh,Nh,Ch,Ah=function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],o=t[r+1],u=r>0?t[r-1]:2*i-o,a=r<n-1?t[r+2]:2*o-i;return Kt((e-r/n)*n,u,i,o,a)}},Ph=function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],o=t[r%n],u=t[(r+1)%n],a=t[(r+2)%n];return Kt((e-r/n)*n,i,o,u,a)}},jh=function(t){return function(){return t}},Oh=function t(n){function e(t,n){var e=r((t=Ot(t)).r,(n=Ot(n)).r),i=r(t.g,n.g),o=r(t.b,n.b),u=on(t.opacity,n.opacity);return function(n){return t.r=e(n),t.g=i(n),t.b=o(n),t.opacity=u(n),t+""}}var r=rn(n);return e.gamma=t,e}(1),Dh=un(Ah),zh=un(Ph),Lh=function(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(r),u=new Array(r);for(e=0;e<i;++e)o[e]=Bh(t[e],n[e]);for(;e<r;++e)u[e]=n[e];return function(t){for(e=0;e<i;++e)u[e]=o[e](t);return u}},Rh=function(t,n){var e=new Date;return t=+t,n-=t,function(r){return e.setTime(t+n*r),e}},Uh=function(t,n){return t=+t,n-=t,function(e){return t+n*e}},qh=function(t,n){var e,r={},i={};null!==t&&"object"===(void 0===t?"undefined":u(t))||(t={}),null!==n&&"object"===(void 0===n?"undefined":u(n))||(n={});for(e in n)e in t?r[e]=Bh(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}},Ih=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Fh=new RegExp(Ih.source,"g"),Yh=function(t,n){var e,r,i,o=Ih.lastIndex=Fh.lastIndex=0,u=-1,a=[],c=[];for(t+="",n+="";(e=Ih.exec(t))&&(r=Fh.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),a[u]?a[u]+=i:a[++u]=i),(e=e[0])===(r=r[0])?a[u]?a[u]+=r:a[++u]=r:(a[++u]=null,c.push({i:u,x:Uh(e,r)})),o=Fh.lastIndex;return o<n.length&&(i=n.slice(o),a[u]?a[u]+=i:a[++u]=i),a.length<2?c[0]?cn(c[0].x):an(n):(n=c.length,function(t){for(var e,r=0;r<n;++r)a[(e=c[r]).i]=e.x(t);return a.join("")})},Bh=function(t,n){var e,r=void 0===n?"undefined":u(n);return null==n||"boolean"===r?jh(n):("number"===r?Uh:"string"===r?(e=Ct(n))?(n=e,Oh):Yh:n instanceof Ct?Oh:n instanceof Date?Rh:Array.isArray(n)?Lh:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?qh:Uh)(t,n)},Hh=function(t,n){return t=+t,n-=t,function(e){return Math.round(t+n*e)}},Xh=180/Math.PI,Vh={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},Wh=function(t,n,e,r,i,o){var u,a,c;return(u=Math.sqrt(t*t+n*n))&&(t/=u,n/=u),(c=t*e+n*r)&&(e-=t*c,r-=n*c),(a=Math.sqrt(e*e+r*r))&&(e/=a,r/=a,c/=a),t*r<n*e&&(t=-t,n=-n,c=-c,u=-u),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*Xh,skewX:Math.atan(c)*Xh,scaleX:u,scaleY:a}},$h=fn(sn,"px, ","px)","deg)"),Gh=fn(ln,", ",")",")"),Zh=Math.SQRT2,Jh=function(t,n){var e,r,i=t[0],o=t[1],u=t[2],a=n[0],c=n[1],s=n[2],l=a-i,f=c-o,h=l*l+f*f;if(h<1e-12)r=Math.log(s/u)/Zh,e=function(t){return[i+t*l,o+t*f,u*Math.exp(Zh*t*r)]};else{var p=Math.sqrt(h),d=(s*s-u*u+4*h)/(2*u*2*p),v=(s*s-u*u-4*h)/(2*s*2*p),y=Math.log(Math.sqrt(d*d+1)-d),_=Math.log(Math.sqrt(v*v+1)-v);r=(_-y)/Zh,e=function(t){var n=t*r,e=hn(y),a=u/(2*p)*(e*dn(Zh*n+y)-pn(y));return[i+a*l,o+a*f,u*e/hn(Zh*n+y)]}}return e.duration=1e3*r,e},Qh=vn(en),Kh=vn(on),tp=_n(en),np=_n(on),ep=gn(en),rp=gn(on),ip=function(t,n){for(var e=new Array(n),r=0;r<n;++r)e[r]=t(r/(n-1));return e},op=0,up=0,ap=0,cp=1e3,sp=0,lp=0,fp=0,hp="object"===("undefined"==typeof performance?"undefined":u(performance))&&performance.now?performance:Date,pp="object"===("undefined"==typeof window?"undefined":u(window))&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};bn.prototype=wn.prototype={constructor:bn,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?mn():+e)+(null==n?0:+n),this._next||Ch===this||(Ch?Ch._next=this:Nh=this,Ch=this),this._call=t,this._time=e,kn()},stop:function(){this._call&&(this._call=null,this._time=1/0,kn())}};var dp=function(t,n,e){var r=new bn;return n=null==n?0:+n,r.restart(function(e){r.stop(),t(e+n)},n,e),r},vp=function(t,n,e){var r=new bn,i=n;return null==n?(r.restart(t,n,e),r):(n=+n,e=null==e?mn():+e,r.restart(function o(u){u+=i,r.restart(o,i+=n,e),t(u)},n,e),r)},yp=_("start","end","interrupt"),_p=[],gp=0,mp=1,xp=2,bp=3,wp=4,Mp=5,Ep=6,Sp=function(t,n,e,r,i,o){var u=t.__transition;if(u){if(e in u)return}else t.__transition={};Pn(t,e,{name:n,index:r,group:i,on:yp,tween:_p,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:gp})},Tp=function(t,n){var e,r,i,o=t.__transition,u=!0;if(o){n=null==n?null:n+"";for(i in o)(e=o[i]).name===n?(r=e.state>xp&&e.state<Mp,e.state=Ep,e.timer.stop(),r&&e.on.call("interrupt",t,t.__data__,e.index,e.group),delete o[i]):u=!1;u&&delete t.__transition}},kp=function(t){return this.each(function(){Tp(this,t)})},Np=function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=An(this.node(),e).tween,o=0,u=i.length;o<u;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?jn:On)(e,t,n))},Cp=function(t,n){var e;return("number"==typeof n?Uh:n instanceof Ct?Oh:(e=Ct(n))?(n=e,Oh):Yh)(t,n)},Ap=function(t,n){var e=Vl(t),r="transform"===e?Gh:Cp;return this.attrTween(t,"function"==typeof n?(e.local?In:qn)(e,r,Dn(this,"attr."+t,n)):null==n?(e.local?Ln:zn)(e):(e.local?Un:Rn)(e,r,n+""))},Pp=function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=Vl(t);return this.tween(e,(r.local?Fn:Yn)(r,n))},jp=function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Bn:Hn)(n,t)):An(this.node(),n).delay},Op=function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Xn:Vn)(n,t)):An(this.node(),n).duration},Dp=function(t){var n=this._id;return arguments.length?this.each(Wn(n,t)):An(this.node(),n).ease},zp=function(t){"function"!=typeof t&&(t=Ql(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u=n[i],a=u.length,c=r[i]=[],s=0;s<a;++s)(o=u[s])&&t.call(o,o.__data__,s,u)&&c.push(o);return new ie(r,this._parents,this._name,this._id)},Lp=function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),u=new Array(r),a=0;a<o;++a)for(var c,s=n[a],l=e[a],f=s.length,h=u[a]=new Array(f),p=0;p<f;++p)(c=s[p]||l[p])&&(h[p]=c);for(;a<r;++a)u[a]=n[a];return new ie(u,this._parents,this._name,this._id)},Rp=function(t,n){var e=this._id;return arguments.length<2?An(this.node(),e).on.on(t):this.each(Gn(e,t,n))},Up=function(){return this.on("end.remove",Zn(this._id))},qp=function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=of(t));for(var r=this._groups,i=r.length,o=new Array(i),u=0;u<i;++u)for(var a,c,s=r[u],l=s.length,f=o[u]=new Array(l),h=0;h<l;++h)(a=s[h])&&(c=t.call(a,a.__data__,h,s))&&("__data__"in a&&(c.__data__=a.__data__),f[h]=c,Sp(f[h],n,e,h,f,An(a,e)));return new ie(o,this._parents,n,e)},Ip=function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=af(t));for(var r=this._groups,i=r.length,o=[],u=[],a=0;a<i;++a)for(var c,s=r[a],l=s.length,f=0;f<l;++f)if(c=s[f]){for(var h,p=t.call(c,c.__data__,f,s),d=An(c,e),v=0,y=p.length;v<y;++v)(h=p[v])&&Sp(h,n,e,v,p,d);o.push(p),u.push(c)}return new ie(o,u,n,e)},Fp=mt.prototype.constructor,Yp=function(){return new Fp(this._groups,this._parents)},Bp=function(t,n,e){var r="transform"==(t+="")?$h:Cp;return null==n?this.styleTween(t,Jn(t,r)).on("end.style."+t,Qn(t)):this.styleTween(t,"function"==typeof n?te(t,r,Dn(this,"style."+t,n)):Kn(t,r,n+""),e)},Hp=function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,ne(t,n,null==e?"":e))},Xp=function(t){return this.tween("text","function"==typeof t?re(Dn(this,"text",t)):ee(null==t?"":t+""))},Vp=function(){for(var t=this._name,n=this._id,e=ue(),r=this._groups,i=r.length,o=0;o<i;++o)for(var u,a=r[o],c=a.length,s=0;s<c;++s)if(u=a[s]){var l=An(u,n);Sp(u,t,e,s,a,{time:l.time+l.delay+l.duration,delay:0,duration:l.duration,ease:l.ease})}return new ie(r,this._parents,t,e)},Wp=0,$p=mt.prototype;ie.prototype=oe.prototype={constructor:ie,select:qp,selectAll:Ip,filter:zp,merge:Lp,selection:Yp,transition:Vp,call:$p.call,nodes:$p.nodes,node:$p.node,size:$p.size,empty:$p.empty,each:$p.each,on:Rp,attr:Ap,attrTween:Pp,style:Bp,styleTween:Hp,text:Xp,remove:Up,tween:Np,delay:jp,duration:Op,ease:Dp};var Gp=function t(n){function e(t){return Math.pow(t,n)}return n=+n,e.exponent=t,e}(3),Zp=function t(n){function e(t){return 1-Math.pow(1-t,n)}return n=+n,e.exponent=t,e}(3),Jp=function t(n){function e(t){return((t*=2)<=1?Math.pow(t,n):2-Math.pow(2-t,n))/2}return n=+n,e.exponent=t,e}(3),Qp=Math.PI,Kp=Qp/2,td=4/11,nd=6/11,ed=8/11,rd=.75,id=9/11,od=10/11,ud=.9375,ad=21/22,cd=63/64,sd=1/td/td,ld=function t(n){function e(t){return t*t*((n+1)*t-n)}return n=+n,e.overshoot=t,e}(1.70158),fd=function t(n){function e(t){return--t*t*((n+1)*t+n)+1}return n=+n,e.overshoot=t,e}(1.70158),hd=function t(n){function e(t){return((t*=2)<1?t*t*((n+1)*t-n):(t-=2)*t*((n+1)*t+n)+2)/2}return n=+n,e.overshoot=t,e}(1.70158),pd=2*Math.PI,dd=function t(n,e){function r(t){return n*Math.pow(2,10*--t)*Math.sin((i-t)/e)}var i=Math.asin(1/(n=Math.max(1,n)))*(e/=pd);return r.amplitude=function(n){return t(n,e*pd)},r.period=function(e){return t(n,e)},r}(1,.3),vd=function t(n,e){function r(t){return 1-n*Math.pow(2,-10*(t=+t))*Math.sin((t+i)/e)}var i=Math.asin(1/(n=Math.max(1,n)))*(e/=pd);return r.amplitude=function(n){return t(n,e*pd)},r.period=function(e){return t(n,e)},r}(1,.3),yd=function t(n,e){function r(t){return((t=2*t-1)<0?n*Math.pow(2,10*t)*Math.sin((i-t)/e):2-n*Math.pow(2,-10*t)*Math.sin((i+t)/e))/2}var i=Math.asin(1/(n=Math.max(1,n)))*(e/=pd);return r.amplitude=function(n){return t(n,e*pd)},r.period=function(e){return t(n,e)},r}(1,.3),_d={time:null,delay:0,duration:250,ease:pe},gd=function(t){var n,e;t instanceof ie?(n=t._id,t=t._name):(n=ue(),(e=_d).time=mn(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var u,a=r[o],c=a.length,s=0;s<c;++s)(u=a[s])&&Sp(u,t,n,s,a,e||Te(u,n));return new ie(r,this._parents,t,n)};mt.prototype.interrupt=kp,mt.prototype.transition=gd;var md=[null],xd=function(t,n){var e,r,i=t.__transition;if(i){n=null==n?null:n+"";for(r in i)if((e=i[r]).state>mp&&e.name===n)return new ie([[t]],md,n,+r)}return null},bd=function(t){return function(){return t}},wd=function(t,n,e){this.target=t,this.type=n,this.selection=e},Md=function(){t.event.preventDefault(),t.event.stopImmediatePropagation()},Ed={name:"drag"},Sd={name:"space"},Td={name:"handle"},kd={name:"center"},Nd={name:"x",handles:["e","w"].map(Ne),input:function(t,n){return t&&[[t[0],n[0][1]],[t[1],n[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},Cd={name:"y",handles:["n","s"].map(Ne),input:function(t,n){return t&&[[n[0][0],t[0]],[n[1][0],t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},Ad={name:"xy",handles:["n","e","s","w","nw","ne","se","sw"].map(Ne),input:function(t){return t},output:function(t){return t}},Pd={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},jd={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},Od={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},Dd={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},zd={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1},Ld=function(){return Le(Ad)},Rd=Math.cos,Ud=Math.sin,qd=Math.PI,Id=qd/2,Fd=2*qd,Yd=Math.max,Bd=function(){function t(t){var o,u,a,c,s,l,f=t.length,h=[],p=vl(f),d=[],v=[],y=v.groups=new Array(f),_=new Array(f*f);for(o=0,s=-1;++s<f;){for(u=0,l=-1;++l<f;)u+=t[s][l];h.push(u),d.push(vl(f)),o+=u}for(e&&p.sort(function(t,n){return e(h[t],h[n])}),r&&d.forEach(function(n,e){n.sort(function(n,i){return r(t[e][n],t[e][i])})}),o=Yd(0,Fd-n*f)/o,c=o?n:Fd/f,u=0,s=-1;++s<f;){for(a=u,l=-1;++l<f;){var g=p[s],m=d[g][l],x=t[g][m],b=u,w=u+=x*o;_[m*f+g]={index:g,subindex:m,startAngle:b,endAngle:w,value:x}}y[g]={index:g,startAngle:a,endAngle:u,value:h[g]},u+=c}for(s=-1;++s<f;)for(l=s-1;++l<f;){var M=_[l*f+s],E=_[s*f+l];(M.value||E.value)&&v.push(M.value<E.value?{source:E,target:M}:{source:M,target:E})}return i?v.sort(i):v}var n=0,e=null,r=null,i=null;return t.padAngle=function(e){return arguments.length?(n=Yd(0,e),t):n},t.sortGroups=function(n){return arguments.length?(e=n,t):e},t.sortSubgroups=function(n){return arguments.length?(r=n,t):r},t.sortChords=function(n){return arguments.length?(null==n?i=null:(i=Re(n))._=n,t):i&&i._},t},Hd=Array.prototype.slice,Xd=function(t){return function(){return t}},Vd=Math.PI,Wd=2*Vd,$d=Wd-1e-6;Ue.prototype=qe.prototype={constructor:Ue,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,o){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var o=this._x1,u=this._y1,a=e-t,c=r-n,s=o-t,l=u-n,f=s*s+l*l;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(f>1e-6)if(Math.abs(l*a-c*s)>1e-6&&i){var h=e-o,p=r-u,d=a*a+c*c,v=h*h+p*p,y=Math.sqrt(d),_=Math.sqrt(f),g=i*Math.tan((Vd-Math.acos((d+f-v)/(2*y*_)))/2),m=g/_,x=g/y;Math.abs(m-1)>1e-6&&(this._+="L"+(t+m*s)+","+(n+m*l)),this._+="A"+i+","+i+",0,0,"+ +(l*h>s*p)+","+(this._x1=t+x*a)+","+(this._y1=n+x*c)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,r,i,o){t=+t,n=+n,e=+e;var u=e*Math.cos(r),a=e*Math.sin(r),c=t+u,s=n+a,l=1^o,f=o?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+c+","+s:(Math.abs(this._x1-c)>1e-6||Math.abs(this._y1-s)>1e-6)&&(this._+="L"+c+","+s),e&&(f<0&&(f=f%Wd+Wd),f>$d?this._+="A"+e+","+e+",0,1,"+l+","+(t-u)+","+(n-a)+"A"+e+","+e+",0,1,"+l+","+(this._x1=c)+","+(this._y1=s):f>1e-6&&(this._+="A"+e+","+e+",0,"+ +(f>=Vd)+","+l+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};var Gd=function(){function t(){var t,a=Hd.call(arguments),c=n.apply(this,a),s=e.apply(this,a),l=+r.apply(this,(a[0]=c,a)),f=i.apply(this,a)-Id,h=o.apply(this,a)-Id,p=l*Rd(f),d=l*Ud(f),v=+r.apply(this,(a[0]=s,a)),y=i.apply(this,a)-Id,_=o.apply(this,a)-Id;if(u||(u=t=qe()),u.moveTo(p,d),u.arc(0,0,l,f,h),f===y&&h===_||(u.quadraticCurveTo(0,0,v*Rd(y),v*Ud(y)),u.arc(0,0,v,y,_)),u.quadraticCurveTo(0,0,p,d),u.closePath(),t)return u=null,t+""||null}var n=Ie,e=Fe,r=Ye,i=Be,o=He,u=null;return t.radius=function(n){return arguments.length?(r="function"==typeof n?n:Xd(+n),t):r},t.startAngle=function(n){return arguments.length?(i="function"==typeof n?n:Xd(+n),t):i},t.endAngle=function(n){return arguments.length?(o="function"==typeof n?n:Xd(+n),t):o},t.source=function(e){return arguments.length?(n=e,t):n},t.target=function(n){return arguments.length?(e=n,t):e},t.context=function(n){return arguments.length?(u=null==n?null:n,t):u},t};Xe.prototype=Ve.prototype={constructor:Xe,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,n){return this["$"+t]=n,this},remove:function(t){var n="$"+t;return n in this&&delete this[n]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)"$"===n[0]&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)"$"===n[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var n in this)"$"===n[0]&&t(this[n],n.slice(1),this)}};var Zd=function(){function t(n,i,u,a){if(i>=o.length)return null!=e&&n.sort(e),null!=r?r(n):n;for(var c,s,l,f=-1,h=n.length,p=o[i++],d=Ve(),v=u();++f<h;)(l=d.get(c=p(s=n[f])+""))?l.push(s):d.set(c,[s]);return d.each(function(n,e){a(v,e,t(n,i,u,a))}),v}function n(t,e){if(++e>o.length)return t;var i,a=u[e-1];return null!=r&&e>=o.length?i=t.entries():(i=[],t.each(function(t,r){i.push({key:r,values:n(t,e)})})),null!=a?i.sort(function(t,n){return a(t.key,n.key)}):i}var e,r,i,o=[],u=[];return i={object:function(n){return t(n,0,We,$e)},map:function(n){return t(n,0,Ge,Ze)},entries:function(e){return n(t(e,0,Ge,Ze),0)},key:function(t){return o.push(t),i},sortKeys:function(t){return u[o.length-1]=t,i},sortValues:function(t){return e=t,i},rollup:function(t){return r=t,i}}},Jd=Ve.prototype;Je.prototype=Qe.prototype={constructor:Je,has:Jd.has,add:function(t){return t+="",this["$"+t]=t,this},remove:Jd.remove,clear:Jd.clear,values:Jd.keys,size:Jd.size,empty:Jd.empty,each:Jd.each};var Qd=function(t){var n=[];for(var e in t)n.push(e);return n},Kd=function(t){var n=[];for(var e in t)n.push(t[e]);return n},tv=function(t){var n=[];for(var e in t)n.push({key:e,value:t[e]});return n},nv=function(t){function n(t,n){var r,i,o=e(t,function(t,e){if(r)return r(t,e-1);i=t,r=n?tr(t,n):Ke(t)});return o.columns=i,o}function e(t,n){function e(){if(l>=s)return u;if(i)return i=!1,o;var n,e=l;if(34===t.charCodeAt(e)){for(var r=e;r++<s;)if(34===t.charCodeAt(r)){if(34!==t.charCodeAt(r+1))break;++r}return l=r+2,n=t.charCodeAt(r+1),13===n?(i=!0,10===t.charCodeAt(r+2)&&++l):10===n&&(i=!0),t.slice(e+1,r).replace(/""/g,'"')}for(;l<s;){var a=1;if(10===(n=t.charCodeAt(l++)))i=!0;else if(13===n)i=!0,10===t.charCodeAt(l)&&(++l,++a);else if(n!==c)continue;return t.slice(e,l-a)}return t.slice(e)}for(var r,i,o={},u={},a=[],s=t.length,l=0,f=0;(r=e())!==u;){for(var h=[];r!==o&&r!==u;)h.push(r),r=e();n&&null==(h=n(h,f++))||a.push(h)}return a}function r(n,e){return null==e&&(e=nr(n)),[e.map(u).join(t)].concat(n.map(function(n){return e.map(function(t){return u(n[t])}).join(t)})).join("\n")}function i(t){return t.map(o).join("\n")}function o(n){return n.map(u).join(t)}function u(t){return null==t?"":a.test(t+="")?'"'+t.replace(/\"/g,'""')+'"':t}var a=new RegExp('["'+t+"\n\r]"),c=t.charCodeAt(0);return{parse:n,parseRows:e,format:r,formatRows:i}},ev=nv(","),rv=ev.parse,iv=ev.parseRows,ov=ev.format,uv=ev.formatRows,av=nv("\t"),cv=av.parse,sv=av.parseRows,lv=av.format,fv=av.formatRows,hv=function(t,n){function e(){var e,i,o=r.length,u=0,a=0;for(e=0;e<o;++e)i=r[e],u+=i.x,a+=i.y;for(u=u/o-t,a=a/o-n,e=0;e<o;++e)i=r[e],i.x-=u,i.y-=a}var r;return null==t&&(t=0),null==n&&(n=0),e.initialize=function(t){r=t},e.x=function(n){return arguments.length?(t=+n,e):t},e.y=function(t){return arguments.length?(n=+t,e):n},e},pv=function(t){return function(){return t}},dv=function(){return 1e-6*(Math.random()-.5)},vv=function(t){var n=+this._x.call(null,t),e=+this._y.call(null,t);return er(this.cover(n,e),n,e,t)},yv=function(t,n){if(isNaN(t=+t)||isNaN(n=+n))return this;var e=this._x0,r=this._y0,i=this._x1,o=this._y1;if(isNaN(e))i=(e=Math.floor(t))+1,o=(r=Math.floor(n))+1;else{if(!(e>t||t>i||r>n||n>o))return this;var u,a,c=i-e,s=this._root;switch(a=(n<(r+o)/2)<<1|t<(e+i)/2){case 0:do{u=new Array(4),u[a]=s,s=u}while(c*=2,i=e+c,o=r+c,t>i||n>o);break;case 1:do{u=new Array(4),u[a]=s,s=u}while(c*=2,e=i-c,o=r+c,e>t||n>o);break;case 2:do{u=new Array(4),u[a]=s,s=u}while(c*=2,i=e+c,r=o-c,t>i||r>n);break;case 3:do{u=new Array(4),u[a]=s,s=u}while(c*=2,e=i-c,r=o-c,e>t||r>n)}this._root&&this._root.length&&(this._root=s)}return this._x0=e,this._y0=r,this._x1=i,this._y1=o,this},_v=function(){var t=[];return this.visit(function(n){if(!n.length)do{t.push(n.data)}while(n=n.next)}),t},gv=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},mv=function(t,n,e,r,i){this.node=t,this.x0=n,this.y0=e,this.x1=r,this.y1=i},xv=function(t,n,e){var r,i,o,u,a,c,s,l=this._x0,f=this._y0,h=this._x1,p=this._y1,d=[],v=this._root;for(v&&d.push(new mv(v,l,f,h,p)),null==e?e=1/0:(l=t-e,f=n-e,h=t+e,p=n+e,e*=e);c=d.pop();)if(!(!(v=c.node)||(i=c.x0)>h||(o=c.y0)>p||(u=c.x1)<l||(a=c.y1)<f))if(v.length){var y=(i+u)/2,_=(o+a)/2;d.push(new mv(v[3],y,_,u,a),new mv(v[2],i,_,y,a),new mv(v[1],y,o,u,_),new mv(v[0],i,o,y,_)),(s=(n>=_)<<1|t>=y)&&(c=d[d.length-1],d[d.length-1]=d[d.length-1-s],d[d.length-1-s]=c)}else{var g=t-+this._x.call(null,v.data),m=n-+this._y.call(null,v.data),x=g*g+m*m;if(x<e){var b=Math.sqrt(e=x);l=t-b,f=n-b,h=t+b,p=n+b,r=v.data}}return r},bv=function(t){if(isNaN(o=+this._x.call(null,t))||isNaN(u=+this._y.call(null,t)))return this;var n,e,r,i,o,u,a,c,s,l,f,h,p=this._root,d=this._x0,v=this._y0,y=this._x1,_=this._y1;if(!p)return this;if(p.length)for(;;){if((s=o>=(a=(d+y)/2))?d=a:y=a,(l=u>=(c=(v+_)/2))?v=c:_=c,n=p,!(p=p[f=l<<1|s]))return this;if(!p.length)break;(n[f+1&3]||n[f+2&3]||n[f+3&3])&&(e=n,h=f)}for(;p.data!==t;)if(r=p,!(p=p.next))return this;return(i=p.next)&&delete p.next,r?(i?r.next=i:delete r.next,this):n?(i?n[f]=i:delete n[f],(p=n[0]||n[1]||n[2]||n[3])&&p===(n[3]||n[2]||n[1]||n[0])&&!p.length&&(e?e[h]=p:this._root=p),this):(this._root=i,this)},wv=function(){return this._root},Mv=function(){var t=0;return this.visit(function(n){if(!n.length)do{++t}while(n=n.next)}),t},Ev=function(t){var n,e,r,i,o,u,a=[],c=this._root;for(c&&a.push(new mv(c,this._x0,this._y0,this._x1,this._y1));n=a.pop();)if(!t(c=n.node,r=n.x0,i=n.y0,o=n.x1,u=n.y1)&&c.length){var s=(r+o)/2,l=(i+u)/2;(e=c[3])&&a.push(new mv(e,s,l,o,u)),(e=c[2])&&a.push(new mv(e,r,l,s,u)),(e=c[1])&&a.push(new mv(e,s,i,o,l)),(e=c[0])&&a.push(new mv(e,r,i,s,l))}return this},Sv=function(t){var n,e=[],r=[];for(this._root&&e.push(new mv(this._root,this._x0,this._y0,this._x1,this._y1));n=e.pop();){var i=n.node;if(i.length){var o,u=n.x0,a=n.y0,c=n.x1,s=n.y1,l=(u+c)/2,f=(a+s)/2;(o=i[0])&&e.push(new mv(o,u,a,l,f)),(o=i[1])&&e.push(new mv(o,l,a,c,f)),(o=i[2])&&e.push(new mv(o,u,f,l,s)),(o=i[3])&&e.push(new mv(o,l,f,c,s))}r.push(n)}for(;n=r.pop();)t(n.node,n.x0,n.y0,n.x1,n.y1);return this},Tv=function(t){return arguments.length?(this._x=t,this):this._x},kv=function(t){return arguments.length?(this._y=t,this):this._y},Nv=ar.prototype=cr.prototype;Nv.copy=function(){var t,n,e=new cr(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return e;if(!r.length)return e._root=sr(r),e;for(t=[{source:r,target:e._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(n=r.source[i])&&(n.length?t.push({source:n,target:r.target[i]=new Array(4)}):r.target[i]=sr(n));return e},Nv.add=vv,Nv.addAll=rr,Nv.cover=yv,Nv.data=_v,Nv.extent=gv,Nv.find=xv,Nv.remove=bv,Nv.removeAll=ir,Nv.root=wv,Nv.size=Mv,Nv.visit=Ev,Nv.visitAfter=Sv,Nv.x=Tv,Nv.y=kv;var Cv,Av=function(t){function n(){function t(t,n,e,r,i){var o=t.data,a=t.r,p=f+a;{if(!o)return n>s+p||r<s-p||e>l+p||i<l-p;if(o.index>c.index){var d=s-o.x-o.vx,v=l-o.y-o.vy,y=d*d+v*v;y<p*p&&(0===d&&(d=dv(),y+=d*d),0===v&&(v=dv(),y+=v*v),y=(p-(y=Math.sqrt(y)))/y*u,c.vx+=(d*=y)*(p=(a*=a)/(h+a)),c.vy+=(v*=y)*p,o.vx-=d*(p=1-p),o.vy-=v*p)}}}for(var n,r,c,s,l,f,h,p=i.length,d=0;d<a;++d)for(r=ar(i,lr,fr).visitAfter(e),n=0;n<p;++n)c=i[n],f=o[c.index],h=f*f,s=c.x+c.vx,l=c.y+c.vy,r.visit(t)}function e(t){if(t.data)return t.r=o[t.data.index];for(var n=t.r=0;n<4;++n)t[n]&&t[n].r>t.r&&(t.r=t[n].r)}function r(){if(i){var n,e,r=i.length;for(o=new Array(r),n=0;n<r;++n)e=i[n],o[e.index]=+t(e,n,i)}}var i,o,u=1,a=1;return"function"!=typeof t&&(t=pv(null==t?1:+t)),n.initialize=function(t){i=t,r()},n.iterations=function(t){return arguments.length?(a=+t,n):a},n.strength=function(t){return arguments.length?(u=+t,n):u},n.radius=function(e){return arguments.length?(t="function"==typeof e?e:pv(+e),r(),n):t},n},Pv=function(t){function n(t){return 1/Math.min(l[t.source.index],l[t.target.index])}function e(n){for(var e=0,r=t.length;e<v;++e)for(var i,o,u,s,l,h,p,d=0;d<r;++d)i=t[d],o=i.source,u=i.target,s=u.x+u.vx-o.x-o.vx||dv(),l=u.y+u.vy-o.y-o.vy||dv(),h=Math.sqrt(s*s+l*l),h=(h-c[d])/h*n*a[d],s*=h,l*=h,u.vx-=s*(p=f[d]),u.vy-=l*p,o.vx+=s*(p=1-p),o.vy+=l*p}function r(){if(s){var n,e,r=s.length,p=t.length,d=Ve(s,h);for(n=0,l=new Array(r);n<p;++n)e=t[n],e.index=n,"object"!==u(e.source)&&(e.source=pr(d,e.source)),"object"!==u(e.target)&&(e.target=pr(d,e.target)),l[e.source.index]=(l[e.source.index]||0)+1,l[e.target.index]=(l[e.target.index]||0)+1;for(n=0,f=new Array(p);n<p;++n)e=t[n],f[n]=l[e.source.index]/(l[e.source.index]+l[e.target.index]);a=new Array(p),i(),c=new Array(p),o()}}function i(){if(s)for(var n=0,e=t.length;n<e;++n)a[n]=+p(t[n],n,t)}function o(){if(s)for(var n=0,e=t.length;n<e;++n)c[n]=+d(t[n],n,t)}var a,c,s,l,f,h=hr,p=n,d=pv(30),v=1;return null==t&&(t=[]),e.initialize=function(t){s=t,r()},e.links=function(n){return arguments.length?(t=n,r(),e):t},e.id=function(t){return arguments.length?(h=t,e):h},e.iterations=function(t){return arguments.length?(v=+t,e):v},e.strength=function(t){return arguments.length?(p="function"==typeof t?t:pv(+t),i(),e):p},e.distance=function(t){return arguments.length?(d="function"==typeof t?t:pv(+t),o(),e):d},e},jv=10,Ov=Math.PI*(3-Math.sqrt(5)),Dv=function(t){function n(){e(),p.call("tick",o),u<a&&(h.stop(),p.call("end",o))}function e(){var n,e,r=t.length;for(u+=(s-u)*c,f.each(function(t){t(u)}),n=0;n<r;++n)e=t[n],null==e.fx?e.x+=e.vx*=l:(e.x=e.fx,e.vx=0),null==e.fy?e.y+=e.vy*=l:(e.y=e.fy,e.vy=0)}function r(){for(var n,e=0,r=t.length;e<r;++e){if(n=t[e],n.index=e,isNaN(n.x)||isNaN(n.y)){var i=jv*Math.sqrt(e),o=e*Ov;n.x=i*Math.cos(o),n.y=i*Math.sin(o)}(isNaN(n.vx)||isNaN(n.vy))&&(n.vx=n.vy=0)}}function i(n){return n.initialize&&n.initialize(t),n}var o,u=1,a=.001,c=1-Math.pow(a,1/300),s=0,l=.6,f=Ve(),h=wn(n),p=_("tick","end");return null==t&&(t=[]),r(),o={tick:e,restart:function(){return h.restart(n),o},stop:function(){return h.stop(),o},nodes:function(n){return arguments.length?(t=n,r(),f.each(i),o):t},alpha:function(t){return arguments.length?(u=+t,o):u},alphaMin:function(t){return arguments.length?(a=+t,o):a},alphaDecay:function(t){return arguments.length?(c=+t,o):+c},alphaTarget:function(t){return arguments.length?(s=+t,o):s},velocityDecay:function(t){return arguments.length?(l=1-t,o):1-l},force:function(t,n){return arguments.length>1?(null==n?f.remove(t):f.set(t,i(n)),o):f.get(t)},find:function(n,e,r){var i,o,u,a,c,s=0,l=t.length;for(null==r?r=1/0:r*=r,s=0;s<l;++s)a=t[s],i=n-a.x,o=e-a.y,(u=i*i+o*o)<r&&(c=a,r=u);return c},on:function(t,n){return arguments.length>1?(p.on(t,n),o):p.on(t)}}},zv=function(){function t(t){var n,a=i.length,c=ar(i,dr,vr).visitAfter(e);for(u=t,n=0;n<a;++n)o=i[n],c.visit(r)}function n(){if(i){var t,n,e=i.length;for(a=new Array(e),t=0;t<e;++t)n=i[t],a[n.index]=+c(n,t,i)}}function e(t){var n,e,r,i,o,u=0;if(t.length){for(r=i=o=0;o<4;++o)(n=t[o])&&(e=n.value)&&(u+=e,r+=e*n.x,i+=e*n.y);t.x=r/u,t.y=i/u}else{n=t,n.x=n.data.x,n.y=n.data.y;do{u+=a[n.data.index]}while(n=n.next)}t.value=u}function r(t,n,e,r){if(!t.value)return!0;var i=t.x-o.x,c=t.y-o.y,h=r-n,p=i*i+c*c;if(h*h/f<p)return p<l&&(0===i&&(i=dv(),p+=i*i),0===c&&(c=dv(),p+=c*c),p<s&&(p=Math.sqrt(s*p)),o.vx+=i*t.value*u/p,o.vy+=c*t.value*u/p),!0;if(!(t.length||p>=l)){(t.data!==o||t.next)&&(0===i&&(i=dv(),p+=i*i),0===c&&(c=dv(),p+=c*c),p<s&&(p=Math.sqrt(s*p)));do{t.data!==o&&(h=a[t.data.index]*u/p,o.vx+=i*h,o.vy+=c*h)}while(t=t.next)}}var i,o,u,a,c=pv(-30),s=1,l=1/0,f=.81;return t.initialize=function(t){i=t,n()},t.strength=function(e){return arguments.length?(c="function"==typeof e?e:pv(+e),n(),t):c},t.distanceMin=function(n){return arguments.length?(s=n*n,t):Math.sqrt(s)},t.distanceMax=function(n){return arguments.length?(l=n*n,t):Math.sqrt(l)},t.theta=function(n){return arguments.length?(f=n*n,t):Math.sqrt(f)},t},Lv=function(t){function n(t){for(var n,e=0,u=r.length;e<u;++e)n=r[e],n.vx+=(o[e]-n.x)*i[e]*t}function e(){if(r){var n,e=r.length;for(i=new Array(e),o=new Array(e),n=0;n<e;++n)i[n]=isNaN(o[n]=+t(r[n],n,r))?0:+u(r[n],n,r)}}var r,i,o,u=pv(.1);return"function"!=typeof t&&(t=pv(null==t?0:+t)),n.initialize=function(t){r=t,e()},n.strength=function(t){return arguments.length?(u="function"==typeof t?t:pv(+t),e(),n):u},n.x=function(r){return arguments.length?(t="function"==typeof r?r:pv(+r),e(),n):t},n},Rv=function(t){function n(t){for(var n,e=0,u=r.length;e<u;++e)n=r[e],n.vy+=(o[e]-n.y)*i[e]*t}function e(){if(r){var n,e=r.length;for(i=new Array(e),o=new Array(e),n=0;n<e;++n)i[n]=isNaN(o[n]=+t(r[n],n,r))?0:+u(r[n],n,r)}}var r,i,o,u=pv(.1);return"function"!=typeof t&&(t=pv(null==t?0:+t)),n.initialize=function(t){r=t,e()},n.strength=function(t){return arguments.length?(u="function"==typeof t?t:pv(+t),e(),n):u},n.y=function(r){return arguments.length?(t="function"==typeof r?r:pv(+r),e(),n):t},n},Uv=function(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]},qv=function(t){return t=Uv(Math.abs(t)),t?t[1]:NaN},Iv=function(t,n){return function(e,r){for(var i=e.length,o=[],u=0,a=t[0],c=0;i>0&&a>0&&(c+a+1>r&&(a=Math.max(1,r-c)),o.push(e.substring(i-=a,i+a)),!((c+=a+1)>r));)a=t[u=(u+1)%t.length];return o.reverse().join(n)}},Fv=function(t){return function(n){return n.replace(/[0-9]/g,function(n){return t[+n]})}},Yv=function(t,n){t=t.toPrecision(n);t:for(var e,r=t.length,i=1,o=-1;i<r;++i)switch(t[i]){case".":o=e=i;break;case"0":0===o&&(o=i),e=i;break;case"e":break t;default:o>0&&(o=0)}return o>0?t.slice(0,o)+t.slice(e+1):t},Bv=function(t,n){var e=Uv(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(Cv=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,u=r.length;return o===u?r:o>u?r+new Array(o-u+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+Uv(t,Math.max(0,n+o-1))[0]},Hv=function(t,n){var e=Uv(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},Xv={"":Yv,"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return Hv(100*t,n)},r:Hv,s:Bv,X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},Vv=/^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;yr.prototype=_r.prototype,_r.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+this.type};var Wv,$v=function(t){return t},Gv=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"],Zv=function(t){function n(t){function n(t){var n,i,a,l=y,x=_;if("c"===v)x=g(t)+x,t="";else{t=+t;var b=t<0;if(t=g(Math.abs(t),d),b&&0==+t&&(b=!1),l=(b?"("===s?s:"-":"-"===s||"("===s?"":s)+l,x=x+("s"===v?Gv[8+Cv/3]:"")+(b&&"("===s?")":""),m)for(n=-1,i=t.length;++n<i;)if(48>(a=t.charCodeAt(n))||a>57){x=(46===a?o+t.slice(n+1):t.slice(n))+x,t=t.slice(0,n);break}}p&&!f&&(t=r(t,1/0));var w=l.length+t.length+x.length,M=w<h?new Array(h-w+1).join(e):"";switch(p&&f&&(t=r(M+t,M.length?h-x.length:1/0),M=""),c){case"<":t=l+t+x+M;break;case"=":t=l+M+t+x;break;case"^":t=M.slice(0,w=M.length>>1)+l+t+x+M.slice(w);break;default:t=M+l+t+x}return u(t)}t=yr(t);var e=t.fill,c=t.align,s=t.sign,l=t.symbol,f=t.zero,h=t.width,p=t.comma,d=t.precision,v=t.type,y="$"===l?i[0]:"#"===l&&/[boxX]/.test(v)?"0"+v.toLowerCase():"",_="$"===l?i[1]:/[%p]/.test(v)?a:"",g=Xv[v],m=!v||/[defgprs%]/.test(v);return d=null==d?v?6:12:/[gprs]/.test(v)?Math.max(1,Math.min(21,d)):Math.max(0,Math.min(20,d)),n.toString=function(){return t+""},n}function e(t,e){var r=n((t=yr(t),t.type="f",t)),i=3*Math.max(-8,Math.min(8,Math.floor(qv(e)/3))),o=Math.pow(10,-i),u=Gv[8+i/3];return function(t){return r(o*t)+u}}var r=t.grouping&&t.thousands?Iv(t.grouping,t.thousands):$v,i=t.currency,o=t.decimal,u=t.numerals?Fv(t.numerals):$v,a=t.percent||"%";return{format:n,formatPrefix:e}};gr({decimal:".",thousands:",",grouping:[3],currency:["$",""]});var Jv=function(t){return Math.max(0,-qv(Math.abs(t)))},Qv=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(qv(n)/3)))-qv(Math.abs(t)))},Kv=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,qv(n)-qv(t))+1},ty=function(){return new mr};mr.prototype={constructor:mr,reset:function(){this.s=this.t=0},add:function(t){xr(jy,t,this.t),xr(this,jy.s,this.s),this.s?this.t+=jy.t:this.s=jy.t},valueOf:function(){return this.s}};var ny,ey,ry,iy,oy,uy,ay,cy,sy,ly,fy,hy,py,dy,vy,yy,_y,gy,my,xy,by,wy,My,Ey,Sy,Ty,ky,Ny,Cy,Ay,Py,jy=new mr,Oy=1e-6,Dy=Math.PI,zy=Dy/2,Ly=Dy/4,Ry=2*Dy,Uy=180/Dy,qy=Dy/180,Iy=Math.abs,Fy=Math.atan,Yy=Math.atan2,By=Math.cos,Hy=Math.ceil,Xy=Math.exp,Vy=Math.log,Wy=Math.pow,$y=Math.sin,Gy=Math.sign||function(t){return t>0?1:t<0?-1:0},Zy=Math.sqrt,Jy=Math.tan,Qy={Feature:function(t,n){Sr(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)Sr(e[r].geometry,n)}},Ky={Sphere:function(t,n){n.sphere()},Point:function(t,n){t=t.coordinates,n.point(t[0],t[1],t[2])},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)t=e[r],n.point(t[0],t[1],t[2])},LineString:function(t,n){Tr(t.coordinates,n,0)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)Tr(e[r],n,0)},Polygon:function(t,n){kr(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)kr(e[r],n)},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)Sr(e[r],n)}},t_=function(t,n){t&&Qy.hasOwnProperty(t.type)?Qy[t.type](t,n):Sr(t,n)},n_=ty(),e_=ty(),r_={point:Er,lineStart:Er,lineEnd:Er,polygonStart:function(){n_.reset(),r_.lineStart=Nr,r_.lineEnd=Cr},polygonEnd:function(){var t=+n_;e_.add(t<0?Ry+t:t),this.lineStart=this.lineEnd=this.point=Er},sphere:function(){e_.add(Ry)}},i_=function(t){return e_.reset(),t_(t,r_),2*e_},o_=ty(),u_={point:qr,lineStart:Fr,lineEnd:Yr,polygonStart:function(){u_.point=Br,u_.lineStart=Hr,u_.lineEnd=Xr,o_.reset(),r_.polygonStart()},polygonEnd:function(){r_.polygonEnd(),u_.point=qr,u_.lineStart=Fr,u_.lineEnd=Yr,n_<0?(uy=-(cy=180),ay=-(sy=90)):o_>Oy?sy=90:o_<-Oy&&(ay=-90),vy[0]=uy,vy[1]=cy}},a_=function(t){var n,e,r,i,o,u,a;if(sy=cy=-(uy=ay=1/0),dy=[],t_(t,u_),e=dy.length){for(dy.sort(Wr),n=1,r=dy[0],o=[r];n<e;++n)i=dy[n],$r(r,i[0])||$r(r,i[1])?(Vr(r[0],i[1])>Vr(r[0],r[1])&&(r[1]=i[1]),Vr(i[0],r[1])>Vr(r[0],r[1])&&(r[0]=i[0])):o.push(r=i);for(u=-1/0,e=o.length-1,n=0,r=o[e];n<=e;r=i,++n)i=o[n],(a=Vr(r[1],i[0]))>u&&(u=a,uy=i[0],cy=r[1])}return dy=vy=null,uy===1/0||ay===1/0?[[NaN,NaN],[NaN,NaN]]:[[uy,ay],[cy,sy]]},c_={sphere:Er,point:Gr,lineStart:Jr,lineEnd:ti,polygonStart:function(){c_.lineStart=ni,c_.lineEnd=ei},polygonEnd:function(){c_.lineStart=Jr,c_.lineEnd=ti}},s_=function(t){yy=_y=gy=my=xy=by=wy=My=Ey=Sy=Ty=0,t_(t,c_);var n=Ey,e=Sy,r=Ty,i=n*n+e*e+r*r;return i<1e-12&&(n=by,e=wy,r=My,_y<Oy&&(n=gy,e=my,r=xy),(i=n*n+e*e+r*r)<1e-12)?[NaN,NaN]:[Yy(e,n)*Uy,wr(r/Zy(i))*Uy]},l_=function(t){return function(){return t}},f_=function(t,n){function e(e,r){return e=t(e,r),n(e[0],e[1])}return t.invert&&n.invert&&(e.invert=function(e,r){return(e=n.invert(e,r))&&t.invert(e[0],e[1])}),e};oi.invert=oi;var h_,p_,d_,v_,y_,__,g_,m_,x_,b_,w_,M_=function(t){function n(n){return n=t(n[0]*qy,n[1]*qy),n[0]*=Uy,n[1]*=Uy,n}return t=ui(t[0]*qy,t[1]*qy,t.length>2?t[2]*qy:0),n.invert=function(n){return n=t.invert(n[0]*qy,n[1]*qy),n[0]*=Uy,n[1]*=Uy,n},n},E_=function(){function t(t,n){e.push(t=r(t,n)),t[0]*=Uy,t[1]*=Uy}function n(){var t=i.apply(this,arguments),n=o.apply(this,arguments)*qy,c=u.apply(this,arguments)*qy;return e=[],r=ui(-t[0]*qy,-t[1]*qy,0).invert,li(a,n,c,1),t={type:"Polygon",coordinates:[e]},e=r=null,t}var e,r,i=l_([0,0]),o=l_(90),u=l_(6),a={point:t};return n.center=function(t){return arguments.length?(i="function"==typeof t?t:l_([+t[0],+t[1]]),n):i},n.radius=function(t){return arguments.length?(o="function"==typeof t?t:l_(+t),n):o},n.precision=function(t){return arguments.length?(u="function"==typeof t?t:l_(+t),n):u},n},S_=function(){var t,n=[];return{point:function(n,e){t.push([n,e])},lineStart:function(){n.push(t=[])},lineEnd:Er,rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))},result:function(){var e=n;return n=[],t=null,e}}},T_=function(t,n,e,r,i,o){var u,a=t[0],c=t[1],s=n[0],l=n[1],f=0,h=1,p=s-a,d=l-c;if(u=e-a,p||!(u>0)){if(u/=p,p<0){if(u<f)return;u<h&&(h=u)}else if(p>0){if(u>h)return;u>f&&(f=u)}if(u=i-a,p||!(u<0)){if(u/=p,p<0){if(u>h)return;u>f&&(f=u)}else if(p>0){if(u<f)return;u<h&&(h=u)}if(u=r-c,d||!(u>0)){if(u/=d,d<0){if(u<f)return;u<h&&(h=u)}else if(d>0){if(u>h)return;u>f&&(f=u)}if(u=o-c,d||!(u<0)){if(u/=d,d<0){if(u>h)return;u>f&&(f=u)}else if(d>0){if(u<f)return;u<h&&(h=u)}return f>0&&(t[0]=a+f*p,t[1]=c+f*d),h<1&&(n[0]=a+h*p,n[1]=c+h*d),!0}}}}},k_=function(t,n){return Iy(t[0]-n[0])<Oy&&Iy(t[1]-n[1])<Oy},N_=function(t,n,e,r,i){var o,u,a=[],c=[];if(t.forEach(function(t){if(!((n=t.length-1)<=0)){var n,e,r=t[0],u=t[n];if(k_(r,u)){for(i.lineStart(),o=0;o<n;++o)i.point((r=t[o])[0],r[1]);return void i.lineEnd()}a.push(e=new hi(r,t,null,!0)),c.push(e.o=new hi(r,null,e,!1)),a.push(e=new hi(u,t,null,!1)),c.push(e.o=new hi(u,null,e,!0))}}),a.length){for(c.sort(n),pi(a),pi(c),o=0,u=c.length;o<u;++o)c[o].e=e=!e;for(var s,l,f=a[0];;){for(var h=f,p=!0;h.v;)if((h=h.n)===f)return;s=h.z,i.lineStart();do{if(h.v=h.o.v=!0,h.e){if(p)for(o=0,u=s.length;o<u;++o)i.point((l=s[o])[0],l[1]);else r(h.x,h.n.x,1,i);h=h.n}else{if(p)for(s=h.p.z,o=s.length-1;o>=0;--o)i.point((l=s[o])[0],l[1]);else r(h.x,h.p.x,-1,i);h=h.p}h=h.o,s=h.z,p=!p}while(!h.v);i.lineEnd()}}},C_=1e9,A_=-C_,P_=function(){var t,n,e,r=0,i=0,o=960,u=500;return e={stream:function(e){return t&&n===e?t:t=di(r,i,o,u)(n=e)},extent:function(a){return arguments.length?(r=+a[0][0],i=+a[0][1],o=+a[1][0],u=+a[1][1],t=n=null,e):[[r,i],[o,u]]}}},j_=ty(),O_=function(t,n){var e=n[0],r=n[1],i=[$y(e),-By(e),0],o=0,u=0;j_.reset();for(var a=0,c=t.length;a<c;++a)if(l=(s=t[a]).length)for(var s,l,f=s[l-1],h=f[0],p=f[1]/2+Ly,d=$y(p),v=By(p),y=0;y<l;++y,h=g,d=x,v=b,f=_){var _=s[y],g=_[0],m=_[1]/2+Ly,x=$y(m),b=By(m),w=g-h,M=w>=0?1:-1,E=M*w,S=E>Dy,T=d*x;if(j_.add(Yy(T*M*$y(E),v*b+T*By(E))),o+=S?w+M*Ry:w,S^h>=e^g>=e){var k=zr(Or(f),Or(_));Ur(k);var N=zr(i,k);Ur(N);var C=(S^w>=0?-1:1)*wr(N[2]);(r>C||r===C&&(k[0]||k[1]))&&(u+=S^w>=0?1:-1)}}return(o<-Oy||o<Oy&&j_<-Oy)^1&u},D_=ty(),z_={sphere:Er,point:Er,lineStart:vi,lineEnd:Er,polygonStart:Er,polygonEnd:Er},L_=function(t){return D_.reset(),t_(t,z_),+D_},R_=[null,null],U_={type:"LineString",coordinates:R_},q_=function(t,n){return R_[0]=t,R_[1]=n,L_(U_)},I_={Feature:function(t,n){return mi(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)if(mi(e[r].geometry,n))return!0;return!1}},F_={Sphere:function(){return!0},Point:function(t,n){return xi(t.coordinates,n)},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(xi(e[r],n))return!0;return!1},LineString:function(t,n){return bi(t.coordinates,n)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(bi(e[r],n))return!0;return!1},Polygon:function(t,n){return wi(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(wi(e[r],n))return!0;return!1},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)if(mi(e[r],n))return!0;return!1}},Y_=function(t,n){return(t&&I_.hasOwnProperty(t.type)?I_[t.type]:mi)(t,n)},B_=function(t,n){var e=t[0]*qy,r=t[1]*qy,i=n[0]*qy,o=n[1]*qy,u=By(r),a=$y(r),c=By(o),s=$y(o),l=u*By(e),f=u*$y(e),h=c*By(i),p=c*$y(i),d=2*wr(Zy(Mr(o-r)+u*c*Mr(i-e))),v=$y(d),y=d?function(t){var n=$y(t*=d)/v,e=$y(d-t)/v,r=e*l+n*h,i=e*f+n*p,o=e*a+n*s;return[Yy(i,r)*Uy,Yy(o,Zy(r*r+i*i))*Uy]}:function(){return[e*Uy,r*Uy]};return y.distance=d,y},H_=function(t){return t},X_=ty(),V_=ty(),W_={point:Er,lineStart:Er,lineEnd:Er,polygonStart:function(){W_.lineStart=Ci,W_.lineEnd=ji},polygonEnd:function(){W_.lineStart=W_.lineEnd=W_.point=Er,X_.add(Iy(V_)),V_.reset()},result:function(){var t=X_/2;return X_.reset(),t}},$_=1/0,G_=$_,Z_=-$_,J_=Z_,Q_={point:Oi,lineStart:Er,lineEnd:Er,polygonStart:Er,polygonEnd:Er,result:function(){var t=[[$_,G_],[Z_,J_]];return Z_=J_=-(G_=$_=1/0),t}},K_=0,tg=0,ng=0,eg=0,rg=0,ig=0,og=0,ug=0,ag=0,cg={point:Di,lineStart:zi,lineEnd:Ui,polygonStart:function(){cg.lineStart=qi,cg.lineEnd=Ii},polygonEnd:function(){cg.point=Di,cg.lineStart=zi,cg.lineEnd=Ui},result:function(){var t=ag?[og/ag,ug/ag]:ig?[eg/ig,rg/ig]:ng?[K_/ng,tg/ng]:[NaN,NaN];return K_=tg=ng=eg=rg=ig=og=ug=ag=0,t}};Bi.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._context.moveTo(t,n),this._point=1;break;case 1:this._context.lineTo(t,n);break;default:this._context.moveTo(t+this._radius,n),this._context.arc(t,n,this._radius,0,Ry)}},result:Er};var sg,lg,fg,hg,pg,dg=ty(),vg={point:Er,lineStart:function(){vg.point=Hi},lineEnd:function(){sg&&Xi(lg,fg),vg.point=Er},polygonStart:function(){sg=!0},polygonEnd:function(){sg=null},result:function(){var t=+dg;return dg.reset(),t}};Vi.prototype={_radius:4.5,_circle:Wi(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._string.push("M",t,",",n),this._point=1;break;case 1:this._string.push("L",t,",",n);break;default:null==this._circle&&(this._circle=Wi(this._radius)),this._string.push("M",t,",",n,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};var yg=function(t,n){function e(t){return t&&("function"==typeof o&&i.pointRadius(+o.apply(this,arguments)),t_(t,r(i))),i.result()}var r,i,o=4.5;return e.area=function(t){return t_(t,r(W_)),W_.result()},e.measure=function(t){return t_(t,r(vg)),vg.result()},e.bounds=function(t){return t_(t,r(Q_)),Q_.result()},e.centroid=function(t){return t_(t,r(cg)),cg.result()},e.projection=function(n){return arguments.length?(r=null==n?(t=null,H_):(t=n).stream,e):t},e.context=function(t){return arguments.length?(i=null==t?(n=null,new Vi):new Bi(n=t),"function"!=typeof o&&i.pointRadius(o),e):n},e.pointRadius=function(t){return arguments.length?(o="function"==typeof t?t:(i.pointRadius(+t),+t),e):o},e.projection(t).context(n)},_g=function(t,n,e,r){return function(i,o){function u(n,e){var r=i(n,e);t(n=r[0],e=r[1])&&o.point(n,e)}function a(t,n){var e=i(t,n);y.point(e[0],e[1])}function c(){b.point=a,y.lineStart()}function s(){b.point=u,y.lineEnd()}function l(t,n){v.push([t,n]);var e=i(t,n);m.point(e[0],e[1])}function f(){m.lineStart(),v=[]}function h(){l(v[0][0],v[0][1]),m.lineEnd();var t,n,e,r,i=m.clean(),u=g.result(),a=u.length;if(v.pop(),p.push(v),v=null,a)if(1&i){if(e=u[0],(n=e.length-1)>0){for(x||(o.polygonStart(),x=!0),o.lineStart(),t=0;t<n;++t)o.point((r=e[t])[0],r[1]);o.lineEnd()}}else a>1&&2&i&&u.push(u.pop().concat(u.shift())),d.push(u.filter($i))}var p,d,v,y=n(o),_=i.invert(r[0],r[1]),g=S_(),m=n(g),x=!1,b={point:u,lineStart:c,lineEnd:s,polygonStart:function(){b.point=l,b.lineStart=f,b.lineEnd=h,d=[],p=[]},polygonEnd:function(){b.point=u,b.lineStart=c,b.lineEnd=s,d=Nl(d);var t=O_(p,_);d.length?(x||(o.polygonStart(),x=!0),N_(d,Gi,t,e,o)):t&&(x||(o.polygonStart(),x=!0),o.lineStart(),e(null,null,1,o),o.lineEnd()),x&&(o.polygonEnd(),x=!1),d=p=null},sphere:function(){o.polygonStart(),o.lineStart(),e(null,null,1,o),o.lineEnd(),o.polygonEnd()}};return b}},gg=_g(function(){return!0},Zi,Qi,[-Dy,-zy]),mg=function(t,n){function e(e,r,i,o){li(o,t,n,i,e,r)}function r(t,n){return By(t)*By(n)>a}function i(t){var n,e,i,a,l;return{lineStart:function(){a=i=!1,l=1},point:function(f,h){var p,d=[f,h],v=r(f,h),y=c?v?0:u(f,h):v?u(f+(f<0?Dy:-Dy),h):0;if(!n&&(a=i=v)&&t.lineStart(),v!==i&&(!(p=o(n,d))||k_(n,p)||k_(d,p))&&(d[0]+=Oy,d[1]+=Oy,v=r(d[0],d[1])),v!==i)l=0,v?(t.lineStart(),p=o(d,n),t.point(p[0],p[1])):(p=o(n,d),t.point(p[0],p[1]),t.lineEnd()),n=p;else if(s&&n&&c^v){var _;y&e||!(_=o(d,n,!0))||(l=0,c?(t.lineStart(),t.point(_[0][0],_[0][1]),t.point(_[1][0],_[1][1]),t.lineEnd()):(t.point(_[1][0],_[1][1]),t.lineEnd(),t.lineStart(),t.point(_[0][0],_[0][1])))}!v||n&&k_(n,d)||t.point(d[0],d[1]),n=d,i=v,e=y},lineEnd:function(){i&&t.lineEnd(),n=null},clean:function(){return l|(a&&i)<<1}}}function o(t,n,e){var r=Or(t),i=Or(n),o=[1,0,0],u=zr(r,i),c=Dr(u,u),s=u[0],l=c-s*s;if(!l)return!e&&t;var f=a*c/l,h=-a*s/l,p=zr(o,u),d=Rr(o,f);Lr(d,Rr(u,h));var v=p,y=Dr(d,v),_=Dr(v,v),g=y*y-_*(Dr(d,d)-1);if(!(g<0)){var m=Zy(g),x=Rr(v,(-y-m)/_);if(Lr(x,d),x=jr(x),!e)return x;var b,w=t[0],M=n[0],E=t[1],S=n[1];M<w&&(b=w,w=M,M=b);var T=M-w,k=Iy(T-Dy)<Oy,N=k||T<Oy;if(!k&&S<E&&(b=E,E=S,S=b),N?k?E+S>0^x[1]<(Iy(x[0]-w)<Oy?E:S):E<=x[1]&&x[1]<=S:T>Dy^(w<=x[0]&&x[0]<=M)){var C=Rr(v,(-y+m)/_);return Lr(C,d),[x,jr(C)]}}}function u(n,e){var r=c?t:Dy-t,i=0;return n<-r?i|=1:n>r&&(i|=2),e<-r?i|=4:e>r&&(i|=8),i}var a=By(t),c=a>0,s=Iy(a)>Oy;return _g(r,i,e,c?[0,-t]:[-Dy,t-Dy])},xg=function(t){return{stream:Ki(t)}};to.prototype={constructor:to,point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var bg=16,wg=By(30*qy),Mg=function(t,n){return+n?io(t,n):ro(t)},Eg=Ki({point:function(t,n){this.stream.point(t*qy,n*qy)}}),Sg=function(){return ao(so).scale(155.424).center([0,33.6442])},Tg=function(){return Sg().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])},kg=function(){function t(t){var n=t[0],e=t[1];return a=null,i.point(n,e),a||(o.point(n,e),a)||(u.point(n,e),a)}function n(){return e=r=null,t}var e,r,i,o,u,a,c=Tg(),s=Sg().rotate([154,0]).center([-2,58.5]).parallels([55,65]),l=Sg().rotate([157,0]).center([-3,19.9]).parallels([8,18]),f={point:function(t,n){a=[t,n]}};return t.invert=function(t){var n=c.scale(),e=c.translate(),r=(t[0]-e[0])/n,i=(t[1]-e[1])/n;return(i>=.12&&i<.234&&r>=-.425&&r<-.214?s:i>=.166&&i<.234&&r>=-.214&&r<-.115?l:c).invert(t)},t.stream=function(t){return e&&r===t?e:e=lo([c.stream(r=t),s.stream(t),l.stream(t)])},t.precision=function(t){return arguments.length?(c.precision(t),s.precision(t),l.precision(t),n()):c.precision()},t.scale=function(n){return arguments.length?(c.scale(n),s.scale(.35*n),l.scale(n),t.translate(c.translate())):c.scale()},t.translate=function(t){if(!arguments.length)return c.translate();var e=c.scale(),r=+t[0],a=+t[1];return i=c.translate(t).clipExtent([[r-.455*e,a-.238*e],[r+.455*e,a+.238*e]]).stream(f),o=s.translate([r-.307*e,a+.201*e]).clipExtent([[r-.425*e+Oy,a+.12*e+Oy],[r-.214*e-Oy,a+.234*e-Oy]]).stream(f),u=l.translate([r-.205*e,a+.212*e]).clipExtent([[r-.214*e+Oy,a+.166*e+Oy],[r-.115*e-Oy,a+.234*e-Oy]]).stream(f),n()},t.fitExtent=function(n,e){return no(t,n,e)},t.fitSize=function(n,e){return eo(t,n,e)},t.scale(1070)},Ng=fo(function(t){return Zy(2/(1+t))});Ng.invert=ho(function(t){return 2*wr(t/2)});var Cg=function(){return oo(Ng).scale(124.75).clipAngle(179.999)},Ag=fo(function(t){return(t=br(t))&&t/$y(t)});Ag.invert=ho(function(t){return t});var Pg=function(){return oo(Ag).scale(79.4188).clipAngle(179.999)};po.invert=function(t,n){return[t,2*Fy(Xy(n))-zy]};var jg=function(){return vo(po).scale(961/Ry)},Og=function(){return ao(_o).scale(109.5).parallels([30,30])};go.invert=go;var Dg=function(){return oo(go).scale(152.63)},zg=function(){return ao(mo).scale(131.154).center([0,13.9389])};xo.invert=ho(Fy);var Lg=function(){return oo(xo).scale(144.049).clipAngle(60)},Rg=function(){function t(){return i=o=null,u}var n,e,r,i,o,u,a=1,c=0,s=0,l=1,f=1,h=H_,p=null,d=H_;return u={stream:function(t){return i&&o===t?i:i=h(d(o=t))},clipExtent:function(i){return arguments.length?(d=null==i?(p=n=e=r=null,H_):di(p=+i[0][0],n=+i[0][1],e=+i[1][0],r=+i[1][1]),t()):null==p?null:[[p,n],[e,r]]},scale:function(n){return arguments.length?(h=bo((a=+n)*l,a*f,c,s),t()):a},translate:function(n){return arguments.length?(h=bo(a*l,a*f,c=+n[0],s=+n[1]),t()):[c,s]},reflectX:function(n){return arguments.length?(h=bo(a*(l=n?-1:1),a*f,c,s),t()):l<0},reflectY:function(n){return arguments.length?(h=bo(a*l,a*(f=n?-1:1),c,s),t()):f<0},fitExtent:function(t,n){return no(u,t,n)},fitSize:function(t,n){return eo(u,t,n)}}};wo.invert=ho(wr);var Ug=function(){return oo(wo).scale(249.5).clipAngle(90+Oy)};Mo.invert=ho(function(t){return 2*Fy(t)});var qg=function(){return oo(Mo).scale(250).clipAngle(142)};Eo.invert=function(t,n){return[-n,2*Fy(Xy(t))-zy]};var Ig=function(){var t=vo(Eo),n=t.center,e=t.rotate;return t.center=function(t){return arguments.length?n([-t[1],t[0]]):(t=n(),[t[1],-t[0]])},t.rotate=function(t){return arguments.length?e([t[0],t[1],t.length>2?t[2]+90:90]):(t=e(),[t[0],t[1],t[2]-90])},e([0,0,90]).scale(159.155)},Fg=function(){function t(t){var o,u=0;t.eachAfter(function(t){var e=t.children;e?(t.x=To(e),t.y=No(e)):(t.x=o?u+=n(t,o):0,t.y=0,o=t)});var a=Ao(t),c=Po(t),s=a.x-n(a,c)/2,l=c.x+n(c,a)/2;return t.eachAfter(i?function(n){n.x=(n.x-t.x)*e,n.y=(t.y-n.y)*r}:function(n){n.x=(n.x-s)/(l-s)*e,n.y=(1-(t.y?n.y/t.y:1))*r})}var n=So,e=1,r=1,i=!1;return t.separation=function(e){return arguments.length?(n=e,t):n},t.size=function(n){return arguments.length?(i=!1,e=+n[0],r=+n[1],t):i?null:[e,r]},t.nodeSize=function(n){return arguments.length?(i=!0,e=+n[0],r=+n[1],t):i?[e,r]:null},t},Yg=function(){return this.eachAfter(jo)},Bg=function(t){var n,e,r,i,o=this,u=[o];do{for(n=u.reverse(),u=[];o=n.pop();)if(t(o),e=o.children)for(r=0,i=e.length;r<i;++r)u.push(e[r])}while(u.length);return this},Hg=function(t){for(var n,e,r=this,i=[r];r=i.pop();)if(t(r),n=r.children)for(e=n.length-1;e>=0;--e)i.push(n[e]);return this},Xg=function(t){for(var n,e,r,i=this,o=[i],u=[];i=o.pop();)if(u.push(i),n=i.children)for(e=0,r=n.length;e<r;++e)o.push(n[e]);for(;i=u.pop();)t(i);return this},Vg=function(t){return this.eachAfter(function(n){for(var e=+t(n.data)||0,r=n.children,i=r&&r.length;--i>=0;)e+=r[i].value;n.value=e})},Wg=function(t){return this.eachBefore(function(n){n.children&&n.children.sort(t)})},$g=function(t){for(var n=this,e=Oo(n,t),r=[n];n!==e;)n=n.parent,r.push(n);for(var i=r.length;t!==e;)r.splice(i,0,t),t=t.parent;return r},Gg=function(){for(var t=this,n=[t];t=t.parent;)n.push(t);return n},Zg=function(){var t=[];return this.each(function(n){t.push(n)}),t},Jg=function(){var t=[];return this.eachBefore(function(n){n.children||t.push(n)}),t},Qg=function(){var t=this,n=[];return t.each(function(e){e!==t&&n.push({source:e.parent,target:e})}),n};qo.prototype=Do.prototype={constructor:qo,count:Yg,each:Bg,eachAfter:Xg,eachBefore:Hg,sum:Vg,sort:Wg,path:$g,ancestors:Gg,descendants:Zg,leaves:Jg,links:Qg,copy:zo};var Kg=Array.prototype.slice,tm=function(t){for(var n,e,r=0,i=(t=Io(Kg.call(t))).length,o=[];r<i;)n=t[r],e&&Bo(e,n)?++r:(e=Xo(o=Fo(o,n)),r=0);return e},nm=function(t){return Ko(t),t},em=function(t){return function(){return t}},rm=function(){function t(t){return t.x=e/2,t.y=r/2,n?t.eachBefore(iu(n)).eachAfter(ou(i,.5)).eachBefore(uu(1)):t.eachBefore(iu(ru)).eachAfter(ou(eu,1)).eachAfter(ou(i,t.r/Math.min(e,r))).eachBefore(uu(Math.min(e,r)/(2*t.r))),t}var n=null,e=1,r=1,i=eu;return t.radius=function(e){return arguments.length?(n=tu(e),t):n},t.size=function(n){return arguments.length?(e=+n[0],r=+n[1],t):[e,r]},t.padding=function(n){return arguments.length?(i="function"==typeof n?n:em(+n),t):i},t},im=function(t){t.x0=Math.round(t.x0),t.y0=Math.round(t.y0),t.x1=Math.round(t.x1),t.y1=Math.round(t.y1)},om=function(t,n,e,r,i){for(var o,u=t.children,a=-1,c=u.length,s=t.value&&(r-n)/t.value;++a<c;)o=u[a],o.y0=e,o.y1=i,o.x0=n,o.x1=n+=o.value*s},um=function(){function t(t){var u=t.height+1;return t.x0=t.y0=i,t.x1=e,t.y1=r/u,t.eachBefore(n(r,u)),o&&t.eachBefore(im),t}function n(t,n){return function(e){e.children&&om(e,e.x0,t*(e.depth+1)/n,e.x1,t*(e.depth+2)/n);var r=e.x0,o=e.y0,u=e.x1-i,a=e.y1-i;u<r&&(r=u=(r+u)/2),a<o&&(o=a=(o+a)/2),e.x0=r,e.y0=o,e.x1=u,e.y1=a}}var e=1,r=1,i=0,o=!1;return t.round=function(n){return arguments.length?(o=!!n,t):o},t.size=function(n){return arguments.length?(e=+n[0],r=+n[1],t):[e,r]},t.padding=function(n){return arguments.length?(i=+n,t):i},t},am="$",cm={depth:-1},sm={},lm=function(){function t(t){var r,i,o,u,a,c,s,l=t.length,f=new Array(l),h={};for(i=0;i<l;++i)r=t[i],a=f[i]=new qo(r),null!=(c=n(r,i,t))&&(c+="")&&(s=am+(a.id=c),h[s]=s in h?sm:a);for(i=0;i<l;++i)if(a=f[i],null!=(c=e(t[i],i,t))&&(c+="")){if(!(u=h[am+c]))throw new Error("missing: "+c);if(u===sm)throw new Error("ambiguous: "+c);u.children?u.children.push(a):u.children=[a],a.parent=u}else{if(o)throw new Error("multiple roots");o=a}if(!o)throw new Error("no root");if(o.parent=cm,o.eachBefore(function(t){t.depth=t.parent.depth+1,--l}).eachBefore(Uo),o.parent=null,l>0)throw new Error("cycle");return o}var n=au,e=cu;return t.id=function(e){return arguments.length?(n=nu(e),t):n},t.parentId=function(n){return arguments.length?(e=nu(n),t):e},t};vu.prototype=Object.create(qo.prototype);var fm=function(){function t(t){var r=yu(t);if(r.eachAfter(n),r.parent.m=-r.z,r.eachBefore(e),c)t.eachBefore(i);else{var s=t,l=t,f=t;t.eachBefore(function(t){t.x<s.x&&(s=t),t.x>l.x&&(l=t),t.depth>f.depth&&(f=t)});var h=s===l?1:o(s,l)/2,p=h-s.x,d=u/(l.x+h+p),v=a/(f.depth||1);t.eachBefore(function(t){t.x=(t.x+p)*d,t.y=t.depth*v})}return t}function n(t){var n=t.children,e=t.parent.children,i=t.i?e[t.i-1]:null;if(n){pu(t);var u=(n[0].z+n[n.length-1].z)/2;i?(t.z=i.z+o(t._,i._),t.m=t.z-u):t.z=u}else i&&(t.z=i.z+o(t._,i._));t.parent.A=r(t,i,t.parent.A||e[0])}function e(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function r(t,n,e){if(n){for(var r,i=t,u=t,a=n,c=i.parent.children[0],s=i.m,l=u.m,f=a.m,h=c.m;a=fu(a),i=lu(i),a&&i;)c=lu(c),u=fu(u),u.a=t,r=a.z+f-i.z-s+o(a._,i._),r>0&&(hu(du(a,t,e),t,r),s+=r,l+=r),f+=a.m,s+=i.m,h+=c.m,l+=u.m;a&&!fu(u)&&(u.t=a,u.m+=f-l),i&&!lu(c)&&(c.t=i,c.m+=s-h,e=t)}return e}function i(t){t.x*=u,t.y=t.depth*a}var o=su,u=1,a=1,c=null;return t.separation=function(n){return arguments.length?(o=n,t):o},t.size=function(n){return arguments.length?(c=!1,u=+n[0],a=+n[1],t):c?null:[u,a]},t.nodeSize=function(n){return arguments.length?(c=!0,u=+n[0],a=+n[1],t):c?[u,a]:null},t},hm=function(t,n,e,r,i){for(var o,u=t.children,a=-1,c=u.length,s=t.value&&(i-e)/t.value;++a<c;)o=u[a],o.x0=n,o.x1=r,o.y0=e,o.y1=e+=o.value*s},pm=(1+Math.sqrt(5))/2,dm=function t(n){function e(t,e,r,i,o){_u(n,t,e,r,i,o)}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(pm),vm=function(){function t(t){return t.x0=t.y0=0,t.x1=i,t.y1=o,t.eachBefore(n),u=[0],r&&t.eachBefore(im),t}function n(t){var n=u[t.depth],r=t.x0+n,i=t.y0+n,o=t.x1-n,h=t.y1-n;o<r&&(r=o=(r+o)/2),h<i&&(i=h=(i+h)/2),t.x0=r,t.y0=i,t.x1=o,t.y1=h,t.children&&(n=u[t.depth+1]=a(t)/2,r+=f(t)-n,i+=c(t)-n,o-=s(t)-n,h-=l(t)-n,o<r&&(r=o=(r+o)/2),h<i&&(i=h=(i+h)/2),e(t,r,i,o,h))}var e=dm,r=!1,i=1,o=1,u=[0],a=eu,c=eu,s=eu,l=eu,f=eu;return t.round=function(n){return arguments.length?(r=!!n,t):r},t.size=function(n){return arguments.length?(i=+n[0],o=+n[1],t):[i,o]},t.tile=function(n){return arguments.length?(e=nu(n),t):e},t.padding=function(n){return arguments.length?t.paddingInner(n).paddingOuter(n):t.paddingInner()},t.paddingInner=function(n){return arguments.length?(a="function"==typeof n?n:em(+n),t):a},t.paddingOuter=function(n){return arguments.length?t.paddingTop(n).paddingRight(n).paddingBottom(n).paddingLeft(n):t.paddingTop()},t.paddingTop=function(n){return arguments.length?(c="function"==typeof n?n:em(+n),t):c},t.paddingRight=function(n){return arguments.length?(s="function"==typeof n?n:em(+n),t):s},t.paddingBottom=function(n){return arguments.length?(l="function"==typeof n?n:em(+n),t):l},t.paddingLeft=function(n){return arguments.length?(f="function"==typeof n?n:em(+n),t):f},t},ym=function(t,n,e,r,i){function o(t,n,e,r,i,u,a){if(t>=n-1){var s=c[t];return s.x0=r,s.y0=i,s.x1=u,s.y1=a,void 0}for(var f=l[t],h=e/2+f,p=t+1,d=n-1;p<d;){var v=p+d>>>1;l[v]<h?p=v+1:d=v}h-l[p-1]<l[p]-h&&t+1<p&&--p;var y=l[p]-f,_=e-y;if(u-r>a-i){var g=(r*_+u*y)/e;o(t,p,y,r,i,g,a),o(p,n,_,g,i,u,a)}else{var m=(i*_+a*y)/e;o(t,p,y,r,i,u,m),o(p,n,_,r,m,u,a)}}var u,a,c=t.children,s=c.length,l=new Array(s+1);for(l[0]=a=u=0;u<s;++u)l[u+1]=a+=c[u].value;o(0,s,t.value,n,e,r,i)},_m=function(t,n,e,r,i){(1&t.depth?hm:om)(t,n,e,r,i)},gm=function t(n){function e(t,e,r,i,o){if((u=t._squarify)&&u.ratio===n)for(var u,a,c,s,l,f=-1,h=u.length,p=t.value;++f<h;){for(a=u[f],c=a.children,s=a.value=0,l=c.length;s<l;++s)a.value+=c[s].value;a.dice?om(a,e,r,i,r+=(o-r)*a.value/p):hm(a,e,r,e+=(i-e)*a.value/p,o),p-=a.value}else t._squarify=u=_u(n,t,e,r,i,o),u.ratio=n}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(pm),mm=function(t){for(var n,e=-1,r=t.length,i=t[r-1],o=0;++e<r;)n=i,i=t[e],o+=n[1]*i[0]-n[0]*i[1];return o/2},xm=function(t){for(var n,e,r=-1,i=t.length,o=0,u=0,a=t[i-1],c=0;++r<i;)n=a,a=t[r],c+=e=n[0]*a[1]-a[0]*n[1],o+=(n[0]+a[0])*e,u+=(n[1]+a[1])*e;return c*=3,[o/c,u/c]},bm=function(t,n,e){return(n[0]-t[0])*(e[1]-t[1])-(n[1]-t[1])*(e[0]-t[0])},wm=function(t){if((e=t.length)<3)return null;var n,e,r=new Array(e),i=new Array(e);for(n=0;n<e;++n)r[n]=[+t[n][0],+t[n][1],n];for(r.sort(gu),n=0;n<e;++n)i[n]=[r[n][0],-r[n][1]];var o=mu(r),u=mu(i),a=u[0]===o[0],c=u[u.length-1]===o[o.length-1],s=[];for(n=o.length-1;n>=0;--n)s.push(t[r[o[n]][2]]);for(n=+a;n<u.length-c;++n)s.push(t[r[u[n]][2]]);return s},Mm=function(t,n){for(var e,r,i=t.length,o=t[i-1],u=n[0],a=n[1],c=o[0],s=o[1],l=!1,f=0;f<i;++f)o=t[f],e=o[0],r=o[1],r>a!=s>a&&u<(c-e)*(a-r)/(s-r)+e&&(l=!l),c=e,s=r;return l},Em=function(t){for(var n,e,r=-1,i=t.length,o=t[i-1],u=o[0],a=o[1],c=0;++r<i;)n=u,e=a,o=t[r],u=o[0],a=o[1],n-=u,e-=a,c+=Math.sqrt(n*n+e*e);return c},Sm=[].slice,Tm={};xu.prototype=Tu.prototype={constructor:xu,defer:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("defer after await");if(null!=this._error)return this;var n=Sm.call(arguments,1);return n.push(t),++this._waiting,this._tasks.push(n),bu(this),this},abort:function(){return null==this._error&&Eu(this,new Error("abort")),this},await:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("multiple await");return this._call=function(n,e){t.apply(null,[n].concat(e))},Su(this),this},awaitAll:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("multiple await");return this._call=t,Su(this),this}};var km=function(){return Math.random()},Nm=function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,1===arguments.length?(e=t,t=0):e-=t,function(){return n()*e+t}}return e.source=t,e}(km),Cm=function t(n){function e(t,e){var r,i;return t=null==t?0:+t,e=null==e?1:+e,function(){var o;if(null!=r)o=r,r=null;else do{r=2*n()-1,o=2*n()-1,i=r*r+o*o}while(!i||i>1);return t+e*o*Math.sqrt(-2*Math.log(i)/i)}}return e.source=t,e}(km),Am=function t(n){function e(){var t=Cm.source(n).apply(this,arguments);return function(){return Math.exp(t())}}return e.source=t,e}(km),Pm=function t(n){function e(t){return function(){for(var e=0,r=0;r<t;++r)e+=n();return e}}return e.source=t,e}(km),jm=function t(n){function e(t){var e=Pm.source(n)(t);return function(){return e()/t}}return e.source=t,e}(km),Om=function t(n){function e(t){return function(){return-Math.log(1-n())/t}}return e.source=t,e}(km),Dm=function(t,n){function e(t){var n,e=s.status;if(!e&&Nu(s)||e>=200&&e<300||304===e){if(o)try{n=o.call(r,s)}catch(t){return void a.call("error",r,t)}else n=s;a.call("load",r,n)}else a.call("error",r,t)}var r,i,o,u,a=_("beforesend","progress","load","error"),c=Ve(),s=new XMLHttpRequest,l=null,f=null,h=0;if("undefined"==typeof XDomainRequest||"withCredentials"in s||!/^(http(s)?:)?\/\//.test(t)||(s=new XDomainRequest),"onload"in s?s.onload=s.onerror=s.ontimeout=e:s.onreadystatechange=function(t){s.readyState>3&&e(t)},s.onprogress=function(t){a.call("progress",r,t)},r={header:function(t,n){return t=(t+"").toLowerCase(),arguments.length<2?c.get(t):(null==n?c.remove(t):c.set(t,n+""),r)},mimeType:function(t){return arguments.length?(i=null==t?null:t+"",r):i},responseType:function(t){return arguments.length?(u=t,r):u},timeout:function(t){return arguments.length?(h=+t,r):h},user:function(t){return arguments.length<1?l:(l=null==t?null:t+"",r)},password:function(t){return arguments.length<1?f:(f=null==t?null:t+"",r)},response:function(t){return o=t,r},get:function(t,n){return r.send("GET",t,n)},post:function(t,n){return r.send("POST",t,n)},send:function(n,e,o){return s.open(n,t,!0,l,f),null==i||c.has("accept")||c.set("accept",i+",*/*"),s.setRequestHeader&&c.each(function(t,n){s.setRequestHeader(n,t)}),null!=i&&s.overrideMimeType&&s.overrideMimeType(i),null!=u&&(s.responseType=u),h>0&&(s.timeout=h),null==o&&"function"==typeof e&&(o=e,e=null),null!=o&&1===o.length&&(o=ku(o)),null!=o&&r.on("error",o).on("load",function(t){o(null,t)}),a.call("beforesend",r,s),s.send(null==e?null:e),r},abort:function(){return s.abort(),r},on:function(){var t=a.on.apply(a,arguments);return t===a?r:t}},null!=n){if("function"!=typeof n)throw new Error("invalid callback: "+n);return r.get(n)}return r},zm=function(t,n){return function(e,r){var i=Dm(e).mimeType(t).response(n);if(null!=r){if("function"!=typeof r)throw new Error("invalid callback: "+r);return i.get(r)}return i}},Lm=zm("text/html",function(t){return document.createRange().createContextualFragment(t.responseText)}),Rm=zm("application/json",function(t){return JSON.parse(t.responseText)}),Um=zm("text/plain",function(t){return t.responseText}),qm=zm("application/xml",function(t){var n=t.responseXML;if(!n)throw new Error("parse error");return n}),Im=function(t,n){return function(e,r,i){arguments.length<3&&(i=r,r=null);var o=Dm(e).mimeType(t);return o.row=function(t){return arguments.length?o.response(Cu(n,r=t)):r},o.row(r),i?o.get(i):o}},Fm=Im("text/csv",rv),Ym=Im("text/tab-separated-values",cv),Bm=Array.prototype,Hm=Bm.map,Xm=Bm.slice,Vm={name:"implicit"},Wm=function(t){return function(){return t}},$m=function(t){return+t},Gm=[0,1],Zm=function(n,e,r){var o,u=n[0],a=n[n.length-1],c=i(u,a,null==e?10:e);switch(r=yr(null==r?",f":r),r.type){case"s":var s=Math.max(Math.abs(u),Math.abs(a));return null!=r.precision||isNaN(o=Qv(c,s))||(r.precision=o),t.formatPrefix(r,s);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(o=Kv(c,Math.max(Math.abs(u),Math.abs(a))))||(r.precision=o-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(o=Jv(c))||(r.precision=o-2*("%"===r.type))}return t.format(r)},Jm=function(t,n){t=t.slice();var e,r=0,i=t.length-1,o=t[r],u=t[i];return u<o&&(e=r,r=i,i=e,e=o,o=u,u=e),t[r]=n.floor(o),t[i]=n.ceil(u),t},Qm=new Date,Km=new Date,tx=ra(function(){},function(t,n){t.setTime(+t+n)},function(t,n){return n-t});tx.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?ra(function(n){n.setTime(Math.floor(n/t)*t)},function(n,e){n.setTime(+n+e*t)},function(n,e){return(e-n)/t}):tx:null};var nx=tx.range,ex=6e4,rx=6048e5,ix=ra(function(t){t.setTime(1e3*Math.floor(t/1e3))},function(t,n){t.setTime(+t+1e3*n)},function(t,n){return(n-t)/1e3},function(t){return t.getUTCSeconds()}),ox=ix.range,ux=ra(function(t){t.setTime(Math.floor(t/ex)*ex)},function(t,n){t.setTime(+t+n*ex)},function(t,n){return(n-t)/ex},function(t){return t.getMinutes()}),ax=ux.range,cx=ra(function(t){var n=t.getTimezoneOffset()*ex%36e5;n<0&&(n+=36e5),t.setTime(36e5*Math.floor((+t-n)/36e5)+n)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getHours()}),sx=cx.range,lx=ra(function(t){t.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*ex)/864e5},function(t){return t.getDate()-1}),fx=lx.range,hx=ia(0),px=ia(1),dx=ia(2),vx=ia(3),yx=ia(4),_x=ia(5),gx=ia(6),mx=hx.range,xx=px.range,bx=dx.range,wx=vx.range,Mx=yx.range,Ex=_x.range,Sx=gx.range,Tx=ra(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,n){t.setMonth(t.getMonth()+n)},function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())},function(t){return t.getMonth()}),kx=Tx.range,Nx=ra(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,n){t.setFullYear(t.getFullYear()+n)},function(t,n){return n.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()});Nx.every=function(t){return isFinite(t=Math.floor(t))&&t>0?ra(function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)},function(n,e){n.setFullYear(n.getFullYear()+e*t)}):null};var Cx=Nx.range,Ax=ra(function(t){t.setUTCSeconds(0,0)},function(t,n){t.setTime(+t+n*ex)},function(t,n){return(n-t)/ex},function(t){return t.getUTCMinutes()}),Px=Ax.range,jx=ra(function(t){t.setUTCMinutes(0,0,0)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getUTCHours()}),Ox=jx.range,Dx=ra(function(t){t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+n)},function(t,n){return(n-t)/864e5},function(t){return t.getUTCDate()-1}),zx=Dx.range,Lx=oa(0),Rx=oa(1),Ux=oa(2),qx=oa(3),Ix=oa(4),Fx=oa(5),Yx=oa(6),Bx=Lx.range,Hx=Rx.range,Xx=Ux.range,Vx=qx.range,Wx=Ix.range,$x=Fx.range,Gx=Yx.range,Zx=ra(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCMonth(t.getUTCMonth()+n)},function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()}),Jx=Zx.range,Qx=ra(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)},function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()});Qx.every=function(t){return isFinite(t=Math.floor(t))&&t>0?ra(function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)},function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)}):null};var Kx,tb=Qx.range,nb={"-":"",_:" ",0:"0"},eb=/^\s*\d+/,rb=/^%/,ib=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;rc({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var ob=Date.prototype.toISOString?ic:t.utcFormat("%Y-%m-%dT%H:%M:%S.%LZ"),ub=+new Date("2000-01-01T00:00:00.000Z")?oc:t.utcParse("%Y-%m-%dT%H:%M:%S.%LZ"),ab=1e3,cb=60*ab,sb=60*cb,lb=24*sb,fb=7*lb,hb=30*lb,pb=365*lb,db=function(){return cc(Nx,Tx,hx,lx,cx,ux,ix,tx,t.timeFormat).domain([new Date(2e3,0,1),new Date(2e3,0,2)])},vb=function(){return cc(Qx,Zx,Lx,Dx,jx,Ax,ix,tx,t.utcFormat).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)])},yb=function(t){return t.match(/.{6}/g).map(function(t){return"#"+t})},_b=yb("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),gb=yb("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6"),mb=yb("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9"),xb=yb("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5"),bb=rp(Jt(300,.5,0),Jt(-240,.5,1)),wb=rp(Jt(-100,.75,.35),Jt(80,1.5,.8)),Mb=rp(Jt(260,.75,.35),Jt(80,1.5,.8)),Eb=Jt(),Sb=function(t){(t<0||t>1)&&(t-=Math.floor(t));var n=Math.abs(t-.5);return Eb.h=360*t-100,Eb.s=1.5-1.5*n,Eb.l=.8-.9*n,Eb+""},Tb=sc(yb("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),kb=sc(yb("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),Nb=sc(yb("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),Cb=sc(yb("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921")),Ab=function(t){return function(){return t}},Pb=Math.abs,jb=Math.atan2,Ob=Math.cos,Db=Math.max,zb=Math.min,Lb=Math.sin,Rb=Math.sqrt,Ub=1e-12,qb=Math.PI,Ib=qb/2,Fb=2*qb,Yb=function(){function t(){var t,s,l=+n.apply(this,arguments),f=+e.apply(this,arguments),h=o.apply(this,arguments)-Ib,p=u.apply(this,arguments)-Ib,d=Pb(p-h),v=p>h;if(c||(c=t=qe()),f<l&&(s=f,f=l,l=s),f>Ub)if(d>Fb-Ub)c.moveTo(f*Ob(h),f*Lb(h)),c.arc(0,0,f,h,p,!v),l>Ub&&(c.moveTo(l*Ob(p),l*Lb(p)),c.arc(0,0,l,p,h,v));else{var y,_,g=h,m=p,x=h,b=p,w=d,M=d,E=a.apply(this,arguments)/2,S=E>Ub&&(i?+i.apply(this,arguments):Rb(l*l+f*f)),T=zb(Pb(f-l)/2,+r.apply(this,arguments)),k=T,N=T;if(S>Ub){var C=hc(S/l*Lb(E)),A=hc(S/f*Lb(E));(w-=2*C)>Ub?(C*=v?1:-1,x+=C,b-=C):(w=0,x=b=(h+p)/2),(M-=2*A)>Ub?(A*=v?1:-1,g+=A,m-=A):(M=0,g=m=(h+p)/2)}var P=f*Ob(g),j=f*Lb(g),O=l*Ob(b),D=l*Lb(b);if(T>Ub){var z=f*Ob(m),L=f*Lb(m),R=l*Ob(x),U=l*Lb(x);if(d<qb){var q=w>Ub?gc(P,j,R,U,z,L,O,D):[O,D],I=P-q[0],F=j-q[1],Y=z-q[0],B=L-q[1],H=1/Lb(fc((I*Y+F*B)/(Rb(I*I+F*F)*Rb(Y*Y+B*B)))/2),X=Rb(q[0]*q[0]+q[1]*q[1]);k=zb(T,(l-X)/(H-1)),N=zb(T,(f-X)/(H+1))}}M>Ub?N>Ub?(y=mc(R,U,P,j,f,N,v),_=mc(z,L,O,D,f,N,v),c.moveTo(y.cx+y.x01,y.cy+y.y01),N<T?c.arc(y.cx,y.cy,N,jb(y.y01,y.x01),jb(_.y01,_.x01),!v):(c.arc(y.cx,y.cy,N,jb(y.y01,y.x01),jb(y.y11,y.x11),!v),c.arc(0,0,f,jb(y.cy+y.y11,y.cx+y.x11),jb(_.cy+_.y11,_.cx+_.x11),!v),c.arc(_.cx,_.cy,N,jb(_.y11,_.x11),jb(_.y01,_.x01),!v))):(c.moveTo(P,j),c.arc(0,0,f,g,m,!v)):c.moveTo(P,j),l>Ub&&w>Ub?k>Ub?(y=mc(O,D,z,L,l,-k,v),_=mc(P,j,R,U,l,-k,v),c.lineTo(y.cx+y.x01,y.cy+y.y01),k<T?c.arc(y.cx,y.cy,k,jb(y.y01,y.x01),jb(_.y01,_.x01),!v):(c.arc(y.cx,y.cy,k,jb(y.y01,y.x01),jb(y.y11,y.x11),!v),c.arc(0,0,l,jb(y.cy+y.y11,y.cx+y.x11),jb(_.cy+_.y11,_.cx+_.x11),v),c.arc(_.cx,_.cy,k,jb(_.y11,_.x11),jb(_.y01,_.x01),!v))):c.arc(0,0,l,b,x,v):c.lineTo(O,D)}else c.moveTo(0,0);if(c.closePath(),t)return c=null,t+""||null}var n=pc,e=dc,r=Ab(0),i=null,o=vc,u=yc,a=_c,c=null;return t.centroid=function(){var t=(+n.apply(this,arguments)+ +e.apply(this,arguments))/2,r=(+o.apply(this,arguments)+ +u.apply(this,arguments))/2-qb/2;return[Ob(r)*t,Lb(r)*t]},t.innerRadius=function(e){return arguments.length?(n="function"==typeof e?e:Ab(+e),t):n},t.outerRadius=function(n){return arguments.length?(e="function"==typeof n?n:Ab(+n),t):e},t.cornerRadius=function(n){return arguments.length?(r="function"==typeof n?n:Ab(+n),t):r},t.padRadius=function(n){return arguments.length?(i=null==n?null:"function"==typeof n?n:Ab(+n),t):i},t.startAngle=function(n){return arguments.length?(o="function"==typeof n?n:Ab(+n),t):o},t.endAngle=function(n){return arguments.length?(u="function"==typeof n?n:Ab(+n),t):u},t.padAngle=function(n){return arguments.length?(a="function"==typeof n?n:Ab(+n),t):a},t.context=function(n){return arguments.length?(c=null==n?null:n,t):c},t};xc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}};var Bb=function(t){return new xc(t)},Hb=function(){function t(t){var a,c,s,l=t.length,f=!1;for(null==i&&(u=o(s=qe())),a=0;a<=l;++a)!(a<l&&r(c=t[a],a,t))===f&&((f=!f)?u.lineStart():u.lineEnd()),f&&u.point(+n(c,a,t),+e(c,a,t));if(s)return u=null,s+""||null}var n=bc,e=wc,r=Ab(!0),i=null,o=Bb,u=null;return t.x=function(e){return arguments.length?(n="function"==typeof e?e:Ab(+e),t):n},t.y=function(n){return arguments.length?(e="function"==typeof n?n:Ab(+n),t):e},t.defined=function(n){return arguments.length?(r="function"==typeof n?n:Ab(!!n),t):r},t.curve=function(n){return arguments.length?(o=n,null!=i&&(u=o(i)),t):o},t.context=function(n){return arguments.length?(null==n?i=u=null:u=o(i=n),t):i},t},Xb=function(){function t(t){var n,l,f,h,p,d=t.length,v=!1,y=new Array(d),_=new Array(d);for(null==a&&(s=c(p=qe())),n=0;n<=d;++n){if(!(n<d&&u(h=t[n],n,t))===v)if(v=!v)l=n,s.areaStart(),s.lineStart();else{for(s.lineEnd(),s.lineStart(),f=n-1;f>=l;--f)s.point(y[f],_[f]);s.lineEnd(),s.areaEnd()}v&&(y[n]=+e(h,n,t),_[n]=+i(h,n,t),s.point(r?+r(h,n,t):y[n],o?+o(h,n,t):_[n]))}if(p)return s=null,p+""||null}function n(){return Hb().defined(u).curve(c).context(a)}var e=bc,r=null,i=Ab(0),o=wc,u=Ab(!0),a=null,c=Bb,s=null;return t.x=function(n){return arguments.length?(e="function"==typeof n?n:Ab(+n),r=null,t):e},t.x0=function(n){return arguments.length?(e="function"==typeof n?n:Ab(+n),t):e},t.x1=function(n){return arguments.length?(r=null==n?null:"function"==typeof n?n:Ab(+n),t):r},t.y=function(n){return arguments.length?(i="function"==typeof n?n:Ab(+n),o=null,t):i},t.y0=function(n){return arguments.length?(i="function"==typeof n?n:Ab(+n),t):i},t.y1=function(n){return arguments.length?(o=null==n?null:"function"==typeof n?n:Ab(+n),t):o},t.lineX0=t.lineY0=function(){return n().x(e).y(i)},t.lineY1=function(){return n().x(e).y(o)},t.lineX1=function(){return n().x(r).y(i)},t.defined=function(n){return arguments.length?(u="function"==typeof n?n:Ab(!!n),t):u},t.curve=function(n){return arguments.length?(c=n,null!=a&&(s=c(a)),t):c},t.context=function(n){return arguments.length?(null==n?a=s=null:s=c(a=n),t):a},t},Vb=function(t,n){return n<t?-1:n>t?1:n>=t?0:NaN},Wb=function(t){return t},$b=function(){function t(t){var a,c,s,l,f,h=t.length,p=0,d=new Array(h),v=new Array(h),y=+i.apply(this,arguments),_=Math.min(Fb,Math.max(-Fb,o.apply(this,arguments)-y)),g=Math.min(Math.abs(_)/h,u.apply(this,arguments)),m=g*(_<0?-1:1);for(a=0;a<h;++a)(f=v[d[a]=a]=+n(t[a],a,t))>0&&(p+=f);for(null!=e?d.sort(function(t,n){return e(v[t],v[n])}):null!=r&&d.sort(function(n,e){return r(t[n],t[e])}),a=0,s=p?(_-h*m)/p:0;a<h;++a,y=l)c=d[a],f=v[c],l=y+(f>0?f*s:0)+m,v[c]={data:t[c],index:a,value:f,startAngle:y,endAngle:l,padAngle:g};return v}var n=Wb,e=Vb,r=null,i=Ab(0),o=Ab(Fb),u=Ab(0);return t.value=function(e){return arguments.length?(n="function"==typeof e?e:Ab(+e),t):n},t.sortValues=function(n){return arguments.length?(e=n,r=null,t):e},t.sort=function(n){return arguments.length?(r=n,e=null,t):r},t.startAngle=function(n){return arguments.length?(i="function"==typeof n?n:Ab(+n),t):i},t.endAngle=function(n){return arguments.length?(o="function"==typeof n?n:Ab(+n),t):o},t.padAngle=function(n){return arguments.length?(u="function"==typeof n?n:Ab(+n),t):u},t},Gb=Ec(Bb);Mc.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,n){this._curve.point(n*Math.sin(t),n*-Math.cos(t))}};var Zb=function(){return Sc(Hb().curve(Gb))},Jb=function(){var t=Xb().curve(Gb),n=t.curve,e=t.lineX0,r=t.lineX1,i=t.lineY0,o=t.lineY1;return t.angle=t.x,delete t.x,t.startAngle=t.x0,delete t.x0,t.endAngle=t.x1,delete t.x1,t.radius=t.y,delete t.y,t.innerRadius=t.y0,delete t.y0,t.outerRadius=t.y1,delete t.y1,t.lineStartAngle=function(){return Sc(e())},delete t.lineX0,t.lineEndAngle=function(){return Sc(r())},delete t.lineX1,t.lineInnerRadius=function(){return Sc(i())},delete t.lineY0,t.lineOuterRadius=function(){return Sc(o())},delete t.lineY1,t.curve=function(t){return arguments.length?n(Ec(t)):n()._curve},t},Qb=function(t,n){return[(n=+n)*Math.cos(t-=Math.PI/2),n*Math.sin(t)]},Kb=Array.prototype.slice,tw={draw:function(t,n){var e=Math.sqrt(n/qb);t.moveTo(e,0),t.arc(0,0,e,0,Fb)}},nw={draw:function(t,n){var e=Math.sqrt(n/5)/2;t.moveTo(-3*e,-e),t.lineTo(-e,-e),t.lineTo(-e,-3*e),t.lineTo(e,-3*e),t.lineTo(e,-e),t.lineTo(3*e,-e),t.lineTo(3*e,e),t.lineTo(e,e),t.lineTo(e,3*e),t.lineTo(-e,3*e),t.lineTo(-e,e),t.lineTo(-3*e,e),t.closePath()}},ew=Math.sqrt(1/3),rw=2*ew,iw={draw:function(t,n){var e=Math.sqrt(n/rw),r=e*ew;t.moveTo(0,-e),t.lineTo(r,0),t.lineTo(0,e),t.lineTo(-r,0),t.closePath()}},ow=Math.sin(qb/10)/Math.sin(7*qb/10),uw=Math.sin(Fb/10)*ow,aw=-Math.cos(Fb/10)*ow,cw={draw:function(t,n){var e=Math.sqrt(.8908130915292852*n),r=uw*e,i=aw*e;t.moveTo(0,-e),t.lineTo(r,i);for(var o=1;o<5;++o){var u=Fb*o/5,a=Math.cos(u),c=Math.sin(u);t.lineTo(c*e,-a*e),t.lineTo(a*r-c*i,c*r+a*i)}t.closePath()}},sw={draw:function(t,n){var e=Math.sqrt(n),r=-e/2;t.rect(r,r,e,e)}},lw=Math.sqrt(3),fw={draw:function(t,n){var e=-Math.sqrt(n/(3*lw));t.moveTo(0,2*e),t.lineTo(-lw*e,-e),t.lineTo(lw*e,-e),t.closePath()}},hw=-.5,pw=Math.sqrt(3)/2,dw=1/Math.sqrt(12),vw=3*(dw/2+1),yw={draw:function(t,n){var e=Math.sqrt(n/vw),r=e/2,i=e*dw,o=r,u=e*dw+e,a=-o,c=u;t.moveTo(r,i),t.lineTo(o,u),t.lineTo(a,c),t.lineTo(hw*r-pw*i,pw*r+hw*i),t.lineTo(hw*o-pw*u,pw*o+hw*u),t.lineTo(hw*a-pw*c,pw*a+hw*c),t.lineTo(hw*r+pw*i,hw*i-pw*r),t.lineTo(hw*o+pw*u,hw*u-pw*o),t.lineTo(hw*a+pw*c,hw*c-pw*a),t.closePath()}},_w=[tw,nw,iw,sw,cw,fw,yw],gw=function(){function t(){var t;if(r||(r=t=qe()),n.apply(this,arguments).draw(r,+e.apply(this,arguments)),t)return r=null,t+""||null}var n=Ab(tw),e=Ab(64),r=null;return t.type=function(e){return arguments.length?(n="function"==typeof e?e:Ab(e),t):n},t.size=function(n){return arguments.length?(e="function"==typeof n?n:Ab(+n),t):e},t.context=function(n){return arguments.length?(r=null==n?null:n,t):r},t},mw=function(){};Lc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:zc(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:zc(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};var xw=function(t){return new Lc(t)};Rc.prototype={areaStart:mw,areaEnd:mw,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x2=t,this._y2=n;break;case 1:this._point=2,this._x3=t,this._y3=n;break;case 2:this._point=3,this._x4=t,this._y4=n,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+n)/6);break;default:zc(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};var bw=function(t){return new Rc(t)};Uc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var e=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+n)/6;this._line?this._context.lineTo(e,r):this._context.moveTo(e,r);break;case 3:this._point=4;default:zc(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};var ww=function(t){return new Uc(t)};qc.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,n=this._y,e=t.length-1;if(e>0)for(var r,i=t[0],o=n[0],u=t[e]-i,a=n[e]-o,c=-1;++c<=e;)r=c/e,this._basis.point(this._beta*t[c]+(1-this._beta)*(i+r*u),this._beta*n[c]+(1-this._beta)*(o+r*a));this._x=this._y=null,this._basis.lineEnd()},point:function(t,n){this._x.push(+t),this._y.push(+n)}};var Mw=function t(n){function e(t){return 1===n?new Lc(t):new qc(t,n)}return e.beta=function(n){return t(+n)},e}(.85);Fc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:Ic(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2,this._x1=t,this._y1=n;break;case 2:this._point=3;default:Ic(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Ew=function t(n){function e(t){return new Fc(t,n)}return e.tension=function(n){return t(+n)},e}(0);Yc.prototype={areaStart:mw,areaEnd:mw,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:Ic(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Sw=function t(n){function e(t){return new Yc(t,n)}return e.tension=function(n){return t(+n)},e}(0);Bc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Ic(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Tw=function t(n){function e(t){return new Bc(t,n)}return e.tension=function(n){return t(+n)},e}(0);Xc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3;default:Hc(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var kw=function t(n){function e(t){return n?new Xc(t,n):new Fc(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);Vc.prototype={areaStart:mw,areaEnd:mw,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:Hc(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Nw=function t(n){function e(t){return n?new Vc(t,n):new Yc(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);Wc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Hc(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Cw=function t(n){function e(t){return n?new Wc(t,n):new Bc(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);$c.prototype={areaStart:mw,areaEnd:mw,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,n){t=+t,n=+n,this._point?this._context.lineTo(t,n):(this._point=1,this._context.moveTo(t,n))}};var Aw=function(t){return new $c(t)};Kc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Qc(this,this._t0,Jc(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e=NaN;if(t=+t,n=+n,t!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,Qc(this,Jc(this,e=Zc(this,t,n)),e);break;default:Qc(this,this._t0,e=Zc(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=e}}},(ts.prototype=Object.create(Kc.prototype)).point=function(t,n){Kc.prototype.point.call(this,n,t)},ns.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,e,r,i,o){this._context.bezierCurveTo(n,t,r,e,o,i)}},is.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,n=this._y,e=t.length;if(e)if(this._line?this._context.lineTo(t[0],n[0]):this._context.moveTo(t[0],n[0]),2===e)this._context.lineTo(t[1],n[1]);else for(var r=os(t),i=os(n),o=0,u=1;u<e;++o,++u)this._context.bezierCurveTo(r[0][o],i[0][o],r[1][o],i[1][o],t[u],n[u]);(this._line||0!==this._line&&1===e)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,n){this._x.push(+t),this._y.push(+n)}};var Pw=function(t){return new is(t)};us.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,n),this._context.lineTo(t,n);else{var e=this._x*(1-this._t)+t*this._t;this._context.lineTo(e,this._y),this._context.lineTo(e,n)}}this._x=t,this._y=n}};var jw=function(t){return new us(t,.5)},Ow=function(t,n){if((i=t.length)>1)for(var e,r,i,o=1,u=t[n[0]],a=u.length;o<i;++o)for(r=u,u=t[n[o]],e=0;e<a;++e)u[e][1]+=u[e][0]=isNaN(r[e][1])?r[e][0]:r[e][1]},Dw=function(t){for(var n=t.length,e=new Array(n);--n>=0;)e[n]=n;return e},zw=function(){function t(t){var o,u,a=n.apply(this,arguments),c=t.length,s=a.length,l=new Array(s);for(o=0;o<s;++o){for(var f,h=a[o],p=l[o]=new Array(c),d=0;d<c;++d)p[d]=f=[0,+i(t[d],h,d,t)],f.data=t[d];p.key=h}for(o=0,u=e(l);o<s;++o)l[u[o]].index=o;return r(l,u),l}var n=Ab([]),e=Dw,r=Ow,i=ss;return t.keys=function(e){return arguments.length?(n="function"==typeof e?e:Ab(Kb.call(e)),t):n},t.value=function(n){return arguments.length?(i="function"==typeof n?n:Ab(+n),t):i},t.order=function(n){return arguments.length?(e=null==n?Dw:"function"==typeof n?n:Ab(Kb.call(n)),t):e},t.offset=function(n){return arguments.length?(r=null==n?Ow:n,t):r},t},Lw=function(t,n){if((r=t.length)>0){for(var e,r,i,o=0,u=t[0].length;o<u;++o){for(i=e=0;e<r;++e)i+=t[e][o][1]||0;if(i)for(e=0;e<r;++e)t[e][o][1]/=i}Ow(t,n)}},Rw=function(t,n){if((a=t.length)>1)for(var e,r,i,o,u,a,c=0,s=t[n[0]].length;c<s;++c)for(o=u=0,e=0;e<a;++e)(i=(r=t[n[e]][c])[1]-r[0])>=0?(r[0]=o,r[1]=o+=i):i<0?(r[1]=u,r[0]=u+=i):r[0]=o},Uw=function(t,n){if((e=t.length)>0){for(var e,r=0,i=t[n[0]],o=i.length;r<o;++r){for(var u=0,a=0;u<e;++u)a+=t[u][r][1]||0;i[r][1]+=i[r][0]=-a/2}Ow(t,n)}},qw=function(t,n){if((i=t.length)>0&&(r=(e=t[n[0]]).length)>0){for(var e,r,i,o=0,u=1;u<r;++u){for(var a=0,c=0,s=0;a<i;++a){for(var l=t[n[a]],f=l[u][1]||0,h=l[u-1][1]||0,p=(f-h)/2,d=0;d<a;++d){var v=t[n[d]];p+=(v[u][1]||0)-(v[u-1][1]||0)}c+=f,s+=p*f}e[u-1][1]+=e[u-1][0]=o,c&&(o-=s/c)}e[u-1][1]+=e[u-1][0]=o,Ow(t,n)}},Iw=function(t){var n=t.map(ls);return Dw(t).sort(function(t,e){return n[t]-n[e]})},Fw=function(t){return Iw(t).reverse()},Yw=function(t){var n,e,r=t.length,i=t.map(ls),o=Dw(t).sort(function(t,n){return i[n]-i[t]}),u=0,a=0,c=[],s=[];for(n=0;n<r;++n)e=o[n],u<a?(u+=i[e],c.push(e)):(a+=i[e],s.push(e));return s.reverse().concat(c)},Bw=function(t){return Dw(t).reverse()},Hw=function(t){return function(){return t}};ps.prototype={constructor:ps,insert:function(t,n){var e,r,i;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=_s(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)r=e.U,e===r.L?(i=r.R,i&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.R&&(vs(this,e),t=e,e=t.U),e.C=!1,r.C=!0,ys(this,r))):(i=r.L,i&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.L&&(ys(this,e),t=e,e=t.U),e.C=!1,r.C=!0,vs(this,r))),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,r,i=t.U,o=t.L,u=t.R;if(e=o?u?_s(u):o:u,i?i.L===t?i.L=e:i.R=e:this._=e,o&&u?(r=e.C,e.C=t.C,e.L=o,o.U=e,e!==u?(i=e.U,e.U=t.U,t=e.R,i.L=t,e.R=u,u.U=e):(e.U=i,i=e,t=e.R)):(r=t.C,t=e),t&&(t.U=i),!r){if(t&&t.C)return void(t.C=!1);do{if(t===this._)break;if(t===i.L){if(n=i.R,n.C&&(n.C=!1,i.C=!0,vs(this,i),n=i.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,ys(this,n),n=i.R),n.C=i.C,i.C=n.R.C=!1,vs(this,i),t=this._;break}}else if(n=i.L,n.C&&(n.C=!1,i.C=!0,ys(this,i),n=i.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,vs(this,n),n=i.L),n.C=i.C,i.C=n.L.C=!1,ys(this,i),t=this._;break}n.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var Xw,Vw,Ww,$w,Gw,Zw=[],Jw=[],Qw=1e-6,Kw=1e-12;Ys.prototype={constructor:Ys,polygons:function(){var t=this.edges;return this.cells.map(function(n){var e=n.halfedges.map(function(e){return Ts(n,t[e])});return e.data=n.site.data,e})},triangles:function(){var t=[],n=this.edges;return this.cells.forEach(function(e,r){if(o=(i=e.halfedges).length)for(var i,o,u,a=e.site,c=-1,s=n[i[o-1]],l=s.left===a?s.right:s.left;++c<o;)u=l,s=n[i[c]],l=s.left===a?s.right:s.left,u&&l&&r<u.index&&r<l.index&&Is(a,u,l)<0&&t.push([a.data,u.data,l.data])}),t},links:function(){return this.edges.filter(function(t){return t.right}).map(function(t){return{source:t.left.data,target:t.right.data}})},find:function(t,n,e){for(var r,i,o=this,u=o._found||0,a=o.cells.length;!(i=o.cells[u]);)if(++u>=a)return null;var c=t-i.site[0],s=n-i.site[1],l=c*c+s*s;do{i=o.cells[r=u],u=null,i.halfedges.forEach(function(e){var r=o.edges[e],a=r.left;if(a!==i.site&&a||(a=r.right)){var c=t-a[0],s=n-a[1],f=c*c+s*s;f<l&&(l=f,u=a.index)}})}while(null!==u);return o._found=r,null==e||l<=e*e?i.site:null}};var tM=function(){function t(t){return new Ys(t.map(function(r,i){var o=[Math.round(n(r,i,t)/Qw)*Qw,Math.round(e(r,i,t)/Qw)*Qw];return o.index=i,o.data=r,o}),r)}var n=fs,e=hs,r=null;return t.polygons=function(n){return t(n).polygons()},t.links=function(n){return t(n).links()},t.triangles=function(n){return t(n).triangles()},t.x=function(e){return arguments.length?(n="function"==typeof e?e:Hw(+e),t):n},t.y=function(n){return arguments.length?(e="function"==typeof n?n:Hw(+n),t):e},t.extent=function(n){return arguments.length?(r=null==n?null:[[+n[0][0],+n[0][1]],[+n[1][0],+n[1][1]]],t):r&&[[r[0][0],r[0][1]],[r[1][0],r[1][1]]]},t.size=function(n){return arguments.length?(r=null==n?null:[[0,0],[+n[0],+n[1]]],t):r&&[r[1][0]-r[0][0],r[1][1]-r[0][1]]},t},nM=function(t){return function(){return t}};Hs.prototype={constructor:Hs,scale:function(t){return 1===t?this:new Hs(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new Hs(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var eM=new Hs(1,0,0);Xs.prototype=Hs.prototype;var rM=function(){t.event.preventDefault(),t.event.stopImmediatePropagation()},iM=function(){function n(t){t.property("__zoom",Gs).on("wheel.zoom",s).on("mousedown.zoom",l).on("dblclick.zoom",f).filter(Js).on("touchstart.zoom",h).on("touchmove.zoom",p).on("touchend.zoom touchcancel.zoom",d).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function e(t,n){return n=Math.max(b,Math.min(w,n)),n===t.k?t:new Hs(n,t.x,t.y)}function r(t,n,e){var r=n[0]-e[0]*t.k,i=n[1]-e[1]*t.k;return r===t.x&&i===t.y?t:new Hs(t.k,r,i)}function i(t,n){var e=t.invertX(n[0][0])-M,r=t.invertX(n[1][0])-E,i=t.invertY(n[0][1])-S,o=t.invertY(n[1][1])-T;return t.translate(r>e?(e+r)/2:Math.min(0,e)||Math.max(0,r),o>i?(i+o)/2:Math.min(0,i)||Math.max(0,o))}function o(t){return[(+t[0][0]+ +t[1][0])/2,(+t[0][1]+ +t[1][1])/2]}function u(t,n,e){t.on("start.zoom",function(){a(this,arguments).start()}).on("interrupt.zoom end.zoom",function(){a(this,arguments).end()}).tween("zoom",function(){var t=this,r=arguments,i=a(t,r),u=m.apply(t,r),c=e||o(u),s=Math.max(u[1][0]-u[0][0],u[1][1]-u[0][1]),l=t.__zoom,f="function"==typeof n?n.apply(t,r):n,h=N(l.invert(c).concat(s/l.k),f.invert(c).concat(s/f.k));return function(t){if(1===t)t=f;else{var n=h(t),e=s/n[2];t=new Hs(e,c[0]-n[0]*e,c[1]-n[1]*e)}i.zoom(null,t)}})}function a(t,n){for(var e,r=0,i=C.length;r<i;++r)if((e=C[r]).that===t)return e;return new c(t,n)}function c(t,n){this.that=t,this.args=n,this.index=-1,this.active=0,this.extent=m.apply(t,n)}function s(){function t(){n.wheel=null,n.end()}if(g.apply(this,arguments)){var n=a(this,arguments),o=this.__zoom,u=Math.max(b,Math.min(w,o.k*Math.pow(2,x.apply(this,arguments)))),c=rf(this);if(n.wheel)n.mouse[0][0]===c[0]&&n.mouse[0][1]===c[1]||(n.mouse[1]=o.invert(n.mouse[0]=c)),clearTimeout(n.wheel);else{if(o.k===u)return;n.mouse=[c,o.invert(c)],Tp(this),n.start()}rM(),n.wheel=setTimeout(t,O),n.zoom("mouse",i(r(e(o,u),n.mouse[0],n.mouse[1]),n.extent))}}function l(){function n(){if(rM(),!o.moved){var n=t.event.clientX-s,e=t.event.clientY-l;o.moved=n*n+e*e>D}o.zoom("mouse",i(r(o.that.__zoom,o.mouse[0]=rf(o.that),o.mouse[1]),o.extent))}function e(){u.on("mousemove.zoom mouseup.zoom",null),bt(t.event.view,o.moved),rM(),o.end()}if(!y&&g.apply(this,arguments)){var o=a(this,arguments),u=If(t.event.view).on("mousemove.zoom",n,!0).on("mouseup.zoom",e,!0),c=rf(this),s=t.event.clientX,l=t.event.clientY;Xf(t.event.view),Vs(),o.mouse=[c,this.__zoom.invert(c)],Tp(this),o.start()}}function f(){if(g.apply(this,arguments)){var o=this.__zoom,a=rf(this),c=o.invert(a),s=o.k*(t.event.shiftKey?.5:2),l=i(r(e(o,s),a,c),m.apply(this,arguments));rM(),k>0?If(this).transition().duration(k).call(u,l,a):If(this).call(n.transform,l)}}function h(){if(g.apply(this,arguments)){var n,e,r,i,o=a(this,arguments),u=t.event.changedTouches,c=u.length;for(Vs(),e=0;e<c;++e)r=u[e],i=Yf(this,u,r.identifier),i=[i,this.__zoom.invert(i),r.identifier],o.touch0?o.touch1||(o.touch1=i):(o.touch0=i,n=!0);if(v&&(v=clearTimeout(v),!o.touch1))return o.end(),void((i=If(this).on("dblclick.zoom"))&&i.apply(this,arguments));n&&(v=setTimeout(function(){v=null},j),Tp(this),o.start())}}function p(){var n,o,u,c,s=a(this,arguments),l=t.event.changedTouches,f=l.length;for(rM(),v&&(v=clearTimeout(v)),n=0;n<f;++n)o=l[n],u=Yf(this,l,o.identifier),s.touch0&&s.touch0[2]===o.identifier?s.touch0[0]=u:s.touch1&&s.touch1[2]===o.identifier&&(s.touch1[0]=u);if(o=s.that.__zoom,s.touch1){var h=s.touch0[0],p=s.touch0[1],d=s.touch1[0],y=s.touch1[1],_=(_=d[0]-h[0])*_+(_=d[1]-h[1])*_,g=(g=y[0]-p[0])*g+(g=y[1]-p[1])*g;o=e(o,Math.sqrt(_/g)),u=[(h[0]+d[0])/2,(h[1]+d[1])/2],c=[(p[0]+y[0])/2,(p[1]+y[1])/2]}else{if(!s.touch0)return;u=s.touch0[0],c=s.touch0[1]}s.zoom("touch",i(r(o,u,c),s.extent))}function d(){var n,e,r=a(this,arguments),i=t.event.changedTouches,o=i.length;for(Vs(),y&&clearTimeout(y),y=setTimeout(function(){y=null},j),n=0;n<o;++n)e=i[n],r.touch0&&r.touch0[2]===e.identifier?delete r.touch0:r.touch1&&r.touch1[2]===e.identifier&&delete r.touch1;r.touch1&&!r.touch0&&(r.touch0=r.touch1,delete r.touch1),r.touch0?r.touch0[1]=this.__zoom.invert(r.touch0[0]):r.end()}var v,y,g=Ws,m=$s,x=Zs,b=0,w=1/0,M=-w,E=w,S=M,T=E,k=250,N=Jh,C=[],A=_("start","zoom","end"),j=500,O=150,D=0;return n.transform=function(t,n){var e=t.selection?t.selection():t;e.property("__zoom",Gs),t!==e?u(t,n):e.interrupt().each(function(){a(this,arguments).start().zoom(null,"function"==typeof n?n.apply(this,arguments):n).end()})},n.scaleBy=function(t,e){n.scaleTo(t,function(){return this.__zoom.k*("function"==typeof e?e.apply(this,arguments):e)})},n.scaleTo=function(t,u){n.transform(t,function(){var t=m.apply(this,arguments),n=this.__zoom,a=o(t),c=n.invert(a);return i(r(e(n,"function"==typeof u?u.apply(this,arguments):u),a,c),t)})},n.translateBy=function(t,e,r){n.transform(t,function(){return i(this.__zoom.translate("function"==typeof e?e.apply(this,arguments):e,"function"==typeof r?r.apply(this,arguments):r),m.apply(this,arguments))})},n.translateTo=function(t,e,r){n.transform(t,function(){var t=m.apply(this,arguments),n=this.__zoom,u=o(t);return i(eM.translate(u[0],u[1]).scale(n.k).translate("function"==typeof e?-e.apply(this,arguments):-e,"function"==typeof r?-r.apply(this,arguments):-r),t)})},c.prototype={start:function(){return 1==++this.active&&(this.index=C.push(this)-1,this.emit("start")),this},zoom:function(t,n){return this.mouse&&"mouse"!==t&&(this.mouse[1]=n.invert(this.mouse[0])),this.touch0&&"touch"!==t&&(this.touch0[1]=n.invert(this.touch0[0])),this.touch1&&"touch"!==t&&(this.touch1[1]=n.invert(this.touch1[0])),this.that.__zoom=n,this.emit("zoom"),this},end:function(){return 0==--this.active&&(C.splice(this.index,1),this.index=-1,this.emit("end")),this},emit:function(t){P(new Bs(n,t,this.that.__zoom),A.apply,A,[t,this.that,this.args])}},n.wheelDelta=function(t){return arguments.length?(x="function"==typeof t?t:nM(+t),n):x},n.filter=function(t){return arguments.length?(g="function"==typeof t?t:nM(!!t),n):g},n.extent=function(t){return arguments.length?(m="function"==typeof t?t:nM([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),n):m},n.scaleExtent=function(t){return arguments.length?(b=+t[0],w=+t[1],n):[b,w]},n.translateExtent=function(t){return arguments.length?(M=+t[0][0],E=+t[1][0],S=+t[0][1],T=+t[1][1],n):[[M,S],[E,T]]},n.duration=function(t){return arguments.length?(k=+t,n):k},n.interpolate=function(t){return arguments.length?(N=t,n):N},n.on=function(){var t=A.on.apply(A,arguments);return t===A?n:t},n.clickDistance=function(t){return arguments.length?(D=(t=+t)*t,n):Math.sqrt(D)},n};t.version="4.10.0",t.bisect=nl,t.bisectRight=nl,t.bisectLeft=el,t.ascending=Qs,t.bisector=Ks,t.cross=il,t.descending=ol,t.deviation=cl,t.extent=sl,t.histogram=bl,t.thresholdFreedmanDiaconis=Ml,t.thresholdScott=El,t.thresholdSturges=xl,t.max=Sl,t.mean=Tl,t.median=kl,t.merge=Nl,t.min=Cl,t.pairs=rl,t.permute=Al,t.quantile=wl,t.range=vl,t.scan=Pl,t.shuffle=jl,t.sum=Ol,t.ticks=ml,t.tickIncrement=r,t.tickStep=i,t.transpose=Dl,t.variance=al,t.zip=zl,t.axisTop=p,t.axisRight=d,t.axisBottom=v,t.axisLeft=y,t.brush=Ld,t.brushX=De,t.brushY=ze,t.brushSelection=Oe,t.chord=Bd,t.ribbon=Gd,t.nest=Zd,t.set=Qe,t.map=Ve,t.keys=Qd,t.values=Kd,t.entries=tv,t.color=Ct,t.rgb=Ot,t.hsl=Rt,t.lab=Ft,t.hcl=$t,t.cubehelix=Jt,t.dispatch=_,t.drag=Wf,t.dragDisable=Xf,t.dragEnable=bt,t.dsvFormat=nv,t.csvParse=rv,t.csvParseRows=iv,t.csvFormat=ov,t.csvFormatRows=uv,t.tsvParse=cv,t.tsvParseRows=sv,t.tsvFormat=lv,t.tsvFormatRows=fv,t.easeLinear=ae,t.easeQuad=le,t.easeQuadIn=ce,t.easeQuadOut=se,t.easeQuadInOut=le,t.easeCubic=pe,t.easeCubicIn=fe,t.easeCubicOut=he,t.easeCubicInOut=pe,t.easePoly=Jp,t.easePolyIn=Gp,t.easePolyOut=Zp,t.easePolyInOut=Jp,t.easeSin=ye,t.easeSinIn=de,t.easeSinOut=ve,t.easeSinInOut=ye,t.easeExp=me,t.easeExpIn=_e,t.easeExpOut=ge,t.easeExpInOut=me,t.easeCircle=we,t.easeCircleIn=xe,t.easeCircleOut=be,t.easeCircleInOut=we,t.easeBounce=Ee,t.easeBounceIn=Me,t.easeBounceOut=Ee,t.easeBounceInOut=Se,t.easeBack=hd,t.easeBackIn=ld,t.easeBackOut=fd,t.easeBackInOut=hd,t.easeElastic=vd,t.easeElasticIn=dd,t.easeElasticOut=vd,t.easeElasticInOut=yd,t.forceCenter=hv,t.forceCollide=Av,t.forceLink=Pv,t.forceManyBody=zv,t.forceSimulation=Dv,t.forceX=Lv,t.forceY=Rv,t.formatDefaultLocale=gr,t.formatLocale=Zv,t.formatSpecifier=yr,t.precisionFixed=Jv,t.precisionPrefix=Qv,t.precisionRound=Kv,t.geoArea=i_,t.geoBounds=a_,t.geoCentroid=s_,t.geoCircle=E_,t.geoClipExtent=P_,t.geoContains=Y_,t.geoDistance=q_,t.geoGraticule=ki,t.geoGraticule10=Ni,t.geoInterpolate=B_,t.geoLength=L_,t.geoPath=yg,t.geoAlbers=Tg,t.geoAlbersUsa=kg,t.geoAzimuthalEqualArea=Cg,t.geoAzimuthalEqualAreaRaw=Ng,t.geoAzimuthalEquidistant=Pg,t.geoAzimuthalEquidistantRaw=Ag,t.geoConicConformal=Og,t.geoConicConformalRaw=_o,t.geoConicEqualArea=Sg,t.geoConicEqualAreaRaw=so,t.geoConicEquidistant=zg,t.geoConicEquidistantRaw=mo,t.geoEquirectangular=Dg,t.geoEquirectangularRaw=go,t.geoGnomonic=Lg,t.geoGnomonicRaw=xo,t.geoIdentity=Rg,t.geoProjection=oo,t.geoProjectionMutator=uo,t.geoMercator=jg,t.geoMercatorRaw=po,t.geoOrthographic=Ug,t.geoOrthographicRaw=wo,t.geoStereographic=qg,t.geoStereographicRaw=Mo,t.geoTransverseMercator=Ig,t.geoTransverseMercatorRaw=Eo,t.geoRotation=M_,t.geoStream=t_,t.geoTransform=xg,t.cluster=Fg,t.hierarchy=Do,t.pack=rm,t.packSiblings=nm,t.packEnclose=tm,t.partition=um,t.stratify=lm,t.tree=fm,t.treemap=vm,t.treemapBinary=ym,t.treemapDice=om,t.treemapSlice=hm,t.treemapSliceDice=_m,t.treemapSquarify=dm,t.treemapResquarify=gm,t.interpolate=Bh,t.interpolateArray=Lh,t.interpolateBasis=Ah,t.interpolateBasisClosed=Ph,t.interpolateDate=Rh,t.interpolateNumber=Uh,t.interpolateObject=qh,t.interpolateRound=Hh,t.interpolateString=Yh,t.interpolateTransformCss=$h,t.interpolateTransformSvg=Gh,t.interpolateZoom=Jh,t.interpolateRgb=Oh,t.interpolateRgbBasis=Dh,t.interpolateRgbBasisClosed=zh,t.interpolateHsl=Qh,t.interpolateHslLong=Kh,t.interpolateLab=yn,t.interpolateHcl=tp,t.interpolateHclLong=np,t.interpolateCubehelix=ep,t.interpolateCubehelixLong=rp,t.quantize=ip,t.path=qe,t.polygonArea=mm,t.polygonCentroid=xm;t.polygonHull=wm,t.polygonContains=Mm,t.polygonLength=Em,t.quadtree=ar,t.queue=Tu,t.randomUniform=Nm,t.randomNormal=Cm,t.randomLogNormal=Am,t.randomBates=jm,t.randomIrwinHall=Pm,t.randomExponential=Om,t.request=Dm,t.html=Lm,t.json=Rm,t.text=Um,t.xml=qm,t.csv=Fm,t.tsv=Ym,t.scaleBand=Pu,t.scalePoint=Ou,t.scaleIdentity=Bu,t.scaleLinear=Yu,t.scaleLog=Zu,t.scaleOrdinal=Au,t.scaleImplicit=Vm,t.scalePow=Qu,t.scaleSqrt=Ku,t.scaleQuantile=ta,t.scaleQuantize=na,t.scaleThreshold=ea,t.scaleTime=db,t.scaleUtc=vb,t.schemeCategory10=_b,t.schemeCategory20b=gb,t.schemeCategory20c=mb,t.schemeCategory20=xb,t.interpolateCubehelixDefault=bb,t.interpolateRainbow=Sb,t.interpolateWarm=wb,t.interpolateCool=Mb,t.interpolateViridis=Tb,t.interpolateMagma=kb,t.interpolateInferno=Nb,t.interpolatePlasma=Cb,t.scaleSequential=lc,t.creator=Wl,t.local=E,t.matcher=Ql,t.mouse=rf,t.namespace=Vl,t.namespaces=Xl,t.select=If,t.selectAll=Ff,t.selection=mt,t.selector=of,t.selectorAll=af,t.style=W,t.touch=Yf,t.touches=Bf,t.window=Tf,t.customEvent=P,t.arc=Yb,t.area=Xb,t.line=Hb,t.pie=$b,t.areaRadial=Jb,t.radialArea=Jb,t.lineRadial=Zb,t.radialLine=Zb,t.pointRadial=Qb,t.linkHorizontal=jc,t.linkVertical=Oc,t.linkRadial=Dc,t.symbol=gw,t.symbols=_w,t.symbolCircle=tw,t.symbolCross=nw,t.symbolDiamond=iw,t.symbolSquare=sw,t.symbolStar=cw,t.symbolTriangle=fw,t.symbolWye=yw,t.curveBasisClosed=bw,t.curveBasisOpen=ww,t.curveBasis=xw,t.curveBundle=Mw,t.curveCardinalClosed=Sw,t.curveCardinalOpen=Tw,t.curveCardinal=Ew,t.curveCatmullRomClosed=Nw,t.curveCatmullRomOpen=Cw,t.curveCatmullRom=kw,t.curveLinearClosed=Aw,t.curveLinear=Bb,t.curveMonotoneX=es,t.curveMonotoneY=rs,t.curveNatural=Pw,t.curveStep=jw,t.curveStepAfter=cs,t.curveStepBefore=as,t.stack=zw,t.stackOffsetExpand=Lw,t.stackOffsetDiverging=Rw,t.stackOffsetNone=Ow,t.stackOffsetSilhouette=Uw,t.stackOffsetWiggle=qw,t.stackOrderAscending=Iw,t.stackOrderDescending=Fw,t.stackOrderInsideOut=Yw,t.stackOrderNone=Dw,t.stackOrderReverse=Bw,t.timeInterval=ra,t.timeMillisecond=tx,t.timeMilliseconds=nx,t.utcMillisecond=tx,t.utcMilliseconds=nx,t.timeSecond=ix,t.timeSeconds=ox,t.utcSecond=ix,t.utcSeconds=ox,t.timeMinute=ux,t.timeMinutes=ax,t.timeHour=cx,t.timeHours=sx,t.timeDay=lx,t.timeDays=fx,t.timeWeek=hx,t.timeWeeks=mx,t.timeSunday=hx,t.timeSundays=mx,t.timeMonday=px,t.timeMondays=xx,t.timeTuesday=dx,t.timeTuesdays=bx,t.timeWednesday=vx,t.timeWednesdays=wx,t.timeThursday=yx,t.timeThursdays=Mx,t.timeFriday=_x,t.timeFridays=Ex,t.timeSaturday=gx,t.timeSaturdays=Sx,t.timeMonth=Tx,t.timeMonths=kx,t.timeYear=Nx,t.timeYears=Cx,t.utcMinute=Ax,t.utcMinutes=Px,t.utcHour=jx,t.utcHours=Ox,t.utcDay=Dx,t.utcDays=zx,t.utcWeek=Lx,t.utcWeeks=Bx,t.utcSunday=Lx,t.utcSundays=Bx,t.utcMonday=Rx,t.utcMondays=Hx,t.utcTuesday=Ux,t.utcTuesdays=Xx,t.utcWednesday=qx,t.utcWednesdays=Vx,t.utcThursday=Ix,t.utcThursdays=Wx,t.utcFriday=Fx,t.utcFridays=$x,t.utcSaturday=Yx,t.utcSaturdays=Gx,t.utcMonth=Zx,t.utcMonths=Jx,t.utcYear=Qx,t.utcYears=tb,t.timeFormatDefaultLocale=rc,t.timeFormatLocale=sa,t.isoFormat=ob,t.isoParse=ub,t.now=mn,t.timer=wn,t.timerFlush=Mn,t.timeout=dp,t.interval=vp,t.transition=oe,t.active=xd,t.interrupt=Tp,t.voronoi=tM,t.zoom=iM,t.zoomTransform=Xs,t.zoomIdentity=eM,Object.defineProperty(t,"__esModule",{value:!0})})},"./node_modules/reselect/lib/index.js":function(t,n,e){"use strict";function r(t,n){return t===n}function i(t,n,e){if(null===n||null===e||n.length!==e.length)return!1;for(var r=n.length,i=0;i<r;i++)if(!t(n[i],e[i]))return!1;return!0}function o(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:r,e=null,o=null;return function(){return i(n,e,arguments)||(o=t.apply(null,arguments)),e=arguments,o}}function u(t){var n=Array.isArray(t[0])?t[0]:t;if(!n.every(function(t){return"function"==typeof t})){var e=n.map(function(t){return void 0===t?"undefined":s(t)}).join(", ");throw new Error("Selector creators expect all input-selectors to be functions, instead received the following types: ["+e+"]")}return n}function a(t){for(var n=arguments.length,e=Array(n>1?n-1:0),r=1;r<n;r++)e[r-1]=arguments[r];return function(){for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var a=0,c=r.pop(),s=u(r),l=t.apply(void 0,[function(){return a++,c.apply(null,arguments)}].concat(e)),f=o(function(){for(var t=[],n=s.length,e=0;e<n;e++)t.push(s[e].apply(null,arguments));return l.apply(null,t)});return f.resultFunc=c,f.recomputations=function(){return a},f.resetRecomputations=function(){return a=0},f}}function c(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:l;if("object"!==(void 0===t?"undefined":s(t)))throw new Error("createStructuredSelector expects first argument to be an object where each property is a selector, instead received a "+(void 0===t?"undefined":s(t)));var e=Object.keys(t);return n(e.map(function(n){return t[n]}),function(){for(var t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];return n.reduce(function(t,n,r){return t[e[r]]=n,t},{})})}var s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};n.__esModule=!0,n.defaultMemoize=o,n.createSelectorCreator=a,n.createStructuredSelector=c;var l=n.createSelector=a(o)},"./src/components/Avatar/Avatar.js":function(t,n,e){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(n,"__esModule",{value:!0});var i=e("./node_modules/react/react.js"),o=r(i),u=e("./node_modules/prop-types/index.js"),a=r(u);e("./src/components/Avatar/Avatar.scss");var c=function(t){return o.default.createElement("figure",{className:"person-view"},o.default.createElement("div",{className:"person-avatar-and-name"},o.default.createElement("div",{className:t.item.avatar?"user-list-avatar display-user":"user-list-avatar"},o.default.createElement("img",{className:"user-list-avatar-img",src:t.item.avatar})),o.default.createElement("div",{className:t.item.avatar?"user-list-avatar":"user-list-avatar display-user"},o.default.createElement("i",{className:"fa fa-user-circle-o avatar","aria-hidden":"true"})),o.default.createElement("figurecaption",null,t.item.name)),o.default.createElement("div",{className:"person-at-home"},o.default.createElement("i",{className:"fa fa-home person-at-home"+(t.item.home?"":"__false"),"aria-hidden":"true"})))};c.propTypes={item:a.default.object,home:a.default.bool},n.default=c},"./src/components/Avatar/Avatar.scss":function(t,n){},"./src/components/Chart/Axis/Axis.js":function(t,n,e){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}function o(t,n){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?t:n}function u(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(t,n):t.__proto__=n)}Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var a=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),c=e("./node_modules/react/react.js"),s=r(c),l=e("./node_modules/d3/build/d3.js"),f=function(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var e in t)Object.prototype.hasOwnProperty.call(t,e)&&(n[e]=t[e]);return n.default=t,n}(l),h=e("./node_modules/react-dom/index.js"),p=(r(h),e("./node_modules/prop-types/index.js")),d=r(p),v=function(t){function n(){return i(this,n),o(this,(n.__proto__||Object.getPrototypeOf(n)).apply(this,arguments))}return u(n,t),a(n,[{key:"componentDidUpdate",value:function(){this.renderAxis()}},{key:"componentDidMount",value:function(){this.renderAxis()}},{key:"renderAxis",value:function(){var t="axis"+this.props.orient,n=f[t](this.props.scale).ticks(this.props.ticks);this.props.format&&(n=n.tickFormat(f.timeFormat(this.props.format))),f.select(this.axisElement).call(n)}},{key:"render",value:function(){var t=this,n="translate(0,"+this.props.h+")";return s.default.createElement("g",{className:"axis",ref:function(n){t.axisElement=n},transform:"x"===this.props.axisType?n:""})}}]),n}(c.Component);n.default=v,v.propTypes={h:d.default.number,orient:d.default.oneOf(["Left","Bottom","Right","Top"]),scale:d.default.func,axisType:d.default.oneOf(["x","y"]),ticks:d.default.number,format:d.default.string}},"./src/components/Chart/Chart.js":function(t,n,e){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}function o(t,n){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?t:n}function u(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(t,n):t.__proto__=n)}Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var a=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),c=e("./node_modules/react/react.js"),s=r(c),l=e("./node_modules/prop-types/index.js"),f=r(l),h=e("./src/components/Chart/LineChart/LineChart.js"),p=r(h),d=function(t){function n(t){i(this,n);var e=o(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,t));return e.setChildWidth=function(){e.setState({calcWidth:e.getElementWidth()})},e.state={calcWidth:200},e}return u(n,t),a(n,[{key:"componentDidMount",value:function(){window.addEventListener("resize",this.setChildWidth),this.setChildWidth()}},{key:"componentWillUnmount",value:function(){window.removeEventListener("resize",this.setChildWidth)}},{key:"getElementWidth",value:function(){return this.div.offsetWidth}},{key:"render",value:function(){var t=this;return s.default.createElement("div",{className:this.props.styleName,ref:function(n){t.div=n}},s.default.createElement(p.default,{width:this.state.calcWidth,data:this.props.data}))}}]),n}(s.default.Component);n.default=d,d.propTypes={parent:f.default.string,styleName:f.default.string,data:f.default.array}},"./src/components/Chart/Dots/Dots.js":function(t,n,e){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(n,"__esModule",{value:!0}),n.Dots=void 0;var i=e("./node_modules/react/react.js"),o=r(i),u=e("./node_modules/prop-types/index.js"),a=r(u);(n.Dots=function(t){return o.default.createElement("g",null,t.data.map(function(n,e){return o.default.createElement("circle",{className:"dot",r:"5",cx:t.x(n.date),cy:t.y(n[t.yData]),key:e})}))}).propTypes={data:a.default.array,yData:a.default.string,x:a.default.func,y:a.default.func}},"./src/components/Chart/Grid/Grid.js":function(t,n,e){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}function o(t,n){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?t:n}function u(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(t,n):t.__proto__=n)}Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var a=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),c=e("./node_modules/react/react.js"),s=r(c),l=e("./node_modules/d3/build/d3.js"),f=function(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var e in t)Object.prototype.hasOwnProperty.call(t,e)&&(n[e]=t[e]);return n.default=t,n}(l),h=e("./node_modules/react-dom/index.js"),p=(r(h),e("./node_modules/prop-types/index.js")),d=r(p),v=function(t){function n(){return i(this,n),o(this,(n.__proto__||Object.getPrototypeOf(n)).apply(this,arguments))}return u(n,t),a(n,[{key:"componentDidUpdate",value:function(){this.renderGrid()}},{key:"componentDidMount",value:function(){this.renderGrid()}},{key:"renderGrid",value:function(){var t="axis"+this.props.orient,n=f[t](this.props.scale).ticks(this.props.ticks).tickSize(-this.props.len,0,0).tickFormat("");f.select(this.gridElement).call(n)}},{key:"render",value:function(){var t=this,n="translate(0,"+this.props.h+")";return s.default.createElement("g",{className:"grid",ref:function(n){t.gridElement=n},transform:"x"===this.props.gridType?n:""})}}]),n}(c.Component);n.default=v,v.propTypes={h:d.default.number,orient:d.default.oneOf(["Left","Bottom","Right","Top"]),scale:d.default.func,gridType:d.default.oneOf(["x","y"]),ticks:d.default.number,len:d.default.number}},"./src/components/Chart/LineChart/LineChart.js":function(t,n,e){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}function o(t,n){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?t:n}function u(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(t,n):t.__proto__=n)}Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var a=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}();e("./src/components/Chart/LineChart/index.scss");var c=e("./node_modules/react/react.js"),s=r(c),l=e("./node_modules/d3/build/d3.js"),f=function(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var e in t)Object.prototype.hasOwnProperty.call(t,e)&&(n[e]=t[e]);return n.default=t,n}(l),h=e("./node_modules/prop-types/index.js"),p=r(h),d=e("./src/components/Chart/Dots/Dots.js"),v=e("./src/components/Chart/Grid/Grid.js"),y=r(v),_=e("./src/components/Chart/Axis/Axis.js"),g=r(_),m=function(t){function n(t){return i(this,n),o(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,t))}return u(n,t),a(n,[{key:"render",value:function(){var t=this,n={top:20,right:20,bottom:20,left:50},e=this.props.width-(n.left+n.right),r=this.props.height-(n.top+n.bottom),i=f.timeParse("%x");this.data=this.props.data.map(function(n){return Object.assign({},n,{date:i(n[t.props.xData])})}).sort(function(n,e){return Date.parse(n[t.props.xData])-Date.parse(e[t.props.xData])});var o=f.scaleTime().domain(f.extent(this.data,function(t){return t.date})).rangeRound([0,e]),u=f.scaleLinear().domain([0,500]).range([r,0]),a=f.line().x(function(t){return o(t.date)}).y(function(n){return u(n[t.props.yData])}).curve(f.curveCardinal),c="translate("+n.left+","+n.top+")";return s.default.createElement("div",{className:this.props.styleName,style:{width:this.props.width,height:this.props.height}},s.default.createElement("svg",{width:"100%",height:"100%"},s.default.createElement("g",{transform:c},s.default.createElement(y.default,{h:r,len:r,scale:o,gridType:"x",orient:"Bottom",ticks:2*this.data.length}),s.default.createElement(y.default,{h:r,len:e,scale:u,gridType:"y",orient:"Left",ticks:6}),s.default.createElement(g.default,{h:r,orient:"Left",scale:u,axisType:"y",ticks:6}),s.default.createElement(g.default,{h:r,orient:"Bottom",scale:o,axisType:"x",ticks:8,format:"%d/%m"}),s.default.createElement(d.Dots,{x:o,y:u,data:this.data,yData:this.props.yData}),s.default.createElement("path",{className:"line shadow",d:a(this.data),strokeLinecap:"round"}))))}}]),n}(c.Component);n.default=m,m.propTypes={width:p.default.number,height:p.default.number,xData:p.default.string,yData:p.default.string,data:p.default.array,styleName:p.default.string},m.defaultProps={width:800,height:300,xData:"day",yData:"count",data:[{day:"02/11/2016",count:180},{day:"02/1/2016",count:250},{day:"02/10/2016",count:83},{day:"02/24/2016",count:430},{day:"02/15/2016",count:140},{day:"02/27/2016",count:310},{day:"02/17/2016",count:430},{day:"02/8/2016",count:180},{day:"02/19/2016",count:150},{day:"02/2/2016",count:180},{day:"02/3/2016",count:250}]}},"./src/components/Chart/LineChart/index.scss":function(t,n){},"./src/components/DashboardContent/DashChart.js":function(t,n,e){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}function o(t,n){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?t:n}function u(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(t,n):t.__proto__=n)}function a(t){return{data:t.chart.data}}Object.defineProperty(n,"__esModule",{value:!0});var c=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),s=e("./node_modules/react/react.js"),l=r(s);e("./src/components/DashboardContent/DashChart.scss");var f=e("./src/components/Chart/Chart.js"),h=r(f),p=e("./node_modules/prop-types/index.js"),d=r(p),v=e("./node_modules/react-redux/es/index.js"),y=(e("./node_modules/redux/es/index.js"),function(t){function n(t){return i(this,n),o(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,t))}return u(n,t),c(n,[{key:"render",value:function(){return l.default.createElement("div",{className:"chart"},l.default.createElement("h2",{className:"list-title"},"Power consumption"),l.default.createElement(h.default,{data:this.props.data,styleName:"dashChart"}))}}]),n}(l.default.Component));y.propTypes={data:d.default.array},n.default=(0,v.connect)(a)(y)},"./src/components/DashboardContent/DashChart.scss":function(t,n){},"./src/components/DashboardContent/ListDevices.js":function(t,n,e){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}function o(t,n){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?t:n}function u(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(t,n):t.__proto__=n)}Object.defineProperty(n,"__esModule",{value:!0});var a=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),c=e("./node_modules/react/react.js"),s=r(c);e("./src/components/DashboardContent/ListDevices.scss");var l=e("./node_modules/react-redux/es/index.js"),f=e("./node_modules/prop-types/index.js"),h=r(f),p=e("./node_modules/redux/es/index.js"),d=e("./src/actions/devices.action.js"),v=e("./src/components/DeviceListItem/DeviceListItem.js"),y=r(v),_=e("./src/components/Message/Message.js"),g=e("./src/components/Popup/Popup.js"),m=e("./src/components/Button/Button.js"),x=(e("./src/selectors/index.js"),function(t){function n(t){i(this,n);var e=o(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,t));return e.state={popupShown:!1,currentId:""},e.setPopupShown=function(t){var n=e.state.popupShown;e.setState({popupShown:!n,currentId:t})},e.changeStatus=function(t,n){e.props.changeStatus({status:t},n)},e.deleteDevice=function(t){e.props.deleteDevice(t)},e}return u(n,t),a(n,[{key:"componentDidMount",value:function(){this.props.loadDevices()}},{key:"render",value:function(){var t=this,n=this.props.devices.slice(0,3);return 0===n.length?s.default.createElement("section",{className:"list-device-spinner"},s.default.createElement("i",{className:"fa fa-3x fa-spinner fa-spin spinner-dash"})):s.default.createElement("section",{className:"list-device"},s.default.createElement("h2",{className:"list-title"},"Popular devices"),s.default.createElement("div",{className:"list-device-group"},n.map(function(n,e){return s.default.createElement(y.default,{data:n,key:e,location:n.location,changeStatus:t.changeStatus,setPopupShown:t.setPopupShown})})),s.default.createElement(g.Popup,{setPopupShown:this.setPopupShown,popupShown:this.state.popupShown,header:"Confirm the action",text:"Are you sure you want to remove the device?"},s.default.createElement(m.Button,{setPopupShown:this.setPopupShown,okHandler:function(){t.deleteDevice(t.state.currentId),t.setPopupShown()},className:"btn popup__btn",innerText:"Ok"}),s.default.createElement(m.Button,{okHandler:function(){t.setPopupShown()},className:"btn btn--default popup__btn",innerText:"Cancel"})),s.default.createElement(_.Message,{clearStatus:this.props.clearStatus,status:this.props.status,header:"Error",text:this.props.errorText}))}}]),n}(s.default.Component)),b=function(t){return{devices:t.devicesList.devices,status:t.devicesList.uploadStatus,errorText:t.devicesList.errorText}},w=function(t){return{loadDevices:(0,p.bindActionCreators)(d.loadDevices,t),changeStatus:function(n,e){return t((0,d.updateDevice)(n,e))},deleteDevice:function(n){return t((0,d.deleteDevice)(n))},clearStatus:function(){return t((0,d.clearStatus)())}}};x.propTypes={devices:h.default.array,loadDevices:h.default.func,changeStatus:h.default.func,errorText:h.default.string,status:h.default.string,deleteDevice:h.default.func,clearStatus:h.default.func},n.default=(0,l.connect)(b,w)(x)},"./src/components/DashboardContent/ListDevices.scss":function(t,n){},"./src/components/DashboardContent/ListUsers.js":function(t,n,e){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}function o(t,n){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?t:n}function u(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(t,n):t.__proto__=n)}function a(t){return{currentUsers:t.users.users,loadUsersStatus:t.users.loadUsersStatus,displayUsersStatus:t.users.displayUsersStatus}}function c(t){return{loadUsersRequest:(0,v.bindActionCreators)(y.loadUsersRequest,t),displayUsers:(0,v.bindActionCreators)(y.displayUsers,t)}}Object.defineProperty(n,"__esModule",{value:!0});var s=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),l=e("./node_modules/react/react.js"),f=r(l);e("./src/components/DashboardContent/ListUsers.scss");var h=e("./node_modules/react-redux/es/index.js"),p=e("./node_modules/prop-types/index.js"),d=r(p),v=e("./node_modules/redux/es/index.js"),y=e("./src/actions/users.action.js"),_=e("./src/components/Avatar/Avatar.js"),g=r(_),m=function(t){function n(t){i(this,n);var e=o(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,t));return e.displayUsers=function(){e.props.displayUsers(!e.props.displayUsersStatus)},e}return u(n,t),s(n,[{key:"componentDidMount",value:function(){this.props.loadUsersRequest()}},{key:"componentDidUpdate",value:function(){window.dispatchEvent(new Event("resize"))}},{key:"render",value:function(){if("ERROR"===this.props.loadUsersStatus)return f.default.createElement("section",{className:"list-users-spinner"},f.default.createElement("i",{className:"fa fa-times fa-3x"}));if("PENDING"===this.props.loadUsersStatus)return f.default.createElement("section",{className:"list-users-spinner"},f.default.createElement("i",{className:"fa fa-3x fa-spinner fa-spin spinner-dash"}));var t=this.props.displayUsersStatus?this.props.currentUsers:this.props.currentUsers.filter(function(t){return t.home});return t.sort(function(t,n){return t.name.toUpperCase()>n.name.toUpperCase()?1:-1}),0===t.length?f.default.createElement("section",{className:"list-users-spinner"},"User List is empty..."):f.default.createElement("section",{className:"list-users"},f.default.createElement("h2",{className:"list-title"},"Users",f.default.createElement("span",{className:"person-at-home"},f.default.createElement("i",{className:"fa fa-home person-at-home"+(this.props.displayUsersStatus?"__all":"__home"),onClick:this.displayUsers}))),f.default.createElement("ul",{className:"list-menu-users"},t.map(function(t,n){return f.default.createElement("li",{key:t._id},f.default.createElement(g.default,{item:t}))})))}}]),n}(f.default.Component);m.propTypes={currentUsers:d.default.array,loadUsersRequest:d.default.func.isRequired,displayUsers:d.default.func.isRequired,displayUsersStatus:d.default.bool,loadUsersStatus:d.default.string},n.default=(0,h.connect)(a,c)(m)},"./src/components/DashboardContent/ListUsers.scss":function(t,n){},"./src/components/DeviceListItem/DeviceListItem.js":function(t,n,e){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}function o(t,n){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?t:n}function u(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(t,n):t.__proto__=n)}Object.defineProperty(n,"__esModule",{value:!0});var a=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),c=e("./node_modules/react/react.js"),s=r(c),l=e("./node_modules/react-router-dom/es/index.js"),f=e("./node_modules/prop-types/index.js"),h=r(f),p=e("./src/components/ToggleSettings/ToggleSettings.js"),d=r(p);e("./src/components/DeviceListItem/DeviceListItem.scss");var v=function(t){function n(t){i(this,n);var e=o(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,t));return e.setDeviceId=function(t){e.props.setPopupShown(e.props.data._id)},e}return u(n,t),a(n,[{key:"render",value:function(){return s.default.createElement("div",{className:"device-item"},s.default.createElement("div",{className:"device-item__info"},s.default.createElement(l.Link,{className:"device-item__info-name",to:"/devices/device/"+this.props.data._id},this.props.data.name),s.default.createElement("div",{className:"device-item__info-status"},s.default.createElement(d.default,{checked:this.props.data.status,itemId:this.props.data._id,setItemValue:this.props.changeStatus}))),s.default.createElement("div",{className:"device-item__description"},s.default.createElement("div",{className:"device-item__description-location"},this.props.location),s.default.createElement("div",{className:"device-item__description-icon"},s.default.createElement("div",{className:"device-item__description-icon-delete"},s.default.createElement("a",{className:"fa fa-trash",onClick:this.setDeviceId})))))}}]),n}(s.default.Component);v.propTypes={changeStatus:h.default.func,deleteDevice:h.default.func,setPopupShown:h.default.func,location:h.default.string,data:h.default.shape({status:h.default.boolean,_id:h.default.string,name:h.default.string,location:h.default.string})},n.default=v},"./src/components/DeviceListItem/DeviceListItem.scss":function(t,n){},"./src/components/ToggleSettings/ToggleSettings.js":function(t,n,e){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}function o(t,n){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?t:n}function u(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(t,n):t.__proto__=n)}Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var a=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),c=e("./node_modules/react/react.js"),s=r(c),l=e("./node_modules/prop-types/index.js"),f=r(l);e("./src/components/ToggleSettings/ToggleStyle.scss");var h=function(t){function n(t){i(this,n);var e=o(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,t));return e.onChangeValue=function(t){e.props.setItemValue(!e.props.checked,e.props.itemId,e.props.deviceId)},e}return u(n,t),a(n,[{key:"render",value:function(){return s.default.createElement("div",{className:""+this.props.styleName},s.default.createElement("label",{className:"switch"},s.default.createElement("input",{type:"checkbox",checked:this.props.checked,onChange:this.onChangeValue}),s.default.createElement("div",{className:"slider round"})))}}]),n}(s.default.Component);n.default=h,h.propTypes={device:f.default.object,styleName:f.default.string,checked:f.default.bool.isRequired,setItemValue:f.default.func,itemId:f.default.any,newValue:f.default.string,deviceId:f.default.string},h.defaultProps={checked:!1}},"./src/components/ToggleSettings/ToggleStyle.scss":function(t,n){},"./src/pages/Dashboard/Dashboard.js":function(t,n,e){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(n,"__esModule",{value:!0});var i=e("./node_modules/react/react.js"),o=r(i),u=e("./src/components/DashboardContent/ListDevices.js"),a=r(u),c=e("./src/components/DashboardContent/ListUsers.js"),s=r(c);e("./src/pages/Dashboard/Dashboard.scss");var l=e("./src/components/DashboardContent/DashChart.js"),f=r(l),h=function(){return o.default.createElement("div",{className:"dashboard-block clearfix"},o.default.createElement("div",{className:"dashboard-main"},o.default.createElement(a.default,null),o.default.createElement(f.default,null)),o.default.createElement("div",{className:"dashboard-sidebar"},o.default.createElement(s.default,null)))};n.default=h},"./src/pages/Dashboard/Dashboard.scss":function(t,n){},"./src/selectors/index.js":function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.filterItems=void 0;var r=e("./node_modules/reselect/lib/index.js"),i=e("./src/utils/utils.js"),o=function(t){return t.searchAndFilter.filterOption},u=function(t){return t.devicesList.devices},a=function(t){return t.searchAndFilter.searchValue};n.filterItems=(0,r.createSelector)([o,a,u],function(t,n,e){var r=e;return"all"===t?r=e:"on"===t?r=e.filter(function(t){return!0===t.status}):"off"===t&&(r=e.filter(function(t){return!1===t.status})),r.filter(function(t){return(0,i.searchItem)(t,n)})})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,