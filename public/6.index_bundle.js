webpackJsonp([6],{"./node_modules/create-react-class/index.js":function(e,t,r){"use strict";var a=r("./node_modules/react/react.js"),i=r("./node_modules/create-react-class/factory.js");if(void 0===a)throw Error("create-react-class could not find the React object. If you are using script tags, make sure that React is being loaded before create-react-class.");var s=(new a.Component).updater;e.exports=i(a.Component,a.isValidElement,s)},"./node_modules/form-data-to-object/index.js":function(e,t,r){"use strict";function a(e){return Object.keys(e).reduce(function(t,r){var a=r.match(/[^\[]*/i),i=r.match(/\[.*?\]/g)||[];i=[a[0]].concat(i).map(function(e){return e.replace(/\[|\]/g,"")});for(var s=t;i.length;){var n=i.shift();n in s?s=s[n]:(s[n]=i.length?isNaN(i[0])?{}:[]:e[r],s=s[n])}return t},{})}function i(e){function t(e,r,a){return Array.isArray(a)||"[object Object]"===Object.prototype.toString.call(a)?(Object.keys(a).forEach(function(i){t(e,r+"["+i+"]",a[i])}),e):(e[r]=a,e)}return Object.keys(e).reduce(function(r,a){return t(r,a,e[a])},{})}e.exports={fromObj:i,toObj:a}},"./node_modules/formsy-react/lib/Decorator.js":function(e,t,r){"use strict";(function(t){var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var a in r)Object.prototype.hasOwnProperty.call(r,a)&&(e[a]=r[a])}return e},i=t.React||r("./node_modules/react/react.js"),s=r("./node_modules/create-react-class/index.js"),n=r("./node_modules/formsy-react/lib/Mixin.js");e.exports=function(){return function(e){return s({mixins:[n],render:function(){return i.createElement(e,a({setValidations:this.setValidations,setValue:this.setValue,resetValue:this.resetValue,getValue:this.getValue,hasValue:this.hasValue,getErrorMessage:this.getErrorMessage,getErrorMessages:this.getErrorMessages,isFormDisabled:this.isFormDisabled,isValid:this.isValid,isPristine:this.isPristine,isFormSubmitted:this.isFormSubmitted,isRequired:this.isRequired,showRequired:this.showRequired,showError:this.showError,isValidValue:this.isValidValue},this.props))}})}}}).call(t,r("./node_modules/webpack/buildin/global.js"))},"./node_modules/formsy-react/lib/HOC.js":function(e,t,r){"use strict";(function(t){function a(e){return e.displayName||e.name||("string"==typeof e?e:"Component")}var i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var a in r)Object.prototype.hasOwnProperty.call(r,a)&&(e[a]=r[a])}return e},s=t.React||r("./node_modules/react/react.js"),n=r("./node_modules/create-react-class/index.js"),o=r("./node_modules/formsy-react/lib/Mixin.js");e.exports=function(e){return n({displayName:"Formsy("+a(e)+")",mixins:[o],render:function(){var t=this.props.innerRef,r=i({setValidations:this.setValidations,setValue:this.setValue,resetValue:this.resetValue,getValue:this.getValue,hasValue:this.hasValue,getErrorMessage:this.getErrorMessage,getErrorMessages:this.getErrorMessages,isFormDisabled:this.isFormDisabled,isValid:this.isValid,isPristine:this.isPristine,isFormSubmitted:this.isFormSubmitted,isRequired:this.isRequired,showRequired:this.showRequired,showError:this.showError,isValidValue:this.isValidValue},this.props);return t&&(r.ref=t),s.createElement(e,r)}})}}).call(t,r("./node_modules/webpack/buildin/global.js"))},"./node_modules/formsy-react/lib/Mixin.js":function(e,t,r){"use strict";(function(t){var a=r("./node_modules/prop-types/index.js"),i=r("./node_modules/formsy-react/lib/utils.js"),s=(t.React||r("./node_modules/react/react.js"),function(e){return"string"==typeof e?e.split(/\,(?![^{\[]*[}\]])/g).reduce(function(e,t){var r=t.split(":"),a=r.shift();if(r=r.map(function(e){try{return JSON.parse(e)}catch(t){return e}}),r.length>1)throw new Error("Formsy does not support multiple args on string validations. Use object format of validations instead.");return e[a]=!r.length||r[0],e},{}):e||{}});e.exports={getInitialState:function(){return{_value:this.props.value,_isRequired:!1,_isValid:!0,_isPristine:!0,_pristineValue:this.props.value,_validationError:[],_externalError:null,_formSubmitted:!1}},contextTypes:{formsy:a.object},getDefaultProps:function(){return{validationError:"",validationErrors:{}}},componentWillMount:function(){var e=function(){this.setValidations(this.props.validations,this.props.required),this.context.formsy.attachToForm(this)}.bind(this);if(!this.props.name)throw new Error("Form Input requires a name property when used");e()},componentWillReceiveProps:function(e){this.setValidations(e.validations,e.required)},componentDidUpdate:function(e){i.isSame(this.props.value,e.value)||this.setValue(this.props.value),i.isSame(this.props.validations,e.validations)&&i.isSame(this.props.required,e.required)||this.context.formsy.validate(this)},componentWillUnmount:function(){this.context.formsy.detachFromForm(this)},setValidations:function(e,t){this._validations=s(e)||{},this._requiredValidations=!0===t?{isDefaultRequiredValue:!0}:s(t)},setValue:function(e){this.setState({_value:e,_isPristine:!1},function(){this.context.formsy.validate(this)}.bind(this))},resetValue:function(){this.setState({_value:this.state._pristineValue,_isPristine:!0},function(){this.context.formsy.validate(this)})},getValue:function(){return this.state._value},hasValue:function(){return""!==this.state._value},getErrorMessage:function(){var e=this.getErrorMessages();return e.length?e[0]:null},getErrorMessages:function(){return!this.isValid()||this.showRequired()?this.state._externalError||this.state._validationError||[]:[]},isFormDisabled:function(){return this.context.formsy.isFormDisabled()},isValid:function(){return this.state._isValid},isPristine:function(){return this.state._isPristine},isFormSubmitted:function(){return this.state._formSubmitted},isRequired:function(){return!!this.props.required},showRequired:function(){return this.state._isRequired},showError:function(){return!this.showRequired()&&!this.isValid()},isValidValue:function(e){return this.context.formsy.isValidValue.call(null,this,e)}}}).call(t,r("./node_modules/webpack/buildin/global.js"))},"./node_modules/formsy-react/lib/main.js":function(e,t,r){"use strict";(function(t){function a(e,t){var r={};for(var a in e)t.indexOf(a)>=0||Object.prototype.hasOwnProperty.call(e,a)&&(r[a]=e[a]);return r}var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var a in r)Object.prototype.hasOwnProperty.call(r,a)&&(e[a]=r[a])}return e},n="function"==typeof Symbol&&"symbol"===i(Symbol.iterator)?function(e){return void 0===e?"undefined":i(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":void 0===e?"undefined":i(e)},o=r("./node_modules/prop-types/index.js"),u=t.React||r("./node_modules/react/react.js"),l=r("./node_modules/create-react-class/index.js"),d={},c=r("./node_modules/formsy-react/lib/validationRules.js"),f=r("./node_modules/form-data-to-object/index.js"),p=r("./node_modules/formsy-react/lib/utils.js"),m=r("./node_modules/formsy-react/lib/Mixin.js"),h=r("./node_modules/formsy-react/lib/HOC.js"),F=r("./node_modules/formsy-react/lib/Decorator.js"),v={},g=[];d.Mixin=m,d.HOC=h,d.Decorator=F,d.defaults=function(e){v=e},d.addValidationRule=function(e,t){c[e]=t},d.Form=l({displayName:"Formsy",getInitialState:function(){return{isValid:!0,isSubmitting:!1,canChange:!1}},getDefaultProps:function(){return{onSuccess:function(){},onError:function(){},onSubmit:function(){},onValidSubmit:function(){},onInvalidSubmit:function(){},onValid:function(){},onInvalid:function(){},onChange:function(){},validationErrors:null,preventExternalInvalidation:!1}},childContextTypes:{formsy:o.object},getChildContext:function(){var e=this;return{formsy:{attachToForm:this.attachToForm,detachFromForm:this.detachFromForm,validate:this.validate,isFormDisabled:this.isFormDisabled,isValidValue:function(t,r){return e.runValidation(t,r).isValid}}}},componentWillMount:function(){this.inputs=[]},componentDidMount:function(){this.validateForm()},componentWillUpdate:function(){this.prevInputNames=this.inputs.map(function(e){return e.props.name})},componentDidUpdate:function(){this.props.validationErrors&&"object"===n(this.props.validationErrors)&&Object.keys(this.props.validationErrors).length>0&&this.setInputValidationErrors(this.props.validationErrors);var e=this.inputs.map(function(e){return e.props.name});p.arraysDiffer(this.prevInputNames,e)&&this.validateForm()},reset:function(e){this.setFormPristine(!0),this.resetModel(e)},submit:function(e){e&&e.preventDefault(),this.setFormPristine(!1);var t=this.getModel();this.props.onSubmit(t,this.resetModel,this.updateInputsWithError),this.state.isValid?this.props.onValidSubmit(t,this.resetModel,this.updateInputsWithError):this.props.onInvalidSubmit(t,this.resetModel,this.updateInputsWithError)},mapModel:function(e){return this.props.mapping?this.props.mapping(e):f.toObj(Object.keys(e).reduce(function(t,r){for(var a=r.split("."),i=t;a.length;){var s=a.shift();i=i[s]=a.length?i[s]||{}:e[r]}return t},{}))},getModel:function(){var e=this.getCurrentValues();return this.mapModel(e)},resetModel:function(e){this.inputs.forEach(function(t){var r=t.props.name;e&&e.hasOwnProperty(r)?t.setValue(e[r]):t.resetValue()}),this.validateForm()},setInputValidationErrors:function(e){this.inputs.forEach(function(t){var r=t.props.name,a=[{_isValid:!(r in e),_validationError:"string"==typeof e[r]?[e[r]]:e[r]}];t.setState.apply(t,a)})},isChanged:function(){return!p.isSame(this.getPristineValues(),this.getCurrentValues())},getPristineValues:function(){return this.inputs.reduce(function(e,t){return e[t.props.name]=t.props.value,e},{})},updateInputsWithError:function(e){var t=this;Object.keys(e).forEach(function(r,a){var i=p.find(t.inputs,function(e){return e.props.name===r});if(!i)throw new Error("You are trying to update an input that does not exist. Verify errors object with input names. "+JSON.stringify(e));var s=[{_isValid:t.props.preventExternalInvalidation||!1,_externalError:"string"==typeof e[r]?[e[r]]:e[r]}];i.setState.apply(i,s)})},isFormDisabled:function(){return this.props.disabled},getCurrentValues:function(){return this.inputs.reduce(function(e,t){return e[t.props.name]=t.state._value,e},{})},setFormPristine:function(e){this.setState({_formSubmitted:!e}),this.inputs.forEach(function(t,r){t.setState({_formSubmitted:!e,_isPristine:e})})},validate:function(e){this.state.canChange&&this.props.onChange(this.getCurrentValues(),this.isChanged());var t=this.runValidation(e);e.setState({_isValid:t.isValid,_isRequired:t.isRequired,_validationError:t.error,_externalError:null},this.validateForm)},runValidation:function(e,t){var r=this.getCurrentValues(),a=e.props.validationErrors,i=e.props.validationError;t=2===arguments.length?t:e.state._value;var s=this.runRules(t,r,e._validations),n=this.runRules(t,r,e._requiredValidations);"function"==typeof e.validate&&(s.failed=e.validate()?[]:["failed"]);var o=!!Object.keys(e._requiredValidations).length&&!!n.success.length,u=!(s.failed.length||this.props.validationErrors&&this.props.validationErrors[e.props.name]);return{isRequired:o,isValid:!o&&u,error:function(){if(u&&!o)return g;if(s.errors.length)return s.errors;if(this.props.validationErrors&&this.props.validationErrors[e.props.name])return"string"==typeof this.props.validationErrors[e.props.name]?[this.props.validationErrors[e.props.name]]:this.props.validationErrors[e.props.name];if(o){var t=a[n.success[0]];return t?[t]:null}return s.failed.length?s.failed.map(function(e){return a[e]?a[e]:i}).filter(function(e,t,r){return r.indexOf(e)===t}):void 0}.call(this)}},runRules:function(e,t,r){var a={errors:[],failed:[],success:[]};return Object.keys(r).length&&Object.keys(r).forEach(function(i){if(c[i]&&"function"==typeof r[i])throw new Error("Formsy does not allow you to override default validations: "+i);if(!c[i]&&"function"!=typeof r[i])throw new Error("Formsy does not have the validation rule: "+i);if("function"==typeof r[i]){var s=r[i](t,e);return void("string"==typeof s?(a.errors.push(s),a.failed.push(i)):s||a.failed.push(i))}if("function"!=typeof r[i]){var s=c[i](t,e,r[i]);return void("string"==typeof s?(a.errors.push(s),a.failed.push(i)):s?a.success.push(i):a.failed.push(i))}return a.success.push(i)}),a},validateForm:function(){var e=this,t=function(){var e=this.inputs.every(function(e){return e.state._isValid});this.setState({isValid:e}),e?this.props.onValid():this.props.onInvalid(),this.setState({canChange:!0})}.bind(this);this.inputs.forEach(function(r,a){var i=e.runValidation(r);i.isValid&&r.state._externalError&&(i.isValid=!1),r.setState({_isValid:i.isValid,_isRequired:i.isRequired,_validationError:i.error,_externalError:!i.isValid&&r.state._externalError?r.state._externalError:null},a===e.inputs.length-1?t:null)}),this.inputs.length||this.setState({canChange:!0})},attachToForm:function(e){-1===this.inputs.indexOf(e)&&this.inputs.push(e),this.validate(e)},detachFromForm:function(e){var t=this.inputs.indexOf(e);-1!==t&&(this.inputs=this.inputs.slice(0,t).concat(this.inputs.slice(t+1))),this.validateForm()},render:function(){var e=this.props,t=(e.mapping,e.validationErrors,e.onSubmit,e.onValid,e.onValidSubmit,e.onInvalid,e.onInvalidSubmit,e.onChange,e.reset,e.preventExternalInvalidation,e.onSuccess,e.onError,a(e,["mapping","validationErrors","onSubmit","onValid","onValidSubmit","onInvalid","onInvalidSubmit","onChange","reset","preventExternalInvalidation","onSuccess","onError"]));return u.createElement("form",s({},t,{onSubmit:this.submit}),this.props.children)}}),t.exports||t.module||t.define&&t.define.amd||(t.Formsy=d),e.exports=d}).call(t,r("./node_modules/webpack/buildin/global.js"))},"./node_modules/formsy-react/lib/utils.js":function(e,t,r){"use strict";var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i="function"==typeof Symbol&&"symbol"===a(Symbol.iterator)?function(e){return void 0===e?"undefined":a(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":void 0===e?"undefined":a(e)};e.exports={arraysDiffer:function(e,t){var r=!1;return e.length!==t.length?r=!0:e.forEach(function(e,a){this.isSame(e,t[a])||(r=!0)},this),r},objectsDiffer:function(e,t){var r=!1;return Object.keys(e).length!==Object.keys(t).length?r=!0:Object.keys(e).forEach(function(a){this.isSame(e[a],t[a])||(r=!0)},this),r},isSame:function(e,t){return(void 0===e?"undefined":i(e))===(void 0===t?"undefined":i(t))&&(Array.isArray(e)&&Array.isArray(t)?!this.arraysDiffer(e,t):"function"==typeof e?e.toString()===t.toString():"object"===(void 0===e?"undefined":i(e))&&null!==e&&null!==t?!this.objectsDiffer(e,t):e===t)},find:function(e,t){for(var r=0,a=e.length;r<a;r++){var i=e[r];if(t(i))return i}return null}}},"./node_modules/formsy-react/lib/validationRules.js":function(e,t,r){"use strict";var a=function(e){return null!==e&&void 0!==e},i=function(e){return""===e},s={isDefaultRequiredValue:function(e,t){return void 0===t||""===t},isExisty:function(e,t){return a(t)},matchRegexp:function(e,t,r){return!a(t)||i(t)||r.test(t)},isUndefined:function(e,t){return void 0===t},isEmptyString:function(e,t){return i(t)},isEmail:function(e,t){return s.matchRegexp(e,t,/^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i)},isUrl:function(e,t){return s.matchRegexp(e,t,/^(https?|s?ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i)},isTrue:function(e,t){return!0===t},isFalse:function(e,t){return!1===t},isNumeric:function(e,t){return"number"==typeof t||s.matchRegexp(e,t,/^[-+]?(?:\d*[.])?\d+$/)},isAlpha:function(e,t){return s.matchRegexp(e,t,/^[A-Z]+$/i)},isAlphanumeric:function(e,t){return s.matchRegexp(e,t,/^[0-9A-Z]+$/i)},isInt:function(e,t){return s.matchRegexp(e,t,/^(?:[-+]?(?:0|[1-9]\d*))$/)},isFloat:function(e,t){return s.matchRegexp(e,t,/^(?:[-+]?(?:\d+))?(?:\.\d*)?(?:[eE][\+\-]?(?:\d+))?$/)},isWords:function(e,t){return s.matchRegexp(e,t,/^[A-Z\s]+$/i)},isSpecialWords:function(e,t){return s.matchRegexp(e,t,/^[A-Z\s\u00C0-\u017F]+$/i)},isLength:function(e,t,r){return!a(t)||i(t)||t.length===r},equals:function(e,t,r){return!a(t)||i(t)||t==r},equalsField:function(e,t,r){return t==e[r]},maxLength:function(e,t,r){return!a(t)||t.length<=r},minLength:function(e,t,r){return!a(t)||i(t)||t.length>=r}};e.exports=s},"./src/components/Auth/Field/Field.js":function(e,t,r){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function n(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var r=0;r<t.length;r++){var a=t[r];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,r,a){return r&&e(t.prototype,r),a&&e(t,a),t}}(),u=r("./node_modules/react/react.js"),l=a(u),d=r("./node_modules/formsy-react/lib/main.js"),c=(a(d),r("./node_modules/prop-types/index.js")),f=a(c),p=function(e){function t(e){i(this,t);var r=s(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return r.changeValue=function(e){r.props.setValue(e.currentTarget["checkbox"===r.props.type?"checked":"value"])},r}return n(t,e),o(t,[{key:"render",value:function(){var e=this.props.getErrorMessage();return l.default.createElement("div",{className:"signup-field-group"},l.default.createElement("label",{htmlFor:this.props.name.toLowerCase(),className:"signup-form__label"},this.props.name),l.default.createElement("input",{onChange:this.changeValue,value:this.props.getValue(),type:this.props.type||"text",name:this.props.name.toLowerCase(),className:"signup-form__input-field"}),l.default.createElement("p",{className:"caption signup-form__caption"},this.props.text),l.default.createElement("span",{className:"signup-form__error-message"},e))}}]),t}(l.default.Component);p.propTypes={name:f.default.string,text:f.default.string,className:f.default.string,type:f.default.string,setValue:f.default.any,getValue:f.default.func,validations:f.default.any,getErrorMessage:f.default.func,registration:f.default.func},t.default=(0,d.HOC)(p)},"./src/pages/Profile/Profile.js":function(e,t,r){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function n(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function o(e){return{updateProfileStatus:e.users.updateProfileStatus,deleteProfileStatus:e.users.deleteProfileStatus,errorText:e.users.user.errorText,user:e.users.user}}function u(e){return{updateProfileRequest:(0,v.bindActionCreators)(F.updateProfileRequest,e),deleteUserRequest:(0,v.bindActionCreators)(F.deleteUserRequest,e),clearStatus:(0,v.bindActionCreators)(F.clearUpdateProfileStatus,e)}}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){function e(e,t){for(var r=0;r<t.length;r++){var a=t[r];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,r,a){return r&&e(t.prototype,r),a&&e(t,a),t}}(),d=r("./node_modules/react/react.js"),c=a(d),f=r("./node_modules/formsy-react/lib/main.js"),p=a(f),m=r("./src/components/Auth/Field/Field.js"),h=a(m),F=r("./src/actions/users.action.js"),v=r("./node_modules/redux/es/index.js"),g=r("./src/components/Message/Message.js"),E=r("./src/components/Popup/Popup.js"),b=r("./src/components/Button/Button.js"),y=r("./node_modules/react-redux/es/index.js"),_=r("./node_modules/prop-types/index.js"),w=a(_);r("./src/pages/Profile/Profile.scss");var x=function(e){function t(e){i(this,t);var r=s(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return r.setPopupShown=function(e){var t=r.state.popupShown;r.setState({popupShown:!t})},r.updateProfile=function(){var e={name:r.name.getValue(),email:r.email.getValue(),password:r.password.getValue(),passwordRepeat:r.passwordRepeat.getValue(),avatar:r.base64Str,_id:r.props.user._id};r.props.updateProfileRequest(e)},r.enableButton=function(){r.setState({canSubmit:!0})},r.disableButton=function(){r.setState({canSubmit:!1})},r.editName=function(){r.setState({allowEditName:!r.state.allowEditName}),r.fieldName.classList.toggle("hidden"),r.fieldName.classList.toggle("flex-display")},r.editEmail=function(){r.setState({allowEditEmail:!r.state.allowEditEmail}),r.fieldEmail.classList.toggle("hidden"),r.fieldEmail.classList.toggle("flex-display")},r.editPassword=function(){r.setState({allowEditPassword:!r.state.allowEditPassword}),r.fieldPassword.classList.toggle("hidden"),r.fieldPassword.classList.toggle("flex-display")},r.repeatPassword=function(){r.setState({allowRepeatPassword:!r.state.allowRepeatPassword}),r.fieldRepeatPassword.classList.toggle("hidden"),r.fieldRepeatPassword.classList.toggle("flex-display")},r.editImage=function(){r.setState({allowEditImage:!r.state.allowEditImage}),r.fieldImage.classList.toggle("hidden"),r.fieldImage.classList.toggle("flex-display")},r.deleteUser=function(){r.props.deleteUserRequest(r.props.user)},r.handleFileSelect=function(e){e.preventDefault(),r.setState({updateImageStatus:"Loading..."});var t=e.dataTransfer.files;if(t){var a=t[0];if(a){if(a.size>1048576)return void r.setState({updateImageStatus:"Exceeding 1MB limit"});var i=new FileReader;i.onload=function(e){var t=e.target.result;r.base64Str="data:image/jpeg;base64,"+btoa(t),r.setState({imageBase64:r.base64Str,updateImageStatus:""})},i.readAsBinaryString(a)}}},r.preventDefault=function(e){e.preventDefault()},r.render=function(){return window.addEventListener("dragover",function(e){(e||event).preventDefault()},!1),window.addEventListener("drop",function(e){(e||event).preventDefault()},!1),c.default.createElement("div",{className:"profile-container"},c.default.createElement(g.Message,{clearStatus:r.props.clearStatus,status:r.props.updateProfileStatus,text:r.props.errorText,header:"Error"}),c.default.createElement(p.default.Form,{onSubmit:r.updateProfile,onValid:r.enableButton,onInvalid:r.disableButton,className:"signup-form edit"},c.default.createElement("div",{className:"profile-header"},c.default.createElement("div",{className:"profile-header__user-image-box"},c.default.createElement("div",{className:"profile-header__user-image-edit"},c.default.createElement("div",{className:r.props.user.avatar?"visible":"hidden"},c.default.createElement("img",{className:"profile-header__user-image",src:r.props.user.avatar})),c.default.createElement("div",{className:r.props.user.avatar?"hidden":"visible"},c.default.createElement("i",{className:"fa fa-user-circle-o photo"})),c.default.createElement("i",{className:"fa fa-pencil edit-user-info edit-image",onClick:r.editImage}),c.default.createElement("div",{className:"hidden",ref:function(e){r.fieldImage=e},onDrop:r.handleFileSelect,onDragOver:r.preventDefault},c.default.createElement("div",null,c.default.createElement("div",{className:""!==r.state.updateImageStatus?"profile-header__user-drop-aria":"profile-header__user-drop-image hidden"},r.state.updateImageStatus),c.default.createElement("img",{className:""!==r.state.updateImageStatus?"profile-header__user-image hidden":"profile-header__user-image",src:r.state.imageBase64})))),c.default.createElement("div",{className:"profile-header__user-name"},r.props.user.name))),c.default.createElement("section",{className:"edit-profile__user-info"},c.default.createElement("div",{className:"edit-profile-name"},c.default.createElement("div",{className:"edit-profile__user-name-container"},c.default.createElement("div",{className:"user-name__box"},c.default.createElement("p",{className:"user-name__title"},"Name"),c.default.createElement("span",{className:"user-name__logged-name"},r.props.user.name)),c.default.createElement("div",{className:"edit-user-info__icon"},c.default.createElement("i",{className:"fa fa-pencil edit-user-info",onClick:r.editName}))),c.default.createElement("div",{className:"hidden",ref:function(e){r.fieldName=e}},c.default.createElement(h.default,{name:" ",type:"text",text:"Enter your new name",ref:function(e){r.name=e},value:r.props.user.name,validations:"isAlpha",validationError:"This is not a valid name",required:!0}))),c.default.createElement("div",{className:"edit-profile-email"},c.default.createElement("div",{className:"edit-profile__user-email-container"},c.default.createElement("div",{className:"user-email__box"},c.default.createElement("p",{className:"user-email__title"},"Email"),c.default.createElement("span",{className:"user-email__logged-email"},r.props.user.email)),c.default.createElement("div",{className:"edit-user-info__icon"},c.default.createElement("i",{className:"fa fa-pencil edit-user-info",onClick:r.editEmail}))),c.default.createElement("div",{className:"hidden",ref:function(e){r.fieldEmail=e}},c.default.createElement(h.default,{name:" ",className:"hidden",type:"text",text:"Enter your new e-mail",ref:function(e){r.email=e},value:r.props.user.email,validations:"isEmail",validationError:"This is not a valid email",required:!0})))),c.default.createElement("section",{className:"edit-profile__user-info-password"},c.default.createElement("div",{className:"edit-profile-password"},c.default.createElement("div",{className:"edit-profile__user-password-container"},c.default.createElement("div",{className:"user-password__box"},c.default.createElement("p",{className:"user-password__title"},"Password"),c.default.createElement("span",{className:"user-password__logged-password"},r.props.user.password)),c.default.createElement("div",{className:"edit-user-info__icon"},c.default.createElement("i",{className:"fa fa-pencil edit-user-info fa-password",onClick:r.editPassword}))),c.default.createElement("div",{className:"hidden",ref:function(e){r.fieldPassword=e}},c.default.createElement(h.default,{name:"Password",type:"password",text:"Enter your new password",ref:function(e){r.password=e},validations:{minLength:7,isAlphanumeric:!0},validationError:"This is not a valid password"}))),c.default.createElement("div",{className:"edit-profile-repeat-password"},c.default.createElement("div",{className:"edit-profile__user-repeat-password-container"},c.default.createElement("div",{className:"user-repeat-password__box"},c.default.createElement("p",{className:"user-repeat-password__title"},"Repeat Password"),c.default.createElement("span",{className:"user-repeat-password__logged-password"},r.props.user.passwordRepeat)),c.default.createElement("div",{className:"edit-user-info__icon"},c.default.createElement("i",{className:"fa fa-pencil edit-user-info fa-password",onClick:r.repeatPassword}))),c.default.createElement("div",{className:"hidden",ref:function(e){r.fieldRepeatPassword=e}},c.default.createElement(h.default,{name:"Repeat Password",type:"password",text:"Please repeat your password",ref:function(e){r.passwordRepeat=e},validations:"equalsField:Password",validationError:"Password does not match"})))),c.default.createElement("div",{className:"signup-field-group signup-btn-group edit"},c.default.createElement("input",{type:"submit",disabled:!r.state.canSubmit,className:"btn btn--signup btn--signup-active edit",value:"Submit"}),c.default.createElement("div",{className:"delete-user-profile__icon"},c.default.createElement("i",{className:"fa fa-trash",onClick:r.setPopupShown})))),c.default.createElement(E.Popup,{setPopupShown:r.setPopupShown,popupShown:r.state.popupShown,header:"Confirm the action",text:"Are you sure you want to delete your account?"},c.default.createElement(b.Button,{setPopupShown:r.setPopupShown,okHandler:function(){r.deleteUser(),r.setPopupShown()},className:"btn popup__btn",innerText:"Ok"}),c.default.createElement(b.Button,{okHandler:function(){r.setPopupShown()},className:"btn btn--default popup__btn",innerText:"Cancel"})))},r.state={canSubmit:!1,allowEditName:!1,allowEditEmail:!1,allowEditImage:!1,allowEditPassword:!1,allowRepeatPassword:!1,updateImageStatus:"Drop your photo",imageBase64:null},r}return n(t,e),l(t,[{key:"componentDidUpdate",value:function(){var e=this;"DONE"===this.props.updateProfileStatus&&setTimeout(function(){e.props.history.push("/")},1e3),"DONE"===this.props.deleteProfileStatus&&setTimeout(function(){e.props.history.push("/auth")},1e3)}}]),t}(d.Component);t.default=(0,y.connect)(o,u)(x),x.propTypes={updateProfileStatus:w.default.string,updateProfileRequest:w.default.func,deleteUserRequest:w.default.func,deleteProfileStatus:w.default.string,user:w.default.object,email:w.default.object,password:w.default.object,passwordRepeat:w.default.object,errorText:w.default.string,value:w.default.object,history:w.default.object,clearStatus:w.default.func}},"./src/pages/Profile/Profile.scss":function(e,t){}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,