webpackJsonp([2],{"./node_modules/chain-function/index.js":function(e,t,n){"use strict";e.exports=function(){for(var e=arguments.length,t=[],n=0;n<e;n++)t[n]=arguments[n];if(t=t.filter(function(e){return null!=e}),0!==t.length)return 1===t.length?t[0]:t.reduce(function(e,t){return function(){e.apply(this,arguments),t.apply(this,arguments)}})}},"./node_modules/dom-helpers/class/addClass.js":function(e,t,n){"use strict";function o(e,t){e.classList?e.classList.add(t):(0,i.default)(e)||(e.className=e.className+" "+t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=o;var r=n("./node_modules/dom-helpers/class/hasClass.js"),i=function(e){return e&&e.__esModule?e:{default:e}}(r);e.exports=t.default},"./node_modules/dom-helpers/class/hasClass.js":function(e,t,n){"use strict";function o(e,t){return e.classList?!!t&&e.classList.contains(t):-1!==(" "+e.className+" ").indexOf(" "+t+" ")}Object.defineProperty(t,"__esModule",{value:!0}),t.default=o,e.exports=t.default},"./node_modules/dom-helpers/class/removeClass.js":function(e,t,n){"use strict";e.exports=function(e,t){e.classList?e.classList.remove(t):e.className=e.className.replace(new RegExp("(^|\\s)"+t+"(?:\\s|$)","g"),"$1").replace(/\s+/g," ").replace(/^\s*|\s*$/g,"")}},"./node_modules/dom-helpers/transition/properties.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.animationEnd=t.animationDelay=t.animationTiming=t.animationDuration=t.animationName=t.transitionEnd=t.transitionDuration=t.transitionDelay=t.transitionTiming=t.transitionProperty=t.transform=void 0;var o=n("./node_modules/dom-helpers/util/inDOM.js"),r=function(e){return e&&e.__esModule?e:{default:e}}(o),i="transform",a=void 0,s=void 0,u=void 0,l=void 0,c=void 0,d=void 0,p=void 0,f=void 0,m=void 0,h=void 0,v=void 0;if(r.default){var y=function(){for(var e=document.createElement("div").style,t={O:function(e){return"o"+e.toLowerCase()},Moz:function(e){return e.toLowerCase()},Webkit:function(e){return"webkit"+e},ms:function(e){return"MS"+e}},n=Object.keys(t),o=void 0,r=void 0,i="",a=0;a<n.length;a++){var s=n[a];if(s+"TransitionProperty"in e){i="-"+s.toLowerCase(),o=t[s]("TransitionEnd"),r=t[s]("AnimationEnd");break}}return!o&&"transitionProperty"in e&&(o="transitionend"),!r&&"animationName"in e&&(r="animationend"),e=null,{animationEnd:r,transitionEnd:o,prefix:i}}();a=y.prefix,t.transitionEnd=s=y.transitionEnd,t.animationEnd=u=y.animationEnd,t.transform=i=a+"-"+i,t.transitionProperty=l=a+"-transition-property",t.transitionDuration=c=a+"-transition-duration",t.transitionDelay=p=a+"-transition-delay",t.transitionTiming=d=a+"-transition-timing-function",t.animationName=f=a+"-animation-name",t.animationDuration=m=a+"-animation-duration",t.animationTiming=h=a+"-animation-delay",t.animationDelay=v=a+"-animation-timing-function"}t.transform=i,t.transitionProperty=l,t.transitionTiming=d,t.transitionDelay=p,t.transitionDuration=c,t.transitionEnd=s,t.animationName=f,t.animationDuration=m,t.animationTiming=h,t.animationDelay=v,t.animationEnd=u,t.default={transform:i,end:s,property:l,timing:d,delay:p,duration:c}},"./node_modules/dom-helpers/util/inDOM.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=!("undefined"==typeof window||!window.document||!window.document.createElement),e.exports=t.default},"./node_modules/dom-helpers/util/requestAnimationFrame.js":function(e,t,n){"use strict";function o(e){var t=(new Date).getTime(),n=Math.max(0,16-(t-d)),o=setTimeout(e,n);return d=t,o}Object.defineProperty(t,"__esModule",{value:!0});var r=n("./node_modules/dom-helpers/util/inDOM.js"),i=function(e){return e&&e.__esModule?e:{default:e}}(r),a=["","webkit","moz","o","ms"],s="clearTimeout",u=o,l=void 0,c=function(e,t){return e+(e?t[0].toUpperCase()+t.substr(1):t)+"AnimationFrame"};i.default&&a.some(function(e){var t=c(e,"request");if(t in window)return s=c(e,"cancel"),u=function(e){return window[t](e)}});var d=(new Date).getTime();l=function(e){return u(e)},l.cancel=function(e){window[s]&&"function"==typeof window[s]&&window[s](e)},t.default=l,e.exports=t.default},"./node_modules/react-addons-css-transition-group/index.js":function(e,t,n){"use strict";e.exports=n("./node_modules/react-transition-group/CSSTransitionGroup.js")},"./node_modules/react-transition-group/CSSTransitionGroup.js":function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":s(t))&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":s(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.__esModule=!0;var u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},l=n("./node_modules/react/react.js"),c=o(l),d=n("./node_modules/prop-types/index.js"),p=o(d),f=n("./node_modules/react-transition-group/TransitionGroup.js"),m=o(f),h=n("./node_modules/react-transition-group/CSSTransitionGroupChild.js"),v=o(h),y=n("./node_modules/react-transition-group/utils/PropTypes.js"),_=(y.nameShape.isRequired,p.default.bool,p.default.bool,p.default.bool,(0,y.transitionTimeout)("Appear"),(0,y.transitionTimeout)("Enter"),(0,y.transitionTimeout)("Leave"),{transitionAppear:!1,transitionEnter:!0,transitionLeave:!0}),b=function(e){function t(){var n,o,a;r(this,t);for(var s=arguments.length,u=Array(s),l=0;l<s;l++)u[l]=arguments[l];return n=o=i(this,e.call.apply(e,[this].concat(u))),o._wrapChild=function(e){return c.default.createElement(v.default,{name:o.props.transitionName,appear:o.props.transitionAppear,enter:o.props.transitionEnter,leave:o.props.transitionLeave,appearTimeout:o.props.transitionAppearTimeout,enterTimeout:o.props.transitionEnterTimeout,leaveTimeout:o.props.transitionLeaveTimeout},e)},a=n,i(o,a)}return a(t,e),t.prototype.render=function(){return c.default.createElement(m.default,u({},this.props,{childFactory:this._wrapChild}))},t}(c.default.Component);b.displayName="CSSTransitionGroup",b.propTypes={},b.defaultProps=_,t.default=b,e.exports=t.default},"./node_modules/react-transition-group/CSSTransitionGroupChild.js":function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":u(t))&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":u(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function s(e,t){return w.length?w.forEach(function(n){return e.addEventListener(n,t,!1)}):setTimeout(t,0),function(){w.length&&w.forEach(function(n){return e.removeEventListener(n,t,!1)})}}var u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.__esModule=!0;var l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},c=n("./node_modules/dom-helpers/class/addClass.js"),d=o(c),p=n("./node_modules/dom-helpers/class/removeClass.js"),f=o(p),m=n("./node_modules/dom-helpers/util/requestAnimationFrame.js"),h=o(m),v=n("./node_modules/dom-helpers/transition/properties.js"),y=n("./node_modules/react/react.js"),_=o(y),b=n("./node_modules/prop-types/index.js"),g=o(b),j=n("./node_modules/react-dom/index.js"),S=n("./node_modules/react-transition-group/utils/PropTypes.js"),w=[];v.transitionEnd&&w.push(v.transitionEnd),v.animationEnd&&w.push(v.animationEnd);var E=(g.default.node,S.nameShape.isRequired,g.default.bool,g.default.bool,g.default.bool,g.default.number,g.default.number,g.default.number,function(e){function t(){var n,o,a;r(this,t);for(var s=arguments.length,u=Array(s),l=0;l<s;l++)u[l]=arguments[l];return n=o=i(this,e.call.apply(e,[this].concat(u))),o.componentWillAppear=function(e){o.props.appear?o.transition("appear",e,o.props.appearTimeout):e()},o.componentWillEnter=function(e){o.props.enter?o.transition("enter",e,o.props.enterTimeout):e()},o.componentWillLeave=function(e){o.props.leave?o.transition("leave",e,o.props.leaveTimeout):e()},a=n,i(o,a)}return a(t,e),t.prototype.componentWillMount=function(){this.classNameAndNodeQueue=[],this.transitionTimeouts=[]},t.prototype.componentWillUnmount=function(){this.unmounted=!0,this.timeout&&clearTimeout(this.timeout),this.transitionTimeouts.forEach(function(e){clearTimeout(e)}),this.classNameAndNodeQueue.length=0},t.prototype.transition=function(e,t,n){var o=(0,j.findDOMNode)(this);if(!o)return void(t&&t());var r=this.props.name[e]||this.props.name+"-"+e,i=this.props.name[e+"Active"]||r+"-active",a=null,u=void 0;(0,d.default)(o,r),this.queueClassAndNode(i,o);var l=function(e){e&&e.target!==o||(clearTimeout(a),u&&u(),(0,f.default)(o,r),(0,f.default)(o,i),u&&u(),t&&t())};n?(a=setTimeout(l,n),this.transitionTimeouts.push(a)):v.transitionEnd&&(u=s(o,l))},t.prototype.queueClassAndNode=function(e,t){var n=this;this.classNameAndNodeQueue.push({className:e,node:t}),this.rafHandle||(this.rafHandle=(0,h.default)(function(){return n.flushClassNameAndNodeQueue()}))},t.prototype.flushClassNameAndNodeQueue=function(){this.unmounted||this.classNameAndNodeQueue.forEach(function(e){e.node.scrollTop,(0,d.default)(e.node,e.className)}),this.classNameAndNodeQueue.length=0,this.rafHandle=null},t.prototype.render=function(){var e=l({},this.props);return delete e.name,delete e.appear,delete e.enter,delete e.leave,delete e.appearTimeout,delete e.enterTimeout,delete e.leaveTimeout,delete e.children,_.default.cloneElement(_.default.Children.only(this.props.children),e)},t}(_.default.Component));E.displayName="CSSTransitionGroupChild",E.propTypes={},t.default=E,e.exports=t.default},"./node_modules/react-transition-group/TransitionGroup.js":function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":s(t))&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":s(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.__esModule=!0;var u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},l=n("./node_modules/chain-function/index.js"),c=o(l),d=n("./node_modules/react/react.js"),p=o(d),f=n("./node_modules/prop-types/index.js"),m=o(f),h=n("./node_modules/warning/browser.js"),v=(o(h),n("./node_modules/react-transition-group/utils/ChildMapping.js")),y=(m.default.any,m.default.func,m.default.node,{component:"span",childFactory:function(e){return e}}),_=function(e){function t(n,o){r(this,t);var a=i(this,e.call(this,n,o));return a.performAppear=function(e,t){a.currentlyTransitioningKeys[e]=!0,t.componentWillAppear?t.componentWillAppear(a._handleDoneAppearing.bind(a,e,t)):a._handleDoneAppearing(e,t)},a._handleDoneAppearing=function(e,t){t.componentDidAppear&&t.componentDidAppear(),delete a.currentlyTransitioningKeys[e];var n=(0,v.getChildMapping)(a.props.children);n&&n.hasOwnProperty(e)||a.performLeave(e,t)},a.performEnter=function(e,t){a.currentlyTransitioningKeys[e]=!0,t.componentWillEnter?t.componentWillEnter(a._handleDoneEntering.bind(a,e,t)):a._handleDoneEntering(e,t)},a._handleDoneEntering=function(e,t){t.componentDidEnter&&t.componentDidEnter(),delete a.currentlyTransitioningKeys[e];var n=(0,v.getChildMapping)(a.props.children);n&&n.hasOwnProperty(e)||a.performLeave(e,t)},a.performLeave=function(e,t){a.currentlyTransitioningKeys[e]=!0,t.componentWillLeave?t.componentWillLeave(a._handleDoneLeaving.bind(a,e,t)):a._handleDoneLeaving(e,t)},a._handleDoneLeaving=function(e,t){t.componentDidLeave&&t.componentDidLeave(),delete a.currentlyTransitioningKeys[e];var n=(0,v.getChildMapping)(a.props.children);n&&n.hasOwnProperty(e)?a.keysToEnter.push(e):a.setState(function(t){var n=u({},t.children);return delete n[e],{children:n}})},a.childRefs=Object.create(null),a.state={children:(0,v.getChildMapping)(n.children)},a}return a(t,e),t.prototype.componentWillMount=function(){this.currentlyTransitioningKeys={},this.keysToEnter=[],this.keysToLeave=[]},t.prototype.componentDidMount=function(){var e=this.state.children;for(var t in e)e[t]&&this.performAppear(t,this.childRefs[t])},t.prototype.componentWillReceiveProps=function(e){var t=(0,v.getChildMapping)(e.children),n=this.state.children;this.setState({children:(0,v.mergeChildMappings)(n,t)});for(var o in t){var r=n&&n.hasOwnProperty(o);!t[o]||r||this.currentlyTransitioningKeys[o]||this.keysToEnter.push(o)}for(var i in n){var a=t&&t.hasOwnProperty(i);!n[i]||a||this.currentlyTransitioningKeys[i]||this.keysToLeave.push(i)}},t.prototype.componentDidUpdate=function(){var e=this,t=this.keysToEnter;this.keysToEnter=[],t.forEach(function(t){return e.performEnter(t,e.childRefs[t])});var n=this.keysToLeave;this.keysToLeave=[],n.forEach(function(t){return e.performLeave(t,e.childRefs[t])})},t.prototype.render=function(){var e=this,t=[];for(var n in this.state.children)!function(n){var o=e.state.children[n];if(o){var r="string"!=typeof o.ref,i=e.props.childFactory(o),a=function(t){e.childRefs[n]=t};i===o&&r&&(a=(0,c.default)(o.ref,a)),t.push(p.default.cloneElement(i,{key:n,ref:a}))}}(n);var o=u({},this.props);return delete o.transitionLeave,delete o.transitionName,delete o.transitionAppear,delete o.transitionEnter,delete o.childFactory,delete o.transitionLeaveTimeout,delete o.transitionEnterTimeout,delete o.transitionAppearTimeout,delete o.component,p.default.createElement(this.props.component,o,t)},t}(p.default.Component);_.displayName="TransitionGroup",_.propTypes={},_.defaultProps=y,t.default=_,e.exports=t.default},"./node_modules/react-transition-group/utils/ChildMapping.js":function(e,t,n){"use strict";function o(e){if(!e)return e;var t={};return i.Children.map(e,function(e){return e}).forEach(function(e){t[e.key]=e}),t}function r(e,t){function n(n){return t.hasOwnProperty(n)?t[n]:e[n]}e=e||{},t=t||{};var o={},r=[];for(var i in e)t.hasOwnProperty(i)?r.length&&(o[i]=r,r=[]):r.push(i);var a=void 0,s={};for(var u in t){if(o.hasOwnProperty(u))for(a=0;a<o[u].length;a++){var l=o[u][a];s[o[u][a]]=n(l)}s[u]=n(u)}for(a=0;a<r.length;a++)s[r[a]]=n(r[a]);return s}t.__esModule=!0,t.getChildMapping=o,t.mergeChildMappings=r;var i=n("./node_modules/react/react.js")},"./node_modules/react-transition-group/utils/PropTypes.js":function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function r(e){var t="transition"+e+"Timeout",n="transition"+e;return function(e){if(e[n]){if(null==e[t])return new Error(t+" wasn't supplied to CSSTransitionGroup: this can cause unreliable animations and won't be supported in a future version of React. See https://fb.me/react-animation-transition-group-timeout for more information.");if("number"!=typeof e[t])return new Error(t+" must be a number (in milliseconds)")}return null}}t.__esModule=!0,t.nameShape=void 0,t.transitionTimeout=r;var i=n("./node_modules/react/react.js"),a=(o(i),n("./node_modules/prop-types/index.js")),s=o(a);t.nameShape=s.default.oneOfType([s.default.string,s.default.shape({enter:s.default.string,leave:s.default.string,active:s.default.string}),s.default.shape({enter:s.default.string,enterActive:s.default.string,leave:s.default.string,leaveActive:s.default.string,appear:s.default.string,appearActive:s.default.string})])},"./node_modules/reselect/lib/index.js":function(e,t,n){"use strict";function o(e,t){return e===t}function r(e,t,n){if(null===t||null===n||t.length!==n.length)return!1;for(var o=t.length,r=0;r<o;r++)if(!e(t[r],n[r]))return!1;return!0}function i(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:o,n=null,i=null;return function(){return r(t,n,arguments)||(i=e.apply(null,arguments)),n=arguments,i}}function a(e){var t=Array.isArray(e[0])?e[0]:e;if(!t.every(function(e){return"function"==typeof e})){var n=t.map(function(e){return void 0===e?"undefined":l(e)}).join(", ");throw new Error("Selector creators expect all input-selectors to be functions, instead received the following types: ["+n+"]")}return t}function s(e){for(var t=arguments.length,n=Array(t>1?t-1:0),o=1;o<t;o++)n[o-1]=arguments[o];return function(){for(var t=arguments.length,o=Array(t),r=0;r<t;r++)o[r]=arguments[r];var s=0,u=o.pop(),l=a(o),c=e.apply(void 0,[function(){return s++,u.apply(null,arguments)}].concat(n)),d=i(function(){for(var e=[],t=l.length,n=0;n<t;n++)e.push(l[n].apply(null,arguments));return c.apply(null,e)});return d.resultFunc=u,d.recomputations=function(){return s},d.resetRecomputations=function(){return s=0},d}}function u(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:c;if("object"!==(void 0===e?"undefined":l(e)))throw new Error("createStructuredSelector expects first argument to be an object where each property is a selector, instead received a "+(void 0===e?"undefined":l(e)));var n=Object.keys(e);return t(n.map(function(t){return e[t]}),function(){for(var e=arguments.length,t=Array(e),o=0;o<e;o++)t[o]=arguments[o];return t.reduce(function(e,t,o){return e[n[o]]=t,e},{})})}var l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.__esModule=!0,t.defaultMemoize=i,t.createSelectorCreator=s,t.createStructuredSelector=u;var c=t.createSelector=s(i)},"./src/components/DeviceListItem/DeviceListItem.js":function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),u=n("./node_modules/react/react.js"),l=o(u),c=n("./node_modules/react-router-dom/es/index.js"),d=n("./node_modules/prop-types/index.js"),p=o(d),f=n("./src/components/ToggleSettings/ToggleSettings.js"),m=o(f);n("./src/components/DeviceListItem/DeviceListItem.scss");var h=function(e){function t(e){r(this,t);var n=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.setDeviceId=function(e){n.props.setPopupShown(n.props.data._id)},n}return a(t,e),s(t,[{key:"render",value:function(){return l.default.createElement("div",{className:"device-item"},l.default.createElement("div",{className:"device-item__info"},l.default.createElement(c.Link,{className:"device-item__info-name",to:"/devices/device/"+this.props.data._id},this.props.data.name),l.default.createElement("div",{className:"device-item__info-status"},l.default.createElement(m.default,{checked:this.props.data.status,itemId:this.props.data._id,setItemValue:this.props.changeStatus}))),l.default.createElement("div",{className:"device-item__description"},l.default.createElement("div",{className:"device-item__description-location"},this.props.location),l.default.createElement("div",{className:"device-item__description-icon"},l.default.createElement("div",{className:"device-item__description-icon-delete"},l.default.createElement("a",{className:"fa fa-trash",onClick:this.setDeviceId})))))}}]),t}(l.default.Component);h.propTypes={changeStatus:p.default.func,deleteDevice:p.default.func,setPopupShown:p.default.func,location:p.default.string,data:p.default.shape({status:p.default.boolean,_id:p.default.string,name:p.default.string,location:p.default.string})},t.default=h},"./src/components/DeviceListItem/DeviceListItem.scss":function(e,t){},"./src/components/DevisesSection/DevisesSection.js":function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),u=n("./node_modules/react/react.js"),l=o(u),c=(n("./node_modules/react-router-dom/es/index.js"),n("./src/components/Message/Message.js")),d=n("./src/components/Popup/Popup.js"),p=n("./src/components/Button/Button.js"),f=n("./src/components/ListHeader/ListHeader.js"),m=o(f),h=n("./node_modules/prop-types/index.js"),v=o(h),y=function(e){function t(e){return r(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return a(t,e),s(t,[{key:"render",value:function(){var e=this,t=this.props.filterOption;return void 0!==t&&this.props.filterAction(t),l.default.createElement("section",{className:"device-list"},l.default.createElement("h1",{className:"device-list__title"},this.props.locationOfDevices?this.props.locationOfDevices.toUpperCase():"Your devices"),l.default.createElement(m.default,{quantity:this.props.quantity,location:this.props.location,history:this.props.history,match:this.props.match}),l.default.createElement("section",{className:"device-list__content"},this.props.children),l.default.createElement(d.Popup,{setPopupShown:this.props.setPopupShown,popupShown:this.props.popupShown,header:"Confirm the action",text:"Are you sure you want to remove the device?"},l.default.createElement(p.Button,{setPopupShown:this.props.setPopupShown,okHandler:function(){e.props.deleteDevice(e.props.currentId),e.props.setPopupShown()},className:"btn popup__btn",innerText:"Ok"}),l.default.createElement(p.Button,{okHandler:function(){e.props.setPopupShown()},className:"btn btn--default popup__btn",innerText:"Cancel"})),l.default.createElement(c.Message,{clearStatus:this.props.clearStatus,header:"Error"}))}}]),t}(l.default.Component);y.propTypes={changeStatus:v.default.func,deleteDevice:v.default.func,loadDevices:v.default.func,filterOption:v.default.any,filterAction:v.default.func,devices:v.default.array,location:v.default.object,history:v.default.object,match:v.default.object,children:v.default.any,clearStatus:v.default.func,currentId:v.default.string,setPopupShown:v.default.func,popupShown:v.default.bool,quantity:v.default.number,locationOfDevices:v.default.string},t.default=y},"./src/components/FilterSelect/FilterSelect.js":function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var r=n("./node_modules/react/react.js"),i=o(r),a=n("./node_modules/prop-types/index.js"),s=o(a);n("./src/components/FilterSelect/FilterSelect.scss");var u=function(e){return i.default.createElement("div",{className:"filterBox"},i.default.createElement("select",{className:"filterBox__filter",onChange:function(t){return e.handleSelect(t.target.value)}},e.options.map(function(t){return i.default.createElement("option",{value:t.value,key:t.value,selected:t.value===e.value},t.innerText)})))};u.propTypes={handleSelect:s.default.func.isRequired,options:s.default.array,value:s.default.string},t.default=u},"./src/components/FilterSelect/FilterSelect.scss":function(e,t){},"./src/components/ListHeader/ListHeader.js":function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},u=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),l=n("./node_modules/react/react.js"),c=o(l),d=n("./node_modules/react-router-dom/es/index.js"),p=n("./node_modules/react-redux/es/index.js"),f=n("./node_modules/query-string/index.js"),m=o(f),h=n("./src/components/FilterSelect/FilterSelect.js"),v=o(h),y=n("./src/components/Search/Search.js"),_=o(y),b=n("./src/actions/devices.action.js"),g=n("./src/utils/utils.js"),j=n("./src/data/filterOptions.js"),S=n("./node_modules/prop-types/index.js"),w=o(S),E=function(e){function t(e){r(this,t);var n=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.initialParams={search:"",filter:"all"},n.handleFilterSelect=function(e){n.props.filterAction(e),n.updateUrl(s({},n.initialParams,{filter:e}))},n.handleSearchResult=function(e){n.props.findItems(e),n.updateUrl(s({},n.initialParams,{search:e}))},n.updateUrl=function(e){var t=n.props.match,o=n.props.history;n.initialParams=e,o.push({pathname:t.url,search:(0,g.queryFromObject)(e)})},n}return a(t,e),u(t,[{key:"componentDidMount",value:function(){var e=this.props.location,t=m.default.parse(e.search).search,n=m.default.parse(e.search).filter;t&&this.handleSearchResult(t),n&&this.handleFilterSelect(n)}},{key:"componentWillUnmount",value:function(){this.props.filterAction("all"),this.props.findItems("")}},{key:"render",value:function(){return c.default.createElement("header",{className:"device-list__header"},c.default.createElement(_.default,{handleSearch:this.handleSearchResult,quantity:this.props.quantity,value:this.initialParams.search}),c.default.createElement("div",{className:"device-list__header--right"},c.default.createElement(v.default,{handleSelect:this.handleFilterSelect,options:j.options,value:this.initialParams.filter}),c.default.createElement(d.Link,{to:"/builder",className:"btn btn--primary add-item-button"},"New")))}}]),t}(c.default.Component),T=function(e){return{filterOption:e.searchAndFilter.filterOption,search:e.searchAndFilter.searchValue}},O=function(e){return{filterAction:function(t){return e((0,b.filterAction)(t))},findItems:function(t){return e((0,b.searchAction)(t))}}};E.propTypes={search:w.default.string,filterOption:w.default.string,filterAction:w.default.func,findItems:w.default.func,match:w.default.object,history:w.default.object,location:w.default.object,loadDevices:w.default.func,quantity:w.default.number},t.default=(0,p.connect)(T,O)(E)},"./src/components/Search/Search.js":function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var r=n("./node_modules/react/react.js"),i=o(r),a=n("./node_modules/prop-types/index.js"),s=o(a);n("./src/components/Search/search.scss");var u=function(e){return i.default.createElement("div",{className:"searchBox"},i.default.createElement("div",{className:"searchBox__results"},i.default.createElement("span",null,e.quantity)," devices"),i.default.createElement("div",null,i.default.createElement("input",{type:"text",name:"search",placeholder:"Find a device",value:e.value,className:"searchBox__field",onChange:function(t){e.handleSearch(t.target.value)}})))};u.propTypes={handleSearch:s.default.func.isRequired,quantity:s.default.number,value:s.default.string},t.default=u},"./src/components/Search/search.scss":function(e,t){},"./src/components/ToggleSettings/ToggleSettings.js":function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),u=n("./node_modules/react/react.js"),l=o(u),c=n("./node_modules/prop-types/index.js"),d=o(c);n("./src/components/ToggleSettings/ToggleStyle.scss");var p=function(e){function t(e){r(this,t);var n=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.onChangeValue=function(e){n.props.setItemValue(!n.props.checked,n.props.itemId,n.props.deviceId)},n}return a(t,e),s(t,[{key:"render",value:function(){return l.default.createElement("div",{className:""+this.props.styleName},l.default.createElement("label",{className:"switch"},l.default.createElement("input",{type:"checkbox",checked:this.props.checked,onChange:this.onChangeValue}),l.default.createElement("div",{className:"slider round"})))}}]),t}(l.default.Component);t.default=p,p.propTypes={device:d.default.object,styleName:d.default.string,checked:d.default.bool.isRequired,setItemValue:d.default.func,itemId:d.default.any,newValue:d.default.string,deviceId:d.default.string},p.defaultProps={checked:!1}},"./src/components/ToggleSettings/ToggleStyle.scss":function(e,t){},"./src/data/filterOptions.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.options=[{value:"all",innerText:"All"},{value:"on",innerText:"Show On"},{value:"off",innerText:"Show OFF"}]},"./src/pages/DeviceList/DeviceList.js":function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),u=n("./node_modules/react/react.js"),l=o(u),c=n("./node_modules/react-router-dom/es/index.js"),d=n("./node_modules/react-redux/es/index.js"),p=n("./src/components/DeviceListItem/DeviceListItem.js"),f=o(p),m=(n("./src/components/Message/Message.js"),n("./src/components/Popup/Popup.js"),n("./src/components/Button/Button.js"),n("./src/components/ListHeader/ListHeader.js")),h=(o(m),n("./src/components/DevisesSection/DevisesSection.js")),v=o(h),y=n("./src/actions/devices.action.js"),_=n("./src/actions/notifications.action.js"),b=n("./src/selectors/index.js"),g=n("./src/utils/utils.js"),j=n("./node_modules/react-addons-css-transition-group/index.js"),S=o(j),w=n("./node_modules/prop-types/index.js"),E=o(w);n("./src/pages/DeviceList/DeviceList.scss");var T=function(e){function t(e){r(this,t);var n=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={popupShown:!1,currentId:"",currentPage:1,todosPerPage:6},n.deleteDevice=function(e){n.props.deleteDevice(e)},n.setPopupShown=function(e){var t=n.state.popupShown;n.setState({popupShown:!t,currentId:e})},n.changeStatus=function(e,t){n.props.changeStatus({status:e},t)},n}return a(t,e),s(t,[{key:"componentDidMount",value:function(){this.props.loadDevices()}},{key:"renderDevices",value:function(e,t){var n=this;return(e[t].length>8?e[t].slice(0,7):e[t]).map(function(e,t){return l.default.createElement(f.default,{data:e,key:t,location:"",changeStatus:n.changeStatus,setPopupShown:n.setPopupShown})})}},{key:"renderDeviceGroup",value:function(){var e=this,t=(0,g.sortDevicesByLocations)(this.props.devices);return Object.keys(t).map(function(n,o){return l.default.createElement("div",{className:"device-group",key:o},l.default.createElement("h2",{className:"device-group__title"},n.toUpperCase()),l.default.createElement(S.default,{className:"device-group__items",transitionName:"hide",transitionEnterTimeout:500,transitionLeaveTimeout:300},e.renderDevices(t,n),t[n].length>8?l.default.createElement(c.Link,{className:"device-group__link",to:"/devices/"+n},l.default.createElement("i",{className:"fa fa-repeat","aria-hidden":"true"}),"More devices"):null))})}},{key:"render",value:function(){var e=this.props.match.params.filterOption;return void 0!==e&&this.props.filterAction(e),l.default.createElement(v.default,{filterOption:e,devices:this.props.devices,location:this.props.location,history:this.props.history,match:this.props.match,status:this.props.status,text:this.props.errorText,setPopupShown:this.setPopupShown,popupShown:this.state.popupShown,deleteDevice:this.deleteDevice,clearStatus:this.props.clearStatus,currentId:this.state.currentId,quantity:this.props.devices.length},"DONE"===this.props.status&&0===this.props.devices.length?l.default.createElement("span",null,"You need to add device"):this.renderDeviceGroup())}}]),t}(l.default.Component),O=function(e){return{devices:(0,b.filterItems)(e),status:e.devicesList.uploadStatus,errorText:e.devicesList.errorText}},P=function(e){return{changeStatus:function(t,n){return e((0,y.updateDevice)(t,n))},loadDevices:function(){return e((0,y.loadDevices)())},deleteDevice:function(t){return e((0,y.deleteDevice)(t))},sendNotificationWS:function(t){return e((0,_.sendNotificationWS)(t))},clearStatus:function(){return e((0,y.clearStatus)())}}};T.propTypes={match:E.default.object,changeStatus:E.default.func,devices:E.default.array,filterAction:E.default.func,findItems:E.default.func,loadDevices:E.default.func,deleteDevice:E.default.func,history:E.default.object,location:E.default.object,status:E.default.string,sendNotificationWS:E.default.func,errorText:E.default.string,clearStatus:E.default.func},t.default=(0,d.connect)(O,P)(T)},"./src/pages/DeviceList/DeviceList.scss":function(e,t){},"./src/selectors/index.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.filterItems=void 0;var o=n("./node_modules/reselect/lib/index.js"),r=n("./src/utils/utils.js"),i=function(e){return e.searchAndFilter.filterOption},a=function(e){return e.devicesList.devices},s=function(e){return e.searchAndFilter.searchValue};t.filterItems=(0,o.createSelector)([i,s,a],function(e,t,n){var o=n;return"all"===e?o=n:"on"===e?o=n.filter(function(e){return!0===e.status}):"off"===e&&(o=n.filter(function(e){return!1===e.status})),o.filter(function(e){return(0,r.searchItem)(e,t)})})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,