webpackJsonp([0],{"./node_modules/classnames/index.js":function(t,e,n){"use strict";var r,i,o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};/*!
  Copyright (c) 2016 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
!function(){function u(){for(var t=[],e=0;e<arguments.length;e++){var n=arguments[e];if(n){var r=void 0===n?"undefined":o(n);if("string"===r||"number"===r)t.push(n);else if(Array.isArray(n))t.push(u.apply(null,n));else if("object"===r)for(var i in n)a.call(n,i)&&n[i]&&t.push(i)}}return t.join(" ")}var a={}.hasOwnProperty;void 0!==t&&t.exports?t.exports=u:"object"===o(n("./node_modules/webpack/buildin/amd-options.js"))&&n("./node_modules/webpack/buildin/amd-options.js")?(r=[],void 0!==(i=function(){return u}.apply(e,r))&&(t.exports=i)):window.classNames=u}()},"./node_modules/create-react-class/index.js":function(t,e,n){"use strict";var r=n("./node_modules/react/react.js"),i=n("./node_modules/create-react-class/factory.js");if(void 0===r)throw Error("create-react-class could not find the React object. If you are using script tags, make sure that React is being loaded before create-react-class.");var o=(new r.Component).updater;t.exports=i(r.Component,r.isValidElement,o)},"./node_modules/d3/build/d3.js":function(t,e,n){"use strict";var r,i,o,u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};!function(n,a){"object"===u(e)&&void 0!==t?a(e):(i=[e],r=a,void 0!==(o="function"==typeof r?r.apply(e,i):r)&&(t.exports=o))}(0,function(t){function e(t){return function(e,n){return Jl(t(e),n)}}function n(t,e){return[t,e]}function r(t,e,n){var r=(e-t)/Math.max(0,n),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=mc?10:o>=yc?5:o>=gc?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=mc?10:o>=yc?5:o>=gc?2:1)}function i(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=mc?i*=10:o>=yc?i*=5:o>=gc&&(i*=2),e<t?-i:i}function o(t){return t.length}function a(t){return"translate("+(t+.5)+",0)"}function s(t){return"translate(0,"+(t+.5)+")"}function l(t){return function(e){return+t(e)}}function c(t){var e=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(e=Math.round(e)),function(n){return+t(n)+e}}function f(){return!this.__axis}function h(t,e){function n(n){var a=null==i?e.ticks?e.ticks.apply(e,r):e.domain():i,s=null==o?e.tickFormat?e.tickFormat.apply(e,r):Rc:o,y=Math.max(u,0)+p,g=e.range(),_=+g[0]+.5,b=+g[g.length-1]+.5,x=(e.bandwidth?c:l)(e.copy()),w=n.selection?n.selection():n,E=w.selectAll(".domain").data([null]),M=w.selectAll(".tick").data(a,e).order(),F=M.exit(),C=M.enter().append("g").attr("class","tick"),S=M.select("line"),A=M.select("text");E=E.merge(E.enter().insert("path",".tick").attr("class","domain").attr("stroke","#000")),M=M.merge(C),S=S.merge(C.append("line").attr("stroke","#000").attr(v+"2",d*u)),A=A.merge(C.append("text").attr("fill","#000").attr(v,d*y).attr("dy",t===Ic?"0em":t===zc?"0.71em":"0.32em")),n!==w&&(E=E.transition(n),M=M.transition(n),S=S.transition(n),A=A.transition(n),F=F.transition(n).attr("opacity",qc).attr("transform",function(t){return isFinite(t=x(t))?m(t):this.getAttribute("transform")}),C.attr("opacity",qc).attr("transform",function(t){var e=this.parentNode.__axis;return m(e&&isFinite(e=e(t))?e:x(t))})),F.remove(),E.attr("d",t===Bc||t==Lc?"M"+d*h+","+_+"H0.5V"+b+"H"+d*h:"M"+_+","+d*h+"V0.5H"+b+"V"+d*h),M.attr("opacity",1).attr("transform",function(t){return m(x(t))}),S.attr(v+"2",d*u),A.attr(v,d*y).text(s),w.filter(f).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===Lc?"start":t===Bc?"end":"middle"),w.each(function(){this.__axis=x})}var r=[],i=null,o=null,u=6,h=6,p=3,d=t===Ic||t===Bc?-1:1,v=t===Bc||t===Lc?"x":"y",m=t===Ic||t===zc?a:s;return n.scale=function(t){return arguments.length?(e=t,n):e},n.ticks=function(){return r=Vc.call(arguments),n},n.tickArguments=function(t){return arguments.length?(r=null==t?[]:Vc.call(t),n):r.slice()},n.tickValues=function(t){return arguments.length?(i=null==t?null:Vc.call(t),n):i&&i.slice()},n.tickFormat=function(t){return arguments.length?(o=t,n):o},n.tickSize=function(t){return arguments.length?(u=h=+t,n):u},n.tickSizeInner=function(t){return arguments.length?(u=+t,n):u},n.tickSizeOuter=function(t){return arguments.length?(h=+t,n):h},n.tickPadding=function(t){return arguments.length?(p=+t,n):p},n}function p(t){return h(Ic,t)}function d(t){return h(Lc,t)}function v(t){return h(zc,t)}function m(t){return h(Bc,t)}function y(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new g(r)}function g(t){this._=t}function _(t,e){return t.trim().split(/^|\s+/).map(function(t){var n="",r=t.indexOf(".");if(r>=0&&(n=t.slice(r+1),t=t.slice(0,r)),t&&!e.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}})}function b(t,e){for(var n,r=0,i=t.length;r<i;++r)if((n=t[r]).name===e)return n.value}function x(t,e,n){for(var r=0,i=t.length;r<i;++r)if(t[r].name===e){t[r]=Uc,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}function w(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===Kc&&e.documentElement.namespaceURI===Kc?e.createElement(t):e.createElementNS(n,t)}}function E(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function M(){return new F}function F(){this._="@"+(++Xc).toString(36)}function C(t,e,n){return t=S(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function S(e,n,r){return function(i){var o=t.event;t.event=i;try{e.call(this,this.__data__,n,r)}finally{t.event=o}}}function A(t){return t.trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}})}function O(t){return function(){var e=this.__on;if(e){for(var n,r=0,i=-1,o=e.length;r<o;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++i]=n:this.removeEventListener(n.type,n.listener,n.capture);++i?e.length=i:delete this.__on}}}function T(t,e,n){var r=Qc.hasOwnProperty(t.type)?C:S;return function(i,o,u){var a,s=this.__on,l=r(e,o,u);if(s)for(var c=0,f=s.length;c<f;++c)if((a=s[c]).type===t.type&&a.name===t.name)return this.removeEventListener(a.type,a.listener,a.capture),this.addEventListener(a.type,a.listener=l,a.capture=n),void(a.value=e);this.addEventListener(t.type,l,n),a={type:t.type,name:t.name,value:e,listener:l,capture:n},s?s.push(a):this.__on=[a]}}function D(e,n,r,i){var o=t.event;e.sourceEvent=t.event,t.event=e;try{return n.apply(r,i)}finally{t.event=o}}function k(){}function N(){return[]}function j(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}function P(t,e,n,r,i,o){for(var u,a=0,s=e.length,l=o.length;a<l;++a)(u=e[a])?(u.__data__=o[a],r[a]=u):n[a]=new j(t,o[a]);for(;a<s;++a)(u=e[a])&&(i[a]=u)}function V(t,e,n,r,i,o,u){var a,s,l,c={},f=e.length,h=o.length,p=new Array(f);for(a=0;a<f;++a)(s=e[a])&&(p[a]=l=pf+u.call(s,s.__data__,a,e),l in c?i[a]=s:c[l]=s);for(a=0;a<h;++a)l=pf+u.call(t,o[a],a,o),(s=c[l])?(r[a]=s,s.__data__=o[a],c[l]=null):n[a]=new j(t,o[a]);for(a=0;a<f;++a)(s=e[a])&&c[p[a]]===s&&(i[a]=s)}function R(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function I(t){return function(){this.removeAttribute(t)}}function L(t){return function(){this.removeAttributeNS(t.space,t.local)}}function z(t,e){return function(){this.setAttribute(t,e)}}function B(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function q(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function U(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}function K(t){return function(){this.style.removeProperty(t)}}function H(t,e,n){return function(){this.style.setProperty(t,e,n)}}function W(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}function Y(t,e){return t.style.getPropertyValue(e)||Cf(t).getComputedStyle(t,null).getPropertyValue(e)}function X(t){return function(){delete this[t]}}function $(t,e){return function(){this[t]=e}}function G(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function Z(t){return t.trim().split(/^|\s+/)}function J(t){return t.classList||new Q(t)}function Q(t){this._node=t,this._names=Z(t.getAttribute("class")||"")}function tt(t,e){for(var n=J(t),r=-1,i=e.length;++r<i;)n.add(e[r])}function et(t,e){for(var n=J(t),r=-1,i=e.length;++r<i;)n.remove(e[r])}function nt(t){return function(){tt(this,t)}}function rt(t){return function(){et(this,t)}}function it(t,e){return function(){(e.apply(this,arguments)?tt:et)(this,t)}}function ot(){this.textContent=""}function ut(t){return function(){this.textContent=t}}function at(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function st(){this.innerHTML=""}function lt(t){return function(){this.innerHTML=t}}function ct(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function ft(){this.nextSibling&&this.parentNode.appendChild(this)}function ht(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function pt(){return null}function dt(){var t=this.parentNode;t&&t.removeChild(this)}function vt(t,e,n){var r=Cf(t),i=r.CustomEvent;"function"==typeof i?i=new i(e,n):(i=r.document.createEvent("Event"),n?(i.initEvent(e,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(e,!1,!1)),t.dispatchEvent(i)}function mt(t,e){return function(){return vt(this,t,e)}}function yt(t,e){return function(){return vt(this,t,e.apply(this,arguments))}}function gt(t,e){this._groups=t,this._parents=e}function _t(){return new gt([[document.documentElement]],Lf)}function bt(){t.event.stopImmediatePropagation()}function xt(t,e){var n=t.document.documentElement,r=zf(t).on("dragstart.drag",null);e&&(r.on("click.drag",Kf,!0),setTimeout(function(){r.on("click.drag",null)},0)),"onselectstart"in n?r.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}function wt(t,e,n,r,i,o,u,a,s,l){this.target=t,this.type=e,this.subject=n,this.identifier=r,this.active=i,this.x=o,this.y=u,this.dx=a,this.dy=s,this._=l}function Et(){return!t.event.button}function Mt(){return this.parentNode}function Ft(e){return null==e?{x:t.event.x,y:t.event.y}:e}function Ct(){return"ontouchstart"in this}function St(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function At(){}function Ot(t){var e;return t=(t+"").trim().toLowerCase(),(e=Jf.exec(t))?(e=parseInt(e[1],16),new jt(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1)):(e=Qf.exec(t))?Tt(parseInt(e[1],16)):(e=th.exec(t))?new jt(e[1],e[2],e[3],1):(e=eh.exec(t))?new jt(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=nh.exec(t))?Dt(e[1],e[2],e[3],e[4]):(e=rh.exec(t))?Dt(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=ih.exec(t))?Pt(e[1],e[2]/100,e[3]/100,1):(e=oh.exec(t))?Pt(e[1],e[2]/100,e[3]/100,e[4]):uh.hasOwnProperty(t)?Tt(uh[t]):"transparent"===t?new jt(NaN,NaN,NaN,0):null}function Tt(t){return new jt(t>>16&255,t>>8&255,255&t,1)}function Dt(t,e,n,r){return r<=0&&(t=e=n=NaN),new jt(t,e,n,r)}function kt(t){return t instanceof At||(t=Ot(t)),t?(t=t.rgb(),new jt(t.r,t.g,t.b,t.opacity)):new jt}function Nt(t,e,n,r){return 1===arguments.length?kt(t):new jt(t,e,n,null==r?1:r)}function jt(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function Pt(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new It(t,e,n,r)}function Vt(t){if(t instanceof It)return new It(t.h,t.s,t.l,t.opacity);if(t instanceof At||(t=Ot(t)),!t)return new It;if(t instanceof It)return t;t=t.rgb();var e=t.r/255,n=t.g/255,r=t.b/255,i=Math.min(e,n,r),o=Math.max(e,n,r),u=NaN,a=o-i,s=(o+i)/2;return a?(u=e===o?(n-r)/a+6*(n<r):n===o?(r-e)/a+2:(e-n)/a+4,a/=s<.5?o+i:2-o-i,u*=60):a=s>0&&s<1?0:u,new It(u,a,s,t.opacity)}function Rt(t,e,n,r){return 1===arguments.length?Vt(t):new It(t,e,n,null==r?1:r)}function It(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Lt(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}function zt(t){if(t instanceof qt)return new qt(t.l,t.a,t.b,t.opacity);if(t instanceof $t){var e=t.h*ah;return new qt(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}t instanceof jt||(t=kt(t));var n=Wt(t.r),r=Wt(t.g),i=Wt(t.b),o=Ut((.4124564*n+.3575761*r+.1804375*i)/lh),u=Ut((.2126729*n+.7151522*r+.072175*i)/ch);return new qt(116*u-16,500*(o-u),200*(u-Ut((.0193339*n+.119192*r+.9503041*i)/fh)),t.opacity)}function Bt(t,e,n,r){return 1===arguments.length?zt(t):new qt(t,e,n,null==r?1:r)}function qt(t,e,n,r){this.l=+t,this.a=+e,this.b=+n,this.opacity=+r}function Ut(t){return t>vh?Math.pow(t,1/3):t/dh+hh}function Kt(t){return t>ph?t*t*t:dh*(t-hh)}function Ht(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function Wt(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function Yt(t){if(t instanceof $t)return new $t(t.h,t.c,t.l,t.opacity);t instanceof qt||(t=zt(t));var e=Math.atan2(t.b,t.a)*sh;return new $t(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function Xt(t,e,n,r){return 1===arguments.length?Yt(t):new $t(t,e,n,null==r?1:r)}function $t(t,e,n,r){this.h=+t,this.c=+e,this.l=+n,this.opacity=+r}function Gt(t){if(t instanceof Jt)return new Jt(t.h,t.s,t.l,t.opacity);t instanceof jt||(t=kt(t));var e=t.r/255,n=t.g/255,r=t.b/255,i=(Eh*r+xh*e-wh*n)/(Eh+xh-wh),o=r-i,u=(bh*(n-i)-gh*o)/_h,a=Math.sqrt(u*u+o*o)/(bh*i*(1-i)),s=a?Math.atan2(u,o)*sh-120:NaN;return new Jt(s<0?s+360:s,a,i,t.opacity)}function Zt(t,e,n,r){return 1===arguments.length?Gt(t):new Jt(t,e,n,null==r?1:r)}function Jt(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Qt(t,e,n,r,i){var o=t*t,u=o*t;return((1-3*t+3*o-u)*e+(4-6*o+3*u)*n+(1+3*t+3*o-3*u)*r+u*i)/6}function te(t,e){return function(n){return t+n*e}}function ee(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}function ne(t,e){var n=e-t;return n?te(t,n>180||n<-180?n-360*Math.round(n/360):n):kh(isNaN(t)?e:t)}function re(t){return 1==(t=+t)?ie:function(e,n){return n-e?ee(e,n,t):kh(isNaN(e)?n:e)}}function ie(t,e){var n=e-t;return n?te(t,n):kh(isNaN(t)?e:t)}function oe(t){return function(e){var n,r,i=e.length,o=new Array(i),u=new Array(i),a=new Array(i);for(n=0;n<i;++n)r=Nt(e[n]),o[n]=r.r||0,u[n]=r.g||0,a[n]=r.b||0;return o=t(o),u=t(u),a=t(a),r.opacity=1,function(t){return r.r=o(t),r.g=u(t),r.b=a(t),r+""}}}function ue(t){return function(){return t}}function ae(t){return function(e){return t(e)+""}}function se(t){return"none"===t?Wh:(Mh||(Mh=document.createElement("DIV"),Fh=document.documentElement,Ch=document.defaultView),Mh.style.transform=t,t=Ch.getComputedStyle(Fh.appendChild(Mh),null).getPropertyValue("transform"),Fh.removeChild(Mh),t=t.slice(7,-1).split(","),Yh(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}function le(t){return null==t?Wh:(Sh||(Sh=document.createElementNS("http://www.w3.org/2000/svg","g")),Sh.setAttribute("transform",t),(t=Sh.transform.baseVal.consolidate())?(t=t.matrix,Yh(t.a,t.b,t.c,t.d,t.e,t.f)):Wh)}function ce(t,e,n,r){function i(t){return t.length?t.pop()+" ":""}function o(t,r,i,o,u,a){if(t!==i||r!==o){var s=u.push("translate(",null,e,null,n);a.push({i:s-4,x:Ih(t,i)},{i:s-2,x:Ih(r,o)})}else(i||o)&&u.push("translate("+i+e+o+n)}function u(t,e,n,o){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),o.push({i:n.push(i(n)+"rotate(",null,r)-2,x:Ih(t,e)})):e&&n.push(i(n)+"rotate("+e+r)}function a(t,e,n,o){t!==e?o.push({i:n.push(i(n)+"skewX(",null,r)-2,x:Ih(t,e)}):e&&n.push(i(n)+"skewX("+e+r)}function s(t,e,n,r,o,u){if(t!==n||e!==r){var a=o.push(i(o)+"scale(",null,",",null,")");u.push({i:a-4,x:Ih(t,n)},{i:a-2,x:Ih(e,r)})}else 1===n&&1===r||o.push(i(o)+"scale("+n+","+r+")")}return function(e,n){var r=[],i=[];return e=t(e),n=t(n),o(e.translateX,e.translateY,n.translateX,n.translateY,r,i),u(e.rotate,n.rotate,r,i),a(e.skewX,n.skewX,r,i),s(e.scaleX,e.scaleY,n.scaleX,n.scaleY,r,i),e=n=null,function(t){for(var e,n=-1,o=i.length;++n<o;)r[(e=i[n]).i]=e.x(t);return r.join("")}}}function fe(t){return((t=Math.exp(t))+1/t)/2}function he(t){return((t=Math.exp(t))-1/t)/2}function pe(t){return((t=Math.exp(2*t))-1)/(t+1)}function de(t){return function(e,n){var r=t((e=Rt(e)).h,(n=Rt(n)).h),i=ie(e.s,n.s),o=ie(e.l,n.l),u=ie(e.opacity,n.opacity);return function(t){return e.h=r(t),e.s=i(t),e.l=o(t),e.opacity=u(t),e+""}}}function ve(t,e){var n=ie((t=Bt(t)).l,(e=Bt(e)).l),r=ie(t.a,e.a),i=ie(t.b,e.b),o=ie(t.opacity,e.opacity);return function(e){return t.l=n(e),t.a=r(e),t.b=i(e),t.opacity=o(e),t+""}}function me(t){return function(e,n){var r=t((e=Xt(e)).h,(n=Xt(n)).h),i=ie(e.c,n.c),o=ie(e.l,n.l),u=ie(e.opacity,n.opacity);return function(t){return e.h=r(t),e.c=i(t),e.l=o(t),e.opacity=u(t),e+""}}}function ye(t){return function e(n){function r(e,r){var i=t((e=Zt(e)).h,(r=Zt(r)).h),o=ie(e.s,r.s),u=ie(e.l,r.l),a=ie(e.opacity,r.opacity);return function(t){return e.h=i(t),e.s=o(t),e.l=u(Math.pow(t,n)),e.opacity=a(t),e+""}}return n=+n,r.gamma=e,r}(1)}function ge(){return cp||(pp(_e),cp=hp.now()+fp)}function _e(){cp=0}function be(){this._call=this._time=this._next=null}function xe(t,e,n){var r=new be;return r.restart(t,e,n),r}function we(){ge(),++op;for(var t,e=Ah;e;)(t=cp-e._time)>=0&&e._call.call(null,t),e=e._next;--op}function Ee(){cp=(lp=hp.now())+fp,op=up=0;try{we()}finally{op=0,Fe(),cp=0}}function Me(){var t=hp.now(),e=t-lp;e>sp&&(fp-=e,lp=t)}function Fe(){for(var t,e,n=Ah,r=1/0;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:Ah=e);Oh=t,Ce(r)}function Ce(t){if(!op){up&&(up=clearTimeout(up));var e=t-cp;e>24?(t<1/0&&(up=setTimeout(Ee,e)),ap&&(ap=clearInterval(ap))):(ap||(lp=cp,ap=setInterval(Me,sp)),op=1,pp(Ee))}}function Se(t,e){var n=t.__transition;if(!n||!(n=n[e])||n.state>gp)throw new Error("too late");return n}function Ae(t,e){var n=t.__transition;if(!n||!(n=n[e])||n.state>bp)throw new Error("too late");return n}function Oe(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("too late");return n}function Te(t,e,n){function r(t){n.state=_p,n.timer.restart(i,n.delay,n.time),n.delay<=t&&i(t-n.delay)}function i(r){var l,c,f,h;if(n.state!==_p)return u();for(l in s)if(h=s[l],h.name===n.name){if(h.state===xp)return dp(i);h.state===wp?(h.state=Mp,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete s[l]):+l<e&&(h.state=Mp,h.timer.stop(),delete s[l])}if(dp(function(){n.state===xp&&(n.state=wp,n.timer.restart(o,n.delay,n.time),o(r))}),n.state=bp,n.on.call("start",t,t.__data__,n.index,n.group),n.state===bp){for(n.state=xp,a=new Array(f=n.tween.length),l=0,c=-1;l<f;++l)(h=n.tween[l].value.call(t,t.__data__,n.index,n.group))&&(a[++c]=h);a.length=c+1}}function o(e){for(var r=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(u),n.state=Ep,1),i=-1,o=a.length;++i<o;)a[i].call(null,r);n.state===Ep&&(n.on.call("end",t,t.__data__,n.index,n.group),u())}function u(){n.state=Mp,n.timer.stop(),delete s[e];for(var r in s)return;delete t.__transition}var a,s=t.__transition;s[e]=n,n.timer=xe(r,0,n.time)}function De(t,e){var n,r;return function(){var i=Ae(this,t),o=i.tween;if(o!==n){r=n=o;for(var u=0,a=r.length;u<a;++u)if(r[u].name===e){r=r.slice(),r.splice(u,1);break}}i.tween=r}}function ke(t,e,n){var r,i;if("function"!=typeof n)throw new Error;return function(){var o=Ae(this,t),u=o.tween;if(u!==r){i=(r=u).slice();for(var a={name:e,value:n},s=0,l=i.length;s<l;++s)if(i[s].name===e){i[s]=a;break}s===l&&i.push(a)}o.tween=i}}function Ne(t,e,n){var r=t._id;return t.each(function(){var t=Ae(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)}),function(t){return Oe(t,r).value[e]}}function je(t){return function(){this.removeAttribute(t)}}function Pe(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Ve(t,e,n){var r,i;return function(){var o=this.getAttribute(t);return o===n?null:o===r?i:i=e(r=o,n)}}function Re(t,e,n){var r,i;return function(){var o=this.getAttributeNS(t.space,t.local);return o===n?null:o===r?i:i=e(r=o,n)}}function Ie(t,e,n){var r,i,o;return function(){var u,a=n(this);return null==a?void this.removeAttribute(t):(u=this.getAttribute(t),u===a?null:u===r&&a===i?o:o=e(r=u,i=a))}}function Le(t,e,n){var r,i,o;return function(){var u,a=n(this);return null==a?void this.removeAttributeNS(t.space,t.local):(u=this.getAttributeNS(t.space,t.local),u===a?null:u===r&&a===i?o:o=e(r=u,i=a))}}function ze(t,e){function n(){var n=this,r=e.apply(n,arguments);return r&&function(e){n.setAttributeNS(t.space,t.local,r(e))}}return n._value=e,n}function Be(t,e){function n(){var n=this,r=e.apply(n,arguments);return r&&function(e){n.setAttribute(t,r(e))}}return n._value=e,n}function qe(t,e){return function(){Se(this,t).delay=+e.apply(this,arguments)}}function Ue(t,e){return e=+e,function(){Se(this,t).delay=e}}function Ke(t,e){return function(){Ae(this,t).duration=+e.apply(this,arguments)}}function He(t,e){return e=+e,function(){Ae(this,t).duration=e}}function We(t,e){if("function"!=typeof e)throw new Error;return function(){Ae(this,t).ease=e}}function Ye(t){return(t+"").trim().split(/^|\s+/).every(function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t})}function Xe(t,e,n){var r,i,o=Ye(e)?Se:Ae;return function(){var u=o(this,t),a=u.on;a!==r&&(i=(r=a).copy()).on(e,n),u.on=i}}function $e(t){return function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}}function Ge(t,e){var n,r,i;return function(){var o=Y(this,t),u=(this.style.removeProperty(t),Y(this,t));return o===u?null:o===n&&u===r?i:i=e(n=o,r=u)}}function Ze(t){return function(){this.style.removeProperty(t)}}function Je(t,e,n){var r,i;return function(){var o=Y(this,t);return o===n?null:o===r?i:i=e(r=o,n)}}function Qe(t,e,n){var r,i,o;return function(){var u=Y(this,t),a=n(this);return null==a&&(this.style.removeProperty(t),a=Y(this,t)),u===a?null:u===r&&a===i?o:o=e(r=u,i=a)}}function tn(t,e,n){function r(){var r=this,i=e.apply(r,arguments);return i&&function(e){r.style.setProperty(t,i(e),n)}}return r._value=e,r}function en(t){return function(){this.textContent=t}}function nn(t){return function(){var e=t(this);this.textContent=null==e?"":e}}function rn(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function on(t){return _t().transition(t)}function un(){return++Yp}function an(t){return+t}function sn(t){return t*t}function ln(t){return t*(2-t)}function cn(t){return((t*=2)<=1?t*t:--t*(2-t)+1)/2}function fn(t){return t*t*t}function hn(t){return--t*t*t+1}function pn(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}function dn(t){return 1-Math.cos(t*Qp)}function vn(t){return Math.sin(t*Qp)}function mn(t){return(1-Math.cos(Jp*t))/2}function yn(t){return Math.pow(2,10*t-10)}function gn(t){return 1-Math.pow(2,-10*t)}function _n(t){return((t*=2)<=1?Math.pow(2,10*t-10):2-Math.pow(2,10-10*t))/2}function bn(t){return 1-Math.sqrt(1-t*t)}function xn(t){return Math.sqrt(1- --t*t)}function wn(t){return((t*=2)<=1?1-Math.sqrt(1-t*t):Math.sqrt(1-(t-=2)*t)+1)/2}function En(t){return 1-Mn(1-t)}function Mn(t){return(t=+t)<td?ld*t*t:t<nd?ld*(t-=ed)*t+rd:t<od?ld*(t-=id)*t+ud:ld*(t-=ad)*t+sd}function Fn(t){return((t*=2)<=1?1-Mn(1-t):Mn(t-1)+1)/2}function Cn(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))return yd.time=ge(),yd;return n}function Sn(){t.event.stopImmediatePropagation()}function An(t){return{type:t}}function On(){return!t.event.button}function Tn(){var t=this.ownerSVGElement||this;return[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function Dn(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function kn(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function Nn(t){var e=t.__brush;return e?e.dim.output(e.selection):null}function jn(){return Vn(Ad)}function Pn(){return Vn(Od)}function Vn(e){function n(t){var n=t.property("__brush",a).selectAll(".overlay").data([An("overlay")]);n.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",Dd.overlay).merge(n).each(function(){var t=Dn(this).extent;zf(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])}),t.selectAll(".selection").data([An("selection")]).enter().append("rect").attr("class","selection").attr("cursor",Dd.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var i=t.selectAll(".handle").data(e.handles,function(t){return t.type});i.exit().remove(),i.enter().append("rect").attr("class",function(t){return"handle handle--"+t.type}).attr("cursor",function(t){return Dd[t.type]}),t.each(r).attr("fill","none").attr("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush touchstart.brush",u)}function r(){var t=zf(this),e=Dn(this).selection;e?(t.selectAll(".selection").style("display",null).attr("x",e[0][0]).attr("y",e[0][1]).attr("width",e[1][0]-e[0][0]).attr("height",e[1][1]-e[0][1]),t.selectAll(".handle").style("display",null).attr("x",function(t){return"e"===t.type[t.type.length-1]?e[1][0]-h/2:e[0][0]-h/2}).attr("y",function(t){return"s"===t.type[0]?e[1][1]-h/2:e[0][1]-h/2}).attr("width",function(t){return"n"===t.type||"s"===t.type?e[1][0]-e[0][0]+h:h}).attr("height",function(t){return"e"===t.type||"w"===t.type?e[1][1]-e[0][1]+h:h})):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function i(t,e){return t.__brush.emitter||new o(t,e)}function o(t,e){this.that=t,this.args=e,this.state=t.__brush,this.active=0}function u(){function n(){var t=rf(M);!V||w||E||(Math.abs(t[0]-I[0])>Math.abs(t[1]-I[1])?E=!0:w=!0),I=t,x=!0,Ed(),o()}function o(){var t;switch(_=I[0]-R[0],b=I[1]-R[1],C){case Fd:case Md:S&&(_=Math.max(k-f,Math.min(j-v,_)),h=f+_,m=v+_),A&&(b=Math.max(N-p,Math.min(P-y,b)),d=p+b,g=y+b);break;case Cd:S<0?(_=Math.max(k-f,Math.min(j-f,_)),h=f+_,m=v):S>0&&(_=Math.max(k-v,Math.min(j-v,_)),h=f,m=v+_),A<0?(b=Math.max(N-p,Math.min(P-p,b)),d=p+b,g=y):A>0&&(b=Math.max(N-y,Math.min(P-y,b)),d=p,g=y+b);break;case Sd:S&&(h=Math.max(k,Math.min(j,f-_*S)),m=Math.max(k,Math.min(j,v+_*S))),A&&(d=Math.max(N,Math.min(P,p-b*A)),g=Math.max(N,Math.min(P,y+b*A)))}m<h&&(S*=-1,t=f,f=v,v=t,t=h,h=m,m=t,F in kd&&B.attr("cursor",Dd[F=kd[F]])),g<d&&(A*=-1,t=p,p=y,y=t,t=d,d=g,g=t,F in Nd&&B.attr("cursor",Dd[F=Nd[F]])),O.selection&&(D=O.selection),w&&(h=D[0][0],m=D[1][0]),E&&(d=D[0][1],g=D[1][1]),D[0][0]===h&&D[0][1]===d&&D[1][0]===m&&D[1][1]===g||(O.selection=[[h,d],[m,g]],r.call(M),L.brush())}function u(){if(Sn(),t.event.touches){if(t.event.touches.length)return;s&&clearTimeout(s),s=setTimeout(function(){s=null},500),z.on("touchmove.brush touchend.brush touchcancel.brush",null)}else xt(t.event.view,x),q.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);z.attr("pointer-events","all"),B.attr("cursor",Dd.overlay),O.selection&&(D=O.selection),kn(D)&&(O.selection=null,r.call(M)),L.end()}function a(){switch(t.event.keyCode){case 16:V=S&&A;break;case 18:C===Cd&&(S&&(v=m-_*S,f=h+_*S),A&&(y=g-b*A,p=d+b*A),C=Sd,o());break;case 32:C!==Cd&&C!==Sd||(S<0?v=m-_:S>0&&(f=h-_),A<0?y=g-b:A>0&&(p=d-b),C=Fd,B.attr("cursor",Dd.selection),o());break;default:return}Ed()}function l(){switch(t.event.keyCode){case 16:V&&(w=E=V=!1,o());break;case 18:C===Sd&&(S<0?v=m:S>0&&(f=h),A<0?y=g:A>0&&(p=d),C=Cd,o());break;case 32:C===Fd&&(t.event.altKey?(S&&(v=m-_*S,f=h+_*S),A&&(y=g-b*A,p=d+b*A),C=Sd):(S<0?v=m:S>0&&(f=h),A<0?y=g:A>0&&(p=d),C=Cd),B.attr("cursor",Dd[F]),o());break;default:return}Ed()}if(t.event.touches){if(t.event.changedTouches.length<t.event.touches.length)return Ed()}else if(s)return;if(c.apply(this,arguments)){var f,h,p,d,v,m,y,g,_,b,x,w,E,M=this,F=t.event.target.__data__.type,C="selection"===(t.event.metaKey?F="overlay":F)?Md:t.event.altKey?Sd:Cd,S=e===Od?null:jd[F],A=e===Ad?null:Pd[F],O=Dn(M),T=O.extent,D=O.selection,k=T[0][0],N=T[0][1],j=T[1][0],P=T[1][1],V=S&&A&&t.event.shiftKey,R=rf(M),I=R,L=i(M,arguments).beforestart();"overlay"===F?O.selection=D=[[f=e===Od?k:R[0],p=e===Ad?N:R[1]],[v=e===Od?j:f,y=e===Ad?P:p]]:(f=D[0][0],p=D[0][1],v=D[1][0],y=D[1][1]),h=f,d=p,m=v,g=y;var z=zf(M).attr("pointer-events","none"),B=z.selectAll(".overlay").attr("cursor",Dd[F]);if(t.event.touches)z.on("touchmove.brush",n,!0).on("touchend.brush touchcancel.brush",u,!0);else{var q=zf(t.event.view).on("keydown.brush",a,!0).on("keyup.brush",l,!0).on("mousemove.brush",n,!0).on("mouseup.brush",u,!0);Hf(t.event.view)}Sn(),Cp(M),r.call(M),L.start()}}function a(){var t=this.__brush||{selection:null};return t.extent=l.apply(this,arguments),t.dim=e,t}var s,l=Tn,c=On,f=y(n,"start","brush","end"),h=6;return n.move=function(t,n){t.selection?t.on("start.brush",function(){i(this,arguments).beforestart().start()}).on("interrupt.brush end.brush",function(){i(this,arguments).end()}).tween("brush",function(){function t(t){u.selection=1===t&&kn(l)?null:c(t),r.call(o),a.brush()}var o=this,u=o.__brush,a=i(o,arguments),s=u.selection,l=e.input("function"==typeof n?n.apply(this,arguments):n,u.extent),c=Uh(s,l);return s&&l?t:t(1)}):t.each(function(){var t=this,o=arguments,u=t.__brush,a=e.input("function"==typeof n?n.apply(t,o):n,u.extent),s=i(t,o).beforestart();Cp(t),u.selection=null==a||kn(a)?null:a,r.call(t),s.start().brush().end()})},o.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting&&(this.starting=!1,this.emit("start")),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(t){D(new wd(n,t,e.output(this.state.selection)),f.apply,f,[t,this.that,this.args])}},n.extent=function(t){return arguments.length?(l="function"==typeof t?t:xd([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),n):l},n.filter=function(t){return arguments.length?(c="function"==typeof t?t:xd(!!t),n):c},n.handleSize=function(t){return arguments.length?(h=+t,n):h},n.on=function(){var t=f.on.apply(f,arguments);return t===f?n:t},n}function Rn(t){return function(e,n){return t(e.source.value+e.target.value,n.source.value+n.target.value)}}function In(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Ln(){return new In}function zn(t){return t.source}function Bn(t){return t.target}function qn(t){return t.radius}function Un(t){return t.startAngle}function Kn(t){return t.endAngle}function Hn(){}function Wn(t,e){var n=new Hn;if(t instanceof Hn)t.each(function(t,e){n.set(e,t)});else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==e)for(;++i<o;)n.set(i,t[i]);else for(;++i<o;)n.set(e(r=t[i],i,t),r)}else if(t)for(var u in t)n.set(u,t[u]);return n}function Yn(){return{}}function Xn(t,e,n){t[e]=n}function $n(){return Wn()}function Gn(t,e,n){t.set(e,n)}function Zn(){}function Jn(t,e){var n=new Zn;if(t instanceof Zn)t.each(function(t){n.add(t)});else if(t){var r=-1,i=t.length;if(null==e)for(;++r<i;)n.add(t[r]);else for(;++r<i;)n.add(e(t[r],r,t))}return n}function Qn(t){return new Function("d","return {"+t.map(function(t,e){return JSON.stringify(t)+": d["+e+"]"}).join(",")+"}")}function tr(t,e){var n=Qn(t);return function(r,i){return e(n(r),i,t)}}function er(t){var e=Object.create(null),n=[];return t.forEach(function(t){for(var r in t)r in e||n.push(e[r]=r)}),n}function nr(t,e,n,r){if(isNaN(e)||isNaN(n))return t;var i,o,u,a,s,l,c,f,h,p=t._root,d={data:r},v=t._x0,m=t._y0,y=t._x1,g=t._y1;if(!p)return t._root=d,t;for(;p.length;)if((l=e>=(o=(v+y)/2))?v=o:y=o,(c=n>=(u=(m+g)/2))?m=u:g=u,i=p,!(p=p[f=c<<1|l]))return i[f]=d,t;if(a=+t._x.call(null,p.data),s=+t._y.call(null,p.data),e===a&&n===s)return d.next=p,i?i[f]=d:t._root=d,t;do{i=i?i[f]=new Array(4):t._root=new Array(4),(l=e>=(o=(v+y)/2))?v=o:y=o,(c=n>=(u=(m+g)/2))?m=u:g=u}while((f=c<<1|l)==(h=(s>=u)<<1|a>=o));return i[h]=p,i[f]=d,t}function rr(t){var e,n,r,i,o=t.length,u=new Array(o),a=new Array(o),s=1/0,l=1/0,c=-1/0,f=-1/0;for(n=0;n<o;++n)isNaN(r=+this._x.call(null,e=t[n]))||isNaN(i=+this._y.call(null,e))||(u[n]=r,a[n]=i,r<s&&(s=r),r>c&&(c=r),i<l&&(l=i),i>f&&(f=i));for(c<s&&(s=this._x0,c=this._x1),f<l&&(l=this._y0,f=this._y1),this.cover(s,l).cover(c,f),n=0;n<o;++n)nr(this,u[n],a[n],t[n]);return this}function ir(t){for(var e=0,n=t.length;e<n;++e)this.remove(t[e]);return this}function or(t){return t[0]}function ur(t){return t[1]}function ar(t,e,n){var r=new sr(null==e?or:e,null==n?ur:n,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function sr(t,e,n,r,i,o){this._x=t,this._y=e,this._x0=n,this._y0=r,this._x1=i,this._y1=o,this._root=void 0}function lr(t){for(var e={data:t.data},n=e;t=t.next;)n=n.next={data:t.data};return e}function cr(t){return t.x+t.vx}function fr(t){return t.y+t.vy}function hr(t){return t.index}function pr(t,e){var n=t.get(e);if(!n)throw new Error("missing: "+e);return n}function dr(t){return t.x}function vr(t){return t.y}function mr(t){return new yr(t)}function yr(t){if(!(e=Wv.exec(t)))throw new Error("invalid format: "+t);var e,n=e[1]||" ",r=e[2]||">",i=e[3]||"-",o=e[4]||"",u=!!e[5],a=e[6]&&+e[6],s=!!e[7],l=e[8]&&+e[8].slice(1),c=e[9]||"";"n"===c?(s=!0,c="g"):Hv[c]||(c=""),(u||"0"===n&&"="===r)&&(u=!0,n="0",r="="),this.fill=n,this.align=r,this.sign=i,this.symbol=o,this.zero=u,this.width=a,this.comma=s,this.precision=l,this.type=c}function gr(e){return Yv=Gv(e),t.format=Yv.format,t.formatPrefix=Yv.formatPrefix,Yv}function _r(){this.reset()}function br(t,e,n){var r=t.s=e+n,i=r-e,o=r-i;t.t=e-o+(n-i)}function xr(t){return t>1?0:t<-1?jm:Math.acos(t)}function wr(t){return t>1?Pm:t<-1?-Pm:Math.asin(t)}function Er(t){return(t=Xm(t/2))*t}function Mr(){}function Fr(t,e){t&&Qm.hasOwnProperty(t.type)&&Qm[t.type](t,e)}function Cr(t,e,n){var r,i=-1,o=t.length-n;for(e.lineStart();++i<o;)r=t[i],e.point(r[0],r[1],r[2]);e.lineEnd()}function Sr(t,e){var n=-1,r=t.length;for(e.polygonStart();++n<r;)Cr(t[n],e,1);e.polygonEnd()}function Ar(){ry.point=Tr}function Or(){Dr(em,nm)}function Tr(t,e){ry.point=Dr,em=t,nm=e,t*=Lm,e*=Lm,rm=t,im=Um(e=e/2+Vm),om=Xm(e)}function Dr(t,e){t*=Lm,e*=Lm,e=e/2+Vm;var n=t-rm,r=n>=0?1:-1,i=r*n,o=Um(e),u=Xm(e),a=om*u,s=im*o+a*Um(i),l=a*r*Xm(i);ey.add(qm(l,s)),rm=t,im=o,om=u}function kr(t){return[qm(t[1],t[0]),wr(t[2])]}function Nr(t){var e=t[0],n=t[1],r=Um(n);return[r*Um(e),r*Xm(e),Xm(n)]}function jr(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function Pr(t,e){return[t[1]*e[2]-t[2]*e[1],t[2]*e[0]-t[0]*e[2],t[0]*e[1]-t[1]*e[0]]}function Vr(t,e){t[0]+=e[0],t[1]+=e[1],t[2]+=e[2]}function Rr(t,e){return[t[0]*e,t[1]*e,t[2]*e]}function Ir(t){var e=Gm(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=e,t[1]/=e,t[2]/=e}function Lr(t,e){dm.push(vm=[um=t,sm=t]),e<am&&(am=e),e>lm&&(lm=e)}function zr(t,e){var n=Nr([t*Lm,e*Lm]);if(pm){var r=Pr(pm,n),i=[r[1],-r[0],0],o=Pr(i,r);Ir(o),o=kr(o);var u,a=t-cm,s=a>0?1:-1,l=o[0]*Im*s,c=zm(a)>180;c^(s*cm<l&&l<s*t)?(u=o[1]*Im)>lm&&(lm=u):(l=(l+360)%360-180,c^(s*cm<l&&l<s*t)?(u=-o[1]*Im)<am&&(am=u):(e<am&&(am=e),e>lm&&(lm=e))),c?t<cm?Wr(um,t)>Wr(um,sm)&&(sm=t):Wr(t,sm)>Wr(um,sm)&&(um=t):sm>=um?(t<um&&(um=t),t>sm&&(sm=t)):t>cm?Wr(um,t)>Wr(um,sm)&&(sm=t):Wr(t,sm)>Wr(um,sm)&&(um=t)}else dm.push(vm=[um=t,sm=t]);e<am&&(am=e),e>lm&&(lm=e),pm=n,cm=t}function Br(){uy.point=zr}function qr(){vm[0]=um,vm[1]=sm,uy.point=Lr,pm=null}function Ur(t,e){if(pm){var n=t-cm;oy.add(zm(n)>180?n+(n>0?360:-360):n)}else fm=t,hm=e;ry.point(t,e),zr(t,e)}function Kr(){ry.lineStart()}function Hr(){Ur(fm,hm),ry.lineEnd(),zm(oy)>Nm&&(um=-(sm=180)),vm[0]=um,vm[1]=sm,pm=null}function Wr(t,e){return(e-=t)<0?e+360:e}function Yr(t,e){return t[0]-e[0]}function Xr(t,e){return t[0]<=t[1]?t[0]<=e&&e<=t[1]:e<t[0]||t[1]<e}function $r(t,e){t*=Lm,e*=Lm;var n=Um(e);Gr(n*Um(t),n*Xm(t),Xm(e))}function Gr(t,e,n){++mm,gm+=(t-gm)/mm,_m+=(e-_m)/mm,bm+=(n-bm)/mm}function Zr(){sy.point=Jr}function Jr(t,e){t*=Lm,e*=Lm;var n=Um(e);Om=n*Um(t),Tm=n*Xm(t),Dm=Xm(e),sy.point=Qr,Gr(Om,Tm,Dm)}function Qr(t,e){t*=Lm,e*=Lm;var n=Um(e),r=n*Um(t),i=n*Xm(t),o=Xm(e),u=qm(Gm((u=Tm*o-Dm*i)*u+(u=Dm*r-Om*o)*u+(u=Om*i-Tm*r)*u),Om*r+Tm*i+Dm*o);ym+=u,xm+=u*(Om+(Om=r)),wm+=u*(Tm+(Tm=i)),Em+=u*(Dm+(Dm=o)),Gr(Om,Tm,Dm)}function ti(){sy.point=$r}function ei(){sy.point=ri}function ni(){ii(Sm,Am),sy.point=$r}function ri(t,e){Sm=t,Am=e,t*=Lm,e*=Lm,sy.point=ii;var n=Um(e);Om=n*Um(t),Tm=n*Xm(t),Dm=Xm(e),Gr(Om,Tm,Dm)}function ii(t,e){t*=Lm,e*=Lm;var n=Um(e),r=n*Um(t),i=n*Xm(t),o=Xm(e),u=Tm*o-Dm*i,a=Dm*r-Om*o,s=Om*i-Tm*r,l=Gm(u*u+a*a+s*s),c=wr(l),f=l&&-c/l;Mm+=f*u,Fm+=f*a,Cm+=f*s,ym+=c,xm+=c*(Om+(Om=r)),wm+=c*(Tm+(Tm=i)),Em+=c*(Dm+(Dm=o)),Gr(Om,Tm,Dm)}function oi(t,e){return[t>jm?t-Rm:t<-jm?t+Rm:t,e]}function ui(t,e,n){return(t%=Rm)?e||n?fy(si(t),li(e,n)):si(t):e||n?li(e,n):oi}function ai(t){return function(e,n){return e+=t,[e>jm?e-Rm:e<-jm?e+Rm:e,n]}}function si(t){var e=ai(t);return e.invert=ai(-t),e}function li(t,e){function n(t,e){var n=Um(e),a=Um(t)*n,s=Xm(t)*n,l=Xm(e),c=l*r+a*i;return[qm(s*o-c*u,a*r-l*i),wr(c*o+s*u)]}var r=Um(t),i=Xm(t),o=Um(e),u=Xm(e);return n.invert=function(t,e){var n=Um(e),a=Um(t)*n,s=Xm(t)*n,l=Xm(e),c=l*o-s*u;return[qm(s*o+l*u,a*r+c*i),wr(c*r-a*i)]},n}function ci(t,e,n,r,i,o){if(n){var u=Um(e),a=Xm(e),s=r*n;null==i?(i=e+r*Rm,o=e-s/2):(i=fi(u,i),o=fi(u,o),(r>0?i<o:i>o)&&(i+=r*Rm));for(var l,c=i;r>0?c>o:c<o;c-=s)l=kr([u,-a*Um(c),-a*Xm(c)]),t.point(l[0],l[1])}}function fi(t,e){e=Nr(e),e[0]-=t,Ir(e);var n=xr(-e[1]);return((-e[2]<0?-n:n)+Rm-Nm)%Rm}function hi(t,e,n,r){this.x=t,this.z=e,this.o=n,this.e=r,this.v=!1,this.n=this.p=null}function pi(t){if(e=t.length){for(var e,n,r=0,i=t[0];++r<e;)i.n=n=t[r],n.p=i,i=n;i.n=n=t[0],n.p=i}}function di(t,e,n,r){function i(i,o){return t<=i&&i<=n&&e<=o&&o<=r}function o(i,o,a,l){var c=0,f=0;if(null==i||(c=u(i,a))!==(f=u(o,a))||s(i,o)<0^a>0)do{l.point(0===c||3===c?t:n,c>1?r:e)}while((c=(c+a+4)%4)!==f);else l.point(o[0],o[1])}function u(r,i){return zm(r[0]-t)<Nm?i>0?0:3:zm(r[0]-n)<Nm?i>0?2:1:zm(r[1]-e)<Nm?i>0?1:0:i>0?3:2}function a(t,e){return s(t.x,e.x)}function s(t,e){var n=u(t,1),r=u(e,1);return n!==r?n-r:0===n?e[1]-t[1]:1===n?t[0]-e[0]:2===n?t[1]-e[1]:e[0]-t[0]}return function(u){function s(t,e){i(t,e)&&C.point(t,e)}function l(){for(var e=0,n=0,i=m.length;n<i;++n)for(var o,u,a=m[n],s=1,l=a.length,c=a[0],f=c[0],h=c[1];s<l;++s)o=f,u=h,c=a[s],f=c[0],h=c[1],u<=r?h>r&&(f-o)*(r-u)>(h-u)*(t-o)&&++e:h<=r&&(f-o)*(r-u)<(h-u)*(t-o)&&--e;return e}function c(){C=S,v=[],m=[],F=!0}function f(){var t=l(),e=F&&t,n=(v=Ac(v)).length;(e||n)&&(u.polygonStart(),e&&(u.lineStart(),o(null,null,1,u),u.lineEnd()),n&&Ay(v,a,t,o,u),u.polygonEnd()),C=u,v=m=y=null}function h(){A.point=d,m&&m.push(y=[]),M=!0,E=!1,x=w=NaN}function p(){v&&(d(g,_),b&&E&&S.rejoin(),v.push(S.result())),A.point=s,E&&C.lineEnd()}function d(o,u){var a=i(o,u);if(m&&y.push([o,u]),M)g=o,_=u,b=a,M=!1,a&&(C.lineStart(),C.point(o,u));else if(a&&E)C.point(o,u);else{var s=[x=Math.max(Ty,Math.min(Oy,x)),w=Math.max(Ty,Math.min(Oy,w))],l=[o=Math.max(Ty,Math.min(Oy,o)),u=Math.max(Ty,Math.min(Oy,u))];Cy(s,l,t,e,n,r)?(E||(C.lineStart(),C.point(s[0],s[1])),C.point(l[0],l[1]),a||C.lineEnd(),F=!1):a&&(C.lineStart(),C.point(o,u),F=!1)}x=o,w=u,E=a}var v,m,y,g,_,b,x,w,E,M,F,C=u,S=Fy(),A={point:s,lineStart:h,lineEnd:p,polygonStart:c,polygonEnd:f};return A}}function vi(){Py.point=yi,Py.lineEnd=mi}function mi(){Py.point=Py.lineEnd=Mr}function yi(t,e){t*=Lm,e*=Lm,hy=t,py=Xm(e),dy=Um(e),Py.point=gi}function gi(t,e){t*=Lm,e*=Lm;var n=Xm(e),r=Um(e),i=zm(t-hy),o=Um(i),u=Xm(i),a=r*u,s=dy*n-py*r*o,l=py*n+dy*r*o;jy.add(qm(Gm(a*a+s*s),l)),hy=t,py=n,dy=r}function _i(t,e){return!(!t||!By.hasOwnProperty(t.type))&&By[t.type](t,e)}function bi(t,e){return 0===Ly(t,e)}function xi(t,e){var n=Ly(t[0],t[1]);return Ly(t[0],e)+Ly(e,t[1])<=n+Nm}function wi(t,e){return!!Ny(t.map(Ei),Mi(e))}function Ei(t){return t=t.map(Mi),t.pop(),t}function Mi(t){return[t[0]*Lm,t[1]*Lm]}function Fi(t,e,n){var r=vc(t,e-Nm,n).concat(e);return function(t){return r.map(function(e){return[t,e]})}}function Ci(t,e,n){var r=vc(t,e-Nm,n).concat(e);return function(t){return r.map(function(e){return[e,t]})}}function Si(){function t(){return{type:"MultiLineString",coordinates:e()}}function e(){return vc(Km(o/m)*m,i,m).map(h).concat(vc(Km(l/y)*y,s,y).map(p)).concat(vc(Km(r/d)*d,n,d).filter(function(t){return zm(t%m)>Nm}).map(c)).concat(vc(Km(a/v)*v,u,v).filter(function(t){return zm(t%y)>Nm}).map(f))}var n,r,i,o,u,a,s,l,c,f,h,p,d=10,v=d,m=90,y=360,g=2.5;return t.lines=function(){return e().map(function(t){return{type:"LineString",coordinates:t}})},t.outline=function(){return{type:"Polygon",coordinates:[h(o).concat(p(s).slice(1),h(i).reverse().slice(1),p(l).reverse().slice(1))]}},t.extent=function(e){return arguments.length?t.extentMajor(e).extentMinor(e):t.extentMinor()},t.extentMajor=function(e){return arguments.length?(o=+e[0][0],i=+e[1][0],l=+e[0][1],s=+e[1][1],o>i&&(e=o,o=i,i=e),l>s&&(e=l,l=s,s=e),t.precision(g)):[[o,l],[i,s]]},t.extentMinor=function(e){return arguments.length?(r=+e[0][0],n=+e[1][0],a=+e[0][1],u=+e[1][1],r>n&&(e=r,r=n,n=e),a>u&&(e=a,a=u,u=e),t.precision(g)):[[r,a],[n,u]]},t.step=function(e){return arguments.length?t.stepMajor(e).stepMinor(e):t.stepMinor()},t.stepMajor=function(e){return arguments.length?(m=+e[0],y=+e[1],t):[m,y]},t.stepMinor=function(e){return arguments.length?(d=+e[0],v=+e[1],t):[d,v]},t.precision=function(e){return arguments.length?(g=+e,c=Fi(a,u,90),f=Ci(r,n,g),h=Fi(l,s,90),p=Ci(o,i,g),t):g},t.extentMajor([[-180,-90+Nm],[180,90-Nm]]).extentMinor([[-180,-80-Nm],[180,80+Nm]])}function Ai(){return Si()()}function Oi(){Yy.point=Ti}function Ti(t,e){Yy.point=Di,vy=yy=t,my=gy=e}function Di(t,e){Wy.add(gy*t-yy*e),yy=t,gy=e}function ki(){Di(vy,my)}function Ni(t,e){t<Xy&&(Xy=t),t>Gy&&(Gy=t),e<$y&&($y=e),e>Zy&&(Zy=e)}function ji(t,e){Qy+=t,tg+=e,++eg}function Pi(){sg.point=Vi}function Vi(t,e){sg.point=Ri,ji(xy=t,wy=e)}function Ri(t,e){var n=t-xy,r=e-wy,i=Gm(n*n+r*r);ng+=i*(xy+t)/2,rg+=i*(wy+e)/2,ig+=i,ji(xy=t,wy=e)}function Ii(){sg.point=ji}function Li(){sg.point=Bi}function zi(){qi(_y,by)}function Bi(t,e){sg.point=qi,ji(_y=xy=t,by=wy=e)}function qi(t,e){var n=t-xy,r=e-wy,i=Gm(n*n+r*r);ng+=i*(xy+t)/2,rg+=i*(wy+e)/2,ig+=i,i=wy*t-xy*e,og+=i*(xy+t),ug+=i*(wy+e),ag+=3*i,ji(xy=t,wy=e)}function Ui(t){this._context=t}function Ki(t,e){vg.point=Hi,cg=hg=t,fg=pg=e}function Hi(t,e){hg-=t,pg-=e,dg.add(Gm(hg*hg+pg*pg)),hg=t,pg=e}function Wi(){this._string=[]}function Yi(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}function Xi(t){return t.length>1}function $i(t,e){return((t=t.x)[0]<0?t[1]-Pm-Nm:Pm-t[1])-((e=e.x)[0]<0?e[1]-Pm-Nm:Pm-e[1])}function Gi(t){var e,n=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),e=1},point:function(o,u){var a=o>0?jm:-jm,s=zm(o-n);zm(s-jm)<Nm?(t.point(n,r=(r+u)/2>0?Pm:-Pm),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(a,r),t.point(o,r),e=0):i!==a&&s>=jm&&(zm(n-i)<Nm&&(n-=i*Nm),zm(o-a)<Nm&&(o-=a*Nm),r=Zi(n,r,o,u),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(a,r),e=0),t.point(n=o,r=u),i=a},lineEnd:function(){t.lineEnd(),n=r=NaN},clean:function(){return 2-e}}}function Zi(t,e,n,r){var i,o,u=Xm(t-n);return zm(u)>Nm?Bm((Xm(e)*(o=Um(r))*Xm(n)-Xm(r)*(i=Um(e))*Xm(t))/(i*o*u)):(e+r)/2}function Ji(t,e,n,r){var i;if(null==t)i=n*Pm,r.point(-jm,i),r.point(0,i),r.point(jm,i),r.point(jm,0),r.point(jm,-i),r.point(0,-i),r.point(-jm,-i),r.point(-jm,0),r.point(-jm,i);else if(zm(t[0]-e[0])>Nm){var o=t[0]<e[0]?jm:-jm;i=n*o/2,r.point(-o,i),r.point(0,i),r.point(o,i)}else r.point(e[0],e[1])}function Qi(t){return function(e){var n=new to;for(var r in t)n[r]=t[r];return n.stream=e,n}}function to(){}function eo(t,e,n){var r=e[1][0]-e[0][0],i=e[1][1]-e[0][1],o=t.clipExtent&&t.clipExtent();t.scale(150).translate([0,0]),null!=o&&t.clipExtent(null),ty(n,t.stream(Jy));var u=Jy.result(),a=Math.min(r/(u[1][0]-u[0][0]),i/(u[1][1]-u[0][1])),s=+e[0][0]+(r-a*(u[1][0]+u[0][0]))/2,l=+e[0][1]+(i-a*(u[1][1]+u[0][1]))/2;return null!=o&&t.clipExtent(o),t.scale(150*a).translate([s,l])}function no(t,e,n){return eo(t,[[0,0],e],n)}function ro(t){return Qi({point:function(e,n){e=t(e,n),this.stream.point(e[0],e[1])}})}function io(t,e){function n(r,i,o,u,a,s,l,c,f,h,p,d,v,m){var y=l-r,g=c-i,_=y*y+g*g;if(_>4*e&&v--){var b=u+h,x=a+p,w=s+d,E=Gm(b*b+x*x+w*w),M=wr(w/=E),F=zm(zm(w)-1)<Nm||zm(o-f)<Nm?(o+f)/2:qm(x,b),C=t(F,M),S=C[0],A=C[1],O=S-r,T=A-i,D=g*O-y*T;(D*D/_>e||zm((y*O+g*T)/_-.5)>.3||u*h+a*p+s*d<wg)&&(n(r,i,o,u,a,s,S,A,F,b/=E,x/=E,w,v,m),m.point(S,A),n(S,A,F,b,x,w,l,c,f,h,p,d,v,m))}}return function(e){function r(n,r){n=t(n,r),e.point(n[0],n[1])}function i(){y=NaN,w.point=o,e.lineStart()}function o(r,i){var o=Nr([r,i]),u=t(r,i);n(y,g,m,_,b,x,y=u[0],g=u[1],m=r,_=o[0],b=o[1],x=o[2],xg,e),e.point(y,g)}function u(){w.point=r,e.lineEnd()}function a(){i(),w.point=s,w.lineEnd=l}function s(t,e){o(c=t,e),f=y,h=g,p=_,d=b,v=x,w.point=o}function l(){n(y,g,m,_,b,x,f,h,c,p,d,v,xg,e),w.lineEnd=u,u()}var c,f,h,p,d,v,m,y,g,_,b,x,w={point:r,lineStart:i,lineEnd:u,polygonStart:function(){e.polygonStart(),w.lineStart=a},polygonEnd:function(){e.polygonEnd(),w.lineStart=i}};return w}}function oo(t){return uo(function(){return t})()}function uo(t){function e(t){return t=c(t[0]*Lm,t[1]*Lm),[t[0]*m+a,s-t[1]*m]}function n(t){return(t=c.invert((t[0]-a)/m,(s-t[1])/m))&&[t[0]*Im,t[1]*Im]}function r(t,e){return t=u(t,e),[t[0]*m+a,s-t[1]*m]}function i(){c=fy(l=ui(x,w,E),u);var t=u(_,b);return a=y-t[0]*m,s=g+t[1]*m,o()}function o(){return d=v=null,e}var u,a,s,l,c,f,h,p,d,v,m=150,y=480,g=250,_=0,b=0,x=0,w=0,E=0,M=null,F=gg,C=null,S=Ky,A=.5,O=Eg(r,A);return e.stream=function(t){return d&&v===t?d:d=Mg(F(l,O(S(v=t))))},e.clipAngle=function(t){return arguments.length?(F=+t?_g(M=t*Lm,6*Lm):(M=null,gg),o()):M*Im},e.clipExtent=function(t){return arguments.length?(S=null==t?(C=f=h=p=null,Ky):di(C=+t[0][0],f=+t[0][1],h=+t[1][0],p=+t[1][1]),o()):null==C?null:[[C,f],[h,p]]},e.scale=function(t){return arguments.length?(m=+t,i()):m},e.translate=function(t){return arguments.length?(y=+t[0],g=+t[1],i()):[y,g]},e.center=function(t){return arguments.length?(_=t[0]%360*Lm,b=t[1]%360*Lm,i()):[_*Im,b*Im]},e.rotate=function(t){return arguments.length?(x=t[0]%360*Lm,w=t[1]%360*Lm,E=t.length>2?t[2]%360*Lm:0,i()):[x*Im,w*Im,E*Im]},e.precision=function(t){return arguments.length?(O=Eg(r,A=t*t),o()):Gm(A)},e.fitExtent=function(t,n){return eo(e,t,n)},e.fitSize=function(t,n){return no(e,t,n)},function(){return u=t.apply(this,arguments),e.invert=u.invert&&n,i()}}function ao(t){var e=0,n=jm/3,r=uo(t),i=r(e,n);return i.parallels=function(t){return arguments.length?r(e=t[0]*Lm,n=t[1]*Lm):[e*Im,n*Im]},i}function so(t){function e(t,e){return[t*n,Xm(e)/n]}var n=Um(t);return e.invert=function(t,e){return[t/n,wr(e*n)]},e}function lo(t,e){function n(t,e){var n=Gm(o-2*i*Xm(e))/i;return[n*Xm(t*=i),u-n*Um(t)]}var r=Xm(t),i=(r+Xm(e))/2;if(zm(i)<Nm)return so(t);var o=1+r*(2*i-r),u=Gm(o)/i;return n.invert=function(t,e){var n=u-e;return[qm(t,zm(n))/i*$m(n),wr((o-(t*t+n*n)*i*i)/(2*i))]},n}function co(t){var e=t.length;return{point:function(n,r){for(var i=-1;++i<e;)t[i].point(n,r)},sphere:function(){for(var n=-1;++n<e;)t[n].sphere()},lineStart:function(){for(var n=-1;++n<e;)t[n].lineStart()},lineEnd:function(){for(var n=-1;++n<e;)t[n].lineEnd()},polygonStart:function(){for(var n=-1;++n<e;)t[n].polygonStart()},polygonEnd:function(){for(var n=-1;++n<e;)t[n].polygonEnd()}}}function fo(t){return function(e,n){var r=Um(e),i=Um(n),o=t(r*i);return[o*i*Xm(e),o*Xm(n)]}}function ho(t){return function(e,n){var r=Gm(e*e+n*n),i=t(r),o=Xm(i),u=Um(i);return[qm(e*o,r*u),wr(r&&n*o/r)]}}function po(t,e){return[t,Wm(Zm((Pm+e)/2))]}function vo(t){function e(){var e=jm*a(),u=o(Ey(o.rotate()).invert([0,0]));return l(null==c?[[u[0]-e,u[1]-e],[u[0]+e,u[1]+e]]:t===po?[[Math.max(u[0]-e,c),n],[Math.min(u[0]+e,r),i]]:[[c,Math.max(u[1]-e,n)],[r,Math.min(u[1]+e,i)]])}var n,r,i,o=oo(t),u=o.center,a=o.scale,s=o.translate,l=o.clipExtent,c=null;return o.scale=function(t){return arguments.length?(a(t),e()):a()},o.translate=function(t){return arguments.length?(s(t),e()):s()},o.center=function(t){return arguments.length?(u(t),e()):u()},o.clipExtent=function(t){return arguments.length?(null==t?c=n=r=i=null:(c=+t[0][0],n=+t[0][1],r=+t[1][0],i=+t[1][1]),e()):null==c?null:[[c,n],[r,i]]},e()}function mo(t){return Zm((Pm+t)/2)}function yo(t,e){function n(t,e){o>0?e<-Pm+Nm&&(e=-Pm+Nm):e>Pm-Nm&&(e=Pm-Nm);var n=o/Ym(mo(e),i);return[n*Xm(i*t),o-n*Um(i*t)]}var r=Um(t),i=t===e?Xm(t):Wm(r/Um(e))/Wm(mo(e)/mo(t)),o=r*Ym(mo(t),i)/i;return i?(n.invert=function(t,e){var n=o-e,r=$m(i)*Gm(t*t+n*n);return[qm(t,zm(n))/i*$m(n),2*Bm(Ym(o/r,1/i))-Pm]},n):po}function go(t,e){return[t,e]}function _o(t,e){function n(t,e){var n=o-e,r=i*t;return[n*Xm(r),o-n*Um(r)]}var r=Um(t),i=t===e?Xm(t):(r-Um(e))/(e-t),o=r/i+t;return zm(i)<Nm?go:(n.invert=function(t,e){var n=o-e;return[qm(t,zm(n))/i*$m(n),o-$m(i)*Gm(t*t+n*n)]},n)}function bo(t,e){var n=Um(e),r=Um(t)*n;return[n*Xm(t)/r,Xm(e)/r]}function xo(t,e,n,r){return 1===t&&1===e&&0===n&&0===r?Ky:Qi({point:function(i,o){this.stream.point(i*t+n,o*e+r)}})}function wo(t,e){return[Um(e)*Xm(t),Xm(e)]}function Eo(t,e){var n=Um(e),r=1+Um(t)*n;return[n*Xm(t)/r,Xm(e)/r]}function Mo(t,e){return[Wm(Zm((Pm+e)/2)),-t]}function Fo(t,e){return t.parent===e.parent?1:2}function Co(t){return t.reduce(So,0)/t.length}function So(t,e){return t+e.x}function Ao(t){return 1+t.reduce(Oo,0)}function Oo(t,e){return Math.max(t,e.y)}function To(t){for(var e;e=t.children;)t=e[0];return t}function Do(t){for(var e;e=t.children;)t=e[e.length-1];return t}function ko(t){var e=0,n=t.children,r=n&&n.length;if(r)for(;--r>=0;)e+=n[r].value;else e=1;t.value=e}function No(t,e){if(t===e)return t;var n=t.ancestors(),r=e.ancestors(),i=null;for(t=n.pop(),e=r.pop();t===e;)i=t,t=n.pop(),e=r.pop();return i}function jo(t,e){var n,r,i,o,u,a=new Lo(t),s=+t.value&&(a.value=t.value),l=[a];for(null==e&&(e=Vo);n=l.pop();)if(s&&(n.value=+n.data.value),(i=e(n.data))&&(u=i.length))for(n.children=new Array(u),o=u-1;o>=0;--o)l.push(r=n.children[o]=new Lo(i[o])),r.parent=n,r.depth=n.depth+1;return a.eachBefore(Io)}function Po(){return jo(this).eachBefore(Ro)}function Vo(t){return t.children}function Ro(t){t.data=t.data.data}function Io(t){var e=0;do{t.height=e}while((t=t.parent)&&t.height<++e)}function Lo(t){this.data=t,this.depth=this.height=0,this.parent=null}function zo(t){for(var e,n,r=t.length;r;)n=Math.random()*r--|0,e=t[r],t[r]=t[n],t[n]=e;return t}function Bo(t,e){var n,r;if(Ko(e,t))return[e];for(n=0;n<t.length;++n)if(qo(e,t[n])&&Ko(Yo(t[n],e),t))return[t[n],e];for(n=0;n<t.length-1;++n)for(r=n+1;r<t.length;++r)if(qo(Yo(t[n],t[r]),e)&&qo(Yo(t[n],e),t[r])&&qo(Yo(t[r],e),t[n])&&Ko(Xo(t[n],t[r],e),t))return[t[n],t[r],e];throw new Error}function qo(t,e){var n=t.r-e.r,r=e.x-t.x,i=e.y-t.y;return n<0||n*n<r*r+i*i}function Uo(t,e){var n=t.r-e.r+1e-6,r=e.x-t.x,i=e.y-t.y;return n>0&&n*n>r*r+i*i}function Ko(t,e){for(var n=0;n<e.length;++n)if(!Uo(t,e[n]))return!1;return!0}function Ho(t){switch(t.length){case 1:return Wo(t[0]);case 2:return Yo(t[0],t[1]);case 3:return Xo(t[0],t[1],t[2])}}function Wo(t){return{x:t.x,y:t.y,r:t.r}}function Yo(t,e){var n=t.x,r=t.y,i=t.r,o=e.x,u=e.y,a=e.r,s=o-n,l=u-r,c=a-i,f=Math.sqrt(s*s+l*l);return{x:(n+o+s/f*c)/2,y:(r+u+l/f*c)/2,r:(f+i+a)/2}}function Xo(t,e,n){var r=t.x,i=t.y,o=t.r,u=e.x,a=e.y,s=e.r,l=n.x,c=n.y,f=n.r,h=r-u,p=r-l,d=i-a,v=i-c,m=s-o,y=f-o,g=r*r+i*i-o*o,_=g-u*u-a*a+s*s,b=g-l*l-c*c+f*f,x=p*d-h*v,w=(d*b-v*_)/(2*x)-r,E=(v*m-d*y)/x,M=(p*_-h*b)/(2*x)-i,F=(h*y-p*m)/x,C=E*E+F*F-1,S=2*(o+w*E+M*F),A=w*w+M*M-o*o,O=-(C?(S+Math.sqrt(S*S-4*C*A))/(2*C):A/S);return{x:r+w+E*O,y:i+M+F*O,r:O}}function $o(t,e,n){var r=t.x,i=t.y,o=e.r+n.r,u=t.r+n.r,a=e.x-r,s=e.y-i,l=a*a+s*s;if(l){var c=.5+((u*=u)-(o*=o))/(2*l),f=Math.sqrt(Math.max(0,2*o*(u+l)-(u-=l)*u-o*o))/(2*l);n.x=r+c*a+f*s,n.y=i+c*s-f*a}else n.x=r+u,n.y=i}function Go(t,e){var n=e.x-t.x,r=e.y-t.y,i=t.r+e.r;return i*i-1e-6>n*n+r*r}function Zo(t){var e=t._,n=t.next._,r=e.r+n.r,i=(e.x*n.r+n.x*e.r)/r,o=(e.y*n.r+n.y*e.r)/r;return i*i+o*o}function Jo(t){this._=t,this.next=null,this.previous=null}function Qo(t){if(!(i=t.length))return 0;var e,n,r,i,o,u,a,s,l,c,f;if(e=t[0],e.x=0,e.y=0,!(i>1))return e.r;if(n=t[1],e.x=-n.r,n.x=e.r,n.y=0,!(i>2))return e.r+n.r;$o(n,e,r=t[2]),e=new Jo(e),n=new Jo(n),r=new Jo(r),e.next=r.previous=n,n.next=e.previous=r,r.next=n.previous=e;t:for(a=3;a<i;++a){$o(e._,n._,r=t[a]),r=new Jo(r),s=n.next,l=e.previous,c=n._.r,f=e._.r;do{if(c<=f){if(Go(s._,r._)){n=s,e.next=n,n.previous=e,--a;continue t}c+=s._.r,s=s.next}else{if(Go(l._,r._)){e=l,e.next=n,n.previous=e,--a;continue t}f+=l._.r,l=l.previous}}while(s!==l.next);for(r.previous=e,r.next=n,e.next=n.previous=n=r,o=Zo(e);(r=r.next)!==n;)(u=Zo(r))<o&&(e=r,o=u);n=e.next}for(e=[n._],r=n;(r=r.next)!==n;)e.push(r._);for(r=t_(e),a=0;a<i;++a)e=t[a],e.x-=r.x,e.y-=r.y;return r.r}function tu(t){return null==t?null:eu(t)}function eu(t){if("function"!=typeof t)throw new Error;return t}function nu(){return 0}function ru(t){return Math.sqrt(t.value)}function iu(t){return function(e){e.children||(e.r=Math.max(0,+t(e)||0))}}function ou(t,e){return function(n){if(r=n.children){var r,i,o,u=r.length,a=t(n)*e||0;if(a)for(i=0;i<u;++i)r[i].r+=a;if(o=Qo(r),a)for(i=0;i<u;++i)r[i].r-=a;n.r=o+a}}}function uu(t){return function(e){var n=e.parent;e.r*=t,n&&(e.x=n.x+t*e.x,e.y=n.y+t*e.y)}}function au(t){return t.id}function su(t){return t.parentId}function lu(t,e){return t.parent===e.parent?1:2}function cu(t){var e=t.children;return e?e[0]:t.t}function fu(t){var e=t.children;return e?e[e.length-1]:t.t}function hu(t,e,n){var r=n/(e.i-t.i);e.c-=r,e.s+=n,t.c+=r,e.z+=n,e.m+=n}function pu(t){for(var e,n=0,r=0,i=t.children,o=i.length;--o>=0;)e=i[o],e.z+=n,e.m+=n,n+=e.s+(r+=e.c)}function du(t,e,n){return t.a.parent===e.parent?t.a:n}function vu(t,e){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=e}function mu(t){for(var e,n,r,i,o,u=new vu(t,0),a=[u];e=a.pop();)if(r=e._.children)for(e.children=new Array(o=r.length),i=o-1;i>=0;--i)a.push(n=e.children[i]=new vu(r[i],i)),n.parent=e;return(u.parent=new vu(null,0)).children=[u],u}function yu(t,e,n,r,i,o){for(var u,a,s,l,c,f,h,p,d,v,m,y=[],g=e.children,_=0,b=0,x=g.length,w=e.value;_<x;){s=i-n,l=o-r;do{c=g[b++].value}while(!c&&b<x);for(f=h=c,v=Math.max(l/s,s/l)/(w*t),m=c*c*v,d=Math.max(h/m,m/f);b<x;++b){if(c+=a=g[b].value,a<f&&(f=a),a>h&&(h=a),m=c*c*v,(p=Math.max(h/m,m/f))>d){c-=a;break}d=p}y.push(u={value:c,dice:s<l,children:g.slice(_,b)}),u.dice?o_(u,n,r,i,w?r+=l*c/w:o):h_(u,n,r,w?n+=s*c/w:i,o),w-=c,_=b}return y}function gu(t,e){return t[0]-e[0]||t[1]-e[1]}function _u(t){for(var e=t.length,n=[0,1],r=2,i=2;i<e;++i){for(;r>1&&x_(t[n[r-2]],t[n[r-1]],t[i])<=0;)--r;n[r++]=i}return n.slice(0,r)}function bu(t){this._size=t,this._call=this._error=null,this._tasks=[],this._data=[],this._waiting=this._active=this._ended=this._start=0}function xu(t){if(!t._start)try{wu(t)}catch(e){if(t._tasks[t._ended+t._active-1])Mu(t,e);else if(!t._data)throw e}}function wu(t){for(;t._start=t._waiting&&t._active<t._size;){var e=t._ended+t._active,n=t._tasks[e],r=n.length-1,i=n[r];n[r]=Eu(t,e),--t._waiting,++t._active,n=i.apply(null,n),t._tasks[e]&&(t._tasks[e]=n||C_)}}function Eu(t,e){return function(n,r){t._tasks[e]&&(--t._active,++t._ended,t._tasks[e]=null,null==t._error&&(null!=n?Mu(t,n):(t._data[e]=r,t._waiting?xu(t):Fu(t))))}}function Mu(t,e){var n,r=t._tasks.length;for(t._error=e,t._data=void 0,t._waiting=NaN;--r>=0;)if((n=t._tasks[r])&&(t._tasks[r]=null,n.abort))try{n.abort()}catch(e){}t._active=NaN,Fu(t)}function Fu(t){if(!t._active&&t._call){var e=t._data;t._data=void 0,t._call(t._error,e)}}function Cu(t){if(null==t)t=1/0;else if(!((t=+t)>=1))throw new Error("invalid concurrency");return new bu(t)}function Su(t){return function(e,n){t(null==e?n:null)}}function Au(t){var e=t.responseType;return e&&"text"!==e?t.response:t.responseText}function Ou(t,e){return function(n){return t(n.responseText,e)}}function Tu(t){function e(e){var o=e+"",u=n.get(o);if(!u){if(i!==W_)return i;n.set(o,u=r.push(e))}return t[(u-1)%t.length]}var n=Wn(),r=[],i=W_;return t=null==t?[]:H_.call(t),e.domain=function(t){if(!arguments.length)return r.slice();r=[],n=Wn();for(var i,o,u=-1,a=t.length;++u<a;)n.has(o=(i=t[u])+"")||n.set(o,r.push(i));return e},e.range=function(n){return arguments.length?(t=H_.call(n),e):t.slice()},e.unknown=function(t){return arguments.length?(i=t,e):i},e.copy=function(){return Tu().domain(r).range(t).unknown(i)},e}function Du(){function t(){var t=i().length,r=u[1]<u[0],f=u[r-0],h=u[1-r];e=(h-f)/Math.max(1,t-s+2*l),a&&(e=Math.floor(e)),f+=(h-f-e*(t-s))*c,n=e*(1-s),a&&(f=Math.round(f),n=Math.round(n));var p=vc(t).map(function(t){return f+e*t});return o(r?p.reverse():p)}var e,n,r=Tu().unknown(void 0),i=r.domain,o=r.range,u=[0,1],a=!1,s=0,l=0,c=.5;return delete r.unknown,r.domain=function(e){return arguments.length?(i(e),t()):i()},r.range=function(e){return arguments.length?(u=[+e[0],+e[1]],t()):u.slice()},r.rangeRound=function(e){return u=[+e[0],+e[1]],a=!0,t()},r.bandwidth=function(){return n},r.step=function(){return e},r.round=function(e){return arguments.length?(a=!!e,t()):a},r.padding=function(e){return arguments.length?(s=l=Math.max(0,Math.min(1,e)),t()):s},r.paddingInner=function(e){return arguments.length?(s=Math.max(0,Math.min(1,e)),t()):s},r.paddingOuter=function(e){return arguments.length?(l=Math.max(0,Math.min(1,e)),t()):l},r.align=function(e){return arguments.length?(c=Math.max(0,Math.min(1,e)),t()):c},r.copy=function(){return Du().domain(i()).range(u).round(a).paddingInner(s).paddingOuter(l).align(c)},t()}function ku(t){var e=t.copy;return t.padding=t.paddingOuter,delete t.paddingInner,delete t.paddingOuter,t.copy=function(){return ku(e())},t}function Nu(){return ku(Du().paddingInner(1))}function ju(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:Y_(e)}function Pu(t){return function(e,n){var r=t(e=+e,n=+n);return function(t){return t<=e?0:t>=n?1:r(t)}}}function Vu(t){return function(e,n){var r=t(e=+e,n=+n);return function(t){return t<=0?e:t>=1?n:r(t)}}}function Ru(t,e,n,r){var i=t[0],o=t[1],u=e[0],a=e[1];return o<i?(i=n(o,i),u=r(a,u)):(i=n(i,o),u=r(u,a)),function(t){return u(i(t))}}function Iu(t,e,n,r){var i=Math.min(t.length,e.length)-1,o=new Array(i),u=new Array(i),a=-1;for(t[i]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++a<i;)o[a]=n(t[a],t[a+1]),u[a]=r(e[a],e[a+1]);return function(e){var n=ec(t,e,1,i)-1;return u[n](o[n](e))}}function Lu(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp())}function zu(t,e){function n(){return i=Math.min(a.length,s.length)>2?Iu:Ru,o=u=null,r}function r(e){return(o||(o=i(a,s,c?Pu(t):t,l)))(+e)}var i,o,u,a=$_,s=$_,l=Uh,c=!1;return r.invert=function(t){return(u||(u=i(s,a,ju,c?Vu(e):e)))(+t)},r.domain=function(t){return arguments.length?(a=K_.call(t,X_),n()):a.slice()},r.range=function(t){return arguments.length?(s=H_.call(t),n()):s.slice()},r.rangeRound=function(t){return s=H_.call(t),l=Kh,n()},r.clamp=function(t){return arguments.length?(c=!!t,n()):c},r.interpolate=function(t){return arguments.length?(l=t,n()):l},n()}function Bu(t){var e=t.domain;return t.ticks=function(t){var n=e();return _c(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){return G_(e(),t,n)},t.nice=function(n){null==n&&(n=10);var i,o=e(),u=0,a=o.length-1,s=o[u],l=o[a];return l<s&&(i=s,s=l,l=i,i=u,u=a,a=i),i=r(s,l,n),i>0?(s=Math.floor(s/i)*i,l=Math.ceil(l/i)*i,i=r(s,l,n)):i<0&&(s=Math.ceil(s*i)/i,l=Math.floor(l*i)/i,i=r(s,l,n)),i>0?(o[u]=Math.floor(s/i)*i,o[a]=Math.ceil(l/i)*i,e(o)):i<0&&(o[u]=Math.ceil(s*i)/i,o[a]=Math.floor(l*i)/i,e(o)),t},t}function qu(){var t=zu(ju,Ih);return t.copy=function(){return Lu(t,qu())},Bu(t)}function Uu(){function t(t){return+t}var e=[0,1];return t.invert=t,t.domain=t.range=function(n){return arguments.length?(e=K_.call(n,X_),t):e.slice()},t.copy=function(){return Uu().domain(e)},Bu(t)}function Ku(t,e){return(e=Math.log(e/t))?function(n){return Math.log(n/t)/e}:Y_(e)}function Hu(t,e){return t<0?function(n){return-Math.pow(-e,n)*Math.pow(-t,1-n)}:function(n){return Math.pow(e,n)*Math.pow(t,1-n)}}function Wu(t){return isFinite(t)?+("1e"+t):t<0?0:t}function Yu(t){return 10===t?Wu:t===Math.E?Math.exp:function(e){return Math.pow(t,e)}}function Xu(t){return t===Math.E?Math.log:10===t&&Math.log10||2===t&&Math.log2||(t=Math.log(t),function(e){return Math.log(e)/t})}function $u(t){return function(e){return-t(-e)}}function Gu(){function e(){return o=Xu(i),u=Yu(i),r()[0]<0&&(o=$u(o),u=$u(u)),n}var n=zu(Ku,Hu).domain([1,10]),r=n.domain,i=10,o=Xu(10),u=Yu(10);return n.base=function(t){return arguments.length?(i=+t,e()):i},n.domain=function(t){return arguments.length?(r(t),e()):r()},n.ticks=function(t){var e,n=r(),a=n[0],s=n[n.length-1];(e=s<a)&&(h=a,a=s,s=h);var l,c,f,h=o(a),p=o(s),d=null==t?10:+t,v=[];if(!(i%1)&&p-h<d){if(h=Math.round(h)-1,p=Math.round(p)+1,a>0){for(;h<p;++h)for(c=1,l=u(h);c<i;++c)if(!((f=l*c)<a)){if(f>s)break;v.push(f)}}else for(;h<p;++h)for(c=i-1,l=u(h);c>=1;--c)if(!((f=l*c)<a)){if(f>s)break;v.push(f)}}else v=_c(h,p,Math.min(p-h,d)).map(u);return e?v.reverse():v},n.tickFormat=function(e,r){if(null==r&&(r=10===i?".0e":","),"function"!=typeof r&&(r=t.format(r)),e===1/0)return r;null==e&&(e=10);var a=Math.max(1,i*e/n.ticks().length);return function(t){var e=t/u(Math.round(o(t)));return e*i<i-.5&&(e*=i),e<=a?r(t):""}},n.nice=function(){return r(Z_(r(),{floor:function(t){return u(Math.floor(o(t)))},ceil:function(t){return u(Math.ceil(o(t)))}}))},n.copy=function(){return Lu(n,Gu().base(i))},n}function Zu(t,e){return t<0?-Math.pow(-t,e):Math.pow(t,e)}function Ju(){function t(t,e){return(e=Zu(e,n)-(t=Zu(t,n)))?function(r){return(Zu(r,n)-t)/e}:Y_(e)}function e(t,e){return e=Zu(e,n)-(t=Zu(t,n)),function(r){return Zu(t+e*r,1/n)}}var n=1,r=zu(t,e),i=r.domain;return r.exponent=function(t){return arguments.length?(n=+t,i(i())):n},r.copy=function(){return Lu(r,Ju().exponent(n))},Bu(r)}function Qu(){return Ju().exponent(.5)}function ta(){function t(){var t=0,o=Math.max(1,r.length);for(i=new Array(o-1);++t<o;)i[t-1]=wc(n,t/o);return e}function e(t){if(!isNaN(t=+t))return r[ec(i,t)]}var n=[],r=[],i=[];return e.invertExtent=function(t){var e=r.indexOf(t);return e<0?[NaN,NaN]:[e>0?i[e-1]:n[0],e<i.length?i[e]:n[n.length-1]]},e.domain=function(e){if(!arguments.length)return n.slice();n=[];for(var r,i=0,o=e.length;i<o;++i)null==(r=e[i])||isNaN(r=+r)||n.push(r);return n.sort(Jl),t()},e.range=function(e){return arguments.length?(r=H_.call(e),t()):r.slice()},e.quantiles=function(){return i.slice()},e.copy=function(){return ta().domain(n).range(r)},e}function ea(){function t(t){if(t<=t)return u[ec(o,t,0,i)]}function e(){var e=-1;for(o=new Array(i);++e<i;)o[e]=((e+1)*r-(e-i)*n)/(i+1);return t}var n=0,r=1,i=1,o=[.5],u=[0,1];return t.domain=function(t){return arguments.length?(n=+t[0],r=+t[1],e()):[n,r]},t.range=function(t){return arguments.length?(i=(u=H_.call(t)).length-1,e()):u.slice()},t.invertExtent=function(t){var e=u.indexOf(t);return e<0?[NaN,NaN]:e<1?[n,o[0]]:e>=i?[o[i-1],r]:[o[e-1],o[e]]},t.copy=function(){return ea().domain([n,r]).range(u)},Bu(t)}function na(){function t(t){if(t<=t)return n[ec(e,t,0,r)]}var e=[.5],n=[0,1],r=1;return t.domain=function(i){return arguments.length?(e=H_.call(i),r=Math.min(e.length,n.length-1),t):e.slice()},t.range=function(i){return arguments.length?(n=H_.call(i),r=Math.min(e.length,n.length-1),t):n.slice()},t.invertExtent=function(t){var r=n.indexOf(t);return[e[r-1],e[r]]},t.copy=function(){return na().domain(e).range(n)},t}function ra(t,e,n,r){function i(e){return t(e=new Date(+e)),e}return i.floor=i,i.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},i.round=function(t){var e=i(t),n=i.ceil(t);return t-e<n-t?e:n},i.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},i.range=function(n,r,o){var u=[];if(n=i.ceil(n),o=null==o?1:Math.floor(o),!(n<r&&o>0))return u;do{u.push(new Date(+n))}while(e(n,o),t(n),n<r);return u},i.filter=function(n){return ra(function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)},function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;e(t,-1),!n(t););else for(;--r>=0;)for(;e(t,1),!n(t););})},n&&(i.count=function(e,r){return J_.setTime(+e),Q_.setTime(+r),t(J_),t(Q_),Math.floor(n(J_,Q_))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(e){return r(e)%t==0}:function(e){return i.count(0,e)%t==0}):i:null}),i}function ia(t){return ra(function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+7*e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*nb)/rb})}function oa(t){return ra(function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+7*e)},function(t,e){return(e-t)/rb})}function ua(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function aa(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function sa(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}function la(t){function e(t,e){return function(n){var r,i,o,u=[],a=-1,s=0,l=t.length;for(n instanceof Date||(n=new Date(+n));++a<l;)37===t.charCodeAt(a)&&(u.push(t.slice(s,a)),null!=(i=ex[r=t.charAt(++a)])?r=t.charAt(++a):i="e"===r?" ":"0",(o=e[r])&&(r=o(n,i)),u.push(r),s=a+1);return u.push(t.slice(s,a)),u.join("")}}function n(t,e){return function(n){var i=sa(1900);if(r(i,t,n+="",0)!=n.length)return null;if("p"in i&&(i.H=i.H%12+12*i.p),"W"in i||"U"in i){"w"in i||(i.w="W"in i?1:0);var o="Z"in i?aa(sa(i.y)).getUTCDay():e(sa(i.y)).getDay();i.m=0,i.d="W"in i?(i.w+6)%7+7*i.W-(o+5)%7:i.w+7*i.U-(o+6)%7}return"Z"in i?(i.H+=i.Z/100|0,i.M+=i.Z%100,aa(i)):e(i)}}function r(t,e,n,r){for(var i,o,u=0,a=e.length,s=n.length;u<a;){if(r>=s)return-1;if(37===(i=e.charCodeAt(u++))){if(i=e.charAt(u++),!(o=q[i in ex?e.charAt(u++):i])||(r=o(t,n,r))<0)return-1}else if(i!=n.charCodeAt(r++))return-1}return r}function i(t,e,n){var r=T.exec(e.slice(n));return r?(t.p=D[r[0].toLowerCase()],n+r[0].length):-1}function o(t,e,n){var r=j.exec(e.slice(n));return r?(t.w=P[r[0].toLowerCase()],n+r[0].length):-1}function u(t,e,n){var r=k.exec(e.slice(n));return r?(t.w=N[r[0].toLowerCase()],n+r[0].length):-1}function a(t,e,n){var r=I.exec(e.slice(n));return r?(t.m=L[r[0].toLowerCase()],n+r[0].length):-1}function s(t,e,n){var r=V.exec(e.slice(n));return r?(t.m=R[r[0].toLowerCase()],n+r[0].length):-1}function l(t,e,n){return r(t,w,e,n)}function c(t,e,n){return r(t,E,e,n)}function f(t,e,n){return r(t,M,e,n)}function h(t){return S[t.getDay()]}function p(t){return C[t.getDay()]}function d(t){return O[t.getMonth()]}function v(t){return A[t.getMonth()]}function m(t){return F[+(t.getHours()>=12)]}function y(t){return S[t.getUTCDay()]}function g(t){return C[t.getUTCDay()]}function _(t){return O[t.getUTCMonth()]}function b(t){return A[t.getUTCMonth()]}function x(t){return F[+(t.getUTCHours()>=12)]}var w=t.dateTime,E=t.date,M=t.time,F=t.periods,C=t.days,S=t.shortDays,A=t.months,O=t.shortMonths,T=ha(F),D=pa(F),k=ha(C),N=pa(C),j=ha(S),P=pa(S),V=ha(A),R=pa(A),I=ha(O),L=pa(O),z={a:h,A:p,b:d,B:v,c:null,d:Aa,e:Aa,H:Oa,I:Ta,j:Da,L:ka,m:Na,M:ja,p:m,S:Pa,U:Va,w:Ra,W:Ia,x:null,X:null,y:La,Y:za,Z:Ba,"%":ns},B={a:y,A:g,b:_,B:b,c:null,d:qa,e:qa,H:Ua,I:Ka,j:Ha,L:Wa,m:Ya,M:Xa,p:x,S:$a,U:Ga,w:Za,W:Ja,x:null,X:null,y:Qa,Y:ts,Z:es,"%":ns},q={a:o,A:u,b:a,B:s,c:l,d:xa,e:xa,H:Ea,I:Ea,j:wa,L:Ca,m:ba,M:Ma,p:i,S:Fa,U:va,w:da,W:ma,x:c,X:f,y:ga,Y:ya,Z:_a,"%":Sa};return z.x=e(E,z),z.X=e(M,z),z.c=e(w,z),B.x=e(E,B),B.X=e(M,B),B.c=e(w,B),{format:function(t){var n=e(t+="",z);return n.toString=function(){return t},n},parse:function(t){var e=n(t+="",ua);return e.toString=function(){return t},e},utcFormat:function(t){var n=e(t+="",B);return n.toString=function(){return t},n},utcParse:function(t){var e=n(t,aa);return e.toString=function(){return t},e}}}function ca(t,e,n){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<n?new Array(n-o+1).join(e)+i:i)}function fa(t){return t.replace(ix,"\\$&")}function ha(t){return new RegExp("^(?:"+t.map(fa).join("|")+")","i")}function pa(t){for(var e={},n=-1,r=t.length;++n<r;)e[t[n].toLowerCase()]=n;return e}function da(t,e,n){var r=nx.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function va(t,e,n){var r=nx.exec(e.slice(n));return r?(t.U=+r[0],n+r[0].length):-1}function ma(t,e,n){var r=nx.exec(e.slice(n));return r?(t.W=+r[0],n+r[0].length):-1}function ya(t,e,n){var r=nx.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function ga(t,e,n){var r=nx.exec(e.slice(n,n+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function _a(t,e,n){var r=/^(Z)|([+-]\d\d)(?:\:?(\d\d))?/.exec(e.slice(n,n+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function ba(t,e,n){var r=nx.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function xa(t,e,n){var r=nx.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function wa(t,e,n){var r=nx.exec(e.slice(n,n+3));return r?(t.m=0,t.d=+r[0],n+r[0].length):-1}function Ea(t,e,n){var r=nx.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function Ma(t,e,n){var r=nx.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function Fa(t,e,n){var r=nx.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function Ca(t,e,n){var r=nx.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function Sa(t,e,n){var r=rx.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function Aa(t,e){return ca(t.getDate(),e,2)}function Oa(t,e){return ca(t.getHours(),e,2)}function Ta(t,e){return ca(t.getHours()%12||12,e,2)}function Da(t,e){return ca(1+cb.count(Ab(t),t),e,3)}function ka(t,e){return ca(t.getMilliseconds(),e,3)}function Na(t,e){return ca(t.getMonth()+1,e,2)}function ja(t,e){return ca(t.getMinutes(),e,2)}function Pa(t,e){return ca(t.getSeconds(),e,2)}function Va(t,e){return ca(hb.count(Ab(t),t),e,2)}function Ra(t){return t.getDay()}function Ia(t,e){return ca(pb.count(Ab(t),t),e,2)}function La(t,e){return ca(t.getFullYear()%100,e,2)}function za(t,e){return ca(t.getFullYear()%1e4,e,4)}function Ba(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+ca(e/60|0,"0",2)+ca(e%60,"0",2)}function qa(t,e){return ca(t.getUTCDate(),e,2)}function Ua(t,e){return ca(t.getUTCHours(),e,2)}function Ka(t,e){return ca(t.getUTCHours()%12||12,e,2)}function Ha(t,e){return ca(1+jb.count(Jb(t),t),e,3)}function Wa(t,e){return ca(t.getUTCMilliseconds(),e,3)}function Ya(t,e){return ca(t.getUTCMonth()+1,e,2)}function Xa(t,e){return ca(t.getUTCMinutes(),e,2)}function $a(t,e){return ca(t.getUTCSeconds(),e,2)}function Ga(t,e){return ca(Vb.count(Jb(t),t),e,2)}function Za(t){return t.getUTCDay()}function Ja(t,e){return ca(Rb.count(Jb(t),t),e,2)}function Qa(t,e){return ca(t.getUTCFullYear()%100,e,2)}function ts(t,e){return ca(t.getUTCFullYear()%1e4,e,4)}function es(){return"+0000"}function ns(){return"%"}function rs(e){return Qb=la(e),t.timeFormat=Qb.format,t.timeParse=Qb.parse,t.utcFormat=Qb.utcFormat,t.utcParse=Qb.utcParse,Qb}function is(t){return t.toISOString()}function os(t){var e=new Date(t);return isNaN(e)?null:e}function us(t){return new Date(t)}function as(t){return t instanceof Date?+t:+new Date(+t)}function ss(t,e,n,r,o,u,a,s,l){function c(i){return(a(i)<i?v:u(i)<i?m:o(i)<i?y:r(i)<i?g:e(i)<i?n(i)<i?_:b:t(i)<i?x:w)(i)}function f(e,n,r,o){if(null==e&&(e=10),"number"==typeof e){var u=Math.abs(r-n)/e,a=Ql(function(t){return t[2]}).right(E,u);a===E.length?(o=i(n/px,r/px,e),e=t):a?(a=E[u/E[a-1][2]<E[a][2]/u?a-1:a],o=a[1],e=a[0]):(o=i(n,r,e),e=s)}return null==o?e:e.every(o)}var h=zu(ju,Ih),p=h.invert,d=h.domain,v=l(".%L"),m=l(":%S"),y=l("%I:%M"),g=l("%I %p"),_=l("%a %d"),b=l("%b %d"),x=l("%B"),w=l("%Y"),E=[[a,1,ax],[a,5,5*ax],[a,15,15*ax],[a,30,30*ax],[u,1,sx],[u,5,5*sx],[u,15,15*sx],[u,30,30*sx],[o,1,lx],[o,3,3*lx],[o,6,6*lx],[o,12,12*lx],[r,1,cx],[r,2,2*cx],[n,1,fx],[e,1,hx],[e,3,3*hx],[t,1,px]];return h.invert=function(t){return new Date(p(t))},h.domain=function(t){return arguments.length?d(K_.call(t,as)):d().map(us)},h.ticks=function(t,e){var n,r=d(),i=r[0],o=r[r.length-1],u=o<i;return u&&(n=i,i=o,o=n),n=f(t,i,o,e),n=n?n.range(i,o+1):[],u?n.reverse():n},h.tickFormat=function(t,e){return null==e?c:l(e)},h.nice=function(t,e){var n=d();return(t=f(t,n[0],n[n.length-1],e))?d(Z_(n,t)):h},h.copy=function(){return Lu(h,ss(t,e,n,r,o,u,a,s,l))},h}function ls(t){var e=t.length;return function(n){return t[Math.max(0,Math.min(e-1,Math.floor(n*e)))]}}function cs(t){function e(e){var o=(e-n)/(r-n);return t(i?Math.max(0,Math.min(1,o)):o)}var n=0,r=1,i=!1;return e.domain=function(t){return arguments.length?(n=+t[0],r=+t[1],e):[n,r]},e.clamp=function(t){return arguments.length?(i=!!t,e):i},e.interpolator=function(n){return arguments.length?(t=n,e):t},e.copy=function(){return cs(t).domain([n,r]).clamp(i)},Bu(e)}function fs(t){return t>1?0:t<-1?Lx:Math.acos(t)}function hs(t){return t>=1?zx:t<=-1?-zx:Math.asin(t)}function ps(t){return t.innerRadius}function ds(t){return t.outerRadius}function vs(t){return t.startAngle}function ms(t){return t.endAngle}function ys(t){return t&&t.padAngle}function gs(t,e,n,r,i,o,u,a){var s=n-t,l=r-e,c=u-i,f=a-o,h=(c*(e-o)-f*(t-i))/(f*s-c*l);return[t+h*s,e+h*l]}function _s(t,e,n,r,i,o,u){var a=t-n,s=e-r,l=(u?o:-o)/Rx(a*a+s*s),c=l*s,f=-l*a,h=t+c,p=e+f,d=n+c,v=r+f,m=(h+d)/2,y=(p+v)/2,g=d-h,_=v-p,b=g*g+_*_,x=i-o,w=h*v-d*p,E=(_<0?-1:1)*Rx(jx(0,x*x*b-w*w)),M=(w*_-g*E)/b,F=(-w*g-_*E)/b,C=(w*_+g*E)/b,S=(-w*g+_*E)/b,A=M-m,O=F-y,T=C-m,D=S-y;return A*A+O*O>T*T+D*D&&(M=C,F=S),{cx:M,cy:F,x01:-c,y01:-f,x11:M*(i/x-1),y11:F*(i/x-1)}}function bs(t){this._context=t}function xs(t){return t[0]}function ws(t){return t[1]}function Es(t){this._curve=t}function Ms(t){function e(e){return new Es(t(e))}return e._curve=t,e}function Fs(t){var e=t.curve;return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t.curve=function(t){return arguments.length?e(Ms(t)):e()._curve},t}function Cs(t){return t.source}function Ss(t){return t.target}function As(t){function e(){var e,a=Qx.call(arguments),s=n.apply(this,a),l=r.apply(this,a);if(u||(u=e=Ln()),t(u,+i.apply(this,(a[0]=s,a)),+o.apply(this,a),+i.apply(this,(a[0]=l,a)),+o.apply(this,a)),e)return u=null,e+""||null}var n=Cs,r=Ss,i=xs,o=ws,u=null;return e.source=function(t){return arguments.length?(n=t,e):n},e.target=function(t){return arguments.length?(r=t,e):r},e.x=function(t){return arguments.length?(i="function"==typeof t?t:Tx(+t),e):i},e.y=function(t){return arguments.length?(o="function"==typeof t?t:Tx(+t),e):o},e.context=function(t){return arguments.length?(u=null==t?null:t,e):u},e}function Os(t,e,n,r,i){t.moveTo(e,n),t.bezierCurveTo(e=(e+r)/2,n,e,i,r,i)}function Ts(t,e,n,r,i){t.moveTo(e,n),t.bezierCurveTo(e,n=(n+i)/2,r,n,r,i)}function Ds(t,e,n,r,i){var o=Jx(e,n),u=Jx(e,n=(n+i)/2),a=Jx(r,n),s=Jx(r,i);t.moveTo(o[0],o[1]),t.bezierCurveTo(u[0],u[1],a[0],a[1],s[0],s[1])}function ks(){return As(Os)}function Ns(){return As(Ts)}function js(){var t=As(Ds);return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t}function Ps(t,e,n){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+e)/6,(t._y0+4*t._y1+n)/6)}function Vs(t){this._context=t}function Rs(t){this._context=t}function Is(t){this._context=t}function Ls(t,e){this._basis=new Vs(t),this._beta=e}function zs(t,e,n){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-e),t._y2+t._k*(t._y1-n),t._x2,t._y2)}function Bs(t,e){this._context=t,this._k=(1-e)/6}function qs(t,e){this._context=t,this._k=(1-e)/6}function Us(t,e){this._context=t,this._k=(1-e)/6}function Ks(t,e,n){var r=t._x1,i=t._y1,o=t._x2,u=t._y2;if(t._l01_a>Ix){var a=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,s=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*a-t._x0*t._l12_2a+t._x2*t._l01_2a)/s,i=(i*a-t._y0*t._l12_2a+t._y2*t._l01_2a)/s}if(t._l23_a>Ix){var l=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,c=3*t._l23_a*(t._l23_a+t._l12_a);o=(o*l+t._x1*t._l23_2a-e*t._l12_2a)/c,u=(u*l+t._y1*t._l23_2a-n*t._l12_2a)/c}t._context.bezierCurveTo(r,i,o,u,t._x2,t._y2)}function Hs(t,e){this._context=t,this._alpha=e}function Ws(t,e){this._context=t,this._alpha=e}function Ys(t,e){this._context=t,this._alpha=e}function Xs(t){this._context=t}function $s(t){return t<0?-1:1}function Gs(t,e,n){var r=t._x1-t._x0,i=e-t._x1,o=(t._y1-t._y0)/(r||i<0&&-0),u=(n-t._y1)/(i||r<0&&-0),a=(o*i+u*r)/(r+i);return($s(o)+$s(u))*Math.min(Math.abs(o),Math.abs(u),.5*Math.abs(a))||0}function Zs(t,e){var n=t._x1-t._x0;return n?(3*(t._y1-t._y0)/n-e)/2:e}function Js(t,e,n){var r=t._x0,i=t._y0,o=t._x1,u=t._y1,a=(o-r)/3;t._context.bezierCurveTo(r+a,i+a*e,o-a,u-a*n,o,u)}function Qs(t){this._context=t}function tl(t){this._context=new el(t)}function el(t){this._context=t}function nl(t){return new Qs(t)}function rl(t){return new tl(t)}function il(t){this._context=t}function ol(t){var e,n,r=t.length-1,i=new Array(r),o=new Array(r),u=new Array(r);for(i[0]=0,o[0]=2,u[0]=t[0]+2*t[1],e=1;e<r-1;++e)i[e]=1,o[e]=4,u[e]=4*t[e]+2*t[e+1];for(i[r-1]=2,o[r-1]=7,u[r-1]=8*t[r-1]+t[r],e=1;e<r;++e)n=i[e]/o[e-1],o[e]-=n,u[e]-=n*u[e-1];for(i[r-1]=u[r-1]/o[r-1],e=r-2;e>=0;--e)i[e]=(u[e]-i[e+1])/o[e];for(o[r-1]=(t[r]+i[r-1])/2,e=0;e<r-1;++e)o[e]=2*t[e+1]-i[e+1];return[i,o]}function ul(t,e){this._context=t,this._t=e}function al(t){return new ul(t,0)}function sl(t){return new ul(t,1)}function ll(t,e){return t[e]}function cl(t){for(var e,n=0,r=-1,i=t.length;++r<i;)(e=+t[r][1])&&(n+=e);return n}function fl(t){return t[0]}function hl(t){return t[1]}function pl(){this._=null}function dl(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function vl(t,e){var n=e,r=e.R,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.R=r.L,n.R&&(n.R.U=n),r.L=n}function ml(t,e){var n=e,r=e.L,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.L=r.R,n.L&&(n.L.U=n),r.R=n}function yl(t){for(;t.L;)t=t.L;return t}function gl(t,e,n,r){var i=[null,null],o=$w.push(i)-1;return i.left=t,i.right=e,n&&bl(i,t,e,n),r&&bl(i,e,t,r),Yw[t.index].halfedges.push(o),Yw[e.index].halfedges.push(o),i}function _l(t,e,n){var r=[e,n];return r.left=t,r}function bl(t,e,n,r){t[0]||t[1]?t.left===n?t[1]=r:t[0]=r:(t[0]=r,t.left=e,t.right=n)}function xl(t,e,n,r,i){var o,u=t[0],a=t[1],s=u[0],l=u[1],c=a[0],f=a[1],h=0,p=1,d=c-s,v=f-l;if(o=e-s,d||!(o>0)){if(o/=d,d<0){if(o<h)return;o<p&&(p=o)}else if(d>0){if(o>p)return;o>h&&(h=o)}if(o=r-s,d||!(o<0)){if(o/=d,d<0){if(o>p)return;o>h&&(h=o)}else if(d>0){if(o<h)return;o<p&&(p=o)}if(o=n-l,v||!(o>0)){if(o/=v,v<0){if(o<h)return;o<p&&(p=o)}else if(v>0){if(o>p)return;o>h&&(h=o)}if(o=i-l,v||!(o<0)){if(o/=v,v<0){if(o>p)return;o>h&&(h=o)}else if(v>0){if(o<h)return;o<p&&(p=o)}return!(h>0||p<1)||(h>0&&(t[0]=[s+h*d,l+h*v]),p<1&&(t[1]=[s+p*d,l+p*v]),!0)}}}}}function wl(t,e,n,r,i){var o=t[1];if(o)return!0;var u,a,s=t[0],l=t.left,c=t.right,f=l[0],h=l[1],p=c[0],d=c[1],v=(f+p)/2,m=(h+d)/2;if(d===h){if(v<e||v>=r)return;if(f>p){if(s){if(s[1]>=i)return}else s=[v,n];o=[v,i]}else{if(s){if(s[1]<n)return}else s=[v,i];o=[v,n]}}else if(u=(f-p)/(d-h),a=m-u*v,u<-1||u>1)if(f>p){if(s){if(s[1]>=i)return}else s=[(n-a)/u,n];o=[(i-a)/u,i]}else{if(s){if(s[1]<n)return}else s=[(i-a)/u,i];o=[(n-a)/u,n]}else if(h<d){if(s){if(s[0]>=r)return}else s=[e,u*e+a];o=[r,u*r+a]}else{if(s){if(s[0]<e)return}else s=[r,u*r+a];o=[e,u*e+a]}return t[0]=s,t[1]=o,!0}function El(t,e,n,r){for(var i,o=$w.length;o--;)wl(i=$w[o],t,e,n,r)&&xl(i,t,e,n,r)&&(Math.abs(i[0][0]-i[1][0])>Jw||Math.abs(i[0][1]-i[1][1])>Jw)||delete $w[o]}function Ml(t){return Yw[t.index]={site:t,halfedges:[]}}function Fl(t,e){var n=t.site,r=e.left,i=e.right;return n===i&&(i=r,r=n),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(n===r?(r=e[1],i=e[0]):(r=e[0],i=e[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function Cl(t,e){return e[+(e.left!==t.site)]}function Sl(t,e){return e[+(e.left===t.site)]}function Al(){for(var t,e,n,r,i=0,o=Yw.length;i<o;++i)if((t=Yw[i])&&(r=(e=t.halfedges).length)){var u=new Array(r),a=new Array(r);for(n=0;n<r;++n)u[n]=n,a[n]=Fl(t,$w[e[n]]);for(u.sort(function(t,e){return a[e]-a[t]}),n=0;n<r;++n)a[n]=e[u[n]];for(n=0;n<r;++n)e[n]=a[n]}}function Ol(t,e,n,r){var i,o,u,a,s,l,c,f,h,p,d,v,m=Yw.length,y=!0;for(i=0;i<m;++i)if(o=Yw[i]){for(u=o.site,s=o.halfedges,a=s.length;a--;)$w[s[a]]||s.splice(a,1);for(a=0,l=s.length;a<l;)p=Sl(o,$w[s[a]]),d=p[0],v=p[1],c=Cl(o,$w[s[++a%l]]),f=c[0],h=c[1],(Math.abs(d-f)>Jw||Math.abs(v-h)>Jw)&&(s.splice(a,0,$w.push(_l(u,p,Math.abs(d-t)<Jw&&r-v>Jw?[t,Math.abs(f-t)<Jw?h:r]:Math.abs(v-r)<Jw&&n-d>Jw?[Math.abs(h-r)<Jw?f:n,r]:Math.abs(d-n)<Jw&&v-e>Jw?[n,Math.abs(f-n)<Jw?h:e]:Math.abs(v-e)<Jw&&d-t>Jw?[Math.abs(h-e)<Jw?f:t,e]:null))-1),++l);l&&(y=!1)}if(y){var g,_,b,x=1/0;for(i=0,y=null;i<m;++i)(o=Yw[i])&&(u=o.site,g=u[0]-t,_=u[1]-e,(b=g*g+_*_)<x&&(x=b,y=o));if(y){var w=[t,e],E=[t,r],M=[n,r],F=[n,e];y.halfedges.push($w.push(_l(u=y.site,w,E))-1,$w.push(_l(u,E,M))-1,$w.push(_l(u,M,F))-1,$w.push(_l(u,F,w))-1)}}for(i=0;i<m;++i)(o=Yw[i])&&(o.halfedges.length||delete Yw[i])}function Tl(){dl(this),this.x=this.y=this.arc=this.site=this.cy=null}function Dl(t){var e=t.P,n=t.N;if(e&&n){var r=e.site,i=t.site,o=n.site;if(r!==o){var u=i[0],a=i[1],s=r[0]-u,l=r[1]-a,c=o[0]-u,f=o[1]-a,h=2*(s*f-l*c);if(!(h>=-Qw)){var p=s*s+l*l,d=c*c+f*f,v=(f*p-l*d)/h,m=(s*d-c*p)/h,y=Gw.pop()||new Tl;y.arc=t,y.site=i,y.x=v+u,y.y=(y.cy=m+a)+Math.sqrt(v*v+m*m),t.circle=y;for(var g=null,_=Xw._;_;)if(y.y<_.y||y.y===_.y&&y.x<=_.x){if(!_.L){g=_.P;break}_=_.L}else{if(!_.R){g=_;break}_=_.R}Xw.insert(g,y),g||(Hw=y)}}}}function kl(t){var e=t.circle;e&&(e.P||(Hw=e.N),Xw.remove(e),Gw.push(e),dl(e),t.circle=null)}function Nl(){dl(this),this.edge=this.site=this.circle=null}function jl(t){var e=Zw.pop()||new Nl;return e.site=t,e}function Pl(t){kl(t),Ww.remove(t),Zw.push(t),dl(t)}function Vl(t){var e=t.circle,n=e.x,r=e.cy,i=[n,r],o=t.P,u=t.N,a=[t];Pl(t);for(var s=o;s.circle&&Math.abs(n-s.circle.x)<Jw&&Math.abs(r-s.circle.cy)<Jw;)o=s.P,a.unshift(s),Pl(s),s=o;a.unshift(s),kl(s);for(var l=u;l.circle&&Math.abs(n-l.circle.x)<Jw&&Math.abs(r-l.circle.cy)<Jw;)u=l.N,a.push(l),Pl(l),l=u;a.push(l),kl(l);var c,f=a.length;for(c=1;c<f;++c)l=a[c],s=a[c-1],bl(l.edge,s.site,l.site,i);s=a[0],l=a[f-1],l.edge=gl(s.site,l.site,null,i),Dl(s),Dl(l)}function Rl(t){for(var e,n,r,i,o=t[0],u=t[1],a=Ww._;a;)if((r=Il(a,u)-o)>Jw)a=a.L;else{if(!((i=o-Ll(a,u))>Jw)){r>-Jw?(e=a.P,n=a):i>-Jw?(e=a,n=a.N):e=n=a;break}if(!a.R){e=a;break}a=a.R}Ml(t);var s=jl(t);if(Ww.insert(e,s),e||n){if(e===n)return kl(e),n=jl(e.site),Ww.insert(s,n),s.edge=n.edge=gl(e.site,s.site),Dl(e),void Dl(n);if(!n)return void(s.edge=gl(e.site,s.site));kl(e),kl(n);var l=e.site,c=l[0],f=l[1],h=t[0]-c,p=t[1]-f,d=n.site,v=d[0]-c,m=d[1]-f,y=2*(h*m-p*v),g=h*h+p*p,_=v*v+m*m,b=[(m*g-p*_)/y+c,(h*_-v*g)/y+f];bl(n.edge,l,d,b),s.edge=gl(l,t,null,b),n.edge=gl(t,d,null,b),Dl(e),Dl(n)}}function Il(t,e){var n=t.site,r=n[0],i=n[1],o=i-e;if(!o)return r;var u=t.P;if(!u)return-1/0;n=u.site;var a=n[0],s=n[1],l=s-e;if(!l)return a;var c=a-r,f=1/o-1/l,h=c/l;return f?(-h+Math.sqrt(h*h-2*f*(c*c/(-2*l)-s+l/2+i-o/2)))/f+r:(r+a)/2}function Ll(t,e){var n=t.N;if(n)return Il(n,e);var r=t.site;return r[1]===e?r[0]:1/0}function zl(t,e,n){return(t[0]-n[0])*(e[1]-t[1])-(t[0]-e[0])*(n[1]-t[1])}function Bl(t,e){return e[1]-t[1]||e[0]-t[0]}function ql(t,e){var n,r,i,o=t.sort(Bl).pop();for($w=[],Yw=new Array(t.length),Ww=new pl,Xw=new pl;;)if(i=Hw,o&&(!i||o[1]<i.y||o[1]===i.y&&o[0]<i.x))o[0]===n&&o[1]===r||(Rl(o),n=o[0],r=o[1]),o=t.pop();else{if(!i)break;Vl(i.arc)}if(Al(),e){var u=+e[0][0],a=+e[0][1],s=+e[1][0],l=+e[1][1];El(u,a,s,l),Ol(u,a,s,l)}this.edges=$w,this.cells=Yw,Ww=Xw=$w=Yw=null}function Ul(t,e,n){this.target=t,this.type=e,this.transform=n}function Kl(t,e,n){this.k=t,this.x=e,this.y=n}function Hl(t){return t.__zoom||nE}function Wl(){t.event.stopImmediatePropagation()}function Yl(){return!t.event.button}function Xl(){var t,e,n=this;return n instanceof SVGElement?(n=n.ownerSVGElement||n,t=n.width.baseVal.value,e=n.height.baseVal.value):(t=n.clientWidth,e=n.clientHeight),[[0,0],[t,e]]}function $l(){return this.__zoom||nE}function Gl(){return-t.event.deltaY*(t.event.deltaMode?120:1)/500}function Zl(){return"ontouchstart"in this}var Jl=function(t,e){return t<e?-1:t>e?1:t>=e?0:NaN},Ql=function(t){return 1===t.length&&(t=e(t)),{left:function(e,n,r,i){for(null==r&&(r=0),null==i&&(i=e.length);r<i;){var o=r+i>>>1;t(e[o],n)<0?r=o+1:i=o}return r},right:function(e,n,r,i){for(null==r&&(r=0),null==i&&(i=e.length);r<i;){var o=r+i>>>1;t(e[o],n)>0?i=o:r=o+1}return r}}},tc=Ql(Jl),ec=tc.right,nc=tc.left,rc=function(t,e){null==e&&(e=n);for(var r=0,i=t.length-1,o=t[0],u=new Array(i<0?0:i);r<i;)u[r]=e(o,o=t[++r]);return u},ic=function(t,e,r){var i,o,u,a,s=t.length,l=e.length,c=new Array(s*l);for(null==r&&(r=n),i=u=0;i<s;++i)for(a=t[i],o=0;o<l;++o,++u)c[u]=r(a,e[o]);return c},oc=function(t,e){return e<t?-1:e>t?1:e>=t?0:NaN},uc=function(t){return null===t?NaN:+t},ac=function(t,e){var n,r,i=t.length,o=0,u=-1,a=0,s=0;if(null==e)for(;++u<i;)isNaN(n=uc(t[u]))||(r=n-a,a+=r/++o,s+=r*(n-a));else for(;++u<i;)isNaN(n=uc(e(t[u],u,t)))||(r=n-a,a+=r/++o,s+=r*(n-a));if(o>1)return s/(o-1)},sc=function(t,e){var n=ac(t,e);return n?Math.sqrt(n):n},lc=function(t,e){var n,r,i,o=t.length,u=-1;if(null==e){for(;++u<o;)if(null!=(n=t[u])&&n>=n)for(r=i=n;++u<o;)null!=(n=t[u])&&(r>n&&(r=n),i<n&&(i=n))}else for(;++u<o;)if(null!=(n=e(t[u],u,t))&&n>=n)for(r=i=n;++u<o;)null!=(n=e(t[u],u,t))&&(r>n&&(r=n),i<n&&(i=n));return[r,i]},cc=Array.prototype,fc=cc.slice,hc=cc.map,pc=function(t){return function(){return t}},dc=function(t){return t},vc=function(t,e,n){t=+t,e=+e,n=(i=arguments.length)<2?(e=t,t=0,1):i<3?1:+n;for(var r=-1,i=0|Math.max(0,Math.ceil((e-t)/n)),o=new Array(i);++r<i;)o[r]=t+r*n;return o},mc=Math.sqrt(50),yc=Math.sqrt(10),gc=Math.sqrt(2),_c=function(t,e,n){var i,o,u,a=e<t,s=-1;if(a&&(i=t,t=e,e=i),0===(u=r(t,e,n))||!isFinite(u))return[];if(u>0)for(t=Math.ceil(t/u),e=Math.floor(e/u),o=new Array(i=Math.ceil(e-t+1));++s<i;)o[s]=(t+s)*u;else for(t=Math.floor(t*u),e=Math.ceil(e*u),o=new Array(i=Math.ceil(t-e+1));++s<i;)o[s]=(t-s)/u;return a&&o.reverse(),o},bc=function(t){return Math.ceil(Math.log(t.length)/Math.LN2)+1},xc=function(){function t(t){var o,u,a=t.length,s=new Array(a);for(o=0;o<a;++o)s[o]=e(t[o],o,t);var l=n(s),c=l[0],f=l[1],h=r(s,c,f);Array.isArray(h)||(h=i(c,f,h),h=vc(Math.ceil(c/h)*h,Math.floor(f/h)*h,h));for(var p=h.length;h[0]<=c;)h.shift(),--p;for(;h[p-1]>f;)h.pop(),--p;var d,v=new Array(p+1);for(o=0;o<=p;++o)d=v[o]=[],d.x0=o>0?h[o-1]:c,d.x1=o<p?h[o]:f;for(o=0;o<a;++o)u=s[o],c<=u&&u<=f&&v[ec(h,u,0,p)].push(t[o]);return v}var e=dc,n=lc,r=bc;return t.value=function(n){return arguments.length?(e="function"==typeof n?n:pc(n),t):e},t.domain=function(e){return arguments.length?(n="function"==typeof e?e:pc([e[0],e[1]]),t):n},t.thresholds=function(e){return arguments.length?(r="function"==typeof e?e:pc(Array.isArray(e)?fc.call(e):e),t):r},t},wc=function(t,e,n){if(null==n&&(n=uc),r=t.length){if((e=+e)<=0||r<2)return+n(t[0],0,t);if(e>=1)return+n(t[r-1],r-1,t);var r,i=(r-1)*e,o=Math.floor(i),u=+n(t[o],o,t);return u+(+n(t[o+1],o+1,t)-u)*(i-o)}},Ec=function(t,e,n){return t=hc.call(t,uc).sort(Jl),Math.ceil((n-e)/(2*(wc(t,.75)-wc(t,.25))*Math.pow(t.length,-1/3)))},Mc=function(t,e,n){return Math.ceil((n-e)/(3.5*sc(t)*Math.pow(t.length,-1/3)))},Fc=function(t,e){var n,r,i=t.length,o=-1;if(null==e){for(;++o<i;)if(null!=(n=t[o])&&n>=n)for(r=n;++o<i;)null!=(n=t[o])&&n>r&&(r=n)}else for(;++o<i;)if(null!=(n=e(t[o],o,t))&&n>=n)for(r=n;++o<i;)null!=(n=e(t[o],o,t))&&n>r&&(r=n);return r},Cc=function(t,e){var n,r=t.length,i=r,o=-1,u=0;if(null==e)for(;++o<r;)isNaN(n=uc(t[o]))?--i:u+=n;else for(;++o<r;)isNaN(n=uc(e(t[o],o,t)))?--i:u+=n;if(i)return u/i},Sc=function(t,e){var n,r=t.length,i=-1,o=[];if(null==e)for(;++i<r;)isNaN(n=uc(t[i]))||o.push(n);else for(;++i<r;)isNaN(n=uc(e(t[i],i,t)))||o.push(n);return wc(o.sort(Jl),.5)},Ac=function(t){for(var e,n,r,i=t.length,o=-1,u=0;++o<i;)u+=t[o].length;for(n=new Array(u);--i>=0;)for(r=t[i],e=r.length;--e>=0;)n[--u]=r[e];return n},Oc=function(t,e){var n,r,i=t.length,o=-1;if(null==e){for(;++o<i;)if(null!=(n=t[o])&&n>=n)for(r=n;++o<i;)null!=(n=t[o])&&r>n&&(r=n)}else for(;++o<i;)if(null!=(n=e(t[o],o,t))&&n>=n)for(r=n;++o<i;)null!=(n=e(t[o],o,t))&&r>n&&(r=n);return r},Tc=function(t,e){for(var n=e.length,r=new Array(n);n--;)r[n]=t[e[n]];return r},Dc=function(t,e){if(n=t.length){var n,r,i=0,o=0,u=t[o];for(null==e&&(e=Jl);++i<n;)(e(r=t[i],u)<0||0!==e(u,u))&&(u=r,o=i);return 0===e(u,u)?o:void 0}},kc=function(t,e,n){for(var r,i,o=(null==n?t.length:n)-(e=null==e?0:+e);o;)i=Math.random()*o--|0,r=t[o+e],t[o+e]=t[i+e],t[i+e]=r;return t},Nc=function(t,e){var n,r=t.length,i=-1,o=0;if(null==e)for(;++i<r;)(n=+t[i])&&(o+=n);else for(;++i<r;)(n=+e(t[i],i,t))&&(o+=n);return o},jc=function(t){if(!(i=t.length))return[];for(var e=-1,n=Oc(t,o),r=new Array(n);++e<n;)for(var i,u=-1,a=r[e]=new Array(i);++u<i;)a[u]=t[u][e];return r},Pc=function(){return jc(arguments)},Vc=Array.prototype.slice,Rc=function(t){return t},Ic=1,Lc=2,zc=3,Bc=4,qc=1e-6,Uc={value:function(){}};g.prototype=y.prototype={constructor:g,on:function(t,e){var n,r=this._,i=_(t+"",r),o=-1,u=i.length;{if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++o<u;)if(n=(t=i[o]).type)r[n]=x(r[n],t.name,e);else if(null==e)for(n in r)r[n]=x(r[n],t.name,null);return this}for(;++o<u;)if((n=(t=i[o]).type)&&(n=b(r[n],t.name)))return n}},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new g(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,i=new Array(n),o=0;o<n;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(r=this._[t],o=0,n=r.length;o<n;++o)r[o].value.apply(e,i)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(e,n)}};var Kc="http://www.w3.org/1999/xhtml",Hc={svg:"http://www.w3.org/2000/svg",xhtml:Kc,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},Wc=function(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),Hc.hasOwnProperty(e)?{space:Hc[e],local:t}:t},Yc=function(t){var e=Wc(t);return(e.local?E:w)(e)},Xc=0;F.prototype=M.prototype={constructor:F,get:function(t){for(var e=this._;!(e in t);)if(!(t=t.parentNode))return;return t[e]},set:function(t,e){return t[this._]=e},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};var $c=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var Gc=document.documentElement;if(!Gc.matches){var Zc=Gc.webkitMatchesSelector||Gc.msMatchesSelector||Gc.mozMatchesSelector||Gc.oMatchesSelector;$c=function(t){return function(){return Zc.call(this,t)}}}}var Jc=$c,Qc={};if(t.event=null,"undefined"!=typeof document){"onmouseenter"in document.documentElement||(Qc={mouseenter:"mouseover",mouseleave:"mouseout"})}var tf=function(t,e,n){var r,i,o=A(t+""),u=o.length;{if(!(arguments.length<2)){for(a=e?T:O,null==n&&(n=!1),r=0;r<u;++r)this.each(a(o[r],e,n));return this}var a=this.node().__on;if(a)for(var s,l=0,c=a.length;l<c;++l)for(r=0,s=a[l];r<u;++r)if((i=o[r]).type===s.type&&i.name===s.name)return s.value}},ef=function(){for(var e,n=t.event;e=n.sourceEvent;)n=e;return n},nf=function(t,e){var n=t.ownerSVGElement||t;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=e.clientX,r.y=e.clientY,r=r.matrixTransform(t.getScreenCTM().inverse()),[r.x,r.y]}var i=t.getBoundingClientRect();return[e.clientX-i.left-t.clientLeft,e.clientY-i.top-t.clientTop]},rf=function(t){var e=ef();return e.changedTouches&&(e=e.changedTouches[0]),nf(t,e)},of=function(t){return null==t?k:function(){return this.querySelector(t)}},uf=function(t){"function"!=typeof t&&(t=of(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,u,a=e[i],s=a.length,l=r[i]=new Array(s),c=0;c<s;++c)(o=a[c])&&(u=t.call(o,o.__data__,c,a))&&("__data__"in o&&(u.__data__=o.__data__),l[c]=u);return new gt(r,this._parents)},af=function(t){return null==t?N:function(){return this.querySelectorAll(t)}},sf=function(t){"function"!=typeof t&&(t=af(t));for(var e=this._groups,n=e.length,r=[],i=[],o=0;o<n;++o)for(var u,a=e[o],s=a.length,l=0;l<s;++l)(u=a[l])&&(r.push(t.call(u,u.__data__,l,a)),i.push(u));return new gt(r,i)},lf=function(t){"function"!=typeof t&&(t=Jc(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,u=e[i],a=u.length,s=r[i]=[],l=0;l<a;++l)(o=u[l])&&t.call(o,o.__data__,l,u)&&s.push(o);return new gt(r,this._parents)},cf=function(t){return new Array(t.length)},ff=function(){return new gt(this._enter||this._groups.map(cf),this._parents)};j.prototype={constructor:j,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var hf=function(t){return function(){return t}},pf="$",df=function(t,e){if(!t)return p=new Array(this.size()),l=-1,this.each(function(t){p[++l]=t}),p;var n=e?V:P,r=this._parents,i=this._groups;"function"!=typeof t&&(t=hf(t));for(var o=i.length,u=new Array(o),a=new Array(o),s=new Array(o),l=0;l<o;++l){var c=r[l],f=i[l],h=f.length,p=t.call(c,c&&c.__data__,l,r),d=p.length,v=a[l]=new Array(d),m=u[l]=new Array(d);n(c,f,v,m,s[l]=new Array(h),p,e);for(var y,g,_=0,b=0;_<d;++_)if(y=v[_]){for(_>=b&&(b=_+1);!(g=m[b])&&++b<d;);y._next=g||null}}return u=new gt(u,r),u._enter=a,u._exit=s,u},vf=function(){return new gt(this._exit||this._groups.map(cf),this._parents)},mf=function(t){for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),u=new Array(r),a=0;a<o;++a)for(var s,l=e[a],c=n[a],f=l.length,h=u[a]=new Array(f),p=0;p<f;++p)(s=l[p]||c[p])&&(h[p]=s);for(;a<r;++a)u[a]=e[a];return new gt(u,this._parents)},yf=function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,i=t[e],o=i.length-1,u=i[o];--o>=0;)(r=i[o])&&(u&&u!==r.nextSibling&&u.parentNode.insertBefore(r,u),u=r);return this},gf=function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=R);for(var n=this._groups,r=n.length,i=new Array(r),o=0;o<r;++o){for(var u,a=n[o],s=a.length,l=i[o]=new Array(s),c=0;c<s;++c)(u=a[c])&&(l[c]=u);l.sort(e)}return new gt(i,this._parents).order()},_f=function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},bf=function(){var t=new Array(this.size()),e=-1;return this.each(function(){t[++e]=this}),t},xf=function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],i=0,o=r.length;i<o;++i){var u=r[i];if(u)return u}return null},wf=function(){var t=0;return this.each(function(){++t}),t},Ef=function(){return!this.node()},Mf=function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var i,o=e[n],u=0,a=o.length;u<a;++u)(i=o[u])&&t.call(i,i.__data__,u,o);return this},Ff=function(t,e){var n=Wc(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?L:I:"function"==typeof e?n.local?U:q:n.local?B:z)(n,e))},Cf=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView},Sf=function(t,e,n){return arguments.length>1?this.each((null==e?K:"function"==typeof e?W:H)(t,e,null==n?"":n)):Y(this.node(),t)},Af=function(t,e){return arguments.length>1?this.each((null==e?X:"function"==typeof e?G:$)(t,e)):this.node()[t]};Q.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var Of=function(t,e){var n=Z(t+"");if(arguments.length<2){for(var r=J(this.node()),i=-1,o=n.length;++i<o;)if(!r.contains(n[i]))return!1;return!0}return this.each(("function"==typeof e?it:e?nt:rt)(n,e))},Tf=function(t){return arguments.length?this.each(null==t?ot:("function"==typeof t?at:ut)(t)):this.node().textContent},Df=function(t){return arguments.length?this.each(null==t?st:("function"==typeof t?ct:lt)(t)):this.node().innerHTML},kf=function(){return this.each(ft)},Nf=function(){return this.each(ht)},jf=function(t){var e="function"==typeof t?t:Yc(t);return this.select(function(){return this.appendChild(e.apply(this,arguments))})},Pf=function(t,e){var n="function"==typeof t?t:Yc(t),r=null==e?pt:"function"==typeof e?e:of(e);return this.select(function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)})},Vf=function(){return this.each(dt)},Rf=function(t){return arguments.length?this.property("__data__",t):this.node().__data__},If=function(t,e){return this.each(("function"==typeof e?yt:mt)(t,e))},Lf=[null];gt.prototype=_t.prototype={constructor:gt,select:uf,selectAll:sf,filter:lf,data:df,enter:ff,exit:vf,merge:mf,order:yf,sort:gf,call:_f,nodes:bf,node:xf,size:wf,empty:Ef,each:Mf,attr:Ff,style:Sf,property:Af,classed:Of,text:Tf,html:Df,raise:kf,lower:Nf,append:jf,insert:Pf,remove:Vf,datum:Rf,on:tf,dispatch:If};var zf=function(t){return"string"==typeof t?new gt([[document.querySelector(t)]],[document.documentElement]):new gt([[t]],Lf)},Bf=function(t){return"string"==typeof t?new gt([document.querySelectorAll(t)],[document.documentElement]):new gt([null==t?[]:t],Lf)},qf=function(t,e,n){arguments.length<3&&(n=e,e=ef().changedTouches);for(var r,i=0,o=e?e.length:0;i<o;++i)if((r=e[i]).identifier===n)return nf(t,r);return null},Uf=function(t,e){null==e&&(e=ef().touches);for(var n=0,r=e?e.length:0,i=new Array(r);n<r;++n)i[n]=nf(t,e[n]);return i},Kf=function(){t.event.preventDefault(),t.event.stopImmediatePropagation()},Hf=function(t){var e=t.document.documentElement,n=zf(t).on("dragstart.drag",Kf,!0);"onselectstart"in e?n.on("selectstart.drag",Kf,!0):(e.__noselect=e.style.MozUserSelect,e.style.MozUserSelect="none")},Wf=function(t){return function(){return t}};wt.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var Yf=function(){function e(t){t.on("mousedown.drag",n).filter(Ct).on("touchstart.drag",o).on("touchmove.drag",u).on("touchend.drag touchcancel.drag",a).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function n(){if(!h&&p.apply(this,arguments)){var e=s("mouse",d.apply(this,arguments),rf,this,arguments);e&&(zf(t.event.view).on("mousemove.drag",r,!0).on("mouseup.drag",i,!0),Hf(t.event.view),bt(),f=!1,l=t.event.clientX,c=t.event.clientY,e("start"))}}function r(){if(Kf(),!f){var e=t.event.clientX-l,n=t.event.clientY-c;f=e*e+n*n>b}m.mouse("drag")}function i(){zf(t.event.view).on("mousemove.drag mouseup.drag",null),xt(t.event.view,f),Kf(),m.mouse("end")}function o(){if(p.apply(this,arguments)){var e,n,r=t.event.changedTouches,i=d.apply(this,arguments),o=r.length;for(e=0;e<o;++e)(n=s(r[e].identifier,i,qf,this,arguments))&&(bt(),n("start"))}}function u(){var e,n,r=t.event.changedTouches,i=r.length;for(e=0;e<i;++e)(n=m[r[e].identifier])&&(Kf(),n("drag"))}function a(){var e,n,r=t.event.changedTouches,i=r.length;for(h&&clearTimeout(h),h=setTimeout(function(){h=null},500),e=0;e<i;++e)(n=m[r[e].identifier])&&(bt(),n("end"))}function s(n,r,i,o,u){var a,s,l,c=i(r,n),f=g.copy();if(D(new wt(e,"beforestart",a,n,_,c[0],c[1],0,0,f),function(){return null!=(t.event.subject=a=v.apply(o,u))&&(s=a.x-c[0]||0,l=a.y-c[1]||0,!0)}))return function t(h){var p,d=c;switch(h){case"start":m[n]=t,p=_++;break;case"end":delete m[n],--_;case"drag":c=i(r,n),p=_}D(new wt(e,h,a,n,p,c[0]+s,c[1]+l,c[0]-d[0],c[1]-d[1],f),f.apply,f,[h,o,u])}}var l,c,f,h,p=Et,d=Mt,v=Ft,m={},g=y("start","drag","end"),_=0,b=0;return e.filter=function(t){return arguments.length?(p="function"==typeof t?t:Wf(!!t),e):p},e.container=function(t){return arguments.length?(d="function"==typeof t?t:Wf(t),e):d},e.subject=function(t){return arguments.length?(v="function"==typeof t?t:Wf(t),e):v},e.on=function(){var t=g.on.apply(g,arguments);return t===g?e:t},e.clickDistance=function(t){return arguments.length?(b=(t=+t)*t,e):Math.sqrt(b)},e},Xf=function(t,e,n){t.prototype=e.prototype=n,n.constructor=t},$f="\\s*([+-]?\\d+)\\s*",Gf="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Zf="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Jf=/^#([0-9a-f]{3})$/,Qf=/^#([0-9a-f]{6})$/,th=new RegExp("^rgb\\("+[$f,$f,$f]+"\\)$"),eh=new RegExp("^rgb\\("+[Zf,Zf,Zf]+"\\)$"),nh=new RegExp("^rgba\\("+[$f,$f,$f,Gf]+"\\)$"),rh=new RegExp("^rgba\\("+[Zf,Zf,Zf,Gf]+"\\)$"),ih=new RegExp("^hsl\\("+[Gf,Zf,Zf]+"\\)$"),oh=new RegExp("^hsla\\("+[Gf,Zf,Zf,Gf]+"\\)$"),uh={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};Xf(At,Ot,{displayable:function(){return this.rgb().displayable()},toString:function(){return this.rgb()+""}}),Xf(jt,Nt,St(At,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new jt(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new jt(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},toString:function(){var t=this.opacity;return t=isNaN(t)?1:Math.max(0,Math.min(1,t)),(1===t?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),Xf(It,Rt,St(At,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new It(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new It(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,i=2*n-r;return new jt(Lt(t>=240?t-240:t+120,i,r),Lt(t,i,r),Lt(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var ah=Math.PI/180,sh=180/Math.PI,lh=.95047,ch=1,fh=1.08883,hh=4/29,ph=6/29,dh=3*ph*ph,vh=ph*ph*ph;Xf(qt,Bt,St(At,{brighter:function(t){return new qt(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new qt(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return t=ch*Kt(t),e=lh*Kt(e),n=fh*Kt(n),new jt(Ht(3.2404542*e-1.5371385*t-.4985314*n),Ht(-.969266*e+1.8760108*t+.041556*n),Ht(.0556434*e-.2040259*t+1.0572252*n),this.opacity)}})),Xf($t,Xt,St(At,{brighter:function(t){return new $t(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new $t(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return zt(this).rgb()}}));var mh=-.14861,yh=1.78277,gh=-.29227,_h=-.90649,bh=1.97294,xh=bh*_h,wh=bh*yh,Eh=yh*gh-_h*mh;Xf(Jt,Zt,St(At,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Jt(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Jt(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*ah,e=+this.l,n=isNaN(this.s)?0:this.s*e*(1-e),r=Math.cos(t),i=Math.sin(t);return new jt(255*(e+n*(mh*r+yh*i)),255*(e+n*(gh*r+_h*i)),255*(e+n*(bh*r)),this.opacity)}}));var Mh,Fh,Ch,Sh,Ah,Oh,Th=function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),i=t[r],o=t[r+1],u=r>0?t[r-1]:2*i-o,a=r<e-1?t[r+2]:2*o-i;return Qt((n-r/e)*e,u,i,o,a)}},Dh=function(t){var e=t.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*e),i=t[(r+e-1)%e],o=t[r%e],u=t[(r+1)%e],a=t[(r+2)%e];return Qt((n-r/e)*e,i,o,u,a)}},kh=function(t){return function(){return t}},Nh=function t(e){function n(t,e){var n=r((t=Nt(t)).r,(e=Nt(e)).r),i=r(t.g,e.g),o=r(t.b,e.b),u=ie(t.opacity,e.opacity);return function(e){return t.r=n(e),t.g=i(e),t.b=o(e),t.opacity=u(e),t+""}}var r=re(e);return n.gamma=t,n}(1),jh=oe(Th),Ph=oe(Dh),Vh=function(t,e){var n,r=e?e.length:0,i=t?Math.min(r,t.length):0,o=new Array(r),u=new Array(r);for(n=0;n<i;++n)o[n]=Uh(t[n],e[n]);for(;n<r;++n)u[n]=e[n];return function(t){for(n=0;n<i;++n)u[n]=o[n](t);return u}},Rh=function(t,e){var n=new Date;return t=+t,e-=t,function(r){return n.setTime(t+e*r),n}},Ih=function(t,e){return t=+t,e-=t,function(n){return t+e*n}},Lh=function(t,e){var n,r={},i={};null!==t&&"object"===(void 0===t?"undefined":u(t))||(t={}),null!==e&&"object"===(void 0===e?"undefined":u(e))||(e={});for(n in e)n in t?r[n]=Uh(t[n],e[n]):i[n]=e[n];return function(t){for(n in r)i[n]=r[n](t);return i}},zh=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Bh=new RegExp(zh.source,"g"),qh=function(t,e){var n,r,i,o=zh.lastIndex=Bh.lastIndex=0,u=-1,a=[],s=[];for(t+="",e+="";(n=zh.exec(t))&&(r=Bh.exec(e));)(i=r.index)>o&&(i=e.slice(o,i),a[u]?a[u]+=i:a[++u]=i),(n=n[0])===(r=r[0])?a[u]?a[u]+=r:a[++u]=r:(a[++u]=null,s.push({i:u,x:Ih(n,r)})),o=Bh.lastIndex;return o<e.length&&(i=e.slice(o),a[u]?a[u]+=i:a[++u]=i),a.length<2?s[0]?ae(s[0].x):ue(e):(e=s.length,function(t){for(var n,r=0;r<e;++r)a[(n=s[r]).i]=n.x(t);return a.join("")})},Uh=function(t,e){var n,r=void 0===e?"undefined":u(e);return null==e||"boolean"===r?kh(e):("number"===r?Ih:"string"===r?(n=Ot(e))?(e=n,Nh):qh:e instanceof Ot?Nh:e instanceof Date?Rh:Array.isArray(e)?Vh:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?Lh:Ih)(t,e)},Kh=function(t,e){return t=+t,e-=t,function(n){return Math.round(t+e*n)}},Hh=180/Math.PI,Wh={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},Yh=function(t,e,n,r,i,o){var u,a,s;return(u=Math.sqrt(t*t+e*e))&&(t/=u,e/=u),(s=t*n+e*r)&&(n-=t*s,r-=e*s),(a=Math.sqrt(n*n+r*r))&&(n/=a,r/=a,s/=a),t*r<e*n&&(t=-t,e=-e,s=-s,u=-u),{translateX:i,translateY:o,rotate:Math.atan2(e,t)*Hh,skewX:Math.atan(s)*Hh,scaleX:u,scaleY:a}},Xh=ce(se,"px, ","px)","deg)"),$h=ce(le,", ",")",")"),Gh=Math.SQRT2,Zh=function(t,e){var n,r,i=t[0],o=t[1],u=t[2],a=e[0],s=e[1],l=e[2],c=a-i,f=s-o,h=c*c+f*f;if(h<1e-12)r=Math.log(l/u)/Gh,n=function(t){return[i+t*c,o+t*f,u*Math.exp(Gh*t*r)]};else{var p=Math.sqrt(h),d=(l*l-u*u+4*h)/(2*u*2*p),v=(l*l-u*u-4*h)/(2*l*2*p),m=Math.log(Math.sqrt(d*d+1)-d),y=Math.log(Math.sqrt(v*v+1)-v);r=(y-m)/Gh,n=function(t){var e=t*r,n=fe(m),a=u/(2*p)*(n*pe(Gh*e+m)-he(m));return[i+a*c,o+a*f,u*n/fe(Gh*e+m)]}}return n.duration=1e3*r,n},Jh=de(ne),Qh=de(ie),tp=me(ne),ep=me(ie),np=ye(ne),rp=ye(ie),ip=function(t,e){for(var n=new Array(e),r=0;r<e;++r)n[r]=t(r/(e-1));return n},op=0,up=0,ap=0,sp=1e3,lp=0,cp=0,fp=0,hp="object"===("undefined"==typeof performance?"undefined":u(performance))&&performance.now?performance:Date,pp="object"===("undefined"==typeof window?"undefined":u(window))&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};be.prototype=xe.prototype={constructor:be,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?ge():+n)+(null==e?0:+e),this._next||Oh===this||(Oh?Oh._next=this:Ah=this,Oh=this),this._call=t,this._time=n,Ce()},stop:function(){this._call&&(this._call=null,this._time=1/0,Ce())}};var dp=function(t,e,n){var r=new be;return e=null==e?0:+e,r.restart(function(n){r.stop(),t(n+e)},e,n),r},vp=function(t,e,n){var r=new be,i=e;return null==e?(r.restart(t,e,n),r):(e=+e,n=null==n?ge():+n,r.restart(function o(u){u+=i,r.restart(o,i+=e,n),t(u)},e,n),r)},mp=y("start","end","interrupt"),yp=[],gp=0,_p=1,bp=2,xp=3,wp=4,Ep=5,Mp=6,Fp=function(t,e,n,r,i,o){var u=t.__transition;if(u){if(n in u)return}else t.__transition={};Te(t,n,{name:e,index:r,group:i,on:mp,tween:yp,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:gp})},Cp=function(t,e){var n,r,i,o=t.__transition,u=!0;if(o){e=null==e?null:e+"";for(i in o)(n=o[i]).name===e?(r=n.state>bp&&n.state<Ep,n.state=Mp,n.timer.stop(),r&&n.on.call("interrupt",t,t.__data__,n.index,n.group),delete o[i]):u=!1;u&&delete t.__transition}},Sp=function(t){return this.each(function(){Cp(this,t)})},Ap=function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,i=Oe(this.node(),n).tween,o=0,u=i.length;o<u;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==e?De:ke)(n,t,e))},Op=function(t,e){var n;return("number"==typeof e?Ih:e instanceof Ot?Nh:(n=Ot(e))?(e=n,Nh):qh)(t,e)},Tp=function(t,e){var n=Wc(t),r="transform"===n?$h:Op;return this.attrTween(t,"function"==typeof e?(n.local?Le:Ie)(n,r,Ne(this,"attr."+t,e)):null==e?(n.local?Pe:je)(n):(n.local?Re:Ve)(n,r,e+""))},Dp=function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=Wc(t);return this.tween(n,(r.local?ze:Be)(r,e))},kp=function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?qe:Ue)(e,t)):Oe(this.node(),e).delay},Np=function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Ke:He)(e,t)):Oe(this.node(),e).duration},jp=function(t){var e=this._id;return arguments.length?this.each(We(e,t)):Oe(this.node(),e).ease},Pp=function(t){"function"!=typeof t&&(t=Jc(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,u=e[i],a=u.length,s=r[i]=[],l=0;l<a;++l)(o=u[l])&&t.call(o,o.__data__,l,u)&&s.push(o);return new rn(r,this._parents,this._name,this._id)},Vp=function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),u=new Array(r),a=0;a<o;++a)for(var s,l=e[a],c=n[a],f=l.length,h=u[a]=new Array(f),p=0;p<f;++p)(s=l[p]||c[p])&&(h[p]=s);for(;a<r;++a)u[a]=e[a];return new rn(u,this._parents,this._name,this._id)},Rp=function(t,e){var n=this._id;return arguments.length<2?Oe(this.node(),n).on.on(t):this.each(Xe(n,t,e))},Ip=function(){return this.on("end.remove",$e(this._id))},Lp=function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=of(t));for(var r=this._groups,i=r.length,o=new Array(i),u=0;u<i;++u)for(var a,s,l=r[u],c=l.length,f=o[u]=new Array(c),h=0;h<c;++h)(a=l[h])&&(s=t.call(a,a.__data__,h,l))&&("__data__"in a&&(s.__data__=a.__data__),f[h]=s,Fp(f[h],e,n,h,f,Oe(a,n)));return new rn(o,this._parents,e,n)},zp=function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=af(t));for(var r=this._groups,i=r.length,o=[],u=[],a=0;a<i;++a)for(var s,l=r[a],c=l.length,f=0;f<c;++f)if(s=l[f]){for(var h,p=t.call(s,s.__data__,f,l),d=Oe(s,n),v=0,m=p.length;v<m;++v)(h=p[v])&&Fp(h,e,n,v,p,d);o.push(p),u.push(s)}return new rn(o,u,e,n)},Bp=_t.prototype.constructor,qp=function(){return new Bp(this._groups,this._parents)},Up=function(t,e,n){var r="transform"==(t+="")?Xh:Op;return null==e?this.styleTween(t,Ge(t,r)).on("end.style."+t,Ze(t)):this.styleTween(t,"function"==typeof e?Qe(t,r,Ne(this,"style."+t,e)):Je(t,r,e+""),n)},Kp=function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,tn(t,e,null==n?"":n))},Hp=function(t){return this.tween("text","function"==typeof t?nn(Ne(this,"text",t)):en(null==t?"":t+""))},Wp=function(){for(var t=this._name,e=this._id,n=un(),r=this._groups,i=r.length,o=0;o<i;++o)for(var u,a=r[o],s=a.length,l=0;l<s;++l)if(u=a[l]){var c=Oe(u,e);Fp(u,t,n,l,a,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new rn(r,this._parents,t,n)},Yp=0,Xp=_t.prototype;rn.prototype=on.prototype={constructor:rn,select:Lp,selectAll:zp,filter:Pp,merge:Vp,selection:qp,transition:Wp,call:Xp.call,nodes:Xp.nodes,node:Xp.node,size:Xp.size,empty:Xp.empty,each:Xp.each,on:Rp,attr:Tp,attrTween:Dp,style:Up,styleTween:Kp,text:Hp,remove:Ip,tween:Ap,delay:kp,duration:Np,ease:jp};var $p=function t(e){function n(t){return Math.pow(t,e)}return e=+e,n.exponent=t,n}(3),Gp=function t(e){function n(t){return 1-Math.pow(1-t,e)}return e=+e,n.exponent=t,n}(3),Zp=function t(e){function n(t){return((t*=2)<=1?Math.pow(t,e):2-Math.pow(2-t,e))/2}return e=+e,n.exponent=t,n}(3),Jp=Math.PI,Qp=Jp/2,td=4/11,ed=6/11,nd=8/11,rd=.75,id=9/11,od=10/11,ud=.9375,ad=21/22,sd=63/64,ld=1/td/td,cd=function t(e){function n(t){return t*t*((e+1)*t-e)}return e=+e,n.overshoot=t,n}(1.70158),fd=function t(e){function n(t){return--t*t*((e+1)*t+e)+1}return e=+e,n.overshoot=t,n}(1.70158),hd=function t(e){function n(t){return((t*=2)<1?t*t*((e+1)*t-e):(t-=2)*t*((e+1)*t+e)+2)/2}return e=+e,n.overshoot=t,n}(1.70158),pd=2*Math.PI,dd=function t(e,n){function r(t){return e*Math.pow(2,10*--t)*Math.sin((i-t)/n)}var i=Math.asin(1/(e=Math.max(1,e)))*(n/=pd);return r.amplitude=function(e){return t(e,n*pd)},r.period=function(n){return t(e,n)},r}(1,.3),vd=function t(e,n){function r(t){return 1-e*Math.pow(2,-10*(t=+t))*Math.sin((t+i)/n)}var i=Math.asin(1/(e=Math.max(1,e)))*(n/=pd);return r.amplitude=function(e){return t(e,n*pd)},r.period=function(n){return t(e,n)},r}(1,.3),md=function t(e,n){function r(t){return((t=2*t-1)<0?e*Math.pow(2,10*t)*Math.sin((i-t)/n):2-e*Math.pow(2,-10*t)*Math.sin((i+t)/n))/2}var i=Math.asin(1/(e=Math.max(1,e)))*(n/=pd);return r.amplitude=function(e){return t(e,n*pd)},r.period=function(n){return t(e,n)},r}(1,.3),yd={time:null,delay:0,duration:250,ease:pn},gd=function(t){var e,n;t instanceof rn?(e=t._id,t=t._name):(e=un(),(n=yd).time=ge(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var u,a=r[o],s=a.length,l=0;l<s;++l)(u=a[l])&&Fp(u,t,e,l,a,n||Cn(u,e));return new rn(r,this._parents,t,e)};_t.prototype.interrupt=Sp,_t.prototype.transition=gd;var _d=[null],bd=function(t,e){var n,r,i=t.__transition;if(i){e=null==e?null:e+"";for(r in i)if((n=i[r]).state>_p&&n.name===e)return new rn([[t]],_d,e,+r)}return null},xd=function(t){return function(){return t}},wd=function(t,e,n){this.target=t,this.type=e,this.selection=n},Ed=function(){t.event.preventDefault(),t.event.stopImmediatePropagation()},Md={name:"drag"},Fd={name:"space"},Cd={name:"handle"},Sd={name:"center"},Ad={name:"x",handles:["e","w"].map(An),input:function(t,e){return t&&[[t[0],e[0][1]],[t[1],e[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},Od={name:"y",handles:["n","s"].map(An),input:function(t,e){return t&&[[e[0][0],t[0]],[e[1][0],t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},Td={name:"xy",handles:["n","e","s","w","nw","ne","se","sw"].map(An),input:function(t){return t},output:function(t){return t}},Dd={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},kd={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},Nd={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},jd={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},Pd={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1},Vd=function(){return Vn(Td)},Rd=Math.cos,Id=Math.sin,Ld=Math.PI,zd=Ld/2,Bd=2*Ld,qd=Math.max,Ud=function(){function t(t){var o,u,a,s,l,c,f=t.length,h=[],p=vc(f),d=[],v=[],m=v.groups=new Array(f),y=new Array(f*f);for(o=0,l=-1;++l<f;){for(u=0,c=-1;++c<f;)u+=t[l][c];h.push(u),d.push(vc(f)),o+=u}for(n&&p.sort(function(t,e){return n(h[t],h[e])}),r&&d.forEach(function(e,n){e.sort(function(e,i){return r(t[n][e],t[n][i])})}),o=qd(0,Bd-e*f)/o,s=o?e:Bd/f,u=0,l=-1;++l<f;){for(a=u,c=-1;++c<f;){var g=p[l],_=d[g][c],b=t[g][_],x=u,w=u+=b*o;y[_*f+g]={index:g,subindex:_,startAngle:x,endAngle:w,value:b}}m[g]={index:g,startAngle:a,endAngle:u,value:h[g]},u+=s}for(l=-1;++l<f;)for(c=l-1;++c<f;){var E=y[c*f+l],M=y[l*f+c];(E.value||M.value)&&v.push(E.value<M.value?{source:M,target:E}:{source:E,target:M})}return i?v.sort(i):v}var e=0,n=null,r=null,i=null;return t.padAngle=function(n){return arguments.length?(e=qd(0,n),t):e},t.sortGroups=function(e){return arguments.length?(n=e,t):n},t.sortSubgroups=function(e){return arguments.length?(r=e,t):r},t.sortChords=function(e){return arguments.length?(null==e?i=null:(i=Rn(e))._=e,t):i&&i._},t},Kd=Array.prototype.slice,Hd=function(t){return function(){return t}},Wd=Math.PI,Yd=2*Wd,Xd=Yd-1e-6;In.prototype=Ln.prototype={constructor:In,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,i,o){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,e,n,r,i){t=+t,e=+e,n=+n,r=+r,i=+i;var o=this._x1,u=this._y1,a=n-t,s=r-e,l=o-t,c=u-e,f=l*l+c*c;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(f>1e-6)if(Math.abs(c*a-s*l)>1e-6&&i){var h=n-o,p=r-u,d=a*a+s*s,v=h*h+p*p,m=Math.sqrt(d),y=Math.sqrt(f),g=i*Math.tan((Wd-Math.acos((d+f-v)/(2*m*y)))/2),_=g/y,b=g/m;Math.abs(_-1)>1e-6&&(this._+="L"+(t+_*l)+","+(e+_*c)),this._+="A"+i+","+i+",0,0,"+ +(c*h>l*p)+","+(this._x1=t+b*a)+","+(this._y1=e+b*s)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,r,i,o){t=+t,e=+e,n=+n;var u=n*Math.cos(r),a=n*Math.sin(r),s=t+u,l=e+a,c=1^o,f=o?r-i:i-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+s+","+l:(Math.abs(this._x1-s)>1e-6||Math.abs(this._y1-l)>1e-6)&&(this._+="L"+s+","+l),n&&(f<0&&(f=f%Yd+Yd),f>Xd?this._+="A"+n+","+n+",0,1,"+c+","+(t-u)+","+(e-a)+"A"+n+","+n+",0,1,"+c+","+(this._x1=s)+","+(this._y1=l):f>1e-6&&(this._+="A"+n+","+n+",0,"+ +(f>=Wd)+","+c+","+(this._x1=t+n*Math.cos(i))+","+(this._y1=e+n*Math.sin(i))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};var $d=function(){function t(){var t,a=Kd.call(arguments),s=e.apply(this,a),l=n.apply(this,a),c=+r.apply(this,(a[0]=s,a)),f=i.apply(this,a)-zd,h=o.apply(this,a)-zd,p=c*Rd(f),d=c*Id(f),v=+r.apply(this,(a[0]=l,a)),m=i.apply(this,a)-zd,y=o.apply(this,a)-zd;if(u||(u=t=Ln()),u.moveTo(p,d),u.arc(0,0,c,f,h),f===m&&h===y||(u.quadraticCurveTo(0,0,v*Rd(m),v*Id(m)),u.arc(0,0,v,m,y)),u.quadraticCurveTo(0,0,p,d),u.closePath(),t)return u=null,t+""||null}var e=zn,n=Bn,r=qn,i=Un,o=Kn,u=null;return t.radius=function(e){return arguments.length?(r="function"==typeof e?e:Hd(+e),t):r},t.startAngle=function(e){return arguments.length?(i="function"==typeof e?e:Hd(+e),t):i},t.endAngle=function(e){return arguments.length?(o="function"==typeof e?e:Hd(+e),t):o},t.source=function(n){return arguments.length?(e=n,t):e},t.target=function(e){return arguments.length?(n=e,t):n},t.context=function(e){return arguments.length?(u=null==e?null:e,t):u},t};Hn.prototype=Wn.prototype={constructor:Hn,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,e){return this["$"+t]=e,this},remove:function(t){var e="$"+t;return e in this&&delete this[e]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)"$"===e[0]&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)"$"===e[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var e in this)"$"===e[0]&&t(this[e],e.slice(1),this)}};var Gd=function(){function t(e,i,u,a){if(i>=o.length)return null!=n&&e.sort(n),null!=r?r(e):e;for(var s,l,c,f=-1,h=e.length,p=o[i++],d=Wn(),v=u();++f<h;)(c=d.get(s=p(l=e[f])+""))?c.push(l):d.set(s,[l]);return d.each(function(e,n){a(v,n,t(e,i,u,a))}),v}function e(t,n){if(++n>o.length)return t;var i,a=u[n-1];return null!=r&&n>=o.length?i=t.entries():(i=[],t.each(function(t,r){i.push({key:r,values:e(t,n)})})),null!=a?i.sort(function(t,e){return a(t.key,e.key)}):i}var n,r,i,o=[],u=[];return i={object:function(e){return t(e,0,Yn,Xn)},map:function(e){return t(e,0,$n,Gn)},entries:function(n){return e(t(n,0,$n,Gn),0)},key:function(t){return o.push(t),i},sortKeys:function(t){return u[o.length-1]=t,i},sortValues:function(t){return n=t,i},rollup:function(t){return r=t,i}}},Zd=Wn.prototype;Zn.prototype=Jn.prototype={constructor:Zn,has:Zd.has,add:function(t){return t+="",this["$"+t]=t,this},remove:Zd.remove,clear:Zd.clear,values:Zd.keys,size:Zd.size,empty:Zd.empty,each:Zd.each};var Jd=function(t){var e=[];for(var n in t)e.push(n);return e},Qd=function(t){var e=[];for(var n in t)e.push(t[n]);return e},tv=function(t){var e=[];for(var n in t)e.push({key:n,value:t[n]});return e},ev=function(t){function e(t,e){var r,i,o=n(t,function(t,n){if(r)return r(t,n-1);i=t,r=e?tr(t,e):Qn(t)});return o.columns=i,o}function n(t,e){function n(){if(c>=l)return u;if(i)return i=!1,o;var e,n=c;if(34===t.charCodeAt(n)){for(var r=n;r++<l;)if(34===t.charCodeAt(r)){if(34!==t.charCodeAt(r+1))break;++r}return c=r+2,e=t.charCodeAt(r+1),13===e?(i=!0,10===t.charCodeAt(r+2)&&++c):10===e&&(i=!0),t.slice(n+1,r).replace(/""/g,'"')}for(;c<l;){var a=1;if(10===(e=t.charCodeAt(c++)))i=!0;else if(13===e)i=!0,10===t.charCodeAt(c)&&(++c,++a);else if(e!==s)continue;return t.slice(n,c-a)}return t.slice(n)}for(var r,i,o={},u={},a=[],l=t.length,c=0,f=0;(r=n())!==u;){for(var h=[];r!==o&&r!==u;)h.push(r),r=n();e&&null==(h=e(h,f++))||a.push(h)}return a}function r(e,n){return null==n&&(n=er(e)),[n.map(u).join(t)].concat(e.map(function(e){return n.map(function(t){return u(e[t])}).join(t)})).join("\n")}function i(t){return t.map(o).join("\n")}function o(e){return e.map(u).join(t)}function u(t){return null==t?"":a.test(t+="")?'"'+t.replace(/\"/g,'""')+'"':t}var a=new RegExp('["'+t+"\n\r]"),s=t.charCodeAt(0);return{parse:e,parseRows:n,format:r,formatRows:i}},nv=ev(","),rv=nv.parse,iv=nv.parseRows,ov=nv.format,uv=nv.formatRows,av=ev("\t"),sv=av.parse,lv=av.parseRows,cv=av.format,fv=av.formatRows,hv=function(t,e){function n(){var n,i,o=r.length,u=0,a=0;for(n=0;n<o;++n)i=r[n],u+=i.x,a+=i.y;for(u=u/o-t,a=a/o-e,n=0;n<o;++n)i=r[n],i.x-=u,i.y-=a}var r;return null==t&&(t=0),null==e&&(e=0),n.initialize=function(t){r=t},n.x=function(e){return arguments.length?(t=+e,n):t},n.y=function(t){return arguments.length?(e=+t,n):e},n},pv=function(t){return function(){return t}},dv=function(){return 1e-6*(Math.random()-.5)},vv=function(t){var e=+this._x.call(null,t),n=+this._y.call(null,t);return nr(this.cover(e,n),e,n,t)},mv=function(t,e){if(isNaN(t=+t)||isNaN(e=+e))return this;var n=this._x0,r=this._y0,i=this._x1,o=this._y1;if(isNaN(n))i=(n=Math.floor(t))+1,o=(r=Math.floor(e))+1;else{if(!(n>t||t>i||r>e||e>o))return this;var u,a,s=i-n,l=this._root;switch(a=(e<(r+o)/2)<<1|t<(n+i)/2){case 0:do{u=new Array(4),u[a]=l,l=u}while(s*=2,i=n+s,o=r+s,t>i||e>o);break;case 1:do{u=new Array(4),u[a]=l,l=u}while(s*=2,n=i-s,o=r+s,n>t||e>o);break;case 2:do{u=new Array(4),u[a]=l,l=u}while(s*=2,i=n+s,r=o-s,t>i||r>e);break;case 3:do{u=new Array(4),u[a]=l,l=u}while(s*=2,n=i-s,r=o-s,n>t||r>e)}this._root&&this._root.length&&(this._root=l)}return this._x0=n,this._y0=r,this._x1=i,this._y1=o,this},yv=function(){var t=[];return this.visit(function(e){if(!e.length)do{t.push(e.data)}while(e=e.next)}),t},gv=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},_v=function(t,e,n,r,i){this.node=t,this.x0=e,this.y0=n,this.x1=r,this.y1=i},bv=function(t,e,n){var r,i,o,u,a,s,l,c=this._x0,f=this._y0,h=this._x1,p=this._y1,d=[],v=this._root;for(v&&d.push(new _v(v,c,f,h,p)),null==n?n=1/0:(c=t-n,f=e-n,h=t+n,p=e+n,n*=n);s=d.pop();)if(!(!(v=s.node)||(i=s.x0)>h||(o=s.y0)>p||(u=s.x1)<c||(a=s.y1)<f))if(v.length){var m=(i+u)/2,y=(o+a)/2;d.push(new _v(v[3],m,y,u,a),new _v(v[2],i,y,m,a),new _v(v[1],m,o,u,y),new _v(v[0],i,o,m,y)),(l=(e>=y)<<1|t>=m)&&(s=d[d.length-1],d[d.length-1]=d[d.length-1-l],d[d.length-1-l]=s)}else{var g=t-+this._x.call(null,v.data),_=e-+this._y.call(null,v.data),b=g*g+_*_;if(b<n){var x=Math.sqrt(n=b);c=t-x,f=e-x,h=t+x,p=e+x,r=v.data}}return r},xv=function(t){if(isNaN(o=+this._x.call(null,t))||isNaN(u=+this._y.call(null,t)))return this;var e,n,r,i,o,u,a,s,l,c,f,h,p=this._root,d=this._x0,v=this._y0,m=this._x1,y=this._y1;if(!p)return this;if(p.length)for(;;){if((l=o>=(a=(d+m)/2))?d=a:m=a,(c=u>=(s=(v+y)/2))?v=s:y=s,e=p,!(p=p[f=c<<1|l]))return this;if(!p.length)break;(e[f+1&3]||e[f+2&3]||e[f+3&3])&&(n=e,h=f)}for(;p.data!==t;)if(r=p,!(p=p.next))return this;return(i=p.next)&&delete p.next,r?(i?r.next=i:delete r.next,this):e?(i?e[f]=i:delete e[f],(p=e[0]||e[1]||e[2]||e[3])&&p===(e[3]||e[2]||e[1]||e[0])&&!p.length&&(n?n[h]=p:this._root=p),this):(this._root=i,this)},wv=function(){return this._root},Ev=function(){var t=0;return this.visit(function(e){if(!e.length)do{++t}while(e=e.next)}),t},Mv=function(t){var e,n,r,i,o,u,a=[],s=this._root;for(s&&a.push(new _v(s,this._x0,this._y0,this._x1,this._y1));e=a.pop();)if(!t(s=e.node,r=e.x0,i=e.y0,o=e.x1,u=e.y1)&&s.length){var l=(r+o)/2,c=(i+u)/2;(n=s[3])&&a.push(new _v(n,l,c,o,u)),(n=s[2])&&a.push(new _v(n,r,c,l,u)),(n=s[1])&&a.push(new _v(n,l,i,o,c)),(n=s[0])&&a.push(new _v(n,r,i,l,c))}return this},Fv=function(t){var e,n=[],r=[];for(this._root&&n.push(new _v(this._root,this._x0,this._y0,this._x1,this._y1));e=n.pop();){var i=e.node;if(i.length){var o,u=e.x0,a=e.y0,s=e.x1,l=e.y1,c=(u+s)/2,f=(a+l)/2;(o=i[0])&&n.push(new _v(o,u,a,c,f)),(o=i[1])&&n.push(new _v(o,c,a,s,f)),(o=i[2])&&n.push(new _v(o,u,f,c,l)),(o=i[3])&&n.push(new _v(o,c,f,s,l))}r.push(e)}for(;e=r.pop();)t(e.node,e.x0,e.y0,e.x1,e.y1);return this},Cv=function(t){return arguments.length?(this._x=t,this):this._x},Sv=function(t){return arguments.length?(this._y=t,this):this._y},Av=ar.prototype=sr.prototype;Av.copy=function(){var t,e,n=new sr(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return n;if(!r.length)return n._root=lr(r),n;for(t=[{source:r,target:n._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(e=r.source[i])&&(e.length?t.push({source:e,target:r.target[i]=new Array(4)}):r.target[i]=lr(e));return n},Av.add=vv,Av.addAll=rr,Av.cover=mv,Av.data=yv,Av.extent=gv,Av.find=bv,Av.remove=xv,Av.removeAll=ir,Av.root=wv,Av.size=Ev,Av.visit=Mv,Av.visitAfter=Fv,Av.x=Cv,Av.y=Sv;var Ov,Tv=function(t){function e(){function t(t,e,n,r,i){var o=t.data,a=t.r,p=f+a;{if(!o)return e>l+p||r<l-p||n>c+p||i<c-p;if(o.index>s.index){var d=l-o.x-o.vx,v=c-o.y-o.vy,m=d*d+v*v;m<p*p&&(0===d&&(d=dv(),m+=d*d),0===v&&(v=dv(),m+=v*v),m=(p-(m=Math.sqrt(m)))/m*u,s.vx+=(d*=m)*(p=(a*=a)/(h+a)),s.vy+=(v*=m)*p,o.vx-=d*(p=1-p),o.vy-=v*p)}}}for(var e,r,s,l,c,f,h,p=i.length,d=0;d<a;++d)for(r=ar(i,cr,fr).visitAfter(n),e=0;e<p;++e)s=i[e],f=o[s.index],h=f*f,l=s.x+s.vx,c=s.y+s.vy,r.visit(t)}function n(t){if(t.data)return t.r=o[t.data.index];for(var e=t.r=0;e<4;++e)t[e]&&t[e].r>t.r&&(t.r=t[e].r)}function r(){if(i){var e,n,r=i.length;for(o=new Array(r),e=0;e<r;++e)n=i[e],o[n.index]=+t(n,e,i)}}var i,o,u=1,a=1;return"function"!=typeof t&&(t=pv(null==t?1:+t)),e.initialize=function(t){i=t,r()},e.iterations=function(t){return arguments.length?(a=+t,e):a},e.strength=function(t){return arguments.length?(u=+t,e):u},e.radius=function(n){return arguments.length?(t="function"==typeof n?n:pv(+n),r(),e):t},e},Dv=function(t){function e(t){return 1/Math.min(c[t.source.index],c[t.target.index])}function n(e){for(var n=0,r=t.length;n<v;++n)for(var i,o,u,l,c,h,p,d=0;d<r;++d)i=t[d],o=i.source,u=i.target,l=u.x+u.vx-o.x-o.vx||dv(),c=u.y+u.vy-o.y-o.vy||dv(),h=Math.sqrt(l*l+c*c),h=(h-s[d])/h*e*a[d],l*=h,c*=h,u.vx-=l*(p=f[d]),u.vy-=c*p,o.vx+=l*(p=1-p),o.vy+=c*p}function r(){if(l){var e,n,r=l.length,p=t.length,d=Wn(l,h);for(e=0,c=new Array(r);e<p;++e)n=t[e],n.index=e,"object"!==u(n.source)&&(n.source=pr(d,n.source)),"object"!==u(n.target)&&(n.target=pr(d,n.target)),c[n.source.index]=(c[n.source.index]||0)+1,c[n.target.index]=(c[n.target.index]||0)+1;for(e=0,f=new Array(p);e<p;++e)n=t[e],f[e]=c[n.source.index]/(c[n.source.index]+c[n.target.index]);a=new Array(p),i(),s=new Array(p),o()}}function i(){if(l)for(var e=0,n=t.length;e<n;++e)a[e]=+p(t[e],e,t)}function o(){if(l)for(var e=0,n=t.length;e<n;++e)s[e]=+d(t[e],e,t)}var a,s,l,c,f,h=hr,p=e,d=pv(30),v=1;return null==t&&(t=[]),n.initialize=function(t){l=t,r()},n.links=function(e){return arguments.length?(t=e,r(),n):t},n.id=function(t){return arguments.length?(h=t,n):h},n.iterations=function(t){return arguments.length?(v=+t,n):v},n.strength=function(t){return arguments.length?(p="function"==typeof t?t:pv(+t),i(),n):p},n.distance=function(t){return arguments.length?(d="function"==typeof t?t:pv(+t),o(),n):d},n},kv=10,Nv=Math.PI*(3-Math.sqrt(5)),jv=function(t){function e(){n(),p.call("tick",o),u<a&&(h.stop(),p.call("end",o))}function n(){var e,n,r=t.length;for(u+=(l-u)*s,f.each(function(t){t(u)}),e=0;e<r;++e)n=t[e],null==n.fx?n.x+=n.vx*=c:(n.x=n.fx,n.vx=0),null==n.fy?n.y+=n.vy*=c:(n.y=n.fy,n.vy=0)}function r(){for(var e,n=0,r=t.length;n<r;++n){if(e=t[n],e.index=n,isNaN(e.x)||isNaN(e.y)){var i=kv*Math.sqrt(n),o=n*Nv;e.x=i*Math.cos(o),e.y=i*Math.sin(o)}(isNaN(e.vx)||isNaN(e.vy))&&(e.vx=e.vy=0)}}function i(e){return e.initialize&&e.initialize(t),e}var o,u=1,a=.001,s=1-Math.pow(a,1/300),l=0,c=.6,f=Wn(),h=xe(e),p=y("tick","end");return null==t&&(t=[]),r(),o={tick:n,restart:function(){return h.restart(e),o},stop:function(){return h.stop(),o},nodes:function(e){return arguments.length?(t=e,r(),f.each(i),o):t},alpha:function(t){return arguments.length?(u=+t,o):u},alphaMin:function(t){return arguments.length?(a=+t,o):a},alphaDecay:function(t){return arguments.length?(s=+t,o):+s},alphaTarget:function(t){return arguments.length?(l=+t,o):l},velocityDecay:function(t){return arguments.length?(c=1-t,o):1-c},force:function(t,e){return arguments.length>1?(null==e?f.remove(t):f.set(t,i(e)),o):f.get(t)},find:function(e,n,r){var i,o,u,a,s,l=0,c=t.length;for(null==r?r=1/0:r*=r,l=0;l<c;++l)a=t[l],i=e-a.x,o=n-a.y,(u=i*i+o*o)<r&&(s=a,r=u);return s},on:function(t,e){return arguments.length>1?(p.on(t,e),o):p.on(t)}}},Pv=function(){function t(t){var e,a=i.length,s=ar(i,dr,vr).visitAfter(n);for(u=t,e=0;e<a;++e)o=i[e],s.visit(r)}function e(){if(i){var t,e,n=i.length;for(a=new Array(n),t=0;t<n;++t)e=i[t],a[e.index]=+s(e,t,i)}}function n(t){var e,n,r,i,o,u=0;if(t.length){for(r=i=o=0;o<4;++o)(e=t[o])&&(n=e.value)&&(u+=n,r+=n*e.x,i+=n*e.y);t.x=r/u,t.y=i/u}else{e=t,e.x=e.data.x,e.y=e.data.y;do{u+=a[e.data.index]}while(e=e.next)}t.value=u}function r(t,e,n,r){if(!t.value)return!0;var i=t.x-o.x,s=t.y-o.y,h=r-e,p=i*i+s*s;if(h*h/f<p)return p<c&&(0===i&&(i=dv(),p+=i*i),0===s&&(s=dv(),p+=s*s),p<l&&(p=Math.sqrt(l*p)),o.vx+=i*t.value*u/p,o.vy+=s*t.value*u/p),!0;if(!(t.length||p>=c)){(t.data!==o||t.next)&&(0===i&&(i=dv(),p+=i*i),0===s&&(s=dv(),p+=s*s),p<l&&(p=Math.sqrt(l*p)));do{t.data!==o&&(h=a[t.data.index]*u/p,o.vx+=i*h,o.vy+=s*h)}while(t=t.next)}}var i,o,u,a,s=pv(-30),l=1,c=1/0,f=.81;return t.initialize=function(t){i=t,e()},t.strength=function(n){return arguments.length?(s="function"==typeof n?n:pv(+n),e(),t):s},t.distanceMin=function(e){return arguments.length?(l=e*e,t):Math.sqrt(l)},t.distanceMax=function(e){return arguments.length?(c=e*e,t):Math.sqrt(c)},t.theta=function(e){return arguments.length?(f=e*e,t):Math.sqrt(f)},t},Vv=function(t){function e(t){for(var e,n=0,u=r.length;n<u;++n)e=r[n],e.vx+=(o[n]-e.x)*i[n]*t}function n(){if(r){var e,n=r.length;for(i=new Array(n),o=new Array(n),e=0;e<n;++e)i[e]=isNaN(o[e]=+t(r[e],e,r))?0:+u(r[e],e,r)}}var r,i,o,u=pv(.1);return"function"!=typeof t&&(t=pv(null==t?0:+t)),e.initialize=function(t){r=t,n()},e.strength=function(t){return arguments.length?(u="function"==typeof t?t:pv(+t),n(),e):u},e.x=function(r){return arguments.length?(t="function"==typeof r?r:pv(+r),n(),e):t},e},Rv=function(t){function e(t){for(var e,n=0,u=r.length;n<u;++n)e=r[n],e.vy+=(o[n]-e.y)*i[n]*t}function n(){if(r){var e,n=r.length;for(i=new Array(n),o=new Array(n),e=0;e<n;++e)i[e]=isNaN(o[e]=+t(r[e],e,r))?0:+u(r[e],e,r)}}var r,i,o,u=pv(.1);return"function"!=typeof t&&(t=pv(null==t?0:+t)),e.initialize=function(t){r=t,n()},e.strength=function(t){return arguments.length?(u="function"==typeof t?t:pv(+t),n(),e):u},e.y=function(r){return arguments.length?(t="function"==typeof r?r:pv(+r),n(),e):t},e},Iv=function(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]},Lv=function(t){return t=Iv(Math.abs(t)),t?t[1]:NaN},zv=function(t,e){return function(n,r){for(var i=n.length,o=[],u=0,a=t[0],s=0;i>0&&a>0&&(s+a+1>r&&(a=Math.max(1,r-s)),o.push(n.substring(i-=a,i+a)),!((s+=a+1)>r));)a=t[u=(u+1)%t.length];return o.reverse().join(e)}},Bv=function(t){return function(e){return e.replace(/[0-9]/g,function(e){return t[+e]})}},qv=function(t,e){t=t.toPrecision(e);t:for(var n,r=t.length,i=1,o=-1;i<r;++i)switch(t[i]){case".":o=n=i;break;case"0":0===o&&(o=i),n=i;break;case"e":break t;default:o>0&&(o=0)}return o>0?t.slice(0,o)+t.slice(n+1):t},Uv=function(t,e){var n=Iv(t,e);if(!n)return t+"";var r=n[0],i=n[1],o=i-(Ov=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,u=r.length;return o===u?r:o>u?r+new Array(o-u+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+Iv(t,Math.max(0,e+o-1))[0]},Kv=function(t,e){var n=Iv(t,e);if(!n)return t+"";var r=n[0],i=n[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},Hv={"":qv,"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return Kv(100*t,e)},r:Kv,s:Uv,X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},Wv=/^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;mr.prototype=yr.prototype,yr.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+this.type};var Yv,Xv=function(t){return t},$v=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"],Gv=function(t){function e(t){function e(t){var e,i,a,c=m,b=y;if("c"===v)b=g(t)+b,t="";else{t=+t;var x=t<0;if(t=g(Math.abs(t),d),x&&0==+t&&(x=!1),c=(x?"("===l?l:"-":"-"===l||"("===l?"":l)+c,b=b+("s"===v?$v[8+Ov/3]:"")+(x&&"("===l?")":""),_)for(e=-1,i=t.length;++e<i;)if(48>(a=t.charCodeAt(e))||a>57){b=(46===a?o+t.slice(e+1):t.slice(e))+b,t=t.slice(0,e);break}}p&&!f&&(t=r(t,1/0));var w=c.length+t.length+b.length,E=w<h?new Array(h-w+1).join(n):"";switch(p&&f&&(t=r(E+t,E.length?h-b.length:1/0),E=""),s){case"<":t=c+t+b+E;break;case"=":t=c+E+t+b;break;case"^":t=E.slice(0,w=E.length>>1)+c+t+b+E.slice(w);break;default:t=E+c+t+b}return u(t)}t=mr(t);var n=t.fill,s=t.align,l=t.sign,c=t.symbol,f=t.zero,h=t.width,p=t.comma,d=t.precision,v=t.type,m="$"===c?i[0]:"#"===c&&/[boxX]/.test(v)?"0"+v.toLowerCase():"",y="$"===c?i[1]:/[%p]/.test(v)?a:"",g=Hv[v],_=!v||/[defgprs%]/.test(v);return d=null==d?v?6:12:/[gprs]/.test(v)?Math.max(1,Math.min(21,d)):Math.max(0,Math.min(20,d)),e.toString=function(){return t+""},e}function n(t,n){var r=e((t=mr(t),t.type="f",t)),i=3*Math.max(-8,Math.min(8,Math.floor(Lv(n)/3))),o=Math.pow(10,-i),u=$v[8+i/3];return function(t){return r(o*t)+u}}var r=t.grouping&&t.thousands?zv(t.grouping,t.thousands):Xv,i=t.currency,o=t.decimal,u=t.numerals?Bv(t.numerals):Xv,a=t.percent||"%";return{format:e,formatPrefix:n}};gr({decimal:".",thousands:",",grouping:[3],currency:["$",""]});var Zv=function(t){return Math.max(0,-Lv(Math.abs(t)))},Jv=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Lv(e)/3)))-Lv(Math.abs(t)))},Qv=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,Lv(e)-Lv(t))+1},tm=function(){return new _r};_r.prototype={constructor:_r,reset:function(){this.s=this.t=0},add:function(t){br(km,t,this.t),br(this,km.s,this.s),this.s?this.t+=km.t:this.s=km.t},valueOf:function(){return this.s}};var em,nm,rm,im,om,um,am,sm,lm,cm,fm,hm,pm,dm,vm,mm,ym,gm,_m,bm,xm,wm,Em,Mm,Fm,Cm,Sm,Am,Om,Tm,Dm,km=new _r,Nm=1e-6,jm=Math.PI,Pm=jm/2,Vm=jm/4,Rm=2*jm,Im=180/jm,Lm=jm/180,zm=Math.abs,Bm=Math.atan,qm=Math.atan2,Um=Math.cos,Km=Math.ceil,Hm=Math.exp,Wm=Math.log,Ym=Math.pow,Xm=Math.sin,$m=Math.sign||function(t){return t>0?1:t<0?-1:0},Gm=Math.sqrt,Zm=Math.tan,Jm={Feature:function(t,e){Fr(t.geometry,e)},FeatureCollection:function(t,e){for(var n=t.features,r=-1,i=n.length;++r<i;)Fr(n[r].geometry,e)}},Qm={Sphere:function(t,e){e.sphere()},Point:function(t,e){t=t.coordinates,e.point(t[0],t[1],t[2])},MultiPoint:function(t,e){for(var n=t.coordinates,r=-1,i=n.length;++r<i;)t=n[r],e.point(t[0],t[1],t[2])},LineString:function(t,e){Cr(t.coordinates,e,0)},MultiLineString:function(t,e){for(var n=t.coordinates,r=-1,i=n.length;++r<i;)Cr(n[r],e,0)},Polygon:function(t,e){Sr(t.coordinates,e)},MultiPolygon:function(t,e){for(var n=t.coordinates,r=-1,i=n.length;++r<i;)Sr(n[r],e)},GeometryCollection:function(t,e){for(var n=t.geometries,r=-1,i=n.length;++r<i;)Fr(n[r],e)}},ty=function(t,e){t&&Jm.hasOwnProperty(t.type)?Jm[t.type](t,e):Fr(t,e)},ey=tm(),ny=tm(),ry={point:Mr,lineStart:Mr,lineEnd:Mr,polygonStart:function(){ey.reset(),ry.lineStart=Ar,ry.lineEnd=Or},polygonEnd:function(){var t=+ey;ny.add(t<0?Rm+t:t),this.lineStart=this.lineEnd=this.point=Mr},sphere:function(){ny.add(Rm)}},iy=function(t){return ny.reset(),ty(t,ry),2*ny},oy=tm(),uy={point:Lr,lineStart:Br,lineEnd:qr,polygonStart:function(){uy.point=Ur,uy.lineStart=Kr,uy.lineEnd=Hr,oy.reset(),ry.polygonStart()},polygonEnd:function(){ry.polygonEnd(),uy.point=Lr,uy.lineStart=Br,uy.lineEnd=qr,ey<0?(um=-(sm=180),am=-(lm=90)):oy>Nm?lm=90:oy<-Nm&&(am=-90),vm[0]=um,vm[1]=sm}},ay=function(t){var e,n,r,i,o,u,a;if(lm=sm=-(um=am=1/0),dm=[],ty(t,uy),n=dm.length){for(dm.sort(Yr),e=1,r=dm[0],o=[r];e<n;++e)i=dm[e],Xr(r,i[0])||Xr(r,i[1])?(Wr(r[0],i[1])>Wr(r[0],r[1])&&(r[1]=i[1]),Wr(i[0],r[1])>Wr(r[0],r[1])&&(r[0]=i[0])):o.push(r=i);for(u=-1/0,n=o.length-1,e=0,r=o[n];e<=n;r=i,++e)i=o[e],(a=Wr(r[1],i[0]))>u&&(u=a,um=i[0],sm=r[1])}return dm=vm=null,um===1/0||am===1/0?[[NaN,NaN],[NaN,NaN]]:[[um,am],[sm,lm]]},sy={sphere:Mr,point:$r,lineStart:Zr,lineEnd:ti,polygonStart:function(){sy.lineStart=ei,sy.lineEnd=ni},polygonEnd:function(){sy.lineStart=Zr,sy.lineEnd=ti}},ly=function(t){mm=ym=gm=_m=bm=xm=wm=Em=Mm=Fm=Cm=0,ty(t,sy);var e=Mm,n=Fm,r=Cm,i=e*e+n*n+r*r;return i<1e-12&&(e=xm,n=wm,r=Em,ym<Nm&&(e=gm,n=_m,r=bm),(i=e*e+n*n+r*r)<1e-12)?[NaN,NaN]:[qm(n,e)*Im,wr(r/Gm(i))*Im]},cy=function(t){return function(){return t}},fy=function(t,e){function n(n,r){return n=t(n,r),e(n[0],n[1])}return t.invert&&e.invert&&(n.invert=function(n,r){return(n=e.invert(n,r))&&t.invert(n[0],n[1])}),n};oi.invert=oi;var hy,py,dy,vy,my,yy,gy,_y,by,xy,wy,Ey=function(t){function e(e){return e=t(e[0]*Lm,e[1]*Lm),e[0]*=Im,e[1]*=Im,e}return t=ui(t[0]*Lm,t[1]*Lm,t.length>2?t[2]*Lm:0),e.invert=function(e){return e=t.invert(e[0]*Lm,e[1]*Lm),e[0]*=Im,e[1]*=Im,e},e},My=function(){function t(t,e){n.push(t=r(t,e)),t[0]*=Im,t[1]*=Im}function e(){var t=i.apply(this,arguments),e=o.apply(this,arguments)*Lm,s=u.apply(this,arguments)*Lm;return n=[],r=ui(-t[0]*Lm,-t[1]*Lm,0).invert,ci(a,e,s,1),t={type:"Polygon",coordinates:[n]},n=r=null,t}var n,r,i=cy([0,0]),o=cy(90),u=cy(6),a={point:t};return e.center=function(t){return arguments.length?(i="function"==typeof t?t:cy([+t[0],+t[1]]),e):i},e.radius=function(t){return arguments.length?(o="function"==typeof t?t:cy(+t),e):o},e.precision=function(t){return arguments.length?(u="function"==typeof t?t:cy(+t),e):u},e},Fy=function(){var t,e=[];return{point:function(e,n){t.push([e,n])},lineStart:function(){e.push(t=[])},lineEnd:Mr,rejoin:function(){e.length>1&&e.push(e.pop().concat(e.shift()))},result:function(){var n=e;return e=[],t=null,n}}},Cy=function(t,e,n,r,i,o){var u,a=t[0],s=t[1],l=e[0],c=e[1],f=0,h=1,p=l-a,d=c-s;if(u=n-a,p||!(u>0)){if(u/=p,p<0){if(u<f)return;u<h&&(h=u)}else if(p>0){if(u>h)return;u>f&&(f=u)}if(u=i-a,p||!(u<0)){if(u/=p,p<0){if(u>h)return;u>f&&(f=u)}else if(p>0){if(u<f)return;u<h&&(h=u)}if(u=r-s,d||!(u>0)){if(u/=d,d<0){if(u<f)return;u<h&&(h=u)}else if(d>0){if(u>h)return;u>f&&(f=u)}if(u=o-s,d||!(u<0)){if(u/=d,d<0){if(u>h)return;u>f&&(f=u)}else if(d>0){if(u<f)return;u<h&&(h=u)}return f>0&&(t[0]=a+f*p,t[1]=s+f*d),h<1&&(e[0]=a+h*p,e[1]=s+h*d),!0}}}}},Sy=function(t,e){return zm(t[0]-e[0])<Nm&&zm(t[1]-e[1])<Nm},Ay=function(t,e,n,r,i){var o,u,a=[],s=[];if(t.forEach(function(t){if(!((e=t.length-1)<=0)){var e,n,r=t[0],u=t[e];if(Sy(r,u)){for(i.lineStart(),o=0;o<e;++o)i.point((r=t[o])[0],r[1]);return void i.lineEnd()}a.push(n=new hi(r,t,null,!0)),s.push(n.o=new hi(r,null,n,!1)),a.push(n=new hi(u,t,null,!1)),s.push(n.o=new hi(u,null,n,!0))}}),a.length){for(s.sort(e),pi(a),pi(s),o=0,u=s.length;o<u;++o)s[o].e=n=!n;for(var l,c,f=a[0];;){for(var h=f,p=!0;h.v;)if((h=h.n)===f)return;l=h.z,i.lineStart();do{if(h.v=h.o.v=!0,h.e){if(p)for(o=0,u=l.length;o<u;++o)i.point((c=l[o])[0],c[1]);else r(h.x,h.n.x,1,i);h=h.n}else{if(p)for(l=h.p.z,o=l.length-1;o>=0;--o)i.point((c=l[o])[0],c[1]);else r(h.x,h.p.x,-1,i);h=h.p}h=h.o,l=h.z,p=!p}while(!h.v);i.lineEnd()}}},Oy=1e9,Ty=-Oy,Dy=function(){var t,e,n,r=0,i=0,o=960,u=500;return n={stream:function(n){return t&&e===n?t:t=di(r,i,o,u)(e=n)},extent:function(a){return arguments.length?(r=+a[0][0],i=+a[0][1],o=+a[1][0],u=+a[1][1],t=e=null,n):[[r,i],[o,u]]}}},ky=tm(),Ny=function(t,e){var n=e[0],r=e[1],i=[Xm(n),-Um(n),0],o=0,u=0;ky.reset();for(var a=0,s=t.length;a<s;++a)if(c=(l=t[a]).length)for(var l,c,f=l[c-1],h=f[0],p=f[1]/2+Vm,d=Xm(p),v=Um(p),m=0;m<c;++m,h=g,d=b,v=x,f=y){var y=l[m],g=y[0],_=y[1]/2+Vm,b=Xm(_),x=Um(_),w=g-h,E=w>=0?1:-1,M=E*w,F=M>jm,C=d*b;if(ky.add(qm(C*E*Xm(M),v*x+C*Um(M))),o+=F?w+E*Rm:w,F^h>=n^g>=n){var S=Pr(Nr(f),Nr(y));Ir(S);var A=Pr(i,S);Ir(A);var O=(F^w>=0?-1:1)*wr(A[2]);(r>O||r===O&&(S[0]||S[1]))&&(u+=F^w>=0?1:-1)}}return(o<-Nm||o<Nm&&ky<-Nm)^1&u},jy=tm(),Py={sphere:Mr,point:Mr,lineStart:vi,lineEnd:Mr,polygonStart:Mr,polygonEnd:Mr},Vy=function(t){return jy.reset(),ty(t,Py),+jy},Ry=[null,null],Iy={type:"LineString",coordinates:Ry},Ly=function(t,e){return Ry[0]=t,Ry[1]=e,Vy(Iy)},zy={Feature:function(t,e){return _i(t.geometry,e)},FeatureCollection:function(t,e){for(var n=t.features,r=-1,i=n.length;++r<i;)if(_i(n[r].geometry,e))return!0;return!1}},By={Sphere:function(){return!0},Point:function(t,e){return bi(t.coordinates,e)},MultiPoint:function(t,e){for(var n=t.coordinates,r=-1,i=n.length;++r<i;)if(bi(n[r],e))return!0;return!1},LineString:function(t,e){return xi(t.coordinates,e)},MultiLineString:function(t,e){for(var n=t.coordinates,r=-1,i=n.length;++r<i;)if(xi(n[r],e))return!0;return!1},Polygon:function(t,e){return wi(t.coordinates,e)},MultiPolygon:function(t,e){for(var n=t.coordinates,r=-1,i=n.length;++r<i;)if(wi(n[r],e))return!0;return!1},GeometryCollection:function(t,e){for(var n=t.geometries,r=-1,i=n.length;++r<i;)if(_i(n[r],e))return!0;return!1}},qy=function(t,e){return(t&&zy.hasOwnProperty(t.type)?zy[t.type]:_i)(t,e)},Uy=function(t,e){var n=t[0]*Lm,r=t[1]*Lm,i=e[0]*Lm,o=e[1]*Lm,u=Um(r),a=Xm(r),s=Um(o),l=Xm(o),c=u*Um(n),f=u*Xm(n),h=s*Um(i),p=s*Xm(i),d=2*wr(Gm(Er(o-r)+u*s*Er(i-n))),v=Xm(d),m=d?function(t){var e=Xm(t*=d)/v,n=Xm(d-t)/v,r=n*c+e*h,i=n*f+e*p,o=n*a+e*l;return[qm(i,r)*Im,qm(o,Gm(r*r+i*i))*Im]}:function(){return[n*Im,r*Im]};return m.distance=d,m},Ky=function(t){return t},Hy=tm(),Wy=tm(),Yy={point:Mr,lineStart:Mr,lineEnd:Mr,polygonStart:function(){Yy.lineStart=Oi,Yy.lineEnd=ki},polygonEnd:function(){Yy.lineStart=Yy.lineEnd=Yy.point=Mr,Hy.add(zm(Wy)),Wy.reset()},result:function(){var t=Hy/2;return Hy.reset(),t}},Xy=1/0,$y=Xy,Gy=-Xy,Zy=Gy,Jy={point:Ni,lineStart:Mr,lineEnd:Mr,polygonStart:Mr,polygonEnd:Mr,result:function(){var t=[[Xy,$y],[Gy,Zy]];return Gy=Zy=-($y=Xy=1/0),t}},Qy=0,tg=0,eg=0,ng=0,rg=0,ig=0,og=0,ug=0,ag=0,sg={point:ji,lineStart:Pi,lineEnd:Ii,polygonStart:function(){sg.lineStart=Li,sg.lineEnd=zi},polygonEnd:function(){sg.point=ji,sg.lineStart=Pi,sg.lineEnd=Ii},result:function(){var t=ag?[og/ag,ug/ag]:ig?[ng/ig,rg/ig]:eg?[Qy/eg,tg/eg]:[NaN,NaN];return Qy=tg=eg=ng=rg=ig=og=ug=ag=0,t}};Ui.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,e){switch(this._point){case 0:this._context.moveTo(t,e),this._point=1;break;case 1:this._context.lineTo(t,e);break;default:this._context.moveTo(t+this._radius,e),this._context.arc(t,e,this._radius,0,Rm)}},result:Mr};var lg,cg,fg,hg,pg,dg=tm(),vg={point:Mr,lineStart:function(){vg.point=Ki},lineEnd:function(){lg&&Hi(cg,fg),vg.point=Mr},polygonStart:function(){lg=!0},polygonEnd:function(){lg=null},result:function(){var t=+dg;return dg.reset(),t}};Wi.prototype={_radius:4.5,_circle:Yi(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,e){switch(this._point){case 0:this._string.push("M",t,",",e),this._point=1;break;case 1:this._string.push("L",t,",",e);break;default:null==this._circle&&(this._circle=Yi(this._radius)),this._string.push("M",t,",",e,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};var mg=function(t,e){function n(t){return t&&("function"==typeof o&&i.pointRadius(+o.apply(this,arguments)),ty(t,r(i))),i.result()}var r,i,o=4.5;return n.area=function(t){return ty(t,r(Yy)),Yy.result()},n.measure=function(t){return ty(t,r(vg)),vg.result()},n.bounds=function(t){return ty(t,r(Jy)),Jy.result()},n.centroid=function(t){return ty(t,r(sg)),sg.result()},n.projection=function(e){return arguments.length?(r=null==e?(t=null,Ky):(t=e).stream,n):t},n.context=function(t){return arguments.length?(i=null==t?(e=null,new Wi):new Ui(e=t),"function"!=typeof o&&i.pointRadius(o),n):e},n.pointRadius=function(t){return arguments.length?(o="function"==typeof t?t:(i.pointRadius(+t),+t),n):o},n.projection(t).context(e)},yg=function(t,e,n,r){return function(i,o){function u(e,n){var r=i(e,n);t(e=r[0],n=r[1])&&o.point(e,n)}function a(t,e){var n=i(t,e);m.point(n[0],n[1])}function s(){x.point=a,m.lineStart()}function l(){x.point=u,m.lineEnd()}function c(t,e){v.push([t,e]);var n=i(t,e);_.point(n[0],n[1])}function f(){_.lineStart(),v=[]}function h(){c(v[0][0],v[0][1]),_.lineEnd();var t,e,n,r,i=_.clean(),u=g.result(),a=u.length;if(v.pop(),p.push(v),v=null,a)if(1&i){if(n=u[0],(e=n.length-1)>0){for(b||(o.polygonStart(),b=!0),o.lineStart(),t=0;t<e;++t)o.point((r=n[t])[0],r[1]);o.lineEnd()}}else a>1&&2&i&&u.push(u.pop().concat(u.shift())),d.push(u.filter(Xi))}var p,d,v,m=e(o),y=i.invert(r[0],r[1]),g=Fy(),_=e(g),b=!1,x={point:u,lineStart:s,lineEnd:l,polygonStart:function(){x.point=c,x.lineStart=f,x.lineEnd=h,d=[],p=[]},polygonEnd:function(){x.point=u,x.lineStart=s,x.lineEnd=l,d=Ac(d);var t=Ny(p,y);d.length?(b||(o.polygonStart(),b=!0),Ay(d,$i,t,n,o)):t&&(b||(o.polygonStart(),b=!0),o.lineStart(),n(null,null,1,o),o.lineEnd()),b&&(o.polygonEnd(),b=!1),d=p=null},sphere:function(){o.polygonStart(),o.lineStart(),n(null,null,1,o),o.lineEnd(),o.polygonEnd()}};return x}},gg=yg(function(){return!0},Gi,Ji,[-jm,-Pm]),_g=function(t,e){function n(n,r,i,o){ci(o,t,e,i,n,r)}function r(t,e){return Um(t)*Um(e)>a}function i(t){var e,n,i,a,c;return{lineStart:function(){a=i=!1,c=1},point:function(f,h){var p,d=[f,h],v=r(f,h),m=s?v?0:u(f,h):v?u(f+(f<0?jm:-jm),h):0;if(!e&&(a=i=v)&&t.lineStart(),v!==i&&(!(p=o(e,d))||Sy(e,p)||Sy(d,p))&&(d[0]+=Nm,d[1]+=Nm,v=r(d[0],d[1])),v!==i)c=0,v?(t.lineStart(),p=o(d,e),t.point(p[0],p[1])):(p=o(e,d),t.point(p[0],p[1]),t.lineEnd()),e=p;else if(l&&e&&s^v){var y;m&n||!(y=o(d,e,!0))||(c=0,s?(t.lineStart(),t.point(y[0][0],y[0][1]),t.point(y[1][0],y[1][1]),t.lineEnd()):(t.point(y[1][0],y[1][1]),t.lineEnd(),t.lineStart(),t.point(y[0][0],y[0][1])))}!v||e&&Sy(e,d)||t.point(d[0],d[1]),e=d,i=v,n=m},lineEnd:function(){i&&t.lineEnd(),e=null},clean:function(){return c|(a&&i)<<1}}}function o(t,e,n){var r=Nr(t),i=Nr(e),o=[1,0,0],u=Pr(r,i),s=jr(u,u),l=u[0],c=s-l*l;if(!c)return!n&&t;var f=a*s/c,h=-a*l/c,p=Pr(o,u),d=Rr(o,f);Vr(d,Rr(u,h));var v=p,m=jr(d,v),y=jr(v,v),g=m*m-y*(jr(d,d)-1);if(!(g<0)){var _=Gm(g),b=Rr(v,(-m-_)/y);if(Vr(b,d),b=kr(b),!n)return b;var x,w=t[0],E=e[0],M=t[1],F=e[1];E<w&&(x=w,w=E,E=x);var C=E-w,S=zm(C-jm)<Nm,A=S||C<Nm;if(!S&&F<M&&(x=M,M=F,F=x),A?S?M+F>0^b[1]<(zm(b[0]-w)<Nm?M:F):M<=b[1]&&b[1]<=F:C>jm^(w<=b[0]&&b[0]<=E)){var O=Rr(v,(-m+_)/y);return Vr(O,d),[b,kr(O)]}}}function u(e,n){var r=s?t:jm-t,i=0;return e<-r?i|=1:e>r&&(i|=2),n<-r?i|=4:n>r&&(i|=8),i}var a=Um(t),s=a>0,l=zm(a)>Nm;return yg(r,i,n,s?[0,-t]:[-jm,t-jm])},bg=function(t){return{stream:Qi(t)}};to.prototype={constructor:to,point:function(t,e){this.stream.point(t,e)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var xg=16,wg=Um(30*Lm),Eg=function(t,e){return+e?io(t,e):ro(t)},Mg=Qi({point:function(t,e){this.stream.point(t*Lm,e*Lm)}}),Fg=function(){return ao(lo).scale(155.424).center([0,33.6442])},Cg=function(){return Fg().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])},Sg=function(){function t(t){var e=t[0],n=t[1];return a=null,i.point(e,n),a||(o.point(e,n),a)||(u.point(e,n),a)}function e(){return n=r=null,t}var n,r,i,o,u,a,s=Cg(),l=Fg().rotate([154,0]).center([-2,58.5]).parallels([55,65]),c=Fg().rotate([157,0]).center([-3,19.9]).parallels([8,18]),f={point:function(t,e){a=[t,e]}};return t.invert=function(t){var e=s.scale(),n=s.translate(),r=(t[0]-n[0])/e,i=(t[1]-n[1])/e;return(i>=.12&&i<.234&&r>=-.425&&r<-.214?l:i>=.166&&i<.234&&r>=-.214&&r<-.115?c:s).invert(t)},t.stream=function(t){return n&&r===t?n:n=co([s.stream(r=t),l.stream(t),c.stream(t)])},t.precision=function(t){return arguments.length?(s.precision(t),l.precision(t),c.precision(t),e()):s.precision()},t.scale=function(e){return arguments.length?(s.scale(e),l.scale(.35*e),c.scale(e),t.translate(s.translate())):s.scale()},t.translate=function(t){if(!arguments.length)return s.translate();var n=s.scale(),r=+t[0],a=+t[1];return i=s.translate(t).clipExtent([[r-.455*n,a-.238*n],[r+.455*n,a+.238*n]]).stream(f),o=l.translate([r-.307*n,a+.201*n]).clipExtent([[r-.425*n+Nm,a+.12*n+Nm],[r-.214*n-Nm,a+.234*n-Nm]]).stream(f),u=c.translate([r-.205*n,a+.212*n]).clipExtent([[r-.214*n+Nm,a+.166*n+Nm],[r-.115*n-Nm,a+.234*n-Nm]]).stream(f),e()},t.fitExtent=function(e,n){return eo(t,e,n)},t.fitSize=function(e,n){return no(t,e,n)},t.scale(1070)},Ag=fo(function(t){return Gm(2/(1+t))});Ag.invert=ho(function(t){return 2*wr(t/2)});var Og=function(){return oo(Ag).scale(124.75).clipAngle(179.999)},Tg=fo(function(t){return(t=xr(t))&&t/Xm(t)});Tg.invert=ho(function(t){return t});var Dg=function(){return oo(Tg).scale(79.4188).clipAngle(179.999)};po.invert=function(t,e){return[t,2*Bm(Hm(e))-Pm]};var kg=function(){return vo(po).scale(961/Rm)},Ng=function(){return ao(yo).scale(109.5).parallels([30,30])};go.invert=go;var jg=function(){return oo(go).scale(152.63)},Pg=function(){return ao(_o).scale(131.154).center([0,13.9389])};bo.invert=ho(Bm);var Vg=function(){return oo(bo).scale(144.049).clipAngle(60)},Rg=function(){function t(){return i=o=null,u}var e,n,r,i,o,u,a=1,s=0,l=0,c=1,f=1,h=Ky,p=null,d=Ky;return u={stream:function(t){return i&&o===t?i:i=h(d(o=t))},clipExtent:function(i){return arguments.length?(d=null==i?(p=e=n=r=null,Ky):di(p=+i[0][0],e=+i[0][1],n=+i[1][0],r=+i[1][1]),t()):null==p?null:[[p,e],[n,r]]},scale:function(e){return arguments.length?(h=xo((a=+e)*c,a*f,s,l),t()):a},translate:function(e){return arguments.length?(h=xo(a*c,a*f,s=+e[0],l=+e[1]),t()):[s,l]},reflectX:function(e){return arguments.length?(h=xo(a*(c=e?-1:1),a*f,s,l),t()):c<0},reflectY:function(e){return arguments.length?(h=xo(a*c,a*(f=e?-1:1),s,l),t()):f<0},fitExtent:function(t,e){return eo(u,t,e)},fitSize:function(t,e){return no(u,t,e)}}};wo.invert=ho(wr);var Ig=function(){return oo(wo).scale(249.5).clipAngle(90+Nm)};Eo.invert=ho(function(t){return 2*Bm(t)});var Lg=function(){return oo(Eo).scale(250).clipAngle(142)};Mo.invert=function(t,e){return[-e,2*Bm(Hm(t))-Pm]};var zg=function(){var t=vo(Mo),e=t.center,n=t.rotate;return t.center=function(t){return arguments.length?e([-t[1],t[0]]):(t=e(),[t[1],-t[0]])},t.rotate=function(t){return arguments.length?n([t[0],t[1],t.length>2?t[2]+90:90]):(t=n(),[t[0],t[1],t[2]-90])},n([0,0,90]).scale(159.155)},Bg=function(){function t(t){var o,u=0;t.eachAfter(function(t){var n=t.children;n?(t.x=Co(n),t.y=Ao(n)):(t.x=o?u+=e(t,o):0,t.y=0,o=t)});var a=To(t),s=Do(t),l=a.x-e(a,s)/2,c=s.x+e(s,a)/2;return t.eachAfter(i?function(e){e.x=(e.x-t.x)*n,e.y=(t.y-e.y)*r}:function(e){e.x=(e.x-l)/(c-l)*n,e.y=(1-(t.y?e.y/t.y:1))*r})}var e=Fo,n=1,r=1,i=!1;return t.separation=function(n){return arguments.length?(e=n,t):e},t.size=function(e){return arguments.length?(i=!1,n=+e[0],r=+e[1],t):i?null:[n,r]},t.nodeSize=function(e){return arguments.length?(i=!0,n=+e[0],r=+e[1],t):i?[n,r]:null},t},qg=function(){return this.eachAfter(ko)},Ug=function(t){var e,n,r,i,o=this,u=[o];do{for(e=u.reverse(),u=[];o=e.pop();)if(t(o),n=o.children)for(r=0,i=n.length;r<i;++r)u.push(n[r])}while(u.length);return this},Kg=function(t){for(var e,n,r=this,i=[r];r=i.pop();)if(t(r),e=r.children)for(n=e.length-1;n>=0;--n)i.push(e[n]);return this},Hg=function(t){for(var e,n,r,i=this,o=[i],u=[];i=o.pop();)if(u.push(i),e=i.children)for(n=0,r=e.length;n<r;++n)o.push(e[n]);for(;i=u.pop();)t(i);return this},Wg=function(t){return this.eachAfter(function(e){for(var n=+t(e.data)||0,r=e.children,i=r&&r.length;--i>=0;)n+=r[i].value;e.value=n})},Yg=function(t){return this.eachBefore(function(e){e.children&&e.children.sort(t)})},Xg=function(t){for(var e=this,n=No(e,t),r=[e];e!==n;)e=e.parent,r.push(e);for(var i=r.length;t!==n;)r.splice(i,0,t),t=t.parent;return r},$g=function(){for(var t=this,e=[t];t=t.parent;)e.push(t);return e},Gg=function(){var t=[];return this.each(function(e){t.push(e)}),t},Zg=function(){var t=[];return this.eachBefore(function(e){e.children||t.push(e)}),t},Jg=function(){var t=this,e=[];return t.each(function(n){n!==t&&e.push({source:n.parent,target:n})}),e};Lo.prototype=jo.prototype={constructor:Lo,count:qg,each:Ug,eachAfter:Hg,eachBefore:Kg,sum:Wg,sort:Yg,path:Xg,ancestors:$g,descendants:Gg,leaves:Zg,links:Jg,copy:Po};var Qg=Array.prototype.slice,t_=function(t){for(var e,n,r=0,i=(t=zo(Qg.call(t))).length,o=[];r<i;)e=t[r],n&&Uo(n,e)?++r:(n=Ho(o=Bo(o,e)),r=0);return n},e_=function(t){return Qo(t),t},n_=function(t){return function(){return t}},r_=function(){function t(t){return t.x=n/2,t.y=r/2,e?t.eachBefore(iu(e)).eachAfter(ou(i,.5)).eachBefore(uu(1)):t.eachBefore(iu(ru)).eachAfter(ou(nu,1)).eachAfter(ou(i,t.r/Math.min(n,r))).eachBefore(uu(Math.min(n,r)/(2*t.r))),t}var e=null,n=1,r=1,i=nu;return t.radius=function(n){return arguments.length?(e=tu(n),t):e},t.size=function(e){return arguments.length?(n=+e[0],r=+e[1],t):[n,r]},t.padding=function(e){return arguments.length?(i="function"==typeof e?e:n_(+e),t):i},t},i_=function(t){t.x0=Math.round(t.x0),t.y0=Math.round(t.y0),t.x1=Math.round(t.x1),t.y1=Math.round(t.y1)},o_=function(t,e,n,r,i){for(var o,u=t.children,a=-1,s=u.length,l=t.value&&(r-e)/t.value;++a<s;)o=u[a],o.y0=n,o.y1=i,o.x0=e,o.x1=e+=o.value*l},u_=function(){function t(t){var u=t.height+1;return t.x0=t.y0=i,t.x1=n,t.y1=r/u,t.eachBefore(e(r,u)),o&&t.eachBefore(i_),t}function e(t,e){return function(n){n.children&&o_(n,n.x0,t*(n.depth+1)/e,n.x1,t*(n.depth+2)/e);var r=n.x0,o=n.y0,u=n.x1-i,a=n.y1-i;u<r&&(r=u=(r+u)/2),a<o&&(o=a=(o+a)/2),n.x0=r,n.y0=o,n.x1=u,n.y1=a}}var n=1,r=1,i=0,o=!1;return t.round=function(e){return arguments.length?(o=!!e,t):o},t.size=function(e){return arguments.length?(n=+e[0],r=+e[1],t):[n,r]},t.padding=function(e){return arguments.length?(i=+e,t):i},t},a_="$",s_={depth:-1},l_={},c_=function(){function t(t){var r,i,o,u,a,s,l,c=t.length,f=new Array(c),h={};for(i=0;i<c;++i)r=t[i],a=f[i]=new Lo(r),null!=(s=e(r,i,t))&&(s+="")&&(l=a_+(a.id=s),h[l]=l in h?l_:a);for(i=0;i<c;++i)if(a=f[i],null!=(s=n(t[i],i,t))&&(s+="")){if(!(u=h[a_+s]))throw new Error("missing: "+s);if(u===l_)throw new Error("ambiguous: "+s);u.children?u.children.push(a):u.children=[a],a.parent=u}else{if(o)throw new Error("multiple roots");o=a}if(!o)throw new Error("no root");if(o.parent=s_,o.eachBefore(function(t){t.depth=t.parent.depth+1,--c}).eachBefore(Io),o.parent=null,c>0)throw new Error("cycle");return o}var e=au,n=su;return t.id=function(n){return arguments.length?(e=eu(n),t):e},t.parentId=function(e){return arguments.length?(n=eu(e),t):n},t};vu.prototype=Object.create(Lo.prototype);var f_=function(){function t(t){var r=mu(t);if(r.eachAfter(e),r.parent.m=-r.z,r.eachBefore(n),s)t.eachBefore(i);else{var l=t,c=t,f=t;t.eachBefore(function(t){t.x<l.x&&(l=t),t.x>c.x&&(c=t),t.depth>f.depth&&(f=t)});var h=l===c?1:o(l,c)/2,p=h-l.x,d=u/(c.x+h+p),v=a/(f.depth||1);t.eachBefore(function(t){t.x=(t.x+p)*d,t.y=t.depth*v})}return t}function e(t){var e=t.children,n=t.parent.children,i=t.i?n[t.i-1]:null;if(e){pu(t);var u=(e[0].z+e[e.length-1].z)/2;i?(t.z=i.z+o(t._,i._),t.m=t.z-u):t.z=u}else i&&(t.z=i.z+o(t._,i._));t.parent.A=r(t,i,t.parent.A||n[0])}function n(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function r(t,e,n){if(e){for(var r,i=t,u=t,a=e,s=i.parent.children[0],l=i.m,c=u.m,f=a.m,h=s.m;a=fu(a),i=cu(i),a&&i;)s=cu(s),u=fu(u),u.a=t,r=a.z+f-i.z-l+o(a._,i._),r>0&&(hu(du(a,t,n),t,r),l+=r,c+=r),f+=a.m,l+=i.m,h+=s.m,c+=u.m;a&&!fu(u)&&(u.t=a,u.m+=f-c),i&&!cu(s)&&(s.t=i,s.m+=l-h,n=t)}return n}function i(t){t.x*=u,t.y=t.depth*a}var o=lu,u=1,a=1,s=null;return t.separation=function(e){return arguments.length?(o=e,t):o},t.size=function(e){return arguments.length?(s=!1,u=+e[0],a=+e[1],t):s?null:[u,a]},t.nodeSize=function(e){return arguments.length?(s=!0,u=+e[0],a=+e[1],t):s?[u,a]:null},t},h_=function(t,e,n,r,i){for(var o,u=t.children,a=-1,s=u.length,l=t.value&&(i-n)/t.value;++a<s;)o=u[a],o.x0=e,o.x1=r,o.y0=n,o.y1=n+=o.value*l},p_=(1+Math.sqrt(5))/2,d_=function t(e){function n(t,n,r,i,o){yu(e,t,n,r,i,o)}return n.ratio=function(e){return t((e=+e)>1?e:1)},n}(p_),v_=function(){function t(t){return t.x0=t.y0=0,t.x1=i,t.y1=o,t.eachBefore(e),u=[0],r&&t.eachBefore(i_),t}function e(t){var e=u[t.depth],r=t.x0+e,i=t.y0+e,o=t.x1-e,h=t.y1-e;o<r&&(r=o=(r+o)/2),h<i&&(i=h=(i+h)/2),t.x0=r,t.y0=i,t.x1=o,t.y1=h,t.children&&(e=u[t.depth+1]=a(t)/2,r+=f(t)-e,i+=s(t)-e,o-=l(t)-e,h-=c(t)-e,o<r&&(r=o=(r+o)/2),h<i&&(i=h=(i+h)/2),n(t,r,i,o,h))}var n=d_,r=!1,i=1,o=1,u=[0],a=nu,s=nu,l=nu,c=nu,f=nu;return t.round=function(e){return arguments.length?(r=!!e,t):r},t.size=function(e){return arguments.length?(i=+e[0],o=+e[1],t):[i,o]},t.tile=function(e){return arguments.length?(n=eu(e),t):n},t.padding=function(e){return arguments.length?t.paddingInner(e).paddingOuter(e):t.paddingInner()},t.paddingInner=function(e){return arguments.length?(a="function"==typeof e?e:n_(+e),t):a},t.paddingOuter=function(e){return arguments.length?t.paddingTop(e).paddingRight(e).paddingBottom(e).paddingLeft(e):t.paddingTop()},t.paddingTop=function(e){return arguments.length?(s="function"==typeof e?e:n_(+e),t):s},t.paddingRight=function(e){return arguments.length?(l="function"==typeof e?e:n_(+e),t):l},t.paddingBottom=function(e){return arguments.length?(c="function"==typeof e?e:n_(+e),t):c},t.paddingLeft=function(e){return arguments.length?(f="function"==typeof e?e:n_(+e),t):f},t},m_=function(t,e,n,r,i){function o(t,e,n,r,i,u,a){if(t>=e-1){var l=s[t];return l.x0=r,l.y0=i,l.x1=u,l.y1=a,void 0}for(var f=c[t],h=n/2+f,p=t+1,d=e-1;p<d;){var v=p+d>>>1;c[v]<h?p=v+1:d=v}h-c[p-1]<c[p]-h&&t+1<p&&--p;var m=c[p]-f,y=n-m;if(u-r>a-i){var g=(r*y+u*m)/n;o(t,p,m,r,i,g,a),o(p,e,y,g,i,u,a)}else{var _=(i*y+a*m)/n;o(t,p,m,r,i,u,_),o(p,e,y,r,_,u,a)}}var u,a,s=t.children,l=s.length,c=new Array(l+1);for(c[0]=a=u=0;u<l;++u)c[u+1]=a+=s[u].value;o(0,l,t.value,e,n,r,i)},y_=function(t,e,n,r,i){(1&t.depth?h_:o_)(t,e,n,r,i)},g_=function t(e){function n(t,n,r,i,o){if((u=t._squarify)&&u.ratio===e)for(var u,a,s,l,c,f=-1,h=u.length,p=t.value;++f<h;){for(a=u[f],s=a.children,l=a.value=0,c=s.length;l<c;++l)a.value+=s[l].value;a.dice?o_(a,n,r,i,r+=(o-r)*a.value/p):h_(a,n,r,n+=(i-n)*a.value/p,o),p-=a.value}else t._squarify=u=yu(e,t,n,r,i,o),u.ratio=e}return n.ratio=function(e){return t((e=+e)>1?e:1)},n}(p_),__=function(t){for(var e,n=-1,r=t.length,i=t[r-1],o=0;++n<r;)e=i,i=t[n],o+=e[1]*i[0]-e[0]*i[1];return o/2},b_=function(t){for(var e,n,r=-1,i=t.length,o=0,u=0,a=t[i-1],s=0;++r<i;)e=a,a=t[r],s+=n=e[0]*a[1]-a[0]*e[1],o+=(e[0]+a[0])*n,u+=(e[1]+a[1])*n;return s*=3,[o/s,u/s]},x_=function(t,e,n){return(e[0]-t[0])*(n[1]-t[1])-(e[1]-t[1])*(n[0]-t[0])},w_=function(t){if((n=t.length)<3)return null;var e,n,r=new Array(n),i=new Array(n);for(e=0;e<n;++e)r[e]=[+t[e][0],+t[e][1],e];for(r.sort(gu),e=0;e<n;++e)i[e]=[r[e][0],-r[e][1]];var o=_u(r),u=_u(i),a=u[0]===o[0],s=u[u.length-1]===o[o.length-1],l=[];for(e=o.length-1;e>=0;--e)l.push(t[r[o[e]][2]]);for(e=+a;e<u.length-s;++e)l.push(t[r[u[e]][2]]);return l},E_=function(t,e){for(var n,r,i=t.length,o=t[i-1],u=e[0],a=e[1],s=o[0],l=o[1],c=!1,f=0;f<i;++f)o=t[f],n=o[0],r=o[1],r>a!=l>a&&u<(s-n)*(a-r)/(l-r)+n&&(c=!c),s=n,l=r;return c},M_=function(t){for(var e,n,r=-1,i=t.length,o=t[i-1],u=o[0],a=o[1],s=0;++r<i;)e=u,n=a,o=t[r],u=o[0],a=o[1],e-=u,n-=a,s+=Math.sqrt(e*e+n*n);return s},F_=[].slice,C_={};bu.prototype=Cu.prototype={constructor:bu,defer:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("defer after await");if(null!=this._error)return this;var e=F_.call(arguments,1);return e.push(t),++this._waiting,this._tasks.push(e),xu(this),this},abort:function(){return null==this._error&&Mu(this,new Error("abort")),this},await:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("multiple await");return this._call=function(e,n){t.apply(null,[e].concat(n))},Fu(this),this},awaitAll:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("multiple await");return this._call=t,Fu(this),this}};var S_=function(){return Math.random()},A_=function t(e){function n(t,n){return t=null==t?0:+t,n=null==n?1:+n,1===arguments.length?(n=t,t=0):n-=t,function(){return e()*n+t}}return n.source=t,n}(S_),O_=function t(e){function n(t,n){var r,i;return t=null==t?0:+t,n=null==n?1:+n,function(){var o;if(null!=r)o=r,r=null;else do{r=2*e()-1,o=2*e()-1,i=r*r+o*o}while(!i||i>1);return t+n*o*Math.sqrt(-2*Math.log(i)/i)}}return n.source=t,n}(S_),T_=function t(e){function n(){var t=O_.source(e).apply(this,arguments);return function(){return Math.exp(t())}}return n.source=t,n}(S_),D_=function t(e){function n(t){return function(){for(var n=0,r=0;r<t;++r)n+=e();return n}}return n.source=t,n}(S_),k_=function t(e){function n(t){var n=D_.source(e)(t);return function(){return n()/t}}return n.source=t,n}(S_),N_=function t(e){function n(t){return function(){return-Math.log(1-e())/t}}return n.source=t,n}(S_),j_=function(t,e){function n(t){var e,n=l.status;if(!n&&Au(l)||n>=200&&n<300||304===n){if(o)try{e=o.call(r,l)}catch(t){return void a.call("error",r,t)}else e=l;a.call("load",r,e)}else a.call("error",r,t)}var r,i,o,u,a=y("beforesend","progress","load","error"),s=Wn(),l=new XMLHttpRequest,c=null,f=null,h=0;if("undefined"==typeof XDomainRequest||"withCredentials"in l||!/^(http(s)?:)?\/\//.test(t)||(l=new XDomainRequest),"onload"in l?l.onload=l.onerror=l.ontimeout=n:l.onreadystatechange=function(t){l.readyState>3&&n(t)},l.onprogress=function(t){a.call("progress",r,t)},r={header:function(t,e){return t=(t+"").toLowerCase(),arguments.length<2?s.get(t):(null==e?s.remove(t):s.set(t,e+""),r)},mimeType:function(t){return arguments.length?(i=null==t?null:t+"",r):i},responseType:function(t){return arguments.length?(u=t,r):u},timeout:function(t){return arguments.length?(h=+t,r):h},user:function(t){return arguments.length<1?c:(c=null==t?null:t+"",r)},password:function(t){return arguments.length<1?f:(f=null==t?null:t+"",r)},response:function(t){return o=t,r},get:function(t,e){return r.send("GET",t,e)},post:function(t,e){return r.send("POST",t,e)},send:function(e,n,o){return l.open(e,t,!0,c,f),null==i||s.has("accept")||s.set("accept",i+",*/*"),l.setRequestHeader&&s.each(function(t,e){l.setRequestHeader(e,t)}),null!=i&&l.overrideMimeType&&l.overrideMimeType(i),null!=u&&(l.responseType=u),h>0&&(l.timeout=h),null==o&&"function"==typeof n&&(o=n,n=null),null!=o&&1===o.length&&(o=Su(o)),null!=o&&r.on("error",o).on("load",function(t){o(null,t)}),a.call("beforesend",r,l),l.send(null==n?null:n),r},abort:function(){return l.abort(),r},on:function(){var t=a.on.apply(a,arguments);return t===a?r:t}},null!=e){if("function"!=typeof e)throw new Error("invalid callback: "+e);return r.get(e)}return r},P_=function(t,e){return function(n,r){var i=j_(n).mimeType(t).response(e);if(null!=r){if("function"!=typeof r)throw new Error("invalid callback: "+r);return i.get(r)}return i}},V_=P_("text/html",function(t){return document.createRange().createContextualFragment(t.responseText)}),R_=P_("application/json",function(t){return JSON.parse(t.responseText)}),I_=P_("text/plain",function(t){return t.responseText}),L_=P_("application/xml",function(t){var e=t.responseXML;if(!e)throw new Error("parse error");return e}),z_=function(t,e){return function(n,r,i){arguments.length<3&&(i=r,r=null);var o=j_(n).mimeType(t);return o.row=function(t){return arguments.length?o.response(Ou(e,r=t)):r},o.row(r),i?o.get(i):o}},B_=z_("text/csv",rv),q_=z_("text/tab-separated-values",sv),U_=Array.prototype,K_=U_.map,H_=U_.slice,W_={name:"implicit"},Y_=function(t){return function(){return t}},X_=function(t){return+t},$_=[0,1],G_=function(e,n,r){var o,u=e[0],a=e[e.length-1],s=i(u,a,null==n?10:n);switch(r=mr(null==r?",f":r),r.type){case"s":var l=Math.max(Math.abs(u),Math.abs(a));return null!=r.precision||isNaN(o=Jv(s,l))||(r.precision=o),t.formatPrefix(r,l);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(o=Qv(s,Math.max(Math.abs(u),Math.abs(a))))||(r.precision=o-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(o=Zv(s))||(r.precision=o-2*("%"===r.type))}return t.format(r)},Z_=function(t,e){t=t.slice();var n,r=0,i=t.length-1,o=t[r],u=t[i];return u<o&&(n=r,r=i,i=n,n=o,o=u,u=n),t[r]=e.floor(o),t[i]=e.ceil(u),t},J_=new Date,Q_=new Date,tb=ra(function(){},function(t,e){t.setTime(+t+e)},function(t,e){return e-t});tb.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?ra(function(e){e.setTime(Math.floor(e/t)*t)},function(e,n){e.setTime(+e+n*t)},function(e,n){return(n-e)/t}):tb:null};var eb=tb.range,nb=6e4,rb=6048e5,ib=ra(function(t){t.setTime(1e3*Math.floor(t/1e3))},function(t,e){t.setTime(+t+1e3*e)},function(t,e){return(e-t)/1e3},function(t){return t.getUTCSeconds()}),ob=ib.range,ub=ra(function(t){t.setTime(Math.floor(t/nb)*nb)},function(t,e){t.setTime(+t+e*nb)},function(t,e){return(e-t)/nb},function(t){return t.getMinutes()}),ab=ub.range,sb=ra(function(t){var e=t.getTimezoneOffset()*nb%36e5;e<0&&(e+=36e5),t.setTime(36e5*Math.floor((+t-e)/36e5)+e)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getHours()}),lb=sb.range,cb=ra(function(t){t.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*nb)/864e5},function(t){return t.getDate()-1}),fb=cb.range,hb=ia(0),pb=ia(1),db=ia(2),vb=ia(3),mb=ia(4),yb=ia(5),gb=ia(6),_b=hb.range,bb=pb.range,xb=db.range,wb=vb.range,Eb=mb.range,Mb=yb.range,Fb=gb.range,Cb=ra(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,e){t.setMonth(t.getMonth()+e)},function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())},function(t){return t.getMonth()}),Sb=Cb.range,Ab=ra(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,e){t.setFullYear(t.getFullYear()+e)},function(t,e){return e.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()});Ab.every=function(t){return isFinite(t=Math.floor(t))&&t>0?ra(function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)},function(e,n){e.setFullYear(e.getFullYear()+n*t)}):null};var Ob=Ab.range,Tb=ra(function(t){t.setUTCSeconds(0,0)},function(t,e){t.setTime(+t+e*nb)},function(t,e){return(e-t)/nb},function(t){return t.getUTCMinutes()}),Db=Tb.range,kb=ra(function(t){t.setUTCMinutes(0,0,0)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getUTCHours()}),Nb=kb.range,jb=ra(function(t){t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+e)},function(t,e){return(e-t)/864e5},function(t){return t.getUTCDate()-1}),Pb=jb.range,Vb=oa(0),Rb=oa(1),Ib=oa(2),Lb=oa(3),zb=oa(4),Bb=oa(5),qb=oa(6),Ub=Vb.range,Kb=Rb.range,Hb=Ib.range,Wb=Lb.range,Yb=zb.range,Xb=Bb.range,$b=qb.range,Gb=ra(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCMonth(t.getUTCMonth()+e)},function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()}),Zb=Gb.range,Jb=ra(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)},function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()});Jb.every=function(t){return isFinite(t=Math.floor(t))&&t>0?ra(function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)},function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)}):null};var Qb,tx=Jb.range,ex={"-":"",_:" ",0:"0"},nx=/^\s*\d+/,rx=/^%/,ix=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;rs({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var ox=Date.prototype.toISOString?is:t.utcFormat("%Y-%m-%dT%H:%M:%S.%LZ"),ux=+new Date("2000-01-01T00:00:00.000Z")?os:t.utcParse("%Y-%m-%dT%H:%M:%S.%LZ"),ax=1e3,sx=60*ax,lx=60*sx,cx=24*lx,fx=7*cx,hx=30*cx,px=365*cx,dx=function(){return ss(Ab,Cb,hb,cb,sb,ub,ib,tb,t.timeFormat).domain([new Date(2e3,0,1),new Date(2e3,0,2)])},vx=function(){return ss(Jb,Gb,Vb,jb,kb,Tb,ib,tb,t.utcFormat).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)])},mx=function(t){return t.match(/.{6}/g).map(function(t){return"#"+t})},yx=mx("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),gx=mx("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6"),_x=mx("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9"),bx=mx("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5"),xx=rp(Zt(300,.5,0),Zt(-240,.5,1)),wx=rp(Zt(-100,.75,.35),Zt(80,1.5,.8)),Ex=rp(Zt(260,.75,.35),Zt(80,1.5,.8)),Mx=Zt(),Fx=function(t){(t<0||t>1)&&(t-=Math.floor(t));var e=Math.abs(t-.5);return Mx.h=360*t-100,Mx.s=1.5-1.5*e,Mx.l=.8-.9*e,Mx+""},Cx=ls(mx("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),Sx=ls(mx("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),Ax=ls(mx("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),Ox=ls(mx("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921")),Tx=function(t){return function(){return t}},Dx=Math.abs,kx=Math.atan2,Nx=Math.cos,jx=Math.max,Px=Math.min,Vx=Math.sin,Rx=Math.sqrt,Ix=1e-12,Lx=Math.PI,zx=Lx/2,Bx=2*Lx,qx=function(){function t(){var t,l,c=+e.apply(this,arguments),f=+n.apply(this,arguments),h=o.apply(this,arguments)-zx,p=u.apply(this,arguments)-zx,d=Dx(p-h),v=p>h;if(s||(s=t=Ln()),f<c&&(l=f,f=c,c=l),f>Ix)if(d>Bx-Ix)s.moveTo(f*Nx(h),f*Vx(h)),s.arc(0,0,f,h,p,!v),c>Ix&&(s.moveTo(c*Nx(p),c*Vx(p)),s.arc(0,0,c,p,h,v));else{var m,y,g=h,_=p,b=h,x=p,w=d,E=d,M=a.apply(this,arguments)/2,F=M>Ix&&(i?+i.apply(this,arguments):Rx(c*c+f*f)),C=Px(Dx(f-c)/2,+r.apply(this,arguments)),S=C,A=C;if(F>Ix){var O=hs(F/c*Vx(M)),T=hs(F/f*Vx(M));(w-=2*O)>Ix?(O*=v?1:-1,b+=O,x-=O):(w=0,b=x=(h+p)/2),(E-=2*T)>Ix?(T*=v?1:-1,g+=T,_-=T):(E=0,g=_=(h+p)/2)}var D=f*Nx(g),k=f*Vx(g),N=c*Nx(x),j=c*Vx(x);if(C>Ix){var P=f*Nx(_),V=f*Vx(_),R=c*Nx(b),I=c*Vx(b);if(d<Lx){var L=w>Ix?gs(D,k,R,I,P,V,N,j):[N,j],z=D-L[0],B=k-L[1],q=P-L[0],U=V-L[1],K=1/Vx(fs((z*q+B*U)/(Rx(z*z+B*B)*Rx(q*q+U*U)))/2),H=Rx(L[0]*L[0]+L[1]*L[1]);S=Px(C,(c-H)/(K-1)),A=Px(C,(f-H)/(K+1))}}E>Ix?A>Ix?(m=_s(R,I,D,k,f,A,v),y=_s(P,V,N,j,f,A,v),s.moveTo(m.cx+m.x01,m.cy+m.y01),A<C?s.arc(m.cx,m.cy,A,kx(m.y01,m.x01),kx(y.y01,y.x01),!v):(s.arc(m.cx,m.cy,A,kx(m.y01,m.x01),kx(m.y11,m.x11),!v),s.arc(0,0,f,kx(m.cy+m.y11,m.cx+m.x11),kx(y.cy+y.y11,y.cx+y.x11),!v),s.arc(y.cx,y.cy,A,kx(y.y11,y.x11),kx(y.y01,y.x01),!v))):(s.moveTo(D,k),s.arc(0,0,f,g,_,!v)):s.moveTo(D,k),c>Ix&&w>Ix?S>Ix?(m=_s(N,j,P,V,c,-S,v),y=_s(D,k,R,I,c,-S,v),s.lineTo(m.cx+m.x01,m.cy+m.y01),S<C?s.arc(m.cx,m.cy,S,kx(m.y01,m.x01),kx(y.y01,y.x01),!v):(s.arc(m.cx,m.cy,S,kx(m.y01,m.x01),kx(m.y11,m.x11),!v),s.arc(0,0,c,kx(m.cy+m.y11,m.cx+m.x11),kx(y.cy+y.y11,y.cx+y.x11),v),s.arc(y.cx,y.cy,S,kx(y.y11,y.x11),kx(y.y01,y.x01),!v))):s.arc(0,0,c,x,b,v):s.lineTo(N,j)}else s.moveTo(0,0);if(s.closePath(),t)return s=null,t+""||null}var e=ps,n=ds,r=Tx(0),i=null,o=vs,u=ms,a=ys,s=null;return t.centroid=function(){var t=(+e.apply(this,arguments)+ +n.apply(this,arguments))/2,r=(+o.apply(this,arguments)+ +u.apply(this,arguments))/2-Lx/2;return[Nx(r)*t,Vx(r)*t]},t.innerRadius=function(n){return arguments.length?(e="function"==typeof n?n:Tx(+n),t):e},t.outerRadius=function(e){return arguments.length?(n="function"==typeof e?e:Tx(+e),t):n},t.cornerRadius=function(e){return arguments.length?(r="function"==typeof e?e:Tx(+e),t):r},t.padRadius=function(e){return arguments.length?(i=null==e?null:"function"==typeof e?e:Tx(+e),t):i},t.startAngle=function(e){return arguments.length?(o="function"==typeof e?e:Tx(+e),t):o},t.endAngle=function(e){return arguments.length?(u="function"==typeof e?e:Tx(+e),t):u},t.padAngle=function(e){return arguments.length?(a="function"==typeof e?e:Tx(+e),t):a},t.context=function(e){return arguments.length?(s=null==e?null:e,t):s},t};bs.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}};var Ux=function(t){return new bs(t)},Kx=function(){function t(t){var a,s,l,c=t.length,f=!1;for(null==i&&(u=o(l=Ln())),a=0;a<=c;++a)!(a<c&&r(s=t[a],a,t))===f&&((f=!f)?u.lineStart():u.lineEnd()),f&&u.point(+e(s,a,t),+n(s,a,t));if(l)return u=null,l+""||null}var e=xs,n=ws,r=Tx(!0),i=null,o=Ux,u=null;return t.x=function(n){return arguments.length?(e="function"==typeof n?n:Tx(+n),t):e},t.y=function(e){return arguments.length?(n="function"==typeof e?e:Tx(+e),t):n},t.defined=function(e){return arguments.length?(r="function"==typeof e?e:Tx(!!e),t):r},t.curve=function(e){return arguments.length?(o=e,null!=i&&(u=o(i)),t):o},t.context=function(e){return arguments.length?(null==e?i=u=null:u=o(i=e),t):i},t},Hx=function(){function t(t){var e,c,f,h,p,d=t.length,v=!1,m=new Array(d),y=new Array(d);for(null==a&&(l=s(p=Ln())),e=0;e<=d;++e){if(!(e<d&&u(h=t[e],e,t))===v)if(v=!v)c=e,l.areaStart(),l.lineStart();else{for(l.lineEnd(),l.lineStart(),f=e-1;f>=c;--f)l.point(m[f],y[f]);l.lineEnd(),l.areaEnd()}v&&(m[e]=+n(h,e,t),y[e]=+i(h,e,t),l.point(r?+r(h,e,t):m[e],o?+o(h,e,t):y[e]))}if(p)return l=null,p+""||null}function e(){return Kx().defined(u).curve(s).context(a)}var n=xs,r=null,i=Tx(0),o=ws,u=Tx(!0),a=null,s=Ux,l=null;return t.x=function(e){return arguments.length?(n="function"==typeof e?e:Tx(+e),r=null,t):n},t.x0=function(e){return arguments.length?(n="function"==typeof e?e:Tx(+e),t):n},t.x1=function(e){return arguments.length?(r=null==e?null:"function"==typeof e?e:Tx(+e),t):r},t.y=function(e){return arguments.length?(i="function"==typeof e?e:Tx(+e),o=null,t):i},t.y0=function(e){return arguments.length?(i="function"==typeof e?e:Tx(+e),t):i},t.y1=function(e){return arguments.length?(o=null==e?null:"function"==typeof e?e:Tx(+e),t):o},t.lineX0=t.lineY0=function(){return e().x(n).y(i)},t.lineY1=function(){return e().x(n).y(o)},t.lineX1=function(){return e().x(r).y(i)},t.defined=function(e){return arguments.length?(u="function"==typeof e?e:Tx(!!e),t):u},t.curve=function(e){return arguments.length?(s=e,null!=a&&(l=s(a)),t):s},t.context=function(e){return arguments.length?(null==e?a=l=null:l=s(a=e),t):a},t},Wx=function(t,e){return e<t?-1:e>t?1:e>=t?0:NaN},Yx=function(t){return t},Xx=function(){function t(t){var a,s,l,c,f,h=t.length,p=0,d=new Array(h),v=new Array(h),m=+i.apply(this,arguments),y=Math.min(Bx,Math.max(-Bx,o.apply(this,arguments)-m)),g=Math.min(Math.abs(y)/h,u.apply(this,arguments)),_=g*(y<0?-1:1);for(a=0;a<h;++a)(f=v[d[a]=a]=+e(t[a],a,t))>0&&(p+=f);for(null!=n?d.sort(function(t,e){return n(v[t],v[e])}):null!=r&&d.sort(function(e,n){return r(t[e],t[n])}),a=0,l=p?(y-h*_)/p:0;a<h;++a,m=c)s=d[a],f=v[s],c=m+(f>0?f*l:0)+_,v[s]={data:t[s],index:a,value:f,startAngle:m,endAngle:c,padAngle:g};return v}var e=Yx,n=Wx,r=null,i=Tx(0),o=Tx(Bx),u=Tx(0);return t.value=function(n){return arguments.length?(e="function"==typeof n?n:Tx(+n),t):e},t.sortValues=function(e){return arguments.length?(n=e,r=null,t):n},t.sort=function(e){return arguments.length?(r=e,n=null,t):r},t.startAngle=function(e){return arguments.length?(i="function"==typeof e?e:Tx(+e),t):i},t.endAngle=function(e){return arguments.length?(o="function"==typeof e?e:Tx(+e),t):o},t.padAngle=function(e){return arguments.length?(u="function"==typeof e?e:Tx(+e),t):u},t},$x=Ms(Ux);Es.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,e){this._curve.point(e*Math.sin(t),e*-Math.cos(t))}};var Gx=function(){return Fs(Kx().curve($x))},Zx=function(){var t=Hx().curve($x),e=t.curve,n=t.lineX0,r=t.lineX1,i=t.lineY0,o=t.lineY1;return t.angle=t.x,delete t.x,t.startAngle=t.x0,delete t.x0,t.endAngle=t.x1,delete t.x1,t.radius=t.y,delete t.y,t.innerRadius=t.y0,delete t.y0,t.outerRadius=t.y1,delete t.y1,t.lineStartAngle=function(){return Fs(n())},delete t.lineX0,t.lineEndAngle=function(){return Fs(r())},delete t.lineX1,t.lineInnerRadius=function(){return Fs(i())},delete t.lineY0,t.lineOuterRadius=function(){return Fs(o())},delete t.lineY1,t.curve=function(t){return arguments.length?e(Ms(t)):e()._curve},t},Jx=function(t,e){return[(e=+e)*Math.cos(t-=Math.PI/2),e*Math.sin(t)]},Qx=Array.prototype.slice,tw={draw:function(t,e){var n=Math.sqrt(e/Lx);t.moveTo(n,0),t.arc(0,0,n,0,Bx)}},ew={draw:function(t,e){var n=Math.sqrt(e/5)/2;t.moveTo(-3*n,-n),t.lineTo(-n,-n),t.lineTo(-n,-3*n),t.lineTo(n,-3*n),t.lineTo(n,-n),t.lineTo(3*n,-n),t.lineTo(3*n,n),t.lineTo(n,n),t.lineTo(n,3*n),t.lineTo(-n,3*n),t.lineTo(-n,n),t.lineTo(-3*n,n),t.closePath()}},nw=Math.sqrt(1/3),rw=2*nw,iw={draw:function(t,e){var n=Math.sqrt(e/rw),r=n*nw;t.moveTo(0,-n),t.lineTo(r,0),t.lineTo(0,n),t.lineTo(-r,0),t.closePath()}},ow=Math.sin(Lx/10)/Math.sin(7*Lx/10),uw=Math.sin(Bx/10)*ow,aw=-Math.cos(Bx/10)*ow,sw={draw:function(t,e){var n=Math.sqrt(.8908130915292852*e),r=uw*n,i=aw*n;t.moveTo(0,-n),t.lineTo(r,i);for(var o=1;o<5;++o){var u=Bx*o/5,a=Math.cos(u),s=Math.sin(u);t.lineTo(s*n,-a*n),t.lineTo(a*r-s*i,s*r+a*i)}t.closePath()}},lw={draw:function(t,e){var n=Math.sqrt(e),r=-n/2;t.rect(r,r,n,n)}},cw=Math.sqrt(3),fw={draw:function(t,e){var n=-Math.sqrt(e/(3*cw));t.moveTo(0,2*n),t.lineTo(-cw*n,-n),t.lineTo(cw*n,-n),t.closePath()}},hw=-.5,pw=Math.sqrt(3)/2,dw=1/Math.sqrt(12),vw=3*(dw/2+1),mw={draw:function(t,e){var n=Math.sqrt(e/vw),r=n/2,i=n*dw,o=r,u=n*dw+n,a=-o,s=u;t.moveTo(r,i),t.lineTo(o,u),t.lineTo(a,s),t.lineTo(hw*r-pw*i,pw*r+hw*i),t.lineTo(hw*o-pw*u,pw*o+hw*u),t.lineTo(hw*a-pw*s,pw*a+hw*s),t.lineTo(hw*r+pw*i,hw*i-pw*r),t.lineTo(hw*o+pw*u,hw*u-pw*o),t.lineTo(hw*a+pw*s,hw*s-pw*a),t.closePath()}},yw=[tw,ew,iw,lw,sw,fw,mw],gw=function(){function t(){var t;if(r||(r=t=Ln()),e.apply(this,arguments).draw(r,+n.apply(this,arguments)),t)return r=null,t+""||null}var e=Tx(tw),n=Tx(64),r=null;return t.type=function(n){return arguments.length?(e="function"==typeof n?n:Tx(n),t):e},t.size=function(e){return arguments.length?(n="function"==typeof e?e:Tx(+e),t):n},t.context=function(e){return arguments.length?(r=null==e?null:e,t):r},t},_w=function(){};Vs.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:Ps(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:Ps(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};var bw=function(t){return new Vs(t)};Rs.prototype={areaStart:_w,areaEnd:_w,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x2=t,this._y2=e;break;case 1:this._point=2,this._x3=t,this._y3=e;break;case 2:this._point=3,this._x4=t,this._y4=e,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+e)/6);break;default:Ps(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};var xw=function(t){return new Rs(t)};Is.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var n=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+e)/6;this._line?this._context.lineTo(n,r):this._context.moveTo(n,r);break;case 3:this._point=4;default:Ps(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};var ww=function(t){return new Is(t)};Ls.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,e=this._y,n=t.length-1;if(n>0)for(var r,i=t[0],o=e[0],u=t[n]-i,a=e[n]-o,s=-1;++s<=n;)r=s/n,this._basis.point(this._beta*t[s]+(1-this._beta)*(i+r*u),this._beta*e[s]+(1-this._beta)*(o+r*a));this._x=this._y=null,this._basis.lineEnd()},point:function(t,e){this._x.push(+t),this._y.push(+e)}};var Ew=function t(e){function n(t){return 1===e?new Vs(t):new Ls(t,e)}return n.beta=function(e){return t(+e)},n}(.85);Bs.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:zs(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2,this._x1=t,this._y1=e;break;case 2:this._point=3;default:zs(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var Mw=function t(e){function n(t){return new Bs(t,e)}return n.tension=function(e){return t(+e)},n}(0);qs.prototype={areaStart:_w,areaEnd:_w,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:zs(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var Fw=function t(e){function n(t){return new qs(t,e)}return n.tension=function(e){return t(+e)},n}(0);Us.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:zs(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var Cw=function t(e){function n(t){return new Us(t,e)}return n.tension=function(e){return t(+e)},n}(0);Hs.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3;default:Ks(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var Sw=function t(e){function n(t){return e?new Hs(t,e):new Bs(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);Ws.prototype={areaStart:_w,areaEnd:_w,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:Ks(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var Aw=function t(e){function n(t){return e?new Ws(t,e):new qs(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);Ys.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Ks(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var Ow=function t(e){function n(t){return e?new Ys(t,e):new Us(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);Xs.prototype={areaStart:_w,areaEnd:_w,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,e){t=+t,e=+e,this._point?this._context.lineTo(t,e):(this._point=1,this._context.moveTo(t,e))}};var Tw=function(t){return new Xs(t)};Qs.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Js(this,this._t0,Zs(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){var n=NaN;if(t=+t,e=+e,t!==this._x1||e!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,Js(this,Zs(this,n=Gs(this,t,e)),n);break;default:Js(this,this._t0,n=Gs(this,t,e))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e,this._t0=n}}},(tl.prototype=Object.create(Qs.prototype)).point=function(t,e){Qs.prototype.point.call(this,e,t)},el.prototype={moveTo:function(t,e){this._context.moveTo(e,t)},closePath:function(){this._context.closePath()},lineTo:function(t,e){this._context.lineTo(e,t)},bezierCurveTo:function(t,e,n,r,i,o){this._context.bezierCurveTo(e,t,r,n,o,i)}},il.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,e=this._y,n=t.length;if(n)if(this._line?this._context.lineTo(t[0],e[0]):this._context.moveTo(t[0],e[0]),2===n)this._context.lineTo(t[1],e[1]);else for(var r=ol(t),i=ol(e),o=0,u=1;u<n;++o,++u)this._context.bezierCurveTo(r[0][o],i[0][o],r[1][o],i[1][o],t[u],e[u]);(this._line||0!==this._line&&1===n)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,e){this._x.push(+t),this._y.push(+e)}};var Dw=function(t){return new il(t)};ul.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,e),this._context.lineTo(t,e);else{var n=this._x*(1-this._t)+t*this._t;this._context.lineTo(n,this._y),this._context.lineTo(n,e)}}this._x=t,this._y=e}};var kw=function(t){return new ul(t,.5)},Nw=function(t,e){if((i=t.length)>1)for(var n,r,i,o=1,u=t[e[0]],a=u.length;o<i;++o)for(r=u,u=t[e[o]],n=0;n<a;++n)u[n][1]+=u[n][0]=isNaN(r[n][1])?r[n][0]:r[n][1]},jw=function(t){for(var e=t.length,n=new Array(e);--e>=0;)n[e]=e;return n},Pw=function(){function t(t){var o,u,a=e.apply(this,arguments),s=t.length,l=a.length,c=new Array(l);for(o=0;o<l;++o){for(var f,h=a[o],p=c[o]=new Array(s),d=0;d<s;++d)p[d]=f=[0,+i(t[d],h,d,t)],f.data=t[d];p.key=h}for(o=0,u=n(c);o<l;++o)c[u[o]].index=o;return r(c,u),c}var e=Tx([]),n=jw,r=Nw,i=ll;return t.keys=function(n){return arguments.length?(e="function"==typeof n?n:Tx(Qx.call(n)),t):e},t.value=function(e){return arguments.length?(i="function"==typeof e?e:Tx(+e),t):i},t.order=function(e){return arguments.length?(n=null==e?jw:"function"==typeof e?e:Tx(Qx.call(e)),t):n},t.offset=function(e){return arguments.length?(r=null==e?Nw:e,t):r},t},Vw=function(t,e){if((r=t.length)>0){for(var n,r,i,o=0,u=t[0].length;o<u;++o){for(i=n=0;n<r;++n)i+=t[n][o][1]||0;if(i)for(n=0;n<r;++n)t[n][o][1]/=i}Nw(t,e)}},Rw=function(t,e){if((a=t.length)>1)for(var n,r,i,o,u,a,s=0,l=t[e[0]].length;s<l;++s)for(o=u=0,n=0;n<a;++n)(i=(r=t[e[n]][s])[1]-r[0])>=0?(r[0]=o,r[1]=o+=i):i<0?(r[1]=u,r[0]=u+=i):r[0]=o},Iw=function(t,e){if((n=t.length)>0){for(var n,r=0,i=t[e[0]],o=i.length;r<o;++r){for(var u=0,a=0;u<n;++u)a+=t[u][r][1]||0;i[r][1]+=i[r][0]=-a/2}Nw(t,e)}},Lw=function(t,e){if((i=t.length)>0&&(r=(n=t[e[0]]).length)>0){for(var n,r,i,o=0,u=1;u<r;++u){for(var a=0,s=0,l=0;a<i;++a){for(var c=t[e[a]],f=c[u][1]||0,h=c[u-1][1]||0,p=(f-h)/2,d=0;d<a;++d){var v=t[e[d]];p+=(v[u][1]||0)-(v[u-1][1]||0)}s+=f,l+=p*f}n[u-1][1]+=n[u-1][0]=o,s&&(o-=l/s)}n[u-1][1]+=n[u-1][0]=o,Nw(t,e)}},zw=function(t){var e=t.map(cl);return jw(t).sort(function(t,n){return e[t]-e[n]})},Bw=function(t){return zw(t).reverse()},qw=function(t){var e,n,r=t.length,i=t.map(cl),o=jw(t).sort(function(t,e){return i[e]-i[t]}),u=0,a=0,s=[],l=[];for(e=0;e<r;++e)n=o[e],u<a?(u+=i[n],s.push(n)):(a+=i[n],l.push(n));return l.reverse().concat(s)},Uw=function(t){return jw(t).reverse()},Kw=function(t){return function(){return t}};pl.prototype={constructor:pl,insert:function(t,e){var n,r,i;if(t){if(e.P=t,e.N=t.N,t.N&&(t.N.P=e),t.N=e,t.R){for(t=t.R;t.L;)t=t.L;t.L=e}else t.R=e;n=t}else this._?(t=yl(this._),e.P=null,e.N=t,t.P=t.L=e,n=t):(e.P=e.N=null,this._=e,n=null);for(e.L=e.R=null,e.U=n,e.C=!0,t=e;n&&n.C;)r=n.U,n===r.L?(i=r.R,i&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.R&&(vl(this,n),t=n,n=t.U),n.C=!1,r.C=!0,ml(this,r))):(i=r.L,i&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.L&&(ml(this,n),t=n,n=t.U),n.C=!1,r.C=!0,vl(this,r))),n=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var e,n,r,i=t.U,o=t.L,u=t.R;if(n=o?u?yl(u):o:u,i?i.L===t?i.L=n:i.R=n:this._=n,o&&u?(r=n.C,n.C=t.C,n.L=o,o.U=n,n!==u?(i=n.U,n.U=t.U,t=n.R,i.L=t,n.R=u,u.U=n):(n.U=i,i=n,t=n.R)):(r=t.C,t=n),t&&(t.U=i),!r){if(t&&t.C)return void(t.C=!1);do{if(t===this._)break;if(t===i.L){if(e=i.R,e.C&&(e.C=!1,i.C=!0,vl(this,i),e=i.R),e.L&&e.L.C||e.R&&e.R.C){e.R&&e.R.C||(e.L.C=!1,e.C=!0,ml(this,e),e=i.R),e.C=i.C,i.C=e.R.C=!1,vl(this,i),t=this._;break}}else if(e=i.L,e.C&&(e.C=!1,i.C=!0,ml(this,i),e=i.L),e.L&&e.L.C||e.R&&e.R.C){e.L&&e.L.C||(e.R.C=!1,e.C=!0,vl(this,e),e=i.L),e.C=i.C,i.C=e.L.C=!1,ml(this,i),t=this._;break}e.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var Hw,Ww,Yw,Xw,$w,Gw=[],Zw=[],Jw=1e-6,Qw=1e-12;ql.prototype={constructor:ql,polygons:function(){var t=this.edges;return this.cells.map(function(e){var n=e.halfedges.map(function(n){return Cl(e,t[n])});return n.data=e.site.data,n})},triangles:function(){var t=[],e=this.edges;return this.cells.forEach(function(n,r){if(o=(i=n.halfedges).length)for(var i,o,u,a=n.site,s=-1,l=e[i[o-1]],c=l.left===a?l.right:l.left;++s<o;)u=c,l=e[i[s]],c=l.left===a?l.right:l.left,u&&c&&r<u.index&&r<c.index&&zl(a,u,c)<0&&t.push([a.data,u.data,c.data])}),t},links:function(){return this.edges.filter(function(t){return t.right}).map(function(t){return{source:t.left.data,target:t.right.data}})},find:function(t,e,n){for(var r,i,o=this,u=o._found||0,a=o.cells.length;!(i=o.cells[u]);)if(++u>=a)return null;var s=t-i.site[0],l=e-i.site[1],c=s*s+l*l;do{i=o.cells[r=u],u=null,i.halfedges.forEach(function(n){var r=o.edges[n],a=r.left;if(a!==i.site&&a||(a=r.right)){var s=t-a[0],l=e-a[1],f=s*s+l*l;f<c&&(c=f,u=a.index)}})}while(null!==u);return o._found=r,null==n||c<=n*n?i.site:null}};var tE=function(){function t(t){return new ql(t.map(function(r,i){var o=[Math.round(e(r,i,t)/Jw)*Jw,Math.round(n(r,i,t)/Jw)*Jw];return o.index=i,o.data=r,o}),r)}var e=fl,n=hl,r=null;return t.polygons=function(e){return t(e).polygons()},t.links=function(e){return t(e).links()},t.triangles=function(e){return t(e).triangles()},t.x=function(n){return arguments.length?(e="function"==typeof n?n:Kw(+n),t):e},t.y=function(e){return arguments.length?(n="function"==typeof e?e:Kw(+e),t):n},t.extent=function(e){return arguments.length?(r=null==e?null:[[+e[0][0],+e[0][1]],[+e[1][0],+e[1][1]]],t):r&&[[r[0][0],r[0][1]],[r[1][0],r[1][1]]]},t.size=function(e){return arguments.length?(r=null==e?null:[[0,0],[+e[0],+e[1]]],t):r&&[r[1][0]-r[0][0],r[1][1]-r[0][1]]},t},eE=function(t){return function(){return t}};Kl.prototype={constructor:Kl,scale:function(t){return 1===t?this:new Kl(this.k*t,this.x,this.y)},translate:function(t,e){return 0===t&0===e?this:new Kl(this.k,this.x+this.k*t,this.y+this.k*e)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var nE=new Kl(1,0,0);Hl.prototype=Kl.prototype;var rE=function(){t.event.preventDefault(),t.event.stopImmediatePropagation()},iE=function(){function e(t){t.property("__zoom",$l).on("wheel.zoom",l).on("mousedown.zoom",c).on("dblclick.zoom",f).filter(Zl).on("touchstart.zoom",h).on("touchmove.zoom",p).on("touchend.zoom touchcancel.zoom",d).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function n(t,e){return e=Math.max(x,Math.min(w,e)),e===t.k?t:new Kl(e,t.x,t.y)}function r(t,e,n){var r=e[0]-n[0]*t.k,i=e[1]-n[1]*t.k;return r===t.x&&i===t.y?t:new Kl(t.k,r,i)}function i(t,e){var n=t.invertX(e[0][0])-E,r=t.invertX(e[1][0])-M,i=t.invertY(e[0][1])-F,o=t.invertY(e[1][1])-C;return t.translate(r>n?(n+r)/2:Math.min(0,n)||Math.max(0,r),o>i?(i+o)/2:Math.min(0,i)||Math.max(0,o))}function o(t){return[(+t[0][0]+ +t[1][0])/2,(+t[0][1]+ +t[1][1])/2]}function u(t,e,n){t.on("start.zoom",function(){a(this,arguments).start()}).on("interrupt.zoom end.zoom",function(){a(this,arguments).end()}).tween("zoom",function(){var t=this,r=arguments,i=a(t,r),u=_.apply(t,r),s=n||o(u),l=Math.max(u[1][0]-u[0][0],u[1][1]-u[0][1]),c=t.__zoom,f="function"==typeof e?e.apply(t,r):e,h=A(c.invert(s).concat(l/c.k),f.invert(s).concat(l/f.k));return function(t){if(1===t)t=f;else{var e=h(t),n=l/e[2];t=new Kl(n,s[0]-e[0]*n,s[1]-e[1]*n)}i.zoom(null,t)}})}function a(t,e){for(var n,r=0,i=O.length;r<i;++r)if((n=O[r]).that===t)return n;return new s(t,e)}function s(t,e){this.that=t,this.args=e,this.index=-1,this.active=0,this.extent=_.apply(t,e)}function l(){function t(){e.wheel=null,e.end()}if(g.apply(this,arguments)){var e=a(this,arguments),o=this.__zoom,u=Math.max(x,Math.min(w,o.k*Math.pow(2,b.apply(this,arguments)))),s=rf(this);if(e.wheel)e.mouse[0][0]===s[0]&&e.mouse[0][1]===s[1]||(e.mouse[1]=o.invert(e.mouse[0]=s)),clearTimeout(e.wheel);else{if(o.k===u)return;e.mouse=[s,o.invert(s)],Cp(this),e.start()}rE(),e.wheel=setTimeout(t,N),e.zoom("mouse",i(r(n(o,u),e.mouse[0],e.mouse[1]),e.extent))}}function c(){function e(){if(rE(),!o.moved){var e=t.event.clientX-l,n=t.event.clientY-c;o.moved=e*e+n*n>j}o.zoom("mouse",i(r(o.that.__zoom,o.mouse[0]=rf(o.that),o.mouse[1]),o.extent))}function n(){u.on("mousemove.zoom mouseup.zoom",null),xt(t.event.view,o.moved),rE(),o.end()}if(!m&&g.apply(this,arguments)){var o=a(this,arguments),u=zf(t.event.view).on("mousemove.zoom",e,!0).on("mouseup.zoom",n,!0),s=rf(this),l=t.event.clientX,c=t.event.clientY;Hf(t.event.view),Wl(),o.mouse=[s,this.__zoom.invert(s)],Cp(this),o.start()}}function f(){if(g.apply(this,arguments)){var o=this.__zoom,a=rf(this),s=o.invert(a),l=o.k*(t.event.shiftKey?.5:2),c=i(r(n(o,l),a,s),_.apply(this,arguments));rE(),S>0?zf(this).transition().duration(S).call(u,c,a):zf(this).call(e.transform,c)}}function h(){if(g.apply(this,arguments)){var e,n,r,i,o=a(this,arguments),u=t.event.changedTouches,s=u.length;for(Wl(),n=0;n<s;++n)r=u[n],i=qf(this,u,r.identifier),i=[i,this.__zoom.invert(i),r.identifier],o.touch0?o.touch1||(o.touch1=i):(o.touch0=i,e=!0);if(v&&(v=clearTimeout(v),!o.touch1))return o.end(),void((i=zf(this).on("dblclick.zoom"))&&i.apply(this,arguments));e&&(v=setTimeout(function(){v=null},k),Cp(this),o.start())}}function p(){var e,o,u,s,l=a(this,arguments),c=t.event.changedTouches,f=c.length;for(rE(),v&&(v=clearTimeout(v)),e=0;e<f;++e)o=c[e],u=qf(this,c,o.identifier),l.touch0&&l.touch0[2]===o.identifier?l.touch0[0]=u:l.touch1&&l.touch1[2]===o.identifier&&(l.touch1[0]=u);if(o=l.that.__zoom,l.touch1){var h=l.touch0[0],p=l.touch0[1],d=l.touch1[0],m=l.touch1[1],y=(y=d[0]-h[0])*y+(y=d[1]-h[1])*y,g=(g=m[0]-p[0])*g+(g=m[1]-p[1])*g;o=n(o,Math.sqrt(y/g)),u=[(h[0]+d[0])/2,(h[1]+d[1])/2],s=[(p[0]+m[0])/2,(p[1]+m[1])/2]}else{if(!l.touch0)return;u=l.touch0[0],s=l.touch0[1]}l.zoom("touch",i(r(o,u,s),l.extent))}function d(){var e,n,r=a(this,arguments),i=t.event.changedTouches,o=i.length;for(Wl(),m&&clearTimeout(m),m=setTimeout(function(){m=null},k),e=0;e<o;++e)n=i[e],r.touch0&&r.touch0[2]===n.identifier?delete r.touch0:r.touch1&&r.touch1[2]===n.identifier&&delete r.touch1;r.touch1&&!r.touch0&&(r.touch0=r.touch1,delete r.touch1),r.touch0?r.touch0[1]=this.__zoom.invert(r.touch0[0]):r.end()}var v,m,g=Yl,_=Xl,b=Gl,x=0,w=1/0,E=-w,M=w,F=E,C=M,S=250,A=Zh,O=[],T=y("start","zoom","end"),k=500,N=150,j=0;return e.transform=function(t,e){var n=t.selection?t.selection():t;n.property("__zoom",$l),t!==n?u(t,e):n.interrupt().each(function(){a(this,arguments).start().zoom(null,"function"==typeof e?e.apply(this,arguments):e).end()})},e.scaleBy=function(t,n){e.scaleTo(t,function(){return this.__zoom.k*("function"==typeof n?n.apply(this,arguments):n)})},e.scaleTo=function(t,u){e.transform(t,function(){var t=_.apply(this,arguments),e=this.__zoom,a=o(t),s=e.invert(a);return i(r(n(e,"function"==typeof u?u.apply(this,arguments):u),a,s),t)})},e.translateBy=function(t,n,r){e.transform(t,function(){return i(this.__zoom.translate("function"==typeof n?n.apply(this,arguments):n,"function"==typeof r?r.apply(this,arguments):r),_.apply(this,arguments))})},e.translateTo=function(t,n,r){e.transform(t,function(){var t=_.apply(this,arguments),e=this.__zoom,u=o(t);return i(nE.translate(u[0],u[1]).scale(e.k).translate("function"==typeof n?-n.apply(this,arguments):-n,"function"==typeof r?-r.apply(this,arguments):-r),t)})},s.prototype={start:function(){return 1==++this.active&&(this.index=O.push(this)-1,this.emit("start")),this},zoom:function(t,e){return this.mouse&&"mouse"!==t&&(this.mouse[1]=e.invert(this.mouse[0])),this.touch0&&"touch"!==t&&(this.touch0[1]=e.invert(this.touch0[0])),this.touch1&&"touch"!==t&&(this.touch1[1]=e.invert(this.touch1[0])),this.that.__zoom=e,this.emit("zoom"),this},end:function(){return 0==--this.active&&(O.splice(this.index,1),this.index=-1,this.emit("end")),this},emit:function(t){D(new Ul(e,t,this.that.__zoom),T.apply,T,[t,this.that,this.args])}},e.wheelDelta=function(t){return arguments.length?(b="function"==typeof t?t:eE(+t),e):b},e.filter=function(t){return arguments.length?(g="function"==typeof t?t:eE(!!t),e):g},e.extent=function(t){return arguments.length?(_="function"==typeof t?t:eE([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),e):_},e.scaleExtent=function(t){return arguments.length?(x=+t[0],w=+t[1],e):[x,w]},e.translateExtent=function(t){return arguments.length?(E=+t[0][0],M=+t[1][0],F=+t[0][1],C=+t[1][1],e):[[E,F],[M,C]]},e.duration=function(t){return arguments.length?(S=+t,e):S},e.interpolate=function(t){return arguments.length?(A=t,e):A},e.on=function(){var t=T.on.apply(T,arguments);return t===T?e:t},e.clickDistance=function(t){return arguments.length?(j=(t=+t)*t,e):Math.sqrt(j)},e};t.version="4.10.0",t.bisect=ec,t.bisectRight=ec,t.bisectLeft=nc,t.ascending=Jl,t.bisector=Ql,t.cross=ic,t.descending=oc,t.deviation=sc,t.extent=lc,t.histogram=xc,t.thresholdFreedmanDiaconis=Ec,t.thresholdScott=Mc,t.thresholdSturges=bc,t.max=Fc,t.mean=Cc,t.median=Sc,t.merge=Ac,t.min=Oc,t.pairs=rc,t.permute=Tc,t.quantile=wc,t.range=vc,t.scan=Dc,t.shuffle=kc,t.sum=Nc,t.ticks=_c,t.tickIncrement=r,t.tickStep=i,t.transpose=jc,t.variance=ac,t.zip=Pc,t.axisTop=p,t.axisRight=d,t.axisBottom=v,t.axisLeft=m,t.brush=Vd,t.brushX=jn,t.brushY=Pn,t.brushSelection=Nn,t.chord=Ud,t.ribbon=$d,t.nest=Gd,t.set=Jn,t.map=Wn,t.keys=Jd,t.values=Qd,t.entries=tv,t.color=Ot,t.rgb=Nt,t.hsl=Rt,t.lab=Bt,t.hcl=Xt,t.cubehelix=Zt,t.dispatch=y,t.drag=Yf,t.dragDisable=Hf,t.dragEnable=xt,t.dsvFormat=ev,t.csvParse=rv,t.csvParseRows=iv,t.csvFormat=ov,t.csvFormatRows=uv,t.tsvParse=sv,t.tsvParseRows=lv,t.tsvFormat=cv,t.tsvFormatRows=fv,t.easeLinear=an,t.easeQuad=cn,t.easeQuadIn=sn,t.easeQuadOut=ln,t.easeQuadInOut=cn,t.easeCubic=pn,t.easeCubicIn=fn,t.easeCubicOut=hn,t.easeCubicInOut=pn,t.easePoly=Zp,t.easePolyIn=$p,t.easePolyOut=Gp,t.easePolyInOut=Zp,t.easeSin=mn,t.easeSinIn=dn,t.easeSinOut=vn,t.easeSinInOut=mn,t.easeExp=_n,t.easeExpIn=yn,t.easeExpOut=gn,t.easeExpInOut=_n,t.easeCircle=wn,t.easeCircleIn=bn,t.easeCircleOut=xn,t.easeCircleInOut=wn,t.easeBounce=Mn,t.easeBounceIn=En,t.easeBounceOut=Mn,t.easeBounceInOut=Fn,t.easeBack=hd,t.easeBackIn=cd,t.easeBackOut=fd,t.easeBackInOut=hd,t.easeElastic=vd,t.easeElasticIn=dd,t.easeElasticOut=vd,t.easeElasticInOut=md,t.forceCenter=hv,t.forceCollide=Tv,t.forceLink=Dv,t.forceManyBody=Pv,t.forceSimulation=jv,t.forceX=Vv,t.forceY=Rv,t.formatDefaultLocale=gr,t.formatLocale=Gv,t.formatSpecifier=mr,t.precisionFixed=Zv,t.precisionPrefix=Jv,t.precisionRound=Qv,t.geoArea=iy,t.geoBounds=ay,t.geoCentroid=ly,t.geoCircle=My,t.geoClipExtent=Dy,t.geoContains=qy,t.geoDistance=Ly,t.geoGraticule=Si,t.geoGraticule10=Ai,t.geoInterpolate=Uy,t.geoLength=Vy,t.geoPath=mg,t.geoAlbers=Cg,t.geoAlbersUsa=Sg,t.geoAzimuthalEqualArea=Og,t.geoAzimuthalEqualAreaRaw=Ag,t.geoAzimuthalEquidistant=Dg,t.geoAzimuthalEquidistantRaw=Tg,t.geoConicConformal=Ng,t.geoConicConformalRaw=yo,t.geoConicEqualArea=Fg,t.geoConicEqualAreaRaw=lo,t.geoConicEquidistant=Pg,t.geoConicEquidistantRaw=_o,t.geoEquirectangular=jg,t.geoEquirectangularRaw=go,t.geoGnomonic=Vg,t.geoGnomonicRaw=bo,t.geoIdentity=Rg,t.geoProjection=oo,t.geoProjectionMutator=uo,t.geoMercator=kg,t.geoMercatorRaw=po,t.geoOrthographic=Ig,t.geoOrthographicRaw=wo,t.geoStereographic=Lg,t.geoStereographicRaw=Eo,t.geoTransverseMercator=zg,t.geoTransverseMercatorRaw=Mo,t.geoRotation=Ey,t.geoStream=ty,t.geoTransform=bg,t.cluster=Bg,t.hierarchy=jo,t.pack=r_,t.packSiblings=e_,t.packEnclose=t_,t.partition=u_,t.stratify=c_,t.tree=f_,t.treemap=v_,t.treemapBinary=m_,t.treemapDice=o_,t.treemapSlice=h_,t.treemapSliceDice=y_,t.treemapSquarify=d_,t.treemapResquarify=g_,t.interpolate=Uh,t.interpolateArray=Vh,t.interpolateBasis=Th,t.interpolateBasisClosed=Dh,t.interpolateDate=Rh,t.interpolateNumber=Ih,t.interpolateObject=Lh,t.interpolateRound=Kh,t.interpolateString=qh,t.interpolateTransformCss=Xh,t.interpolateTransformSvg=$h,t.interpolateZoom=Zh,t.interpolateRgb=Nh,t.interpolateRgbBasis=jh,t.interpolateRgbBasisClosed=Ph,t.interpolateHsl=Jh,t.interpolateHslLong=Qh,t.interpolateLab=ve,t.interpolateHcl=tp,t.interpolateHclLong=ep,t.interpolateCubehelix=np,t.interpolateCubehelixLong=rp,t.quantize=ip,t.path=Ln,t.polygonArea=__,t.polygonCentroid=b_;t.polygonHull=w_,t.polygonContains=E_,t.polygonLength=M_,t.quadtree=ar,t.queue=Cu,t.randomUniform=A_,t.randomNormal=O_,t.randomLogNormal=T_,t.randomBates=k_,t.randomIrwinHall=D_,t.randomExponential=N_,t.request=j_,t.html=V_,t.json=R_,t.text=I_,t.xml=L_,t.csv=B_,t.tsv=q_,t.scaleBand=Du,t.scalePoint=Nu,t.scaleIdentity=Uu,t.scaleLinear=qu,t.scaleLog=Gu,t.scaleOrdinal=Tu,t.scaleImplicit=W_,t.scalePow=Ju,t.scaleSqrt=Qu,t.scaleQuantile=ta,t.scaleQuantize=ea,t.scaleThreshold=na,t.scaleTime=dx,t.scaleUtc=vx,t.schemeCategory10=yx,t.schemeCategory20b=gx,t.schemeCategory20c=_x,t.schemeCategory20=bx,t.interpolateCubehelixDefault=xx,t.interpolateRainbow=Fx,t.interpolateWarm=wx,t.interpolateCool=Ex,t.interpolateViridis=Cx,t.interpolateMagma=Sx,t.interpolateInferno=Ax,t.interpolatePlasma=Ox,t.scaleSequential=cs,t.creator=Yc,t.local=M,t.matcher=Jc,t.mouse=rf,t.namespace=Wc,t.namespaces=Hc,t.select=zf,t.selectAll=Bf,t.selection=_t,t.selector=of,t.selectorAll=af,t.style=Y,t.touch=qf,t.touches=Uf,t.window=Cf,t.customEvent=D,t.arc=qx,t.area=Hx,t.line=Kx,t.pie=Xx,t.areaRadial=Zx,t.radialArea=Zx,t.lineRadial=Gx,t.radialLine=Gx,t.pointRadial=Jx,t.linkHorizontal=ks,t.linkVertical=Ns,t.linkRadial=js,t.symbol=gw,t.symbols=yw,t.symbolCircle=tw,t.symbolCross=ew,t.symbolDiamond=iw,t.symbolSquare=lw,t.symbolStar=sw,t.symbolTriangle=fw,t.symbolWye=mw,t.curveBasisClosed=xw,t.curveBasisOpen=ww,t.curveBasis=bw,t.curveBundle=Ew,t.curveCardinalClosed=Fw,t.curveCardinalOpen=Cw,t.curveCardinal=Mw,t.curveCatmullRomClosed=Aw,t.curveCatmullRomOpen=Ow,t.curveCatmullRom=Sw,t.curveLinearClosed=Tw,t.curveLinear=Ux,t.curveMonotoneX=nl,t.curveMonotoneY=rl,t.curveNatural=Dw,t.curveStep=kw,t.curveStepAfter=sl,t.curveStepBefore=al,t.stack=Pw,t.stackOffsetExpand=Vw,t.stackOffsetDiverging=Rw,t.stackOffsetNone=Nw,t.stackOffsetSilhouette=Iw,t.stackOffsetWiggle=Lw,t.stackOrderAscending=zw,t.stackOrderDescending=Bw,t.stackOrderInsideOut=qw,t.stackOrderNone=jw,t.stackOrderReverse=Uw,t.timeInterval=ra,t.timeMillisecond=tb,t.timeMilliseconds=eb,t.utcMillisecond=tb,t.utcMilliseconds=eb,t.timeSecond=ib,t.timeSeconds=ob,t.utcSecond=ib,t.utcSeconds=ob,t.timeMinute=ub,t.timeMinutes=ab,t.timeHour=sb,t.timeHours=lb,t.timeDay=cb,t.timeDays=fb,t.timeWeek=hb,t.timeWeeks=_b,t.timeSunday=hb,t.timeSundays=_b,t.timeMonday=pb,t.timeMondays=bb,t.timeTuesday=db,t.timeTuesdays=xb,t.timeWednesday=vb,t.timeWednesdays=wb,t.timeThursday=mb,t.timeThursdays=Eb,t.timeFriday=yb,t.timeFridays=Mb,t.timeSaturday=gb,t.timeSaturdays=Fb,t.timeMonth=Cb,t.timeMonths=Sb,t.timeYear=Ab,t.timeYears=Ob,t.utcMinute=Tb,t.utcMinutes=Db,t.utcHour=kb,t.utcHours=Nb,t.utcDay=jb,t.utcDays=Pb,t.utcWeek=Vb,t.utcWeeks=Ub,t.utcSunday=Vb,t.utcSundays=Ub,t.utcMonday=Rb,t.utcMondays=Kb,t.utcTuesday=Ib,t.utcTuesdays=Hb,t.utcWednesday=Lb,t.utcWednesdays=Wb,t.utcThursday=zb,t.utcThursdays=Yb,t.utcFriday=Bb,t.utcFridays=Xb,t.utcSaturday=qb,t.utcSaturdays=$b,t.utcMonth=Gb,t.utcMonths=Zb,t.utcYear=Jb,t.utcYears=tx,t.timeFormatDefaultLocale=rs,t.timeFormatLocale=la,t.isoFormat=ox,t.isoParse=ux,t.now=ge,t.timer=xe,t.timerFlush=we,t.timeout=dp,t.interval=vp,t.transition=on,t.active=bd,t.interrupt=Cp,t.voronoi=tE,t.zoom=iE,t.zoomTransform=Hl,t.zoomIdentity=nE,Object.defineProperty(t,"__esModule",{value:!0})})},"./node_modules/form-data-to-object/index.js":function(t,e,n){"use strict";function r(t){return Object.keys(t).reduce(function(e,n){var r=n.match(/[^\[]*/i),i=n.match(/\[.*?\]/g)||[];i=[r[0]].concat(i).map(function(t){return t.replace(/\[|\]/g,"")});for(var o=e;i.length;){var u=i.shift();u in o?o=o[u]:(o[u]=i.length?isNaN(i[0])?{}:[]:t[n],o=o[u])}return e},{})}function i(t){function e(t,n,r){return Array.isArray(r)||"[object Object]"===Object.prototype.toString.call(r)?(Object.keys(r).forEach(function(i){e(t,n+"["+i+"]",r[i])}),t):(t[n]=r,t)}return Object.keys(t).reduce(function(n,r){return e(n,r,t[r])},{})}t.exports={fromObj:i,toObj:r}},"./node_modules/formsy-react/lib/Decorator.js":function(t,e,n){"use strict";(function(e){var r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},i=e.React||n("./node_modules/react/react.js"),o=n("./node_modules/create-react-class/index.js"),u=n("./node_modules/formsy-react/lib/Mixin.js");t.exports=function(){return function(t){return o({mixins:[u],render:function(){return i.createElement(t,r({setValidations:this.setValidations,setValue:this.setValue,resetValue:this.resetValue,getValue:this.getValue,hasValue:this.hasValue,getErrorMessage:this.getErrorMessage,getErrorMessages:this.getErrorMessages,isFormDisabled:this.isFormDisabled,isValid:this.isValid,isPristine:this.isPristine,isFormSubmitted:this.isFormSubmitted,isRequired:this.isRequired,showRequired:this.showRequired,showError:this.showError,isValidValue:this.isValidValue},this.props))}})}}}).call(e,n("./node_modules/webpack/buildin/global.js"))},"./node_modules/formsy-react/lib/HOC.js":function(t,e,n){"use strict";(function(e){function r(t){return t.displayName||t.name||("string"==typeof t?t:"Component")}var i=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},o=e.React||n("./node_modules/react/react.js"),u=n("./node_modules/create-react-class/index.js"),a=n("./node_modules/formsy-react/lib/Mixin.js");t.exports=function(t){return u({displayName:"Formsy("+r(t)+")",mixins:[a],render:function(){var e=this.props.innerRef,n=i({setValidations:this.setValidations,setValue:this.setValue,resetValue:this.resetValue,getValue:this.getValue,hasValue:this.hasValue,getErrorMessage:this.getErrorMessage,getErrorMessages:this.getErrorMessages,isFormDisabled:this.isFormDisabled,isValid:this.isValid,isPristine:this.isPristine,isFormSubmitted:this.isFormSubmitted,isRequired:this.isRequired,showRequired:this.showRequired,showError:this.showError,isValidValue:this.isValidValue},this.props);return e&&(n.ref=e),o.createElement(t,n)}})}}).call(e,n("./node_modules/webpack/buildin/global.js"))},"./node_modules/formsy-react/lib/Mixin.js":function(t,e,n){"use strict";(function(e){var r=n("./node_modules/prop-types/index.js"),i=n("./node_modules/formsy-react/lib/utils.js"),o=(e.React||n("./node_modules/react/react.js"),function(t){return"string"==typeof t?t.split(/\,(?![^{\[]*[}\]])/g).reduce(function(t,e){var n=e.split(":"),r=n.shift();if(n=n.map(function(t){try{return JSON.parse(t)}catch(e){return t}}),n.length>1)throw new Error("Formsy does not support multiple args on string validations. Use object format of validations instead.");return t[r]=!n.length||n[0],t},{}):t||{}});t.exports={getInitialState:function(){return{_value:this.props.value,_isRequired:!1,_isValid:!0,_isPristine:!0,_pristineValue:this.props.value,_validationError:[],_externalError:null,_formSubmitted:!1}},contextTypes:{formsy:r.object},getDefaultProps:function(){return{validationError:"",validationErrors:{}}},componentWillMount:function(){var t=function(){this.setValidations(this.props.validations,this.props.required),this.context.formsy.attachToForm(this)}.bind(this);if(!this.props.name)throw new Error("Form Input requires a name property when used");t()},componentWillReceiveProps:function(t){this.setValidations(t.validations,t.required)},componentDidUpdate:function(t){i.isSame(this.props.value,t.value)||this.setValue(this.props.value),i.isSame(this.props.validations,t.validations)&&i.isSame(this.props.required,t.required)||this.context.formsy.validate(this)},componentWillUnmount:function(){this.context.formsy.detachFromForm(this)},setValidations:function(t,e){this._validations=o(t)||{},this._requiredValidations=!0===e?{isDefaultRequiredValue:!0}:o(e)},setValue:function(t){this.setState({_value:t,_isPristine:!1},function(){this.context.formsy.validate(this)}.bind(this))},resetValue:function(){this.setState({_value:this.state._pristineValue,_isPristine:!0},function(){this.context.formsy.validate(this)})},getValue:function(){return this.state._value},hasValue:function(){return""!==this.state._value},getErrorMessage:function(){var t=this.getErrorMessages();return t.length?t[0]:null},getErrorMessages:function(){return!this.isValid()||this.showRequired()?this.state._externalError||this.state._validationError||[]:[]},isFormDisabled:function(){return this.context.formsy.isFormDisabled()},isValid:function(){return this.state._isValid},isPristine:function(){return this.state._isPristine},isFormSubmitted:function(){return this.state._formSubmitted},isRequired:function(){return!!this.props.required},showRequired:function(){return this.state._isRequired},showError:function(){return!this.showRequired()&&!this.isValid()},isValidValue:function(t){return this.context.formsy.isValidValue.call(null,this,t)}}}).call(e,n("./node_modules/webpack/buildin/global.js"))},"./node_modules/formsy-react/lib/main.js":function(t,e,n){"use strict";(function(e){function r(t,e){var n={};for(var r in t)e.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n}var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},u="function"==typeof Symbol&&"symbol"===i(Symbol.iterator)?function(t){return void 0===t?"undefined":i(t)}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":void 0===t?"undefined":i(t)},a=n("./node_modules/prop-types/index.js"),s=e.React||n("./node_modules/react/react.js"),l=n("./node_modules/create-react-class/index.js"),c={},f=n("./node_modules/formsy-react/lib/validationRules.js"),h=n("./node_modules/form-data-to-object/index.js"),p=n("./node_modules/formsy-react/lib/utils.js"),d=n("./node_modules/formsy-react/lib/Mixin.js"),v=n("./node_modules/formsy-react/lib/HOC.js"),m=n("./node_modules/formsy-react/lib/Decorator.js"),y={},g=[];c.Mixin=d,c.HOC=v,c.Decorator=m,c.defaults=function(t){y=t},c.addValidationRule=function(t,e){f[t]=e},c.Form=l({displayName:"Formsy",getInitialState:function(){return{isValid:!0,isSubmitting:!1,canChange:!1}},getDefaultProps:function(){return{onSuccess:function(){},onError:function(){},onSubmit:function(){},onValidSubmit:function(){},onInvalidSubmit:function(){},onValid:function(){},onInvalid:function(){},onChange:function(){},validationErrors:null,preventExternalInvalidation:!1}},childContextTypes:{formsy:a.object},getChildContext:function(){var t=this;return{formsy:{attachToForm:this.attachToForm,detachFromForm:this.detachFromForm,validate:this.validate,isFormDisabled:this.isFormDisabled,isValidValue:function(e,n){return t.runValidation(e,n).isValid}}}},componentWillMount:function(){this.inputs=[]},componentDidMount:function(){this.validateForm()},componentWillUpdate:function(){this.prevInputNames=this.inputs.map(function(t){return t.props.name})},componentDidUpdate:function(){this.props.validationErrors&&"object"===u(this.props.validationErrors)&&Object.keys(this.props.validationErrors).length>0&&this.setInputValidationErrors(this.props.validationErrors);var t=this.inputs.map(function(t){return t.props.name});p.arraysDiffer(this.prevInputNames,t)&&this.validateForm()},reset:function(t){this.setFormPristine(!0),this.resetModel(t)},submit:function(t){t&&t.preventDefault(),this.setFormPristine(!1);var e=this.getModel();this.props.onSubmit(e,this.resetModel,this.updateInputsWithError),this.state.isValid?this.props.onValidSubmit(e,this.resetModel,this.updateInputsWithError):this.props.onInvalidSubmit(e,this.resetModel,this.updateInputsWithError)},mapModel:function(t){return this.props.mapping?this.props.mapping(t):h.toObj(Object.keys(t).reduce(function(e,n){for(var r=n.split("."),i=e;r.length;){var o=r.shift();i=i[o]=r.length?i[o]||{}:t[n]}return e},{}))},getModel:function(){var t=this.getCurrentValues();return this.mapModel(t)},resetModel:function(t){this.inputs.forEach(function(e){var n=e.props.name;t&&t.hasOwnProperty(n)?e.setValue(t[n]):e.resetValue()}),this.validateForm()},setInputValidationErrors:function(t){this.inputs.forEach(function(e){var n=e.props.name,r=[{_isValid:!(n in t),_validationError:"string"==typeof t[n]?[t[n]]:t[n]}];e.setState.apply(e,r)})},isChanged:function(){return!p.isSame(this.getPristineValues(),this.getCurrentValues())},getPristineValues:function(){return this.inputs.reduce(function(t,e){return t[e.props.name]=e.props.value,t},{})},updateInputsWithError:function(t){var e=this;Object.keys(t).forEach(function(n,r){var i=p.find(e.inputs,function(t){return t.props.name===n});if(!i)throw new Error("You are trying to update an input that does not exist. Verify errors object with input names. "+JSON.stringify(t));var o=[{_isValid:e.props.preventExternalInvalidation||!1,_externalError:"string"==typeof t[n]?[t[n]]:t[n]}];i.setState.apply(i,o)})},isFormDisabled:function(){return this.props.disabled},getCurrentValues:function(){return this.inputs.reduce(function(t,e){return t[e.props.name]=e.state._value,t},{})},setFormPristine:function(t){this.setState({_formSubmitted:!t}),this.inputs.forEach(function(e,n){e.setState({_formSubmitted:!t,_isPristine:t})})},validate:function(t){this.state.canChange&&this.props.onChange(this.getCurrentValues(),this.isChanged());var e=this.runValidation(t);t.setState({_isValid:e.isValid,_isRequired:e.isRequired,_validationError:e.error,_externalError:null},this.validateForm)},runValidation:function(t,e){var n=this.getCurrentValues(),r=t.props.validationErrors,i=t.props.validationError;e=2===arguments.length?e:t.state._value;var o=this.runRules(e,n,t._validations),u=this.runRules(e,n,t._requiredValidations);"function"==typeof t.validate&&(o.failed=t.validate()?[]:["failed"]);var a=!!Object.keys(t._requiredValidations).length&&!!u.success.length,s=!(o.failed.length||this.props.validationErrors&&this.props.validationErrors[t.props.name]);return{isRequired:a,isValid:!a&&s,error:function(){if(s&&!a)return g;if(o.errors.length)return o.errors;if(this.props.validationErrors&&this.props.validationErrors[t.props.name])return"string"==typeof this.props.validationErrors[t.props.name]?[this.props.validationErrors[t.props.name]]:this.props.validationErrors[t.props.name];if(a){var e=r[u.success[0]];return e?[e]:null}return o.failed.length?o.failed.map(function(t){return r[t]?r[t]:i}).filter(function(t,e,n){return n.indexOf(t)===e}):void 0}.call(this)}},runRules:function(t,e,n){var r={errors:[],failed:[],success:[]};return Object.keys(n).length&&Object.keys(n).forEach(function(i){if(f[i]&&"function"==typeof n[i])throw new Error("Formsy does not allow you to override default validations: "+i);if(!f[i]&&"function"!=typeof n[i])throw new Error("Formsy does not have the validation rule: "+i);if("function"==typeof n[i]){var o=n[i](e,t);return void("string"==typeof o?(r.errors.push(o),r.failed.push(i)):o||r.failed.push(i))}if("function"!=typeof n[i]){var o=f[i](e,t,n[i]);return void("string"==typeof o?(r.errors.push(o),r.failed.push(i)):o?r.success.push(i):r.failed.push(i))}return r.success.push(i)}),r},validateForm:function(){var t=this,e=function(){var t=this.inputs.every(function(t){return t.state._isValid});this.setState({isValid:t}),t?this.props.onValid():this.props.onInvalid(),this.setState({canChange:!0})}.bind(this);this.inputs.forEach(function(n,r){var i=t.runValidation(n);i.isValid&&n.state._externalError&&(i.isValid=!1),n.setState({_isValid:i.isValid,_isRequired:i.isRequired,_validationError:i.error,_externalError:!i.isValid&&n.state._externalError?n.state._externalError:null},r===t.inputs.length-1?e:null)}),this.inputs.length||this.setState({canChange:!0})},attachToForm:function(t){-1===this.inputs.indexOf(t)&&this.inputs.push(t),this.validate(t)},detachFromForm:function(t){var e=this.inputs.indexOf(t);-1!==e&&(this.inputs=this.inputs.slice(0,e).concat(this.inputs.slice(e+1))),this.validateForm()},render:function(){var t=this.props,e=(t.mapping,t.validationErrors,t.onSubmit,t.onValid,t.onValidSubmit,t.onInvalid,t.onInvalidSubmit,t.onChange,t.reset,t.preventExternalInvalidation,t.onSuccess,t.onError,r(t,["mapping","validationErrors","onSubmit","onValid","onValidSubmit","onInvalid","onInvalidSubmit","onChange","reset","preventExternalInvalidation","onSuccess","onError"]));return s.createElement("form",o({},e,{onSubmit:this.submit}),this.props.children)}}),e.exports||e.module||e.define&&e.define.amd||(e.Formsy=c),t.exports=c}).call(e,n("./node_modules/webpack/buildin/global.js"))},"./node_modules/formsy-react/lib/utils.js":function(t,e,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i="function"==typeof Symbol&&"symbol"===r(Symbol.iterator)?function(t){return void 0===t?"undefined":r(t)}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":void 0===t?"undefined":r(t)};t.exports={arraysDiffer:function(t,e){var n=!1;return t.length!==e.length?n=!0:t.forEach(function(t,r){this.isSame(t,e[r])||(n=!0)},this),n},objectsDiffer:function(t,e){var n=!1;return Object.keys(t).length!==Object.keys(e).length?n=!0:Object.keys(t).forEach(function(r){this.isSame(t[r],e[r])||(n=!0)},this),n},isSame:function(t,e){return(void 0===t?"undefined":i(t))===(void 0===e?"undefined":i(e))&&(Array.isArray(t)&&Array.isArray(e)?!this.arraysDiffer(t,e):"function"==typeof t?t.toString()===e.toString():"object"===(void 0===t?"undefined":i(t))&&null!==t&&null!==e?!this.objectsDiffer(t,e):t===e)},find:function(t,e){for(var n=0,r=t.length;n<r;n++){var i=t[n];if(e(i))return i}return null}}},"./node_modules/formsy-react/lib/validationRules.js":function(t,e,n){"use strict";var r=function(t){return null!==t&&void 0!==t},i=function(t){return""===t},o={isDefaultRequiredValue:function(t,e){return void 0===e||""===e},isExisty:function(t,e){return r(e)},matchRegexp:function(t,e,n){return!r(e)||i(e)||n.test(e)},isUndefined:function(t,e){return void 0===e},isEmptyString:function(t,e){return i(e)},isEmail:function(t,e){return o.matchRegexp(t,e,/^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i)},isUrl:function(t,e){return o.matchRegexp(t,e,/^(https?|s?ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i)},isTrue:function(t,e){return!0===e},isFalse:function(t,e){return!1===e},isNumeric:function(t,e){return"number"==typeof e||o.matchRegexp(t,e,/^[-+]?(?:\d*[.])?\d+$/)},isAlpha:function(t,e){return o.matchRegexp(t,e,/^[A-Z]+$/i)},isAlphanumeric:function(t,e){return o.matchRegexp(t,e,/^[0-9A-Z]+$/i)},isInt:function(t,e){return o.matchRegexp(t,e,/^(?:[-+]?(?:0|[1-9]\d*))$/)},isFloat:function(t,e){return o.matchRegexp(t,e,/^(?:[-+]?(?:\d+))?(?:\.\d*)?(?:[eE][\+\-]?(?:\d+))?$/)},isWords:function(t,e){return o.matchRegexp(t,e,/^[A-Z\s]+$/i)},isSpecialWords:function(t,e){return o.matchRegexp(t,e,/^[A-Z\s\u00C0-\u017F]+$/i)},isLength:function(t,e,n){return!r(e)||i(e)||e.length===n},equals:function(t,e,n){return!r(e)||i(e)||e==n},equalsField:function(t,e,n){return e==t[n]},maxLength:function(t,e,n){return!r(e)||e.length<=n},minLength:function(t,e,n){return!r(e)||i(e)||e.length>=n}};t.exports=o},"./node_modules/react-input-autosize/lib/AutosizeInput.js":function(t,e,n){"use strict";var r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},i=n("./node_modules/react/react.js"),o=n("./node_modules/prop-types/index.js"),u=n("./node_modules/create-react-class/index.js"),a={position:"absolute",top:0,left:0,visibility:"hidden",height:0,overflow:"scroll",whiteSpace:"pre"},s=u({propTypes:{className:o.string,defaultValue:o.any,inputClassName:o.string,inputStyle:o.object,minWidth:o.oneOfType([o.number,o.string]),onAutosize:o.func,onChange:o.func,placeholder:o.string,placeholderIsMinWidth:o.bool,style:o.object,value:o.any},getDefaultProps:function(){return{minWidth:1}},getInitialState:function(){return{inputWidth:this.props.minWidth}},componentDidMount:function(){this.mounted=!0,this.copyInputStyles(),this.updateInputWidth()},componentDidUpdate:function(t,e){e.inputWidth!==this.state.inputWidth&&"function"==typeof this.props.onAutosize&&this.props.onAutosize(this.state.inputWidth),this.updateInputWidth()},componentWillUnmount:function(){this.mounted=!1},inputRef:function(t){this.input=t},placeHolderSizerRef:function(t){this.placeHolderSizer=t},sizerRef:function(t){this.sizer=t},copyInputStyles:function(){if(!this.mounted&&window.getComputedStyle){var t=this.input&&window.getComputedStyle(this.input);if(t){var e=this.sizer;if(e.style.fontSize=t.fontSize,e.style.fontFamily=t.fontFamily,e.style.fontWeight=t.fontWeight,e.style.fontStyle=t.fontStyle,e.style.letterSpacing=t.letterSpacing,e.style.textTransform=t.textTransform,this.props.placeholder){var n=this.placeHolderSizer;n.style.fontSize=t.fontSize,n.style.fontFamily=t.fontFamily,n.style.fontWeight=t.fontWeight,n.style.fontStyle=t.fontStyle,n.style.letterSpacing=t.letterSpacing,n.style.textTransform=t.textTransform}}}},updateInputWidth:function(){if(this.mounted&&this.sizer&&void 0!==this.sizer.scrollWidth){var t=void 0;t=this.props.placeholder&&(!this.props.value||this.props.value&&this.props.placeholderIsMinWidth)?Math.max(this.sizer.scrollWidth,this.placeHolderSizer.scrollWidth)+2:this.sizer.scrollWidth+2,t<this.props.minWidth&&(t=this.props.minWidth),t!==this.state.inputWidth&&this.setState({inputWidth:t})}},getInput:function(){return this.input},focus:function(){this.input.focus()},blur:function(){this.input.blur()},select:function(){this.input.select()},render:function(){var t=[this.props.defaultValue,this.props.value,""].reduce(function(t,e){return null!==t&&void 0!==t?t:e}),e=this.props.style||{};e.display||(e.display="inline-block");var n=r({},this.props.inputStyle);n.width=this.state.inputWidth+"px",n.boxSizing="content-box";var o=r({},this.props);return o.className=this.props.inputClassName,o.style=n,delete o.inputClassName,delete o.inputStyle,delete o.minWidth,delete o.onAutosize,delete o.placeholderIsMinWidth,i.createElement("div",{className:this.props.className,style:e},i.createElement("input",r({},o,{ref:this.inputRef})),i.createElement("div",{ref:this.sizerRef,style:a},t),this.props.placeholder?i.createElement("div",{ref:this.placeHolderSizerRef,style:a},this.props.placeholder):null)}});t.exports=s},"./node_modules/react-select/lib/Async.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+(void 0===e?"undefined":s(e)));t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function a(t){return p.default.createElement(y.default,t)}var s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};Object.defineProperty(e,"__esModule",{value:!0});var l=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},c=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),f=function(t,e,n){for(var r=!0;r;){var i=t,o=e,u=n;r=!1,null===i&&(i=Function.prototype);var a=Object.getOwnPropertyDescriptor(i,o);if(void 0!==a){if("value"in a)return a.value;var s=a.get;if(void 0===s)return;return s.call(u)}var l=Object.getPrototypeOf(i);if(null===l)return;t=l,e=o,n=u,r=!0,a=l=void 0}},h=n("./node_modules/react/react.js"),p=r(h),d=n("./node_modules/prop-types/index.js"),v=r(d),m=n("./node_modules/react-select/lib/Select.js"),y=r(m),g=n("./node_modules/react-select/lib/utils/stripDiacritics.js"),_=r(g),b={autoload:v.default.bool.isRequired,cache:v.default.any,children:v.default.func.isRequired,ignoreAccents:v.default.bool,ignoreCase:v.default.bool,loadingPlaceholder:v.default.oneOfType([v.default.string,v.default.node]),loadOptions:v.default.func.isRequired,multi:v.default.bool,options:v.default.array.isRequired,placeholder:v.default.oneOfType([v.default.string,v.default.node]),noResultsText:v.default.oneOfType([v.default.string,v.default.node]),onChange:v.default.func,searchPromptText:v.default.oneOfType([v.default.string,v.default.node]),onInputChange:v.default.func,value:v.default.any},x={},w={autoload:!0,cache:x,children:a,ignoreAccents:!0,ignoreCase:!0,loadingPlaceholder:"Loading...",options:[],searchPromptText:"Type to search"},E=function(t){function e(t,n){o(this,e),f(Object.getPrototypeOf(e.prototype),"constructor",this).call(this,t,n),this._cache=t.cache===x?{}:t.cache,this.state={isLoading:!1,options:t.options},this._onInputChange=this._onInputChange.bind(this)}return u(e,t),c(e,[{key:"componentDidMount",value:function(){this.props.autoload&&this.loadOptions("")}},{key:"componentWillUpdate",value:function(t,e){var n=this;["options"].forEach(function(e){n.props[e]!==t[e]&&n.setState(i({},e,t[e]))})}},{key:"clearOptions",value:function(){this.setState({options:[]})}},{key:"loadOptions",value:function(t){var e=this,n=this.props.loadOptions,r=this._cache;if(r&&r.hasOwnProperty(t))return void this.setState({options:r[t]});var i=function n(i,o){if(n===e._callback){e._callback=null;var u=o&&o.options||[];r&&(r[t]=u),e.setState({isLoading:!1,options:u})}};this._callback=i;var o=n(t,i);return o&&o.then(function(t){return i(0,t)},function(t){return i()}),this._callback&&!this.state.isLoading&&this.setState({isLoading:!0}),t}},{key:"_onInputChange",value:function(t){var e=this.props,n=e.ignoreAccents,r=e.ignoreCase,i=e.onInputChange;return n&&(t=(0,_.default)(t)),r&&(t=t.toLowerCase()),i&&i(t),this.loadOptions(t)}},{key:"inputValue",value:function(){return this.select?this.select.state.inputValue:""}},{key:"noResultsText",value:function(){var t=this.props,e=t.loadingPlaceholder,n=t.noResultsText,r=t.searchPromptText,i=this.state.isLoading,o=this.inputValue();return i?e:o&&n?n:r}},{key:"focus",value:function(){this.select.focus()}},{key:"render",value:function(){var t=this,e=this.props,n=e.children,r=e.loadingPlaceholder,i=e.placeholder,o=this.state,u=o.isLoading,a=o.options,s={noResultsText:this.noResultsText(),placeholder:u?r:i,options:u&&r?[]:a,ref:function(e){return t.select=e},onChange:function(e){t.props.multi&&t.props.value&&e.length>t.props.value.length&&t.clearOptions(),t.props.onChange(e)}};return n(l({},this.props,s,{isLoading:u,onInputChange:this._onInputChange}))}}]),e}(h.Component);e.default=E,E.propTypes=b,E.defaultProps=w,t.exports=e.default},"./node_modules/react-select/lib/AsyncCreatable.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t){var e=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];return Object.keys(t).reduce(function(e,n){var r=t[n];return void 0!==r&&(e[n]=r),e},e)}var o=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},u=n("./node_modules/react/react.js"),a=r(u),s=n("./node_modules/create-react-class/index.js"),l=r(s),c=n("./node_modules/react-select/lib/Select.js"),f=r(c),h=(0,l.default)({displayName:"AsyncCreatableSelect",focus:function(){this.select.focus()},render:function(){var t=this;return a.default.createElement(f.default.Async,this.props,function(e){return a.default.createElement(f.default.Creatable,t.props,function(n){return a.default.createElement(f.default,o({},i(e,i(n,{})),{onInputChange:function(t){return n.onInputChange(t),e.onInputChange(t)},ref:function(r){t.select=r,n.ref(r),e.ref(r)}}))})})}});t.exports=h},"./node_modules/react-select/lib/Creatable.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,e){var n={};for(var r in t)e.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n}function o(t){return p.default.createElement(_.default,t)}function u(t){var e=t.option,n=t.options,r=t.labelKey,i=t.valueKey;return 0===n.filter(function(t){return t[r]===e[r]||t[i]===e[i]}).length}function a(t){return!!t.label}function s(t){var e=t.label,n=t.labelKey,r=t.valueKey,i={};return i[r]=e,i[n]=e,i.className="Select-create-option-placeholder",i}function l(t){return'Create option "'+t+'"'}function c(t){switch(t.keyCode){case 9:case 13:case 188:return!0}return!1}var f=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},h=n("./node_modules/react/react.js"),p=r(h),d=n("./node_modules/create-react-class/index.js"),v=r(d),m=n("./node_modules/prop-types/index.js"),y=r(m),g=n("./node_modules/react-select/lib/Select.js"),_=r(g),b=n("./node_modules/react-select/lib/utils/defaultFilterOptions.js"),x=r(b),w=n("./node_modules/react-select/lib/utils/defaultMenuRenderer.js"),E=r(w),M=(0,v.default)({displayName:"CreatableSelect",propTypes:{children:y.default.func,filterOptions:y.default.any,isOptionUnique:y.default.func,isValidNewOption:y.default.func,menuRenderer:y.default.any,newOptionCreator:y.default.func,onInputChange:y.default.func,onInputKeyDown:y.default.func,onNewOptionClick:y.default.func,options:y.default.array,promptTextCreator:y.default.func,shouldKeyDownEventCreateNewOption:y.default.func},statics:{isOptionUnique:u,isValidNewOption:a,newOptionCreator:s,promptTextCreator:l,shouldKeyDownEventCreateNewOption:c},getDefaultProps:function(){return{filterOptions:x.default,isOptionUnique:u,isValidNewOption:a,menuRenderer:E.default,newOptionCreator:s,promptTextCreator:l,shouldKeyDownEventCreateNewOption:c}},createNewOption:function(){var t=this.props,e=t.isValidNewOption,n=t.newOptionCreator,r=t.onNewOptionClick,i=t.options,o=void 0===i?[]:i;t.shouldKeyDownEventCreateNewOption;if(e({label:this.inputValue})){var u=n({label:this.inputValue,labelKey:this.labelKey,valueKey:this.valueKey});this.isOptionUnique({option:u})&&(r?r(u):(o.unshift(u),this.select.selectValue(u)))}},filterOptions:function(){var t=this.props,e=t.filterOptions,n=t.isValidNewOption,r=(t.options,t.promptTextCreator),i=arguments[2]||[],o=e.apply(void 0,arguments)||[];if(n({label:this.inputValue})){var u=this.props.newOptionCreator,a=u({label:this.inputValue,labelKey:this.labelKey,valueKey:this.valueKey});if(this.isOptionUnique({option:a,options:i.concat(o)})){var s=r(this.inputValue);this._createPlaceholderOption=u({label:s,labelKey:this.labelKey,valueKey:this.valueKey}),o.unshift(this._createPlaceholderOption)}}return o},isOptionUnique:function(t){var e=t.option,n=t.options,r=this.props.isOptionUnique;return n=n||this.select.filterOptions(),r({labelKey:this.labelKey,option:e,options:n,valueKey:this.valueKey})},menuRenderer:function(t){return(0,this.props.menuRenderer)(f({},t,{onSelect:this.onOptionSelect,selectValue:this.onOptionSelect}))},onInputChange:function(t){var e=this.props.onInputChange;e&&e(t),this.inputValue=t},onInputKeyDown:function(t){var e=this.props,n=e.shouldKeyDownEventCreateNewOption,r=e.onInputKeyDown,i=this.select.getFocusedOption();i&&i===this._createPlaceholderOption&&n({keyCode:t.keyCode})?(this.createNewOption(),t.preventDefault()):r&&r(t)},onOptionSelect:function(t,e){t===this._createPlaceholderOption?this.createNewOption():this.select.selectValue(t)},focus:function(){this.select.focus()},render:function(){var t=this,e=this.props,n=(e.newOptionCreator,e.shouldKeyDownEventCreateNewOption,i(e,["newOptionCreator","shouldKeyDownEventCreateNewOption"])),r=this.props.children;return r||(r=o),r(f({},n,{allowCreate:!0,filterOptions:this.filterOptions,menuRenderer:this.menuRenderer,onInputChange:this.onInputChange,onInputKeyDown:this.onInputKeyDown,ref:function(e){t.select=e,e&&(t.labelKey=e.props.labelKey,t.valueKey=e.props.valueKey)}}))}});t.exports=M},"./node_modules/react-select/lib/Option.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}var i=n("./node_modules/react/react.js"),o=r(i),u=n("./node_modules/create-react-class/index.js"),a=r(u),s=n("./node_modules/prop-types/index.js"),l=r(s),c=n("./node_modules/classnames/index.js"),f=r(c),h=(0,a.default)({propTypes:{children:l.default.node,className:l.default.string,instancePrefix:l.default.string.isRequired,isDisabled:l.default.bool,isFocused:l.default.bool,isSelected:l.default.bool,onFocus:l.default.func,onSelect:l.default.func,onUnfocus:l.default.func,option:l.default.object.isRequired,optionIndex:l.default.number},blockEvent:function(t){t.preventDefault(),t.stopPropagation(),"A"===t.target.tagName&&"href"in t.target&&(t.target.target?window.open(t.target.href,t.target.target):window.location.href=t.target.href)},handleMouseDown:function(t){t.preventDefault(),t.stopPropagation(),this.props.onSelect(this.props.option,t)},handleMouseEnter:function(t){this.onFocus(t)},handleMouseMove:function(t){this.onFocus(t)},handleTouchEnd:function(t){this.dragging||this.handleMouseDown(t)},handleTouchMove:function(t){this.dragging=!0},handleTouchStart:function(t){this.dragging=!1},onFocus:function(t){this.props.isFocused||this.props.onFocus(this.props.option,t)},render:function(){var t=this.props,e=t.option,n=t.instancePrefix,r=t.optionIndex,i=(0,f.default)(this.props.className,e.className);return e.disabled?o.default.createElement("div",{className:i,onMouseDown:this.blockEvent,onClick:this.blockEvent},this.props.children):o.default.createElement("div",{className:i,style:e.style,role:"option",onMouseDown:this.handleMouseDown,onMouseEnter:this.handleMouseEnter,onMouseMove:this.handleMouseMove,onTouchStart:this.handleTouchStart,onTouchMove:this.handleTouchMove,onTouchEnd:this.handleTouchEnd,id:n+"-option-"+r,title:e.title},this.props.children)}});t.exports=h},"./node_modules/react-select/lib/Select.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,e){var n={};for(var r in t)e.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n}function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function u(t){var e=void 0===t?"undefined":a(t);return"string"===e?t:"object"===e?JSON.stringify(t):"number"===e||"boolean"===e?String(t):""}/*!
  Copyright (c) 2016 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/react-select
*/
var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};Object.defineProperty(e,"__esModule",{value:!0});var s=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},l=n("./node_modules/react/react.js"),c=r(l),f=n("./node_modules/create-react-class/index.js"),h=r(f),p=n("./node_modules/prop-types/index.js"),d=r(p),v=n("./node_modules/react-dom/index.js"),m=r(v),y=n("./node_modules/react-input-autosize/lib/AutosizeInput.js"),g=r(y),_=n("./node_modules/classnames/index.js"),b=r(_),x=n("./node_modules/react-select/lib/utils/defaultArrowRenderer.js"),w=r(x),E=n("./node_modules/react-select/lib/utils/defaultFilterOptions.js"),M=r(E),F=n("./node_modules/react-select/lib/utils/defaultMenuRenderer.js"),C=r(F),S=n("./node_modules/react-select/lib/utils/defaultClearRenderer.js"),A=r(S),O=n("./node_modules/react-select/lib/Async.js"),T=r(O),D=n("./node_modules/react-select/lib/AsyncCreatable.js"),k=r(D),N=n("./node_modules/react-select/lib/Creatable.js"),j=r(N),P=n("./node_modules/react-select/lib/Option.js"),V=r(P),R=n("./node_modules/react-select/lib/Value.js"),I=r(R),L=d.default.oneOfType([d.default.string,d.default.node]),z=1,B=(0,h.default)({displayName:"Select",propTypes:{addLabelText:d.default.string,"aria-describedby":d.default.string,"aria-label":d.default.string,"aria-labelledby":d.default.string,arrowRenderer:d.default.func,autoBlur:d.default.bool,autofocus:d.default.bool,autosize:d.default.bool,backspaceRemoves:d.default.bool,backspaceToRemoveMessage:d.default.string,className:d.default.string,clearAllText:L,clearRenderer:d.default.func,clearValueText:L,clearable:d.default.bool,deleteRemoves:d.default.bool,delimiter:d.default.string,disabled:d.default.bool,escapeClearsValue:d.default.bool,filterOption:d.default.func,filterOptions:d.default.any,ignoreAccents:d.default.bool,ignoreCase:d.default.bool,inputProps:d.default.object,inputRenderer:d.default.func,instanceId:d.default.string,isLoading:d.default.bool,joinValues:d.default.bool,labelKey:d.default.string,matchPos:d.default.string,matchProp:d.default.string,menuBuffer:d.default.number,menuContainerStyle:d.default.object,menuRenderer:d.default.func,menuStyle:d.default.object,multi:d.default.bool,name:d.default.string,noResultsText:L,onBlur:d.default.func,onBlurResetsInput:d.default.bool,onChange:d.default.func,onClose:d.default.func,onCloseResetsInput:d.default.bool,onFocus:d.default.func,onInputChange:d.default.func,onInputKeyDown:d.default.func,onMenuScrollToBottom:d.default.func,onOpen:d.default.func,onValueClick:d.default.func,openAfterFocus:d.default.bool,openOnFocus:d.default.bool,optionClassName:d.default.string,optionComponent:d.default.func,optionRenderer:d.default.func,options:d.default.array,pageSize:d.default.number,placeholder:L,required:d.default.bool,resetValue:d.default.any,scrollMenuIntoView:d.default.bool,searchable:d.default.bool,simpleValue:d.default.bool,style:d.default.object,tabIndex:d.default.string,tabSelectsValue:d.default.bool,value:d.default.any,valueComponent:d.default.func,valueKey:d.default.string,valueRenderer:d.default.func,wrapperStyle:d.default.object},statics:{Async:T.default,AsyncCreatable:k.default,Creatable:j.default},getDefaultProps:function(){return{addLabelText:'Add "{label}"?',arrowRenderer:w.default,autosize:!0,backspaceRemoves:!0,backspaceToRemoveMessage:"Press backspace to remove {label}",clearable:!0,clearAllText:"Clear all",clearRenderer:A.default,clearValueText:"Clear value",deleteRemoves:!0,delimiter:",",disabled:!1,escapeClearsValue:!0,filterOptions:M.default,ignoreAccents:!0,ignoreCase:!0,inputProps:{},isLoading:!1,joinValues:!1,labelKey:"label",matchPos:"any",matchProp:"any",menuBuffer:0,menuRenderer:C.default,multi:!1,noResultsText:"No results found",onBlurResetsInput:!0,onCloseResetsInput:!0,optionComponent:V.default,pageSize:5,placeholder:"Select...",required:!1,scrollMenuIntoView:!0,searchable:!0,simpleValue:!1,tabSelectsValue:!0,valueComponent:I.default,valueKey:"value"}},getInitialState:function(){return{inputValue:"",isFocused:!1,isOpen:!1,isPseudoFocused:!1,required:!1}},componentWillMount:function(){this._instancePrefix="react-select-"+(this.props.instanceId||++z)+"-";var t=this.getValueArray(this.props.value);this.props.required&&this.setState({required:this.handleRequired(t[0],this.props.multi)})},componentDidMount:function(){this.props.autofocus&&this.focus()},componentWillReceiveProps:function(t){var e=this.getValueArray(t.value,t);t.required&&this.setState({required:this.handleRequired(e[0],t.multi)})},componentWillUpdate:function(t,e){if(e.isOpen!==this.state.isOpen){this.toggleTouchOutsideEvent(e.isOpen);var n=e.isOpen?t.onOpen:t.onClose;n&&n()}},componentDidUpdate:function(t,e){if(this.menu&&this.focused&&this.state.isOpen&&!this.hasScrolledToOption){var n=m.default.findDOMNode(this.focused);m.default.findDOMNode(this.menu).scrollTop=n.offsetTop,this.hasScrolledToOption=!0}else this.state.isOpen||(this.hasScrolledToOption=!1);if(this._scrollToFocusedOptionOnUpdate&&this.focused&&this.menu){this._scrollToFocusedOptionOnUpdate=!1;var r=m.default.findDOMNode(this.focused),i=m.default.findDOMNode(this.menu),o=r.getBoundingClientRect(),u=i.getBoundingClientRect();(o.bottom>u.bottom||o.top<u.top)&&(i.scrollTop=r.offsetTop+r.clientHeight-i.offsetHeight)}if(this.props.scrollMenuIntoView&&this.menuContainer){var a=this.menuContainer.getBoundingClientRect();window.innerHeight<a.bottom+this.props.menuBuffer&&window.scrollBy(0,a.bottom+this.props.menuBuffer-window.innerHeight)}t.disabled!==this.props.disabled&&(this.setState({isFocused:!1}),this.closeMenu())},componentWillUnmount:function(){!document.removeEventListener&&document.detachEvent?document.detachEvent("ontouchstart",this.handleTouchOutside):document.removeEventListener("touchstart",this.handleTouchOutside)},toggleTouchOutsideEvent:function(t){t?!document.addEventListener&&document.attachEvent?document.attachEvent("ontouchstart",this.handleTouchOutside):document.addEventListener("touchstart",this.handleTouchOutside):!document.removeEventListener&&document.detachEvent?document.detachEvent("ontouchstart",this.handleTouchOutside):document.removeEventListener("touchstart",this.handleTouchOutside)},handleTouchOutside:function(t){this.wrapper&&!this.wrapper.contains(t.target)&&this.closeMenu()},focus:function(){this.input&&this.input.focus()},blurInput:function(){this.input&&this.input.blur()},handleTouchMove:function(t){this.dragging=!0},handleTouchStart:function(t){this.dragging=!1},handleTouchEnd:function(t){this.dragging||this.handleMouseDown(t)},handleTouchEndClearValue:function(t){this.dragging||this.clearValue(t)},handleMouseDown:function(t){if(!(this.props.disabled||"mousedown"===t.type&&0!==t.button)&&"INPUT"!==t.target.tagName){if(t.stopPropagation(),t.preventDefault(),!this.props.searchable)return this.focus(),this.setState({isOpen:!this.state.isOpen});if(this.state.isFocused){this.focus();var e=this.input;"function"==typeof e.getInput&&(e=e.getInput()),e.value="",this.setState({isOpen:!0,isPseudoFocused:!1})}else this._openAfterFocus=!0,this.focus()}},handleMouseDownOnArrow:function(t){this.props.disabled||"mousedown"===t.type&&0!==t.button||this.state.isOpen&&(t.stopPropagation(),t.preventDefault(),this.closeMenu())},handleMouseDownOnMenu:function(t){this.props.disabled||"mousedown"===t.type&&0!==t.button||(t.stopPropagation(),t.preventDefault(),this._openAfterFocus=!0,this.focus())},closeMenu:function(){this.props.onCloseResetsInput?this.setState({isOpen:!1,isPseudoFocused:this.state.isFocused&&!this.props.multi,inputValue:""}):this.setState({isOpen:!1,isPseudoFocused:this.state.isFocused&&!this.props.multi,inputValue:this.state.inputValue}),this.hasScrolledToOption=!1},handleInputFocus:function(t){if(!this.props.disabled){var e=this.state.isOpen||this._openAfterFocus||this.props.openOnFocus;this.props.onFocus&&this.props.onFocus(t),this.setState({isFocused:!0,isOpen:e}),this._openAfterFocus=!1}},handleInputBlur:function(t){if(this.menu&&(this.menu===document.activeElement||this.menu.contains(document.activeElement)))return void this.focus();this.props.onBlur&&this.props.onBlur(t);var e={isFocused:!1,isOpen:!1,isPseudoFocused:!1};this.props.onBlurResetsInput&&(e.inputValue=""),this.setState(e)},handleInputChange:function(t){var e=t.target.value;if(this.state.inputValue!==t.target.value&&this.props.onInputChange){var n=this.props.onInputChange(e);null!=n&&"object"!==(void 0===n?"undefined":a(n))&&(e=""+n)}this.setState({isOpen:!0,isPseudoFocused:!1,inputValue:e})},handleKeyDown:function(t){if(!(this.props.disabled||"function"==typeof this.props.onInputKeyDown&&(this.props.onInputKeyDown(t),t.defaultPrevented))){switch(t.keyCode){case 8:return void(!this.state.inputValue&&this.props.backspaceRemoves&&(t.preventDefault(),this.popValue()));case 9:if(t.shiftKey||!this.state.isOpen||!this.props.tabSelectsValue)return;return void this.selectFocusedOption();case 13:if(!this.state.isOpen)return;t.stopPropagation(),this.selectFocusedOption();break;case 27:this.state.isOpen?(this.closeMenu(),t.stopPropagation()):this.props.clearable&&this.props.escapeClearsValue&&(this.clearValue(t),t.stopPropagation());break;case 38:this.focusPreviousOption();break;case 40:this.focusNextOption();break;case 33:this.focusPageUpOption();break;case 34:this.focusPageDownOption();break;case 35:if(t.shiftKey)return;this.focusEndOption();break;case 36:if(t.shiftKey)return;this.focusStartOption();break;case 46:return void(!this.state.inputValue&&this.props.deleteRemoves&&(t.preventDefault(),this.popValue()));default:return}t.preventDefault()}},handleValueClick:function(t,e){this.props.onValueClick&&this.props.onValueClick(t,e)},handleMenuScroll:function(t){if(this.props.onMenuScrollToBottom){var e=t.target;e.scrollHeight>e.offsetHeight&&!(e.scrollHeight-e.offsetHeight-e.scrollTop)&&this.props.onMenuScrollToBottom()}},handleRequired:function(t,e){return!t||(e?0===t.length:0===Object.keys(t).length)},getOptionLabel:function(t){return t[this.props.labelKey]},getValueArray:function(t,e){var n=this,r="object"===(void 0===e?"undefined":a(e))?e:this.props;if(r.multi){if("string"==typeof t&&(t=t.split(r.delimiter)),!Array.isArray(t)){if(null===t||void 0===t)return[];t=[t]}return t.map(function(t){return n.expandValue(t,r)}).filter(function(t){return t})}var i=this.expandValue(t,r);return i?[i]:[]},expandValue:function(t,e){var n=void 0===t?"undefined":a(t);if("string"!==n&&"number"!==n&&"boolean"!==n)return t;var r=e.options,i=e.valueKey;if(r)for(var o=0;o<r.length;o++)if(r[o][i]===t)return r[o]},setValue:function(t){var e=this;if(this.props.autoBlur&&this.blurInput(),this.props.onChange){if(this.props.required){var n=this.handleRequired(t,this.props.multi);this.setState({required:n})}this.props.simpleValue&&t&&(t=this.props.multi?t.map(function(t){return t[e.props.valueKey]}).join(this.props.delimiter):t[this.props.valueKey]),this.props.onChange(t)}},selectValue:function(t){var e=this;this.hasScrolledToOption=!1,this.props.multi?this.setState({inputValue:"",focusedIndex:null},function(){e.addValue(t)}):this.setState({isOpen:!1,inputValue:"",isPseudoFocused:this.state.isFocused},function(){e.setValue(t)})},addValue:function(t){var e=this.getValueArray(this.props.value),n=this._visibleOptions.filter(function(t){return!t.disabled}),r=n.indexOf(t);this.setValue(e.concat(t)),n.length-1===r?this.focusOption(n[r-1]):n.length>r&&this.focusOption(n[r+1])},popValue:function(){var t=this.getValueArray(this.props.value);t.length&&!1!==t[t.length-1].clearableValue&&this.setValue(t.slice(0,t.length-1))},removeValue:function(t){var e=this.getValueArray(this.props.value);this.setValue(e.filter(function(e){return e!==t})),this.focus()},clearValue:function(t){t&&"mousedown"===t.type&&0!==t.button||(t.stopPropagation(),t.preventDefault(),this.setValue(this.getResetValue()),this.setState({isOpen:!1,inputValue:""},this.focus))},getResetValue:function(){return void 0!==this.props.resetValue?this.props.resetValue:this.props.multi?[]:null},focusOption:function(t){this.setState({focusedOption:t})},focusNextOption:function(){this.focusAdjacentOption("next")},focusPreviousOption:function(){this.focusAdjacentOption("previous")},focusPageUpOption:function(){this.focusAdjacentOption("page_up")},focusPageDownOption:function(){this.focusAdjacentOption("page_down")},focusStartOption:function(){this.focusAdjacentOption("start")},focusEndOption:function(){this.focusAdjacentOption("end")},focusAdjacentOption:function(t){var e=this._visibleOptions.map(function(t,e){return{option:t,index:e}}).filter(function(t){return!t.option.disabled});if(this._scrollToFocusedOptionOnUpdate=!0,!this.state.isOpen)return void this.setState({isOpen:!0,inputValue:"",focusedOption:this._focusedOption||(e.length?e["next"===t?0:e.length-1].option:null)});if(e.length){for(var n=-1,r=0;r<e.length;r++)if(this._focusedOption===e[r].option){n=r;break}if("next"===t&&-1!==n)n=(n+1)%e.length;else if("previous"===t)n>0?n-=1:n=e.length-1;else if("start"===t)n=0;else if("end"===t)n=e.length-1;else if("page_up"===t){var i=n-this.props.pageSize;n=i<0?0:i}else if("page_down"===t){var i=n+this.props.pageSize;n=i>e.length-1?e.length-1:i}-1===n&&(n=0),this.setState({focusedIndex:e[n].index,focusedOption:e[n].option})}},getFocusedOption:function(){return this._focusedOption},getInputValue:function(){return this.state.inputValue},selectFocusedOption:function(){if(this._focusedOption)return this.selectValue(this._focusedOption)},renderLoading:function(){if(this.props.isLoading)return c.default.createElement("span",{className:"Select-loading-zone","aria-hidden":"true"},c.default.createElement("span",{className:"Select-loading"}))},renderValue:function(t,e){var n=this,r=this.props.valueRenderer||this.getOptionLabel,i=this.props.valueComponent;if(!t.length)return this.state.inputValue?null:c.default.createElement("div",{className:"Select-placeholder"},this.props.placeholder);var o=this.props.onValueClick?this.handleValueClick:null;return this.props.multi?t.map(function(t,e){return c.default.createElement(i,{id:n._instancePrefix+"-value-"+e,instancePrefix:n._instancePrefix,disabled:n.props.disabled||!1===t.clearableValue,key:"value-"+e+"-"+t[n.props.valueKey],onClick:o,onRemove:n.removeValue,value:t},r(t,e),c.default.createElement("span",{className:"Select-aria-only"}," "))}):this.state.inputValue?void 0:(e&&(o=null),c.default.createElement(i,{id:this._instancePrefix+"-value-item",disabled:this.props.disabled,instancePrefix:this._instancePrefix,onClick:o,value:t[0]},r(t[0])))},renderInput:function(t,e){var n,r=this,u=(0,b.default)("Select-input",this.props.inputProps.className),a=!!this.state.isOpen,l=(0,b.default)((n={},o(n,this._instancePrefix+"-list",a),o(n,this._instancePrefix+"-backspace-remove-message",this.props.multi&&!this.props.disabled&&this.state.isFocused&&!this.state.inputValue),n)),f=s({},this.props.inputProps,{role:"combobox","aria-expanded":""+a,"aria-owns":l,"aria-haspopup":""+a,"aria-activedescendant":a?this._instancePrefix+"-option-"+e:this._instancePrefix+"-value","aria-describedby":this.props["aria-describedby"],"aria-labelledby":this.props["aria-labelledby"],"aria-label":this.props["aria-label"],className:u,tabIndex:this.props.tabIndex,onBlur:this.handleInputBlur,onChange:this.handleInputChange,onFocus:this.handleInputFocus,ref:function(t){return r.input=t},required:this.state.required,value:this.state.inputValue});if(this.props.inputRenderer)return this.props.inputRenderer(f);if(this.props.disabled||!this.props.searchable){var h=this.props.inputProps,p=(h.inputClassName,i(h,["inputClassName"])),d=(0,b.default)(o({},this._instancePrefix+"-list",a));return c.default.createElement("div",s({},p,{role:"combobox","aria-expanded":a,"aria-owns":d,"aria-activedescendant":a?this._instancePrefix+"-option-"+e:this._instancePrefix+"-value",className:u,tabIndex:this.props.tabIndex||0,onBlur:this.handleInputBlur,onFocus:this.handleInputFocus,ref:function(t){return r.input=t},"aria-readonly":""+!!this.props.disabled,style:{border:0,width:1,display:"inline-block"}}))}return this.props.autosize?c.default.createElement(g.default,s({},f,{minWidth:"5"})):c.default.createElement("div",{className:u},c.default.createElement("input",f))},renderClear:function(){if(!(!this.props.clearable||void 0===this.props.value||null===this.props.value||this.props.multi&&!this.props.value.length||this.props.disabled||this.props.isLoading)){var t=this.props.clearRenderer();return c.default.createElement("span",{className:"Select-clear-zone",title:this.props.multi?this.props.clearAllText:this.props.clearValueText,"aria-label":this.props.multi?this.props.clearAllText:this.props.clearValueText,onMouseDown:this.clearValue,onTouchStart:this.handleTouchStart,onTouchMove:this.handleTouchMove,onTouchEnd:this.handleTouchEndClearValue},t)}},renderArrow:function(){var t=this.handleMouseDownOnArrow,e=this.state.isOpen,n=this.props.arrowRenderer({onMouseDown:t,isOpen:e});return c.default.createElement("span",{className:"Select-arrow-zone",onMouseDown:t},n)},filterOptions:function(t){var e=this.state.inputValue,n=this.props.options||[];if(this.props.filterOptions){return("function"==typeof this.props.filterOptions?this.props.filterOptions:M.default)(n,e,t,{filterOption:this.props.filterOption,ignoreAccents:this.props.ignoreAccents,ignoreCase:this.props.ignoreCase,labelKey:this.props.labelKey,matchPos:this.props.matchPos,matchProp:this.props.matchProp,valueKey:this.props.valueKey})}return n},onOptionRef:function(t,e){e&&(this.focused=t)},renderMenu:function(t,e,n){return t&&t.length?this.props.menuRenderer({focusedOption:n,focusOption:this.focusOption,instancePrefix:this._instancePrefix,labelKey:this.props.labelKey,onFocus:this.focusOption,onSelect:this.selectValue,optionClassName:this.props.optionClassName,optionComponent:this.props.optionComponent,optionRenderer:this.props.optionRenderer||this.getOptionLabel,options:t,selectValue:this.selectValue,valueArray:e,valueKey:this.props.valueKey,onOptionRef:this.onOptionRef}):this.props.noResultsText?c.default.createElement("div",{className:"Select-noresults"},this.props.noResultsText):null},renderHiddenField:function(t){var e=this;if(this.props.name){if(this.props.joinValues){var n=t.map(function(t){return u(t[e.props.valueKey])}).join(this.props.delimiter);return c.default.createElement("input",{type:"hidden",ref:function(t){return e.value=t},name:this.props.name,value:n,disabled:this.props.disabled})}return t.map(function(t,n){return c.default.createElement("input",{key:"hidden."+n,type:"hidden",ref:"value"+n,name:e.props.name,value:u(t[e.props.valueKey]),disabled:e.props.disabled})})}},getFocusableOptionIndex:function(t){var e=this._visibleOptions;if(!e.length)return null;var n=this.props.valueKey,r=this.state.focusedOption||t;if(r&&!r.disabled){var i=-1;if(e.some(function(t,e){var o=t[n]===r[n];return o&&(i=e),o}),-1!==i)return i}for(var o=0;o<e.length;o++)if(!e[o].disabled)return o;return null},renderOuter:function(t,e,n){var r=this,i=this.renderMenu(t,e,n);return i?c.default.createElement("div",{ref:function(t){return r.menuContainer=t},className:"Select-menu-outer",style:this.props.menuContainerStyle},c.default.createElement("div",{ref:function(t){return r.menu=t},role:"listbox",className:"Select-menu",id:this._instancePrefix+"-list",style:this.props.menuStyle,onScroll:this.handleMenuScroll,onMouseDown:this.handleMouseDownOnMenu},i)):null},render:function(){var t=this,e=this.getValueArray(this.props.value),n=this._visibleOptions=this.filterOptions(this.props.multi?this.getValueArray(this.props.value):null),r=this.state.isOpen;this.props.multi&&!n.length&&e.length&&!this.state.inputValue&&(r=!1);var i=this.getFocusableOptionIndex(e[0]),o=null;o=this._focusedOption=null!==i?n[i]:null;var u=(0,b.default)("Select",this.props.className,{"Select--multi":this.props.multi,"Select--single":!this.props.multi,"is-clearable":this.props.clearable,"is-disabled":this.props.disabled,"is-focused":this.state.isFocused,"is-loading":this.props.isLoading,"is-open":r,"is-pseudo-focused":this.state.isPseudoFocused,"is-searchable":this.props.searchable,"has-value":e.length}),a=null;return this.props.multi&&!this.props.disabled&&e.length&&!this.state.inputValue&&this.state.isFocused&&this.props.backspaceRemoves&&(a=c.default.createElement("span",{id:this._instancePrefix+"-backspace-remove-message",className:"Select-aria-only","aria-live":"assertive"},this.props.backspaceToRemoveMessage.replace("{label}",e[e.length-1][this.props.labelKey]))),c.default.createElement("div",{ref:function(e){return t.wrapper=e},className:u,style:this.props.wrapperStyle},this.renderHiddenField(e),c.default.createElement("div",{ref:function(e){return t.control=e},className:"Select-control",style:this.props.style,onKeyDown:this.handleKeyDown,onMouseDown:this.handleMouseDown,onTouchEnd:this.handleTouchEnd,onTouchStart:this.handleTouchStart,onTouchMove:this.handleTouchMove},c.default.createElement("span",{className:"Select-multi-value-wrapper",id:this._instancePrefix+"-value"},this.renderValue(e,r),this.renderInput(e,i)),a,this.renderLoading(),this.renderClear(),this.renderArrow()),r?this.renderOuter(n,this.props.multi?null:e,o):null)}});e.default=B,t.exports=e.default},"./node_modules/react-select/lib/Value.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}var i=n("./node_modules/react/react.js"),o=r(i),u=n("./node_modules/create-react-class/index.js"),a=r(u),s=n("./node_modules/prop-types/index.js"),l=r(s),c=n("./node_modules/classnames/index.js"),f=r(c),h=(0,a.default)({displayName:"Value",propTypes:{children:l.default.node,disabled:l.default.bool,id:l.default.string,onClick:l.default.func,onRemove:l.default.func,value:l.default.object.isRequired},handleMouseDown:function(t){if("mousedown"!==t.type||0===t.button)return this.props.onClick?(t.stopPropagation(),void this.props.onClick(this.props.value,t)):void(this.props.value.href&&t.stopPropagation())},onRemove:function(t){t.preventDefault(),t.stopPropagation(),this.props.onRemove(this.props.value)},handleTouchEndRemove:function(t){this.dragging||this.onRemove(t)},handleTouchMove:function(t){this.dragging=!0},handleTouchStart:function(t){this.dragging=!1},renderRemoveIcon:function(){if(!this.props.disabled&&this.props.onRemove)return o.default.createElement("span",{className:"Select-value-icon","aria-hidden":"true",onMouseDown:this.onRemove,onTouchEnd:this.handleTouchEndRemove,onTouchStart:this.handleTouchStart,onTouchMove:this.handleTouchMove},"×")},renderLabel:function(){return this.props.onClick||this.props.value.href?o.default.createElement("a",{className:"Select-value-label",href:this.props.value.href,target:this.props.value.target,onMouseDown:this.handleMouseDown,onTouchEnd:this.handleMouseDown},this.props.children):o.default.createElement("span",{className:"Select-value-label",role:"option","aria-selected":"true",id:this.props.id},this.props.children)},render:function(){return o.default.createElement("div",{className:(0,f.default)("Select-value",this.props.value.className),style:this.props.value.style,title:this.props.value.title},this.renderRemoveIcon(),this.renderLabel())}});t.exports=h},"./node_modules/react-select/lib/utils/defaultArrowRenderer.js":function(t,e,n){"use strict";function r(t){var e=t.onMouseDown;return o.default.createElement("span",{className:"Select-arrow",onMouseDown:e})}Object.defineProperty(e,"__esModule",{value:!0}),e.default=r;var i=n("./node_modules/react/react.js"),o=function(t){return t&&t.__esModule?t:{default:t}}(i);t.exports=e.default},"./node_modules/react-select/lib/utils/defaultClearRenderer.js":function(t,e,n){"use strict";function r(){return o.default.createElement("span",{className:"Select-clear",dangerouslySetInnerHTML:{__html:"&times;"}})}Object.defineProperty(e,"__esModule",{value:!0}),e.default=r;var i=n("./node_modules/react/react.js"),o=function(t){return t&&t.__esModule?t:{default:t}}(i);t.exports=e.default},"./node_modules/react-select/lib/utils/defaultFilterOptions.js":function(t,e,n){"use strict";function r(t,e,n,r){var i=this;return r.ignoreAccents&&(e=(0,o.default)(e)),r.ignoreCase&&(e=e.toLowerCase()),n&&(n=n.map(function(t){return t[r.valueKey]})),t.filter(function(t){if(n&&n.indexOf(t[r.valueKey])>-1)return!1;if(r.filterOption)return r.filterOption.call(i,t,e);if(!e)return!0;var u=String(t[r.valueKey]),a=String(t[r.labelKey]);return r.ignoreAccents&&("label"!==r.matchProp&&(u=(0,o.default)(u)),"value"!==r.matchProp&&(a=(0,o.default)(a))),r.ignoreCase&&("label"!==r.matchProp&&(u=u.toLowerCase()),"value"!==r.matchProp&&(a=a.toLowerCase())),"start"===r.matchPos?"label"!==r.matchProp&&u.substr(0,e.length)===e||"value"!==r.matchProp&&a.substr(0,e.length)===e:"label"!==r.matchProp&&u.indexOf(e)>=0||"value"!==r.matchProp&&a.indexOf(e)>=0})}var i=n("./node_modules/react-select/lib/utils/stripDiacritics.js"),o=function(t){return t&&t.__esModule?t:{default:t}}(i);t.exports=r},"./node_modules/react-select/lib/utils/defaultMenuRenderer.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t){var e=t.focusedOption,n=t.instancePrefix,r=(t.labelKey,t.onFocus),i=t.onSelect,o=t.optionClassName,a=t.optionComponent,l=t.optionRenderer,c=t.options,f=t.valueArray,h=t.valueKey,p=t.onOptionRef,d=a;return c.map(function(t,a){var c=f&&f.indexOf(t)>-1,v=t===e,m=(0,u.default)(o,{"Select-option":!0,"is-selected":c,"is-focused":v,"is-disabled":t.disabled});return s.default.createElement(d,{className:m,instancePrefix:n,isDisabled:t.disabled,isFocused:v,isSelected:c,key:"option-"+a+"-"+t[h],onFocus:r,onSelect:i,option:t,optionIndex:a,ref:function(t){p(t,v)}},l(t,a))})}var o=n("./node_modules/classnames/index.js"),u=r(o),a=n("./node_modules/react/react.js"),s=r(a);t.exports=i},"./node_modules/react-select/lib/utils/stripDiacritics.js":function(t,e,n){"use strict";var r=[{base:"A",letters:/[\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F]/g},{base:"AA",letters:/[\uA732]/g},{base:"AE",letters:/[\u00C6\u01FC\u01E2]/g},{base:"AO",letters:/[\uA734]/g},{base:"AU",letters:/[\uA736]/g},{base:"AV",letters:/[\uA738\uA73A]/g},{base:"AY",letters:/[\uA73C]/g},{base:"B",letters:/[\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181]/g},{base:"C",letters:/[\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E]/g},{base:"D",letters:/[\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779]/g},{base:"DZ",letters:/[\u01F1\u01C4]/g},{base:"Dz",letters:/[\u01F2\u01C5]/g},{base:"E",letters:/[\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E]/g},{base:"F",letters:/[\u0046\u24BB\uFF26\u1E1E\u0191\uA77B]/g},{base:"G",letters:/[\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E]/g},{base:"H",letters:/[\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D]/g},{base:"I",letters:/[\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197]/g},{base:"J",letters:/[\u004A\u24BF\uFF2A\u0134\u0248]/g},{base:"K",letters:/[\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2]/g},{base:"L",letters:/[\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780]/g},{base:"LJ",letters:/[\u01C7]/g},{base:"Lj",letters:/[\u01C8]/g},{base:"M",letters:/[\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C]/g},{base:"N",letters:/[\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4]/g},{base:"NJ",letters:/[\u01CA]/g},{base:"Nj",letters:/[\u01CB]/g},{base:"O",letters:/[\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C]/g},{base:"OI",letters:/[\u01A2]/g},{base:"OO",letters:/[\uA74E]/g},{base:"OU",letters:/[\u0222]/g},{base:"P",letters:/[\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754]/g},{base:"Q",letters:/[\u0051\u24C6\uFF31\uA756\uA758\u024A]/g},{base:"R",letters:/[\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782]/g},{base:"S",letters:/[\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784]/g},{base:"T",letters:/[\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786]/g},{base:"TZ",letters:/[\uA728]/g},{base:"U",letters:/[\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244]/g},{base:"V",letters:/[\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245]/g},{base:"VY",letters:/[\uA760]/g},{base:"W",letters:/[\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72]/g},{base:"X",letters:/[\u0058\u24CD\uFF38\u1E8A\u1E8C]/g},{base:"Y",letters:/[\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE]/g},{base:"Z",letters:/[\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762]/g},{base:"a",letters:/[\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250]/g},{base:"aa",letters:/[\uA733]/g},{base:"ae",letters:/[\u00E6\u01FD\u01E3]/g},{base:"ao",letters:/[\uA735]/g},{base:"au",letters:/[\uA737]/g},{base:"av",letters:/[\uA739\uA73B]/g},{base:"ay",letters:/[\uA73D]/g},{base:"b",letters:/[\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253]/g},{base:"c",letters:/[\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184]/g},{base:"d",letters:/[\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A]/g},{base:"dz",letters:/[\u01F3\u01C6]/g},{base:"e",letters:/[\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD]/g},{base:"f",letters:/[\u0066\u24D5\uFF46\u1E1F\u0192\uA77C]/g},{base:"g",letters:/[\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F]/g},{base:"h",letters:/[\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265]/g},{base:"hv",letters:/[\u0195]/g},{base:"i",letters:/[\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131]/g},{base:"j",letters:/[\u006A\u24D9\uFF4A\u0135\u01F0\u0249]/g},{base:"k",letters:/[\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3]/g},{base:"l",letters:/[\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747]/g},{base:"lj",letters:/[\u01C9]/g},{base:"m",letters:/[\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F]/g},{base:"n",letters:/[\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5]/g},{base:"nj",letters:/[\u01CC]/g},{base:"o",letters:/[\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275]/g},{base:"oi",letters:/[\u01A3]/g},{base:"ou",letters:/[\u0223]/g},{base:"oo",letters:/[\uA74F]/g},{base:"p",letters:/[\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755]/g},{base:"q",letters:/[\u0071\u24E0\uFF51\u024B\uA757\uA759]/g},{base:"r",letters:/[\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783]/g},{base:"s",letters:/[\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B]/g},{base:"t",letters:/[\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787]/g},{base:"tz",letters:/[\uA729]/g},{base:"u",letters:/[\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289]/g},{base:"v",letters:/[\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C]/g},{base:"vy",letters:/[\uA761]/g},{base:"w",letters:/[\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73]/g},{base:"x",letters:/[\u0078\u24E7\uFF58\u1E8B\u1E8D]/g},{base:"y",letters:/[\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF]/g},{base:"z",letters:/[\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763]/g}];t.exports=function(t){for(var e=0;e<r.length;e++)t=t.replace(r[e].letters,r[e].base);return t}},"./node_modules/webpack/buildin/amd-options.js":function(t,e){(function(e){t.exports=e}).call(e,{})},"./src/components/Auth/Field/Field.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var a=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),s=n("./node_modules/react/react.js"),l=r(s),c=n("./node_modules/formsy-react/lib/main.js"),f=(r(c),n("./node_modules/prop-types/index.js")),h=r(f),p=function(t){function e(t){i(this,e);var n=o(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return n.changeValue=function(t){n.props.setValue(t.currentTarget["checkbox"===n.props.type?"checked":"value"])},n}return u(e,t),a(e,[{key:"render",value:function(){var t=this.props.getErrorMessage();return l.default.createElement("div",{className:"signup-field-group"},l.default.createElement("label",{htmlFor:this.props.name.toLowerCase(),className:"signup-form__label"},this.props.name),l.default.createElement("input",{onChange:this.changeValue,value:this.props.getValue(),type:this.props.type||"text",name:this.props.name.toLowerCase(),className:"signup-form__input-field"}),l.default.createElement("p",{className:"caption signup-form__caption"},this.props.text),l.default.createElement("span",{className:"signup-form__error-message"},t))}}]),e}(l.default.Component);p.propTypes={name:h.default.string,text:h.default.string,className:h.default.string,type:h.default.string,setValue:h.default.any,getValue:h.default.func,validations:h.default.any,getErrorMessage:h.default.func,registration:h.default.func},e.default=(0,c.HOC)(p)},"./src/components/Chart/Axis/Axis.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),s=n("./node_modules/react/react.js"),l=r(s),c=n("./node_modules/d3/build/d3.js"),f=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(c),h=n("./node_modules/react-dom/index.js"),p=(r(h),n("./node_modules/prop-types/index.js")),d=r(p),v=function(t){function e(){return i(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return u(e,t),a(e,[{key:"componentDidUpdate",value:function(){this.renderAxis()}},{key:"componentDidMount",value:function(){this.renderAxis()}},{key:"renderAxis",value:function(){var t="axis"+this.props.orient,e=f[t](this.props.scale).ticks(this.props.ticks);this.props.format&&(e=e.tickFormat(f.timeFormat(this.props.format))),f.select(this.axisElement).call(e)}},{key:"render",value:function(){var t=this,e="translate(0,"+this.props.h+")";return l.default.createElement("g",{className:"axis",ref:function(e){t.axisElement=e},transform:"x"===this.props.axisType?e:""})}}]),e}(s.Component);e.default=v,v.propTypes={h:d.default.number,orient:d.default.oneOf(["Left","Bottom","Right","Top"]),scale:d.default.func,axisType:d.default.oneOf(["x","y"]),ticks:d.default.number,format:d.default.string}},"./src/components/Chart/Chart.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),s=n("./node_modules/react/react.js"),l=r(s),c=n("./node_modules/prop-types/index.js"),f=r(c),h=n("./src/components/Chart/LineChart/LineChart.js"),p=r(h),d=function(t){function e(t){i(this,e);var n=o(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return n.setChildWidth=function(){n.setState({calcWidth:n.getElementWidth()})},n.state={calcWidth:200},n}return u(e,t),a(e,[{key:"componentDidMount",value:function(){window.addEventListener("resize",this.setChildWidth),this.setChildWidth()}},{key:"componentWillUnmount",value:function(){window.removeEventListener("resize",this.setChildWidth)}},{key:"getElementWidth",value:function(){return this.div.offsetWidth}},{key:"render",value:function(){var t=this;return l.default.createElement("div",{className:this.props.styleName,ref:function(e){t.div=e}},l.default.createElement(p.default,{width:this.state.calcWidth,data:this.props.data}))}}]),e}(l.default.Component);e.default=d,d.propTypes={parent:f.default.string,styleName:f.default.string,data:f.default.array}},"./src/components/Chart/Dots/Dots.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0}),e.Dots=void 0;var i=n("./node_modules/react/react.js"),o=r(i),u=n("./node_modules/prop-types/index.js"),a=r(u);(e.Dots=function(t){return o.default.createElement("g",null,t.data.map(function(e,n){return o.default.createElement("circle",{className:"dot",r:"5",cx:t.x(e.date),cy:t.y(e[t.yData]),key:n})}))}).propTypes={data:a.default.array,yData:a.default.string,x:a.default.func,y:a.default.func}},"./src/components/Chart/Grid/Grid.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),s=n("./node_modules/react/react.js"),l=r(s),c=n("./node_modules/d3/build/d3.js"),f=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(c),h=n("./node_modules/react-dom/index.js"),p=(r(h),n("./node_modules/prop-types/index.js")),d=r(p),v=function(t){function e(){return i(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return u(e,t),a(e,[{key:"componentDidUpdate",value:function(){this.renderGrid()}},{key:"componentDidMount",value:function(){this.renderGrid()}},{key:"renderGrid",value:function(){var t="axis"+this.props.orient,e=f[t](this.props.scale).ticks(this.props.ticks).tickSize(-this.props.len,0,0).tickFormat("");f.select(this.gridElement).call(e)}},{key:"render",value:function(){var t=this,e="translate(0,"+this.props.h+")";return l.default.createElement("g",{className:"grid",ref:function(e){t.gridElement=e},transform:"x"===this.props.gridType?e:""})}}]),e}(s.Component);e.default=v,v.propTypes={h:d.default.number,orient:d.default.oneOf(["Left","Bottom","Right","Top"]),scale:d.default.func,gridType:d.default.oneOf(["x","y"]),ticks:d.default.number,len:d.default.number}},"./src/components/Chart/LineChart/LineChart.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();n("./src/components/Chart/LineChart/index.scss");var s=n("./node_modules/react/react.js"),l=r(s),c=n("./node_modules/d3/build/d3.js"),f=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(c),h=n("./node_modules/prop-types/index.js"),p=r(h),d=n("./src/components/Chart/Dots/Dots.js"),v=n("./src/components/Chart/Grid/Grid.js"),m=r(v),y=n("./src/components/Chart/Axis/Axis.js"),g=r(y),_=function(t){function e(t){return i(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t))}return u(e,t),a(e,[{key:"render",value:function(){var t=this,e={top:20,right:20,bottom:20,left:50},n=this.props.width-(e.left+e.right),r=this.props.height-(e.top+e.bottom),i=f.timeParse("%x");this.data=this.props.data.map(function(e){return Object.assign({},e,{date:i(e[t.props.xData])})}).sort(function(e,n){return Date.parse(e[t.props.xData])-Date.parse(n[t.props.xData])});var o=f.scaleTime().domain(f.extent(this.data,function(t){return t.date})).rangeRound([0,n]),u=f.scaleLinear().domain([0,500]).range([r,0]),a=f.line().x(function(t){return o(t.date)}).y(function(e){return u(e[t.props.yData])}).curve(f.curveCardinal),s="translate("+e.left+","+e.top+")";return l.default.createElement("div",{className:this.props.styleName,style:{width:this.props.width,height:this.props.height}},l.default.createElement("svg",{width:"100%",height:"100%"},l.default.createElement("g",{transform:s},l.default.createElement(m.default,{h:r,len:r,scale:o,gridType:"x",orient:"Bottom",ticks:2*this.data.length}),l.default.createElement(m.default,{h:r,len:n,scale:u,gridType:"y",orient:"Left",ticks:6}),l.default.createElement(g.default,{h:r,orient:"Left",scale:u,axisType:"y",ticks:6}),l.default.createElement(g.default,{h:r,orient:"Bottom",scale:o,axisType:"x",ticks:8,format:"%d/%m"}),l.default.createElement(d.Dots,{x:o,y:u,data:this.data,yData:this.props.yData}),l.default.createElement("path",{className:"line shadow",d:a(this.data),strokeLinecap:"round"}))))}}]),e}(s.Component);e.default=_,_.propTypes={width:p.default.number,height:p.default.number,xData:p.default.string,yData:p.default.string,data:p.default.array,styleName:p.default.string},_.defaultProps={width:800,height:300,xData:"day",yData:"count",data:[{day:"02/11/2016",count:180},{day:"02/1/2016",count:250},{day:"02/10/2016",count:83},{day:"02/24/2016",count:430},{day:"02/15/2016",count:140},{day:"02/27/2016",count:310},{day:"02/17/2016",count:430},{day:"02/8/2016",count:180},{day:"02/19/2016",count:150},{day:"02/2/2016",count:180},{day:"02/3/2016",count:250}]}},"./src/components/Chart/LineChart/index.scss":function(t,e){},"./src/components/DeviceForm/deviceForm.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function a(t){return{settings:t.builder.device,status:t.builder.uploadStatus,locations:t.builder.locations,deviceInLocation:t.builder.deviceInLocation}}function s(t){return{setValue:(0,v.bindActionCreators)(m.setValue,t),addItem:(0,v.bindActionCreators)(m.addItem,t),resetProto:(0,v.bindActionCreators)(m.resetProto,t),addDevice:(0,v.bindActionCreators)(m.addDevice,t),updateDevice:function(e,n){return t((0,F.updateDevice)(e,n))},loadLocations:function(){return t((0,m.loadLocations)())},addLocation:function(e){return t((0,m.addLocation)(e))},deleteLocation:function(e){return t((0,m.deleteLocation)(e))},deviceExistInLocation:function(e,n){return t((0,m.devicesInLocation)(e,n))}}}Object.defineProperty(e,"__esModule",{value:!0});var l=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();n("./src/components/DeviceForm/deviceForm.scss");var c=n("./node_modules/react/react.js"),f=r(c),h=n("./node_modules/prop-types/index.js"),p=r(h),d=n("./node_modules/react-select/lib/Select.js"),v=(r(d),n("./node_modules/redux/es/index.js")),m=n("./src/actions/builder.action.js"),y=n("./node_modules/react-redux/es/index.js"),g=n("./node_modules/formsy-react/lib/main.js"),_=r(g),b=n("./src/components/Auth/Field/Field.js"),x=r(b),w=n("./src/components/SelectLocation/SelectLocation.js"),E=r(w),M=n("./src/utils/utils.js"),F=(n("./src/actions/notifications.action.js"),n("./src/actions/devices.action.js")),C=["Toggle","Timer","LineChart","Value","Range"],S=function(t){function e(t){i(this,e);var n=o(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return n.addItem=function(t){var e={name:t.target.value};(0,M.setItemDefaultData)(e),n.props.addItem(e)},n.createButton=function(t,e){return f.default.createElement("input",{key:e,type:"button",className:"form-button",onClick:n.addItem,value:t})},n.handleUserInput=function(){n.props.setValue("name",n.name.getValue())},n.selectLocation=function(t){n.props.setValue("location",t)},n.handleSubmit=function(){void 0!==n.props.settings._id?n.props.updateDevice(n.props.settings,n.props.settings._id):n.props.addDevice(n.props.settings)},n.enableButton=function(){n.setState({canSubmit:!0})},n.disableButton=function(){n.setState({canSubmit:!1})},n.state={items:[]},n}return u(e,t),l(e,[{key:"componentDidMount",value:function(){this.props.loadLocations()}},{key:"createButtons",value:function(){return C.map(this.createButton)}},{key:"render",value:function(){var t=this,e=this.props.settings.location;return f.default.createElement(_.default.Form,{onSubmit:this.handleSubmit,onValid:this.enableButton,onInvalid:this.disableButton,onChange:this.handleUserInput,className:"device-form"},f.default.createElement(x.default,{name:"Device name",type:"text",ref:function(e){t.name=e},text:"Please enter device name",validations:{matchRegexp:/[\w\d\s]+/},validationError:"This is not a valid name",required:!0,value:this.props.settings.name}),f.default.createElement("div",{className:"input-container"},f.default.createElement("label",null,"Location:"),f.default.createElement(E.default,{selectLocation:this.selectLocation,locations:this.props.locations,addLocation:this.props.addLocation,deleteLocation:this.props.deleteLocation,defaultLocation:e,deviceExistInLocation:this.props.deviceExistInLocation,deviceInLocation:this.props.deviceInLocation})),f.default.createElement("div",null,f.default.createElement("label",null," Device config:"),this.createButtons()),f.default.createElement("div",{className:"main-button-wrap signup-field-group signup-btn-group"},f.default.createElement("input",{className:"btn btn--primary btn--signup btn--signup-active",type:"submit",value:"Save",disabled:!this.state.canSubmit||"PENDING"===this.props.status})))}}]),e}(f.default.Component);e.default=(0,y.connect)(a,s)(S),S.propTypes={setValue:p.default.func,addItem:p.default.func,resetProto:p.default.func,addDevice:p.default.func,settings:p.default.object,status:p.default.string,updateDevice:p.default.func,loadLocations:p.default.func,locations:p.default.array,addLocation:p.default.func,deleteLocation:p.default.func,deviceInLocation:p.default.bool,deviceExistInLocation:p.default.func}},"./src/components/DeviceForm/deviceForm.scss":function(t,e){},"./src/components/Prototype/Prototype.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t){return{settings:t.builder.device}}function o(t){return{addDescription:(0,p.bindActionCreators)(h.addDescription,t),setItemValue:(0,p.bindActionCreators)(h.setItemValue,t),setParameters:(0,p.bindActionCreators)(h.setParameters,t)}}Object.defineProperty(e,"__esModule",{value:!0});var u=n("./node_modules/react/react.js"),a=r(u),s=n("./node_modules/prop-types/index.js"),l=r(s),c=n("./node_modules/react-redux/es/index.js");n("./src/components/Prototype/index.scss");var f=n("./src/components/SettingsList/SettingsList.js"),h=n("./src/actions/builder.action.js"),p=n("./node_modules/redux/es/index.js"),d=function(t){return a.default.createElement("div",{className:"Prototype"},a.default.createElement("h3",null,t.device.name||"Device name"),a.default.createElement(f.SettingsList,{addDescription:t.addDescription,settings:t.device,deleteItem:t.deleteItem,setItemValue:t.setItemValue,setParameters:t.setParameters}))};d.propTypes={device:l.default.object,addDescription:l.default.func,deleteItem:l.default.func,setItemValue:l.default.func,settings:l.default.object,setParameters:l.default.func},e.default=(0,c.connect)(i,o)(d)},"./src/components/Prototype/index.scss":function(t,e){},"./src/components/RangeSettings/Range.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),s=n("./node_modules/react/react.js"),l=r(s),c=n("./node_modules/prop-types/index.js"),f=r(c);n("./src/components/RangeSettings/RangeStyle.scss");var h=function(t){function e(t){i(this,e);var n=o(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));n.onChange=function(t){n.setState({value:t.target.value}),void 0!==n.props.onTimerChange&&n.props.onTimerChange(t)},n.setValue=function(t){void 0!==n.props.setTimerValue?n.props.setTimerValue():n.props.setItemValue(n.state.value,n.props.itemId,n.props.deviceId)},n.setParams=function(){var t={minValue:n.state.params.minValue||0,maxValue:n.state.params.maxValue||100};n.props.setParameters(n.props.itemId,t)};var r=void 0,u=void 0;return n.props.params&&(r=n.props.params.minValue,u=n.props.params.maxValue),n.state={value:0,params:{minValue:r||0,maxValue:u||100}},n.setMinValue=function(t){var e=parseInt(t.target.value)||"";e<=n.state.params.maxValue?n.setState({params:{minValue:e,maxValue:n.state.params.maxValue}}):(t.target.setCustomValidity("Value shoud be less then "+u),t.target.reportValidity())},n.setMaxValue=function(t){var e=parseInt(t.target.value)||"";e>n.state.params.minValue?n.setState({params:{maxValue:e,minValue:n.state.params.minValue}}):(t.target.setCustomValidity("Value shoud be more then "+r),t.target.reportValidity())},n}return u(e,t),a(e,[{key:"componentDidMount",value:function(){void 0!==this.props.data&&this.setState({value:this.props.data})}},{key:"componentWillReceiveProps",value:function(t){this.setState({value:t.data||0})}},{key:"render",value:function(){var t=this.props,e=t.min,n=t.max;return l.default.createElement("div",{className:""+this.props.styleName},this.props.showMinMax?l.default.createElement("div",{className:"range-settings"},l.default.createElement("p",{className:"range-settings__title"},"Enter min and max values for setting"),l.default.createElement("div",{className:"range-settings__group"},l.default.createElement("div",{className:"range-settings__val"},l.default.createElement("input",{type:"number",name:"min",placeholder:"Enter min value",onChange:this.setMinValue,value:this.state.params.minValue,onBlur:this.setParams})),l.default.createElement("div",{className:"range-settings__val"},l.default.createElement("input",{type:"number",name:"max",placeholder:"Enter max value",onChange:this.setMaxValue,value:this.state.params.maxValue,onBlur:this.setParams})))):null,this.props.hideLabel?null:l.default.createElement("p",{className:"range_value"},this.state.value),l.default.createElement("input",{type:"range",onChange:this.onChange,onMouseUp:this.setValue,min:e||this.state.params.minValue,max:n||this.state.params.maxValue,step:1,value:this.state.value}))}}]),e}(l.default.Component);e.default=h,h.propTypes={styleName:f.default.string,itemId:f.default.number,max:f.default.number,min:f.default.number,setDevice:f.default.func,hideLabel:f.default.bool,setItemValue:f.default.func,data:f.default.any,onTimerChange:f.default.func,deviceId:f.default.string,setTimerValue:f.default.func,setParameters:f.default.func,showMinMax:f.default.bool,maxValue:f.default.number,minValue:f.default.number,params:f.default.object}},"./src/components/RangeSettings/RangeStyle.scss":function(t,e){},"./src/components/SelectLocation/SelectLocation.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),s=n("./node_modules/react/react.js"),l=r(s),c=n("./node_modules/prop-types/index.js"),f=r(c),h=n("./src/components/Popup/Popup.js"),p=n("./src/components/Button/Button.js"),d=function(t){function e(t){i(this,e);var n=o(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return n.setPopupShown=function(t){var e=n.state.popupShown,r=function(){n.setState({popupShown:!e,idLocation:t})};void 0!==t?n.props.deviceExistInLocation(t,r):r()},n.showInputLocation=function(){n.setState({input:!n.state.input})},n.setInputValue=function(t){n.setState({inputValue:t.target.value})},n.deleteSelectedLocation=function(t){n.props.deleteLocation(t)},n.setLocationValue=function(t){n.setState({locationValue:t.label}),n.props.selectLocation(t.label),n.showInputLocation()},n.addLocationValue=function(){""!==n.state.inputValue.trim()&&n.props.addLocation(n.state.inputValue),n.setState({inputValue:""})},n.state={input:!1,locationValue:"",inputValue:"",popupShown:!1,idLocation:""},n}return u(e,t),a(e,[{key:"render",value:function(){var t=this;return l.default.createElement("div",null,l.default.createElement("div",{className:"Select-control"},l.default.createElement("div",{className:"Select-value select-menu-container"},l.default.createElement("div",{className:"select-menu-label",onClick:this.showInputLocation},l.default.createElement("span",{className:"Select-value-label"},this.state.locationValue?this.state.locationValue:this.props.defaultLocation),l.default.createElement("i",{className:"select-toggle fa "+(this.state.input?"fa-caret-up":"fa-caret-down")}))),this.state.input?l.default.createElement("div",{className:"Select-menu__outer"},l.default.createElement("div",{className:"Select-input-location"},l.default.createElement("input",{type:"text",placeholder:"Add new location",className:"Select-input_add-location",onChange:this.setInputValue,value:this.state.inputValue}),l.default.createElement("i",{className:"fa fa-plus Select-input_add-location_icon",onClick:this.addLocationValue})),l.default.createElement("ul",{className:"Select-menu"},this.props.locations.map(function(e,n){return l.default.createElement("li",{key:n,className:"Select-option"},l.default.createElement("span",{className:"Select-option__item",onClick:function(n){return t.setLocationValue(e)}},e.label),l.default.createElement("i",{className:"fa fa-trash Select-option__icon",onClick:function(n){return t.setPopupShown(e._id)}}))}))):null),l.default.createElement(h.Popup,{setPopupShown:this.setPopupShown,popupShown:this.state.popupShown,header:"Confirm the action",text:this.props.deviceInLocation?"You can't delete this location, because you have devices in it":"Are you sure you want to delete this location?"},l.default.createElement(p.Button,{disabled:this.props.deviceInLocation,setPopupShown:this.setPopupShown,okHandler:function(){t.deleteSelectedLocation(t.state.idLocation),t.setPopupShown()},className:this.props.deviceInLocation?"btn btn--default":"btn popup__btn",innerText:"Ok"}),l.default.createElement(p.Button,{okHandler:function(){t.setPopupShown()},className:"btn btn--default popup__btn",innerText:"Cancel"})))}}]),e}(l.default.Component);e.default=d,d.propTypes={locations:f.default.array,addLocation:f.default.func,deleteLocation:f.default.func,selectLocation:f.default.func,defaultLocation:f.default.string,deviceExistInLocation:f.default.func,deviceInLocation:f.default.bool}},"./src/components/SettingsList/SettingsList.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0}),e.SettingsList=void 0;var i=n("./node_modules/react/react.js"),o=r(i),u=n("./node_modules/prop-types/index.js"),a=r(u),s=n("./src/data/componentsNames.js"),l=n("./src/components/SettingsListItem/SettingsListItem.js");(e.SettingsList=function(t){return o.default.createElement("div",{className:"settings-block"},t.settings.items.map(function(e,n){var r=s.settingsComponents[e.name];return o.default.createElement(l.SettingsListItem,{key:n,addDescription:t.addDescription,styleName:"settings-"+e.name.toLowerCase(),name:e.name,deleteItem:t.deleteItem,setItemValue:t.setItemValue,setParameters:t.setParameters,checked:e.data,data:e.data,params:e.params,description:e.description,id:n},o.default.createElement(r,null))}))}).propTypes={settings:a.default.object,width:a.default.number,addDescription:a.default.func,deleteItem:a.default.func,setItemValue:a.default.func,setParameters:a.default.func}},"./src/components/SettingsListItem/SettingsListItem.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0}),e.SettingsListItem=void 0;var i=n("./node_modules/react/react.js"),o=r(i);n("./src/components/SettingsListItem/index.scss");var u=n("./node_modules/prop-types/index.js"),a=r(u);(e.SettingsListItem=function(t){return o.default.createElement("div",{className:"settings "+t.styleName},o.default.createElement("div",{className:"item-header"},o.default.createElement("p",{className:"item-header__name"},t.name),o.default.createElement("button",{className:"item-header__delete-btn",onClick:function(){return t.deleteItem(t.id)}})),o.default.createElement("div",null,o.default.createElement("label",null,o.default.createElement("input",{className:"description-input",placeholder:"Description",type:"text",value:t.description,onChange:function(e){return t.addDescription(t.id,e.target.value)}}))),o.default.cloneElement(t.children,{styleName:"item-body",setItemValue:t.setItemValue,setParameters:t.setParameters,itemId:t.id,checked:t.checked,data:t.data,params:t.params,showMinMax:!0}))}).propTypes={styleName:a.default.string,setItemValue:a.default.func,checked:a.default.any,id:a.default.number,name:a.default.string,addDescription:a.default.func,deleteItem:a.default.func.isRequired,children:a.default.any,description:a.default.string,data:a.default.any,setParameters:a.default.func,params:a.default.object}},"./src/components/SettingsListItem/index.scss":function(t,e){},"./src/components/TimerSettings/Timer.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),s=n("./node_modules/react/react.js"),l=r(s),c=n("./node_modules/prop-types/index.js"),f=r(c);n("./src/components/TimerSettings/TimerStyle.scss");var h=n("./src/components/RangeSettings/Range.js"),p=r(h),d=function(t){function e(t){i(this,e);var n=o(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return n.changeHours=function(t){n.setState({hours:t.target.value})},n.changeMinutes=function(t){n.setState({minutes:t.target.value})},n.setTimerValue=function(){n.props.setItemValue(n.state.hours+":"+n.state.minutes,n.props.itemId,n.props.deviceId)},n.hoursKeyDown=function(t){(t.keyCode<47||t.keyCode>58)&&8!==t.keyCode&&t.preventDefault(),parseInt(t.target.value+t.key)>99&&t.preventDefault()},n.minutesKeyDown=function(t){(t.keyCode<47||t.keyCode>58)&&8!==t.keyCode&&t.preventDefault(),parseInt(t.target.value+t.key)>59&&t.preventDefault()},n.state={hours:0,minutes:0},n}return u(e,t),a(e,[{key:"componentDidMount",value:function(){if(void 0!==this.props.data){var t=this.props.data.split(":");this.setState({hours:t[0],minutes:t[1]})}}},{key:"render",value:function(){return l.default.createElement("div",{className:"m-time "+this.props.styleName},l.default.createElement("div",{className:"showtime"},l.default.createElement("input",{className:"showtime__time",type:"text",value:this.state.hours,onChange:this.changeHours,onKeyDown:this.hoursKeyDown}),l.default.createElement("span",{className:"showtime__separater"},":"),l.default.createElement("input",{className:"showtime__time",type:"text",value:this.state.minutes,onChange:this.changeMinutes,onKeyDown:this.minutesKeyDown})),l.default.createElement("div",{className:"sliders"},l.default.createElement("div",{className:"sliders__time-text"},"Hours"),l.default.createElement(p.default,{className:"u-slider-time",min:0,max:99,setItemValue:this.props.setItemValue,onTimerChange:this.changeHours,setTimerValue:this.setTimerValue,hideLabel:!0,data:this.state.hours}),l.default.createElement("div",{className:"sliders__time-text"},"Minutes"),l.default.createElement(p.default,{className:"u-slider-time",min:0,max:59,setItemValue:this.props.setItemValue,onTimerChange:this.changeMinutes,setTimerValue:this.setTimerValue,hideLabel:!0,data:this.state.minutes})))}}]),e}(l.default.Component);e.default=d,d.propTypes={styleName:f.default.string,value:f.default.string,onChange:f.default.func,setItemValue:f.default.func,itemId:f.default.number,newValue:f.default.string,data:f.default.string,deviceId:f.default.string}},"./src/components/TimerSettings/TimerStyle.scss":function(t,e){},"./src/components/ToggleSettings/ToggleSettings.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),s=n("./node_modules/react/react.js"),l=r(s),c=n("./node_modules/prop-types/index.js"),f=r(c);n("./src/components/ToggleSettings/ToggleStyle.scss");var h=function(t){function e(t){i(this,e);var n=o(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return n.onChangeValue=function(t){n.props.setItemValue(!n.props.checked,n.props.itemId,n.props.deviceId)},n}return u(e,t),a(e,[{key:"render",value:function(){return l.default.createElement("div",{className:""+this.props.styleName},l.default.createElement("label",{className:"switch"},l.default.createElement("input",{type:"checkbox",checked:this.props.checked,onChange:this.onChangeValue}),l.default.createElement("div",{className:"slider round"})))}}]),e}(l.default.Component);e.default=h,h.propTypes={device:f.default.object,styleName:f.default.string,checked:f.default.bool.isRequired,setItemValue:f.default.func,itemId:f.default.any,newValue:f.default.string,deviceId:f.default.string},h.defaultProps={checked:!1}},"./src/components/ToggleSettings/ToggleStyle.scss":function(t,e){},"./src/components/ValueSettings/Value.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),s=n("./node_modules/react/react.js"),l=r(s),c=n("./node_modules/prop-types/index.js"),f=r(c);n("./src/components/ValueSettings/ValueStyle.scss");var h=function(t){function e(t){i(this,e);var n=o(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return n.setTextValue=function(t){n.props.setItemValue(n.state.value,n.props.itemId,n.props.deviceId)},n.onChangeValue=function(t){var e=t.target.value;n.setState({value:e})},n.state={value:""},n}return u(e,t),a(e,[{key:"componentDidMount",value:function(){void 0!==this.props.data&&this.setState({value:this.props.data})}},{key:"render",value:function(){return l.default.createElement("div",{className:""+this.props.styleName},l.default.createElement("input",{type:"text",className:"value_input",placeholder:"Input...",value:this.state.value,onChange:this.onChangeValue,onBlur:this.setTextValue}))}}]),e}(l.default.Component);e.default=h,h.propTypes={styleName:f.default.string,value:f.default.string,onChangeValue:f.default.func,setItemValue:f.default.func,itemId:f.default.number,newValue:f.default.string,data:f.default.string,deviceId:f.default.string}},"./src/components/ValueSettings/ValueStyle.scss":function(t,e){},"./src/data/componentsNames.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0}),e.settingsComponents=void 0;var i=n("./src/components/RangeSettings/Range.js"),o=r(i),u=n("./src/components/ToggleSettings/ToggleSettings.js"),a=r(u),s=n("./src/components/TimerSettings/Timer.js"),l=r(s),c=n("./src/components/ValueSettings/Value.js"),f=r(c),h=n("./src/components/Chart/Chart.js"),p=r(h);e.settingsComponents={LineChart:p.default,Range:o.default,Timer:l.default,Value:f.default,Toggle:a.default}},"./src/pages/Builder/Builder.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function a(t){return{device:t.builder.device,status:t.builder.uploadStatus,errorText:t.builder.errorText}}function s(t){return{deleteItem:(0,h.bindActionCreators)(x.deleteItem,t),resetBuilder:(0,h.bindActionCreators)(x.resetProto,t),editDevice:(0,h.bindActionCreators)(x.editDevice,t),clearAddStatus:(0,h.bindActionCreators)(x.clearAddStatus,t)}}Object.defineProperty(e,"__esModule",{value:!0});var l=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),c=n("./node_modules/react/react.js"),f=r(c),h=n("./node_modules/redux/es/index.js"),p=n("./node_modules/react-redux/es/index.js");n("./src/pages/Builder/builder.scss");var d=n("./src/components/DeviceForm/deviceForm.js"),v=r(d),m=n("./src/components/Prototype/Prototype.js"),y=r(m),g=n("./src/components/Message/Message.js"),_=n("./node_modules/prop-types/index.js"),b=r(_),x=n("./src/actions/builder.action.js"),w=function(t){function e(){return i(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return u(e,t),l(e,[{key:"componentWillMount",value:function(){void 0!==this.props.match.params.id?this.props.editDevice(this.props.match.params.id):this.props.resetBuilder()}},{key:"componentDidUpdate",value:function(){var t=this;"DONE"===this.props.status&&setTimeout(function(){t.props.resetBuilder(),t.props.history.push("/devices")},1e3)}},{key:"render",value:function(){return f.default.createElement("section",{className:"builder device-list"},f.default.createElement("h1",{className:"device-list__title"},"Device Builder"),f.default.createElement(v.default,null),f.default.createElement(g.Message,{clearStatus:this.props.clearAddStatus,status:this.props.status,header:"Error",text:this.props.errorText}),f.default.createElement("h3",{className:"builder__title"},"Prototype"),f.default.createElement(y.default,{device:this.props.device,deleteItem:this.props.deleteItem}))}}]),e}(c.Component);w.propTypes={status:b.default.string,device:b.default.object,resetBuilder:b.default.func,deleteItem:b.default.func,history:b.default.object,match:b.default.object,params:b.default.object,id:b.default.string,editDevice:b.default.func,clearAddStatus:b.default.func,errorText:b.default.string},e.default=(0,p.connect)(a,s)(w)},"./src/pages/Builder/builder.scss":function(t,e){}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,