webpackJsonp([0],{"./node_modules/create-react-class/index.js":function(t,n,e){"use strict";var r=e("./node_modules/react/react.js"),i=e("./node_modules/create-react-class/factory.js");if(void 0===r)throw Error("create-react-class could not find the React object. If you are using script tags, make sure that React is being loaded before create-react-class.");var o=(new r.Component).updater;t.exports=i(r.Component,r.isValidElement,o)},"./node_modules/d3/build/d3.js":function(t,n,e){"use strict";var r,i,o,a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};!function(e,u){"object"===a(n)&&void 0!==t?u(n):(i=[n],r=u,void 0!==(o="function"==typeof r?r.apply(n,i):r)&&(t.exports=o))}(0,function(t){function n(t){return function(n,e){return Jc(t(n),e)}}function e(t,n){return[t,n]}function r(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=yl?10:o>=ml?5:o>=gl?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=yl?10:o>=ml?5:o>=gl?2:1)}function i(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=yl?i*=10:o>=ml?i*=5:o>=gl&&(i*=2),n<t?-i:i}function o(t){return t.length}function u(t){return"translate("+(t+.5)+",0)"}function s(t){return"translate(0,"+(t+.5)+")"}function c(t){return function(n){return+t(n)}}function l(t){var n=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(n=Math.round(n)),function(e){return+t(e)+n}}function f(){return!this.__axis}function h(t,n){function e(e){var u=null==i?n.ticks?n.ticks.apply(n,r):n.domain():i,s=null==o?n.tickFormat?n.tickFormat.apply(n,r):Ll:o,m=Math.max(a,0)+d,g=n.range(),_=+g[0]+.5,b=+g[g.length-1]+.5,x=(n.bandwidth?l:c)(n.copy()),w=e.selection?e.selection():e,M=w.selectAll(".domain").data([null]),E=w.selectAll(".tick").data(u,n).order(),S=E.exit(),F=E.enter().append("g").attr("class","tick"),T=E.select("line"),k=E.select("text");M=M.merge(M.enter().insert("path",".tick").attr("class","domain").attr("stroke","#000")),E=E.merge(F),T=T.merge(F.append("line").attr("stroke","#000").attr(v+"2",p*a)),k=k.merge(F.append("text").attr("fill","#000").attr(v,p*m).attr("dy",t===Il?"0em":t===zl?"0.71em":"0.32em")),e!==w&&(M=M.transition(e),E=E.transition(e),T=T.transition(e),k=k.transition(e),S=S.transition(e).attr("opacity",Ul).attr("transform",function(t){return isFinite(t=x(t))?y(t):this.getAttribute("transform")}),F.attr("opacity",Ul).attr("transform",function(t){var n=this.parentNode.__axis;return y(n&&isFinite(n=n(t))?n:x(t))})),S.remove(),M.attr("d",t===ql||t==Rl?"M"+p*h+","+_+"H0.5V"+b+"H"+p*h:"M"+_+","+p*h+"V0.5H"+b+"V"+p*h),E.attr("opacity",1).attr("transform",function(t){return y(x(t))}),T.attr(v+"2",p*a),k.attr(v,p*m).text(s),w.filter(f).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===Rl?"start":t===ql?"end":"middle"),w.each(function(){this.__axis=x})}var r=[],i=null,o=null,a=6,h=6,d=3,p=t===Il||t===ql?-1:1,v=t===ql||t===Rl?"x":"y",y=t===Il||t===zl?u:s;return e.scale=function(t){return arguments.length?(n=t,e):n},e.ticks=function(){return r=Vl.call(arguments),e},e.tickArguments=function(t){return arguments.length?(r=null==t?[]:Vl.call(t),e):r.slice()},e.tickValues=function(t){return arguments.length?(i=null==t?null:Vl.call(t),e):i&&i.slice()},e.tickFormat=function(t){return arguments.length?(o=t,e):o},e.tickSize=function(t){return arguments.length?(a=h=+t,e):a},e.tickSizeInner=function(t){return arguments.length?(a=+t,e):a},e.tickSizeOuter=function(t){return arguments.length?(h=+t,e):h},e.tickPadding=function(t){return arguments.length?(d=+t,e):d},e}function d(t){return h(Il,t)}function p(t){return h(Rl,t)}function v(t){return h(zl,t)}function y(t){return h(ql,t)}function m(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new g(r)}function g(t){this._=t}function _(t,n){return t.trim().split(/^|\s+/).map(function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}})}function b(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function x(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=Bl,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}function w(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===Yl&&n.documentElement.namespaceURI===Yl?n.createElement(t):n.createElementNS(e,t)}}function M(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function E(){return new S}function S(){this._="@"+(++$l).toString(36)}function F(t,n,e){return t=T(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function T(n,e,r){return function(i){var o=t.event;t.event=i;try{n.call(this,this.__data__,e,r)}finally{t.event=o}}}function k(t){return t.trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}})}function C(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function N(t,n,e){var r=Ql.hasOwnProperty(t.type)?F:T;return function(i,o,a){var u,s=this.__on,c=r(n,o,a);if(s)for(var l=0,f=s.length;l<f;++l)if((u=s[l]).type===t.type&&u.name===t.name)return this.removeEventListener(u.type,u.listener,u.capture),this.addEventListener(u.type,u.listener=c,u.capture=e),void(u.value=n);this.addEventListener(t.type,c,e),u={type:t.type,name:t.name,value:n,listener:c,capture:e},s?s.push(u):this.__on=[u]}}function j(n,e,r,i){var o=t.event;n.sourceEvent=t.event,t.event=n;try{return e.apply(r,i)}finally{t.event=o}}function A(){}function D(){return[]}function P(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}function O(t,n,e,r,i,o){for(var a,u=0,s=n.length,c=o.length;u<c;++u)(a=n[u])?(a.__data__=o[u],r[u]=a):e[u]=new P(t,o[u]);for(;u<s;++u)(a=n[u])&&(i[u]=a)}function V(t,n,e,r,i,o,a){var u,s,c,l={},f=n.length,h=o.length,d=new Array(f);for(u=0;u<f;++u)(s=n[u])&&(d[u]=c=df+a.call(s,s.__data__,u,n),c in l?i[u]=s:l[c]=s);for(u=0;u<h;++u)c=df+a.call(t,o[u],u,o),(s=l[c])?(r[u]=s,s.__data__=o[u],l[c]=null):e[u]=new P(t,o[u]);for(u=0;u<f;++u)(s=n[u])&&l[d[u]]===s&&(i[u]=s)}function L(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}function I(t){return function(){this.removeAttribute(t)}}function R(t){return function(){this.removeAttributeNS(t.space,t.local)}}function z(t,n){return function(){this.setAttribute(t,n)}}function q(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function U(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function B(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}function Y(t){return function(){this.style.removeProperty(t)}}function H(t,n,e){return function(){this.style.setProperty(t,n,e)}}function X(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function W(t,n){return t.style.getPropertyValue(n)||Ff(t).getComputedStyle(t,null).getPropertyValue(n)}function $(t){return function(){delete this[t]}}function G(t,n){return function(){this[t]=n}}function Z(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function K(t){return t.trim().split(/^|\s+/)}function J(t){return t.classList||new Q(t)}function Q(t){this._node=t,this._names=K(t.getAttribute("class")||"")}function tt(t,n){for(var e=J(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function nt(t,n){for(var e=J(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function et(t){return function(){tt(this,t)}}function rt(t){return function(){nt(this,t)}}function it(t,n){return function(){(n.apply(this,arguments)?tt:nt)(this,t)}}function ot(){this.textContent=""}function at(t){return function(){this.textContent=t}}function ut(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function st(){this.innerHTML=""}function ct(t){return function(){this.innerHTML=t}}function lt(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function ft(){this.nextSibling&&this.parentNode.appendChild(this)}function ht(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function dt(){return null}function pt(){var t=this.parentNode;t&&t.removeChild(this)}function vt(t,n,e){var r=Ff(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function yt(t,n){return function(){return vt(this,t,n)}}function mt(t,n){return function(){return vt(this,t,n.apply(this,arguments))}}function gt(t,n){this._groups=t,this._parents=n}function _t(){return new gt([[document.documentElement]],Rf)}function bt(){t.event.stopImmediatePropagation()}function xt(t,n){var e=t.document.documentElement,r=zf(t).on("dragstart.drag",null);n&&(r.on("click.drag",Yf,!0),setTimeout(function(){r.on("click.drag",null)},0)),"onselectstart"in e?r.on("selectstart.drag",null):(e.style.MozUserSelect=e.__noselect,delete e.__noselect)}function wt(t,n,e,r,i,o,a,u,s,c){this.target=t,this.type=n,this.subject=e,this.identifier=r,this.active=i,this.x=o,this.y=a,this.dx=u,this.dy=s,this._=c}function Mt(){return!t.event.button}function Et(){return this.parentNode}function St(n){return null==n?{x:t.event.x,y:t.event.y}:n}function Ft(){return"ontouchstart"in this}function Tt(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function kt(){}function Ct(t){var n;return t=(t+"").trim().toLowerCase(),(n=Jf.exec(t))?(n=parseInt(n[1],16),new Pt(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1)):(n=Qf.exec(t))?Nt(parseInt(n[1],16)):(n=th.exec(t))?new Pt(n[1],n[2],n[3],1):(n=nh.exec(t))?new Pt(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=eh.exec(t))?jt(n[1],n[2],n[3],n[4]):(n=rh.exec(t))?jt(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=ih.exec(t))?Ot(n[1],n[2]/100,n[3]/100,1):(n=oh.exec(t))?Ot(n[1],n[2]/100,n[3]/100,n[4]):ah.hasOwnProperty(t)?Nt(ah[t]):"transparent"===t?new Pt(NaN,NaN,NaN,0):null}function Nt(t){return new Pt(t>>16&255,t>>8&255,255&t,1)}function jt(t,n,e,r){return r<=0&&(t=n=e=NaN),new Pt(t,n,e,r)}function At(t){return t instanceof kt||(t=Ct(t)),t?(t=t.rgb(),new Pt(t.r,t.g,t.b,t.opacity)):new Pt}function Dt(t,n,e,r){return 1===arguments.length?At(t):new Pt(t,n,e,null==r?1:r)}function Pt(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function Ot(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new It(t,n,e,r)}function Vt(t){if(t instanceof It)return new It(t.h,t.s,t.l,t.opacity);if(t instanceof kt||(t=Ct(t)),!t)return new It;if(t instanceof It)return t;t=t.rgb();var n=t.r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),a=NaN,u=o-i,s=(o+i)/2;return u?(a=n===o?(e-r)/u+6*(e<r):e===o?(r-n)/u+2:(n-e)/u+4,u/=s<.5?o+i:2-o-i,a*=60):u=s>0&&s<1?0:a,new It(a,u,s,t.opacity)}function Lt(t,n,e,r){return 1===arguments.length?Vt(t):new It(t,n,e,null==r?1:r)}function It(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function Rt(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}function zt(t){if(t instanceof Ut)return new Ut(t.l,t.a,t.b,t.opacity);if(t instanceof Gt){var n=t.h*uh;return new Ut(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}t instanceof Pt||(t=At(t));var e=Xt(t.r),r=Xt(t.g),i=Xt(t.b),o=Bt((.4124564*e+.3575761*r+.1804375*i)/ch),a=Bt((.2126729*e+.7151522*r+.072175*i)/lh);return new Ut(116*a-16,500*(o-a),200*(a-Bt((.0193339*e+.119192*r+.9503041*i)/fh)),t.opacity)}function qt(t,n,e,r){return 1===arguments.length?zt(t):new Ut(t,n,e,null==r?1:r)}function Ut(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function Bt(t){return t>vh?Math.pow(t,1/3):t/ph+hh}function Yt(t){return t>dh?t*t*t:ph*(t-hh)}function Ht(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function Xt(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function Wt(t){if(t instanceof Gt)return new Gt(t.h,t.c,t.l,t.opacity);t instanceof Ut||(t=zt(t));var n=Math.atan2(t.b,t.a)*sh;return new Gt(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function $t(t,n,e,r){return 1===arguments.length?Wt(t):new Gt(t,n,e,null==r?1:r)}function Gt(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}function Zt(t){if(t instanceof Jt)return new Jt(t.h,t.s,t.l,t.opacity);t instanceof Pt||(t=At(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(Mh*r+xh*n-wh*e)/(Mh+xh-wh),o=r-i,a=(bh*(e-i)-gh*o)/_h,u=Math.sqrt(a*a+o*o)/(bh*i*(1-i)),s=u?Math.atan2(a,o)*sh-120:NaN;return new Jt(s<0?s+360:s,u,i,t.opacity)}function Kt(t,n,e,r){return 1===arguments.length?Zt(t):new Jt(t,n,e,null==r?1:r)}function Jt(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function Qt(t,n,e,r,i){var o=t*t,a=o*t;return((1-3*t+3*o-a)*n+(4-6*o+3*a)*e+(1+3*t+3*o-3*a)*r+a*i)/6}function tn(t,n){return function(e){return t+e*n}}function nn(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}function en(t,n){var e=n-t;return e?tn(t,e>180||e<-180?e-360*Math.round(e/360):e):Ah(isNaN(t)?n:t)}function rn(t){return 1==(t=+t)?on:function(n,e){return e-n?nn(n,e,t):Ah(isNaN(n)?e:n)}}function on(t,n){var e=n-t;return e?tn(t,e):Ah(isNaN(t)?n:t)}function an(t){return function(n){var e,r,i=n.length,o=new Array(i),a=new Array(i),u=new Array(i);for(e=0;e<i;++e)r=Dt(n[e]),o[e]=r.r||0,a[e]=r.g||0,u[e]=r.b||0;return o=t(o),a=t(a),u=t(u),r.opacity=1,function(t){return r.r=o(t),r.g=a(t),r.b=u(t),r+""}}}function un(t){return function(){return t}}function sn(t){return function(n){return t(n)+""}}function cn(t){return"none"===t?Xh:(Eh||(Eh=document.createElement("DIV"),Sh=document.documentElement,Fh=document.defaultView),Eh.style.transform=t,t=Fh.getComputedStyle(Sh.appendChild(Eh),null).getPropertyValue("transform"),Sh.removeChild(Eh),t=t.slice(7,-1).split(","),Wh(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}function ln(t){return null==t?Xh:(Th||(Th=document.createElementNS("http://www.w3.org/2000/svg","g")),Th.setAttribute("transform",t),(t=Th.transform.baseVal.consolidate())?(t=t.matrix,Wh(t.a,t.b,t.c,t.d,t.e,t.f)):Xh)}function fn(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}function o(t,r,i,o,a,u){if(t!==i||r!==o){var s=a.push("translate(",null,n,null,e);u.push({i:s-4,x:Ih(t,i)},{i:s-2,x:Ih(r,o)})}else(i||o)&&a.push("translate("+i+n+o+e)}function a(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:Ih(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}function u(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:Ih(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}function s(t,n,e,r,o,a){if(t!==e||n!==r){var u=o.push(i(o)+"scale(",null,",",null,")");a.push({i:u-4,x:Ih(t,e)},{i:u-2,x:Ih(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}return function(n,e){var r=[],i=[];return n=t(n),e=t(e),o(n.translateX,n.translateY,e.translateX,e.translateY,r,i),a(n.rotate,e.rotate,r,i),u(n.skewX,e.skewX,r,i),s(n.scaleX,n.scaleY,e.scaleX,e.scaleY,r,i),n=e=null,function(t){for(var n,e=-1,o=i.length;++e<o;)r[(n=i[e]).i]=n.x(t);return r.join("")}}}function hn(t){return((t=Math.exp(t))+1/t)/2}function dn(t){return((t=Math.exp(t))-1/t)/2}function pn(t){return((t=Math.exp(2*t))-1)/(t+1)}function vn(t){return function(n,e){var r=t((n=Lt(n)).h,(e=Lt(e)).h),i=on(n.s,e.s),o=on(n.l,e.l),a=on(n.opacity,e.opacity);return function(t){return n.h=r(t),n.s=i(t),n.l=o(t),n.opacity=a(t),n+""}}}function yn(t,n){var e=on((t=qt(t)).l,(n=qt(n)).l),r=on(t.a,n.a),i=on(t.b,n.b),o=on(t.opacity,n.opacity);return function(n){return t.l=e(n),t.a=r(n),t.b=i(n),t.opacity=o(n),t+""}}function mn(t){return function(n,e){var r=t((n=$t(n)).h,(e=$t(e)).h),i=on(n.c,e.c),o=on(n.l,e.l),a=on(n.opacity,e.opacity);return function(t){return n.h=r(t),n.c=i(t),n.l=o(t),n.opacity=a(t),n+""}}}function gn(t){return function n(e){function r(n,r){var i=t((n=Kt(n)).h,(r=Kt(r)).h),o=on(n.s,r.s),a=on(n.l,r.l),u=on(n.opacity,r.opacity);return function(t){return n.h=i(t),n.s=o(t),n.l=a(Math.pow(t,e)),n.opacity=u(t),n+""}}return e=+e,r.gamma=n,r}(1)}function _n(){return ld||(dd(bn),ld=hd.now()+fd)}function bn(){ld=0}function xn(){this._call=this._time=this._next=null}function wn(t,n,e){var r=new xn;return r.restart(t,n,e),r}function Mn(){_n(),++od;for(var t,n=kh;n;)(t=ld-n._time)>=0&&n._call.call(null,t),n=n._next;--od}function En(){ld=(cd=hd.now())+fd,od=ad=0;try{Mn()}finally{od=0,Fn(),ld=0}}function Sn(){var t=hd.now(),n=t-cd;n>sd&&(fd-=n,cd=t)}function Fn(){for(var t,n,e=kh,r=1/0;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:kh=n);Ch=t,Tn(r)}function Tn(t){if(!od){ad&&(ad=clearTimeout(ad));var n=t-ld;n>24?(t<1/0&&(ad=setTimeout(En,n)),ud&&(ud=clearInterval(ud))):(ud||(cd=ld,ud=setInterval(Sn,sd)),od=1,dd(En))}}function kn(t,n){var e=t.__transition;if(!e||!(e=e[n])||e.state>gd)throw new Error("too late");return e}function Cn(t,n){var e=t.__transition;if(!e||!(e=e[n])||e.state>bd)throw new Error("too late");return e}function Nn(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("too late");return e}function jn(t,n,e){function r(t){e.state=_d,e.timer.restart(i,e.delay,e.time),e.delay<=t&&i(t-e.delay)}function i(r){var c,l,f,h;if(e.state!==_d)return a();for(c in s)if(h=s[c],h.name===e.name){if(h.state===xd)return pd(i);h.state===wd?(h.state=Ed,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete s[c]):+c<n&&(h.state=Ed,h.timer.stop(),delete s[c])}if(pd(function(){e.state===xd&&(e.state=wd,e.timer.restart(o,e.delay,e.time),o(r))}),e.state=bd,e.on.call("start",t,t.__data__,e.index,e.group),e.state===bd){for(e.state=xd,u=new Array(f=e.tween.length),c=0,l=-1;c<f;++c)(h=e.tween[c].value.call(t,t.__data__,e.index,e.group))&&(u[++l]=h);u.length=l+1}}function o(n){for(var r=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(a),e.state=Md,1),i=-1,o=u.length;++i<o;)u[i].call(null,r);e.state===Md&&(e.on.call("end",t,t.__data__,e.index,e.group),a())}function a(){e.state=Ed,e.timer.stop(),delete s[n];for(var r in s)return;delete t.__transition}var u,s=t.__transition;s[n]=e,e.timer=wn(r,0,e.time)}function An(t,n){var e,r;return function(){var i=Cn(this,t),o=i.tween;if(o!==e){r=e=o;for(var a=0,u=r.length;a<u;++a)if(r[a].name===n){r=r.slice(),r.splice(a,1);break}}i.tween=r}}function Dn(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=Cn(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var u={name:n,value:e},s=0,c=i.length;s<c;++s)if(i[s].name===n){i[s]=u;break}s===c&&i.push(u)}o.tween=i}}function Pn(t,n,e){var r=t._id;return t.each(function(){var t=Cn(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)}),function(t){return Nn(t,r).value[n]}}function On(t){return function(){this.removeAttribute(t)}}function Vn(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Ln(t,n,e){var r,i;return function(){var o=this.getAttribute(t);return o===e?null:o===r?i:i=n(r=o,e)}}function In(t,n,e){var r,i;return function(){var o=this.getAttributeNS(t.space,t.local);return o===e?null:o===r?i:i=n(r=o,e)}}function Rn(t,n,e){var r,i,o;return function(){var a,u=e(this);return null==u?void this.removeAttribute(t):(a=this.getAttribute(t),a===u?null:a===r&&u===i?o:o=n(r=a,i=u))}}function zn(t,n,e){var r,i,o;return function(){var a,u=e(this);return null==u?void this.removeAttributeNS(t.space,t.local):(a=this.getAttributeNS(t.space,t.local),a===u?null:a===r&&u===i?o:o=n(r=a,i=u))}}function qn(t,n){function e(){var e=this,r=n.apply(e,arguments);return r&&function(n){e.setAttributeNS(t.space,t.local,r(n))}}return e._value=n,e}function Un(t,n){function e(){var e=this,r=n.apply(e,arguments);return r&&function(n){e.setAttribute(t,r(n))}}return e._value=n,e}function Bn(t,n){return function(){kn(this,t).delay=+n.apply(this,arguments)}}function Yn(t,n){return n=+n,function(){kn(this,t).delay=n}}function Hn(t,n){return function(){Cn(this,t).duration=+n.apply(this,arguments)}}function Xn(t,n){return n=+n,function(){Cn(this,t).duration=n}}function Wn(t,n){if("function"!=typeof n)throw new Error;return function(){Cn(this,t).ease=n}}function $n(t){return(t+"").trim().split(/^|\s+/).every(function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t})}function Gn(t,n,e){var r,i,o=$n(n)?kn:Cn;return function(){var a=o(this,t),u=a.on;u!==r&&(i=(r=u).copy()).on(n,e),a.on=i}}function Zn(t){return function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}}function Kn(t,n){var e,r,i;return function(){var o=W(this,t),a=(this.style.removeProperty(t),W(this,t));return o===a?null:o===e&&a===r?i:i=n(e=o,r=a)}}function Jn(t){return function(){this.style.removeProperty(t)}}function Qn(t,n,e){var r,i;return function(){var o=W(this,t);return o===e?null:o===r?i:i=n(r=o,e)}}function te(t,n,e){var r,i,o;return function(){var a=W(this,t),u=e(this);return null==u&&(this.style.removeProperty(t),u=W(this,t)),a===u?null:a===r&&u===i?o:o=n(r=a,i=u)}}function ne(t,n,e){function r(){var r=this,i=n.apply(r,arguments);return i&&function(n){r.style.setProperty(t,i(n),e)}}return r._value=n,r}function ee(t){return function(){this.textContent=t}}function re(t){return function(){var n=t(this);this.textContent=null==n?"":n}}function ie(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function oe(t){return _t().transition(t)}function ae(){return++Wd}function ue(t){return+t}function se(t){return t*t}function ce(t){return t*(2-t)}function le(t){return((t*=2)<=1?t*t:--t*(2-t)+1)/2}function fe(t){return t*t*t}function he(t){return--t*t*t+1}function de(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}function pe(t){return 1-Math.cos(t*Qd)}function ve(t){return Math.sin(t*Qd)}function ye(t){return(1-Math.cos(Jd*t))/2}function me(t){return Math.pow(2,10*t-10)}function ge(t){return 1-Math.pow(2,-10*t)}function _e(t){return((t*=2)<=1?Math.pow(2,10*t-10):2-Math.pow(2,10-10*t))/2}function be(t){return 1-Math.sqrt(1-t*t)}function xe(t){return Math.sqrt(1- --t*t)}function we(t){return((t*=2)<=1?1-Math.sqrt(1-t*t):Math.sqrt(1-(t-=2)*t)+1)/2}function Me(t){return 1-Ee(1-t)}function Ee(t){return(t=+t)<tp?cp*t*t:t<ep?cp*(t-=np)*t+rp:t<op?cp*(t-=ip)*t+ap:cp*(t-=up)*t+sp}function Se(t){return((t*=2)<=1?1-Ee(1-t):Ee(t-1)+1)/2}function Fe(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return mp.time=_n(),mp;return e}function Te(){t.event.stopImmediatePropagation()}function ke(t){return{type:t}}function Ce(){return!t.event.button}function Ne(){var t=this.ownerSVGElement||this;return[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function je(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function Ae(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function De(t){var n=t.__brush;return n?n.dim.output(n.selection):null}function Pe(){return Ve(kp)}function Oe(){return Ve(Cp)}function Ve(n){function e(t){var e=t.property("__brush",u).selectAll(".overlay").data([ke("overlay")]);e.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",jp.overlay).merge(e).each(function(){var t=je(this).extent;zf(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])}),t.selectAll(".selection").data([ke("selection")]).enter().append("rect").attr("class","selection").attr("cursor",jp.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var i=t.selectAll(".handle").data(n.handles,function(t){return t.type});i.exit().remove(),i.enter().append("rect").attr("class",function(t){return"handle handle--"+t.type}).attr("cursor",function(t){return jp[t.type]}),t.each(r).attr("fill","none").attr("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush touchstart.brush",a)}function r(){var t=zf(this),n=je(this).selection;n?(t.selectAll(".selection").style("display",null).attr("x",n[0][0]).attr("y",n[0][1]).attr("width",n[1][0]-n[0][0]).attr("height",n[1][1]-n[0][1]),t.selectAll(".handle").style("display",null).attr("x",function(t){return"e"===t.type[t.type.length-1]?n[1][0]-h/2:n[0][0]-h/2}).attr("y",function(t){return"s"===t.type[0]?n[1][1]-h/2:n[0][1]-h/2}).attr("width",function(t){return"n"===t.type||"s"===t.type?n[1][0]-n[0][0]+h:h}).attr("height",function(t){return"e"===t.type||"w"===t.type?n[1][1]-n[0][1]+h:h})):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function i(t,n){return t.__brush.emitter||new o(t,n)}function o(t,n){this.that=t,this.args=n,this.state=t.__brush,this.active=0}function a(){function e(){var t=rf(E);!V||w||M||(Math.abs(t[0]-I[0])>Math.abs(t[1]-I[1])?M=!0:w=!0),I=t,x=!0,Mp(),o()}function o(){var t;switch(_=I[0]-L[0],b=I[1]-L[1],F){case Sp:case Ep:T&&(_=Math.max(A-f,Math.min(P-v,_)),h=f+_,y=v+_),k&&(b=Math.max(D-d,Math.min(O-m,b)),p=d+b,g=m+b);break;case Fp:T<0?(_=Math.max(A-f,Math.min(P-f,_)),h=f+_,y=v):T>0&&(_=Math.max(A-v,Math.min(P-v,_)),h=f,y=v+_),k<0?(b=Math.max(D-d,Math.min(O-d,b)),p=d+b,g=m):k>0&&(b=Math.max(D-m,Math.min(O-m,b)),p=d,g=m+b);break;case Tp:T&&(h=Math.max(A,Math.min(P,f-_*T)),y=Math.max(A,Math.min(P,v+_*T))),k&&(p=Math.max(D,Math.min(O,d-b*k)),g=Math.max(D,Math.min(O,m+b*k)))}y<h&&(T*=-1,t=f,f=v,v=t,t=h,h=y,y=t,S in Ap&&q.attr("cursor",jp[S=Ap[S]])),g<p&&(k*=-1,t=d,d=m,m=t,t=p,p=g,g=t,S in Dp&&q.attr("cursor",jp[S=Dp[S]])),C.selection&&(j=C.selection),w&&(h=j[0][0],y=j[1][0]),M&&(p=j[0][1],g=j[1][1]),j[0][0]===h&&j[0][1]===p&&j[1][0]===y&&j[1][1]===g||(C.selection=[[h,p],[y,g]],r.call(E),R.brush())}function a(){if(Te(),t.event.touches){if(t.event.touches.length)return;s&&clearTimeout(s),s=setTimeout(function(){s=null},500),z.on("touchmove.brush touchend.brush touchcancel.brush",null)}else xt(t.event.view,x),U.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);z.attr("pointer-events","all"),q.attr("cursor",jp.overlay),C.selection&&(j=C.selection),Ae(j)&&(C.selection=null,r.call(E)),R.end()}function u(){switch(t.event.keyCode){case 16:V=T&&k;break;case 18:F===Fp&&(T&&(v=y-_*T,f=h+_*T),k&&(m=g-b*k,d=p+b*k),F=Tp,o());break;case 32:F!==Fp&&F!==Tp||(T<0?v=y-_:T>0&&(f=h-_),k<0?m=g-b:k>0&&(d=p-b),F=Sp,q.attr("cursor",jp.selection),o());break;default:return}Mp()}function c(){switch(t.event.keyCode){case 16:V&&(w=M=V=!1,o());break;case 18:F===Tp&&(T<0?v=y:T>0&&(f=h),k<0?m=g:k>0&&(d=p),F=Fp,o());break;case 32:F===Sp&&(t.event.altKey?(T&&(v=y-_*T,f=h+_*T),k&&(m=g-b*k,d=p+b*k),F=Tp):(T<0?v=y:T>0&&(f=h),k<0?m=g:k>0&&(d=p),F=Fp),q.attr("cursor",jp[S]),o());break;default:return}Mp()}if(t.event.touches){if(t.event.changedTouches.length<t.event.touches.length)return Mp()}else if(s)return;if(l.apply(this,arguments)){var f,h,d,p,v,y,m,g,_,b,x,w,M,E=this,S=t.event.target.__data__.type,F="selection"===(t.event.metaKey?S="overlay":S)?Ep:t.event.altKey?Tp:Fp,T=n===Cp?null:Pp[S],k=n===kp?null:Op[S],C=je(E),N=C.extent,j=C.selection,A=N[0][0],D=N[0][1],P=N[1][0],O=N[1][1],V=T&&k&&t.event.shiftKey,L=rf(E),I=L,R=i(E,arguments).beforestart();"overlay"===S?C.selection=j=[[f=n===Cp?A:L[0],d=n===kp?D:L[1]],[v=n===Cp?P:f,m=n===kp?O:d]]:(f=j[0][0],d=j[0][1],v=j[1][0],m=j[1][1]),h=f,p=d,y=v,g=m;var z=zf(E).attr("pointer-events","none"),q=z.selectAll(".overlay").attr("cursor",jp[S]);if(t.event.touches)z.on("touchmove.brush",e,!0).on("touchend.brush touchcancel.brush",a,!0);else{var U=zf(t.event.view).on("keydown.brush",u,!0).on("keyup.brush",c,!0).on("mousemove.brush",e,!0).on("mouseup.brush",a,!0);Hf(t.event.view)}Te(),Fd(E),r.call(E),R.start()}}function u(){var t=this.__brush||{selection:null};return t.extent=c.apply(this,arguments),t.dim=n,t}var s,c=Ne,l=Ce,f=m(e,"start","brush","end"),h=6;return e.move=function(t,e){t.selection?t.on("start.brush",function(){i(this,arguments).beforestart().start()}).on("interrupt.brush end.brush",function(){i(this,arguments).end()}).tween("brush",function(){function t(t){a.selection=1===t&&Ae(c)?null:l(t),r.call(o),u.brush()}var o=this,a=o.__brush,u=i(o,arguments),s=a.selection,c=n.input("function"==typeof e?e.apply(this,arguments):e,a.extent),l=Bh(s,c);return s&&c?t:t(1)}):t.each(function(){var t=this,o=arguments,a=t.__brush,u=n.input("function"==typeof e?e.apply(t,o):e,a.extent),s=i(t,o).beforestart();Fd(t),a.selection=null==u||Ae(u)?null:u,r.call(t),s.start().brush().end()})},o.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting&&(this.starting=!1,this.emit("start")),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(t){j(new wp(e,t,n.output(this.state.selection)),f.apply,f,[t,this.that,this.args])}},e.extent=function(t){return arguments.length?(c="function"==typeof t?t:xp([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),e):c},e.filter=function(t){return arguments.length?(l="function"==typeof t?t:xp(!!t),e):l},e.handleSize=function(t){return arguments.length?(h=+t,e):h},e.on=function(){var t=f.on.apply(f,arguments);return t===f?e:t},e}function Le(t){return function(n,e){return t(n.source.value+n.target.value,e.source.value+e.target.value)}}function Ie(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Re(){return new Ie}function ze(t){return t.source}function qe(t){return t.target}function Ue(t){return t.radius}function Be(t){return t.startAngle}function Ye(t){return t.endAngle}function He(){}function Xe(t,n){var e=new He;if(t instanceof He)t.each(function(t,n){e.set(n,t)});else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==n)for(;++i<o;)e.set(i,t[i]);else for(;++i<o;)e.set(n(r=t[i],i,t),r)}else if(t)for(var a in t)e.set(a,t[a]);return e}function We(){return{}}function $e(t,n,e){t[n]=e}function Ge(){return Xe()}function Ze(t,n,e){t.set(n,e)}function Ke(){}function Je(t,n){var e=new Ke;if(t instanceof Ke)t.each(function(t){e.add(t)});else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}function Qe(t){return new Function("d","return {"+t.map(function(t,n){return JSON.stringify(t)+": d["+n+"]"}).join(",")+"}")}function tr(t,n){var e=Qe(t);return function(r,i){return n(e(r),i,t)}}function nr(t){var n=Object.create(null),e=[];return t.forEach(function(t){for(var r in t)r in n||e.push(n[r]=r)}),e}function er(t,n,e,r){if(isNaN(n)||isNaN(e))return t;var i,o,a,u,s,c,l,f,h,d=t._root,p={data:r},v=t._x0,y=t._y0,m=t._x1,g=t._y1;if(!d)return t._root=p,t;for(;d.length;)if((c=n>=(o=(v+m)/2))?v=o:m=o,(l=e>=(a=(y+g)/2))?y=a:g=a,i=d,!(d=d[f=l<<1|c]))return i[f]=p,t;if(u=+t._x.call(null,d.data),s=+t._y.call(null,d.data),n===u&&e===s)return p.next=d,i?i[f]=p:t._root=p,t;do{i=i?i[f]=new Array(4):t._root=new Array(4),(c=n>=(o=(v+m)/2))?v=o:m=o,(l=e>=(a=(y+g)/2))?y=a:g=a}while((f=l<<1|c)==(h=(s>=a)<<1|u>=o));return i[h]=d,i[f]=p,t}function rr(t){var n,e,r,i,o=t.length,a=new Array(o),u=new Array(o),s=1/0,c=1/0,l=-1/0,f=-1/0;for(e=0;e<o;++e)isNaN(r=+this._x.call(null,n=t[e]))||isNaN(i=+this._y.call(null,n))||(a[e]=r,u[e]=i,r<s&&(s=r),r>l&&(l=r),i<c&&(c=i),i>f&&(f=i));for(l<s&&(s=this._x0,l=this._x1),f<c&&(c=this._y0,f=this._y1),this.cover(s,c).cover(l,f),e=0;e<o;++e)er(this,a[e],u[e],t[e]);return this}function ir(t){for(var n=0,e=t.length;n<e;++n)this.remove(t[n]);return this}function or(t){return t[0]}function ar(t){return t[1]}function ur(t,n,e){var r=new sr(null==n?or:n,null==e?ar:e,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function sr(t,n,e,r,i,o){this._x=t,this._y=n,this._x0=e,this._y0=r,this._x1=i,this._y1=o,this._root=void 0}function cr(t){for(var n={data:t.data},e=n;t=t.next;)e=e.next={data:t.data};return n}function lr(t){return t.x+t.vx}function fr(t){return t.y+t.vy}function hr(t){return t.index}function dr(t,n){var e=t.get(n);if(!e)throw new Error("missing: "+n);return e}function pr(t){return t.x}function vr(t){return t.y}function yr(t){return new mr(t)}function mr(t){if(!(n=Xv.exec(t)))throw new Error("invalid format: "+t);var n,e=n[1]||" ",r=n[2]||">",i=n[3]||"-",o=n[4]||"",a=!!n[5],u=n[6]&&+n[6],s=!!n[7],c=n[8]&&+n[8].slice(1),l=n[9]||"";"n"===l?(s=!0,l="g"):Hv[l]||(l=""),(a||"0"===e&&"="===r)&&(a=!0,e="0",r="="),this.fill=e,this.align=r,this.sign=i,this.symbol=o,this.zero=a,this.width=u,this.comma=s,this.precision=c,this.type=l}function gr(n){return Wv=Zv(n),t.format=Wv.format,t.formatPrefix=Wv.formatPrefix,Wv}function _r(){this.reset()}function br(t,n,e){var r=t.s=n+e,i=r-n,o=r-i;t.t=n-o+(e-i)}function xr(t){return t>1?0:t<-1?Py:Math.acos(t)}function wr(t){return t>1?Oy:t<-1?-Oy:Math.asin(t)}function Mr(t){return(t=$y(t/2))*t}function Er(){}function Sr(t,n){t&&Qy.hasOwnProperty(t.type)&&Qy[t.type](t,n)}function Fr(t,n,e){var r,i=-1,o=t.length-e;for(n.lineStart();++i<o;)r=t[i],n.point(r[0],r[1],r[2]);n.lineEnd()}function Tr(t,n){var e=-1,r=t.length;for(n.polygonStart();++e<r;)Fr(t[e],n,1);n.polygonEnd()}function kr(){rm.point=Nr}function Cr(){jr(ny,ey)}function Nr(t,n){rm.point=jr,ny=t,ey=n,t*=Ry,n*=Ry,ry=t,iy=By(n=n/2+Vy),oy=$y(n)}function jr(t,n){t*=Ry,n*=Ry,n=n/2+Vy;var e=t-ry,r=e>=0?1:-1,i=r*e,o=By(n),a=$y(n),u=oy*a,s=iy*o+u*By(i),c=u*r*$y(i);nm.add(Uy(c,s)),ry=t,iy=o,oy=a}function Ar(t){return[Uy(t[1],t[0]),wr(t[2])]}function Dr(t){var n=t[0],e=t[1],r=By(e);return[r*By(n),r*$y(n),$y(e)]}function Pr(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function Or(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function Vr(t,n){t[0]+=n[0],t[1]+=n[1],t[2]+=n[2]}function Lr(t,n){return[t[0]*n,t[1]*n,t[2]*n]}function Ir(t){var n=Zy(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}function Rr(t,n){py.push(vy=[ay=t,sy=t]),n<uy&&(uy=n),n>cy&&(cy=n)}function zr(t,n){var e=Dr([t*Ry,n*Ry]);if(dy){var r=Or(dy,e),i=[r[1],-r[0],0],o=Or(i,r);Ir(o),o=Ar(o);var a,u=t-ly,s=u>0?1:-1,c=o[0]*Iy*s,l=zy(u)>180;l^(s*ly<c&&c<s*t)?(a=o[1]*Iy)>cy&&(cy=a):(c=(c+360)%360-180,l^(s*ly<c&&c<s*t)?(a=-o[1]*Iy)<uy&&(uy=a):(n<uy&&(uy=n),n>cy&&(cy=n))),l?t<ly?Xr(ay,t)>Xr(ay,sy)&&(sy=t):Xr(t,sy)>Xr(ay,sy)&&(ay=t):sy>=ay?(t<ay&&(ay=t),t>sy&&(sy=t)):t>ly?Xr(ay,t)>Xr(ay,sy)&&(sy=t):Xr(t,sy)>Xr(ay,sy)&&(ay=t)}else py.push(vy=[ay=t,sy=t]);n<uy&&(uy=n),n>cy&&(cy=n),dy=e,ly=t}function qr(){am.point=zr}function Ur(){vy[0]=ay,vy[1]=sy,am.point=Rr,dy=null}function Br(t,n){if(dy){var e=t-ly;om.add(zy(e)>180?e+(e>0?360:-360):e)}else fy=t,hy=n;rm.point(t,n),zr(t,n)}function Yr(){rm.lineStart()}function Hr(){Br(fy,hy),rm.lineEnd(),zy(om)>Dy&&(ay=-(sy=180)),vy[0]=ay,vy[1]=sy,dy=null}function Xr(t,n){return(n-=t)<0?n+360:n}function Wr(t,n){return t[0]-n[0]}function $r(t,n){return t[0]<=t[1]?t[0]<=n&&n<=t[1]:n<t[0]||t[1]<n}function Gr(t,n){t*=Ry,n*=Ry;var e=By(n);Zr(e*By(t),e*$y(t),$y(n))}function Zr(t,n,e){++yy,gy+=(t-gy)/yy,_y+=(n-_y)/yy,by+=(e-by)/yy}function Kr(){sm.point=Jr}function Jr(t,n){t*=Ry,n*=Ry;var e=By(n);Cy=e*By(t),Ny=e*$y(t),jy=$y(n),sm.point=Qr,Zr(Cy,Ny,jy)}function Qr(t,n){t*=Ry,n*=Ry;var e=By(n),r=e*By(t),i=e*$y(t),o=$y(n),a=Uy(Zy((a=Ny*o-jy*i)*a+(a=jy*r-Cy*o)*a+(a=Cy*i-Ny*r)*a),Cy*r+Ny*i+jy*o);my+=a,xy+=a*(Cy+(Cy=r)),wy+=a*(Ny+(Ny=i)),My+=a*(jy+(jy=o)),Zr(Cy,Ny,jy)}function ti(){sm.point=Gr}function ni(){sm.point=ri}function ei(){ii(Ty,ky),sm.point=Gr}function ri(t,n){Ty=t,ky=n,t*=Ry,n*=Ry,sm.point=ii;var e=By(n);Cy=e*By(t),Ny=e*$y(t),jy=$y(n),Zr(Cy,Ny,jy)}function ii(t,n){t*=Ry,n*=Ry;var e=By(n),r=e*By(t),i=e*$y(t),o=$y(n),a=Ny*o-jy*i,u=jy*r-Cy*o,s=Cy*i-Ny*r,c=Zy(a*a+u*u+s*s),l=wr(c),f=c&&-l/c;Ey+=f*a,Sy+=f*u,Fy+=f*s,my+=l,xy+=l*(Cy+(Cy=r)),wy+=l*(Ny+(Ny=i)),My+=l*(jy+(jy=o)),Zr(Cy,Ny,jy)}function oi(t,n){return[t>Py?t-Ly:t<-Py?t+Ly:t,n]}function ai(t,n,e){return(t%=Ly)?n||e?fm(si(t),ci(n,e)):si(t):n||e?ci(n,e):oi}function ui(t){return function(n,e){return n+=t,[n>Py?n-Ly:n<-Py?n+Ly:n,e]}}function si(t){var n=ui(t);return n.invert=ui(-t),n}function ci(t,n){function e(t,n){var e=By(n),u=By(t)*e,s=$y(t)*e,c=$y(n),l=c*r+u*i;return[Uy(s*o-l*a,u*r-c*i),wr(l*o+s*a)]}var r=By(t),i=$y(t),o=By(n),a=$y(n);return e.invert=function(t,n){var e=By(n),u=By(t)*e,s=$y(t)*e,c=$y(n),l=c*o-s*a;return[Uy(s*o+c*a,u*r+l*i),wr(l*r-u*i)]},e}function li(t,n,e,r,i,o){if(e){var a=By(n),u=$y(n),s=r*e;null==i?(i=n+r*Ly,o=n-s/2):(i=fi(a,i),o=fi(a,o),(r>0?i<o:i>o)&&(i+=r*Ly));for(var c,l=i;r>0?l>o:l<o;l-=s)c=Ar([a,-u*By(l),-u*$y(l)]),t.point(c[0],c[1])}}function fi(t,n){n=Dr(n),n[0]-=t,Ir(n);var e=xr(-n[1]);return((-n[2]<0?-e:e)+Ly-Dy)%Ly}function hi(t,n,e,r){this.x=t,this.z=n,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}function di(t){if(n=t.length){for(var n,e,r=0,i=t[0];++r<n;)i.n=e=t[r],e.p=i,i=e;i.n=e=t[0],e.p=i}}function pi(t,n,e,r){function i(i,o){return t<=i&&i<=e&&n<=o&&o<=r}function o(i,o,u,c){var l=0,f=0;if(null==i||(l=a(i,u))!==(f=a(o,u))||s(i,o)<0^u>0)do{c.point(0===l||3===l?t:e,l>1?r:n)}while((l=(l+u+4)%4)!==f);else c.point(o[0],o[1])}function a(r,i){return zy(r[0]-t)<Dy?i>0?0:3:zy(r[0]-e)<Dy?i>0?2:1:zy(r[1]-n)<Dy?i>0?1:0:i>0?3:2}function u(t,n){return s(t.x,n.x)}function s(t,n){var e=a(t,1),r=a(n,1);return e!==r?e-r:0===e?n[1]-t[1]:1===e?t[0]-n[0]:2===e?t[1]-n[1]:n[0]-t[0]}return function(a){function s(t,n){i(t,n)&&F.point(t,n)}function c(){for(var n=0,e=0,i=y.length;e<i;++e)for(var o,a,u=y[e],s=1,c=u.length,l=u[0],f=l[0],h=l[1];s<c;++s)o=f,a=h,l=u[s],f=l[0],h=l[1],a<=r?h>r&&(f-o)*(r-a)>(h-a)*(t-o)&&++n:h<=r&&(f-o)*(r-a)<(h-a)*(t-o)&&--n;return n}function l(){F=T,v=[],y=[],S=!0}function f(){var t=c(),n=S&&t,e=(v=kl(v)).length;(n||e)&&(a.polygonStart(),n&&(a.lineStart(),o(null,null,1,a),a.lineEnd()),e&&km(v,u,t,o,a),a.polygonEnd()),F=a,v=y=m=null}function h(){k.point=p,y&&y.push(m=[]),E=!0,M=!1,x=w=NaN}function d(){v&&(p(g,_),b&&M&&T.rejoin(),v.push(T.result())),k.point=s,M&&F.lineEnd()}function p(o,a){var u=i(o,a);if(y&&m.push([o,a]),E)g=o,_=a,b=u,E=!1,u&&(F.lineStart(),F.point(o,a));else if(u&&M)F.point(o,a);else{var s=[x=Math.max(Nm,Math.min(Cm,x)),w=Math.max(Nm,Math.min(Cm,w))],c=[o=Math.max(Nm,Math.min(Cm,o)),a=Math.max(Nm,Math.min(Cm,a))];Fm(s,c,t,n,e,r)?(M||(F.lineStart(),F.point(s[0],s[1])),F.point(c[0],c[1]),u||F.lineEnd(),S=!1):u&&(F.lineStart(),F.point(o,a),S=!1)}x=o,w=a,M=u}var v,y,m,g,_,b,x,w,M,E,S,F=a,T=Sm(),k={point:s,lineStart:h,lineEnd:d,polygonStart:l,polygonEnd:f};return k}}function vi(){Om.point=mi,Om.lineEnd=yi}function yi(){Om.point=Om.lineEnd=Er}function mi(t,n){t*=Ry,n*=Ry,hm=t,dm=$y(n),pm=By(n),Om.point=gi}function gi(t,n){t*=Ry,n*=Ry;var e=$y(n),r=By(n),i=zy(t-hm),o=By(i),a=$y(i),u=r*a,s=pm*e-dm*r*o,c=dm*e+pm*r*o;Pm.add(Uy(Zy(u*u+s*s),c)),hm=t,dm=e,pm=r}function _i(t,n){return!(!t||!qm.hasOwnProperty(t.type))&&qm[t.type](t,n)}function bi(t,n){return 0===Rm(t,n)}function xi(t,n){var e=Rm(t[0],t[1]);return Rm(t[0],n)+Rm(n,t[1])<=e+Dy}function wi(t,n){return!!Dm(t.map(Mi),Ei(n))}function Mi(t){return t=t.map(Ei),t.pop(),t}function Ei(t){return[t[0]*Ry,t[1]*Ry]}function Si(t,n,e){var r=vl(t,n-Dy,e).concat(n);return function(t){return r.map(function(n){return[t,n]})}}function Fi(t,n,e){var r=vl(t,n-Dy,e).concat(n);return function(t){return r.map(function(n){return[n,t]})}}function Ti(){function t(){return{type:"MultiLineString",coordinates:n()}}function n(){return vl(Yy(o/y)*y,i,y).map(h).concat(vl(Yy(c/m)*m,s,m).map(d)).concat(vl(Yy(r/p)*p,e,p).filter(function(t){return zy(t%y)>Dy}).map(l)).concat(vl(Yy(u/v)*v,a,v).filter(function(t){return zy(t%m)>Dy}).map(f))}var e,r,i,o,a,u,s,c,l,f,h,d,p=10,v=p,y=90,m=360,g=2.5;return t.lines=function(){return n().map(function(t){return{type:"LineString",coordinates:t}})},t.outline=function(){return{type:"Polygon",coordinates:[h(o).concat(d(s).slice(1),h(i).reverse().slice(1),d(c).reverse().slice(1))]}},t.extent=function(n){return arguments.length?t.extentMajor(n).extentMinor(n):t.extentMinor()},t.extentMajor=function(n){return arguments.length?(o=+n[0][0],i=+n[1][0],c=+n[0][1],s=+n[1][1],o>i&&(n=o,o=i,i=n),c>s&&(n=c,c=s,s=n),t.precision(g)):[[o,c],[i,s]]},t.extentMinor=function(n){return arguments.length?(r=+n[0][0],e=+n[1][0],u=+n[0][1],a=+n[1][1],r>e&&(n=r,r=e,e=n),u>a&&(n=u,u=a,a=n),t.precision(g)):[[r,u],[e,a]]},t.step=function(n){return arguments.length?t.stepMajor(n).stepMinor(n):t.stepMinor()},t.stepMajor=function(n){return arguments.length?(y=+n[0],m=+n[1],t):[y,m]},t.stepMinor=function(n){return arguments.length?(p=+n[0],v=+n[1],t):[p,v]},t.precision=function(n){return arguments.length?(g=+n,l=Si(u,a,90),f=Fi(r,e,g),h=Si(c,s,90),d=Fi(o,i,g),t):g},t.extentMajor([[-180,-90+Dy],[180,90-Dy]]).extentMinor([[-180,-80-Dy],[180,80+Dy]])}function ki(){return Ti()()}function Ci(){Wm.point=Ni}function Ni(t,n){Wm.point=ji,vm=mm=t,ym=gm=n}function ji(t,n){Xm.add(gm*t-mm*n),mm=t,gm=n}function Ai(){ji(vm,ym)}function Di(t,n){t<$m&&($m=t),t>Zm&&(Zm=t),n<Gm&&(Gm=n),n>Km&&(Km=n)}function Pi(t,n){Qm+=t,tg+=n,++ng}function Oi(){sg.point=Vi}function Vi(t,n){sg.point=Li,Pi(xm=t,wm=n)}function Li(t,n){var e=t-xm,r=n-wm,i=Zy(e*e+r*r);eg+=i*(xm+t)/2,rg+=i*(wm+n)/2,ig+=i,Pi(xm=t,wm=n)}function Ii(){sg.point=Pi}function Ri(){sg.point=qi}function zi(){Ui(_m,bm)}function qi(t,n){sg.point=Ui,Pi(_m=xm=t,bm=wm=n)}function Ui(t,n){var e=t-xm,r=n-wm,i=Zy(e*e+r*r);eg+=i*(xm+t)/2,rg+=i*(wm+n)/2,ig+=i,i=wm*t-xm*n,og+=i*(xm+t),ag+=i*(wm+n),ug+=3*i,Pi(xm=t,wm=n)}function Bi(t){this._context=t}function Yi(t,n){vg.point=Hi,lg=hg=t,fg=dg=n}function Hi(t,n){hg-=t,dg-=n,pg.add(Zy(hg*hg+dg*dg)),hg=t,dg=n}function Xi(){this._string=[]}function Wi(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}function $i(t){return t.length>1}function Gi(t,n){return((t=t.x)[0]<0?t[1]-Oy-Dy:Oy-t[1])-((n=n.x)[0]<0?n[1]-Oy-Dy:Oy-n[1])}function Zi(t){var n,e=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(o,a){var u=o>0?Py:-Py,s=zy(o-e);zy(s-Py)<Dy?(t.point(e,r=(r+a)/2>0?Oy:-Oy),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(u,r),t.point(o,r),n=0):i!==u&&s>=Py&&(zy(e-i)<Dy&&(e-=i*Dy),zy(o-u)<Dy&&(o-=u*Dy),r=Ki(e,r,o,a),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(u,r),n=0),t.point(e=o,r=a),i=u},lineEnd:function(){t.lineEnd(),e=r=NaN},clean:function(){return 2-n}}}function Ki(t,n,e,r){var i,o,a=$y(t-e);return zy(a)>Dy?qy(($y(n)*(o=By(r))*$y(e)-$y(r)*(i=By(n))*$y(t))/(i*o*a)):(n+r)/2}function Ji(t,n,e,r){var i;if(null==t)i=e*Oy,r.point(-Py,i),r.point(0,i),r.point(Py,i),r.point(Py,0),r.point(Py,-i),r.point(0,-i),r.point(-Py,-i),r.point(-Py,0),r.point(-Py,i);else if(zy(t[0]-n[0])>Dy){var o=t[0]<n[0]?Py:-Py;i=e*o/2,r.point(-o,i),r.point(0,i),r.point(o,i)}else r.point(n[0],n[1])}function Qi(t){return function(n){var e=new to;for(var r in t)e[r]=t[r];return e.stream=n,e}}function to(){}function no(t,n,e){var r=n[1][0]-n[0][0],i=n[1][1]-n[0][1],o=t.clipExtent&&t.clipExtent();t.scale(150).translate([0,0]),null!=o&&t.clipExtent(null),tm(e,t.stream(Jm));var a=Jm.result(),u=Math.min(r/(a[1][0]-a[0][0]),i/(a[1][1]-a[0][1])),s=+n[0][0]+(r-u*(a[1][0]+a[0][0]))/2,c=+n[0][1]+(i-u*(a[1][1]+a[0][1]))/2;return null!=o&&t.clipExtent(o),t.scale(150*u).translate([s,c])}function eo(t,n,e){return no(t,[[0,0],n],e)}function ro(t){return Qi({point:function(n,e){n=t(n,e),this.stream.point(n[0],n[1])}})}function io(t,n){function e(r,i,o,a,u,s,c,l,f,h,d,p,v,y){var m=c-r,g=l-i,_=m*m+g*g;if(_>4*n&&v--){var b=a+h,x=u+d,w=s+p,M=Zy(b*b+x*x+w*w),E=wr(w/=M),S=zy(zy(w)-1)<Dy||zy(o-f)<Dy?(o+f)/2:Uy(x,b),F=t(S,E),T=F[0],k=F[1],C=T-r,N=k-i,j=g*C-m*N;(j*j/_>n||zy((m*C+g*N)/_-.5)>.3||a*h+u*d+s*p<wg)&&(e(r,i,o,a,u,s,T,k,S,b/=M,x/=M,w,v,y),y.point(T,k),e(T,k,S,b,x,w,c,l,f,h,d,p,v,y))}}return function(n){function r(e,r){e=t(e,r),n.point(e[0],e[1])}function i(){m=NaN,w.point=o,n.lineStart()}function o(r,i){var o=Dr([r,i]),a=t(r,i);e(m,g,y,_,b,x,m=a[0],g=a[1],y=r,_=o[0],b=o[1],x=o[2],xg,n),n.point(m,g)}function a(){w.point=r,n.lineEnd()}function u(){i(),w.point=s,w.lineEnd=c}function s(t,n){o(l=t,n),f=m,h=g,d=_,p=b,v=x,w.point=o}function c(){e(m,g,y,_,b,x,f,h,l,d,p,v,xg,n),w.lineEnd=a,a()}var l,f,h,d,p,v,y,m,g,_,b,x,w={point:r,lineStart:i,lineEnd:a,polygonStart:function(){n.polygonStart(),w.lineStart=u},polygonEnd:function(){n.polygonEnd(),w.lineStart=i}};return w}}function oo(t){return ao(function(){return t})()}function ao(t){function n(t){return t=l(t[0]*Ry,t[1]*Ry),[t[0]*y+u,s-t[1]*y]}function e(t){return(t=l.invert((t[0]-u)/y,(s-t[1])/y))&&[t[0]*Iy,t[1]*Iy]}function r(t,n){return t=a(t,n),[t[0]*y+u,s-t[1]*y]}function i(){l=fm(c=ai(x,w,M),a);var t=a(_,b);return u=m-t[0]*y,s=g+t[1]*y,o()}function o(){return p=v=null,n}var a,u,s,c,l,f,h,d,p,v,y=150,m=480,g=250,_=0,b=0,x=0,w=0,M=0,E=null,S=gg,F=null,T=Ym,k=.5,C=Mg(r,k);return n.stream=function(t){return p&&v===t?p:p=Eg(S(c,C(T(v=t))))},n.clipAngle=function(t){return arguments.length?(S=+t?_g(E=t*Ry,6*Ry):(E=null,gg),o()):E*Iy},n.clipExtent=function(t){return arguments.length?(T=null==t?(F=f=h=d=null,Ym):pi(F=+t[0][0],f=+t[0][1],h=+t[1][0],d=+t[1][1]),o()):null==F?null:[[F,f],[h,d]]},n.scale=function(t){return arguments.length?(y=+t,i()):y},n.translate=function(t){return arguments.length?(m=+t[0],g=+t[1],i()):[m,g]},n.center=function(t){return arguments.length?(_=t[0]%360*Ry,b=t[1]%360*Ry,i()):[_*Iy,b*Iy]},n.rotate=function(t){return arguments.length?(x=t[0]%360*Ry,w=t[1]%360*Ry,M=t.length>2?t[2]%360*Ry:0,i()):[x*Iy,w*Iy,M*Iy]},n.precision=function(t){return arguments.length?(C=Mg(r,k=t*t),o()):Zy(k)},n.fitExtent=function(t,e){return no(n,t,e)},n.fitSize=function(t,e){return eo(n,t,e)},function(){return a=t.apply(this,arguments),n.invert=a.invert&&e,i()}}function uo(t){var n=0,e=Py/3,r=ao(t),i=r(n,e);return i.parallels=function(t){return arguments.length?r(n=t[0]*Ry,e=t[1]*Ry):[n*Iy,e*Iy]},i}function so(t){function n(t,n){return[t*e,$y(n)/e]}var e=By(t);return n.invert=function(t,n){return[t/e,wr(n*e)]},n}function co(t,n){function e(t,n){var e=Zy(o-2*i*$y(n))/i;return[e*$y(t*=i),a-e*By(t)]}var r=$y(t),i=(r+$y(n))/2;if(zy(i)<Dy)return so(t);var o=1+r*(2*i-r),a=Zy(o)/i;return e.invert=function(t,n){var e=a-n;return[Uy(t,zy(e))/i*Gy(e),wr((o-(t*t+e*e)*i*i)/(2*i))]},e}function lo(t){var n=t.length;return{point:function(e,r){for(var i=-1;++i<n;)t[i].point(e,r)},sphere:function(){for(var e=-1;++e<n;)t[e].sphere()},lineStart:function(){for(var e=-1;++e<n;)t[e].lineStart()},lineEnd:function(){for(var e=-1;++e<n;)t[e].lineEnd()},polygonStart:function(){for(var e=-1;++e<n;)t[e].polygonStart()},polygonEnd:function(){for(var e=-1;++e<n;)t[e].polygonEnd()}}}function fo(t){return function(n,e){var r=By(n),i=By(e),o=t(r*i);return[o*i*$y(n),o*$y(e)]}}function ho(t){return function(n,e){var r=Zy(n*n+e*e),i=t(r),o=$y(i),a=By(i);return[Uy(n*o,r*a),wr(r&&e*o/r)]}}function po(t,n){return[t,Xy(Ky((Oy+n)/2))]}function vo(t){function n(){var n=Py*u(),a=o(Mm(o.rotate()).invert([0,0]));return c(null==l?[[a[0]-n,a[1]-n],[a[0]+n,a[1]+n]]:t===po?[[Math.max(a[0]-n,l),e],[Math.min(a[0]+n,r),i]]:[[l,Math.max(a[1]-n,e)],[r,Math.min(a[1]+n,i)]])}var e,r,i,o=oo(t),a=o.center,u=o.scale,s=o.translate,c=o.clipExtent,l=null;return o.scale=function(t){return arguments.length?(u(t),n()):u()},o.translate=function(t){return arguments.length?(s(t),n()):s()},o.center=function(t){return arguments.length?(a(t),n()):a()},o.clipExtent=function(t){return arguments.length?(null==t?l=e=r=i=null:(l=+t[0][0],e=+t[0][1],r=+t[1][0],i=+t[1][1]),n()):null==l?null:[[l,e],[r,i]]},n()}function yo(t){return Ky((Oy+t)/2)}function mo(t,n){function e(t,n){o>0?n<-Oy+Dy&&(n=-Oy+Dy):n>Oy-Dy&&(n=Oy-Dy);var e=o/Wy(yo(n),i);return[e*$y(i*t),o-e*By(i*t)]}var r=By(t),i=t===n?$y(t):Xy(r/By(n))/Xy(yo(n)/yo(t)),o=r*Wy(yo(t),i)/i;return i?(e.invert=function(t,n){var e=o-n,r=Gy(i)*Zy(t*t+e*e);return[Uy(t,zy(e))/i*Gy(e),2*qy(Wy(o/r,1/i))-Oy]},e):po}function go(t,n){return[t,n]}function _o(t,n){function e(t,n){var e=o-n,r=i*t;return[e*$y(r),o-e*By(r)]}var r=By(t),i=t===n?$y(t):(r-By(n))/(n-t),o=r/i+t;return zy(i)<Dy?go:(e.invert=function(t,n){var e=o-n;return[Uy(t,zy(e))/i*Gy(e),o-Gy(i)*Zy(t*t+e*e)]},e)}function bo(t,n){var e=By(n),r=By(t)*e;return[e*$y(t)/r,$y(n)/r]}function xo(t,n,e,r){return 1===t&&1===n&&0===e&&0===r?Ym:Qi({point:function(i,o){this.stream.point(i*t+e,o*n+r)}})}function wo(t,n){return[By(n)*$y(t),$y(n)]}function Mo(t,n){var e=By(n),r=1+By(t)*e;return[e*$y(t)/r,$y(n)/r]}function Eo(t,n){return[Xy(Ky((Oy+n)/2)),-t]}function So(t,n){return t.parent===n.parent?1:2}function Fo(t){return t.reduce(To,0)/t.length}function To(t,n){return t+n.x}function ko(t){return 1+t.reduce(Co,0)}function Co(t,n){return Math.max(t,n.y)}function No(t){for(var n;n=t.children;)t=n[0];return t}function jo(t){for(var n;n=t.children;)t=n[n.length-1];return t}function Ao(t){var n=0,e=t.children,r=e&&e.length;if(r)for(;--r>=0;)n+=e[r].value;else n=1;t.value=n}function Do(t,n){if(t===n)return t;var e=t.ancestors(),r=n.ancestors(),i=null;for(t=e.pop(),n=r.pop();t===n;)i=t,t=e.pop(),n=r.pop();return i}function Po(t,n){var e,r,i,o,a,u=new Ro(t),s=+t.value&&(u.value=t.value),c=[u];for(null==n&&(n=Vo);e=c.pop();)if(s&&(e.value=+e.data.value),(i=n(e.data))&&(a=i.length))for(e.children=new Array(a),o=a-1;o>=0;--o)c.push(r=e.children[o]=new Ro(i[o])),r.parent=e,r.depth=e.depth+1;return u.eachBefore(Io)}function Oo(){return Po(this).eachBefore(Lo)}function Vo(t){return t.children}function Lo(t){t.data=t.data.data}function Io(t){var n=0;do{t.height=n}while((t=t.parent)&&t.height<++n)}function Ro(t){this.data=t,this.depth=this.height=0,this.parent=null}function zo(t){for(var n,e,r=t.length;r;)e=Math.random()*r--|0,n=t[r],t[r]=t[e],t[e]=n;return t}function qo(t,n){var e,r;if(Yo(n,t))return[n];for(e=0;e<t.length;++e)if(Uo(n,t[e])&&Yo(Wo(t[e],n),t))return[t[e],n];for(e=0;e<t.length-1;++e)for(r=e+1;r<t.length;++r)if(Uo(Wo(t[e],t[r]),n)&&Uo(Wo(t[e],n),t[r])&&Uo(Wo(t[r],n),t[e])&&Yo($o(t[e],t[r],n),t))return[t[e],t[r],n];throw new Error}function Uo(t,n){var e=t.r-n.r,r=n.x-t.x,i=n.y-t.y;return e<0||e*e<r*r+i*i}function Bo(t,n){var e=t.r-n.r+1e-6,r=n.x-t.x,i=n.y-t.y;return e>0&&e*e>r*r+i*i}function Yo(t,n){for(var e=0;e<n.length;++e)if(!Bo(t,n[e]))return!1;return!0}function Ho(t){switch(t.length){case 1:return Xo(t[0]);case 2:return Wo(t[0],t[1]);case 3:return $o(t[0],t[1],t[2])}}function Xo(t){return{x:t.x,y:t.y,r:t.r}}function Wo(t,n){var e=t.x,r=t.y,i=t.r,o=n.x,a=n.y,u=n.r,s=o-e,c=a-r,l=u-i,f=Math.sqrt(s*s+c*c);return{x:(e+o+s/f*l)/2,y:(r+a+c/f*l)/2,r:(f+i+u)/2}}function $o(t,n,e){var r=t.x,i=t.y,o=t.r,a=n.x,u=n.y,s=n.r,c=e.x,l=e.y,f=e.r,h=r-a,d=r-c,p=i-u,v=i-l,y=s-o,m=f-o,g=r*r+i*i-o*o,_=g-a*a-u*u+s*s,b=g-c*c-l*l+f*f,x=d*p-h*v,w=(p*b-v*_)/(2*x)-r,M=(v*y-p*m)/x,E=(d*_-h*b)/(2*x)-i,S=(h*m-d*y)/x,F=M*M+S*S-1,T=2*(o+w*M+E*S),k=w*w+E*E-o*o,C=-(F?(T+Math.sqrt(T*T-4*F*k))/(2*F):k/T);return{x:r+w+M*C,y:i+E+S*C,r:C}}function Go(t,n,e){var r=t.x,i=t.y,o=n.r+e.r,a=t.r+e.r,u=n.x-r,s=n.y-i,c=u*u+s*s;if(c){var l=.5+((a*=a)-(o*=o))/(2*c),f=Math.sqrt(Math.max(0,2*o*(a+c)-(a-=c)*a-o*o))/(2*c);e.x=r+l*u+f*s,e.y=i+l*s-f*u}else e.x=r+a,e.y=i}function Zo(t,n){var e=n.x-t.x,r=n.y-t.y,i=t.r+n.r;return i*i-1e-6>e*e+r*r}function Ko(t){var n=t._,e=t.next._,r=n.r+e.r,i=(n.x*e.r+e.x*n.r)/r,o=(n.y*e.r+e.y*n.r)/r;return i*i+o*o}function Jo(t){this._=t,this.next=null,this.previous=null}function Qo(t){if(!(i=t.length))return 0;var n,e,r,i,o,a,u,s,c,l,f;if(n=t[0],n.x=0,n.y=0,!(i>1))return n.r;if(e=t[1],n.x=-e.r,e.x=n.r,e.y=0,!(i>2))return n.r+e.r;Go(e,n,r=t[2]),n=new Jo(n),e=new Jo(e),r=new Jo(r),n.next=r.previous=e,e.next=n.previous=r,r.next=e.previous=n;t:for(u=3;u<i;++u){Go(n._,e._,r=t[u]),r=new Jo(r),s=e.next,c=n.previous,l=e._.r,f=n._.r;do{if(l<=f){if(Zo(s._,r._)){e=s,n.next=e,e.previous=n,--u;continue t}l+=s._.r,s=s.next}else{if(Zo(c._,r._)){n=c,n.next=e,e.previous=n,--u;continue t}f+=c._.r,c=c.previous}}while(s!==c.next);for(r.previous=n,r.next=e,n.next=e.previous=e=r,o=Ko(n);(r=r.next)!==e;)(a=Ko(r))<o&&(n=r,o=a);e=n.next}for(n=[e._],r=e;(r=r.next)!==e;)n.push(r._);for(r=t_(n),u=0;u<i;++u)n=t[u],n.x-=r.x,n.y-=r.y;return r.r}function ta(t){return null==t?null:na(t)}function na(t){if("function"!=typeof t)throw new Error;return t}function ea(){return 0}function ra(t){return Math.sqrt(t.value)}function ia(t){return function(n){n.children||(n.r=Math.max(0,+t(n)||0))}}function oa(t,n){return function(e){if(r=e.children){var r,i,o,a=r.length,u=t(e)*n||0;if(u)for(i=0;i<a;++i)r[i].r+=u;if(o=Qo(r),u)for(i=0;i<a;++i)r[i].r-=u;e.r=o+u}}}function aa(t){return function(n){var e=n.parent;n.r*=t,e&&(n.x=e.x+t*n.x,n.y=e.y+t*n.y)}}function ua(t){return t.id}function sa(t){return t.parentId}function ca(t,n){return t.parent===n.parent?1:2}function la(t){var n=t.children;return n?n[0]:t.t}function fa(t){var n=t.children;return n?n[n.length-1]:t.t}function ha(t,n,e){var r=e/(n.i-t.i);n.c-=r,n.s+=e,t.c+=r,n.z+=e,n.m+=e}function da(t){for(var n,e=0,r=0,i=t.children,o=i.length;--o>=0;)n=i[o],n.z+=e,n.m+=e,e+=n.s+(r+=n.c)}function pa(t,n,e){return t.a.parent===n.parent?t.a:e}function va(t,n){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=n}function ya(t){for(var n,e,r,i,o,a=new va(t,0),u=[a];n=u.pop();)if(r=n._.children)for(n.children=new Array(o=r.length),i=o-1;i>=0;--i)u.push(e=n.children[i]=new va(r[i],i)),e.parent=n;return(a.parent=new va(null,0)).children=[a],a}function ma(t,n,e,r,i,o){for(var a,u,s,c,l,f,h,d,p,v,y,m=[],g=n.children,_=0,b=0,x=g.length,w=n.value;_<x;){s=i-e,c=o-r;do{l=g[b++].value}while(!l&&b<x);for(f=h=l,v=Math.max(c/s,s/c)/(w*t),y=l*l*v,p=Math.max(h/y,y/f);b<x;++b){if(l+=u=g[b].value,u<f&&(f=u),u>h&&(h=u),y=l*l*v,(d=Math.max(h/y,y/f))>p){l-=u;break}p=d}m.push(a={value:l,dice:s<c,children:g.slice(_,b)}),a.dice?o_(a,e,r,i,w?r+=c*l/w:o):h_(a,e,r,w?e+=s*l/w:i,o),w-=l,_=b}return m}function ga(t,n){return t[0]-n[0]||t[1]-n[1]}function _a(t){for(var n=t.length,e=[0,1],r=2,i=2;i<n;++i){for(;r>1&&x_(t[e[r-2]],t[e[r-1]],t[i])<=0;)--r;e[r++]=i}return e.slice(0,r)}function ba(t){this._size=t,this._call=this._error=null,this._tasks=[],this._data=[],this._waiting=this._active=this._ended=this._start=0}function xa(t){if(!t._start)try{wa(t)}catch(n){if(t._tasks[t._ended+t._active-1])Ea(t,n);else if(!t._data)throw n}}function wa(t){for(;t._start=t._waiting&&t._active<t._size;){var n=t._ended+t._active,e=t._tasks[n],r=e.length-1,i=e[r];e[r]=Ma(t,n),--t._waiting,++t._active,e=i.apply(null,e),t._tasks[n]&&(t._tasks[n]=e||F_)}}function Ma(t,n){return function(e,r){t._tasks[n]&&(--t._active,++t._ended,t._tasks[n]=null,null==t._error&&(null!=e?Ea(t,e):(t._data[n]=r,t._waiting?xa(t):Sa(t))))}}function Ea(t,n){var e,r=t._tasks.length;for(t._error=n,t._data=void 0,t._waiting=NaN;--r>=0;)if((e=t._tasks[r])&&(t._tasks[r]=null,e.abort))try{e.abort()}catch(n){}t._active=NaN,Sa(t)}function Sa(t){if(!t._active&&t._call){var n=t._data;t._data=void 0,t._call(t._error,n)}}function Fa(t){if(null==t)t=1/0;else if(!((t=+t)>=1))throw new Error("invalid concurrency");return new ba(t)}function Ta(t){return function(n,e){t(null==n?e:null)}}function ka(t){var n=t.responseType;return n&&"text"!==n?t.response:t.responseText}function Ca(t,n){return function(e){return t(e.responseText,n)}}function Na(t){function n(n){var o=n+"",a=e.get(o);if(!a){if(i!==X_)return i;e.set(o,a=r.push(n))}return t[(a-1)%t.length]}var e=Xe(),r=[],i=X_;return t=null==t?[]:H_.call(t),n.domain=function(t){if(!arguments.length)return r.slice();r=[],e=Xe();for(var i,o,a=-1,u=t.length;++a<u;)e.has(o=(i=t[a])+"")||e.set(o,r.push(i));return n},n.range=function(e){return arguments.length?(t=H_.call(e),n):t.slice()},n.unknown=function(t){return arguments.length?(i=t,n):i},n.copy=function(){return Na().domain(r).range(t).unknown(i)},n}function ja(){function t(){var t=i().length,r=a[1]<a[0],f=a[r-0],h=a[1-r];n=(h-f)/Math.max(1,t-s+2*c),u&&(n=Math.floor(n)),f+=(h-f-n*(t-s))*l,e=n*(1-s),u&&(f=Math.round(f),e=Math.round(e));var d=vl(t).map(function(t){return f+n*t});return o(r?d.reverse():d)}var n,e,r=Na().unknown(void 0),i=r.domain,o=r.range,a=[0,1],u=!1,s=0,c=0,l=.5;return delete r.unknown,r.domain=function(n){return arguments.length?(i(n),t()):i()},r.range=function(n){return arguments.length?(a=[+n[0],+n[1]],t()):a.slice()},r.rangeRound=function(n){return a=[+n[0],+n[1]],u=!0,t()},r.bandwidth=function(){return e},r.step=function(){return n},r.round=function(n){return arguments.length?(u=!!n,t()):u},r.padding=function(n){return arguments.length?(s=c=Math.max(0,Math.min(1,n)),t()):s},r.paddingInner=function(n){return arguments.length?(s=Math.max(0,Math.min(1,n)),t()):s},r.paddingOuter=function(n){return arguments.length?(c=Math.max(0,Math.min(1,n)),t()):c},r.align=function(n){return arguments.length?(l=Math.max(0,Math.min(1,n)),t()):l},r.copy=function(){return ja().domain(i()).range(a).round(u).paddingInner(s).paddingOuter(c).align(l)},t()}function Aa(t){var n=t.copy;return t.padding=t.paddingOuter,delete t.paddingInner,delete t.paddingOuter,t.copy=function(){return Aa(n())},t}function Da(){return Aa(ja().paddingInner(1))}function Pa(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:W_(n)}function Oa(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return t<=n?0:t>=e?1:r(t)}}}function Va(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return t<=0?n:t>=1?e:r(t)}}}function La(t,n,e,r){var i=t[0],o=t[1],a=n[0],u=n[1];return o<i?(i=e(o,i),a=r(u,a)):(i=e(i,o),a=r(a,u)),function(t){return a(i(t))}}function Ia(t,n,e,r){var i=Math.min(t.length,n.length)-1,o=new Array(i),a=new Array(i),u=-1;for(t[i]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++u<i;)o[u]=e(t[u],t[u+1]),a[u]=r(n[u],n[u+1]);return function(n){var e=nl(t,n,1,i)-1;return a[e](o[e](n))}}function Ra(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp())}function za(t,n){function e(){return i=Math.min(u.length,s.length)>2?Ia:La,o=a=null,r}function r(n){return(o||(o=i(u,s,l?Oa(t):t,c)))(+n)}var i,o,a,u=G_,s=G_,c=Bh,l=!1;return r.invert=function(t){return(a||(a=i(s,u,Pa,l?Va(n):n)))(+t)},r.domain=function(t){return arguments.length?(u=Y_.call(t,$_),e()):u.slice()},r.range=function(t){return arguments.length?(s=H_.call(t),e()):s.slice()},r.rangeRound=function(t){return s=H_.call(t),c=Yh,e()},r.clamp=function(t){return arguments.length?(l=!!t,e()):l},r.interpolate=function(t){return arguments.length?(c=t,e()):c},e()}function qa(t){var n=t.domain;return t.ticks=function(t){var e=n();return _l(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){return Z_(n(),t,e)},t.nice=function(e){null==e&&(e=10);var i,o=n(),a=0,u=o.length-1,s=o[a],c=o[u];return c<s&&(i=s,s=c,c=i,i=a,a=u,u=i),i=r(s,c,e),i>0?(s=Math.floor(s/i)*i,c=Math.ceil(c/i)*i,i=r(s,c,e)):i<0&&(s=Math.ceil(s*i)/i,c=Math.floor(c*i)/i,i=r(s,c,e)),i>0?(o[a]=Math.floor(s/i)*i,o[u]=Math.ceil(c/i)*i,n(o)):i<0&&(o[a]=Math.ceil(s*i)/i,o[u]=Math.floor(c*i)/i,n(o)),t},t}function Ua(){var t=za(Pa,Ih);return t.copy=function(){return Ra(t,Ua())},qa(t)}function Ba(){function t(t){return+t}var n=[0,1];return t.invert=t,t.domain=t.range=function(e){return arguments.length?(n=Y_.call(e,$_),t):n.slice()},t.copy=function(){return Ba().domain(n)},qa(t)}function Ya(t,n){return(n=Math.log(n/t))?function(e){return Math.log(e/t)/n}:W_(n)}function Ha(t,n){return t<0?function(e){return-Math.pow(-n,e)*Math.pow(-t,1-e)}:function(e){return Math.pow(n,e)*Math.pow(t,1-e)}}function Xa(t){return isFinite(t)?+("1e"+t):t<0?0:t}function Wa(t){return 10===t?Xa:t===Math.E?Math.exp:function(n){return Math.pow(t,n)}}function $a(t){return t===Math.E?Math.log:10===t&&Math.log10||2===t&&Math.log2||(t=Math.log(t),function(n){return Math.log(n)/t})}function Ga(t){return function(n){return-t(-n)}}function Za(){function n(){return o=$a(i),a=Wa(i),r()[0]<0&&(o=Ga(o),a=Ga(a)),e}var e=za(Ya,Ha).domain([1,10]),r=e.domain,i=10,o=$a(10),a=Wa(10);return e.base=function(t){return arguments.length?(i=+t,n()):i},e.domain=function(t){return arguments.length?(r(t),n()):r()},e.ticks=function(t){var n,e=r(),u=e[0],s=e[e.length-1];(n=s<u)&&(h=u,u=s,s=h);var c,l,f,h=o(u),d=o(s),p=null==t?10:+t,v=[];if(!(i%1)&&d-h<p){if(h=Math.round(h)-1,d=Math.round(d)+1,u>0){for(;h<d;++h)for(l=1,c=a(h);l<i;++l)if(!((f=c*l)<u)){if(f>s)break;v.push(f)}}else for(;h<d;++h)for(l=i-1,c=a(h);l>=1;--l)if(!((f=c*l)<u)){if(f>s)break;v.push(f)}}else v=_l(h,d,Math.min(d-h,p)).map(a);return n?v.reverse():v},e.tickFormat=function(n,r){if(null==r&&(r=10===i?".0e":","),"function"!=typeof r&&(r=t.format(r)),n===1/0)return r;null==n&&(n=10);var u=Math.max(1,i*n/e.ticks().length);return function(t){var n=t/a(Math.round(o(t)));return n*i<i-.5&&(n*=i),n<=u?r(t):""}},e.nice=function(){return r(K_(r(),{floor:function(t){return a(Math.floor(o(t)))},ceil:function(t){return a(Math.ceil(o(t)))}}))},e.copy=function(){return Ra(e,Za().base(i))},e}function Ka(t,n){return t<0?-Math.pow(-t,n):Math.pow(t,n)}function Ja(){function t(t,n){return(n=Ka(n,e)-(t=Ka(t,e)))?function(r){return(Ka(r,e)-t)/n}:W_(n)}function n(t,n){return n=Ka(n,e)-(t=Ka(t,e)),function(r){return Ka(t+n*r,1/e)}}var e=1,r=za(t,n),i=r.domain;return r.exponent=function(t){return arguments.length?(e=+t,i(i())):e},r.copy=function(){return Ra(r,Ja().exponent(e))},qa(r)}function Qa(){return Ja().exponent(.5)}function tu(){function t(){var t=0,o=Math.max(1,r.length);for(i=new Array(o-1);++t<o;)i[t-1]=wl(e,t/o);return n}function n(t){if(!isNaN(t=+t))return r[nl(i,t)]}var e=[],r=[],i=[];return n.invertExtent=function(t){var n=r.indexOf(t);return n<0?[NaN,NaN]:[n>0?i[n-1]:e[0],n<i.length?i[n]:e[e.length-1]]},n.domain=function(n){if(!arguments.length)return e.slice();e=[];for(var r,i=0,o=n.length;i<o;++i)null==(r=n[i])||isNaN(r=+r)||e.push(r);return e.sort(Jc),t()},n.range=function(n){return arguments.length?(r=H_.call(n),t()):r.slice()},n.quantiles=function(){return i.slice()},n.copy=function(){return tu().domain(e).range(r)},n}function nu(){function t(t){if(t<=t)return a[nl(o,t,0,i)]}function n(){var n=-1;for(o=new Array(i);++n<i;)o[n]=((n+1)*r-(n-i)*e)/(i+1);return t}var e=0,r=1,i=1,o=[.5],a=[0,1];return t.domain=function(t){return arguments.length?(e=+t[0],r=+t[1],n()):[e,r]},t.range=function(t){return arguments.length?(i=(a=H_.call(t)).length-1,n()):a.slice()},t.invertExtent=function(t){var n=a.indexOf(t);return n<0?[NaN,NaN]:n<1?[e,o[0]]:n>=i?[o[i-1],r]:[o[n-1],o[n]]},t.copy=function(){return nu().domain([e,r]).range(a)},qa(t)}function eu(){function t(t){if(t<=t)return e[nl(n,t,0,r)]}var n=[.5],e=[0,1],r=1;return t.domain=function(i){return arguments.length?(n=H_.call(i),r=Math.min(n.length,e.length-1),t):n.slice()},t.range=function(i){return arguments.length?(e=H_.call(i),r=Math.min(n.length,e.length-1),t):e.slice()},t.invertExtent=function(t){var r=e.indexOf(t);return[n[r-1],n[r]]},t.copy=function(){return eu().domain(n).range(e)},t}function ru(t,n,e,r){function i(n){return t(n=new Date(+n)),n}return i.floor=i,i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,o){var a=[];if(e=i.ceil(e),o=null==o?1:Math.floor(o),!(e<r&&o>0))return a;do{a.push(new Date(+e))}while(n(e,o),t(e),e<r);return a},i.filter=function(e){return ru(function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)},function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););})},e&&(i.count=function(n,r){return J_.setTime(+n),Q_.setTime(+r),t(J_),t(Q_),Math.floor(e(J_,Q_))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}function iu(t){return ru(function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+7*n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*eb)/rb})}function ou(t){return ru(function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+7*n)},function(t,n){return(n-t)/rb})}function au(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function uu(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function su(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}function cu(t){function n(t,n){return function(e){var r,i,o,a=[],u=-1,s=0,c=t.length;for(e instanceof Date||(e=new Date(+e));++u<c;)37===t.charCodeAt(u)&&(a.push(t.slice(s,u)),null!=(i=nx[r=t.charAt(++u)])?r=t.charAt(++u):i="e"===r?" ":"0",(o=n[r])&&(r=o(e,i)),a.push(r),s=u+1);return a.push(t.slice(s,u)),a.join("")}}function e(t,n){return function(e){var i=su(1900);if(r(i,t,e+="",0)!=e.length)return null;if("p"in i&&(i.H=i.H%12+12*i.p),"W"in i||"U"in i){"w"in i||(i.w="W"in i?1:0);var o="Z"in i?uu(su(i.y)).getUTCDay():n(su(i.y)).getDay();i.m=0,i.d="W"in i?(i.w+6)%7+7*i.W-(o+5)%7:i.w+7*i.U-(o+6)%7}return"Z"in i?(i.H+=i.Z/100|0,i.M+=i.Z%100,uu(i)):n(i)}}function r(t,n,e,r){for(var i,o,a=0,u=n.length,s=e.length;a<u;){if(r>=s)return-1;if(37===(i=n.charCodeAt(a++))){if(i=n.charAt(a++),!(o=U[i in nx?n.charAt(a++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}function i(t,n,e){var r=N.exec(n.slice(e));return r?(t.p=j[r[0].toLowerCase()],e+r[0].length):-1}function o(t,n,e){var r=P.exec(n.slice(e));return r?(t.w=O[r[0].toLowerCase()],e+r[0].length):-1}function a(t,n,e){var r=A.exec(n.slice(e));return r?(t.w=D[r[0].toLowerCase()],e+r[0].length):-1}function u(t,n,e){var r=I.exec(n.slice(e));return r?(t.m=R[r[0].toLowerCase()],e+r[0].length):-1}function s(t,n,e){var r=V.exec(n.slice(e));return r?(t.m=L[r[0].toLowerCase()],e+r[0].length):-1}function c(t,n,e){return r(t,w,n,e)}function l(t,n,e){return r(t,M,n,e)}function f(t,n,e){return r(t,E,n,e)}function h(t){return T[t.getDay()]}function d(t){return F[t.getDay()]}function p(t){return C[t.getMonth()]}function v(t){return k[t.getMonth()]}function y(t){return S[+(t.getHours()>=12)]}function m(t){return T[t.getUTCDay()]}function g(t){return F[t.getUTCDay()]}function _(t){return C[t.getUTCMonth()]}function b(t){return k[t.getUTCMonth()]}function x(t){return S[+(t.getUTCHours()>=12)]}var w=t.dateTime,M=t.date,E=t.time,S=t.periods,F=t.days,T=t.shortDays,k=t.months,C=t.shortMonths,N=hu(S),j=du(S),A=hu(F),D=du(F),P=hu(T),O=du(T),V=hu(k),L=du(k),I=hu(C),R=du(C),z={a:h,A:d,b:p,B:v,c:null,d:ku,e:ku,H:Cu,I:Nu,j:ju,L:Au,m:Du,M:Pu,p:y,S:Ou,U:Vu,w:Lu,W:Iu,x:null,X:null,y:Ru,Y:zu,Z:qu,"%":es},q={a:m,A:g,b:_,B:b,c:null,d:Uu,e:Uu,H:Bu,I:Yu,j:Hu,L:Xu,m:Wu,M:$u,p:x,S:Gu,U:Zu,w:Ku,W:Ju,x:null,X:null,y:Qu,Y:ts,Z:ns,"%":es},U={a:o,A:a,b:u,B:s,c:c,d:xu,e:xu,H:Mu,I:Mu,j:wu,L:Fu,m:bu,M:Eu,p:i,S:Su,U:vu,w:pu,W:yu,x:l,X:f,y:gu,Y:mu,Z:_u,"%":Tu};return z.x=n(M,z),z.X=n(E,z),z.c=n(w,z),q.x=n(M,q),q.X=n(E,q),q.c=n(w,q),{format:function(t){var e=n(t+="",z);return e.toString=function(){return t},e},parse:function(t){var n=e(t+="",au);return n.toString=function(){return t},n},utcFormat:function(t){var e=n(t+="",q);return e.toString=function(){return t},e},utcParse:function(t){var n=e(t,uu);return n.toString=function(){return t},n}}}function lu(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function fu(t){return t.replace(ix,"\\$&")}function hu(t){return new RegExp("^(?:"+t.map(fu).join("|")+")","i")}function du(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function pu(t,n,e){var r=ex.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function vu(t,n,e){var r=ex.exec(n.slice(e));return r?(t.U=+r[0],e+r[0].length):-1}function yu(t,n,e){var r=ex.exec(n.slice(e));return r?(t.W=+r[0],e+r[0].length):-1}function mu(t,n,e){var r=ex.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function gu(t,n,e){var r=ex.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function _u(t,n,e){var r=/^(Z)|([+-]\d\d)(?:\:?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function bu(t,n,e){var r=ex.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function xu(t,n,e){var r=ex.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function wu(t,n,e){var r=ex.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function Mu(t,n,e){var r=ex.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function Eu(t,n,e){var r=ex.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function Su(t,n,e){var r=ex.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function Fu(t,n,e){var r=ex.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function Tu(t,n,e){var r=rx.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function ku(t,n){return lu(t.getDate(),n,2)}function Cu(t,n){return lu(t.getHours(),n,2)}function Nu(t,n){return lu(t.getHours()%12||12,n,2)}function ju(t,n){return lu(1+lb.count(kb(t),t),n,3)}function Au(t,n){return lu(t.getMilliseconds(),n,3)}function Du(t,n){return lu(t.getMonth()+1,n,2)}function Pu(t,n){return lu(t.getMinutes(),n,2)}function Ou(t,n){return lu(t.getSeconds(),n,2)}function Vu(t,n){return lu(hb.count(kb(t),t),n,2)}function Lu(t){return t.getDay()}function Iu(t,n){return lu(db.count(kb(t),t),n,2)}function Ru(t,n){return lu(t.getFullYear()%100,n,2)}function zu(t,n){return lu(t.getFullYear()%1e4,n,4)}function qu(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+lu(n/60|0,"0",2)+lu(n%60,"0",2)}function Uu(t,n){return lu(t.getUTCDate(),n,2)}function Bu(t,n){return lu(t.getUTCHours(),n,2)}function Yu(t,n){return lu(t.getUTCHours()%12||12,n,2)}function Hu(t,n){return lu(1+Pb.count(Jb(t),t),n,3)}function Xu(t,n){return lu(t.getUTCMilliseconds(),n,3)}function Wu(t,n){return lu(t.getUTCMonth()+1,n,2)}function $u(t,n){return lu(t.getUTCMinutes(),n,2)}function Gu(t,n){return lu(t.getUTCSeconds(),n,2)}function Zu(t,n){return lu(Vb.count(Jb(t),t),n,2)}function Ku(t){return t.getUTCDay()}function Ju(t,n){return lu(Lb.count(Jb(t),t),n,2)}function Qu(t,n){return lu(t.getUTCFullYear()%100,n,2)}function ts(t,n){return lu(t.getUTCFullYear()%1e4,n,4)}function ns(){return"+0000"}function es(){return"%"}function rs(n){return Qb=cu(n),t.timeFormat=Qb.format,t.timeParse=Qb.parse,t.utcFormat=Qb.utcFormat,t.utcParse=Qb.utcParse,Qb}function is(t){return t.toISOString()}function os(t){var n=new Date(t);return isNaN(n)?null:n}function as(t){return new Date(t)}function us(t){return t instanceof Date?+t:+new Date(+t)}function ss(t,n,e,r,o,a,u,s,c){function l(i){return(u(i)<i?v:a(i)<i?y:o(i)<i?m:r(i)<i?g:n(i)<i?e(i)<i?_:b:t(i)<i?x:w)(i)}function f(n,e,r,o){if(null==n&&(n=10),"number"==typeof n){var a=Math.abs(r-e)/n,u=Qc(function(t){return t[2]}).right(M,a);u===M.length?(o=i(e/dx,r/dx,n),n=t):u?(u=M[a/M[u-1][2]<M[u][2]/a?u-1:u],o=u[1],n=u[0]):(o=i(e,r,n),n=s)}return null==o?n:n.every(o)}var h=za(Pa,Ih),d=h.invert,p=h.domain,v=c(".%L"),y=c(":%S"),m=c("%I:%M"),g=c("%I %p"),_=c("%a %d"),b=c("%b %d"),x=c("%B"),w=c("%Y"),M=[[u,1,ux],[u,5,5*ux],[u,15,15*ux],[u,30,30*ux],[a,1,sx],[a,5,5*sx],[a,15,15*sx],[a,30,30*sx],[o,1,cx],[o,3,3*cx],[o,6,6*cx],[o,12,12*cx],[r,1,lx],[r,2,2*lx],[e,1,fx],[n,1,hx],[n,3,3*hx],[t,1,dx]];return h.invert=function(t){return new Date(d(t))},h.domain=function(t){return arguments.length?p(Y_.call(t,us)):p().map(as)},h.ticks=function(t,n){var e,r=p(),i=r[0],o=r[r.length-1],a=o<i;return a&&(e=i,i=o,o=e),e=f(t,i,o,n),e=e?e.range(i,o+1):[],a?e.reverse():e},h.tickFormat=function(t,n){return null==n?l:c(n)},h.nice=function(t,n){var e=p();return(t=f(t,e[0],e[e.length-1],n))?p(K_(e,t)):h},h.copy=function(){return Ra(h,ss(t,n,e,r,o,a,u,s,c))},h}function cs(t){var n=t.length;return function(e){return t[Math.max(0,Math.min(n-1,Math.floor(e*n)))]}}function ls(t){function n(n){var o=(n-e)/(r-e);return t(i?Math.max(0,Math.min(1,o)):o)}var e=0,r=1,i=!1;return n.domain=function(t){return arguments.length?(e=+t[0],r=+t[1],n):[e,r]},n.clamp=function(t){return arguments.length?(i=!!t,n):i},n.interpolator=function(e){return arguments.length?(t=e,n):t},n.copy=function(){return ls(t).domain([e,r]).clamp(i)},qa(n)}function fs(t){return t>1?0:t<-1?Rx:Math.acos(t)}function hs(t){return t>=1?zx:t<=-1?-zx:Math.asin(t)}function ds(t){return t.innerRadius}function ps(t){return t.outerRadius}function vs(t){return t.startAngle}function ys(t){return t.endAngle}function ms(t){return t&&t.padAngle}function gs(t,n,e,r,i,o,a,u){var s=e-t,c=r-n,l=a-i,f=u-o,h=(l*(n-o)-f*(t-i))/(f*s-l*c);return[t+h*s,n+h*c]}function _s(t,n,e,r,i,o,a){var u=t-e,s=n-r,c=(a?o:-o)/Lx(u*u+s*s),l=c*s,f=-c*u,h=t+l,d=n+f,p=e+l,v=r+f,y=(h+p)/2,m=(d+v)/2,g=p-h,_=v-d,b=g*g+_*_,x=i-o,w=h*v-p*d,M=(_<0?-1:1)*Lx(Px(0,x*x*b-w*w)),E=(w*_-g*M)/b,S=(-w*g-_*M)/b,F=(w*_+g*M)/b,T=(-w*g+_*M)/b,k=E-y,C=S-m,N=F-y,j=T-m;return k*k+C*C>N*N+j*j&&(E=F,S=T),{cx:E,cy:S,x01:-l,y01:-f,x11:E*(i/x-1),y11:S*(i/x-1)}}function bs(t){this._context=t}function xs(t){return t[0]}function ws(t){return t[1]}function Ms(t){this._curve=t}function Es(t){function n(n){return new Ms(t(n))}return n._curve=t,n}function Ss(t){var n=t.curve;return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t.curve=function(t){return arguments.length?n(Es(t)):n()._curve},t}function Fs(t){return t.source}function Ts(t){return t.target}function ks(t){function n(){var n,u=Qx.call(arguments),s=e.apply(this,u),c=r.apply(this,u);if(a||(a=n=Re()),t(a,+i.apply(this,(u[0]=s,u)),+o.apply(this,u),+i.apply(this,(u[0]=c,u)),+o.apply(this,u)),n)return a=null,n+""||null}var e=Fs,r=Ts,i=xs,o=ws,a=null;return n.source=function(t){return arguments.length?(e=t,n):e},n.target=function(t){return arguments.length?(r=t,n):r},n.x=function(t){return arguments.length?(i="function"==typeof t?t:Nx(+t),n):i},n.y=function(t){return arguments.length?(o="function"==typeof t?t:Nx(+t),n):o},n.context=function(t){return arguments.length?(a=null==t?null:t,n):a},n}function Cs(t,n,e,r,i){t.moveTo(n,e),t.bezierCurveTo(n=(n+r)/2,e,n,i,r,i)}function Ns(t,n,e,r,i){t.moveTo(n,e),t.bezierCurveTo(n,e=(e+i)/2,r,e,r,i)}function js(t,n,e,r,i){var o=Jx(n,e),a=Jx(n,e=(e+i)/2),u=Jx(r,e),s=Jx(r,i);t.moveTo(o[0],o[1]),t.bezierCurveTo(a[0],a[1],u[0],u[1],s[0],s[1])}function As(){return ks(Cs)}function Ds(){return ks(Ns)}function Ps(){var t=ks(js);return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t}function Os(t,n,e){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+n)/6,(t._y0+4*t._y1+e)/6)}function Vs(t){this._context=t}function Ls(t){this._context=t}function Is(t){this._context=t}function Rs(t,n){this._basis=new Vs(t),this._beta=n}function zs(t,n,e){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-n),t._y2+t._k*(t._y1-e),t._x2,t._y2)}function qs(t,n){this._context=t,this._k=(1-n)/6}function Us(t,n){this._context=t,this._k=(1-n)/6}function Bs(t,n){this._context=t,this._k=(1-n)/6}function Ys(t,n,e){var r=t._x1,i=t._y1,o=t._x2,a=t._y2;if(t._l01_a>Ix){var u=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,s=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*u-t._x0*t._l12_2a+t._x2*t._l01_2a)/s,i=(i*u-t._y0*t._l12_2a+t._y2*t._l01_2a)/s}if(t._l23_a>Ix){var c=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,l=3*t._l23_a*(t._l23_a+t._l12_a);o=(o*c+t._x1*t._l23_2a-n*t._l12_2a)/l,a=(a*c+t._y1*t._l23_2a-e*t._l12_2a)/l}t._context.bezierCurveTo(r,i,o,a,t._x2,t._y2)}function Hs(t,n){this._context=t,this._alpha=n}function Xs(t,n){this._context=t,this._alpha=n}function Ws(t,n){this._context=t,this._alpha=n}function $s(t){this._context=t}function Gs(t){return t<0?-1:1}function Zs(t,n,e){var r=t._x1-t._x0,i=n-t._x1,o=(t._y1-t._y0)/(r||i<0&&-0),a=(e-t._y1)/(i||r<0&&-0),u=(o*i+a*r)/(r+i);return(Gs(o)+Gs(a))*Math.min(Math.abs(o),Math.abs(a),.5*Math.abs(u))||0}function Ks(t,n){var e=t._x1-t._x0;return e?(3*(t._y1-t._y0)/e-n)/2:n}function Js(t,n,e){var r=t._x0,i=t._y0,o=t._x1,a=t._y1,u=(o-r)/3;t._context.bezierCurveTo(r+u,i+u*n,o-u,a-u*e,o,a)}function Qs(t){this._context=t}function tc(t){this._context=new nc(t)}function nc(t){this._context=t}function ec(t){return new Qs(t)}function rc(t){return new tc(t)}function ic(t){this._context=t}function oc(t){var n,e,r=t.length-1,i=new Array(r),o=new Array(r),a=new Array(r);for(i[0]=0,o[0]=2,a[0]=t[0]+2*t[1],n=1;n<r-1;++n)i[n]=1,o[n]=4,a[n]=4*t[n]+2*t[n+1];for(i[r-1]=2,o[r-1]=7,a[r-1]=8*t[r-1]+t[r],n=1;n<r;++n)e=i[n]/o[n-1],o[n]-=e,a[n]-=e*a[n-1];for(i[r-1]=a[r-1]/o[r-1],n=r-2;n>=0;--n)i[n]=(a[n]-i[n+1])/o[n];for(o[r-1]=(t[r]+i[r-1])/2,n=0;n<r-1;++n)o[n]=2*t[n+1]-i[n+1];return[i,o]}function ac(t,n){this._context=t,this._t=n}function uc(t){return new ac(t,0)}function sc(t){return new ac(t,1)}function cc(t,n){return t[n]}function lc(t){for(var n,e=0,r=-1,i=t.length;++r<i;)(n=+t[r][1])&&(e+=n);return e}function fc(t){return t[0]}function hc(t){return t[1]}function dc(){this._=null}function pc(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function vc(t,n){var e=n,r=n.R,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function yc(t,n){var e=n,r=n.L,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function mc(t){for(;t.L;)t=t.L;return t}function gc(t,n,e,r){var i=[null,null],o=Gw.push(i)-1;return i.left=t,i.right=n,e&&bc(i,t,n,e),r&&bc(i,n,t,r),Ww[t.index].halfedges.push(o),Ww[n.index].halfedges.push(o),i}function _c(t,n,e){var r=[n,e];return r.left=t,r}function bc(t,n,e,r){t[0]||t[1]?t.left===e?t[1]=r:t[0]=r:(t[0]=r,t.left=n,t.right=e)}function xc(t,n,e,r,i){var o,a=t[0],u=t[1],s=a[0],c=a[1],l=u[0],f=u[1],h=0,d=1,p=l-s,v=f-c;if(o=n-s,p||!(o>0)){if(o/=p,p<0){if(o<h)return;o<d&&(d=o)}else if(p>0){if(o>d)return;o>h&&(h=o)}if(o=r-s,p||!(o<0)){if(o/=p,p<0){if(o>d)return;o>h&&(h=o)}else if(p>0){if(o<h)return;o<d&&(d=o)}if(o=e-c,v||!(o>0)){if(o/=v,v<0){if(o<h)return;o<d&&(d=o)}else if(v>0){if(o>d)return;o>h&&(h=o)}if(o=i-c,v||!(o<0)){if(o/=v,v<0){if(o>d)return;o>h&&(h=o)}else if(v>0){if(o<h)return;o<d&&(d=o)}return!(h>0||d<1)||(h>0&&(t[0]=[s+h*p,c+h*v]),d<1&&(t[1]=[s+d*p,c+d*v]),!0)}}}}}function wc(t,n,e,r,i){var o=t[1];if(o)return!0;var a,u,s=t[0],c=t.left,l=t.right,f=c[0],h=c[1],d=l[0],p=l[1],v=(f+d)/2,y=(h+p)/2;if(p===h){if(v<n||v>=r)return;if(f>d){if(s){if(s[1]>=i)return}else s=[v,e];o=[v,i]}else{if(s){if(s[1]<e)return}else s=[v,i];o=[v,e]}}else if(a=(f-d)/(p-h),u=y-a*v,a<-1||a>1)if(f>d){if(s){if(s[1]>=i)return}else s=[(e-u)/a,e];o=[(i-u)/a,i]}else{if(s){if(s[1]<e)return}else s=[(i-u)/a,i];o=[(e-u)/a,e]}else if(h<p){if(s){if(s[0]>=r)return}else s=[n,a*n+u];o=[r,a*r+u]}else{if(s){if(s[0]<n)return}else s=[r,a*r+u];o=[n,a*n+u]}return t[0]=s,t[1]=o,!0}function Mc(t,n,e,r){for(var i,o=Gw.length;o--;)wc(i=Gw[o],t,n,e,r)&&xc(i,t,n,e,r)&&(Math.abs(i[0][0]-i[1][0])>Jw||Math.abs(i[0][1]-i[1][1])>Jw)||delete Gw[o]}function Ec(t){return Ww[t.index]={site:t,halfedges:[]}}function Sc(t,n){var e=t.site,r=n.left,i=n.right;return e===i&&(i=r,r=e),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(e===r?(r=n[1],i=n[0]):(r=n[0],i=n[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function Fc(t,n){return n[+(n.left!==t.site)]}function Tc(t,n){return n[+(n.left===t.site)]}function kc(){for(var t,n,e,r,i=0,o=Ww.length;i<o;++i)if((t=Ww[i])&&(r=(n=t.halfedges).length)){var a=new Array(r),u=new Array(r);for(e=0;e<r;++e)a[e]=e,u[e]=Sc(t,Gw[n[e]]);for(a.sort(function(t,n){return u[n]-u[t]}),e=0;e<r;++e)u[e]=n[a[e]];for(e=0;e<r;++e)n[e]=u[e]}}function Cc(t,n,e,r){var i,o,a,u,s,c,l,f,h,d,p,v,y=Ww.length,m=!0;for(i=0;i<y;++i)if(o=Ww[i]){for(a=o.site,s=o.halfedges,u=s.length;u--;)Gw[s[u]]||s.splice(u,1);for(u=0,c=s.length;u<c;)d=Tc(o,Gw[s[u]]),p=d[0],v=d[1],l=Fc(o,Gw[s[++u%c]]),f=l[0],h=l[1],(Math.abs(p-f)>Jw||Math.abs(v-h)>Jw)&&(s.splice(u,0,Gw.push(_c(a,d,Math.abs(p-t)<Jw&&r-v>Jw?[t,Math.abs(f-t)<Jw?h:r]:Math.abs(v-r)<Jw&&e-p>Jw?[Math.abs(h-r)<Jw?f:e,r]:Math.abs(p-e)<Jw&&v-n>Jw?[e,Math.abs(f-e)<Jw?h:n]:Math.abs(v-n)<Jw&&p-t>Jw?[Math.abs(h-n)<Jw?f:t,n]:null))-1),++c);c&&(m=!1)}if(m){var g,_,b,x=1/0;for(i=0,m=null;i<y;++i)(o=Ww[i])&&(a=o.site,g=a[0]-t,_=a[1]-n,(b=g*g+_*_)<x&&(x=b,m=o));if(m){var w=[t,n],M=[t,r],E=[e,r],S=[e,n];m.halfedges.push(Gw.push(_c(a=m.site,w,M))-1,Gw.push(_c(a,M,E))-1,Gw.push(_c(a,E,S))-1,Gw.push(_c(a,S,w))-1)}}for(i=0;i<y;++i)(o=Ww[i])&&(o.halfedges.length||delete Ww[i])}function Nc(){pc(this),this.x=this.y=this.arc=this.site=this.cy=null}function jc(t){var n=t.P,e=t.N;if(n&&e){var r=n.site,i=t.site,o=e.site;if(r!==o){var a=i[0],u=i[1],s=r[0]-a,c=r[1]-u,l=o[0]-a,f=o[1]-u,h=2*(s*f-c*l);if(!(h>=-Qw)){var d=s*s+c*c,p=l*l+f*f,v=(f*d-c*p)/h,y=(s*p-l*d)/h,m=Zw.pop()||new Nc;m.arc=t,m.site=i,m.x=v+a,m.y=(m.cy=y+u)+Math.sqrt(v*v+y*y),t.circle=m;for(var g=null,_=$w._;_;)if(m.y<_.y||m.y===_.y&&m.x<=_.x){if(!_.L){g=_.P;break}_=_.L}else{if(!_.R){g=_;break}_=_.R}$w.insert(g,m),g||(Hw=m)}}}}function Ac(t){var n=t.circle;n&&(n.P||(Hw=n.N),$w.remove(n),Zw.push(n),pc(n),t.circle=null)}function Dc(){pc(this),this.edge=this.site=this.circle=null}function Pc(t){var n=Kw.pop()||new Dc;return n.site=t,n}function Oc(t){Ac(t),Xw.remove(t),Kw.push(t),pc(t)}function Vc(t){var n=t.circle,e=n.x,r=n.cy,i=[e,r],o=t.P,a=t.N,u=[t];Oc(t);for(var s=o;s.circle&&Math.abs(e-s.circle.x)<Jw&&Math.abs(r-s.circle.cy)<Jw;)o=s.P,u.unshift(s),Oc(s),s=o;u.unshift(s),Ac(s);for(var c=a;c.circle&&Math.abs(e-c.circle.x)<Jw&&Math.abs(r-c.circle.cy)<Jw;)a=c.N,u.push(c),Oc(c),c=a;u.push(c),Ac(c);var l,f=u.length;for(l=1;l<f;++l)c=u[l],s=u[l-1],bc(c.edge,s.site,c.site,i);s=u[0],c=u[f-1],c.edge=gc(s.site,c.site,null,i),jc(s),jc(c)}function Lc(t){for(var n,e,r,i,o=t[0],a=t[1],u=Xw._;u;)if((r=Ic(u,a)-o)>Jw)u=u.L;else{if(!((i=o-Rc(u,a))>Jw)){r>-Jw?(n=u.P,e=u):i>-Jw?(n=u,e=u.N):n=e=u;break}if(!u.R){n=u;break}u=u.R}Ec(t);var s=Pc(t);if(Xw.insert(n,s),n||e){if(n===e)return Ac(n),e=Pc(n.site),Xw.insert(s,e),s.edge=e.edge=gc(n.site,s.site),jc(n),void jc(e);if(!e)return void(s.edge=gc(n.site,s.site));Ac(n),Ac(e);var c=n.site,l=c[0],f=c[1],h=t[0]-l,d=t[1]-f,p=e.site,v=p[0]-l,y=p[1]-f,m=2*(h*y-d*v),g=h*h+d*d,_=v*v+y*y,b=[(y*g-d*_)/m+l,(h*_-v*g)/m+f];bc(e.edge,c,p,b),s.edge=gc(c,t,null,b),e.edge=gc(t,p,null,b),jc(n),jc(e)}}function Ic(t,n){var e=t.site,r=e[0],i=e[1],o=i-n;if(!o)return r;var a=t.P;if(!a)return-1/0;e=a.site;var u=e[0],s=e[1],c=s-n;if(!c)return u;var l=u-r,f=1/o-1/c,h=l/c;return f?(-h+Math.sqrt(h*h-2*f*(l*l/(-2*c)-s+c/2+i-o/2)))/f+r:(r+u)/2}function Rc(t,n){var e=t.N;if(e)return Ic(e,n);var r=t.site;return r[1]===n?r[0]:1/0}function zc(t,n,e){return(t[0]-e[0])*(n[1]-t[1])-(t[0]-n[0])*(e[1]-t[1])}function qc(t,n){return n[1]-t[1]||n[0]-t[0]}function Uc(t,n){var e,r,i,o=t.sort(qc).pop();for(Gw=[],Ww=new Array(t.length),Xw=new dc,$w=new dc;;)if(i=Hw,o&&(!i||o[1]<i.y||o[1]===i.y&&o[0]<i.x))o[0]===e&&o[1]===r||(Lc(o),e=o[0],r=o[1]),o=t.pop();else{if(!i)break;Vc(i.arc)}if(kc(),n){var a=+n[0][0],u=+n[0][1],s=+n[1][0],c=+n[1][1];Mc(a,u,s,c),Cc(a,u,s,c)}this.edges=Gw,this.cells=Ww,Xw=$w=Gw=Ww=null}function Bc(t,n,e){this.target=t,this.type=n,this.transform=e}function Yc(t,n,e){this.k=t,this.x=n,this.y=e}function Hc(t){return t.__zoom||eM}function Xc(){t.event.stopImmediatePropagation()}function Wc(){return!t.event.button}function $c(){var t,n,e=this;return e instanceof SVGElement?(e=e.ownerSVGElement||e,t=e.width.baseVal.value,n=e.height.baseVal.value):(t=e.clientWidth,n=e.clientHeight),[[0,0],[t,n]]}function Gc(){return this.__zoom||eM}function Zc(){return-t.event.deltaY*(t.event.deltaMode?120:1)/500}function Kc(){return"ontouchstart"in this}var Jc=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN},Qc=function(t){return 1===t.length&&(t=n(t)),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)<0?r=o+1:i=o}return r},right:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)>0?i=o:r=o+1}return r}}},tl=Qc(Jc),nl=tl.right,el=tl.left,rl=function(t,n){null==n&&(n=e);for(var r=0,i=t.length-1,o=t[0],a=new Array(i<0?0:i);r<i;)a[r]=n(o,o=t[++r]);return a},il=function(t,n,r){var i,o,a,u,s=t.length,c=n.length,l=new Array(s*c);for(null==r&&(r=e),i=a=0;i<s;++i)for(u=t[i],o=0;o<c;++o,++a)l[a]=r(u,n[o]);return l},ol=function(t,n){return n<t?-1:n>t?1:n>=t?0:NaN},al=function(t){return null===t?NaN:+t},ul=function(t,n){var e,r,i=t.length,o=0,a=-1,u=0,s=0;if(null==n)for(;++a<i;)isNaN(e=al(t[a]))||(r=e-u,u+=r/++o,s+=r*(e-u));else for(;++a<i;)isNaN(e=al(n(t[a],a,t)))||(r=e-u,u+=r/++o,s+=r*(e-u));if(o>1)return s/(o-1)},sl=function(t,n){var e=ul(t,n);return e?Math.sqrt(e):e},cl=function(t,n){var e,r,i,o=t.length,a=-1;if(null==n){for(;++a<o;)if(null!=(e=t[a])&&e>=e)for(r=i=e;++a<o;)null!=(e=t[a])&&(r>e&&(r=e),i<e&&(i=e))}else for(;++a<o;)if(null!=(e=n(t[a],a,t))&&e>=e)for(r=i=e;++a<o;)null!=(e=n(t[a],a,t))&&(r>e&&(r=e),i<e&&(i=e));return[r,i]},ll=Array.prototype,fl=ll.slice,hl=ll.map,dl=function(t){return function(){return t}},pl=function(t){return t},vl=function(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):i<3?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),o=new Array(i);++r<i;)o[r]=t+r*e;return o},yl=Math.sqrt(50),ml=Math.sqrt(10),gl=Math.sqrt(2),_l=function(t,n,e){var i,o,a,u=n<t,s=-1;if(u&&(i=t,t=n,n=i),0===(a=r(t,n,e))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),n=Math.floor(n/a),o=new Array(i=Math.ceil(n-t+1));++s<i;)o[s]=(t+s)*a;else for(t=Math.floor(t*a),n=Math.ceil(n*a),o=new Array(i=Math.ceil(t-n+1));++s<i;)o[s]=(t-s)/a;return u&&o.reverse(),o},bl=function(t){return Math.ceil(Math.log(t.length)/Math.LN2)+1},xl=function(){function t(t){var o,a,u=t.length,s=new Array(u);for(o=0;o<u;++o)s[o]=n(t[o],o,t);var c=e(s),l=c[0],f=c[1],h=r(s,l,f);Array.isArray(h)||(h=i(l,f,h),h=vl(Math.ceil(l/h)*h,Math.floor(f/h)*h,h));for(var d=h.length;h[0]<=l;)h.shift(),--d;for(;h[d-1]>f;)h.pop(),--d;var p,v=new Array(d+1);for(o=0;o<=d;++o)p=v[o]=[],p.x0=o>0?h[o-1]:l,p.x1=o<d?h[o]:f;for(o=0;o<u;++o)a=s[o],l<=a&&a<=f&&v[nl(h,a,0,d)].push(t[o]);return v}var n=pl,e=cl,r=bl;return t.value=function(e){return arguments.length?(n="function"==typeof e?e:dl(e),t):n},t.domain=function(n){return arguments.length?(e="function"==typeof n?n:dl([n[0],n[1]]),t):e},t.thresholds=function(n){return arguments.length?(r="function"==typeof n?n:dl(Array.isArray(n)?fl.call(n):n),t):r},t},wl=function(t,n,e){if(null==e&&(e=al),r=t.length){if((n=+n)<=0||r<2)return+e(t[0],0,t);if(n>=1)return+e(t[r-1],r-1,t);var r,i=(r-1)*n,o=Math.floor(i),a=+e(t[o],o,t);return a+(+e(t[o+1],o+1,t)-a)*(i-o)}},Ml=function(t,n,e){return t=hl.call(t,al).sort(Jc),Math.ceil((e-n)/(2*(wl(t,.75)-wl(t,.25))*Math.pow(t.length,-1/3)))},El=function(t,n,e){return Math.ceil((e-n)/(3.5*sl(t)*Math.pow(t.length,-1/3)))},Sl=function(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&e>r&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&e>r&&(r=e);return r},Fl=function(t,n){var e,r=t.length,i=r,o=-1,a=0;if(null==n)for(;++o<r;)isNaN(e=al(t[o]))?--i:a+=e;else for(;++o<r;)isNaN(e=al(n(t[o],o,t)))?--i:a+=e;if(i)return a/i},Tl=function(t,n){var e,r=t.length,i=-1,o=[];if(null==n)for(;++i<r;)isNaN(e=al(t[i]))||o.push(e);else for(;++i<r;)isNaN(e=al(n(t[i],i,t)))||o.push(e);return wl(o.sort(Jc),.5)},kl=function(t){for(var n,e,r,i=t.length,o=-1,a=0;++o<i;)a+=t[o].length;for(e=new Array(a);--i>=0;)for(r=t[i],n=r.length;--n>=0;)e[--a]=r[n];return e},Cl=function(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&r>e&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&r>e&&(r=e);return r},Nl=function(t,n){for(var e=n.length,r=new Array(e);e--;)r[e]=t[n[e]];return r},jl=function(t,n){if(e=t.length){var e,r,i=0,o=0,a=t[o];for(null==n&&(n=Jc);++i<e;)(n(r=t[i],a)<0||0!==n(a,a))&&(a=r,o=i);return 0===n(a,a)?o:void 0}},Al=function(t,n,e){for(var r,i,o=(null==e?t.length:e)-(n=null==n?0:+n);o;)i=Math.random()*o--|0,r=t[o+n],t[o+n]=t[i+n],t[i+n]=r;return t},Dl=function(t,n){var e,r=t.length,i=-1,o=0;if(null==n)for(;++i<r;)(e=+t[i])&&(o+=e);else for(;++i<r;)(e=+n(t[i],i,t))&&(o+=e);return o},Pl=function(t){if(!(i=t.length))return[];for(var n=-1,e=Cl(t,o),r=new Array(e);++n<e;)for(var i,a=-1,u=r[n]=new Array(i);++a<i;)u[a]=t[a][n];return r},Ol=function(){return Pl(arguments)},Vl=Array.prototype.slice,Ll=function(t){return t},Il=1,Rl=2,zl=3,ql=4,Ul=1e-6,Bl={value:function(){}};g.prototype=m.prototype={constructor:g,on:function(t,n){var e,r=this._,i=_(t+"",r),o=-1,a=i.length;{if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++o<a;)if(e=(t=i[o]).type)r[e]=x(r[e],t.name,n);else if(null==n)for(e in r)r[e]=x(r[e],t.name,null);return this}for(;++o<a;)if((e=(t=i[o]).type)&&(e=b(r[e],t.name)))return e}},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new g(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(r=this._[t],o=0,e=r.length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};var Yl="http://www.w3.org/1999/xhtml",Hl={svg:"http://www.w3.org/2000/svg",xhtml:Yl,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},Xl=function(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),Hl.hasOwnProperty(n)?{space:Hl[n],local:t}:t},Wl=function(t){var n=Xl(t);return(n.local?M:w)(n)},$l=0;S.prototype=E.prototype={constructor:S,get:function(t){for(var n=this._;!(n in t);)if(!(t=t.parentNode))return;return t[n]},set:function(t,n){return t[this._]=n},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};var Gl=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var Zl=document.documentElement;if(!Zl.matches){var Kl=Zl.webkitMatchesSelector||Zl.msMatchesSelector||Zl.mozMatchesSelector||Zl.oMatchesSelector;Gl=function(t){return function(){return Kl.call(this,t)}}}}var Jl=Gl,Ql={};if(t.event=null,"undefined"!=typeof document){"onmouseenter"in document.documentElement||(Ql={mouseenter:"mouseover",mouseleave:"mouseout"})}var tf=function(t,n,e){var r,i,o=k(t+""),a=o.length;{if(!(arguments.length<2)){for(u=n?N:C,null==e&&(e=!1),r=0;r<a;++r)this.each(u(o[r],n,e));return this}var u=this.node().__on;if(u)for(var s,c=0,l=u.length;c<l;++c)for(r=0,s=u[c];r<a;++r)if((i=o[r]).type===s.type&&i.name===s.name)return s.value}},nf=function(){for(var n,e=t.event;n=e.sourceEvent;)e=n;return e},ef=function(t,n){var e=t.ownerSVGElement||t;if(e.createSVGPoint){var r=e.createSVGPoint();return r.x=n.clientX,r.y=n.clientY,r=r.matrixTransform(t.getScreenCTM().inverse()),[r.x,r.y]}var i=t.getBoundingClientRect();return[n.clientX-i.left-t.clientLeft,n.clientY-i.top-t.clientTop]},rf=function(t){var n=nf();return n.changedTouches&&(n=n.changedTouches[0]),ef(t,n)},of=function(t){return null==t?A:function(){return this.querySelector(t)}},af=function(t){"function"!=typeof t&&(t=of(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a,u=n[i],s=u.length,c=r[i]=new Array(s),l=0;l<s;++l)(o=u[l])&&(a=t.call(o,o.__data__,l,u))&&("__data__"in o&&(a.__data__=o.__data__),c[l]=a);return new gt(r,this._parents)},uf=function(t){return null==t?D:function(){return this.querySelectorAll(t)}},sf=function(t){"function"!=typeof t&&(t=uf(t));for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var a,u=n[o],s=u.length,c=0;c<s;++c)(a=u[c])&&(r.push(t.call(a,a.__data__,c,u)),i.push(a));return new gt(r,i)},cf=function(t){"function"!=typeof t&&(t=Jl(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,s=r[i]=[],c=0;c<u;++c)(o=a[c])&&t.call(o,o.__data__,c,a)&&s.push(o);return new gt(r,this._parents)},lf=function(t){return new Array(t.length)},ff=function(){return new gt(this._enter||this._groups.map(lf),this._parents)};P.prototype={constructor:P,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var hf=function(t){return function(){return t}},df="$",pf=function(t,n){if(!t)return d=new Array(this.size()),c=-1,this.each(function(t){d[++c]=t}),d;var e=n?V:O,r=this._parents,i=this._groups;"function"!=typeof t&&(t=hf(t));for(var o=i.length,a=new Array(o),u=new Array(o),s=new Array(o),c=0;c<o;++c){var l=r[c],f=i[c],h=f.length,d=t.call(l,l&&l.__data__,c,r),p=d.length,v=u[c]=new Array(p),y=a[c]=new Array(p);e(l,f,v,y,s[c]=new Array(h),d,n);for(var m,g,_=0,b=0;_<p;++_)if(m=v[_]){for(_>=b&&(b=_+1);!(g=y[b])&&++b<p;);m._next=g||null}}return a=new gt(a,r),a._enter=u,a._exit=s,a},vf=function(){return new gt(this._exit||this._groups.map(lf),this._parents)},yf=function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var s,c=n[u],l=e[u],f=c.length,h=a[u]=new Array(f),d=0;d<f;++d)(s=c[d]||l[d])&&(h[d]=s);for(;u<r;++u)a[u]=n[u];return new gt(a,this._parents)},mf=function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&a!==r.nextSibling&&a.parentNode.insertBefore(r,a),a=r);return this},gf=function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=L);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var a,u=e[o],s=u.length,c=i[o]=new Array(s),l=0;l<s;++l)(a=u[l])&&(c[l]=a);c.sort(n)}return new gt(i,this._parents).order()},_f=function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},bf=function(){var t=new Array(this.size()),n=-1;return this.each(function(){t[++n]=this}),t},xf=function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},wf=function(){var t=0;return this.each(function(){++t}),t},Mf=function(){return!this.node()},Ef=function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],a=0,u=o.length;a<u;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},Sf=function(t,n){var e=Xl(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?R:I:"function"==typeof n?e.local?B:U:e.local?q:z)(e,n))},Ff=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView},Tf=function(t,n,e){return arguments.length>1?this.each((null==n?Y:"function"==typeof n?X:H)(t,n,null==e?"":e)):W(this.node(),t)},kf=function(t,n){return arguments.length>1?this.each((null==n?$:"function"==typeof n?Z:G)(t,n)):this.node()[t]};Q.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var Cf=function(t,n){var e=K(t+"");if(arguments.length<2){for(var r=J(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?it:n?et:rt)(e,n))},Nf=function(t){return arguments.length?this.each(null==t?ot:("function"==typeof t?ut:at)(t)):this.node().textContent},jf=function(t){return arguments.length?this.each(null==t?st:("function"==typeof t?lt:ct)(t)):this.node().innerHTML},Af=function(){return this.each(ft)},Df=function(){return this.each(ht)},Pf=function(t){var n="function"==typeof t?t:Wl(t);return this.select(function(){return this.appendChild(n.apply(this,arguments))})},Of=function(t,n){var e="function"==typeof t?t:Wl(t),r=null==n?dt:"function"==typeof n?n:of(n);return this.select(function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)})},Vf=function(){return this.each(pt)},Lf=function(t){return arguments.length?this.property("__data__",t):this.node().__data__},If=function(t,n){return this.each(("function"==typeof n?mt:yt)(t,n))},Rf=[null];gt.prototype=_t.prototype={constructor:gt,select:af,selectAll:sf,filter:cf,data:pf,enter:ff,exit:vf,merge:yf,order:mf,sort:gf,call:_f,nodes:bf,node:xf,size:wf,empty:Mf,each:Ef,attr:Sf,style:Tf,property:kf,classed:Cf,text:Nf,html:jf,raise:Af,lower:Df,append:Pf,insert:Of,remove:Vf,datum:Lf,on:tf,dispatch:If};var zf=function(t){return"string"==typeof t?new gt([[document.querySelector(t)]],[document.documentElement]):new gt([[t]],Rf)},qf=function(t){return"string"==typeof t?new gt([document.querySelectorAll(t)],[document.documentElement]):new gt([null==t?[]:t],Rf)},Uf=function(t,n,e){arguments.length<3&&(e=n,n=nf().changedTouches);for(var r,i=0,o=n?n.length:0;i<o;++i)if((r=n[i]).identifier===e)return ef(t,r);return null},Bf=function(t,n){null==n&&(n=nf().touches);for(var e=0,r=n?n.length:0,i=new Array(r);e<r;++e)i[e]=ef(t,n[e]);return i},Yf=function(){t.event.preventDefault(),t.event.stopImmediatePropagation()},Hf=function(t){var n=t.document.documentElement,e=zf(t).on("dragstart.drag",Yf,!0);"onselectstart"in n?e.on("selectstart.drag",Yf,!0):(n.__noselect=n.style.MozUserSelect,n.style.MozUserSelect="none")},Xf=function(t){return function(){return t}};wt.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var Wf=function(){function n(t){t.on("mousedown.drag",e).filter(Ft).on("touchstart.drag",o).on("touchmove.drag",a).on("touchend.drag touchcancel.drag",u).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function e(){if(!h&&d.apply(this,arguments)){var n=s("mouse",p.apply(this,arguments),rf,this,arguments);n&&(zf(t.event.view).on("mousemove.drag",r,!0).on("mouseup.drag",i,!0),Hf(t.event.view),bt(),f=!1,c=t.event.clientX,l=t.event.clientY,n("start"))}}function r(){if(Yf(),!f){var n=t.event.clientX-c,e=t.event.clientY-l;f=n*n+e*e>b}y.mouse("drag")}function i(){zf(t.event.view).on("mousemove.drag mouseup.drag",null),xt(t.event.view,f),Yf(),y.mouse("end")}function o(){if(d.apply(this,arguments)){var n,e,r=t.event.changedTouches,i=p.apply(this,arguments),o=r.length;for(n=0;n<o;++n)(e=s(r[n].identifier,i,Uf,this,arguments))&&(bt(),e("start"))}}function a(){var n,e,r=t.event.changedTouches,i=r.length;for(n=0;n<i;++n)(e=y[r[n].identifier])&&(Yf(),e("drag"))}function u(){var n,e,r=t.event.changedTouches,i=r.length;for(h&&clearTimeout(h),h=setTimeout(function(){h=null},500),n=0;n<i;++n)(e=y[r[n].identifier])&&(bt(),e("end"))}function s(e,r,i,o,a){var u,s,c,l=i(r,e),f=g.copy();if(j(new wt(n,"beforestart",u,e,_,l[0],l[1],0,0,f),function(){return null!=(t.event.subject=u=v.apply(o,a))&&(s=u.x-l[0]||0,c=u.y-l[1]||0,!0)}))return function t(h){var d,p=l;switch(h){case"start":y[e]=t,d=_++;break;case"end":delete y[e],--_;case"drag":l=i(r,e),d=_}j(new wt(n,h,u,e,d,l[0]+s,l[1]+c,l[0]-p[0],l[1]-p[1],f),f.apply,f,[h,o,a])}}var c,l,f,h,d=Mt,p=Et,v=St,y={},g=m("start","drag","end"),_=0,b=0;return n.filter=function(t){return arguments.length?(d="function"==typeof t?t:Xf(!!t),n):d},n.container=function(t){return arguments.length?(p="function"==typeof t?t:Xf(t),n):p},n.subject=function(t){return arguments.length?(v="function"==typeof t?t:Xf(t),n):v},n.on=function(){var t=g.on.apply(g,arguments);return t===g?n:t},n.clickDistance=function(t){return arguments.length?(b=(t=+t)*t,n):Math.sqrt(b)},n},$f=function(t,n,e){t.prototype=n.prototype=e,e.constructor=t},Gf="\\s*([+-]?\\d+)\\s*",Zf="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Kf="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Jf=/^#([0-9a-f]{3})$/,Qf=/^#([0-9a-f]{6})$/,th=new RegExp("^rgb\\("+[Gf,Gf,Gf]+"\\)$"),nh=new RegExp("^rgb\\("+[Kf,Kf,Kf]+"\\)$"),eh=new RegExp("^rgba\\("+[Gf,Gf,Gf,Zf]+"\\)$"),rh=new RegExp("^rgba\\("+[Kf,Kf,Kf,Zf]+"\\)$"),ih=new RegExp("^hsl\\("+[Zf,Kf,Kf]+"\\)$"),oh=new RegExp("^hsla\\("+[Zf,Kf,Kf,Zf]+"\\)$"),ah={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};$f(kt,Ct,{displayable:function(){return this.rgb().displayable()},toString:function(){return this.rgb()+""}}),$f(Pt,Dt,Tt(kt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Pt(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Pt(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},toString:function(){var t=this.opacity;return t=isNaN(t)?1:Math.max(0,Math.min(1,t)),(1===t?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),$f(It,Lt,Tt(kt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new It(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new It(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new Pt(Rt(t>=240?t-240:t+120,i,r),Rt(t,i,r),Rt(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var uh=Math.PI/180,sh=180/Math.PI,ch=.95047,lh=1,fh=1.08883,hh=4/29,dh=6/29,ph=3*dh*dh,vh=dh*dh*dh;$f(Ut,qt,Tt(kt,{brighter:function(t){return new Ut(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new Ut(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return t=lh*Yt(t),n=ch*Yt(n),e=fh*Yt(e),new Pt(Ht(3.2404542*n-1.5371385*t-.4985314*e),Ht(-.969266*n+1.8760108*t+.041556*e),Ht(.0556434*n-.2040259*t+1.0572252*e),this.opacity)}})),$f(Gt,$t,Tt(kt,{brighter:function(t){return new Gt(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new Gt(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return zt(this).rgb()}}));var yh=-.14861,mh=1.78277,gh=-.29227,_h=-.90649,bh=1.97294,xh=bh*_h,wh=bh*mh,Mh=mh*gh-_h*yh;$f(Jt,Kt,Tt(kt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Jt(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Jt(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*uh,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new Pt(255*(n+e*(yh*r+mh*i)),255*(n+e*(gh*r+_h*i)),255*(n+e*(bh*r)),this.opacity)}}));var Eh,Sh,Fh,Th,kh,Ch,Nh=function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],o=t[r+1],a=r>0?t[r-1]:2*i-o,u=r<n-1?t[r+2]:2*o-i;return Qt((e-r/n)*n,a,i,o,u)}},jh=function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],o=t[r%n],a=t[(r+1)%n],u=t[(r+2)%n];return Qt((e-r/n)*n,i,o,a,u)}},Ah=function(t){return function(){return t}},Dh=function t(n){function e(t,n){var e=r((t=Dt(t)).r,(n=Dt(n)).r),i=r(t.g,n.g),o=r(t.b,n.b),a=on(t.opacity,n.opacity);return function(n){return t.r=e(n),t.g=i(n),t.b=o(n),t.opacity=a(n),t+""}}var r=rn(n);return e.gamma=t,e}(1),Ph=an(Nh),Oh=an(jh),Vh=function(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(r),a=new Array(r);for(e=0;e<i;++e)o[e]=Bh(t[e],n[e]);for(;e<r;++e)a[e]=n[e];return function(t){for(e=0;e<i;++e)a[e]=o[e](t);return a}},Lh=function(t,n){var e=new Date;return t=+t,n-=t,function(r){return e.setTime(t+n*r),e}},Ih=function(t,n){return t=+t,n-=t,function(e){return t+n*e}},Rh=function(t,n){var e,r={},i={};null!==t&&"object"===(void 0===t?"undefined":a(t))||(t={}),null!==n&&"object"===(void 0===n?"undefined":a(n))||(n={});for(e in n)e in t?r[e]=Bh(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}},zh=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,qh=new RegExp(zh.source,"g"),Uh=function(t,n){var e,r,i,o=zh.lastIndex=qh.lastIndex=0,a=-1,u=[],s=[];for(t+="",n+="";(e=zh.exec(t))&&(r=qh.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),u[a]?u[a]+=i:u[++a]=i),(e=e[0])===(r=r[0])?u[a]?u[a]+=r:u[++a]=r:(u[++a]=null,s.push({i:a,x:Ih(e,r)})),o=qh.lastIndex;return o<n.length&&(i=n.slice(o),u[a]?u[a]+=i:u[++a]=i),u.length<2?s[0]?sn(s[0].x):un(n):(n=s.length,function(t){for(var e,r=0;r<n;++r)u[(e=s[r]).i]=e.x(t);return u.join("")})},Bh=function(t,n){var e,r=void 0===n?"undefined":a(n);return null==n||"boolean"===r?Ah(n):("number"===r?Ih:"string"===r?(e=Ct(n))?(n=e,Dh):Uh:n instanceof Ct?Dh:n instanceof Date?Lh:Array.isArray(n)?Vh:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?Rh:Ih)(t,n)},Yh=function(t,n){return t=+t,n-=t,function(e){return Math.round(t+n*e)}},Hh=180/Math.PI,Xh={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},Wh=function(t,n,e,r,i,o){var a,u,s;return(a=Math.sqrt(t*t+n*n))&&(t/=a,n/=a),(s=t*e+n*r)&&(e-=t*s,r-=n*s),(u=Math.sqrt(e*e+r*r))&&(e/=u,r/=u,s/=u),t*r<n*e&&(t=-t,n=-n,s=-s,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*Hh,skewX:Math.atan(s)*Hh,scaleX:a,scaleY:u}},$h=fn(cn,"px, ","px)","deg)"),Gh=fn(ln,", ",")",")"),Zh=Math.SQRT2,Kh=function(t,n){var e,r,i=t[0],o=t[1],a=t[2],u=n[0],s=n[1],c=n[2],l=u-i,f=s-o,h=l*l+f*f;if(h<1e-12)r=Math.log(c/a)/Zh,e=function(t){return[i+t*l,o+t*f,a*Math.exp(Zh*t*r)]};else{var d=Math.sqrt(h),p=(c*c-a*a+4*h)/(2*a*2*d),v=(c*c-a*a-4*h)/(2*c*2*d),y=Math.log(Math.sqrt(p*p+1)-p),m=Math.log(Math.sqrt(v*v+1)-v);r=(m-y)/Zh,e=function(t){var n=t*r,e=hn(y),u=a/(2*d)*(e*pn(Zh*n+y)-dn(y));return[i+u*l,o+u*f,a*e/hn(Zh*n+y)]}}return e.duration=1e3*r,e},Jh=vn(en),Qh=vn(on),td=mn(en),nd=mn(on),ed=gn(en),rd=gn(on),id=function(t,n){for(var e=new Array(n),r=0;r<n;++r)e[r]=t(r/(n-1));return e},od=0,ad=0,ud=0,sd=1e3,cd=0,ld=0,fd=0,hd="object"===("undefined"==typeof performance?"undefined":a(performance))&&performance.now?performance:Date,dd="object"===("undefined"==typeof window?"undefined":a(window))&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};xn.prototype=wn.prototype={constructor:xn,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?_n():+e)+(null==n?0:+n),this._next||Ch===this||(Ch?Ch._next=this:kh=this,Ch=this),this._call=t,this._time=e,Tn()},stop:function(){this._call&&(this._call=null,this._time=1/0,Tn())}};var pd=function(t,n,e){var r=new xn;return n=null==n?0:+n,r.restart(function(e){r.stop(),t(e+n)},n,e),r},vd=function(t,n,e){var r=new xn,i=n;return null==n?(r.restart(t,n,e),r):(n=+n,e=null==e?_n():+e,r.restart(function o(a){a+=i,r.restart(o,i+=n,e),t(a)},n,e),r)},yd=m("start","end","interrupt"),md=[],gd=0,_d=1,bd=2,xd=3,wd=4,Md=5,Ed=6,Sd=function(t,n,e,r,i,o){var a=t.__transition;if(a){if(e in a)return}else t.__transition={};jn(t,e,{name:n,index:r,group:i,on:yd,tween:md,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:gd})},Fd=function(t,n){var e,r,i,o=t.__transition,a=!0;if(o){n=null==n?null:n+"";for(i in o)(e=o[i]).name===n?(r=e.state>bd&&e.state<Md,e.state=Ed,e.timer.stop(),r&&e.on.call("interrupt",t,t.__data__,e.index,e.group),delete o[i]):a=!1;a&&delete t.__transition}},Td=function(t){return this.each(function(){Fd(this,t)})},kd=function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=Nn(this.node(),e).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?An:Dn)(e,t,n))},Cd=function(t,n){var e;return("number"==typeof n?Ih:n instanceof Ct?Dh:(e=Ct(n))?(n=e,Dh):Uh)(t,n)},Nd=function(t,n){var e=Xl(t),r="transform"===e?Gh:Cd;return this.attrTween(t,"function"==typeof n?(e.local?zn:Rn)(e,r,Pn(this,"attr."+t,n)):null==n?(e.local?Vn:On)(e):(e.local?In:Ln)(e,r,n+""))},jd=function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=Xl(t);return this.tween(e,(r.local?qn:Un)(r,n))},Ad=function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Bn:Yn)(n,t)):Nn(this.node(),n).delay},Dd=function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Hn:Xn)(n,t)):Nn(this.node(),n).duration},Pd=function(t){var n=this._id;return arguments.length?this.each(Wn(n,t)):Nn(this.node(),n).ease},Od=function(t){"function"!=typeof t&&(t=Jl(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,s=r[i]=[],c=0;c<u;++c)(o=a[c])&&t.call(o,o.__data__,c,a)&&s.push(o);return new ie(r,this._parents,this._name,this._id)},Vd=function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var s,c=n[u],l=e[u],f=c.length,h=a[u]=new Array(f),d=0;d<f;++d)(s=c[d]||l[d])&&(h[d]=s);for(;u<r;++u)a[u]=n[u];return new ie(a,this._parents,this._name,this._id)},Ld=function(t,n){var e=this._id;return arguments.length<2?Nn(this.node(),e).on.on(t):this.each(Gn(e,t,n))},Id=function(){return this.on("end.remove",Zn(this._id))},Rd=function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=of(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var u,s,c=r[a],l=c.length,f=o[a]=new Array(l),h=0;h<l;++h)(u=c[h])&&(s=t.call(u,u.__data__,h,c))&&("__data__"in u&&(s.__data__=u.__data__),f[h]=s,Sd(f[h],n,e,h,f,Nn(u,e)));return new ie(o,this._parents,n,e)},zd=function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=uf(t));for(var r=this._groups,i=r.length,o=[],a=[],u=0;u<i;++u)for(var s,c=r[u],l=c.length,f=0;f<l;++f)if(s=c[f]){for(var h,d=t.call(s,s.__data__,f,c),p=Nn(s,e),v=0,y=d.length;v<y;++v)(h=d[v])&&Sd(h,n,e,v,d,p);o.push(d),a.push(s)}return new ie(o,a,n,e)},qd=_t.prototype.constructor,Ud=function(){return new qd(this._groups,this._parents)},Bd=function(t,n,e){var r="transform"==(t+="")?$h:Cd;return null==n?this.styleTween(t,Kn(t,r)).on("end.style."+t,Jn(t)):this.styleTween(t,"function"==typeof n?te(t,r,Pn(this,"style."+t,n)):Qn(t,r,n+""),e)},Yd=function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,ne(t,n,null==e?"":e))},Hd=function(t){return this.tween("text","function"==typeof t?re(Pn(this,"text",t)):ee(null==t?"":t+""))},Xd=function(){for(var t=this._name,n=this._id,e=ae(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],s=u.length,c=0;c<s;++c)if(a=u[c]){var l=Nn(a,n);Sd(a,t,e,c,u,{time:l.time+l.delay+l.duration,delay:0,duration:l.duration,ease:l.ease})}return new ie(r,this._parents,t,e)},Wd=0,$d=_t.prototype;ie.prototype=oe.prototype={constructor:ie,select:Rd,selectAll:zd,filter:Od,merge:Vd,selection:Ud,transition:Xd,call:$d.call,nodes:$d.nodes,node:$d.node,size:$d.size,empty:$d.empty,each:$d.each,on:Ld,attr:Nd,attrTween:jd,style:Bd,styleTween:Yd,text:Hd,remove:Id,tween:kd,delay:Ad,duration:Dd,ease:Pd};var Gd=function t(n){function e(t){return Math.pow(t,n)}return n=+n,e.exponent=t,e}(3),Zd=function t(n){function e(t){return 1-Math.pow(1-t,n)}return n=+n,e.exponent=t,e}(3),Kd=function t(n){function e(t){return((t*=2)<=1?Math.pow(t,n):2-Math.pow(2-t,n))/2}return n=+n,e.exponent=t,e}(3),Jd=Math.PI,Qd=Jd/2,tp=4/11,np=6/11,ep=8/11,rp=.75,ip=9/11,op=10/11,ap=.9375,up=21/22,sp=63/64,cp=1/tp/tp,lp=function t(n){function e(t){return t*t*((n+1)*t-n)}return n=+n,e.overshoot=t,e}(1.70158),fp=function t(n){function e(t){return--t*t*((n+1)*t+n)+1}return n=+n,e.overshoot=t,e}(1.70158),hp=function t(n){function e(t){return((t*=2)<1?t*t*((n+1)*t-n):(t-=2)*t*((n+1)*t+n)+2)/2}return n=+n,e.overshoot=t,e}(1.70158),dp=2*Math.PI,pp=function t(n,e){function r(t){return n*Math.pow(2,10*--t)*Math.sin((i-t)/e)}var i=Math.asin(1/(n=Math.max(1,n)))*(e/=dp);return r.amplitude=function(n){return t(n,e*dp)},r.period=function(e){return t(n,e)},r}(1,.3),vp=function t(n,e){function r(t){return 1-n*Math.pow(2,-10*(t=+t))*Math.sin((t+i)/e)}var i=Math.asin(1/(n=Math.max(1,n)))*(e/=dp);return r.amplitude=function(n){return t(n,e*dp)},r.period=function(e){return t(n,e)},r}(1,.3),yp=function t(n,e){function r(t){return((t=2*t-1)<0?n*Math.pow(2,10*t)*Math.sin((i-t)/e):2-n*Math.pow(2,-10*t)*Math.sin((i+t)/e))/2}var i=Math.asin(1/(n=Math.max(1,n)))*(e/=dp);return r.amplitude=function(n){return t(n,e*dp)},r.period=function(e){return t(n,e)},r}(1,.3),mp={time:null,delay:0,duration:250,ease:de},gp=function(t){var n,e;t instanceof ie?(n=t._id,t=t._name):(n=ae(),(e=mp).time=_n(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],s=u.length,c=0;c<s;++c)(a=u[c])&&Sd(a,t,n,c,u,e||Fe(a,n));return new ie(r,this._parents,t,n)};_t.prototype.interrupt=Td,_t.prototype.transition=gp;var _p=[null],bp=function(t,n){var e,r,i=t.__transition;if(i){n=null==n?null:n+"";for(r in i)if((e=i[r]).state>_d&&e.name===n)return new ie([[t]],_p,n,+r)}return null},xp=function(t){return function(){return t}},wp=function(t,n,e){this.target=t,this.type=n,this.selection=e},Mp=function(){t.event.preventDefault(),t.event.stopImmediatePropagation()},Ep={name:"drag"},Sp={name:"space"},Fp={name:"handle"},Tp={name:"center"},kp={name:"x",handles:["e","w"].map(ke),input:function(t,n){return t&&[[t[0],n[0][1]],[t[1],n[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},Cp={name:"y",handles:["n","s"].map(ke),input:function(t,n){return t&&[[n[0][0],t[0]],[n[1][0],t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},Np={name:"xy",handles:["n","e","s","w","nw","ne","se","sw"].map(ke),input:function(t){return t},output:function(t){return t}},jp={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},Ap={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},Dp={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},Pp={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},Op={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1},Vp=function(){return Ve(Np)},Lp=Math.cos,Ip=Math.sin,Rp=Math.PI,zp=Rp/2,qp=2*Rp,Up=Math.max,Bp=function(){function t(t){var o,a,u,s,c,l,f=t.length,h=[],d=vl(f),p=[],v=[],y=v.groups=new Array(f),m=new Array(f*f);for(o=0,c=-1;++c<f;){for(a=0,l=-1;++l<f;)a+=t[c][l];h.push(a),p.push(vl(f)),o+=a}for(e&&d.sort(function(t,n){return e(h[t],h[n])}),r&&p.forEach(function(n,e){n.sort(function(n,i){return r(t[e][n],t[e][i])})}),o=Up(0,qp-n*f)/o,s=o?n:qp/f,a=0,c=-1;++c<f;){for(u=a,l=-1;++l<f;){var g=d[c],_=p[g][l],b=t[g][_],x=a,w=a+=b*o;m[_*f+g]={index:g,subindex:_,startAngle:x,endAngle:w,value:b}}y[g]={index:g,startAngle:u,endAngle:a,value:h[g]},a+=s}for(c=-1;++c<f;)for(l=c-1;++l<f;){var M=m[l*f+c],E=m[c*f+l];(M.value||E.value)&&v.push(M.value<E.value?{source:E,target:M}:{source:M,target:E})}return i?v.sort(i):v}var n=0,e=null,r=null,i=null;return t.padAngle=function(e){return arguments.length?(n=Up(0,e),t):n},t.sortGroups=function(n){return arguments.length?(e=n,t):e},t.sortSubgroups=function(n){return arguments.length?(r=n,t):r},t.sortChords=function(n){return arguments.length?(null==n?i=null:(i=Le(n))._=n,t):i&&i._},t},Yp=Array.prototype.slice,Hp=function(t){return function(){return t}},Xp=Math.PI,Wp=2*Xp,$p=Wp-1e-6;Ie.prototype=Re.prototype={constructor:Ie,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,o){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var o=this._x1,a=this._y1,u=e-t,s=r-n,c=o-t,l=a-n,f=c*c+l*l;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(f>1e-6)if(Math.abs(l*u-s*c)>1e-6&&i){var h=e-o,d=r-a,p=u*u+s*s,v=h*h+d*d,y=Math.sqrt(p),m=Math.sqrt(f),g=i*Math.tan((Xp-Math.acos((p+f-v)/(2*y*m)))/2),_=g/m,b=g/y;Math.abs(_-1)>1e-6&&(this._+="L"+(t+_*c)+","+(n+_*l)),this._+="A"+i+","+i+",0,0,"+ +(l*h>c*d)+","+(this._x1=t+b*u)+","+(this._y1=n+b*s)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,r,i,o){t=+t,n=+n,e=+e;var a=e*Math.cos(r),u=e*Math.sin(r),s=t+a,c=n+u,l=1^o,f=o?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+s+","+c:(Math.abs(this._x1-s)>1e-6||Math.abs(this._y1-c)>1e-6)&&(this._+="L"+s+","+c),e&&(f<0&&(f=f%Wp+Wp),f>$p?this._+="A"+e+","+e+",0,1,"+l+","+(t-a)+","+(n-u)+"A"+e+","+e+",0,1,"+l+","+(this._x1=s)+","+(this._y1=c):f>1e-6&&(this._+="A"+e+","+e+",0,"+ +(f>=Xp)+","+l+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};var Gp=function(){function t(){var t,u=Yp.call(arguments),s=n.apply(this,u),c=e.apply(this,u),l=+r.apply(this,(u[0]=s,u)),f=i.apply(this,u)-zp,h=o.apply(this,u)-zp,d=l*Lp(f),p=l*Ip(f),v=+r.apply(this,(u[0]=c,u)),y=i.apply(this,u)-zp,m=o.apply(this,u)-zp;if(a||(a=t=Re()),a.moveTo(d,p),a.arc(0,0,l,f,h),f===y&&h===m||(a.quadraticCurveTo(0,0,v*Lp(y),v*Ip(y)),a.arc(0,0,v,y,m)),a.quadraticCurveTo(0,0,d,p),a.closePath(),t)return a=null,t+""||null}var n=ze,e=qe,r=Ue,i=Be,o=Ye,a=null;return t.radius=function(n){return arguments.length?(r="function"==typeof n?n:Hp(+n),t):r},t.startAngle=function(n){return arguments.length?(i="function"==typeof n?n:Hp(+n),t):i},t.endAngle=function(n){return arguments.length?(o="function"==typeof n?n:Hp(+n),t):o},t.source=function(e){return arguments.length?(n=e,t):n},t.target=function(n){return arguments.length?(e=n,t):e},t.context=function(n){return arguments.length?(a=null==n?null:n,t):a},t};He.prototype=Xe.prototype={constructor:He,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,n){return this["$"+t]=n,this},remove:function(t){var n="$"+t;return n in this&&delete this[n]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)"$"===n[0]&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)"$"===n[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var n in this)"$"===n[0]&&t(this[n],n.slice(1),this)}};var Zp=function(){function t(n,i,a,u){if(i>=o.length)return null!=e&&n.sort(e),null!=r?r(n):n;for(var s,c,l,f=-1,h=n.length,d=o[i++],p=Xe(),v=a();++f<h;)(l=p.get(s=d(c=n[f])+""))?l.push(c):p.set(s,[c]);return p.each(function(n,e){u(v,e,t(n,i,a,u))}),v}function n(t,e){if(++e>o.length)return t;var i,u=a[e-1];return null!=r&&e>=o.length?i=t.entries():(i=[],t.each(function(t,r){i.push({key:r,values:n(t,e)})})),null!=u?i.sort(function(t,n){return u(t.key,n.key)}):i}var e,r,i,o=[],a=[];return i={object:function(n){return t(n,0,We,$e)},map:function(n){return t(n,0,Ge,Ze)},entries:function(e){return n(t(e,0,Ge,Ze),0)},key:function(t){return o.push(t),i},sortKeys:function(t){return a[o.length-1]=t,i},sortValues:function(t){return e=t,i},rollup:function(t){return r=t,i}}},Kp=Xe.prototype;Ke.prototype=Je.prototype={constructor:Ke,has:Kp.has,add:function(t){return t+="",this["$"+t]=t,this},remove:Kp.remove,clear:Kp.clear,values:Kp.keys,size:Kp.size,empty:Kp.empty,each:Kp.each};var Jp=function(t){var n=[];for(var e in t)n.push(e);return n},Qp=function(t){var n=[];for(var e in t)n.push(t[e]);return n},tv=function(t){var n=[];for(var e in t)n.push({key:e,value:t[e]});return n},nv=function(t){function n(t,n){var r,i,o=e(t,function(t,e){if(r)return r(t,e-1);i=t,r=n?tr(t,n):Qe(t)});return o.columns=i,o}function e(t,n){function e(){if(l>=c)return a;if(i)return i=!1,o;var n,e=l;if(34===t.charCodeAt(e)){for(var r=e;r++<c;)if(34===t.charCodeAt(r)){if(34!==t.charCodeAt(r+1))break;++r}return l=r+2,n=t.charCodeAt(r+1),13===n?(i=!0,10===t.charCodeAt(r+2)&&++l):10===n&&(i=!0),t.slice(e+1,r).replace(/""/g,'"')}for(;l<c;){var u=1;if(10===(n=t.charCodeAt(l++)))i=!0;else if(13===n)i=!0,10===t.charCodeAt(l)&&(++l,++u);else if(n!==s)continue;return t.slice(e,l-u)}return t.slice(e)}for(var r,i,o={},a={},u=[],c=t.length,l=0,f=0;(r=e())!==a;){for(var h=[];r!==o&&r!==a;)h.push(r),r=e();n&&null==(h=n(h,f++))||u.push(h)}return u}function r(n,e){return null==e&&(e=nr(n)),[e.map(a).join(t)].concat(n.map(function(n){return e.map(function(t){return a(n[t])}).join(t)})).join("\n")}function i(t){return t.map(o).join("\n")}function o(n){return n.map(a).join(t)}function a(t){return null==t?"":u.test(t+="")?'"'+t.replace(/\"/g,'""')+'"':t}var u=new RegExp('["'+t+"\n\r]"),s=t.charCodeAt(0);return{parse:n,parseRows:e,format:r,formatRows:i}},ev=nv(","),rv=ev.parse,iv=ev.parseRows,ov=ev.format,av=ev.formatRows,uv=nv("\t"),sv=uv.parse,cv=uv.parseRows,lv=uv.format,fv=uv.formatRows,hv=function(t,n){function e(){var e,i,o=r.length,a=0,u=0;for(e=0;e<o;++e)i=r[e],a+=i.x,u+=i.y;for(a=a/o-t,u=u/o-n,e=0;e<o;++e)i=r[e],i.x-=a,i.y-=u}var r;return null==t&&(t=0),null==n&&(n=0),e.initialize=function(t){r=t},e.x=function(n){return arguments.length?(t=+n,e):t},e.y=function(t){return arguments.length?(n=+t,e):n},e},dv=function(t){return function(){return t}},pv=function(){return 1e-6*(Math.random()-.5)},vv=function(t){var n=+this._x.call(null,t),e=+this._y.call(null,t);return er(this.cover(n,e),n,e,t)},yv=function(t,n){if(isNaN(t=+t)||isNaN(n=+n))return this;var e=this._x0,r=this._y0,i=this._x1,o=this._y1;if(isNaN(e))i=(e=Math.floor(t))+1,o=(r=Math.floor(n))+1;else{if(!(e>t||t>i||r>n||n>o))return this;var a,u,s=i-e,c=this._root;switch(u=(n<(r+o)/2)<<1|t<(e+i)/2){case 0:do{a=new Array(4),a[u]=c,c=a}while(s*=2,i=e+s,o=r+s,t>i||n>o);break;case 1:do{a=new Array(4),a[u]=c,c=a}while(s*=2,e=i-s,o=r+s,e>t||n>o);break;case 2:do{a=new Array(4),a[u]=c,c=a}while(s*=2,i=e+s,r=o-s,t>i||r>n);break;case 3:do{a=new Array(4),a[u]=c,c=a}while(s*=2,e=i-s,r=o-s,e>t||r>n)}this._root&&this._root.length&&(this._root=c)}return this._x0=e,this._y0=r,this._x1=i,this._y1=o,this},mv=function(){var t=[];return this.visit(function(n){if(!n.length)do{t.push(n.data)}while(n=n.next)}),t},gv=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},_v=function(t,n,e,r,i){this.node=t,this.x0=n,this.y0=e,this.x1=r,this.y1=i},bv=function(t,n,e){var r,i,o,a,u,s,c,l=this._x0,f=this._y0,h=this._x1,d=this._y1,p=[],v=this._root;for(v&&p.push(new _v(v,l,f,h,d)),null==e?e=1/0:(l=t-e,f=n-e,h=t+e,d=n+e,e*=e);s=p.pop();)if(!(!(v=s.node)||(i=s.x0)>h||(o=s.y0)>d||(a=s.x1)<l||(u=s.y1)<f))if(v.length){var y=(i+a)/2,m=(o+u)/2;p.push(new _v(v[3],y,m,a,u),new _v(v[2],i,m,y,u),new _v(v[1],y,o,a,m),new _v(v[0],i,o,y,m)),(c=(n>=m)<<1|t>=y)&&(s=p[p.length-1],p[p.length-1]=p[p.length-1-c],p[p.length-1-c]=s)}else{var g=t-+this._x.call(null,v.data),_=n-+this._y.call(null,v.data),b=g*g+_*_;if(b<e){var x=Math.sqrt(e=b);l=t-x,f=n-x,h=t+x,d=n+x,r=v.data}}return r},xv=function(t){if(isNaN(o=+this._x.call(null,t))||isNaN(a=+this._y.call(null,t)))return this;var n,e,r,i,o,a,u,s,c,l,f,h,d=this._root,p=this._x0,v=this._y0,y=this._x1,m=this._y1;if(!d)return this;if(d.length)for(;;){if((c=o>=(u=(p+y)/2))?p=u:y=u,(l=a>=(s=(v+m)/2))?v=s:m=s,n=d,!(d=d[f=l<<1|c]))return this;if(!d.length)break;(n[f+1&3]||n[f+2&3]||n[f+3&3])&&(e=n,h=f)}for(;d.data!==t;)if(r=d,!(d=d.next))return this;return(i=d.next)&&delete d.next,r?(i?r.next=i:delete r.next,this):n?(i?n[f]=i:delete n[f],(d=n[0]||n[1]||n[2]||n[3])&&d===(n[3]||n[2]||n[1]||n[0])&&!d.length&&(e?e[h]=d:this._root=d),this):(this._root=i,this)},wv=function(){return this._root},Mv=function(){var t=0;return this.visit(function(n){if(!n.length)do{++t}while(n=n.next)}),t},Ev=function(t){var n,e,r,i,o,a,u=[],s=this._root;for(s&&u.push(new _v(s,this._x0,this._y0,this._x1,this._y1));n=u.pop();)if(!t(s=n.node,r=n.x0,i=n.y0,o=n.x1,a=n.y1)&&s.length){var c=(r+o)/2,l=(i+a)/2;(e=s[3])&&u.push(new _v(e,c,l,o,a)),(e=s[2])&&u.push(new _v(e,r,l,c,a)),(e=s[1])&&u.push(new _v(e,c,i,o,l)),(e=s[0])&&u.push(new _v(e,r,i,c,l))}return this},Sv=function(t){var n,e=[],r=[];for(this._root&&e.push(new _v(this._root,this._x0,this._y0,this._x1,this._y1));n=e.pop();){var i=n.node;if(i.length){var o,a=n.x0,u=n.y0,s=n.x1,c=n.y1,l=(a+s)/2,f=(u+c)/2;(o=i[0])&&e.push(new _v(o,a,u,l,f)),(o=i[1])&&e.push(new _v(o,l,u,s,f)),(o=i[2])&&e.push(new _v(o,a,f,l,c)),(o=i[3])&&e.push(new _v(o,l,f,s,c))}r.push(n)}for(;n=r.pop();)t(n.node,n.x0,n.y0,n.x1,n.y1);return this},Fv=function(t){return arguments.length?(this._x=t,this):this._x},Tv=function(t){return arguments.length?(this._y=t,this):this._y},kv=ur.prototype=sr.prototype;kv.copy=function(){var t,n,e=new sr(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return e;if(!r.length)return e._root=cr(r),e;for(t=[{source:r,target:e._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(n=r.source[i])&&(n.length?t.push({source:n,target:r.target[i]=new Array(4)}):r.target[i]=cr(n));return e},kv.add=vv,kv.addAll=rr,kv.cover=yv,kv.data=mv,kv.extent=gv,kv.find=bv,kv.remove=xv,kv.removeAll=ir,kv.root=wv,kv.size=Mv,kv.visit=Ev,kv.visitAfter=Sv,kv.x=Fv,kv.y=Tv;var Cv,Nv=function(t){function n(){function t(t,n,e,r,i){var o=t.data,u=t.r,d=f+u;{if(!o)return n>c+d||r<c-d||e>l+d||i<l-d;if(o.index>s.index){var p=c-o.x-o.vx,v=l-o.y-o.vy,y=p*p+v*v;y<d*d&&(0===p&&(p=pv(),y+=p*p),0===v&&(v=pv(),y+=v*v),y=(d-(y=Math.sqrt(y)))/y*a,s.vx+=(p*=y)*(d=(u*=u)/(h+u)),s.vy+=(v*=y)*d,o.vx-=p*(d=1-d),o.vy-=v*d)}}}for(var n,r,s,c,l,f,h,d=i.length,p=0;p<u;++p)for(r=ur(i,lr,fr).visitAfter(e),n=0;n<d;++n)s=i[n],f=o[s.index],h=f*f,c=s.x+s.vx,l=s.y+s.vy,r.visit(t)}function e(t){if(t.data)return t.r=o[t.data.index];for(var n=t.r=0;n<4;++n)t[n]&&t[n].r>t.r&&(t.r=t[n].r)}function r(){if(i){var n,e,r=i.length;for(o=new Array(r),n=0;n<r;++n)e=i[n],o[e.index]=+t(e,n,i)}}var i,o,a=1,u=1;return"function"!=typeof t&&(t=dv(null==t?1:+t)),n.initialize=function(t){i=t,r()},n.iterations=function(t){return arguments.length?(u=+t,n):u},n.strength=function(t){return arguments.length?(a=+t,n):a},n.radius=function(e){return arguments.length?(t="function"==typeof e?e:dv(+e),r(),n):t},n},jv=function(t){function n(t){return 1/Math.min(l[t.source.index],l[t.target.index])}function e(n){for(var e=0,r=t.length;e<v;++e)for(var i,o,a,c,l,h,d,p=0;p<r;++p)i=t[p],o=i.source,a=i.target,c=a.x+a.vx-o.x-o.vx||pv(),l=a.y+a.vy-o.y-o.vy||pv(),h=Math.sqrt(c*c+l*l),h=(h-s[p])/h*n*u[p],c*=h,l*=h,a.vx-=c*(d=f[p]),a.vy-=l*d,o.vx+=c*(d=1-d),o.vy+=l*d}function r(){if(c){var n,e,r=c.length,d=t.length,p=Xe(c,h);for(n=0,l=new Array(r);n<d;++n)e=t[n],e.index=n,"object"!==a(e.source)&&(e.source=dr(p,e.source)),"object"!==a(e.target)&&(e.target=dr(p,e.target)),l[e.source.index]=(l[e.source.index]||0)+1,l[e.target.index]=(l[e.target.index]||0)+1;for(n=0,f=new Array(d);n<d;++n)e=t[n],f[n]=l[e.source.index]/(l[e.source.index]+l[e.target.index]);u=new Array(d),i(),s=new Array(d),o()}}function i(){if(c)for(var n=0,e=t.length;n<e;++n)u[n]=+d(t[n],n,t)}function o(){if(c)for(var n=0,e=t.length;n<e;++n)s[n]=+p(t[n],n,t)}var u,s,c,l,f,h=hr,d=n,p=dv(30),v=1;return null==t&&(t=[]),e.initialize=function(t){c=t,r()},e.links=function(n){return arguments.length?(t=n,r(),e):t},e.id=function(t){return arguments.length?(h=t,e):h},e.iterations=function(t){return arguments.length?(v=+t,e):v},e.strength=function(t){return arguments.length?(d="function"==typeof t?t:dv(+t),i(),e):d},e.distance=function(t){return arguments.length?(p="function"==typeof t?t:dv(+t),o(),e):p},e},Av=10,Dv=Math.PI*(3-Math.sqrt(5)),Pv=function(t){function n(){e(),d.call("tick",o),a<u&&(h.stop(),d.call("end",o))}function e(){var n,e,r=t.length;for(a+=(c-a)*s,f.each(function(t){t(a)}),n=0;n<r;++n)e=t[n],null==e.fx?e.x+=e.vx*=l:(e.x=e.fx,e.vx=0),null==e.fy?e.y+=e.vy*=l:(e.y=e.fy,e.vy=0)}function r(){for(var n,e=0,r=t.length;e<r;++e){if(n=t[e],n.index=e,isNaN(n.x)||isNaN(n.y)){var i=Av*Math.sqrt(e),o=e*Dv;n.x=i*Math.cos(o),n.y=i*Math.sin(o)}(isNaN(n.vx)||isNaN(n.vy))&&(n.vx=n.vy=0)}}function i(n){return n.initialize&&n.initialize(t),n}var o,a=1,u=.001,s=1-Math.pow(u,1/300),c=0,l=.6,f=Xe(),h=wn(n),d=m("tick","end");return null==t&&(t=[]),r(),o={tick:e,restart:function(){return h.restart(n),o},stop:function(){return h.stop(),o},nodes:function(n){return arguments.length?(t=n,r(),f.each(i),o):t},alpha:function(t){return arguments.length?(a=+t,o):a},alphaMin:function(t){return arguments.length?(u=+t,o):u},alphaDecay:function(t){return arguments.length?(s=+t,o):+s},alphaTarget:function(t){return arguments.length?(c=+t,o):c},velocityDecay:function(t){return arguments.length?(l=1-t,o):1-l},force:function(t,n){return arguments.length>1?(null==n?f.remove(t):f.set(t,i(n)),o):f.get(t)},find:function(n,e,r){var i,o,a,u,s,c=0,l=t.length;for(null==r?r=1/0:r*=r,c=0;c<l;++c)u=t[c],i=n-u.x,o=e-u.y,(a=i*i+o*o)<r&&(s=u,r=a);return s},on:function(t,n){return arguments.length>1?(d.on(t,n),o):d.on(t)}}},Ov=function(){function t(t){var n,u=i.length,s=ur(i,pr,vr).visitAfter(e);for(a=t,n=0;n<u;++n)o=i[n],s.visit(r)}function n(){if(i){var t,n,e=i.length;for(u=new Array(e),t=0;t<e;++t)n=i[t],u[n.index]=+s(n,t,i)}}function e(t){var n,e,r,i,o,a=0;if(t.length){for(r=i=o=0;o<4;++o)(n=t[o])&&(e=n.value)&&(a+=e,r+=e*n.x,i+=e*n.y);t.x=r/a,t.y=i/a}else{n=t,n.x=n.data.x,n.y=n.data.y;do{a+=u[n.data.index]}while(n=n.next)}t.value=a}function r(t,n,e,r){if(!t.value)return!0;var i=t.x-o.x,s=t.y-o.y,h=r-n,d=i*i+s*s;if(h*h/f<d)return d<l&&(0===i&&(i=pv(),d+=i*i),0===s&&(s=pv(),d+=s*s),d<c&&(d=Math.sqrt(c*d)),o.vx+=i*t.value*a/d,o.vy+=s*t.value*a/d),!0;if(!(t.length||d>=l)){(t.data!==o||t.next)&&(0===i&&(i=pv(),d+=i*i),0===s&&(s=pv(),d+=s*s),d<c&&(d=Math.sqrt(c*d)));do{t.data!==o&&(h=u[t.data.index]*a/d,o.vx+=i*h,o.vy+=s*h)}while(t=t.next)}}var i,o,a,u,s=dv(-30),c=1,l=1/0,f=.81;return t.initialize=function(t){i=t,n()},t.strength=function(e){return arguments.length?(s="function"==typeof e?e:dv(+e),n(),t):s},t.distanceMin=function(n){return arguments.length?(c=n*n,t):Math.sqrt(c)},t.distanceMax=function(n){return arguments.length?(l=n*n,t):Math.sqrt(l)},t.theta=function(n){return arguments.length?(f=n*n,t):Math.sqrt(f)},t},Vv=function(t){function n(t){for(var n,e=0,a=r.length;e<a;++e)n=r[e],n.vx+=(o[e]-n.x)*i[e]*t}function e(){if(r){var n,e=r.length;for(i=new Array(e),o=new Array(e),n=0;n<e;++n)i[n]=isNaN(o[n]=+t(r[n],n,r))?0:+a(r[n],n,r)}}var r,i,o,a=dv(.1);return"function"!=typeof t&&(t=dv(null==t?0:+t)),n.initialize=function(t){r=t,e()},n.strength=function(t){return arguments.length?(a="function"==typeof t?t:dv(+t),e(),n):a},n.x=function(r){return arguments.length?(t="function"==typeof r?r:dv(+r),e(),n):t},n},Lv=function(t){function n(t){for(var n,e=0,a=r.length;e<a;++e)n=r[e],n.vy+=(o[e]-n.y)*i[e]*t}function e(){if(r){var n,e=r.length;for(i=new Array(e),o=new Array(e),n=0;n<e;++n)i[n]=isNaN(o[n]=+t(r[n],n,r))?0:+a(r[n],n,r)}}var r,i,o,a=dv(.1);return"function"!=typeof t&&(t=dv(null==t?0:+t)),n.initialize=function(t){r=t,e()},n.strength=function(t){return arguments.length?(a="function"==typeof t?t:dv(+t),e(),n):a},n.y=function(r){return arguments.length?(t="function"==typeof r?r:dv(+r),e(),n):t},n},Iv=function(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]},Rv=function(t){return t=Iv(Math.abs(t)),t?t[1]:NaN},zv=function(t,n){return function(e,r){for(var i=e.length,o=[],a=0,u=t[0],s=0;i>0&&u>0&&(s+u+1>r&&(u=Math.max(1,r-s)),o.push(e.substring(i-=u,i+u)),!((s+=u+1)>r));)u=t[a=(a+1)%t.length];return o.reverse().join(n)}},qv=function(t){return function(n){return n.replace(/[0-9]/g,function(n){return t[+n]})}},Uv=function(t,n){t=t.toPrecision(n);t:for(var e,r=t.length,i=1,o=-1;i<r;++i)switch(t[i]){case".":o=e=i;break;case"0":0===o&&(o=i),e=i;break;case"e":break t;default:o>0&&(o=0)}return o>0?t.slice(0,o)+t.slice(e+1):t},Bv=function(t,n){var e=Iv(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(Cv=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+Iv(t,Math.max(0,n+o-1))[0]},Yv=function(t,n){var e=Iv(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},Hv={"":Uv,"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return Yv(100*t,n)},r:Yv,s:Bv,X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},Xv=/^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;yr.prototype=mr.prototype,mr.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+this.type};var Wv,$v=function(t){return t},Gv=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"],Zv=function(t){function n(t){function n(t){var n,i,u,l=y,b=m;if("c"===v)b=g(t)+b,t="";else{t=+t;var x=t<0;if(t=g(Math.abs(t),p),x&&0==+t&&(x=!1),l=(x?"("===c?c:"-":"-"===c||"("===c?"":c)+l,b=b+("s"===v?Gv[8+Cv/3]:"")+(x&&"("===c?")":""),_)for(n=-1,i=t.length;++n<i;)if(48>(u=t.charCodeAt(n))||u>57){b=(46===u?o+t.slice(n+1):t.slice(n))+b,t=t.slice(0,n);break}}d&&!f&&(t=r(t,1/0));var w=l.length+t.length+b.length,M=w<h?new Array(h-w+1).join(e):"";switch(d&&f&&(t=r(M+t,M.length?h-b.length:1/0),M=""),s){case"<":t=l+t+b+M;break;case"=":t=l+M+t+b;break;case"^":t=M.slice(0,w=M.length>>1)+l+t+b+M.slice(w);break;default:t=M+l+t+b}return a(t)}t=yr(t);var e=t.fill,s=t.align,c=t.sign,l=t.symbol,f=t.zero,h=t.width,d=t.comma,p=t.precision,v=t.type,y="$"===l?i[0]:"#"===l&&/[boxX]/.test(v)?"0"+v.toLowerCase():"",m="$"===l?i[1]:/[%p]/.test(v)?u:"",g=Hv[v],_=!v||/[defgprs%]/.test(v);return p=null==p?v?6:12:/[gprs]/.test(v)?Math.max(1,Math.min(21,p)):Math.max(0,Math.min(20,p)),n.toString=function(){return t+""},n}function e(t,e){var r=n((t=yr(t),t.type="f",t)),i=3*Math.max(-8,Math.min(8,Math.floor(Rv(e)/3))),o=Math.pow(10,-i),a=Gv[8+i/3];return function(t){return r(o*t)+a}}var r=t.grouping&&t.thousands?zv(t.grouping,t.thousands):$v,i=t.currency,o=t.decimal,a=t.numerals?qv(t.numerals):$v,u=t.percent||"%";return{format:n,formatPrefix:e}};gr({decimal:".",thousands:",",grouping:[3],currency:["$",""]});var Kv=function(t){return Math.max(0,-Rv(Math.abs(t)))},Jv=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Rv(n)/3)))-Rv(Math.abs(t)))},Qv=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,Rv(n)-Rv(t))+1},ty=function(){return new _r};_r.prototype={constructor:_r,reset:function(){this.s=this.t=0},add:function(t){br(Ay,t,this.t),br(this,Ay.s,this.s),this.s?this.t+=Ay.t:this.s=Ay.t},valueOf:function(){return this.s}};var ny,ey,ry,iy,oy,ay,uy,sy,cy,ly,fy,hy,dy,py,vy,yy,my,gy,_y,by,xy,wy,My,Ey,Sy,Fy,Ty,ky,Cy,Ny,jy,Ay=new _r,Dy=1e-6,Py=Math.PI,Oy=Py/2,Vy=Py/4,Ly=2*Py,Iy=180/Py,Ry=Py/180,zy=Math.abs,qy=Math.atan,Uy=Math.atan2,By=Math.cos,Yy=Math.ceil,Hy=Math.exp,Xy=Math.log,Wy=Math.pow,$y=Math.sin,Gy=Math.sign||function(t){return t>0?1:t<0?-1:0},Zy=Math.sqrt,Ky=Math.tan,Jy={Feature:function(t,n){Sr(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)Sr(e[r].geometry,n)}},Qy={Sphere:function(t,n){n.sphere()},Point:function(t,n){t=t.coordinates,n.point(t[0],t[1],t[2])},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)t=e[r],n.point(t[0],t[1],t[2])},LineString:function(t,n){Fr(t.coordinates,n,0)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)Fr(e[r],n,0)},Polygon:function(t,n){Tr(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)Tr(e[r],n)},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)Sr(e[r],n)}},tm=function(t,n){t&&Jy.hasOwnProperty(t.type)?Jy[t.type](t,n):Sr(t,n)},nm=ty(),em=ty(),rm={point:Er,lineStart:Er,lineEnd:Er,polygonStart:function(){nm.reset(),rm.lineStart=kr,rm.lineEnd=Cr},polygonEnd:function(){var t=+nm;em.add(t<0?Ly+t:t),this.lineStart=this.lineEnd=this.point=Er},sphere:function(){em.add(Ly)}},im=function(t){return em.reset(),tm(t,rm),2*em},om=ty(),am={point:Rr,lineStart:qr,lineEnd:Ur,polygonStart:function(){am.point=Br,am.lineStart=Yr,am.lineEnd=Hr,om.reset(),rm.polygonStart()},polygonEnd:function(){rm.polygonEnd(),am.point=Rr,am.lineStart=qr,am.lineEnd=Ur,nm<0?(ay=-(sy=180),uy=-(cy=90)):om>Dy?cy=90:om<-Dy&&(uy=-90),vy[0]=ay,vy[1]=sy}},um=function(t){var n,e,r,i,o,a,u;if(cy=sy=-(ay=uy=1/0),py=[],tm(t,am),e=py.length){for(py.sort(Wr),n=1,r=py[0],o=[r];n<e;++n)i=py[n],$r(r,i[0])||$r(r,i[1])?(Xr(r[0],i[1])>Xr(r[0],r[1])&&(r[1]=i[1]),Xr(i[0],r[1])>Xr(r[0],r[1])&&(r[0]=i[0])):o.push(r=i);for(a=-1/0,e=o.length-1,n=0,r=o[e];n<=e;r=i,++n)i=o[n],(u=Xr(r[1],i[0]))>a&&(a=u,ay=i[0],sy=r[1])}return py=vy=null,ay===1/0||uy===1/0?[[NaN,NaN],[NaN,NaN]]:[[ay,uy],[sy,cy]]},sm={sphere:Er,point:Gr,lineStart:Kr,lineEnd:ti,polygonStart:function(){sm.lineStart=ni,sm.lineEnd=ei},polygonEnd:function(){sm.lineStart=Kr,sm.lineEnd=ti}},cm=function(t){yy=my=gy=_y=by=xy=wy=My=Ey=Sy=Fy=0,tm(t,sm);var n=Ey,e=Sy,r=Fy,i=n*n+e*e+r*r;return i<1e-12&&(n=xy,e=wy,r=My,my<Dy&&(n=gy,e=_y,r=by),(i=n*n+e*e+r*r)<1e-12)?[NaN,NaN]:[Uy(e,n)*Iy,wr(r/Zy(i))*Iy]},lm=function(t){return function(){return t}},fm=function(t,n){function e(e,r){return e=t(e,r),n(e[0],e[1])}return t.invert&&n.invert&&(e.invert=function(e,r){return(e=n.invert(e,r))&&t.invert(e[0],e[1])}),e};oi.invert=oi;var hm,dm,pm,vm,ym,mm,gm,_m,bm,xm,wm,Mm=function(t){function n(n){return n=t(n[0]*Ry,n[1]*Ry),n[0]*=Iy,n[1]*=Iy,n}return t=ai(t[0]*Ry,t[1]*Ry,t.length>2?t[2]*Ry:0),n.invert=function(n){return n=t.invert(n[0]*Ry,n[1]*Ry),n[0]*=Iy,n[1]*=Iy,n},n},Em=function(){function t(t,n){e.push(t=r(t,n)),t[0]*=Iy,t[1]*=Iy}function n(){var t=i.apply(this,arguments),n=o.apply(this,arguments)*Ry,s=a.apply(this,arguments)*Ry;return e=[],r=ai(-t[0]*Ry,-t[1]*Ry,0).invert,li(u,n,s,1),t={type:"Polygon",coordinates:[e]},e=r=null,t}var e,r,i=lm([0,0]),o=lm(90),a=lm(6),u={point:t};return n.center=function(t){return arguments.length?(i="function"==typeof t?t:lm([+t[0],+t[1]]),n):i},n.radius=function(t){return arguments.length?(o="function"==typeof t?t:lm(+t),n):o},n.precision=function(t){return arguments.length?(a="function"==typeof t?t:lm(+t),n):a},n},Sm=function(){var t,n=[];return{point:function(n,e){t.push([n,e])},lineStart:function(){n.push(t=[])},lineEnd:Er,rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))},result:function(){var e=n;return n=[],t=null,e}}},Fm=function(t,n,e,r,i,o){var a,u=t[0],s=t[1],c=n[0],l=n[1],f=0,h=1,d=c-u,p=l-s;if(a=e-u,d||!(a>0)){if(a/=d,d<0){if(a<f)return;a<h&&(h=a)}else if(d>0){if(a>h)return;a>f&&(f=a)}if(a=i-u,d||!(a<0)){if(a/=d,d<0){if(a>h)return;a>f&&(f=a)}else if(d>0){if(a<f)return;a<h&&(h=a)}if(a=r-s,p||!(a>0)){if(a/=p,p<0){if(a<f)return;a<h&&(h=a)}else if(p>0){if(a>h)return;a>f&&(f=a)}if(a=o-s,p||!(a<0)){if(a/=p,p<0){if(a>h)return;a>f&&(f=a)}else if(p>0){if(a<f)return;a<h&&(h=a)}return f>0&&(t[0]=u+f*d,t[1]=s+f*p),h<1&&(n[0]=u+h*d,n[1]=s+h*p),!0}}}}},Tm=function(t,n){return zy(t[0]-n[0])<Dy&&zy(t[1]-n[1])<Dy},km=function(t,n,e,r,i){var o,a,u=[],s=[];if(t.forEach(function(t){if(!((n=t.length-1)<=0)){var n,e,r=t[0],a=t[n];if(Tm(r,a)){for(i.lineStart(),o=0;o<n;++o)i.point((r=t[o])[0],r[1]);return void i.lineEnd()}u.push(e=new hi(r,t,null,!0)),s.push(e.o=new hi(r,null,e,!1)),u.push(e=new hi(a,t,null,!1)),s.push(e.o=new hi(a,null,e,!0))}}),u.length){for(s.sort(n),di(u),di(s),o=0,a=s.length;o<a;++o)s[o].e=e=!e;for(var c,l,f=u[0];;){for(var h=f,d=!0;h.v;)if((h=h.n)===f)return;c=h.z,i.lineStart();do{if(h.v=h.o.v=!0,h.e){if(d)for(o=0,a=c.length;o<a;++o)i.point((l=c[o])[0],l[1]);else r(h.x,h.n.x,1,i);h=h.n}else{if(d)for(c=h.p.z,o=c.length-1;o>=0;--o)i.point((l=c[o])[0],l[1]);else r(h.x,h.p.x,-1,i);h=h.p}h=h.o,c=h.z,d=!d}while(!h.v);i.lineEnd()}}},Cm=1e9,Nm=-Cm,jm=function(){var t,n,e,r=0,i=0,o=960,a=500;return e={stream:function(e){return t&&n===e?t:t=pi(r,i,o,a)(n=e)},extent:function(u){return arguments.length?(r=+u[0][0],i=+u[0][1],o=+u[1][0],a=+u[1][1],t=n=null,e):[[r,i],[o,a]]}}},Am=ty(),Dm=function(t,n){var e=n[0],r=n[1],i=[$y(e),-By(e),0],o=0,a=0;Am.reset();for(var u=0,s=t.length;u<s;++u)if(l=(c=t[u]).length)for(var c,l,f=c[l-1],h=f[0],d=f[1]/2+Vy,p=$y(d),v=By(d),y=0;y<l;++y,h=g,p=b,v=x,f=m){var m=c[y],g=m[0],_=m[1]/2+Vy,b=$y(_),x=By(_),w=g-h,M=w>=0?1:-1,E=M*w,S=E>Py,F=p*b;if(Am.add(Uy(F*M*$y(E),v*x+F*By(E))),o+=S?w+M*Ly:w,S^h>=e^g>=e){var T=Or(Dr(f),Dr(m));Ir(T);var k=Or(i,T);Ir(k);var C=(S^w>=0?-1:1)*wr(k[2]);(r>C||r===C&&(T[0]||T[1]))&&(a+=S^w>=0?1:-1)}}return(o<-Dy||o<Dy&&Am<-Dy)^1&a},Pm=ty(),Om={sphere:Er,point:Er,lineStart:vi,lineEnd:Er,polygonStart:Er,polygonEnd:Er},Vm=function(t){return Pm.reset(),tm(t,Om),+Pm},Lm=[null,null],Im={type:"LineString",coordinates:Lm},Rm=function(t,n){return Lm[0]=t,Lm[1]=n,Vm(Im)},zm={Feature:function(t,n){return _i(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)if(_i(e[r].geometry,n))return!0;return!1}},qm={Sphere:function(){return!0},Point:function(t,n){return bi(t.coordinates,n)},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(bi(e[r],n))return!0;return!1},LineString:function(t,n){return xi(t.coordinates,n)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(xi(e[r],n))return!0;return!1},Polygon:function(t,n){return wi(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(wi(e[r],n))return!0;return!1},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)if(_i(e[r],n))return!0;return!1}},Um=function(t,n){return(t&&zm.hasOwnProperty(t.type)?zm[t.type]:_i)(t,n)},Bm=function(t,n){var e=t[0]*Ry,r=t[1]*Ry,i=n[0]*Ry,o=n[1]*Ry,a=By(r),u=$y(r),s=By(o),c=$y(o),l=a*By(e),f=a*$y(e),h=s*By(i),d=s*$y(i),p=2*wr(Zy(Mr(o-r)+a*s*Mr(i-e))),v=$y(p),y=p?function(t){var n=$y(t*=p)/v,e=$y(p-t)/v,r=e*l+n*h,i=e*f+n*d,o=e*u+n*c;return[Uy(i,r)*Iy,Uy(o,Zy(r*r+i*i))*Iy]}:function(){return[e*Iy,r*Iy]};return y.distance=p,y},Ym=function(t){return t},Hm=ty(),Xm=ty(),Wm={point:Er,lineStart:Er,lineEnd:Er,polygonStart:function(){Wm.lineStart=Ci,Wm.lineEnd=Ai},polygonEnd:function(){Wm.lineStart=Wm.lineEnd=Wm.point=Er,Hm.add(zy(Xm)),Xm.reset()},result:function(){var t=Hm/2;return Hm.reset(),t}},$m=1/0,Gm=$m,Zm=-$m,Km=Zm,Jm={point:Di,lineStart:Er,lineEnd:Er,polygonStart:Er,polygonEnd:Er,result:function(){var t=[[$m,Gm],[Zm,Km]];return Zm=Km=-(Gm=$m=1/0),t}},Qm=0,tg=0,ng=0,eg=0,rg=0,ig=0,og=0,ag=0,ug=0,sg={point:Pi,lineStart:Oi,lineEnd:Ii,polygonStart:function(){sg.lineStart=Ri,sg.lineEnd=zi},polygonEnd:function(){sg.point=Pi,sg.lineStart=Oi,sg.lineEnd=Ii},result:function(){var t=ug?[og/ug,ag/ug]:ig?[eg/ig,rg/ig]:ng?[Qm/ng,tg/ng]:[NaN,NaN];return Qm=tg=ng=eg=rg=ig=og=ag=ug=0,t}};Bi.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._context.moveTo(t,n),this._point=1;break;case 1:this._context.lineTo(t,n);break;default:this._context.moveTo(t+this._radius,n),this._context.arc(t,n,this._radius,0,Ly)}},result:Er};var cg,lg,fg,hg,dg,pg=ty(),vg={point:Er,lineStart:function(){vg.point=Yi},lineEnd:function(){cg&&Hi(lg,fg),vg.point=Er},polygonStart:function(){cg=!0},polygonEnd:function(){cg=null},result:function(){var t=+pg;return pg.reset(),t}};Xi.prototype={_radius:4.5,_circle:Wi(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._string.push("M",t,",",n),this._point=1;break;case 1:this._string.push("L",t,",",n);break;default:null==this._circle&&(this._circle=Wi(this._radius)),this._string.push("M",t,",",n,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};var yg=function(t,n){function e(t){return t&&("function"==typeof o&&i.pointRadius(+o.apply(this,arguments)),tm(t,r(i))),i.result()}var r,i,o=4.5;return e.area=function(t){return tm(t,r(Wm)),Wm.result()},e.measure=function(t){return tm(t,r(vg)),vg.result()},e.bounds=function(t){return tm(t,r(Jm)),Jm.result()},e.centroid=function(t){return tm(t,r(sg)),sg.result()},e.projection=function(n){return arguments.length?(r=null==n?(t=null,Ym):(t=n).stream,e):t},e.context=function(t){return arguments.length?(i=null==t?(n=null,new Xi):new Bi(n=t),"function"!=typeof o&&i.pointRadius(o),e):n},e.pointRadius=function(t){return arguments.length?(o="function"==typeof t?t:(i.pointRadius(+t),+t),e):o},e.projection(t).context(n)},mg=function(t,n,e,r){return function(i,o){function a(n,e){var r=i(n,e);t(n=r[0],e=r[1])&&o.point(n,e)}function u(t,n){var e=i(t,n);y.point(e[0],e[1])}function s(){x.point=u,y.lineStart()}function c(){x.point=a,y.lineEnd()}function l(t,n){v.push([t,n]);var e=i(t,n);_.point(e[0],e[1])}function f(){_.lineStart(),v=[]}function h(){l(v[0][0],v[0][1]),_.lineEnd();var t,n,e,r,i=_.clean(),a=g.result(),u=a.length;if(v.pop(),d.push(v),v=null,u)if(1&i){if(e=a[0],(n=e.length-1)>0){for(b||(o.polygonStart(),b=!0),o.lineStart(),t=0;t<n;++t)o.point((r=e[t])[0],r[1]);o.lineEnd()}}else u>1&&2&i&&a.push(a.pop().concat(a.shift())),p.push(a.filter($i))}var d,p,v,y=n(o),m=i.invert(r[0],r[1]),g=Sm(),_=n(g),b=!1,x={point:a,lineStart:s,lineEnd:c,polygonStart:function(){x.point=l,x.lineStart=f,x.lineEnd=h,p=[],d=[]},polygonEnd:function(){x.point=a,x.lineStart=s,x.lineEnd=c,p=kl(p);var t=Dm(d,m);p.length?(b||(o.polygonStart(),b=!0),km(p,Gi,t,e,o)):t&&(b||(o.polygonStart(),b=!0),o.lineStart(),e(null,null,1,o),o.lineEnd()),b&&(o.polygonEnd(),b=!1),p=d=null},sphere:function(){o.polygonStart(),o.lineStart(),e(null,null,1,o),o.lineEnd(),o.polygonEnd()}};return x}},gg=mg(function(){return!0},Zi,Ji,[-Py,-Oy]),_g=function(t,n){function e(e,r,i,o){li(o,t,n,i,e,r)}function r(t,n){return By(t)*By(n)>u}function i(t){var n,e,i,u,l;return{lineStart:function(){u=i=!1,l=1},point:function(f,h){var d,p=[f,h],v=r(f,h),y=s?v?0:a(f,h):v?a(f+(f<0?Py:-Py),h):0;if(!n&&(u=i=v)&&t.lineStart(),v!==i&&(!(d=o(n,p))||Tm(n,d)||Tm(p,d))&&(p[0]+=Dy,p[1]+=Dy,v=r(p[0],p[1])),v!==i)l=0,v?(t.lineStart(),d=o(p,n),t.point(d[0],d[1])):(d=o(n,p),t.point(d[0],d[1]),t.lineEnd()),n=d;else if(c&&n&&s^v){var m;y&e||!(m=o(p,n,!0))||(l=0,s?(t.lineStart(),t.point(m[0][0],m[0][1]),t.point(m[1][0],m[1][1]),t.lineEnd()):(t.point(m[1][0],m[1][1]),t.lineEnd(),t.lineStart(),t.point(m[0][0],m[0][1])))}!v||n&&Tm(n,p)||t.point(p[0],p[1]),n=p,i=v,e=y},lineEnd:function(){i&&t.lineEnd(),n=null},clean:function(){return l|(u&&i)<<1}}}function o(t,n,e){var r=Dr(t),i=Dr(n),o=[1,0,0],a=Or(r,i),s=Pr(a,a),c=a[0],l=s-c*c;if(!l)return!e&&t;var f=u*s/l,h=-u*c/l,d=Or(o,a),p=Lr(o,f);Vr(p,Lr(a,h));var v=d,y=Pr(p,v),m=Pr(v,v),g=y*y-m*(Pr(p,p)-1);if(!(g<0)){var _=Zy(g),b=Lr(v,(-y-_)/m);if(Vr(b,p),b=Ar(b),!e)return b;var x,w=t[0],M=n[0],E=t[1],S=n[1];M<w&&(x=w,w=M,M=x);var F=M-w,T=zy(F-Py)<Dy,k=T||F<Dy;if(!T&&S<E&&(x=E,E=S,S=x),k?T?E+S>0^b[1]<(zy(b[0]-w)<Dy?E:S):E<=b[1]&&b[1]<=S:F>Py^(w<=b[0]&&b[0]<=M)){var C=Lr(v,(-y+_)/m);return Vr(C,p),[b,Ar(C)]}}}function a(n,e){var r=s?t:Py-t,i=0;return n<-r?i|=1:n>r&&(i|=2),e<-r?i|=4:e>r&&(i|=8),i}var u=By(t),s=u>0,c=zy(u)>Dy;return mg(r,i,e,s?[0,-t]:[-Py,t-Py])},bg=function(t){return{stream:Qi(t)}};to.prototype={constructor:to,point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var xg=16,wg=By(30*Ry),Mg=function(t,n){return+n?io(t,n):ro(t)},Eg=Qi({point:function(t,n){this.stream.point(t*Ry,n*Ry)}}),Sg=function(){return uo(co).scale(155.424).center([0,33.6442])},Fg=function(){return Sg().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])},Tg=function(){function t(t){var n=t[0],e=t[1];return u=null,i.point(n,e),u||(o.point(n,e),u)||(a.point(n,e),u)}function n(){return e=r=null,t}var e,r,i,o,a,u,s=Fg(),c=Sg().rotate([154,0]).center([-2,58.5]).parallels([55,65]),l=Sg().rotate([157,0]).center([-3,19.9]).parallels([8,18]),f={point:function(t,n){u=[t,n]}};return t.invert=function(t){var n=s.scale(),e=s.translate(),r=(t[0]-e[0])/n,i=(t[1]-e[1])/n;return(i>=.12&&i<.234&&r>=-.425&&r<-.214?c:i>=.166&&i<.234&&r>=-.214&&r<-.115?l:s).invert(t)},t.stream=function(t){return e&&r===t?e:e=lo([s.stream(r=t),c.stream(t),l.stream(t)])},t.precision=function(t){return arguments.length?(s.precision(t),c.precision(t),l.precision(t),n()):s.precision()},t.scale=function(n){return arguments.length?(s.scale(n),c.scale(.35*n),l.scale(n),t.translate(s.translate())):s.scale()},t.translate=function(t){if(!arguments.length)return s.translate();var e=s.scale(),r=+t[0],u=+t[1];return i=s.translate(t).clipExtent([[r-.455*e,u-.238*e],[r+.455*e,u+.238*e]]).stream(f),o=c.translate([r-.307*e,u+.201*e]).clipExtent([[r-.425*e+Dy,u+.12*e+Dy],[r-.214*e-Dy,u+.234*e-Dy]]).stream(f),a=l.translate([r-.205*e,u+.212*e]).clipExtent([[r-.214*e+Dy,u+.166*e+Dy],[r-.115*e-Dy,u+.234*e-Dy]]).stream(f),n()},t.fitExtent=function(n,e){return no(t,n,e)},t.fitSize=function(n,e){return eo(t,n,e)},t.scale(1070)},kg=fo(function(t){return Zy(2/(1+t))});kg.invert=ho(function(t){return 2*wr(t/2)});var Cg=function(){return oo(kg).scale(124.75).clipAngle(179.999)},Ng=fo(function(t){return(t=xr(t))&&t/$y(t)});Ng.invert=ho(function(t){return t});var jg=function(){return oo(Ng).scale(79.4188).clipAngle(179.999)};po.invert=function(t,n){return[t,2*qy(Hy(n))-Oy]};var Ag=function(){return vo(po).scale(961/Ly)},Dg=function(){return uo(mo).scale(109.5).parallels([30,30])};go.invert=go;var Pg=function(){return oo(go).scale(152.63)},Og=function(){return uo(_o).scale(131.154).center([0,13.9389])};bo.invert=ho(qy);var Vg=function(){return oo(bo).scale(144.049).clipAngle(60)},Lg=function(){function t(){return i=o=null,a}var n,e,r,i,o,a,u=1,s=0,c=0,l=1,f=1,h=Ym,d=null,p=Ym;return a={stream:function(t){return i&&o===t?i:i=h(p(o=t))},clipExtent:function(i){return arguments.length?(p=null==i?(d=n=e=r=null,Ym):pi(d=+i[0][0],n=+i[0][1],e=+i[1][0],r=+i[1][1]),t()):null==d?null:[[d,n],[e,r]]},scale:function(n){return arguments.length?(h=xo((u=+n)*l,u*f,s,c),t()):u},translate:function(n){return arguments.length?(h=xo(u*l,u*f,s=+n[0],c=+n[1]),t()):[s,c]},reflectX:function(n){return arguments.length?(h=xo(u*(l=n?-1:1),u*f,s,c),t()):l<0},reflectY:function(n){return arguments.length?(h=xo(u*l,u*(f=n?-1:1),s,c),t()):f<0},fitExtent:function(t,n){return no(a,t,n)},fitSize:function(t,n){return eo(a,t,n)}}};wo.invert=ho(wr);var Ig=function(){return oo(wo).scale(249.5).clipAngle(90+Dy)};Mo.invert=ho(function(t){return 2*qy(t)});var Rg=function(){return oo(Mo).scale(250).clipAngle(142)};Eo.invert=function(t,n){return[-n,2*qy(Hy(t))-Oy]};var zg=function(){var t=vo(Eo),n=t.center,e=t.rotate;return t.center=function(t){return arguments.length?n([-t[1],t[0]]):(t=n(),[t[1],-t[0]])},t.rotate=function(t){return arguments.length?e([t[0],t[1],t.length>2?t[2]+90:90]):(t=e(),[t[0],t[1],t[2]-90])},e([0,0,90]).scale(159.155)},qg=function(){function t(t){var o,a=0;t.eachAfter(function(t){var e=t.children;e?(t.x=Fo(e),t.y=ko(e)):(t.x=o?a+=n(t,o):0,t.y=0,o=t)});var u=No(t),s=jo(t),c=u.x-n(u,s)/2,l=s.x+n(s,u)/2;return t.eachAfter(i?function(n){n.x=(n.x-t.x)*e,n.y=(t.y-n.y)*r}:function(n){n.x=(n.x-c)/(l-c)*e,n.y=(1-(t.y?n.y/t.y:1))*r})}var n=So,e=1,r=1,i=!1;return t.separation=function(e){return arguments.length?(n=e,t):n},t.size=function(n){return arguments.length?(i=!1,e=+n[0],r=+n[1],t):i?null:[e,r]},t.nodeSize=function(n){return arguments.length?(i=!0,e=+n[0],r=+n[1],t):i?[e,r]:null},t},Ug=function(){return this.eachAfter(Ao)},Bg=function(t){var n,e,r,i,o=this,a=[o];do{for(n=a.reverse(),a=[];o=n.pop();)if(t(o),e=o.children)for(r=0,i=e.length;r<i;++r)a.push(e[r])}while(a.length);return this},Yg=function(t){for(var n,e,r=this,i=[r];r=i.pop();)if(t(r),n=r.children)for(e=n.length-1;e>=0;--e)i.push(n[e]);return this},Hg=function(t){for(var n,e,r,i=this,o=[i],a=[];i=o.pop();)if(a.push(i),n=i.children)for(e=0,r=n.length;e<r;++e)o.push(n[e]);for(;i=a.pop();)t(i);return this},Xg=function(t){return this.eachAfter(function(n){for(var e=+t(n.data)||0,r=n.children,i=r&&r.length;--i>=0;)e+=r[i].value;n.value=e})},Wg=function(t){return this.eachBefore(function(n){n.children&&n.children.sort(t)})},$g=function(t){for(var n=this,e=Do(n,t),r=[n];n!==e;)n=n.parent,r.push(n);for(var i=r.length;t!==e;)r.splice(i,0,t),t=t.parent;return r},Gg=function(){for(var t=this,n=[t];t=t.parent;)n.push(t);return n},Zg=function(){var t=[];return this.each(function(n){t.push(n)}),t},Kg=function(){var t=[];return this.eachBefore(function(n){n.children||t.push(n)}),t},Jg=function(){var t=this,n=[];return t.each(function(e){e!==t&&n.push({source:e.parent,target:e})}),n};Ro.prototype=Po.prototype={constructor:Ro,count:Ug,each:Bg,eachAfter:Hg,eachBefore:Yg,sum:Xg,sort:Wg,path:$g,ancestors:Gg,descendants:Zg,leaves:Kg,links:Jg,copy:Oo};var Qg=Array.prototype.slice,t_=function(t){for(var n,e,r=0,i=(t=zo(Qg.call(t))).length,o=[];r<i;)n=t[r],e&&Bo(e,n)?++r:(e=Ho(o=qo(o,n)),r=0);return e},n_=function(t){return Qo(t),t},e_=function(t){return function(){return t}},r_=function(){function t(t){return t.x=e/2,t.y=r/2,n?t.eachBefore(ia(n)).eachAfter(oa(i,.5)).eachBefore(aa(1)):t.eachBefore(ia(ra)).eachAfter(oa(ea,1)).eachAfter(oa(i,t.r/Math.min(e,r))).eachBefore(aa(Math.min(e,r)/(2*t.r))),t}var n=null,e=1,r=1,i=ea;return t.radius=function(e){return arguments.length?(n=ta(e),t):n},t.size=function(n){return arguments.length?(e=+n[0],r=+n[1],t):[e,r]},t.padding=function(n){return arguments.length?(i="function"==typeof n?n:e_(+n),t):i},t},i_=function(t){t.x0=Math.round(t.x0),t.y0=Math.round(t.y0),t.x1=Math.round(t.x1),t.y1=Math.round(t.y1)},o_=function(t,n,e,r,i){for(var o,a=t.children,u=-1,s=a.length,c=t.value&&(r-n)/t.value;++u<s;)o=a[u],o.y0=e,o.y1=i,o.x0=n,o.x1=n+=o.value*c},a_=function(){function t(t){var a=t.height+1;return t.x0=t.y0=i,t.x1=e,t.y1=r/a,t.eachBefore(n(r,a)),o&&t.eachBefore(i_),t}function n(t,n){return function(e){e.children&&o_(e,e.x0,t*(e.depth+1)/n,e.x1,t*(e.depth+2)/n);var r=e.x0,o=e.y0,a=e.x1-i,u=e.y1-i;a<r&&(r=a=(r+a)/2),u<o&&(o=u=(o+u)/2),e.x0=r,e.y0=o,e.x1=a,e.y1=u}}var e=1,r=1,i=0,o=!1;return t.round=function(n){return arguments.length?(o=!!n,t):o},t.size=function(n){return arguments.length?(e=+n[0],r=+n[1],t):[e,r]},t.padding=function(n){return arguments.length?(i=+n,t):i},t},u_="$",s_={depth:-1},c_={},l_=function(){function t(t){var r,i,o,a,u,s,c,l=t.length,f=new Array(l),h={};for(i=0;i<l;++i)r=t[i],u=f[i]=new Ro(r),null!=(s=n(r,i,t))&&(s+="")&&(c=u_+(u.id=s),h[c]=c in h?c_:u);for(i=0;i<l;++i)if(u=f[i],null!=(s=e(t[i],i,t))&&(s+="")){if(!(a=h[u_+s]))throw new Error("missing: "+s);if(a===c_)throw new Error("ambiguous: "+s);a.children?a.children.push(u):a.children=[u],u.parent=a}else{if(o)throw new Error("multiple roots");o=u}if(!o)throw new Error("no root");if(o.parent=s_,o.eachBefore(function(t){t.depth=t.parent.depth+1,--l}).eachBefore(Io),o.parent=null,l>0)throw new Error("cycle");return o}var n=ua,e=sa;return t.id=function(e){return arguments.length?(n=na(e),t):n},t.parentId=function(n){return arguments.length?(e=na(n),t):e},t};va.prototype=Object.create(Ro.prototype);var f_=function(){function t(t){var r=ya(t);if(r.eachAfter(n),r.parent.m=-r.z,r.eachBefore(e),s)t.eachBefore(i);else{var c=t,l=t,f=t;t.eachBefore(function(t){t.x<c.x&&(c=t),t.x>l.x&&(l=t),t.depth>f.depth&&(f=t)});var h=c===l?1:o(c,l)/2,d=h-c.x,p=a/(l.x+h+d),v=u/(f.depth||1);t.eachBefore(function(t){t.x=(t.x+d)*p,t.y=t.depth*v})}return t}function n(t){var n=t.children,e=t.parent.children,i=t.i?e[t.i-1]:null;if(n){da(t);var a=(n[0].z+n[n.length-1].z)/2;i?(t.z=i.z+o(t._,i._),t.m=t.z-a):t.z=a}else i&&(t.z=i.z+o(t._,i._));t.parent.A=r(t,i,t.parent.A||e[0])}function e(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function r(t,n,e){if(n){for(var r,i=t,a=t,u=n,s=i.parent.children[0],c=i.m,l=a.m,f=u.m,h=s.m;u=fa(u),i=la(i),u&&i;)s=la(s),a=fa(a),a.a=t,r=u.z+f-i.z-c+o(u._,i._),r>0&&(ha(pa(u,t,e),t,r),c+=r,l+=r),f+=u.m,c+=i.m,h+=s.m,l+=a.m;u&&!fa(a)&&(a.t=u,a.m+=f-l),i&&!la(s)&&(s.t=i,s.m+=c-h,e=t)}return e}function i(t){t.x*=a,t.y=t.depth*u}var o=ca,a=1,u=1,s=null;return t.separation=function(n){return arguments.length?(o=n,t):o},t.size=function(n){return arguments.length?(s=!1,a=+n[0],u=+n[1],t):s?null:[a,u]},t.nodeSize=function(n){return arguments.length?(s=!0,a=+n[0],u=+n[1],t):s?[a,u]:null},t},h_=function(t,n,e,r,i){for(var o,a=t.children,u=-1,s=a.length,c=t.value&&(i-e)/t.value;++u<s;)o=a[u],o.x0=n,o.x1=r,o.y0=e,o.y1=e+=o.value*c},d_=(1+Math.sqrt(5))/2,p_=function t(n){function e(t,e,r,i,o){ma(n,t,e,r,i,o)}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(d_),v_=function(){function t(t){return t.x0=t.y0=0,t.x1=i,t.y1=o,t.eachBefore(n),a=[0],r&&t.eachBefore(i_),t}function n(t){var n=a[t.depth],r=t.x0+n,i=t.y0+n,o=t.x1-n,h=t.y1-n;o<r&&(r=o=(r+o)/2),h<i&&(i=h=(i+h)/2),t.x0=r,t.y0=i,t.x1=o,t.y1=h,t.children&&(n=a[t.depth+1]=u(t)/2,r+=f(t)-n,i+=s(t)-n,o-=c(t)-n,h-=l(t)-n,o<r&&(r=o=(r+o)/2),h<i&&(i=h=(i+h)/2),e(t,r,i,o,h))}var e=p_,r=!1,i=1,o=1,a=[0],u=ea,s=ea,c=ea,l=ea,f=ea;return t.round=function(n){return arguments.length?(r=!!n,t):r},t.size=function(n){return arguments.length?(i=+n[0],o=+n[1],t):[i,o]},t.tile=function(n){return arguments.length?(e=na(n),t):e},t.padding=function(n){return arguments.length?t.paddingInner(n).paddingOuter(n):t.paddingInner()},t.paddingInner=function(n){return arguments.length?(u="function"==typeof n?n:e_(+n),t):u},t.paddingOuter=function(n){return arguments.length?t.paddingTop(n).paddingRight(n).paddingBottom(n).paddingLeft(n):t.paddingTop()},t.paddingTop=function(n){return arguments.length?(s="function"==typeof n?n:e_(+n),t):s},t.paddingRight=function(n){return arguments.length?(c="function"==typeof n?n:e_(+n),t):c},t.paddingBottom=function(n){return arguments.length?(l="function"==typeof n?n:e_(+n),t):l},t.paddingLeft=function(n){return arguments.length?(f="function"==typeof n?n:e_(+n),t):f},t},y_=function(t,n,e,r,i){function o(t,n,e,r,i,a,u){if(t>=n-1){var c=s[t];return c.x0=r,c.y0=i,c.x1=a,c.y1=u,void 0}for(var f=l[t],h=e/2+f,d=t+1,p=n-1;d<p;){var v=d+p>>>1;l[v]<h?d=v+1:p=v}h-l[d-1]<l[d]-h&&t+1<d&&--d;var y=l[d]-f,m=e-y;if(a-r>u-i){var g=(r*m+a*y)/e;o(t,d,y,r,i,g,u),o(d,n,m,g,i,a,u)}else{var _=(i*m+u*y)/e;o(t,d,y,r,i,a,_),o(d,n,m,r,_,a,u)}}var a,u,s=t.children,c=s.length,l=new Array(c+1);for(l[0]=u=a=0;a<c;++a)l[a+1]=u+=s[a].value;o(0,c,t.value,n,e,r,i)},m_=function(t,n,e,r,i){(1&t.depth?h_:o_)(t,n,e,r,i)},g_=function t(n){function e(t,e,r,i,o){if((a=t._squarify)&&a.ratio===n)for(var a,u,s,c,l,f=-1,h=a.length,d=t.value;++f<h;){for(u=a[f],s=u.children,c=u.value=0,l=s.length;c<l;++c)u.value+=s[c].value;u.dice?o_(u,e,r,i,r+=(o-r)*u.value/d):h_(u,e,r,e+=(i-e)*u.value/d,o),d-=u.value}else t._squarify=a=ma(n,t,e,r,i,o),a.ratio=n}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(d_),__=function(t){for(var n,e=-1,r=t.length,i=t[r-1],o=0;++e<r;)n=i,i=t[e],o+=n[1]*i[0]-n[0]*i[1];return o/2},b_=function(t){for(var n,e,r=-1,i=t.length,o=0,a=0,u=t[i-1],s=0;++r<i;)n=u,u=t[r],s+=e=n[0]*u[1]-u[0]*n[1],o+=(n[0]+u[0])*e,a+=(n[1]+u[1])*e;return s*=3,[o/s,a/s]},x_=function(t,n,e){return(n[0]-t[0])*(e[1]-t[1])-(n[1]-t[1])*(e[0]-t[0])},w_=function(t){if((e=t.length)<3)return null;var n,e,r=new Array(e),i=new Array(e);for(n=0;n<e;++n)r[n]=[+t[n][0],+t[n][1],n];for(r.sort(ga),n=0;n<e;++n)i[n]=[r[n][0],-r[n][1]];var o=_a(r),a=_a(i),u=a[0]===o[0],s=a[a.length-1]===o[o.length-1],c=[];for(n=o.length-1;n>=0;--n)c.push(t[r[o[n]][2]]);for(n=+u;n<a.length-s;++n)c.push(t[r[a[n]][2]]);return c},M_=function(t,n){for(var e,r,i=t.length,o=t[i-1],a=n[0],u=n[1],s=o[0],c=o[1],l=!1,f=0;f<i;++f)o=t[f],e=o[0],r=o[1],r>u!=c>u&&a<(s-e)*(u-r)/(c-r)+e&&(l=!l),s=e,c=r;return l},E_=function(t){for(var n,e,r=-1,i=t.length,o=t[i-1],a=o[0],u=o[1],s=0;++r<i;)n=a,e=u,o=t[r],a=o[0],u=o[1],n-=a,e-=u,s+=Math.sqrt(n*n+e*e);return s},S_=[].slice,F_={};ba.prototype=Fa.prototype={constructor:ba,defer:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("defer after await");if(null!=this._error)return this;var n=S_.call(arguments,1);return n.push(t),++this._waiting,this._tasks.push(n),xa(this),this},abort:function(){return null==this._error&&Ea(this,new Error("abort")),this},await:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("multiple await");return this._call=function(n,e){t.apply(null,[n].concat(e))},Sa(this),this},awaitAll:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("multiple await");return this._call=t,Sa(this),this}};var T_=function(){return Math.random()},k_=function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,1===arguments.length?(e=t,t=0):e-=t,function(){return n()*e+t}}return e.source=t,e}(T_),C_=function t(n){function e(t,e){var r,i;return t=null==t?0:+t,e=null==e?1:+e,function(){var o;if(null!=r)o=r,r=null;else do{r=2*n()-1,o=2*n()-1,i=r*r+o*o}while(!i||i>1);return t+e*o*Math.sqrt(-2*Math.log(i)/i)}}return e.source=t,e}(T_),N_=function t(n){function e(){var t=C_.source(n).apply(this,arguments);return function(){return Math.exp(t())}}return e.source=t,e}(T_),j_=function t(n){function e(t){return function(){for(var e=0,r=0;r<t;++r)e+=n();return e}}return e.source=t,e}(T_),A_=function t(n){function e(t){var e=j_.source(n)(t);return function(){return e()/t}}return e.source=t,e}(T_),D_=function t(n){function e(t){return function(){return-Math.log(1-n())/t}}return e.source=t,e}(T_),P_=function(t,n){function e(t){var n,e=c.status;if(!e&&ka(c)||e>=200&&e<300||304===e){if(o)try{n=o.call(r,c)}catch(t){return void u.call("error",r,t)}else n=c;u.call("load",r,n)}else u.call("error",r,t)}var r,i,o,a,u=m("beforesend","progress","load","error"),s=Xe(),c=new XMLHttpRequest,l=null,f=null,h=0;if("undefined"==typeof XDomainRequest||"withCredentials"in c||!/^(http(s)?:)?\/\//.test(t)||(c=new XDomainRequest),"onload"in c?c.onload=c.onerror=c.ontimeout=e:c.onreadystatechange=function(t){c.readyState>3&&e(t)},c.onprogress=function(t){u.call("progress",r,t)},r={header:function(t,n){return t=(t+"").toLowerCase(),arguments.length<2?s.get(t):(null==n?s.remove(t):s.set(t,n+""),r)},mimeType:function(t){return arguments.length?(i=null==t?null:t+"",r):i},responseType:function(t){return arguments.length?(a=t,r):a},timeout:function(t){return arguments.length?(h=+t,r):h},user:function(t){return arguments.length<1?l:(l=null==t?null:t+"",r)},password:function(t){return arguments.length<1?f:(f=null==t?null:t+"",r)},response:function(t){return o=t,r},get:function(t,n){return r.send("GET",t,n)},post:function(t,n){return r.send("POST",t,n)},send:function(n,e,o){return c.open(n,t,!0,l,f),null==i||s.has("accept")||s.set("accept",i+",*/*"),c.setRequestHeader&&s.each(function(t,n){c.setRequestHeader(n,t)}),null!=i&&c.overrideMimeType&&c.overrideMimeType(i),null!=a&&(c.responseType=a),h>0&&(c.timeout=h),null==o&&"function"==typeof e&&(o=e,e=null),null!=o&&1===o.length&&(o=Ta(o)),null!=o&&r.on("error",o).on("load",function(t){o(null,t)}),u.call("beforesend",r,c),c.send(null==e?null:e),r},abort:function(){return c.abort(),r},on:function(){var t=u.on.apply(u,arguments);return t===u?r:t}},null!=n){if("function"!=typeof n)throw new Error("invalid callback: "+n);return r.get(n)}return r},O_=function(t,n){return function(e,r){var i=P_(e).mimeType(t).response(n);if(null!=r){if("function"!=typeof r)throw new Error("invalid callback: "+r);return i.get(r)}return i}},V_=O_("text/html",function(t){return document.createRange().createContextualFragment(t.responseText)}),L_=O_("application/json",function(t){return JSON.parse(t.responseText)}),I_=O_("text/plain",function(t){return t.responseText}),R_=O_("application/xml",function(t){var n=t.responseXML;if(!n)throw new Error("parse error");return n}),z_=function(t,n){return function(e,r,i){arguments.length<3&&(i=r,r=null);var o=P_(e).mimeType(t);return o.row=function(t){return arguments.length?o.response(Ca(n,r=t)):r},o.row(r),i?o.get(i):o}},q_=z_("text/csv",rv),U_=z_("text/tab-separated-values",sv),B_=Array.prototype,Y_=B_.map,H_=B_.slice,X_={name:"implicit"},W_=function(t){return function(){return t}},$_=function(t){return+t},G_=[0,1],Z_=function(n,e,r){var o,a=n[0],u=n[n.length-1],s=i(a,u,null==e?10:e);switch(r=yr(null==r?",f":r),r.type){case"s":var c=Math.max(Math.abs(a),Math.abs(u));return null!=r.precision||isNaN(o=Jv(s,c))||(r.precision=o),t.formatPrefix(r,c);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(o=Qv(s,Math.max(Math.abs(a),Math.abs(u))))||(r.precision=o-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(o=Kv(s))||(r.precision=o-2*("%"===r.type))}return t.format(r)},K_=function(t,n){t=t.slice();var e,r=0,i=t.length-1,o=t[r],a=t[i];return a<o&&(e=r,r=i,i=e,e=o,o=a,a=e),t[r]=n.floor(o),t[i]=n.ceil(a),t},J_=new Date,Q_=new Date,tb=ru(function(){},function(t,n){t.setTime(+t+n)},function(t,n){return n-t});tb.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?ru(function(n){n.setTime(Math.floor(n/t)*t)},function(n,e){n.setTime(+n+e*t)},function(n,e){return(e-n)/t}):tb:null};var nb=tb.range,eb=6e4,rb=6048e5,ib=ru(function(t){t.setTime(1e3*Math.floor(t/1e3))},function(t,n){t.setTime(+t+1e3*n)},function(t,n){return(n-t)/1e3},function(t){return t.getUTCSeconds()}),ob=ib.range,ab=ru(function(t){t.setTime(Math.floor(t/eb)*eb)},function(t,n){t.setTime(+t+n*eb)},function(t,n){return(n-t)/eb},function(t){return t.getMinutes()}),ub=ab.range,sb=ru(function(t){var n=t.getTimezoneOffset()*eb%36e5;n<0&&(n+=36e5),t.setTime(36e5*Math.floor((+t-n)/36e5)+n)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getHours()}),cb=sb.range,lb=ru(function(t){t.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*eb)/864e5},function(t){return t.getDate()-1}),fb=lb.range,hb=iu(0),db=iu(1),pb=iu(2),vb=iu(3),yb=iu(4),mb=iu(5),gb=iu(6),_b=hb.range,bb=db.range,xb=pb.range,wb=vb.range,Mb=yb.range,Eb=mb.range,Sb=gb.range,Fb=ru(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,n){t.setMonth(t.getMonth()+n)},function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())},function(t){return t.getMonth()}),Tb=Fb.range,kb=ru(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,n){t.setFullYear(t.getFullYear()+n)},function(t,n){return n.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()});kb.every=function(t){return isFinite(t=Math.floor(t))&&t>0?ru(function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)},function(n,e){n.setFullYear(n.getFullYear()+e*t)}):null};var Cb=kb.range,Nb=ru(function(t){t.setUTCSeconds(0,0)},function(t,n){t.setTime(+t+n*eb)},function(t,n){return(n-t)/eb},function(t){return t.getUTCMinutes()}),jb=Nb.range,Ab=ru(function(t){t.setUTCMinutes(0,0,0)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getUTCHours()}),Db=Ab.range,Pb=ru(function(t){t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+n)},function(t,n){return(n-t)/864e5},function(t){return t.getUTCDate()-1}),Ob=Pb.range,Vb=ou(0),Lb=ou(1),Ib=ou(2),Rb=ou(3),zb=ou(4),qb=ou(5),Ub=ou(6),Bb=Vb.range,Yb=Lb.range,Hb=Ib.range,Xb=Rb.range,Wb=zb.range,$b=qb.range,Gb=Ub.range,Zb=ru(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCMonth(t.getUTCMonth()+n)},function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()}),Kb=Zb.range,Jb=ru(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)},function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()});Jb.every=function(t){return isFinite(t=Math.floor(t))&&t>0?ru(function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)},function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)}):null};var Qb,tx=Jb.range,nx={"-":"",_:" ",0:"0"},ex=/^\s*\d+/,rx=/^%/,ix=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;rs({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var ox=Date.prototype.toISOString?is:t.utcFormat("%Y-%m-%dT%H:%M:%S.%LZ"),ax=+new Date("2000-01-01T00:00:00.000Z")?os:t.utcParse("%Y-%m-%dT%H:%M:%S.%LZ"),ux=1e3,sx=60*ux,cx=60*sx,lx=24*cx,fx=7*lx,hx=30*lx,dx=365*lx,px=function(){return ss(kb,Fb,hb,lb,sb,ab,ib,tb,t.timeFormat).domain([new Date(2e3,0,1),new Date(2e3,0,2)])},vx=function(){return ss(Jb,Zb,Vb,Pb,Ab,Nb,ib,tb,t.utcFormat).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)])},yx=function(t){return t.match(/.{6}/g).map(function(t){return"#"+t})},mx=yx("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),gx=yx("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6"),_x=yx("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9"),bx=yx("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5"),xx=rd(Kt(300,.5,0),Kt(-240,.5,1)),wx=rd(Kt(-100,.75,.35),Kt(80,1.5,.8)),Mx=rd(Kt(260,.75,.35),Kt(80,1.5,.8)),Ex=Kt(),Sx=function(t){(t<0||t>1)&&(t-=Math.floor(t));var n=Math.abs(t-.5);return Ex.h=360*t-100,Ex.s=1.5-1.5*n,Ex.l=.8-.9*n,Ex+""},Fx=cs(yx("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),Tx=cs(yx("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),kx=cs(yx("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),Cx=cs(yx("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921")),Nx=function(t){return function(){return t}},jx=Math.abs,Ax=Math.atan2,Dx=Math.cos,Px=Math.max,Ox=Math.min,Vx=Math.sin,Lx=Math.sqrt,Ix=1e-12,Rx=Math.PI,zx=Rx/2,qx=2*Rx,Ux=function(){function t(){var t,c,l=+n.apply(this,arguments),f=+e.apply(this,arguments),h=o.apply(this,arguments)-zx,d=a.apply(this,arguments)-zx,p=jx(d-h),v=d>h;if(s||(s=t=Re()),f<l&&(c=f,f=l,l=c),f>Ix)if(p>qx-Ix)s.moveTo(f*Dx(h),f*Vx(h)),s.arc(0,0,f,h,d,!v),l>Ix&&(s.moveTo(l*Dx(d),l*Vx(d)),s.arc(0,0,l,d,h,v));else{var y,m,g=h,_=d,b=h,x=d,w=p,M=p,E=u.apply(this,arguments)/2,S=E>Ix&&(i?+i.apply(this,arguments):Lx(l*l+f*f)),F=Ox(jx(f-l)/2,+r.apply(this,arguments)),T=F,k=F;if(S>Ix){var C=hs(S/l*Vx(E)),N=hs(S/f*Vx(E));(w-=2*C)>Ix?(C*=v?1:-1,b+=C,x-=C):(w=0,b=x=(h+d)/2),(M-=2*N)>Ix?(N*=v?1:-1,g+=N,_-=N):(M=0,g=_=(h+d)/2)}var j=f*Dx(g),A=f*Vx(g),D=l*Dx(x),P=l*Vx(x);if(F>Ix){var O=f*Dx(_),V=f*Vx(_),L=l*Dx(b),I=l*Vx(b);if(p<Rx){var R=w>Ix?gs(j,A,L,I,O,V,D,P):[D,P],z=j-R[0],q=A-R[1],U=O-R[0],B=V-R[1],Y=1/Vx(fs((z*U+q*B)/(Lx(z*z+q*q)*Lx(U*U+B*B)))/2),H=Lx(R[0]*R[0]+R[1]*R[1]);T=Ox(F,(l-H)/(Y-1)),k=Ox(F,(f-H)/(Y+1))}}M>Ix?k>Ix?(y=_s(L,I,j,A,f,k,v),m=_s(O,V,D,P,f,k,v),s.moveTo(y.cx+y.x01,y.cy+y.y01),k<F?s.arc(y.cx,y.cy,k,Ax(y.y01,y.x01),Ax(m.y01,m.x01),!v):(s.arc(y.cx,y.cy,k,Ax(y.y01,y.x01),Ax(y.y11,y.x11),!v),s.arc(0,0,f,Ax(y.cy+y.y11,y.cx+y.x11),Ax(m.cy+m.y11,m.cx+m.x11),!v),s.arc(m.cx,m.cy,k,Ax(m.y11,m.x11),Ax(m.y01,m.x01),!v))):(s.moveTo(j,A),s.arc(0,0,f,g,_,!v)):s.moveTo(j,A),l>Ix&&w>Ix?T>Ix?(y=_s(D,P,O,V,l,-T,v),m=_s(j,A,L,I,l,-T,v),s.lineTo(y.cx+y.x01,y.cy+y.y01),T<F?s.arc(y.cx,y.cy,T,Ax(y.y01,y.x01),Ax(m.y01,m.x01),!v):(s.arc(y.cx,y.cy,T,Ax(y.y01,y.x01),Ax(y.y11,y.x11),!v),s.arc(0,0,l,Ax(y.cy+y.y11,y.cx+y.x11),Ax(m.cy+m.y11,m.cx+m.x11),v),s.arc(m.cx,m.cy,T,Ax(m.y11,m.x11),Ax(m.y01,m.x01),!v))):s.arc(0,0,l,x,b,v):s.lineTo(D,P)}else s.moveTo(0,0);if(s.closePath(),t)return s=null,t+""||null}var n=ds,e=ps,r=Nx(0),i=null,o=vs,a=ys,u=ms,s=null;return t.centroid=function(){var t=(+n.apply(this,arguments)+ +e.apply(this,arguments))/2,r=(+o.apply(this,arguments)+ +a.apply(this,arguments))/2-Rx/2;return[Dx(r)*t,Vx(r)*t]},t.innerRadius=function(e){return arguments.length?(n="function"==typeof e?e:Nx(+e),t):n},t.outerRadius=function(n){return arguments.length?(e="function"==typeof n?n:Nx(+n),t):e},t.cornerRadius=function(n){return arguments.length?(r="function"==typeof n?n:Nx(+n),t):r},t.padRadius=function(n){return arguments.length?(i=null==n?null:"function"==typeof n?n:Nx(+n),t):i},t.startAngle=function(n){return arguments.length?(o="function"==typeof n?n:Nx(+n),t):o},t.endAngle=function(n){return arguments.length?(a="function"==typeof n?n:Nx(+n),t):a},t.padAngle=function(n){return arguments.length?(u="function"==typeof n?n:Nx(+n),t):u},t.context=function(n){return arguments.length?(s=null==n?null:n,t):s},t};bs.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}};var Bx=function(t){return new bs(t)},Yx=function(){function t(t){var u,s,c,l=t.length,f=!1;for(null==i&&(a=o(c=Re())),u=0;u<=l;++u)!(u<l&&r(s=t[u],u,t))===f&&((f=!f)?a.lineStart():a.lineEnd()),f&&a.point(+n(s,u,t),+e(s,u,t));if(c)return a=null,c+""||null}var n=xs,e=ws,r=Nx(!0),i=null,o=Bx,a=null;return t.x=function(e){return arguments.length?(n="function"==typeof e?e:Nx(+e),t):n},t.y=function(n){return arguments.length?(e="function"==typeof n?n:Nx(+n),t):e},t.defined=function(n){return arguments.length?(r="function"==typeof n?n:Nx(!!n),t):r},t.curve=function(n){return arguments.length?(o=n,null!=i&&(a=o(i)),t):o},t.context=function(n){return arguments.length?(null==n?i=a=null:a=o(i=n),t):i},t},Hx=function(){function t(t){var n,l,f,h,d,p=t.length,v=!1,y=new Array(p),m=new Array(p);for(null==u&&(c=s(d=Re())),n=0;n<=p;++n){if(!(n<p&&a(h=t[n],n,t))===v)if(v=!v)l=n,c.areaStart(),c.lineStart();else{for(c.lineEnd(),c.lineStart(),f=n-1;f>=l;--f)c.point(y[f],m[f]);c.lineEnd(),c.areaEnd()}v&&(y[n]=+e(h,n,t),m[n]=+i(h,n,t),c.point(r?+r(h,n,t):y[n],o?+o(h,n,t):m[n]))}if(d)return c=null,d+""||null}function n(){return Yx().defined(a).curve(s).context(u)}var e=xs,r=null,i=Nx(0),o=ws,a=Nx(!0),u=null,s=Bx,c=null;return t.x=function(n){return arguments.length?(e="function"==typeof n?n:Nx(+n),r=null,t):e},t.x0=function(n){return arguments.length?(e="function"==typeof n?n:Nx(+n),t):e},t.x1=function(n){return arguments.length?(r=null==n?null:"function"==typeof n?n:Nx(+n),t):r},t.y=function(n){return arguments.length?(i="function"==typeof n?n:Nx(+n),o=null,t):i},t.y0=function(n){return arguments.length?(i="function"==typeof n?n:Nx(+n),t):i},t.y1=function(n){return arguments.length?(o=null==n?null:"function"==typeof n?n:Nx(+n),t):o},t.lineX0=t.lineY0=function(){return n().x(e).y(i)},t.lineY1=function(){return n().x(e).y(o)},t.lineX1=function(){return n().x(r).y(i)},t.defined=function(n){return arguments.length?(a="function"==typeof n?n:Nx(!!n),t):a},t.curve=function(n){return arguments.length?(s=n,null!=u&&(c=s(u)),t):s},t.context=function(n){return arguments.length?(null==n?u=c=null:c=s(u=n),t):u},t},Xx=function(t,n){return n<t?-1:n>t?1:n>=t?0:NaN},Wx=function(t){return t},$x=function(){function t(t){var u,s,c,l,f,h=t.length,d=0,p=new Array(h),v=new Array(h),y=+i.apply(this,arguments),m=Math.min(qx,Math.max(-qx,o.apply(this,arguments)-y)),g=Math.min(Math.abs(m)/h,a.apply(this,arguments)),_=g*(m<0?-1:1);for(u=0;u<h;++u)(f=v[p[u]=u]=+n(t[u],u,t))>0&&(d+=f);for(null!=e?p.sort(function(t,n){return e(v[t],v[n])}):null!=r&&p.sort(function(n,e){return r(t[n],t[e])}),u=0,c=d?(m-h*_)/d:0;u<h;++u,y=l)s=p[u],f=v[s],l=y+(f>0?f*c:0)+_,v[s]={data:t[s],index:u,value:f,startAngle:y,endAngle:l,padAngle:g};return v}var n=Wx,e=Xx,r=null,i=Nx(0),o=Nx(qx),a=Nx(0);return t.value=function(e){return arguments.length?(n="function"==typeof e?e:Nx(+e),t):n},t.sortValues=function(n){return arguments.length?(e=n,r=null,t):e},t.sort=function(n){return arguments.length?(r=n,e=null,t):r},t.startAngle=function(n){return arguments.length?(i="function"==typeof n?n:Nx(+n),t):i},t.endAngle=function(n){return arguments.length?(o="function"==typeof n?n:Nx(+n),t):o},t.padAngle=function(n){return arguments.length?(a="function"==typeof n?n:Nx(+n),t):a},t},Gx=Es(Bx);Ms.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,n){this._curve.point(n*Math.sin(t),n*-Math.cos(t))}};var Zx=function(){return Ss(Yx().curve(Gx))},Kx=function(){var t=Hx().curve(Gx),n=t.curve,e=t.lineX0,r=t.lineX1,i=t.lineY0,o=t.lineY1;return t.angle=t.x,delete t.x,t.startAngle=t.x0,delete t.x0,t.endAngle=t.x1,delete t.x1,t.radius=t.y,delete t.y,t.innerRadius=t.y0,delete t.y0,t.outerRadius=t.y1,delete t.y1,t.lineStartAngle=function(){return Ss(e())},delete t.lineX0,t.lineEndAngle=function(){return Ss(r())},delete t.lineX1,t.lineInnerRadius=function(){return Ss(i())},delete t.lineY0,t.lineOuterRadius=function(){return Ss(o())},delete t.lineY1,t.curve=function(t){return arguments.length?n(Es(t)):n()._curve},t},Jx=function(t,n){return[(n=+n)*Math.cos(t-=Math.PI/2),n*Math.sin(t)]},Qx=Array.prototype.slice,tw={draw:function(t,n){var e=Math.sqrt(n/Rx);t.moveTo(e,0),t.arc(0,0,e,0,qx)}},nw={draw:function(t,n){var e=Math.sqrt(n/5)/2;t.moveTo(-3*e,-e),t.lineTo(-e,-e),t.lineTo(-e,-3*e),t.lineTo(e,-3*e),t.lineTo(e,-e),t.lineTo(3*e,-e),t.lineTo(3*e,e),t.lineTo(e,e),t.lineTo(e,3*e),t.lineTo(-e,3*e),t.lineTo(-e,e),t.lineTo(-3*e,e),t.closePath()}},ew=Math.sqrt(1/3),rw=2*ew,iw={draw:function(t,n){var e=Math.sqrt(n/rw),r=e*ew;t.moveTo(0,-e),t.lineTo(r,0),t.lineTo(0,e),t.lineTo(-r,0),t.closePath()}},ow=Math.sin(Rx/10)/Math.sin(7*Rx/10),aw=Math.sin(qx/10)*ow,uw=-Math.cos(qx/10)*ow,sw={draw:function(t,n){var e=Math.sqrt(.8908130915292852*n),r=aw*e,i=uw*e;t.moveTo(0,-e),t.lineTo(r,i);for(var o=1;o<5;++o){var a=qx*o/5,u=Math.cos(a),s=Math.sin(a);t.lineTo(s*e,-u*e),t.lineTo(u*r-s*i,s*r+u*i)}t.closePath()}},cw={draw:function(t,n){var e=Math.sqrt(n),r=-e/2;t.rect(r,r,e,e)}},lw=Math.sqrt(3),fw={draw:function(t,n){var e=-Math.sqrt(n/(3*lw));t.moveTo(0,2*e),t.lineTo(-lw*e,-e),t.lineTo(lw*e,-e),t.closePath()}},hw=-.5,dw=Math.sqrt(3)/2,pw=1/Math.sqrt(12),vw=3*(pw/2+1),yw={draw:function(t,n){var e=Math.sqrt(n/vw),r=e/2,i=e*pw,o=r,a=e*pw+e,u=-o,s=a;t.moveTo(r,i),t.lineTo(o,a),t.lineTo(u,s),t.lineTo(hw*r-dw*i,dw*r+hw*i),t.lineTo(hw*o-dw*a,dw*o+hw*a),t.lineTo(hw*u-dw*s,dw*u+hw*s),t.lineTo(hw*r+dw*i,hw*i-dw*r),t.lineTo(hw*o+dw*a,hw*a-dw*o),t.lineTo(hw*u+dw*s,hw*s-dw*u),t.closePath()}},mw=[tw,nw,iw,cw,sw,fw,yw],gw=function(){function t(){var t;if(r||(r=t=Re()),n.apply(this,arguments).draw(r,+e.apply(this,arguments)),t)return r=null,t+""||null}var n=Nx(tw),e=Nx(64),r=null;return t.type=function(e){return arguments.length?(n="function"==typeof e?e:Nx(e),t):n},t.size=function(n){return arguments.length?(e="function"==typeof n?n:Nx(+n),t):e},t.context=function(n){return arguments.length?(r=null==n?null:n,t):r},t},_w=function(){};Vs.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:Os(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:Os(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};var bw=function(t){return new Vs(t)};Ls.prototype={areaStart:_w,areaEnd:_w,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x2=t,this._y2=n;break;case 1:this._point=2,this._x3=t,this._y3=n;break;case 2:this._point=3,this._x4=t,this._y4=n,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+n)/6);break;default:Os(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};var xw=function(t){return new Ls(t)};Is.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var e=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+n)/6;this._line?this._context.lineTo(e,r):this._context.moveTo(e,r);break;case 3:this._point=4;default:Os(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};var ww=function(t){return new Is(t)};Rs.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,n=this._y,e=t.length-1;if(e>0)for(var r,i=t[0],o=n[0],a=t[e]-i,u=n[e]-o,s=-1;++s<=e;)r=s/e,this._basis.point(this._beta*t[s]+(1-this._beta)*(i+r*a),this._beta*n[s]+(1-this._beta)*(o+r*u));this._x=this._y=null,this._basis.lineEnd()},point:function(t,n){this._x.push(+t),this._y.push(+n)}};var Mw=function t(n){function e(t){return 1===n?new Vs(t):new Rs(t,n)}return e.beta=function(n){return t(+n)},e}(.85);qs.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:zs(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2,this._x1=t,this._y1=n;break;case 2:this._point=3;default:zs(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Ew=function t(n){function e(t){return new qs(t,n)}return e.tension=function(n){return t(+n)},e}(0);Us.prototype={areaStart:_w,areaEnd:_w,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:zs(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Sw=function t(n){function e(t){return new Us(t,n)}return e.tension=function(n){return t(+n)},e}(0);Bs.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:zs(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Fw=function t(n){function e(t){return new Bs(t,n)}return e.tension=function(n){return t(+n)},e}(0);Hs.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3;default:Ys(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Tw=function t(n){function e(t){return n?new Hs(t,n):new qs(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);Xs.prototype={areaStart:_w,areaEnd:_w,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:Ys(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var kw=function t(n){function e(t){return n?new Xs(t,n):new Us(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);Ws.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Ys(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Cw=function t(n){function e(t){return n?new Ws(t,n):new Bs(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);$s.prototype={areaStart:_w,areaEnd:_w,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,n){t=+t,n=+n,this._point?this._context.lineTo(t,n):(this._point=1,this._context.moveTo(t,n))}};var Nw=function(t){return new $s(t)};Qs.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Js(this,this._t0,Ks(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e=NaN;if(t=+t,n=+n,t!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,Js(this,Ks(this,e=Zs(this,t,n)),e);break;default:Js(this,this._t0,e=Zs(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=e}}},(tc.prototype=Object.create(Qs.prototype)).point=function(t,n){Qs.prototype.point.call(this,n,t)},nc.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,e,r,i,o){this._context.bezierCurveTo(n,t,r,e,o,i)}},ic.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,n=this._y,e=t.length;if(e)if(this._line?this._context.lineTo(t[0],n[0]):this._context.moveTo(t[0],n[0]),2===e)this._context.lineTo(t[1],n[1]);else for(var r=oc(t),i=oc(n),o=0,a=1;a<e;++o,++a)this._context.bezierCurveTo(r[0][o],i[0][o],r[1][o],i[1][o],t[a],n[a]);(this._line||0!==this._line&&1===e)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,n){this._x.push(+t),this._y.push(+n)}};var jw=function(t){return new ic(t)};ac.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,n),this._context.lineTo(t,n);else{var e=this._x*(1-this._t)+t*this._t;this._context.lineTo(e,this._y),this._context.lineTo(e,n)}}this._x=t,this._y=n}};var Aw=function(t){return new ac(t,.5)},Dw=function(t,n){if((i=t.length)>1)for(var e,r,i,o=1,a=t[n[0]],u=a.length;o<i;++o)for(r=a,a=t[n[o]],e=0;e<u;++e)a[e][1]+=a[e][0]=isNaN(r[e][1])?r[e][0]:r[e][1]},Pw=function(t){for(var n=t.length,e=new Array(n);--n>=0;)e[n]=n;return e},Ow=function(){function t(t){var o,a,u=n.apply(this,arguments),s=t.length,c=u.length,l=new Array(c);for(o=0;o<c;++o){for(var f,h=u[o],d=l[o]=new Array(s),p=0;p<s;++p)d[p]=f=[0,+i(t[p],h,p,t)],f.data=t[p];d.key=h}for(o=0,a=e(l);o<c;++o)l[a[o]].index=o;return r(l,a),l}var n=Nx([]),e=Pw,r=Dw,i=cc;return t.keys=function(e){return arguments.length?(n="function"==typeof e?e:Nx(Qx.call(e)),t):n},t.value=function(n){return arguments.length?(i="function"==typeof n?n:Nx(+n),t):i},t.order=function(n){return arguments.length?(e=null==n?Pw:"function"==typeof n?n:Nx(Qx.call(n)),t):e},t.offset=function(n){return arguments.length?(r=null==n?Dw:n,t):r},t},Vw=function(t,n){if((r=t.length)>0){for(var e,r,i,o=0,a=t[0].length;o<a;++o){for(i=e=0;e<r;++e)i+=t[e][o][1]||0;if(i)for(e=0;e<r;++e)t[e][o][1]/=i}Dw(t,n)}},Lw=function(t,n){if((u=t.length)>1)for(var e,r,i,o,a,u,s=0,c=t[n[0]].length;s<c;++s)for(o=a=0,e=0;e<u;++e)(i=(r=t[n[e]][s])[1]-r[0])>=0?(r[0]=o,r[1]=o+=i):i<0?(r[1]=a,r[0]=a+=i):r[0]=o},Iw=function(t,n){if((e=t.length)>0){for(var e,r=0,i=t[n[0]],o=i.length;r<o;++r){for(var a=0,u=0;a<e;++a)u+=t[a][r][1]||0;i[r][1]+=i[r][0]=-u/2}Dw(t,n)}},Rw=function(t,n){if((i=t.length)>0&&(r=(e=t[n[0]]).length)>0){for(var e,r,i,o=0,a=1;a<r;++a){for(var u=0,s=0,c=0;u<i;++u){for(var l=t[n[u]],f=l[a][1]||0,h=l[a-1][1]||0,d=(f-h)/2,p=0;p<u;++p){var v=t[n[p]];d+=(v[a][1]||0)-(v[a-1][1]||0)}s+=f,c+=d*f}e[a-1][1]+=e[a-1][0]=o,s&&(o-=c/s)}e[a-1][1]+=e[a-1][0]=o,Dw(t,n)}},zw=function(t){var n=t.map(lc);return Pw(t).sort(function(t,e){return n[t]-n[e]})},qw=function(t){return zw(t).reverse()},Uw=function(t){var n,e,r=t.length,i=t.map(lc),o=Pw(t).sort(function(t,n){return i[n]-i[t]}),a=0,u=0,s=[],c=[];for(n=0;n<r;++n)e=o[n],a<u?(a+=i[e],s.push(e)):(u+=i[e],c.push(e));return c.reverse().concat(s)},Bw=function(t){return Pw(t).reverse()},Yw=function(t){return function(){return t}};dc.prototype={constructor:dc,insert:function(t,n){var e,r,i;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=mc(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)r=e.U,e===r.L?(i=r.R,i&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.R&&(vc(this,e),t=e,e=t.U),e.C=!1,r.C=!0,yc(this,r))):(i=r.L,i&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.L&&(yc(this,e),t=e,e=t.U),e.C=!1,r.C=!0,vc(this,r))),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,r,i=t.U,o=t.L,a=t.R;if(e=o?a?mc(a):o:a,i?i.L===t?i.L=e:i.R=e:this._=e,o&&a?(r=e.C,e.C=t.C,e.L=o,o.U=e,e!==a?(i=e.U,e.U=t.U,t=e.R,i.L=t,e.R=a,a.U=e):(e.U=i,i=e,t=e.R)):(r=t.C,t=e),t&&(t.U=i),!r){if(t&&t.C)return void(t.C=!1);do{if(t===this._)break;if(t===i.L){if(n=i.R,n.C&&(n.C=!1,i.C=!0,vc(this,i),n=i.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,yc(this,n),n=i.R),n.C=i.C,i.C=n.R.C=!1,vc(this,i),t=this._;break}}else if(n=i.L,n.C&&(n.C=!1,i.C=!0,yc(this,i),n=i.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,vc(this,n),n=i.L),n.C=i.C,i.C=n.L.C=!1,yc(this,i),t=this._;break}n.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var Hw,Xw,Ww,$w,Gw,Zw=[],Kw=[],Jw=1e-6,Qw=1e-12;Uc.prototype={constructor:Uc,polygons:function(){var t=this.edges;return this.cells.map(function(n){var e=n.halfedges.map(function(e){return Fc(n,t[e])});return e.data=n.site.data,e})},triangles:function(){var t=[],n=this.edges;return this.cells.forEach(function(e,r){if(o=(i=e.halfedges).length)for(var i,o,a,u=e.site,s=-1,c=n[i[o-1]],l=c.left===u?c.right:c.left;++s<o;)a=l,c=n[i[s]],l=c.left===u?c.right:c.left,a&&l&&r<a.index&&r<l.index&&zc(u,a,l)<0&&t.push([u.data,a.data,l.data])}),t},links:function(){return this.edges.filter(function(t){return t.right}).map(function(t){return{source:t.left.data,target:t.right.data}})},find:function(t,n,e){for(var r,i,o=this,a=o._found||0,u=o.cells.length;!(i=o.cells[a]);)if(++a>=u)return null;var s=t-i.site[0],c=n-i.site[1],l=s*s+c*c;do{i=o.cells[r=a],a=null,i.halfedges.forEach(function(e){var r=o.edges[e],u=r.left;if(u!==i.site&&u||(u=r.right)){var s=t-u[0],c=n-u[1],f=s*s+c*c;f<l&&(l=f,a=u.index)}})}while(null!==a);return o._found=r,null==e||l<=e*e?i.site:null}};var tM=function(){function t(t){return new Uc(t.map(function(r,i){var o=[Math.round(n(r,i,t)/Jw)*Jw,Math.round(e(r,i,t)/Jw)*Jw];return o.index=i,o.data=r,o}),r)}var n=fc,e=hc,r=null;return t.polygons=function(n){return t(n).polygons()},t.links=function(n){return t(n).links()},t.triangles=function(n){return t(n).triangles()},t.x=function(e){return arguments.length?(n="function"==typeof e?e:Yw(+e),t):n},t.y=function(n){return arguments.length?(e="function"==typeof n?n:Yw(+n),t):e},t.extent=function(n){return arguments.length?(r=null==n?null:[[+n[0][0],+n[0][1]],[+n[1][0],+n[1][1]]],t):r&&[[r[0][0],r[0][1]],[r[1][0],r[1][1]]]},t.size=function(n){return arguments.length?(r=null==n?null:[[0,0],[+n[0],+n[1]]],t):r&&[r[1][0]-r[0][0],r[1][1]-r[0][1]]},t},nM=function(t){return function(){return t}};Yc.prototype={constructor:Yc,scale:function(t){return 1===t?this:new Yc(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new Yc(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var eM=new Yc(1,0,0);Hc.prototype=Yc.prototype;var rM=function(){t.event.preventDefault(),t.event.stopImmediatePropagation()},iM=function(){function n(t){t.property("__zoom",Gc).on("wheel.zoom",c).on("mousedown.zoom",l).on("dblclick.zoom",f).filter(Kc).on("touchstart.zoom",h).on("touchmove.zoom",d).on("touchend.zoom touchcancel.zoom",p).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function e(t,n){return n=Math.max(x,Math.min(w,n)),n===t.k?t:new Yc(n,t.x,t.y)}function r(t,n,e){var r=n[0]-e[0]*t.k,i=n[1]-e[1]*t.k;return r===t.x&&i===t.y?t:new Yc(t.k,r,i)}function i(t,n){var e=t.invertX(n[0][0])-M,r=t.invertX(n[1][0])-E,i=t.invertY(n[0][1])-S,o=t.invertY(n[1][1])-F;return t.translate(r>e?(e+r)/2:Math.min(0,e)||Math.max(0,r),o>i?(i+o)/2:Math.min(0,i)||Math.max(0,o))}function o(t){return[(+t[0][0]+ +t[1][0])/2,(+t[0][1]+ +t[1][1])/2]}function a(t,n,e){t.on("start.zoom",function(){u(this,arguments).start()}).on("interrupt.zoom end.zoom",function(){u(this,arguments).end()}).tween("zoom",function(){var t=this,r=arguments,i=u(t,r),a=_.apply(t,r),s=e||o(a),c=Math.max(a[1][0]-a[0][0],a[1][1]-a[0][1]),l=t.__zoom,f="function"==typeof n?n.apply(t,r):n,h=k(l.invert(s).concat(c/l.k),f.invert(s).concat(c/f.k));return function(t){if(1===t)t=f;else{var n=h(t),e=c/n[2];t=new Yc(e,s[0]-n[0]*e,s[1]-n[1]*e)}i.zoom(null,t)}})}function u(t,n){for(var e,r=0,i=C.length;r<i;++r)if((e=C[r]).that===t)return e;return new s(t,n)}function s(t,n){this.that=t,this.args=n,this.index=-1,this.active=0,this.extent=_.apply(t,n)}function c(){function t(){n.wheel=null,n.end()}if(g.apply(this,arguments)){var n=u(this,arguments),o=this.__zoom,a=Math.max(x,Math.min(w,o.k*Math.pow(2,b.apply(this,arguments)))),s=rf(this);if(n.wheel)n.mouse[0][0]===s[0]&&n.mouse[0][1]===s[1]||(n.mouse[1]=o.invert(n.mouse[0]=s)),clearTimeout(n.wheel);else{if(o.k===a)return;n.mouse=[s,o.invert(s)],Fd(this),n.start()}rM(),n.wheel=setTimeout(t,D),n.zoom("mouse",i(r(e(o,a),n.mouse[0],n.mouse[1]),n.extent))}}function l(){function n(){if(rM(),!o.moved){var n=t.event.clientX-c,e=t.event.clientY-l;o.moved=n*n+e*e>P}o.zoom("mouse",i(r(o.that.__zoom,o.mouse[0]=rf(o.that),o.mouse[1]),o.extent))}function e(){a.on("mousemove.zoom mouseup.zoom",null),xt(t.event.view,o.moved),rM(),o.end()}if(!y&&g.apply(this,arguments)){var o=u(this,arguments),a=zf(t.event.view).on("mousemove.zoom",n,!0).on("mouseup.zoom",e,!0),s=rf(this),c=t.event.clientX,l=t.event.clientY;Hf(t.event.view),Xc(),o.mouse=[s,this.__zoom.invert(s)],Fd(this),o.start()}}function f(){if(g.apply(this,arguments)){var o=this.__zoom,u=rf(this),s=o.invert(u),c=o.k*(t.event.shiftKey?.5:2),l=i(r(e(o,c),u,s),_.apply(this,arguments));rM(),T>0?zf(this).transition().duration(T).call(a,l,u):zf(this).call(n.transform,l)}}function h(){if(g.apply(this,arguments)){var n,e,r,i,o=u(this,arguments),a=t.event.changedTouches,s=a.length;for(Xc(),e=0;e<s;++e)r=a[e],i=Uf(this,a,r.identifier),i=[i,this.__zoom.invert(i),r.identifier],o.touch0?o.touch1||(o.touch1=i):(o.touch0=i,n=!0);if(v&&(v=clearTimeout(v),!o.touch1))return o.end(),void((i=zf(this).on("dblclick.zoom"))&&i.apply(this,arguments));n&&(v=setTimeout(function(){v=null},A),Fd(this),o.start())}}function d(){var n,o,a,s,c=u(this,arguments),l=t.event.changedTouches,f=l.length;for(rM(),v&&(v=clearTimeout(v)),n=0;n<f;++n)o=l[n],a=Uf(this,l,o.identifier),c.touch0&&c.touch0[2]===o.identifier?c.touch0[0]=a:c.touch1&&c.touch1[2]===o.identifier&&(c.touch1[0]=a);if(o=c.that.__zoom,c.touch1){var h=c.touch0[0],d=c.touch0[1],p=c.touch1[0],y=c.touch1[1],m=(m=p[0]-h[0])*m+(m=p[1]-h[1])*m,g=(g=y[0]-d[0])*g+(g=y[1]-d[1])*g;o=e(o,Math.sqrt(m/g)),a=[(h[0]+p[0])/2,(h[1]+p[1])/2],s=[(d[0]+y[0])/2,(d[1]+y[1])/2]}else{if(!c.touch0)return;a=c.touch0[0],s=c.touch0[1]}c.zoom("touch",i(r(o,a,s),c.extent))}function p(){var n,e,r=u(this,arguments),i=t.event.changedTouches,o=i.length;for(Xc(),y&&clearTimeout(y),y=setTimeout(function(){y=null},A),n=0;n<o;++n)e=i[n],r.touch0&&r.touch0[2]===e.identifier?delete r.touch0:r.touch1&&r.touch1[2]===e.identifier&&delete r.touch1;r.touch1&&!r.touch0&&(r.touch0=r.touch1,delete r.touch1),r.touch0?r.touch0[1]=this.__zoom.invert(r.touch0[0]):r.end()}var v,y,g=Wc,_=$c,b=Zc,x=0,w=1/0,M=-w,E=w,S=M,F=E,T=250,k=Kh,C=[],N=m("start","zoom","end"),A=500,D=150,P=0;return n.transform=function(t,n){var e=t.selection?t.selection():t;e.property("__zoom",Gc),t!==e?a(t,n):e.interrupt().each(function(){u(this,arguments).start().zoom(null,"function"==typeof n?n.apply(this,arguments):n).end()})},n.scaleBy=function(t,e){n.scaleTo(t,function(){return this.__zoom.k*("function"==typeof e?e.apply(this,arguments):e)})},n.scaleTo=function(t,a){n.transform(t,function(){var t=_.apply(this,arguments),n=this.__zoom,u=o(t),s=n.invert(u);return i(r(e(n,"function"==typeof a?a.apply(this,arguments):a),u,s),t)})},n.translateBy=function(t,e,r){n.transform(t,function(){return i(this.__zoom.translate("function"==typeof e?e.apply(this,arguments):e,"function"==typeof r?r.apply(this,arguments):r),_.apply(this,arguments))})},n.translateTo=function(t,e,r){n.transform(t,function(){var t=_.apply(this,arguments),n=this.__zoom,a=o(t);return i(eM.translate(a[0],a[1]).scale(n.k).translate("function"==typeof e?-e.apply(this,arguments):-e,"function"==typeof r?-r.apply(this,arguments):-r),t)})},s.prototype={start:function(){return 1==++this.active&&(this.index=C.push(this)-1,this.emit("start")),this},zoom:function(t,n){return this.mouse&&"mouse"!==t&&(this.mouse[1]=n.invert(this.mouse[0])),this.touch0&&"touch"!==t&&(this.touch0[1]=n.invert(this.touch0[0])),this.touch1&&"touch"!==t&&(this.touch1[1]=n.invert(this.touch1[0])),this.that.__zoom=n,this.emit("zoom"),this},end:function(){return 0==--this.active&&(C.splice(this.index,1),this.index=-1,this.emit("end")),this},emit:function(t){j(new Bc(n,t,this.that.__zoom),N.apply,N,[t,this.that,this.args])}},n.wheelDelta=function(t){return arguments.length?(b="function"==typeof t?t:nM(+t),n):b},n.filter=function(t){return arguments.length?(g="function"==typeof t?t:nM(!!t),n):g},n.extent=function(t){return arguments.length?(_="function"==typeof t?t:nM([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),n):_},n.scaleExtent=function(t){return arguments.length?(x=+t[0],w=+t[1],n):[x,w]},n.translateExtent=function(t){return arguments.length?(M=+t[0][0],E=+t[1][0],S=+t[0][1],F=+t[1][1],n):[[M,S],[E,F]]},n.duration=function(t){return arguments.length?(T=+t,n):T},n.interpolate=function(t){return arguments.length?(k=t,n):k},n.on=function(){var t=N.on.apply(N,arguments);return t===N?n:t},n.clickDistance=function(t){return arguments.length?(P=(t=+t)*t,n):Math.sqrt(P)},n};t.version="4.10.0",t.bisect=nl,t.bisectRight=nl,t.bisectLeft=el,t.ascending=Jc,t.bisector=Qc,t.cross=il,t.descending=ol,t.deviation=sl,t.extent=cl,t.histogram=xl,t.thresholdFreedmanDiaconis=Ml,t.thresholdScott=El,t.thresholdSturges=bl,t.max=Sl,t.mean=Fl,t.median=Tl,t.merge=kl,t.min=Cl,t.pairs=rl,t.permute=Nl,t.quantile=wl,t.range=vl,t.scan=jl,t.shuffle=Al,t.sum=Dl,t.ticks=_l,t.tickIncrement=r,t.tickStep=i,t.transpose=Pl,t.variance=ul,t.zip=Ol,t.axisTop=d,t.axisRight=p,t.axisBottom=v,t.axisLeft=y,t.brush=Vp,t.brushX=Pe,t.brushY=Oe,t.brushSelection=De,t.chord=Bp,t.ribbon=Gp,t.nest=Zp,t.set=Je,t.map=Xe,t.keys=Jp,t.values=Qp,t.entries=tv,t.color=Ct,t.rgb=Dt,t.hsl=Lt,t.lab=qt,t.hcl=$t,t.cubehelix=Kt,t.dispatch=m,t.drag=Wf,t.dragDisable=Hf,t.dragEnable=xt,t.dsvFormat=nv,t.csvParse=rv,t.csvParseRows=iv,t.csvFormat=ov,t.csvFormatRows=av,t.tsvParse=sv,t.tsvParseRows=cv,t.tsvFormat=lv,t.tsvFormatRows=fv,t.easeLinear=ue,t.easeQuad=le,t.easeQuadIn=se,t.easeQuadOut=ce,t.easeQuadInOut=le,t.easeCubic=de,t.easeCubicIn=fe,t.easeCubicOut=he,t.easeCubicInOut=de,t.easePoly=Kd,t.easePolyIn=Gd,t.easePolyOut=Zd,t.easePolyInOut=Kd,t.easeSin=ye,t.easeSinIn=pe,t.easeSinOut=ve,t.easeSinInOut=ye,t.easeExp=_e,t.easeExpIn=me,t.easeExpOut=ge,t.easeExpInOut=_e,t.easeCircle=we,t.easeCircleIn=be,t.easeCircleOut=xe,t.easeCircleInOut=we,t.easeBounce=Ee,t.easeBounceIn=Me,t.easeBounceOut=Ee,t.easeBounceInOut=Se,t.easeBack=hp,t.easeBackIn=lp,t.easeBackOut=fp,t.easeBackInOut=hp,t.easeElastic=vp,t.easeElasticIn=pp,t.easeElasticOut=vp,t.easeElasticInOut=yp,t.forceCenter=hv,t.forceCollide=Nv,t.forceLink=jv,t.forceManyBody=Ov,t.forceSimulation=Pv,t.forceX=Vv,t.forceY=Lv,t.formatDefaultLocale=gr,t.formatLocale=Zv,t.formatSpecifier=yr,t.precisionFixed=Kv,t.precisionPrefix=Jv,t.precisionRound=Qv,t.geoArea=im,t.geoBounds=um,t.geoCentroid=cm,t.geoCircle=Em,t.geoClipExtent=jm,t.geoContains=Um,t.geoDistance=Rm,t.geoGraticule=Ti,t.geoGraticule10=ki,t.geoInterpolate=Bm,t.geoLength=Vm,t.geoPath=yg,t.geoAlbers=Fg,t.geoAlbersUsa=Tg,t.geoAzimuthalEqualArea=Cg,t.geoAzimuthalEqualAreaRaw=kg,t.geoAzimuthalEquidistant=jg,t.geoAzimuthalEquidistantRaw=Ng,t.geoConicConformal=Dg,t.geoConicConformalRaw=mo,t.geoConicEqualArea=Sg,t.geoConicEqualAreaRaw=co,t.geoConicEquidistant=Og,t.geoConicEquidistantRaw=_o,t.geoEquirectangular=Pg,t.geoEquirectangularRaw=go,t.geoGnomonic=Vg,t.geoGnomonicRaw=bo,t.geoIdentity=Lg,t.geoProjection=oo,t.geoProjectionMutator=ao,t.geoMercator=Ag,t.geoMercatorRaw=po,t.geoOrthographic=Ig,t.geoOrthographicRaw=wo,t.geoStereographic=Rg,t.geoStereographicRaw=Mo,t.geoTransverseMercator=zg,t.geoTransverseMercatorRaw=Eo,t.geoRotation=Mm,t.geoStream=tm,t.geoTransform=bg,t.cluster=qg,t.hierarchy=Po,t.pack=r_,t.packSiblings=n_,t.packEnclose=t_,t.partition=a_,t.stratify=l_,t.tree=f_,t.treemap=v_,t.treemapBinary=y_,t.treemapDice=o_,t.treemapSlice=h_,t.treemapSliceDice=m_,t.treemapSquarify=p_,t.treemapResquarify=g_,t.interpolate=Bh,t.interpolateArray=Vh,t.interpolateBasis=Nh,t.interpolateBasisClosed=jh,t.interpolateDate=Lh,t.interpolateNumber=Ih,t.interpolateObject=Rh,t.interpolateRound=Yh,t.interpolateString=Uh,t.interpolateTransformCss=$h,t.interpolateTransformSvg=Gh,t.interpolateZoom=Kh,t.interpolateRgb=Dh,t.interpolateRgbBasis=Ph,t.interpolateRgbBasisClosed=Oh,t.interpolateHsl=Jh,t.interpolateHslLong=Qh,t.interpolateLab=yn,t.interpolateHcl=td,t.interpolateHclLong=nd,t.interpolateCubehelix=ed,t.interpolateCubehelixLong=rd,t.quantize=id,t.path=Re,t.polygonArea=__,t.polygonCentroid=b_;t.polygonHull=w_,t.polygonContains=M_,t.polygonLength=E_,t.quadtree=ur,t.queue=Fa,t.randomUniform=k_,t.randomNormal=C_,t.randomLogNormal=N_,t.randomBates=A_,t.randomIrwinHall=j_,t.randomExponential=D_,t.request=P_,t.html=V_,t.json=L_,t.text=I_,t.xml=R_,t.csv=q_,t.tsv=U_,t.scaleBand=ja,t.scalePoint=Da,t.scaleIdentity=Ba,t.scaleLinear=Ua,t.scaleLog=Za,t.scaleOrdinal=Na,t.scaleImplicit=X_,t.scalePow=Ja,t.scaleSqrt=Qa,t.scaleQuantile=tu,t.scaleQuantize=nu,t.scaleThreshold=eu,t.scaleTime=px,t.scaleUtc=vx,t.schemeCategory10=mx,t.schemeCategory20b=gx,t.schemeCategory20c=_x,t.schemeCategory20=bx,t.interpolateCubehelixDefault=xx,t.interpolateRainbow=Sx,t.interpolateWarm=wx,t.interpolateCool=Mx,t.interpolateViridis=Fx,t.interpolateMagma=Tx,t.interpolateInferno=kx,t.interpolatePlasma=Cx,t.scaleSequential=ls,t.creator=Wl,t.local=E,t.matcher=Jl,t.mouse=rf,t.namespace=Xl,t.namespaces=Hl,t.select=zf,t.selectAll=qf,t.selection=_t,t.selector=of,t.selectorAll=uf,t.style=W,t.touch=Uf,t.touches=Bf,t.window=Ff,t.customEvent=j,t.arc=Ux,t.area=Hx,t.line=Yx,t.pie=$x,t.areaRadial=Kx,t.radialArea=Kx,t.lineRadial=Zx,t.radialLine=Zx,t.pointRadial=Jx,t.linkHorizontal=As,t.linkVertical=Ds,t.linkRadial=Ps,t.symbol=gw,t.symbols=mw,t.symbolCircle=tw,t.symbolCross=nw,t.symbolDiamond=iw,t.symbolSquare=cw,t.symbolStar=sw,t.symbolTriangle=fw,t.symbolWye=yw,t.curveBasisClosed=xw,t.curveBasisOpen=ww,t.curveBasis=bw,t.curveBundle=Mw,t.curveCardinalClosed=Sw,t.curveCardinalOpen=Fw,t.curveCardinal=Ew,t.curveCatmullRomClosed=kw,t.curveCatmullRomOpen=Cw,t.curveCatmullRom=Tw,t.curveLinearClosed=Nw,t.curveLinear=Bx,t.curveMonotoneX=ec,t.curveMonotoneY=rc,t.curveNatural=jw,t.curveStep=Aw,t.curveStepAfter=sc,t.curveStepBefore=uc,t.stack=Ow,t.stackOffsetExpand=Vw,t.stackOffsetDiverging=Lw,t.stackOffsetNone=Dw,t.stackOffsetSilhouette=Iw,t.stackOffsetWiggle=Rw,t.stackOrderAscending=zw,t.stackOrderDescending=qw,t.stackOrderInsideOut=Uw,t.stackOrderNone=Pw,t.stackOrderReverse=Bw,t.timeInterval=ru,t.timeMillisecond=tb,t.timeMilliseconds=nb,t.utcMillisecond=tb,t.utcMilliseconds=nb,t.timeSecond=ib,t.timeSeconds=ob,t.utcSecond=ib,t.utcSeconds=ob,t.timeMinute=ab,t.timeMinutes=ub,t.timeHour=sb,t.timeHours=cb,t.timeDay=lb,t.timeDays=fb,t.timeWeek=hb,t.timeWeeks=_b,t.timeSunday=hb,t.timeSundays=_b,t.timeMonday=db,t.timeMondays=bb,t.timeTuesday=pb,t.timeTuesdays=xb,t.timeWednesday=vb,t.timeWednesdays=wb,t.timeThursday=yb,t.timeThursdays=Mb,t.timeFriday=mb,t.timeFridays=Eb,t.timeSaturday=gb,t.timeSaturdays=Sb,t.timeMonth=Fb,t.timeMonths=Tb,t.timeYear=kb,t.timeYears=Cb,t.utcMinute=Nb,t.utcMinutes=jb,t.utcHour=Ab,t.utcHours=Db,t.utcDay=Pb,t.utcDays=Ob,t.utcWeek=Vb,t.utcWeeks=Bb,t.utcSunday=Vb,t.utcSundays=Bb,t.utcMonday=Lb,t.utcMondays=Yb,t.utcTuesday=Ib,t.utcTuesdays=Hb,t.utcWednesday=Rb,t.utcWednesdays=Xb,t.utcThursday=zb,t.utcThursdays=Wb,t.utcFriday=qb,t.utcFridays=$b,t.utcSaturday=Ub,t.utcSaturdays=Gb,t.utcMonth=Zb,t.utcMonths=Kb,t.utcYear=Jb,t.utcYears=tx,t.timeFormatDefaultLocale=rs,t.timeFormatLocale=cu,t.isoFormat=ox,t.isoParse=ax,t.now=_n,t.timer=wn,t.timerFlush=Mn,t.timeout=pd,t.interval=vd,t.transition=oe,t.active=bp,t.interrupt=Fd,t.voronoi=tM,t.zoom=iM,t.zoomTransform=Hc,t.zoomIdentity=eM,Object.defineProperty(t,"__esModule",{value:!0})})},"./node_modules/form-data-to-object/index.js":function(t,n,e){"use strict";function r(t){return Object.keys(t).reduce(function(n,e){var r=e.match(/[^\[]*/i),i=e.match(/\[.*?\]/g)||[];i=[r[0]].concat(i).map(function(t){return t.replace(/\[|\]/g,"")});for(var o=n;i.length;){var a=i.shift();a in o?o=o[a]:(o[a]=i.length?isNaN(i[0])?{}:[]:t[e],o=o[a])}return n},{})}function i(t){function n(t,e,r){return Array.isArray(r)||"[object Object]"===Object.prototype.toString.call(r)?(Object.keys(r).forEach(function(i){n(t,e+"["+i+"]",r[i])}),t):(t[e]=r,t)}return Object.keys(t).reduce(function(e,r){return n(e,r,t[r])},{})}t.exports={fromObj:i,toObj:r}},"./node_modules/formsy-react/lib/Decorator.js":function(t,n,e){"use strict";(function(n){var r=Object.assign||function(t){for(var n=1;n<arguments.length;n++){var e=arguments[n];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])}return t},i=n.React||e("./node_modules/react/react.js"),o=e("./node_modules/create-react-class/index.js"),a=e("./node_modules/formsy-react/lib/Mixin.js");t.exports=function(){return function(t){return o({mixins:[a],render:function(){return i.createElement(t,r({setValidations:this.setValidations,setValue:this.setValue,resetValue:this.resetValue,getValue:this.getValue,hasValue:this.hasValue,getErrorMessage:this.getErrorMessage,getErrorMessages:this.getErrorMessages,isFormDisabled:this.isFormDisabled,isValid:this.isValid,isPristine:this.isPristine,isFormSubmitted:this.isFormSubmitted,isRequired:this.isRequired,showRequired:this.showRequired,showError:this.showError,isValidValue:this.isValidValue},this.props))}})}}}).call(n,e("./node_modules/webpack/buildin/global.js"))},"./node_modules/formsy-react/lib/HOC.js":function(t,n,e){"use strict";(function(n){function r(t){return t.displayName||t.name||("string"==typeof t?t:"Component")}var i=Object.assign||function(t){for(var n=1;n<arguments.length;n++){var e=arguments[n];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])}return t},o=n.React||e("./node_modules/react/react.js"),a=e("./node_modules/create-react-class/index.js"),u=e("./node_modules/formsy-react/lib/Mixin.js");t.exports=function(t){return a({displayName:"Formsy("+r(t)+")",mixins:[u],render:function(){var n=this.props.innerRef,e=i({setValidations:this.setValidations,setValue:this.setValue,resetValue:this.resetValue,getValue:this.getValue,hasValue:this.hasValue,getErrorMessage:this.getErrorMessage,getErrorMessages:this.getErrorMessages,isFormDisabled:this.isFormDisabled,isValid:this.isValid,isPristine:this.isPristine,isFormSubmitted:this.isFormSubmitted,isRequired:this.isRequired,showRequired:this.showRequired,showError:this.showError,isValidValue:this.isValidValue},this.props);return n&&(e.ref=n),o.createElement(t,e)}})}}).call(n,e("./node_modules/webpack/buildin/global.js"))},"./node_modules/formsy-react/lib/Mixin.js":function(t,n,e){"use strict";(function(n){var r=e("./node_modules/prop-types/index.js"),i=e("./node_modules/formsy-react/lib/utils.js"),o=(n.React||e("./node_modules/react/react.js"),function(t){return"string"==typeof t?t.split(/\,(?![^{\[]*[}\]])/g).reduce(function(t,n){var e=n.split(":"),r=e.shift();if(e=e.map(function(t){try{return JSON.parse(t)}catch(n){return t}}),e.length>1)throw new Error("Formsy does not support multiple args on string validations. Use object format of validations instead.");return t[r]=!e.length||e[0],t},{}):t||{}});t.exports={getInitialState:function(){return{_value:this.props.value,_isRequired:!1,_isValid:!0,_isPristine:!0,_pristineValue:this.props.value,_validationError:[],_externalError:null,_formSubmitted:!1}},contextTypes:{formsy:r.object},getDefaultProps:function(){return{validationError:"",validationErrors:{}}},componentWillMount:function(){var t=function(){this.setValidations(this.props.validations,this.props.required),this.context.formsy.attachToForm(this)}.bind(this);if(!this.props.name)throw new Error("Form Input requires a name property when used");t()},componentWillReceiveProps:function(t){this.setValidations(t.validations,t.required)},componentDidUpdate:function(t){i.isSame(this.props.value,t.value)||this.setValue(this.props.value),i.isSame(this.props.validations,t.validations)&&i.isSame(this.props.required,t.required)||this.context.formsy.validate(this)},componentWillUnmount:function(){this.context.formsy.detachFromForm(this)},setValidations:function(t,n){this._validations=o(t)||{},this._requiredValidations=!0===n?{isDefaultRequiredValue:!0}:o(n)},setValue:function(t){this.setState({_value:t,_isPristine:!1},function(){this.context.formsy.validate(this)}.bind(this))},resetValue:function(){this.setState({_value:this.state._pristineValue,_isPristine:!0},function(){this.context.formsy.validate(this)})},getValue:function(){return this.state._value},hasValue:function(){return""!==this.state._value},getErrorMessage:function(){var t=this.getErrorMessages();return t.length?t[0]:null},getErrorMessages:function(){return!this.isValid()||this.showRequired()?this.state._externalError||this.state._validationError||[]:[]},isFormDisabled:function(){return this.context.formsy.isFormDisabled()},isValid:function(){return this.state._isValid},isPristine:function(){return this.state._isPristine},isFormSubmitted:function(){return this.state._formSubmitted},isRequired:function(){return!!this.props.required},showRequired:function(){return this.state._isRequired},showError:function(){return!this.showRequired()&&!this.isValid()},isValidValue:function(t){return this.context.formsy.isValidValue.call(null,this,t)}}}).call(n,e("./node_modules/webpack/buildin/global.js"))},"./node_modules/formsy-react/lib/main.js":function(t,n,e){"use strict";(function(n){function r(t,n){var e={};for(var r in t)n.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=Object.assign||function(t){for(var n=1;n<arguments.length;n++){var e=arguments[n];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])}return t},a="function"==typeof Symbol&&"symbol"===i(Symbol.iterator)?function(t){return void 0===t?"undefined":i(t)}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":void 0===t?"undefined":i(t)},u=e("./node_modules/prop-types/index.js"),s=n.React||e("./node_modules/react/react.js"),c=e("./node_modules/create-react-class/index.js"),l={},f=e("./node_modules/formsy-react/lib/validationRules.js"),h=e("./node_modules/form-data-to-object/index.js"),d=e("./node_modules/formsy-react/lib/utils.js"),p=e("./node_modules/formsy-react/lib/Mixin.js"),v=e("./node_modules/formsy-react/lib/HOC.js"),y=e("./node_modules/formsy-react/lib/Decorator.js"),m={},g=[];l.Mixin=p,l.HOC=v,l.Decorator=y,l.defaults=function(t){m=t},l.addValidationRule=function(t,n){f[t]=n},l.Form=c({displayName:"Formsy",getInitialState:function(){return{isValid:!0,isSubmitting:!1,canChange:!1}},getDefaultProps:function(){return{onSuccess:function(){},onError:function(){},onSubmit:function(){},onValidSubmit:function(){},onInvalidSubmit:function(){},onValid:function(){},onInvalid:function(){},onChange:function(){},validationErrors:null,preventExternalInvalidation:!1}},childContextTypes:{formsy:u.object},getChildContext:function(){var t=this;return{formsy:{attachToForm:this.attachToForm,detachFromForm:this.detachFromForm,validate:this.validate,isFormDisabled:this.isFormDisabled,isValidValue:function(n,e){return t.runValidation(n,e).isValid}}}},componentWillMount:function(){this.inputs=[]},componentDidMount:function(){this.validateForm()},componentWillUpdate:function(){this.prevInputNames=this.inputs.map(function(t){return t.props.name})},componentDidUpdate:function(){this.props.validationErrors&&"object"===a(this.props.validationErrors)&&Object.keys(this.props.validationErrors).length>0&&this.setInputValidationErrors(this.props.validationErrors);var t=this.inputs.map(function(t){return t.props.name});d.arraysDiffer(this.prevInputNames,t)&&this.validateForm()},reset:function(t){this.setFormPristine(!0),this.resetModel(t)},submit:function(t){t&&t.preventDefault(),this.setFormPristine(!1);var n=this.getModel();this.props.onSubmit(n,this.resetModel,this.updateInputsWithError),this.state.isValid?this.props.onValidSubmit(n,this.resetModel,this.updateInputsWithError):this.props.onInvalidSubmit(n,this.resetModel,this.updateInputsWithError)},mapModel:function(t){return this.props.mapping?this.props.mapping(t):h.toObj(Object.keys(t).reduce(function(n,e){for(var r=e.split("."),i=n;r.length;){var o=r.shift();i=i[o]=r.length?i[o]||{}:t[e]}return n},{}))},getModel:function(){var t=this.getCurrentValues();return this.mapModel(t)},resetModel:function(t){this.inputs.forEach(function(n){var e=n.props.name;t&&t.hasOwnProperty(e)?n.setValue(t[e]):n.resetValue()}),this.validateForm()},setInputValidationErrors:function(t){this.inputs.forEach(function(n){var e=n.props.name,r=[{_isValid:!(e in t),_validationError:"string"==typeof t[e]?[t[e]]:t[e]}];n.setState.apply(n,r)})},isChanged:function(){return!d.isSame(this.getPristineValues(),this.getCurrentValues())},getPristineValues:function(){return this.inputs.reduce(function(t,n){return t[n.props.name]=n.props.value,t},{})},updateInputsWithError:function(t){var n=this;Object.keys(t).forEach(function(e,r){var i=d.find(n.inputs,function(t){return t.props.name===e});if(!i)throw new Error("You are trying to update an input that does not exist. Verify errors object with input names. "+JSON.stringify(t));var o=[{_isValid:n.props.preventExternalInvalidation||!1,_externalError:"string"==typeof t[e]?[t[e]]:t[e]}];i.setState.apply(i,o)})},isFormDisabled:function(){return this.props.disabled},getCurrentValues:function(){return this.inputs.reduce(function(t,n){return t[n.props.name]=n.state._value,t},{})},setFormPristine:function(t){this.setState({_formSubmitted:!t}),this.inputs.forEach(function(n,e){n.setState({_formSubmitted:!t,_isPristine:t})})},validate:function(t){this.state.canChange&&this.props.onChange(this.getCurrentValues(),this.isChanged());var n=this.runValidation(t);t.setState({_isValid:n.isValid,_isRequired:n.isRequired,_validationError:n.error,_externalError:null},this.validateForm)},runValidation:function(t,n){var e=this.getCurrentValues(),r=t.props.validationErrors,i=t.props.validationError;n=2===arguments.length?n:t.state._value;var o=this.runRules(n,e,t._validations),a=this.runRules(n,e,t._requiredValidations);"function"==typeof t.validate&&(o.failed=t.validate()?[]:["failed"]);var u=!!Object.keys(t._requiredValidations).length&&!!a.success.length,s=!(o.failed.length||this.props.validationErrors&&this.props.validationErrors[t.props.name]);return{isRequired:u,isValid:!u&&s,error:function(){if(s&&!u)return g;if(o.errors.length)return o.errors;if(this.props.validationErrors&&this.props.validationErrors[t.props.name])return"string"==typeof this.props.validationErrors[t.props.name]?[this.props.validationErrors[t.props.name]]:this.props.validationErrors[t.props.name];if(u){var n=r[a.success[0]];return n?[n]:null}return o.failed.length?o.failed.map(function(t){return r[t]?r[t]:i}).filter(function(t,n,e){return e.indexOf(t)===n}):void 0}.call(this)}},runRules:function(t,n,e){var r={errors:[],failed:[],success:[]};return Object.keys(e).length&&Object.keys(e).forEach(function(i){if(f[i]&&"function"==typeof e[i])throw new Error("Formsy does not allow you to override default validations: "+i);if(!f[i]&&"function"!=typeof e[i])throw new Error("Formsy does not have the validation rule: "+i);if("function"==typeof e[i]){var o=e[i](n,t);return void("string"==typeof o?(r.errors.push(o),r.failed.push(i)):o||r.failed.push(i))}if("function"!=typeof e[i]){var o=f[i](n,t,e[i]);return void("string"==typeof o?(r.errors.push(o),r.failed.push(i)):o?r.success.push(i):r.failed.push(i))}return r.success.push(i)}),r},validateForm:function(){var t=this,n=function(){var t=this.inputs.every(function(t){return t.state._isValid});this.setState({isValid:t}),t?this.props.onValid():this.props.onInvalid(),this.setState({canChange:!0})}.bind(this);this.inputs.forEach(function(e,r){var i=t.runValidation(e);i.isValid&&e.state._externalError&&(i.isValid=!1),e.setState({_isValid:i.isValid,_isRequired:i.isRequired,_validationError:i.error,_externalError:!i.isValid&&e.state._externalError?e.state._externalError:null},r===t.inputs.length-1?n:null)}),this.inputs.length||this.setState({canChange:!0})},attachToForm:function(t){-1===this.inputs.indexOf(t)&&this.inputs.push(t),this.validate(t)},detachFromForm:function(t){var n=this.inputs.indexOf(t);-1!==n&&(this.inputs=this.inputs.slice(0,n).concat(this.inputs.slice(n+1))),this.validateForm()},render:function(){var t=this.props,n=(t.mapping,t.validationErrors,t.onSubmit,t.onValid,t.onValidSubmit,t.onInvalid,t.onInvalidSubmit,t.onChange,t.reset,t.preventExternalInvalidation,t.onSuccess,t.onError,r(t,["mapping","validationErrors","onSubmit","onValid","onValidSubmit","onInvalid","onInvalidSubmit","onChange","reset","preventExternalInvalidation","onSuccess","onError"]));return s.createElement("form",o({},n,{onSubmit:this.submit}),this.props.children)}}),n.exports||n.module||n.define&&n.define.amd||(n.Formsy=l),t.exports=l}).call(n,e("./node_modules/webpack/buildin/global.js"))},"./node_modules/formsy-react/lib/utils.js":function(t,n,e){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i="function"==typeof Symbol&&"symbol"===r(Symbol.iterator)?function(t){return void 0===t?"undefined":r(t)}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":void 0===t?"undefined":r(t)};t.exports={arraysDiffer:function(t,n){var e=!1;return t.length!==n.length?e=!0:t.forEach(function(t,r){this.isSame(t,n[r])||(e=!0)},this),e},objectsDiffer:function(t,n){var e=!1;return Object.keys(t).length!==Object.keys(n).length?e=!0:Object.keys(t).forEach(function(r){this.isSame(t[r],n[r])||(e=!0)},this),e},isSame:function(t,n){return(void 0===t?"undefined":i(t))===(void 0===n?"undefined":i(n))&&(Array.isArray(t)&&Array.isArray(n)?!this.arraysDiffer(t,n):"function"==typeof t?t.toString()===n.toString():"object"===(void 0===t?"undefined":i(t))&&null!==t&&null!==n?!this.objectsDiffer(t,n):t===n)},find:function(t,n){for(var e=0,r=t.length;e<r;e++){var i=t[e];if(n(i))return i}return null}}},"./node_modules/formsy-react/lib/validationRules.js":function(t,n,e){"use strict";var r=function(t){return null!==t&&void 0!==t},i=function(t){return""===t},o={isDefaultRequiredValue:function(t,n){return void 0===n||""===n},isExisty:function(t,n){return r(n)},matchRegexp:function(t,n,e){return!r(n)||i(n)||e.test(n)},isUndefined:function(t,n){return void 0===n},isEmptyString:function(t,n){return i(n)},isEmail:function(t,n){return o.matchRegexp(t,n,/^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i)},isUrl:function(t,n){return o.matchRegexp(t,n,/^(https?|s?ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i)},isTrue:function(t,n){return!0===n},isFalse:function(t,n){return!1===n},isNumeric:function(t,n){return"number"==typeof n||o.matchRegexp(t,n,/^[-+]?(?:\d*[.])?\d+$/)},isAlpha:function(t,n){return o.matchRegexp(t,n,/^[A-Z]+$/i)},isAlphanumeric:function(t,n){return o.matchRegexp(t,n,/^[0-9A-Z]+$/i)},isInt:function(t,n){return o.matchRegexp(t,n,/^(?:[-+]?(?:0|[1-9]\d*))$/)},isFloat:function(t,n){return o.matchRegexp(t,n,/^(?:[-+]?(?:\d+))?(?:\.\d*)?(?:[eE][\+\-]?(?:\d+))?$/)},isWords:function(t,n){return o.matchRegexp(t,n,/^[A-Z\s]+$/i)},isSpecialWords:function(t,n){return o.matchRegexp(t,n,/^[A-Z\s\u00C0-\u017F]+$/i)},isLength:function(t,n,e){return!r(n)||i(n)||n.length===e},equals:function(t,n,e){return!r(n)||i(n)||n==e},equalsField:function(t,n,e){return n==t[e]},maxLength:function(t,n,e){return!r(n)||n.length<=e},minLength:function(t,n,e){return!r(n)||i(n)||n.length>=e}};t.exports=o},"./src/components/Auth/Field/Field.js":function(t,n,e){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}function o(t,n){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?t:n}function a(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(t,n):t.__proto__=n)}Object.defineProperty(n,"__esModule",{value:!0});var u=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),s=e("./node_modules/react/react.js"),c=r(s),l=e("./node_modules/formsy-react/lib/main.js"),f=(r(l),e("./node_modules/prop-types/index.js")),h=r(f),d=function(t){function n(t){i(this,n);var e=o(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,t));return e.changeValue=function(t){e.props.setValue(t.currentTarget["checkbox"===e.props.type?"checked":"value"])},e}return a(n,t),u(n,[{key:"render",value:function(){var t=this.props.getErrorMessage();return c.default.createElement("div",{className:"signup-field-group"},c.default.createElement("label",{htmlFor:this.props.name.toLowerCase(),className:"signup-form__label"},this.props.name),c.default.createElement("input",{onChange:this.changeValue,value:this.props.getValue(),type:this.props.type||"text",name:this.props.name.toLowerCase(),className:"signup-form__input-field"}),c.default.createElement("p",{className:"caption signup-form__caption"},this.props.text),c.default.createElement("span",{className:"signup-form__error-message"},t))}}]),n}(c.default.Component);d.propTypes={name:h.default.string,text:h.default.string,className:h.default.string,type:h.default.string,setValue:h.default.any,getValue:h.default.func,validations:h.default.any,getErrorMessage:h.default.func,registration:h.default.func},n.default=(0,l.HOC)(d)},"./src/components/Chart/Axis/Axis.js":function(t,n,e){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}function o(t,n){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?t:n}function a(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(t,n):t.__proto__=n)}Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var u=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),s=e("./node_modules/react/react.js"),c=r(s),l=e("./node_modules/d3/build/d3.js"),f=function(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var e in t)Object.prototype.hasOwnProperty.call(t,e)&&(n[e]=t[e]);return n.default=t,n}(l),h=e("./node_modules/react-dom/index.js"),d=(r(h),e("./node_modules/prop-types/index.js")),p=r(d),v=function(t){function n(){return i(this,n),o(this,(n.__proto__||Object.getPrototypeOf(n)).apply(this,arguments))}return a(n,t),u(n,[{key:"componentDidUpdate",value:function(){this.renderAxis()}},{key:"componentDidMount",value:function(){this.renderAxis()}},{key:"renderAxis",value:function(){var t="axis"+this.props.orient,n=f[t](this.props.scale).ticks(this.props.ticks);this.props.format&&(n=n.tickFormat(f.timeFormat(this.props.format))),f.select(this.axisElement).call(n)}},{key:"render",value:function(){var t=this,n="translate(0,"+this.props.h+")";return c.default.createElement("g",{className:"axis",ref:function(n){t.axisElement=n},transform:"x"===this.props.axisType?n:""})}}]),n}(s.Component);n.default=v,v.propTypes={h:p.default.number,orient:p.default.oneOf(["Left","Bottom","Right","Top"]),scale:p.default.func,axisType:p.default.oneOf(["x","y"]),ticks:p.default.number,format:p.default.string}},"./src/components/Chart/Chart.js":function(t,n,e){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}function o(t,n){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?t:n}function a(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(t,n):t.__proto__=n)}Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var u=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),s=e("./node_modules/react/react.js"),c=r(s),l=e("./node_modules/prop-types/index.js"),f=r(l),h=e("./src/components/Chart/LineChart/LineChart.js"),d=r(h),p=function(t){function n(t){i(this,n);var e=o(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,t));return e.setChildWidth=function(){e.setState({calcWidth:e.getElementWidth()})},e.state={calcWidth:200},e}return a(n,t),u(n,[{key:"componentDidMount",value:function(){window.addEventListener("resize",this.setChildWidth),this.setChildWidth()}},{key:"componentWillUnmount",value:function(){window.removeEventListener("resize",this.setChildWidth)}},{key:"getElementWidth",value:function(){return this.div.offsetWidth}},{key:"render",value:function(){var t=this;return c.default.createElement("div",{className:this.props.styleName,ref:function(n){t.div=n}},c.default.createElement(d.default,{width:this.state.calcWidth,data:this.props.data}))}}]),n}(c.default.Component);n.default=p,p.propTypes={parent:f.default.string,styleName:f.default.string,data:f.default.array}},"./src/components/Chart/Dots/Dots.js":function(t,n,e){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(n,"__esModule",{value:!0}),n.Dots=void 0;var i=e("./node_modules/react/react.js"),o=r(i),a=e("./node_modules/prop-types/index.js"),u=r(a);(n.Dots=function(t){return o.default.createElement("g",null,t.data.map(function(n,e){return o.default.createElement("circle",{className:"dot",r:"5",cx:t.x(n.date),cy:t.y(n[t.yData]),key:e})}))}).propTypes={data:u.default.array,yData:u.default.string,x:u.default.func,y:u.default.func}},"./src/components/Chart/Grid/Grid.js":function(t,n,e){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}function o(t,n){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?t:n}function a(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(t,n):t.__proto__=n)}Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var u=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),s=e("./node_modules/react/react.js"),c=r(s),l=e("./node_modules/d3/build/d3.js"),f=function(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var e in t)Object.prototype.hasOwnProperty.call(t,e)&&(n[e]=t[e]);return n.default=t,n}(l),h=e("./node_modules/react-dom/index.js"),d=(r(h),e("./node_modules/prop-types/index.js")),p=r(d),v=function(t){function n(){return i(this,n),o(this,(n.__proto__||Object.getPrototypeOf(n)).apply(this,arguments))}return a(n,t),u(n,[{key:"componentDidUpdate",value:function(){this.renderGrid()}},{key:"componentDidMount",value:function(){this.renderGrid()}},{key:"renderGrid",value:function(){var t="axis"+this.props.orient,n=f[t](this.props.scale).ticks(this.props.ticks).tickSize(-this.props.len,0,0).tickFormat("");f.select(this.gridElement).call(n)}},{key:"render",value:function(){var t=this,n="translate(0,"+this.props.h+")";return c.default.createElement("g",{className:"grid",ref:function(n){t.gridElement=n},transform:"x"===this.props.gridType?n:""})}}]),n}(s.Component);n.default=v,v.propTypes={h:p.default.number,orient:p.default.oneOf(["Left","Bottom","Right","Top"]),scale:p.default.func,gridType:p.default.oneOf(["x","y"]),ticks:p.default.number,len:p.default.number}},"./src/components/Chart/LineChart/LineChart.js":function(t,n,e){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}function o(t,n){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?t:n}function a(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(t,n):t.__proto__=n)}Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var u=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}();e("./src/components/Chart/LineChart/index.scss");var s=e("./node_modules/react/react.js"),c=r(s),l=e("./node_modules/d3/build/d3.js"),f=function(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var e in t)Object.prototype.hasOwnProperty.call(t,e)&&(n[e]=t[e]);return n.default=t,n}(l),h=e("./node_modules/prop-types/index.js"),d=r(h),p=e("./src/components/Chart/Dots/Dots.js"),v=e("./src/components/Chart/Grid/Grid.js"),y=r(v),m=e("./src/components/Chart/Axis/Axis.js"),g=r(m),_=function(t){function n(t){return i(this,n),o(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,t))}return a(n,t),u(n,[{key:"render",value:function(){var t=this,n={top:20,right:20,bottom:20,left:50},e=this.props.width-(n.left+n.right),r=this.props.height-(n.top+n.bottom),i=f.timeParse("%H-%M");this.data=this.props.data.map(function(n){return Object.assign({},n,{date:i(n[t.props.xData])})});var o=f.scaleTime().domain(f.extent(this.data,function(t){return t.date})).rangeRound([0,e]),a=f.scaleLinear().domain([0,500]).range([r,0]),u=f.line().x(function(t){return o(t.date)}).y(function(n){return a(n[t.props.yData])}).curve(f.curveCardinal),s="translate("+n.left+","+n.top+")";return c.default.createElement("div",{className:this.props.styleName,style:{width:this.props.width,height:this.props.height}},c.default.createElement("svg",{width:"100%",height:"100%"},c.default.createElement("g",{transform:s},c.default.createElement(y.default,{h:r,len:r,scale:o,gridType:"x",orient:"Bottom",ticks:2*this.data.length}),c.default.createElement(y.default,{h:r,len:e,scale:a,gridType:"y",orient:"Left",ticks:6}),c.default.createElement(g.default,{h:r,orient:"Left",scale:a,axisType:"y",ticks:6}),c.default.createElement(g.default,{h:r,orient:"Bottom",scale:o,axisType:"x",ticks:8,format:"%H:%M"}),c.default.createElement(p.Dots,{x:o,y:a,data:this.data,yData:this.props.yData}),c.default.createElement("path",{className:"line shadow",d:u(this.data),strokeLinecap:"round"}))))}}]),n}(s.Component);n.default=_,_.propTypes={width:d.default.number,height:d.default.number,xData:d.default.string,yData:d.default.string,data:d.default.array,styleName:d.default.string},_.defaultProps={width:800,height:300,xData:"day",yData:"count",data:[{day:"4-01",count:310},{day:"4-02",count:430},{day:"4-03",count:180},{day:"4-04",count:150},{day:"4-05",count:180},{day:"4-06",count:250},{day:"4-07",count:110},{day:"4-08",count:230},{day:"4-09",count:480},{day:"4-10",count:250},{day:"4-11",count:380},{day:"4-12",count:50}]}},"./src/components/Chart/LineChart/index.scss":function(t,n){},"./src/components/DeviceForm/deviceForm.js":function(t,n,e){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}function o(t,n){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?t:n}function a(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(t,n):t.__proto__=n)}function u(t){return{settings:t.builder.device,status:t.builder.uploadStatus,locations:t.builder.locations,deviceInLocation:t.builder.deviceInLocation}}function s(t){return{setValue:(0,p.bindActionCreators)(v.setValue,t),addItem:(0,p.bindActionCreators)(v.addItem,t),resetProto:(0,p.bindActionCreators)(v.resetProto,t),addDevice:(0,p.bindActionCreators)(v.addDevice,t),updateDevice:function(n,e){return t((0,E.updateDevice)(n,e))},loadLocations:function(){return t((0,v.loadLocations)())},addLocation:function(n){return t((0,v.addLocation)(n))},deleteLocation:function(n){return t((0,v.deleteLocation)(n))},deviceExistInLocation:function(n,e){return t((0,v.devicesInLocation)(n,e))},deviceUpdateUploadStatus:function(){return t((0,v.deviceUpdateUploadStatus)())}}}Object.defineProperty(n,"__esModule",{value:!0});var c=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}();e("./src/components/DeviceForm/deviceForm.scss");var l=e("./node_modules/react/react.js"),f=r(l),h=e("./node_modules/prop-types/index.js"),d=r(h),p=e("./node_modules/redux/es/index.js"),v=e("./src/actions/builder.action.js"),y=e("./node_modules/react-redux/es/index.js"),m=e("./node_modules/formsy-react/lib/main.js"),g=r(m),_=e("./src/components/Auth/Field/Field.js"),b=r(_),x=e("./src/components/SelectLocation/SelectLocation.js"),w=r(x),M=e("./src/utils/utils.js"),E=e("./src/actions/devices.action.js"),S=["Toggle","Timer","LineChart","Value","Range"],F=function(t){function n(t){i(this,n);var e=o(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,t));return e.addItem=function(t){var n={name:t.target.value};(0,M.setItemDefaultData)(n),e.props.addItem(n)},e.createButton=function(t,n){return f.default.createElement("input",{key:n,type:"button",className:"form-button",onClick:e.addItem,value:t})},e.handleUserInput=function(){e.props.setValue("name",e.name.getValue())},e.selectLocation=function(t){e.props.setValue("location",t)},e.handleSubmit=function(){void 0!==e.props.settings._id?(e.props.updateDevice(e.props.settings,e.props.settings._id),e.props.deviceUpdateUploadStatus()):e.props.addDevice(e.props.settings)},e.enableButton=function(){e.setState({canSubmit:!0})},e.disableButton=function(){e.setState({canSubmit:!1})},e.state={items:[]},e}return a(n,t),c(n,[{key:"componentDidMount",value:function(){this.props.loadLocations()}},{key:"createButtons",value:function(){return S.map(this.createButton)}},{key:"render",value:function(){var t=this,n=this.props.settings.location;return f.default.createElement(g.default.Form,{onSubmit:this.handleSubmit,onValid:this.enableButton,onInvalid:this.disableButton,onChange:this.handleUserInput,className:"device-form"},f.default.createElement(b.default,{name:"Device name",type:"text",ref:function(n){t.name=n},text:"Please enter device name",validations:{matchRegexp:/[\w\d\s]+/},validationError:"This is not a valid name",required:!0,value:this.props.settings.name}),f.default.createElement("div",{className:"input-container"},f.default.createElement("label",null,"Location:"),f.default.createElement(w.default,{selectLocation:this.selectLocation,locations:this.props.locations,addLocation:this.props.addLocation,deleteLocation:this.props.deleteLocation,defaultLocation:n,deviceExistInLocation:this.props.deviceExistInLocation,deviceInLocation:this.props.deviceInLocation})),f.default.createElement("div",null,f.default.createElement("label",null," Device config:"),this.createButtons()),f.default.createElement("div",{className:"main-button-wrap signup-field-group signup-btn-group"},f.default.createElement("input",{className:"btn btn--primary btn--signup btn--signup-active",type:"submit",value:"Save",disabled:!this.state.canSubmit||"PENDING"===this.props.status})))}}]),n}(f.default.Component);n.default=(0,y.connect)(u,s)(F),F.propTypes={setValue:d.default.func,addItem:d.default.func,resetProto:d.default.func,addDevice:d.default.func,settings:d.default.object,status:d.default.string,updateDevice:d.default.func,loadLocations:d.default.func,locations:d.default.array,addLocation:d.default.func,deleteLocation:d.default.func,deviceInLocation:d.default.bool,deviceExistInLocation:d.default.func,deviceUpdateUploadStatus:d.default.func}},"./src/components/DeviceForm/deviceForm.scss":function(t,n){},"./src/components/Prototype/Prototype.js":function(t,n,e){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t){return{settings:t.builder.device}}function o(t){return{addDescription:(0,d.bindActionCreators)(h.addDescription,t),setItemValue:(0,d.bindActionCreators)(h.setItemValue,t),setParameters:(0,d.bindActionCreators)(h.setParameters,t)}}Object.defineProperty(n,"__esModule",{value:!0});var a=e("./node_modules/react/react.js"),u=r(a),s=e("./node_modules/prop-types/index.js"),c=r(s),l=e("./node_modules/react-redux/es/index.js");e("./src/components/Prototype/index.scss");var f=e("./src/components/SettingsList/SettingsList.js"),h=e("./src/actions/builder.action.js"),d=e("./node_modules/redux/es/index.js"),p=function(t){return u.default.createElement("div",{className:"Prototype"},u.default.createElement("h3",null,t.device.name||"Device name"),u.default.createElement(f.SettingsList,{addDescription:t.addDescription,settings:t.device,deleteItem:t.deleteItem,setItemValue:t.setItemValue,setParameters:t.setParameters}))};p.propTypes={device:c.default.object,addDescription:c.default.func,deleteItem:c.default.func,setItemValue:c.default.func,settings:c.default.object,setParameters:c.default.func},n.default=(0,l.connect)(i,o)(p)},"./src/components/Prototype/index.scss":function(t,n){},"./src/components/RangeSettings/Range.js":function(t,n,e){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}function o(t,n){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?t:n}function a(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(t,n):t.__proto__=n)}Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var u=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),s=e("./node_modules/react/react.js"),c=r(s),l=e("./node_modules/prop-types/index.js"),f=r(l);e("./src/components/RangeSettings/RangeStyle.scss");var h=function(t){function n(t){i(this,n);var e=o(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,t));e.onChange=function(t){e.setState({value:t.target.value}),void 0!==e.props.onTimerChange&&e.props.onTimerChange(t)},e.setValue=function(t){void 0!==e.props.setTimerValue?e.props.setTimerValue():e.props.setItemValue(e.state.value,e.props.itemId,e.props.deviceId)},e.setParams=function(){var t={minValue:e.state.params.minValue||0,maxValue:e.state.params.maxValue||100};e.props.setParameters(e.props.itemId,t)};var r=void 0,a=void 0;return e.props.params&&(r=e.props.params.minValue,a=e.props.params.maxValue),e.state={value:0,params:{minValue:r||0,maxValue:a||100}},e.setMinValue=function(t){var n=parseInt(t.target.value)||"";n<=e.state.params.maxValue?e.setState({params:{minValue:n,maxValue:e.state.params.maxValue}}):(t.target.setCustomValidity("Value shoud be less then "+a),t.target.reportValidity())},e.setMaxValue=function(t){var n=parseInt(t.target.value)||"";n>e.state.params.minValue?e.setState({params:{maxValue:n,minValue:e.state.params.minValue}}):(t.target.setCustomValidity("Value shoud be more then "+r),t.target.reportValidity())},e}return a(n,t),u(n,[{key:"componentDidMount",value:function(){void 0!==this.props.data&&this.setState({value:this.props.data})}},{key:"componentWillReceiveProps",value:function(t){this.setState({value:t.data||0})}},{key:"render",value:function(){var t=this.props,n=t.min,e=t.max;return c.default.createElement("div",{className:""+this.props.styleName},this.props.showMinMax?c.default.createElement("div",{className:"range-settings"},c.default.createElement("p",{className:"range-settings__title"},"Enter min and max values for setting"),c.default.createElement("div",{className:"range-settings__group"},c.default.createElement("div",{className:"range-settings__val"},c.default.createElement("input",{type:"number",name:"min",placeholder:"Enter min value",onChange:this.setMinValue,value:this.state.params.minValue,onBlur:this.setParams})),c.default.createElement("div",{className:"range-settings__val"},c.default.createElement("input",{type:"number",name:"max",placeholder:"Enter max value",onChange:this.setMaxValue,value:this.state.params.maxValue,onBlur:this.setParams})))):null,this.props.hideLabel?null:c.default.createElement("p",{className:"range_value"},this.state.value),c.default.createElement("input",{type:"range",onChange:this.onChange,onMouseUp:this.setValue,min:n||this.state.params.minValue,max:e||this.state.params.maxValue,step:1,value:this.state.value}))}}]),n}(c.default.Component);n.default=h,h.propTypes={styleName:f.default.string,itemId:f.default.number,max:f.default.number,min:f.default.number,setDevice:f.default.func,hideLabel:f.default.bool,setItemValue:f.default.func,data:f.default.any,onTimerChange:f.default.func,deviceId:f.default.string,setTimerValue:f.default.func,setParameters:f.default.func,showMinMax:f.default.bool,maxValue:f.default.number,minValue:f.default.number,params:f.default.object}},"./src/components/RangeSettings/RangeStyle.scss":function(t,n){},"./src/components/SelectLocation/SelectLocation.js":function(t,n,e){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}function o(t,n){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?t:n}function a(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(t,n):t.__proto__=n)}Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var u=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),s=e("./node_modules/react/react.js"),c=r(s),l=e("./node_modules/prop-types/index.js"),f=r(l),h=e("./src/components/Popup/Popup.js"),d=e("./src/components/Button/Button.js"),p=function(t){function n(t){i(this,n);var e=o(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,t));return e.setPopupShown=function(t){var n=e.state.popupShown,r=function(){e.setState({popupShown:!n,idLocation:t})};void 0!==t?e.props.deviceExistInLocation(t,r):r()},e.showInputLocation=function(){e.setState({input:!e.state.input})},e.setInputValue=function(t){e.setState({inputValue:t.target.value})},e.deleteSelectedLocation=function(t){e.props.deleteLocation(t),e.setLocationValue(e.props.locations[0])},e.setLocationValue=function(t){e.setState({locationValue:t.label}),e.props.selectLocation(t.label),e.showInputLocation()},e.addLocationValue=function(){""!==e.state.inputValue.trim()&&e.props.addLocation(e.state.inputValue),e.setState({inputValue:""})},e.state={input:!1,locationValue:"",inputValue:"",popupShown:!1,idLocation:""},e}return a(n,t),u(n,[{key:"render",value:function(){var t=this;return c.default.createElement("div",null,c.default.createElement("div",{className:"Select-control"},c.default.createElement("div",{className:"Select-value select-menu-container"},c.default.createElement("div",{className:"select-menu-label",onClick:this.showInputLocation},c.default.createElement("span",{className:"Select-value-label"},this.state.locationValue?this.state.locationValue:this.props.defaultLocation),c.default.createElement("i",{className:"select-toggle fa "+(this.state.input?"fa-caret-up":"fa-caret-down")}))),this.state.input?c.default.createElement("div",{className:"Select-menu__outer"},c.default.createElement("div",{className:"Select-input-location"},c.default.createElement("input",{type:"text",placeholder:"Add new location",className:"Select-input_add-location",onChange:this.setInputValue,value:this.state.inputValue}),c.default.createElement("i",{className:"fa fa-plus Select-input_add-location_icon",onClick:this.addLocationValue})),c.default.createElement("ul",{className:"Select-menu"},this.props.locations.map(function(n,e){return c.default.createElement("li",{key:e,className:"Select-option"},c.default.createElement("span",{className:"Select-option__item",onClick:function(e){return t.setLocationValue(n)}},n.label),c.default.createElement("i",{className:"fa fa-trash Select-option__icon",onClick:function(e){return t.setPopupShown(n._id)}}))}))):null),c.default.createElement(h.Popup,{setPopupShown:this.setPopupShown,popupShown:this.state.popupShown,header:"Confirm the action",text:this.props.deviceInLocation?"You can't delete this location, because you have devices in it":"Are you sure you want to delete this location?"},c.default.createElement(d.Button,{disabled:this.props.deviceInLocation,setPopupShown:this.setPopupShown,okHandler:function(){t.deleteSelectedLocation(t.state.idLocation),t.setPopupShown()},className:this.props.deviceInLocation?"btn btn--default":"btn popup__btn",innerText:"Ok"}),c.default.createElement(d.Button,{okHandler:function(){t.setPopupShown()},className:"btn btn--default popup__btn",innerText:"Cancel"})))}}]),n}(c.default.Component);n.default=p,p.propTypes={locations:f.default.array,addLocation:f.default.func,deleteLocation:f.default.func,selectLocation:f.default.func,defaultLocation:f.default.string,deviceExistInLocation:f.default.func,deviceInLocation:f.default.bool}},"./src/components/SettingsList/SettingsList.js":function(t,n,e){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(n,"__esModule",{value:!0}),n.SettingsList=void 0;var i=e("./node_modules/react/react.js"),o=r(i),a=e("./node_modules/prop-types/index.js"),u=r(a),s=e("./src/data/componentsNames.js"),c=e("./src/components/SettingsListItem/SettingsListItem.js");(n.SettingsList=function(t){return o.default.createElement("div",{className:"settings-block"},t.settings.items.map(function(n,e){var r=s.settingsComponents[n.name];return o.default.createElement(c.SettingsListItem,{key:e,addDescription:t.addDescription,styleName:"settings-"+n.name.toLowerCase(),name:n.name,deleteItem:t.deleteItem,setItemValue:t.setItemValue,setParameters:t.setParameters,checked:n.data,data:n.data,params:n.params,description:n.description,id:e},o.default.createElement(r,null))}))}).propTypes={settings:u.default.object,width:u.default.number,addDescription:u.default.func,deleteItem:u.default.func,setItemValue:u.default.func,setParameters:u.default.func}},"./src/components/SettingsListItem/SettingsListItem.js":function(t,n,e){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(n,"__esModule",{value:!0}),n.SettingsListItem=void 0;var i=e("./node_modules/react/react.js"),o=r(i);e("./src/components/SettingsListItem/index.scss");var a=e("./node_modules/prop-types/index.js"),u=r(a);(n.SettingsListItem=function(t){return o.default.createElement("div",{className:"settings "+t.styleName},o.default.createElement("div",{className:"item-header"},o.default.createElement("p",{className:"item-header__name"},t.name),o.default.createElement("button",{className:"item-header__delete-btn",onClick:function(){return t.deleteItem(t.id)}})),o.default.createElement("div",null,o.default.createElement("label",null,o.default.createElement("input",{className:"description-input",placeholder:"Description",type:"text",value:t.description,onChange:function(n){return t.addDescription(t.id,n.target.value)}}))),o.default.cloneElement(t.children,{styleName:"item-body",setItemValue:t.setItemValue,setParameters:t.setParameters,itemId:t.id,checked:t.checked,data:t.data,params:t.params,showMinMax:!0}))}).propTypes={styleName:u.default.string,setItemValue:u.default.func,checked:u.default.any,id:u.default.number,name:u.default.string,addDescription:u.default.func,deleteItem:u.default.func.isRequired,children:u.default.any,description:u.default.string,data:u.default.any,setParameters:u.default.func,params:u.default.object}},"./src/components/SettingsListItem/index.scss":function(t,n){},"./src/components/TimerSettings/Timer.js":function(t,n,e){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}function o(t,n){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?t:n}function a(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(t,n):t.__proto__=n)}Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var u=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),s=e("./node_modules/react/react.js"),c=r(s),l=e("./node_modules/prop-types/index.js"),f=r(l);e("./src/components/TimerSettings/TimerStyle.scss");var h=e("./src/components/RangeSettings/Range.js"),d=r(h),p=function(t){function n(t){i(this,n);var e=o(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,t));return e.changeHours=function(t){e.setState({hours:t.target.value})},e.changeMinutes=function(t){e.setState({minutes:t.target.value})},e.setTimerValue=function(){e.props.setItemValue(e.state.hours+":"+e.state.minutes,e.props.itemId,e.props.deviceId)},e.hoursKeyDown=function(t){(t.keyCode<47||t.keyCode>58)&&8!==t.keyCode&&t.preventDefault(),parseInt(t.target.value+t.key)>99&&t.preventDefault()},e.minutesKeyDown=function(t){(t.keyCode<47||t.keyCode>58)&&8!==t.keyCode&&t.preventDefault(),parseInt(t.target.value+t.key)>59&&t.preventDefault()},e.state={hours:0,minutes:0},e}return a(n,t),u(n,[{key:"componentDidMount",value:function(){if(void 0!==this.props.data){var t=this.props.data.split(":");this.setState({hours:t[0],minutes:t[1]})}}},{key:"render",value:function(){return c.default.createElement("div",{className:"m-time "+this.props.styleName},c.default.createElement("div",{className:"showtime"},c.default.createElement("input",{className:"showtime__time",type:"text",value:this.state.hours,onChange:this.changeHours,onKeyDown:this.hoursKeyDown}),c.default.createElement("span",{className:"showtime__separater"},":"),c.default.createElement("input",{className:"showtime__time",type:"text",value:this.state.minutes,onChange:this.changeMinutes,onKeyDown:this.minutesKeyDown})),c.default.createElement("div",{className:"sliders"},c.default.createElement("div",{className:"sliders__time-text"},"Hours"),c.default.createElement(d.default,{className:"u-slider-time",min:0,max:99,setItemValue:this.props.setItemValue,onTimerChange:this.changeHours,setTimerValue:this.setTimerValue,hideLabel:!0,data:this.state.hours}),c.default.createElement("div",{className:"sliders__time-text"},"Minutes"),c.default.createElement(d.default,{className:"u-slider-time",min:0,max:59,setItemValue:this.props.setItemValue,onTimerChange:this.changeMinutes,setTimerValue:this.setTimerValue,hideLabel:!0,data:this.state.minutes})))}}]),n}(c.default.Component);n.default=p,p.propTypes={styleName:f.default.string,value:f.default.string,onChange:f.default.func,setItemValue:f.default.func,itemId:f.default.number,newValue:f.default.string,data:f.default.string,deviceId:f.default.string}},"./src/components/TimerSettings/TimerStyle.scss":function(t,n){},"./src/components/ToggleSettings/ToggleSettings.js":function(t,n,e){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}function o(t,n){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?t:n}function a(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(t,n):t.__proto__=n)}Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var u=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),s=e("./node_modules/react/react.js"),c=r(s),l=e("./node_modules/prop-types/index.js"),f=r(l);e("./src/components/ToggleSettings/ToggleStyle.scss");var h=function(t){function n(t){i(this,n);var e=o(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,t));return e.onChangeValue=function(t){e.props.setItemValue(!e.props.checked,e.props.itemId,e.props.deviceId)},e}return a(n,t),u(n,[{key:"render",value:function(){return c.default.createElement("div",{className:""+this.props.styleName},c.default.createElement("label",{className:"switch"},c.default.createElement("input",{type:"checkbox",checked:this.props.checked,onChange:this.onChangeValue}),c.default.createElement("div",{className:"slider round"})))}}]),n}(c.default.Component);n.default=h,h.propTypes={device:f.default.object,styleName:f.default.string,checked:f.default.bool.isRequired,setItemValue:f.default.func,itemId:f.default.any,newValue:f.default.string,deviceId:f.default.string},h.defaultProps={checked:!1}},"./src/components/ToggleSettings/ToggleStyle.scss":function(t,n){},"./src/components/ValueSettings/Value.js":function(t,n,e){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}function o(t,n){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?t:n}function a(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(t,n):t.__proto__=n)}Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var u=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),s=e("./node_modules/react/react.js"),c=r(s),l=e("./node_modules/prop-types/index.js"),f=r(l);e("./src/components/ValueSettings/ValueStyle.scss");var h=function(t){function n(t){i(this,n);var e=o(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,t));return e.setTextValue=function(t){e.props.setItemValue(e.state.value,e.props.itemId,e.props.deviceId)},e.onChangeValue=function(t){var n=t.target.value;e.setState({value:n})},e.state={value:""},e}return a(n,t),u(n,[{key:"componentDidMount",value:function(){void 0!==this.props.data&&this.setState({value:this.props.data})}},{key:"render",value:function(){return c.default.createElement("div",{className:""+this.props.styleName},c.default.createElement("input",{type:"text",className:"value_input",placeholder:"Input...",value:this.state.value,onChange:this.onChangeValue,onBlur:this.setTextValue}))}}]),n}(c.default.Component);n.default=h,h.propTypes={styleName:f.default.string,value:f.default.string,onChangeValue:f.default.func,setItemValue:f.default.func,itemId:f.default.number,newValue:f.default.string,data:f.default.string,deviceId:f.default.string}},"./src/components/ValueSettings/ValueStyle.scss":function(t,n){},"./src/data/componentsNames.js":function(t,n,e){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(n,"__esModule",{value:!0}),n.settingsComponents=void 0;var i=e("./src/components/RangeSettings/Range.js"),o=r(i),a=e("./src/components/ToggleSettings/ToggleSettings.js"),u=r(a),s=e("./src/components/TimerSettings/Timer.js"),c=r(s),l=e("./src/components/ValueSettings/Value.js"),f=r(l),h=e("./src/components/Chart/Chart.js"),d=r(h);n.settingsComponents={LineChart:d.default,Range:o.default,Timer:c.default,Value:f.default,Toggle:u.default}},"./src/pages/Builder/Builder.js":function(t,n,e){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}function o(t,n){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?t:n}function a(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(t,n):t.__proto__=n)}function u(t){return{device:t.builder.device,status:t.builder.uploadStatus,errorText:t.builder.errorText}}function s(t){return{deleteItem:(0,h.bindActionCreators)(x.deleteItem,t),resetBuilder:(0,h.bindActionCreators)(x.resetProto,t),editDevice:(0,h.bindActionCreators)(x.editDevice,t),clearAddStatus:(0,h.bindActionCreators)(x.clearAddStatus,t)}}Object.defineProperty(n,"__esModule",{value:!0});var c=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),l=e("./node_modules/react/react.js"),f=r(l),h=e("./node_modules/redux/es/index.js"),d=e("./node_modules/react-redux/es/index.js");e("./src/pages/Builder/builder.scss");var p=e("./src/components/DeviceForm/deviceForm.js"),v=r(p),y=e("./src/components/Prototype/Prototype.js"),m=r(y),g=e("./src/components/Message/Message.js"),_=e("./node_modules/prop-types/index.js"),b=r(_),x=e("./src/actions/builder.action.js"),w=function(t){function n(){return i(this,n),o(this,(n.__proto__||Object.getPrototypeOf(n)).apply(this,arguments))}return a(n,t),c(n,[{key:"componentDidMount",value:function(){void 0!==this.props.match.params.id?this.props.editDevice(this.props.match.params.id):this.props.resetBuilder()}},{key:"componentDidUpdate",value:function(){var t=this;"DONE"===this.props.status&&setTimeout(function(){t.props.resetBuilder(),t.props.history.push("/devices")},1e3)}},{key:"render",value:function(){return f.default.createElement("section",{className:"builder device-list"},f.default.createElement("h1",{className:"device-list__title"},"Device Builder"),f.default.createElement(v.default,null),f.default.createElement(g.Message,{clearStatus:this.props.clearAddStatus,status:this.props.status,header:"Error",text:this.props.errorText}),f.default.createElement("h3",{className:"builder__title"},"Prototype"),f.default.createElement(m.default,{device:this.props.device,deleteItem:this.props.deleteItem}))}}]),n}(l.Component);w.propTypes={status:b.default.string,device:b.default.object,resetBuilder:b.default.func,deleteItem:b.default.func,history:b.default.object,match:b.default.object,params:b.default.object,id:b.default.string,editDevice:b.default.func,clearAddStatus:b.default.func,errorText:b.default.string},n.default=(0,d.connect)(u,s)(w)},"./src/pages/Builder/builder.scss":function(t,n){}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,