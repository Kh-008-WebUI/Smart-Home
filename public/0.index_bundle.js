webpackJsonp([0],{"./node_modules/classnames/index.js":function(t,e,n){"use strict";var r,i,o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};/*!
  Copyright (c) 2016 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
!function(){function u(){for(var t=[],e=0;e<arguments.length;e++){var n=arguments[e];if(n){var r=void 0===n?"undefined":o(n);if("string"===r||"number"===r)t.push(n);else if(Array.isArray(n))t.push(u.apply(null,n));else if("object"===r)for(var i in n)a.call(n,i)&&n[i]&&t.push(i)}}return t.join(" ")}var a={}.hasOwnProperty;void 0!==t&&t.exports?t.exports=u:"object"===o(n("./node_modules/webpack/buildin/amd-options.js"))&&n("./node_modules/webpack/buildin/amd-options.js")?(r=[],void 0!==(i=function(){return u}.apply(e,r))&&(t.exports=i)):window.classNames=u}()},"./node_modules/create-react-class/index.js":function(t,e,n){"use strict";var r=n("./node_modules/react/react.js"),i=n("./node_modules/create-react-class/factory.js");if(void 0===r)throw Error("create-react-class could not find the React object. If you are using script tags, make sure that React is being loaded before create-react-class.");var o=(new r.Component).updater;t.exports=i(r.Component,r.isValidElement,o)},"./node_modules/d3/build/d3.js":function(t,e,n){"use strict";var r,i,o,u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};!function(n,a){"object"===u(e)&&void 0!==t?a(e):(i=[e],r=a,void 0!==(o="function"==typeof r?r.apply(e,i):r)&&(t.exports=o))}(0,function(t){function e(t){return function(e,n){return Jl(t(e),n)}}function n(t,e){return[t,e]}function r(t,e,n){var r=(e-t)/Math.max(0,n),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=mc?10:o>=yc?5:o>=gc?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=mc?10:o>=yc?5:o>=gc?2:1)}function i(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=mc?i*=10:o>=yc?i*=5:o>=gc&&(i*=2),e<t?-i:i}function o(t){return t.length}function a(t){return"translate("+(t+.5)+",0)"}function s(t){return"translate(0,"+(t+.5)+")"}function l(t){return function(e){return+t(e)}}function c(t){var e=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(e=Math.round(e)),function(n){return+t(n)+e}}function f(){return!this.__axis}function h(t,e){function n(n){var a=null==i?e.ticks?e.ticks.apply(e,r):e.domain():i,s=null==o?e.tickFormat?e.tickFormat.apply(e,r):Rc:o,y=Math.max(u,0)+p,g=e.range(),_=+g[0]+.5,b=+g[g.length-1]+.5,x=(e.bandwidth?c:l)(e.copy()),w=n.selection?n.selection():n,E=w.selectAll(".domain").data([null]),M=w.selectAll(".tick").data(a,e).order(),F=M.exit(),C=M.enter().append("g").attr("class","tick"),S=M.select("line"),A=M.select("text");E=E.merge(E.enter().insert("path",".tick").attr("class","domain").attr("stroke","#000")),M=M.merge(C),S=S.merge(C.append("line").attr("stroke","#000").attr(v+"2",d*u)),A=A.merge(C.append("text").attr("fill","#000").attr(v,d*y).attr("dy",t===Ic?"0em":t===zc?"0.71em":"0.32em")),n!==w&&(E=E.transition(n),M=M.transition(n),S=S.transition(n),A=A.transition(n),F=F.transition(n).attr("opacity",qc).attr("transform",function(t){return isFinite(t=x(t))?m(t):this.getAttribute("transform")}),C.attr("opacity",qc).attr("transform",function(t){var e=this.parentNode.__axis;return m(e&&isFinite(e=e(t))?e:x(t))})),F.remove(),E.attr("d",t===Bc||t==Lc?"M"+d*h+","+_+"H0.5V"+b+"H"+d*h:"M"+_+","+d*h+"V0.5H"+b+"V"+d*h),M.attr("opacity",1).attr("transform",function(t){return m(x(t))}),S.attr(v+"2",d*u),A.attr(v,d*y).text(s),w.filter(f).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===Lc?"start":t===Bc?"end":"middle"),w.each(function(){this.__axis=x})}var r=[],i=null,o=null,u=6,h=6,p=3,d=t===Ic||t===Bc?-1:1,v=t===Bc||t===Lc?"x":"y",m=t===Ic||t===zc?a:s;return n.scale=function(t){return arguments.length?(e=t,n):e},n.ticks=function(){return r=Vc.call(arguments),n},n.tickArguments=function(t){return arguments.length?(r=null==t?[]:Vc.call(t),n):r.slice()},n.tickValues=function(t){return arguments.length?(i=null==t?null:Vc.call(t),n):i&&i.slice()},n.tickFormat=function(t){return arguments.length?(o=t,n):o},n.tickSize=function(t){return arguments.length?(u=h=+t,n):u},n.tickSizeInner=function(t){return arguments.length?(u=+t,n):u},n.tickSizeOuter=function(t){return arguments.length?(h=+t,n):h},n.tickPadding=function(t){return arguments.length?(p=+t,n):p},n}function p(t){return h(Ic,t)}function d(t){return h(Lc,t)}function v(t){return h(zc,t)}function m(t){return h(Bc,t)}function y(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new g(r)}function g(t){this._=t}function _(t,e){return t.trim().split(/^|\s+/).map(function(t){var n="",r=t.indexOf(".");if(r>=0&&(n=t.slice(r+1),t=t.slice(0,r)),t&&!e.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}})}function b(t,e){for(var n,r=0,i=t.length;r<i;++r)if((n=t[r]).name===e)return n.value}function x(t,e,n){for(var r=0,i=t.length;r<i;++r)if(t[r].name===e){t[r]=Uc,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}function w(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===Kc&&e.documentElement.namespaceURI===Kc?e.createElement(t):e.createElementNS(n,t)}}function E(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function M(){return new F}function F(){this._="@"+(++Xc).toString(36)}function C(t,e,n){return t=S(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function S(e,n,r){return function(i){var o=t.event;t.event=i;try{e.call(this,this.__data__,n,r)}finally{t.event=o}}}function A(t){return t.trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}})}function O(t){return function(){var e=this.__on;if(e){for(var n,r=0,i=-1,o=e.length;r<o;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++i]=n:this.removeEventListener(n.type,n.listener,n.capture);++i?e.length=i:delete this.__on}}}function T(t,e,n){var r=Qc.hasOwnProperty(t.type)?C:S;return function(i,o,u){var a,s=this.__on,l=r(e,o,u);if(s)for(var c=0,f=s.length;c<f;++c)if((a=s[c]).type===t.type&&a.name===t.name)return this.removeEventListener(a.type,a.listener,a.capture),this.addEventListener(a.type,a.listener=l,a.capture=n),void(a.value=e);this.addEventListener(t.type,l,n),a={type:t.type,name:t.name,value:e,listener:l,capture:n},s?s.push(a):this.__on=[a]}}function D(e,n,r,i){var o=t.event;e.sourceEvent=t.event,t.event=e;try{return n.apply(r,i)}finally{t.event=o}}function k(){}function N(){return[]}function j(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}function P(t,e,n,r,i,o){for(var u,a=0,s=e.length,l=o.length;a<l;++a)(u=e[a])?(u.__data__=o[a],r[a]=u):n[a]=new j(t,o[a]);for(;a<s;++a)(u=e[a])&&(i[a]=u)}function V(t,e,n,r,i,o,u){var a,s,l,c={},f=e.length,h=o.length,p=new Array(f);for(a=0;a<f;++a)(s=e[a])&&(p[a]=l=pf+u.call(s,s.__data__,a,e),l in c?i[a]=s:c[l]=s);for(a=0;a<h;++a)l=pf+u.call(t,o[a],a,o),(s=c[l])?(r[a]=s,s.__data__=o[a],c[l]=null):n[a]=new j(t,o[a]);for(a=0;a<f;++a)(s=e[a])&&c[p[a]]===s&&(i[a]=s)}function R(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function I(t){return function(){this.removeAttribute(t)}}function L(t){return function(){this.removeAttributeNS(t.space,t.local)}}function z(t,e){return function(){this.setAttribute(t,e)}}function B(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function q(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function U(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}function K(t){return function(){this.style.removeProperty(t)}}function H(t,e,n){return function(){this.style.setProperty(t,e,n)}}function W(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}function Y(t,e){return t.style.getPropertyValue(e)||Cf(t).getComputedStyle(t,null).getPropertyValue(e)}function X(t){return function(){delete this[t]}}function $(t,e){return function(){this[t]=e}}function G(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function Z(t){return t.trim().split(/^|\s+/)}function J(t){return t.classList||new Q(t)}function Q(t){this._node=t,this._names=Z(t.getAttribute("class")||"")}function tt(t,e){for(var n=J(t),r=-1,i=e.length;++r<i;)n.add(e[r])}function et(t,e){for(var n=J(t),r=-1,i=e.length;++r<i;)n.remove(e[r])}function nt(t){return function(){tt(this,t)}}function rt(t){return function(){et(this,t)}}function it(t,e){return function(){(e.apply(this,arguments)?tt:et)(this,t)}}function ot(){this.textContent=""}function ut(t){return function(){this.textContent=t}}function at(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function st(){this.innerHTML=""}function lt(t){return function(){this.innerHTML=t}}function ct(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function ft(){this.nextSibling&&this.parentNode.appendChild(this)}function ht(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function pt(){return null}function dt(){var t=this.parentNode;t&&t.removeChild(this)}function vt(t,e,n){var r=Cf(t),i=r.CustomEvent;"function"==typeof i?i=new i(e,n):(i=r.document.createEvent("Event"),n?(i.initEvent(e,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(e,!1,!1)),t.dispatchEvent(i)}function mt(t,e){return function(){return vt(this,t,e)}}function yt(t,e){return function(){return vt(this,t,e.apply(this,arguments))}}function gt(t,e){this._groups=t,this._parents=e}function _t(){return new gt([[document.documentElement]],Lf)}function bt(){t.event.stopImmediatePropagation()}function xt(t,e){var n=t.document.documentElement,r=zf(t).on("dragstart.drag",null);e&&(r.on("click.drag",Kf,!0),setTimeout(function(){r.on("click.drag",null)},0)),"onselectstart"in n?r.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}function wt(t,e,n,r,i,o,u,a,s,l){this.target=t,this.type=e,this.subject=n,this.identifier=r,this.active=i,this.x=o,this.y=u,this.dx=a,this.dy=s,this._=l}function Et(){return!t.event.button}function Mt(){return this.parentNode}function Ft(e){return null==e?{x:t.event.x,y:t.event.y}:e}function Ct(){return"ontouchstart"in this}function St(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function At(){}function Ot(t){var e;return t=(t+"").trim().toLowerCase(),(e=Jf.exec(t))?(e=parseInt(e[1],16),new jt(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1)):(e=Qf.exec(t))?Tt(parseInt(e[1],16)):(e=th.exec(t))?new jt(e[1],e[2],e[3],1):(e=eh.exec(t))?new jt(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=nh.exec(t))?Dt(e[1],e[2],e[3],e[4]):(e=rh.exec(t))?Dt(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=ih.exec(t))?Pt(e[1],e[2]/100,e[3]/100,1):(e=oh.exec(t))?Pt(e[1],e[2]/100,e[3]/100,e[4]):uh.hasOwnProperty(t)?Tt(uh[t]):"transparent"===t?new jt(NaN,NaN,NaN,0):null}function Tt(t){return new jt(t>>16&255,t>>8&255,255&t,1)}function Dt(t,e,n,r){return r<=0&&(t=e=n=NaN),new jt(t,e,n,r)}function kt(t){return t instanceof At||(t=Ot(t)),t?(t=t.rgb(),new jt(t.r,t.g,t.b,t.opacity)):new jt}function Nt(t,e,n,r){return 1===arguments.length?kt(t):new jt(t,e,n,null==r?1:r)}function jt(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function Pt(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new It(t,e,n,r)}function Vt(t){if(t instanceof It)return new It(t.h,t.s,t.l,t.opacity);if(t instanceof At||(t=Ot(t)),!t)return new It;if(t instanceof It)return t;t=t.rgb();var e=t.r/255,n=t.g/255,r=t.b/255,i=Math.min(e,n,r),o=Math.max(e,n,r),u=NaN,a=o-i,s=(o+i)/2;return a?(u=e===o?(n-r)/a+6*(n<r):n===o?(r-e)/a+2:(e-n)/a+4,a/=s<.5?o+i:2-o-i,u*=60):a=s>0&&s<1?0:u,new It(u,a,s,t.opacity)}function Rt(t,e,n,r){return 1===arguments.length?Vt(t):new It(t,e,n,null==r?1:r)}function It(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Lt(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}function zt(t){if(t instanceof qt)return new qt(t.l,t.a,t.b,t.opacity);if(t instanceof $t){var e=t.h*ah;return new qt(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}t instanceof jt||(t=kt(t));var n=Wt(t.r),r=Wt(t.g),i=Wt(t.b),o=Ut((.4124564*n+.3575761*r+.1804375*i)/lh),u=Ut((.2126729*n+.7151522*r+.072175*i)/ch);return new qt(116*u-16,500*(o-u),200*(u-Ut((.0193339*n+.119192*r+.9503041*i)/fh)),t.opacity)}function Bt(t,e,n,r){return 1===arguments.length?zt(t):new qt(t,e,n,null==r?1:r)}function qt(t,e,n,r){this.l=+t,this.a=+e,this.b=+n,this.opacity=+r}function Ut(t){return t>vh?Math.pow(t,1/3):t/dh+hh}function Kt(t){return t>ph?t*t*t:dh*(t-hh)}function Ht(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function Wt(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function Yt(t){if(t instanceof $t)return new $t(t.h,t.c,t.l,t.opacity);t instanceof qt||(t=zt(t));var e=Math.atan2(t.b,t.a)*sh;return new $t(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function Xt(t,e,n,r){return 1===arguments.length?Yt(t):new $t(t,e,n,null==r?1:r)}function $t(t,e,n,r){this.h=+t,this.c=+e,this.l=+n,this.opacity=+r}function Gt(t){if(t instanceof Jt)return new Jt(t.h,t.s,t.l,t.opacity);t instanceof jt||(t=kt(t));var e=t.r/255,n=t.g/255,r=t.b/255,i=(Eh*r+xh*e-wh*n)/(Eh+xh-wh),o=r-i,u=(bh*(n-i)-gh*o)/_h,a=Math.sqrt(u*u+o*o)/(bh*i*(1-i)),s=a?Math.atan2(u,o)*sh-120:NaN;return new Jt(s<0?s+360:s,a,i,t.opacity)}function Zt(t,e,n,r){return 1===arguments.length?Gt(t):new Jt(t,e,n,null==r?1:r)}function Jt(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Qt(t,e,n,r,i){var o=t*t,u=o*t;return((1-3*t+3*o-u)*e+(4-6*o+3*u)*n+(1+3*t+3*o-3*u)*r+u*i)/6}function te(t,e){return function(n){return t+n*e}}function ee(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}function ne(t,e){var n=e-t;return n?te(t,n>180||n<-180?n-360*Math.round(n/360):n):kh(isNaN(t)?e:t)}function re(t){return 1==(t=+t)?ie:function(e,n){return n-e?ee(e,n,t):kh(isNaN(e)?n:e)}}function ie(t,e){var n=e-t;return n?te(t,n):kh(isNaN(t)?e:t)}function oe(t){return function(e){var n,r,i=e.length,o=new Array(i),u=new Array(i),a=new Array(i);for(n=0;n<i;++n)r=Nt(e[n]),o[n]=r.r||0,u[n]=r.g||0,a[n]=r.b||0;return o=t(o),u=t(u),a=t(a),r.opacity=1,function(t){return r.r=o(t),r.g=u(t),r.b=a(t),r+""}}}function ue(t){return function(){return t}}function ae(t){return function(e){return t(e)+""}}function se(t){return"none"===t?Wh:(Mh||(Mh=document.createElement("DIV"),Fh=document.documentElement,Ch=document.defaultView),Mh.style.transform=t,t=Ch.getComputedStyle(Fh.appendChild(Mh),null).getPropertyValue("transform"),Fh.removeChild(Mh),t=t.slice(7,-1).split(","),Yh(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}function le(t){return null==t?Wh:(Sh||(Sh=document.createElementNS("http://www.w3.org/2000/svg","g")),Sh.setAttribute("transform",t),(t=Sh.transform.baseVal.consolidate())?(t=t.matrix,Yh(t.a,t.b,t.c,t.d,t.e,t.f)):Wh)}function ce(t,e,n,r){function i(t){return t.length?t.pop()+" ":""}function o(t,r,i,o,u,a){if(t!==i||r!==o){var s=u.push("translate(",null,e,null,n);a.push({i:s-4,x:Ih(t,i)},{i:s-2,x:Ih(r,o)})}else(i||o)&&u.push("translate("+i+e+o+n)}function u(t,e,n,o){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),o.push({i:n.push(i(n)+"rotate(",null,r)-2,x:Ih(t,e)})):e&&n.push(i(n)+"rotate("+e+r)}function a(t,e,n,o){t!==e?o.push({i:n.push(i(n)+"skewX(",null,r)-2,x:Ih(t,e)}):e&&n.push(i(n)+"skewX("+e+r)}function s(t,e,n,r,o,u){if(t!==n||e!==r){var a=o.push(i(o)+"scale(",null,",",null,")");u.push({i:a-4,x:Ih(t,n)},{i:a-2,x:Ih(e,r)})}else 1===n&&1===r||o.push(i(o)+"scale("+n+","+r+")")}return function(e,n){var r=[],i=[];return e=t(e),n=t(n),o(e.translateX,e.translateY,n.translateX,n.translateY,r,i),u(e.rotate,n.rotate,r,i),a(e.skewX,n.skewX,r,i),s(e.scaleX,e.scaleY,n.scaleX,n.scaleY,r,i),e=n=null,function(t){for(var e,n=-1,o=i.length;++n<o;)r[(e=i[n]).i]=e.x(t);return r.join("")}}}function fe(t){return((t=Math.exp(t))+1/t)/2}function he(t){return((t=Math.exp(t))-1/t)/2}function pe(t){return((t=Math.exp(2*t))-1)/(t+1)}function de(t){return function(e,n){var r=t((e=Rt(e)).h,(n=Rt(n)).h),i=ie(e.s,n.s),o=ie(e.l,n.l),u=ie(e.opacity,n.opacity);return function(t){return e.h=r(t),e.s=i(t),e.l=o(t),e.opacity=u(t),e+""}}}function ve(t,e){var n=ie((t=Bt(t)).l,(e=Bt(e)).l),r=ie(t.a,e.a),i=ie(t.b,e.b),o=ie(t.opacity,e.opacity);return function(e){return t.l=n(e),t.a=r(e),t.b=i(e),t.opacity=o(e),t+""}}function me(t){return function(e,n){var r=t((e=Xt(e)).h,(n=Xt(n)).h),i=ie(e.c,n.c),o=ie(e.l,n.l),u=ie(e.opacity,n.opacity);return function(t){return e.h=r(t),e.c=i(t),e.l=o(t),e.opacity=u(t),e+""}}}function ye(t){return function e(n){function r(e,r){var i=t((e=Zt(e)).h,(r=Zt(r)).h),o=ie(e.s,r.s),u=ie(e.l,r.l),a=ie(e.opacity,r.opacity);return function(t){return e.h=i(t),e.s=o(t),e.l=u(Math.pow(t,n)),e.opacity=a(t),e+""}}return n=+n,r.gamma=e,r}(1)}function ge(){return cp||(pp(_e),cp=hp.now()+fp)}function _e(){cp=0}function be(){this._call=this._time=this._next=null}function xe(t,e,n){var r=new be;return r.restart(t,e,n),r}function we(){ge(),++op;for(var t,e=Ah;e;)(t=cp-e._time)>=0&&e._call.call(null,t),e=e._next;--op}function Ee(){cp=(lp=hp.now())+fp,op=up=0;try{we()}finally{op=0,Fe(),cp=0}}function Me(){var t=hp.now(),e=t-lp;e>sp&&(fp-=e,lp=t)}function Fe(){for(var t,e,n=Ah,r=1/0;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:Ah=e);Oh=t,Ce(r)}function Ce(t){if(!op){up&&(up=clearTimeout(up));var e=t-cp;e>24?(t<1/0&&(up=setTimeout(Ee,e)),ap&&(ap=clearInterval(ap))):(ap||(lp=cp,ap=setInterval(Me,sp)),op=1,pp(Ee))}}function Se(t,e){var n=t.__transition;if(!n||!(n=n[e])||n.state>gp)throw new Error("too late");return n}function Ae(t,e){var n=t.__transition;if(!n||!(n=n[e])||n.state>bp)throw new Error("too late");return n}function Oe(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("too late");return n}function Te(t,e,n){function r(t){n.state=_p,n.timer.restart(i,n.delay,n.time),n.delay<=t&&i(t-n.delay)}function i(r){var l,c,f,h;if(n.state!==_p)return u();for(l in s)if(h=s[l],h.name===n.name){if(h.state===xp)return dp(i);h.state===wp?(h.state=Mp,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete s[l]):+l<e&&(h.state=Mp,h.timer.stop(),delete s[l])}if(dp(function(){n.state===xp&&(n.state=wp,n.timer.restart(o,n.delay,n.time),o(r))}),n.state=bp,n.on.call("start",t,t.__data__,n.index,n.group),n.state===bp){for(n.state=xp,a=new Array(f=n.tween.length),l=0,c=-1;l<f;++l)(h=n.tween[l].value.call(t,t.__data__,n.index,n.group))&&(a[++c]=h);a.length=c+1}}function o(e){for(var r=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(u),n.state=Ep,1),i=-1,o=a.length;++i<o;)a[i].call(null,r);n.state===Ep&&(n.on.call("end",t,t.__data__,n.index,n.group),u())}function u(){n.state=Mp,n.timer.stop(),delete s[e];for(var r in s)return;delete t.__transition}var a,s=t.__transition;s[e]=n,n.timer=xe(r,0,n.time)}function De(t,e){var n,r;return function(){var i=Ae(this,t),o=i.tween;if(o!==n){r=n=o;for(var u=0,a=r.length;u<a;++u)if(r[u].name===e){r=r.slice(),r.splice(u,1);break}}i.tween=r}}function ke(t,e,n){var r,i;if("function"!=typeof n)throw new Error;return function(){var o=Ae(this,t),u=o.tween;if(u!==r){i=(r=u).slice();for(var a={name:e,value:n},s=0,l=i.length;s<l;++s)if(i[s].name===e){i[s]=a;break}s===l&&i.push(a)}o.tween=i}}function Ne(t,e,n){var r=t._id;return t.each(function(){var t=Ae(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)}),function(t){return Oe(t,r).value[e]}}function je(t){return function(){this.removeAttribute(t)}}function Pe(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Ve(t,e,n){var r,i;return function(){var o=this.getAttribute(t);return o===n?null:o===r?i:i=e(r=o,n)}}function Re(t,e,n){var r,i;return function(){var o=this.getAttributeNS(t.space,t.local);return o===n?null:o===r?i:i=e(r=o,n)}}function Ie(t,e,n){var r,i,o;return function(){var u,a=n(this);return null==a?void this.removeAttribute(t):(u=this.getAttribute(t),u===a?null:u===r&&a===i?o:o=e(r=u,i=a))}}function Le(t,e,n){var r,i,o;return function(){var u,a=n(this);return null==a?void this.removeAttributeNS(t.space,t.local):(u=this.getAttributeNS(t.space,t.local),u===a?null:u===r&&a===i?o:o=e(r=u,i=a))}}function ze(t,e){function n(){var n=this,r=e.apply(n,arguments);return r&&function(e){n.setAttributeNS(t.space,t.local,r(e))}}return n._value=e,n}function Be(t,e){function n(){var n=this,r=e.apply(n,arguments);return r&&function(e){n.setAttribute(t,r(e))}}return n._value=e,n}function qe(t,e){return function(){Se(this,t).delay=+e.apply(this,arguments)}}function Ue(t,e){return e=+e,function(){Se(this,t).delay=e}}function Ke(t,e){return function(){Ae(this,t).duration=+e.apply(this,arguments)}}function He(t,e){return e=+e,function(){Ae(this,t).duration=e}}function We(t,e){if("function"!=typeof e)throw new Error;return function(){Ae(this,t).ease=e}}function Ye(t){return(t+"").trim().split(/^|\s+/).every(function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t})}function Xe(t,e,n){var r,i,o=Ye(e)?Se:Ae;return function(){var u=o(this,t),a=u.on;a!==r&&(i=(r=a).copy()).on(e,n),u.on=i}}function $e(t){return function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}}function Ge(t,e){var n,r,i;return function(){var o=Y(this,t),u=(this.style.removeProperty(t),Y(this,t));return o===u?null:o===n&&u===r?i:i=e(n=o,r=u)}}function Ze(t){return function(){this.style.removeProperty(t)}}function Je(t,e,n){var r,i;return function(){var o=Y(this,t);return o===n?null:o===r?i:i=e(r=o,n)}}function Qe(t,e,n){var r,i,o;return function(){var u=Y(this,t),a=n(this);return null==a&&(this.style.removeProperty(t),a=Y(this,t)),u===a?null:u===r&&a===i?o:o=e(r=u,i=a)}}function tn(t,e,n){function r(){var r=this,i=e.apply(r,arguments);return i&&function(e){r.style.setProperty(t,i(e),n)}}return r._value=e,r}function en(t){return function(){this.textContent=t}}function nn(t){return function(){var e=t(this);this.textContent=null==e?"":e}}function rn(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function on(t){return _t().transition(t)}function un(){return++Yp}function an(t){return+t}function sn(t){return t*t}function ln(t){return t*(2-t)}function cn(t){return((t*=2)<=1?t*t:--t*(2-t)+1)/2}function fn(t){return t*t*t}function hn(t){return--t*t*t+1}function pn(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}function dn(t){return 1-Math.cos(t*Qp)}function vn(t){return Math.sin(t*Qp)}function mn(t){return(1-Math.cos(Jp*t))/2}function yn(t){return Math.pow(2,10*t-10)}function gn(t){return 1-Math.pow(2,-10*t)}function _n(t){return((t*=2)<=1?Math.pow(2,10*t-10):2-Math.pow(2,10-10*t))/2}function bn(t){return 1-Math.sqrt(1-t*t)}function xn(t){return Math.sqrt(1- --t*t)}function wn(t){return((t*=2)<=1?1-Math.sqrt(1-t*t):Math.sqrt(1-(t-=2)*t)+1)/2}function En(t){return 1-Mn(1-t)}function Mn(t){return(t=+t)<td?ld*t*t:t<nd?ld*(t-=ed)*t+rd:t<od?ld*(t-=id)*t+ud:ld*(t-=ad)*t+sd}function Fn(t){return((t*=2)<=1?1-Mn(1-t):Mn(t-1)+1)/2}function Cn(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))return yd.time=ge(),yd;return n}function Sn(){t.event.stopImmediatePropagation()}function An(t){return{type:t}}function On(){return!t.event.button}function Tn(){var t=this.ownerSVGElement||this;return[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function Dn(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function kn(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function Nn(t){var e=t.__brush;return e?e.dim.output(e.selection):null}function jn(){return Vn(Ad)}function Pn(){return Vn(Od)}function Vn(e){function n(t){var n=t.property("__brush",a).selectAll(".overlay").data([An("overlay")]);n.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",Dd.overlay).merge(n).each(function(){var t=Dn(this).extent;zf(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])}),t.selectAll(".selection").data([An("selection")]).enter().append("rect").attr("class","selection").attr("cursor",Dd.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var i=t.selectAll(".handle").data(e.handles,function(t){return t.type});i.exit().remove(),i.enter().append("rect").attr("class",function(t){return"handle handle--"+t.type}).attr("cursor",function(t){return Dd[t.type]}),t.each(r).attr("fill","none").attr("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush touchstart.brush",u)}function r(){var t=zf(this),e=Dn(this).selection;e?(t.selectAll(".selection").style("display",null).attr("x",e[0][0]).attr("y",e[0][1]).attr("width",e[1][0]-e[0][0]).attr("height",e[1][1]-e[0][1]),t.selectAll(".handle").style("display",null).attr("x",function(t){return"e"===t.type[t.type.length-1]?e[1][0]-h/2:e[0][0]-h/2}).attr("y",function(t){return"s"===t.type[0]?e[1][1]-h/2:e[0][1]-h/2}).attr("width",function(t){return"n"===t.type||"s"===t.type?e[1][0]-e[0][0]+h:h}).attr("height",function(t){return"e"===t.type||"w"===t.type?e[1][1]-e[0][1]+h:h})):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function i(t,e){return t.__brush.emitter||new o(t,e)}function o(t,e){this.that=t,this.args=e,this.state=t.__brush,this.active=0}function u(){function n(){var t=rf(M);!V||w||E||(Math.abs(t[0]-I[0])>Math.abs(t[1]-I[1])?E=!0:w=!0),I=t,x=!0,Ed(),o()}function o(){var t;switch(_=I[0]-R[0],b=I[1]-R[1],C){case Fd:case Md:S&&(_=Math.max(k-f,Math.min(j-v,_)),h=f+_,m=v+_),A&&(b=Math.max(N-p,Math.min(P-y,b)),d=p+b,g=y+b);break;case Cd:S<0?(_=Math.max(k-f,Math.min(j-f,_)),h=f+_,m=v):S>0&&(_=Math.max(k-v,Math.min(j-v,_)),h=f,m=v+_),A<0?(b=Math.max(N-p,Math.min(P-p,b)),d=p+b,g=y):A>0&&(b=Math.max(N-y,Math.min(P-y,b)),d=p,g=y+b);break;case Sd:S&&(h=Math.max(k,Math.min(j,f-_*S)),m=Math.max(k,Math.min(j,v+_*S))),A&&(d=Math.max(N,Math.min(P,p-b*A)),g=Math.max(N,Math.min(P,y+b*A)))}m<h&&(S*=-1,t=f,f=v,v=t,t=h,h=m,m=t,F in kd&&B.attr("cursor",Dd[F=kd[F]])),g<d&&(A*=-1,t=p,p=y,y=t,t=d,d=g,g=t,F in Nd&&B.attr("cursor",Dd[F=Nd[F]])),O.selection&&(D=O.selection),w&&(h=D[0][0],m=D[1][0]),E&&(d=D[0][1],g=D[1][1]),D[0][0]===h&&D[0][1]===d&&D[1][0]===m&&D[1][1]===g||(O.selection=[[h,d],[m,g]],r.call(M),L.brush())}function u(){if(Sn(),t.event.touches){if(t.event.touches.length)return;s&&clearTimeout(s),s=setTimeout(function(){s=null},500),z.on("touchmove.brush touchend.brush touchcancel.brush",null)}else xt(t.event.view,x),q.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);z.attr("pointer-events","all"),B.attr("cursor",Dd.overlay),O.selection&&(D=O.selection),kn(D)&&(O.selection=null,r.call(M)),L.end()}function a(){switch(t.event.keyCode){case 16:V=S&&A;break;case 18:C===Cd&&(S&&(v=m-_*S,f=h+_*S),A&&(y=g-b*A,p=d+b*A),C=Sd,o());break;case 32:C!==Cd&&C!==Sd||(S<0?v=m-_:S>0&&(f=h-_),A<0?y=g-b:A>0&&(p=d-b),C=Fd,B.attr("cursor",Dd.selection),o());break;default:return}Ed()}function l(){switch(t.event.keyCode){case 16:V&&(w=E=V=!1,o());break;case 18:C===Sd&&(S<0?v=m:S>0&&(f=h),A<0?y=g:A>0&&(p=d),C=Cd,o());break;case 32:C===Fd&&(t.event.altKey?(S&&(v=m-_*S,f=h+_*S),A&&(y=g-b*A,p=d+b*A),C=Sd):(S<0?v=m:S>0&&(f=h),A<0?y=g:A>0&&(p=d),C=Cd),B.attr("cursor",Dd[F]),o());break;default:return}Ed()}if(t.event.touches){if(t.event.changedTouches.length<t.event.touches.length)return Ed()}else if(s)return;if(c.apply(this,arguments)){var f,h,p,d,v,m,y,g,_,b,x,w,E,M=this,F=t.event.target.__data__.type,C="selection"===(t.event.metaKey?F="overlay":F)?Md:t.event.altKey?Sd:Cd,S=e===Od?null:jd[F],A=e===Ad?null:Pd[F],O=Dn(M),T=O.extent,D=O.selection,k=T[0][0],N=T[0][1],j=T[1][0],P=T[1][1],V=S&&A&&t.event.shiftKey,R=rf(M),I=R,L=i(M,arguments).beforestart();"overlay"===F?O.selection=D=[[f=e===Od?k:R[0],p=e===Ad?N:R[1]],[v=e===Od?j:f,y=e===Ad?P:p]]:(f=D[0][0],p=D[0][1],v=D[1][0],y=D[1][1]),h=f,d=p,m=v,g=y;var z=zf(M).attr("pointer-events","none"),B=z.selectAll(".overlay").attr("cursor",Dd[F]);if(t.event.touches)z.on("touchmove.brush",n,!0).on("touchend.brush touchcancel.brush",u,!0);else{var q=zf(t.event.view).on("keydown.brush",a,!0).on("keyup.brush",l,!0).on("mousemove.brush",n,!0).on("mouseup.brush",u,!0);Hf(t.event.view)}Sn(),Cp(M),r.call(M),L.start()}}function a(){var t=this.__brush||{selection:null};return t.extent=l.apply(this,arguments),t.dim=e,t}var s,l=Tn,c=On,f=y(n,"start","brush","end"),h=6;return n.move=function(t,n){t.selection?t.on("start.brush",function(){i(this,arguments).beforestart().start()}).on("interrupt.brush end.brush",function(){i(this,arguments).end()}).tween("brush",function(){function t(t){u.selection=1===t&&kn(l)?null:c(t),r.call(o),a.brush()}var o=this,u=o.__brush,a=i(o,arguments),s=u.selection,l=e.input("function"==typeof n?n.apply(this,arguments):n,u.extent),c=Uh(s,l);return s&&l?t:t(1)}):t.each(function(){var t=this,o=arguments,u=t.__brush,a=e.input("function"==typeof n?n.apply(t,o):n,u.extent),s=i(t,o).beforestart();Cp(t),u.selection=null==a||kn(a)?null:a,r.call(t),s.start().brush().end()})},o.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting&&(this.starting=!1,this.emit("start")),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(t){D(new wd(n,t,e.output(this.state.selection)),f.apply,f,[t,this.that,this.args])}},n.extent=function(t){return arguments.length?(l="function"==typeof t?t:xd([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),n):l},n.filter=function(t){return arguments.length?(c="function"==typeof t?t:xd(!!t),n):c},n.handleSize=function(t){return arguments.length?(h=+t,n):h},n.on=function(){var t=f.on.apply(f,arguments);return t===f?n:t},n}function Rn(t){return function(e,n){return t(e.source.value+e.target.value,n.source.value+n.target.value)}}function In(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Ln(){return new In}function zn(t){return t.source}function Bn(t){return t.target}function qn(t){return t.radius}function Un(t){return t.startAngle}function Kn(t){return t.endAngle}function Hn(){}function Wn(t,e){var n=new Hn;if(t instanceof Hn)t.each(function(t,e){n.set(e,t)});else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==e)for(;++i<o;)n.set(i,t[i]);else for(;++i<o;)n.set(e(r=t[i],i,t),r)}else if(t)for(var u in t)n.set(u,t[u]);return n}function Yn(){return{}}function Xn(t,e,n){t[e]=n}function $n(){return Wn()}function Gn(t,e,n){t.set(e,n)}function Zn(){}function Jn(t,e){var n=new Zn;if(t instanceof Zn)t.each(function(t){n.add(t)});else if(t){var r=-1,i=t.length;if(null==e)for(;++r<i;)n.add(t[r]);else for(;++r<i;)n.add(e(t[r],r,t))}return n}function Qn(t){return new Function("d","return {"+t.map(function(t,e){return JSON.stringify(t)+": d["+e+"]"}).join(",")+"}")}function tr(t,e){var n=Qn(t);return function(r,i){return e(n(r),i,t)}}function er(t){var e=Object.create(null),n=[];return t.forEach(function(t){for(var r in t)r in e||n.push(e[r]=r)}),n}function nr(t,e,n,r){if(isNaN(e)||isNaN(n))return t;var i,o,u,a,s,l,c,f,h,p=t._root,d={data:r},v=t._x0,m=t._y0,y=t._x1,g=t._y1;if(!p)return t._root=d,t;for(;p.length;)if((l=e>=(o=(v+y)/2))?v=o:y=o,(c=n>=(u=(m+g)/2))?m=u:g=u,i=p,!(p=p[f=c<<1|l]))return i[f]=d,t;if(a=+t._x.call(null,p.data),s=+t._y.call(null,p.data),e===a&&n===s)return d.next=p,i?i[f]=d:t._root=d,t;do{i=i?i[f]=new Array(4):t._root=new Array(4),(l=e>=(o=(v+y)/2))?v=o:y=o,(c=n>=(u=(m+g)/2))?m=u:g=u}while((f=c<<1|l)==(h=(s>=u)<<1|a>=o));return i[h]=p,i[f]=d,t}function rr(t){var e,n,r,i,o=t.length,u=new Array(o),a=new Array(o),s=1/0,l=1/0,c=-1/0,f=-1/0;for(n=0;n<o;++n)isNaN(r=+this._x.call(null,e=t[n]))||isNaN(i=+this._y.call(null,e))||(u[n]=r,a[n]=i,r<s&&(s=r),r>c&&(c=r),i<l&&(l=i),i>f&&(f=i));for(c<s&&(s=this._x0,c=this._x1),f<l&&(l=this._y0,f=this._y1),this.cover(s,l).cover(c,f),n=0;n<o;++n)nr(this,u[n],a[n],t[n]);return this}function ir(t){for(var e=0,n=t.length;e<n;++e)this.remove(t[e]);return this}function or(t){return t[0]}function ur(t){return t[1]}function ar(t,e,n){var r=new sr(null==e?or:e,null==n?ur:n,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function sr(t,e,n,r,i,o){this._x=t,this._y=e,this._x0=n,this._y0=r,this._x1=i,this._y1=o,this._root=void 0}function lr(t){for(var e={data:t.data},n=e;t=t.next;)n=n.next={data:t.data};return e}function cr(t){return t.x+t.vx}function fr(t){return t.y+t.vy}function hr(t){return t.index}function pr(t,e){var n=t.get(e);if(!n)throw new Error("missing: "+e);return n}function dr(t){return t.x}function vr(t){return t.y}function mr(t){return new yr(t)}function yr(t){if(!(e=Wv.exec(t)))throw new Error("invalid format: "+t);var e,n=e[1]||" ",r=e[2]||">",i=e[3]||"-",o=e[4]||"",u=!!e[5],a=e[6]&&+e[6],s=!!e[7],l=e[8]&&+e[8].slice(1),c=e[9]||"";"n"===c?(s=!0,c="g"):Hv[c]||(c=""),(u||"0"===n&&"="===r)&&(u=!0,n="0",r="="),this.fill=n,this.align=r,this.sign=i,this.symbol=o,this.zero=u,this.width=a,this.comma=s,this.precision=l,this.type=c}function gr(e){return Yv=Gv(e),t.format=Yv.format,t.formatPrefix=Yv.formatPrefix,Yv}function _r(){this.reset()}function br(t,e,n){var r=t.s=e+n,i=r-e,o=r-i;t.t=e-o+(n-i)}function xr(t){return t>1?0:t<-1?jm:Math.acos(t)}function wr(t){return t>1?Pm:t<-1?-Pm:Math.asin(t)}function Er(t){return(t=Xm(t/2))*t}function Mr(){}function Fr(t,e){t&&Qm.hasOwnProperty(t.type)&&Qm[t.type](t,e)}function Cr(t,e,n){var r,i=-1,o=t.length-n;for(e.lineStart();++i<o;)r=t[i],e.point(r[0],r[1],r[2]);e.lineEnd()}function Sr(t,e){var n=-1,r=t.length;for(e.polygonStart();++n<r;)Cr(t[n],e,1);e.polygonEnd()}function Ar(){ry.point=Tr}function Or(){Dr(em,nm)}function Tr(t,e){ry.point=Dr,em=t,nm=e,t*=Lm,e*=Lm,rm=t,im=Um(e=e/2+Vm),om=Xm(e)}function Dr(t,e){t*=Lm,e*=Lm,e=e/2+Vm;var n=t-rm,r=n>=0?1:-1,i=r*n,o=Um(e),u=Xm(e),a=om*u,s=im*o+a*Um(i),l=a*r*Xm(i);ey.add(qm(l,s)),rm=t,im=o,om=u}function kr(t){return[qm(t[1],t[0]),wr(t[2])]}function Nr(t){var e=t[0],n=t[1],r=Um(n);return[r*Um(e),r*Xm(e),Xm(n)]}function jr(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function Pr(t,e){return[t[1]*e[2]-t[2]*e[1],t[2]*e[0]-t[0]*e[2],t[0]*e[1]-t[1]*e[0]]}function Vr(t,e){t[0]+=e[0],t[1]+=e[1],t[2]+=e[2]}function Rr(t,e){return[t[0]*e,t[1]*e,t[2]*e]}function Ir(t){var e=Gm(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=e,t[1]/=e,t[2]/=e}function Lr(t,e){dm.push(vm=[um=t,sm=t]),e<am&&(am=e),e>lm&&(lm=e)}function zr(t,e){var n=Nr([t*Lm,e*Lm]);if(pm){var r=Pr(pm,n),i=[r[1],-r[0],0],o=Pr(i,r);Ir(o),o=kr(o);var u,a=t-cm,s=a>0?1:-1,l=o[0]*Im*s,c=zm(a)>180;c^(s*cm<l&&l<s*t)?(u=o[1]*Im)>lm&&(lm=u):(l=(l+360)%360-180,c^(s*cm<l&&l<s*t)?(u=-o[1]*Im)<am&&(am=u):(e<am&&(am=e),e>lm&&(lm=e))),c?t<cm?Wr(um,t)>Wr(um,sm)&&(sm=t):Wr(t,sm)>Wr(um,sm)&&(um=t):sm>=um?(t<um&&(um=t),t>sm&&(sm=t)):t>cm?Wr(um,t)>Wr(um,sm)&&(sm=t):Wr(t,sm)>Wr(um,sm)&&(um=t)}else dm.push(vm=[um=t,sm=t]);e<am&&(am=e),e>lm&&(lm=e),pm=n,cm=t}function Br(){uy.point=zr}function qr(){vm[0]=um,vm[1]=sm,uy.point=Lr,pm=null}function Ur(t,e){if(pm){var n=t-cm;oy.add(zm(n)>180?n+(n>0?360:-360):n)}else fm=t,hm=e;ry.point(t,e),zr(t,e)}function Kr(){ry.lineStart()}function Hr(){Ur(fm,hm),ry.lineEnd(),zm(oy)>Nm&&(um=-(sm=180)),vm[0]=um,vm[1]=sm,pm=null}function Wr(t,e){return(e-=t)<0?e+360:e}function Yr(t,e){return t[0]-e[0]}function Xr(t,e){return t[0]<=t[1]?t[0]<=e&&e<=t[1]:e<t[0]||t[1]<e}function $r(t,e){t*=Lm,e*=Lm;var n=Um(e);Gr(n*Um(t),n*Xm(t),Xm(e))}function Gr(t,e,n){++mm,gm+=(t-gm)/mm,_m+=(e-_m)/mm,bm+=(n-bm)/mm}function Zr(){sy.point=Jr}function Jr(t,e){t*=Lm,e*=Lm;var n=Um(e);Om=n*Um(t),Tm=n*Xm(t),Dm=Xm(e),sy.point=Qr,Gr(Om,Tm,Dm)}function Qr(t,e){t*=Lm,e*=Lm;var n=Um(e),r=n*Um(t),i=n*Xm(t),o=Xm(e),u=qm(Gm((u=Tm*o-Dm*i)*u+(u=Dm*r-Om*o)*u+(u=Om*i-Tm*r)*u),Om*r+Tm*i+Dm*o);ym+=u,xm+=u*(Om+(Om=r)),wm+=u*(Tm+(Tm=i)),Em+=u*(Dm+(Dm=o)),Gr(Om,Tm,Dm)}function ti(){sy.point=$r}function ei(){sy.point=ri}function ni(){ii(Sm,Am),sy.point=$r}function ri(t,e){Sm=t,Am=e,t*=Lm,e*=Lm,sy.point=ii;var n=Um(e);Om=n*Um(t),Tm=n*Xm(t),Dm=Xm(e),Gr(Om,Tm,Dm)}function ii(t,e){t*=Lm,e*=Lm;var n=Um(e),r=n*Um(t),i=n*Xm(t),o=Xm(e),u=Tm*o-Dm*i,a=Dm*r-Om*o,s=Om*i-Tm*r,l=Gm(u*u+a*a+s*s),c=wr(l),f=l&&-c/l;Mm+=f*u,Fm+=f*a,Cm+=f*s,ym+=c,xm+=c*(Om+(Om=r)),wm+=c*(Tm+(Tm=i)),Em+=c*(Dm+(Dm=o)),Gr(Om,Tm,Dm)}function oi(t,e){return[t>jm?t-Rm:t<-jm?t+Rm:t,e]}function ui(t,e,n){return(t%=Rm)?e||n?fy(si(t),li(e,n)):si(t):e||n?li(e,n):oi}function ai(t){return function(e,n){return e+=t,[e>jm?e-Rm:e<-jm?e+Rm:e,n]}}function si(t){var e=ai(t);return e.invert=ai(-t),e}function li(t,e){function n(t,e){var n=Um(e),a=Um(t)*n,s=Xm(t)*n,l=Xm(e),c=l*r+a*i;return[qm(s*o-c*u,a*r-l*i),wr(c*o+s*u)]}var r=Um(t),i=Xm(t),o=Um(e),u=Xm(e);return n.invert=function(t,e){var n=Um(e),a=Um(t)*n,s=Xm(t)*n,l=Xm(e),c=l*o-s*u;return[qm(s*o+l*u,a*r+c*i),wr(c*r-a*i)]},n}function ci(t,e,n,r,i,o){if(n){var u=Um(e),a=Xm(e),s=r*n;null==i?(i=e+r*Rm,o=e-s/2):(i=fi(u,i),o=fi(u,o),(r>0?i<o:i>o)&&(i+=r*Rm));for(var l,c=i;r>0?c>o:c<o;c-=s)l=kr([u,-a*Um(c),-a*Xm(c)]),t.point(l[0],l[1])}}function fi(t,e){e=Nr(e),e[0]-=t,Ir(e);var n=xr(-e[1]);return((-e[2]<0?-n:n)+Rm-Nm)%Rm}function hi(t,e,n,r){this.x=t,this.z=e,this.o=n,this.e=r,this.v=!1,this.n=this.p=null}function pi(t){if(e=t.length){for(var e,n,r=0,i=t[0];++r<e;)i.n=n=t[r],n.p=i,i=n;i.n=n=t[0],n.p=i}}function di(t,e,n,r){function i(i,o){return t<=i&&i<=n&&e<=o&&o<=r}function o(i,o,a,l){var c=0,f=0;if(null==i||(c=u(i,a))!==(f=u(o,a))||s(i,o)<0^a>0)do{l.point(0===c||3===c?t:n,c>1?r:e)}while((c=(c+a+4)%4)!==f);else l.point(o[0],o[1])}function u(r,i){return zm(r[0]-t)<Nm?i>0?0:3:zm(r[0]-n)<Nm?i>0?2:1:zm(r[1]-e)<Nm?i>0?1:0:i>0?3:2}function a(t,e){return s(t.x,e.x)}function s(t,e){var n=u(t,1),r=u(e,1);return n!==r?n-r:0===n?e[1]-t[1]:1===n?t[0]-e[0]:2===n?t[1]-e[1]:e[0]-t[0]}return function(u){function s(t,e){i(t,e)&&C.point(t,e)}function l(){for(var e=0,n=0,i=m.length;n<i;++n)for(var o,u,a=m[n],s=1,l=a.length,c=a[0],f=c[0],h=c[1];s<l;++s)o=f,u=h,c=a[s],f=c[0],h=c[1],u<=r?h>r&&(f-o)*(r-u)>(h-u)*(t-o)&&++e:h<=r&&(f-o)*(r-u)<(h-u)*(t-o)&&--e;return e}function c(){C=S,v=[],m=[],F=!0}function f(){var t=l(),e=F&&t,n=(v=Ac(v)).length;(e||n)&&(u.polygonStart(),e&&(u.lineStart(),o(null,null,1,u),u.lineEnd()),n&&Ay(v,a,t,o,u),u.polygonEnd()),C=u,v=m=y=null}function h(){A.point=d,m&&m.push(y=[]),M=!0,E=!1,x=w=NaN}function p(){v&&(d(g,_),b&&E&&S.rejoin(),v.push(S.result())),A.point=s,E&&C.lineEnd()}function d(o,u){var a=i(o,u);if(m&&y.push([o,u]),M)g=o,_=u,b=a,M=!1,a&&(C.lineStart(),C.point(o,u));else if(a&&E)C.point(o,u);else{var s=[x=Math.max(Ty,Math.min(Oy,x)),w=Math.max(Ty,Math.min(Oy,w))],l=[o=Math.max(Ty,Math.min(Oy,o)),u=Math.max(Ty,Math.min(Oy,u))];Cy(s,l,t,e,n,r)?(E||(C.lineStart(),C.point(s[0],s[1])),C.point(l[0],l[1]),a||C.lineEnd(),F=!1):a&&(C.lineStart(),C.point(o,u),F=!1)}x=o,w=u,E=a}var v,m,y,g,_,b,x,w,E,M,F,C=u,S=Fy(),A={point:s,lineStart:h,lineEnd:p,polygonStart:c,polygonEnd:f};return A}}function vi(){Py.point=yi,Py.lineEnd=mi}function mi(){Py.point=Py.lineEnd=Mr}function yi(t,e){t*=Lm,e*=Lm,hy=t,py=Xm(e),dy=Um(e),Py.point=gi}function gi(t,e){t*=Lm,e*=Lm;var n=Xm(e),r=Um(e),i=zm(t-hy),o=Um(i),u=Xm(i),a=r*u,s=dy*n-py*r*o,l=py*n+dy*r*o;jy.add(qm(Gm(a*a+s*s),l)),hy=t,py=n,dy=r}function _i(t,e){return!(!t||!By.hasOwnProperty(t.type))&&By[t.type](t,e)}function bi(t,e){return 0===Ly(t,e)}function xi(t,e){var n=Ly(t[0],t[1]);return Ly(t[0],e)+Ly(e,t[1])<=n+Nm}function wi(t,e){return!!Ny(t.map(Ei),Mi(e))}function Ei(t){return t=t.map(Mi),t.pop(),t}function Mi(t){return[t[0]*Lm,t[1]*Lm]}function Fi(t,e,n){var r=vc(t,e-Nm,n).concat(e);return function(t){return r.map(function(e){return[t,e]})}}function Ci(t,e,n){var r=vc(t,e-Nm,n).concat(e);return function(t){return r.map(function(e){return[e,t]})}}function Si(){function t(){return{type:"MultiLineString",coordinates:e()}}function e(){return vc(Km(o/m)*m,i,m).map(h).concat(vc(Km(l/y)*y,s,y).map(p)).concat(vc(Km(r/d)*d,n,d).filter(function(t){return zm(t%m)>Nm}).map(c)).concat(vc(Km(a/v)*v,u,v).filter(function(t){return zm(t%y)>Nm}).map(f))}var n,r,i,o,u,a,s,l,c,f,h,p,d=10,v=d,m=90,y=360,g=2.5;return t.lines=function(){return e().map(function(t){return{type:"LineString",coordinates:t}})},t.outline=function(){return{type:"Polygon",coordinates:[h(o).concat(p(s).slice(1),h(i).reverse().slice(1),p(l).reverse().slice(1))]}},t.extent=function(e){return arguments.length?t.extentMajor(e).extentMinor(e):t.extentMinor()},t.extentMajor=function(e){return arguments.length?(o=+e[0][0],i=+e[1][0],l=+e[0][1],s=+e[1][1],o>i&&(e=o,o=i,i=e),l>s&&(e=l,l=s,s=e),t.precision(g)):[[o,l],[i,s]]},t.extentMinor=function(e){return arguments.length?(r=+e[0][0],n=+e[1][0],a=+e[0][1],u=+e[1][1],r>n&&(e=r,r=n,n=e),a>u&&(e=a,a=u,u=e),t.precision(g)):[[r,a],[n,u]]},t.step=function(e){return arguments.length?t.stepMajor(e).stepMinor(e):t.stepMinor()},t.stepMajor=function(e){return arguments.length?(m=+e[0],y=+e[1],t):[m,y]},t.stepMinor=function(e){return arguments.length?(d=+e[0],v=+e[1],t):[d,v]},t.precision=function(e){return arguments.length?(g=+e,c=Fi(a,u,90),f=Ci(r,n,g),h=Fi(l,s,90),p=Ci(o,i,g),t):g},t.extentMajor([[-180,-90+Nm],[180,90-Nm]]).extentMinor([[-180,-80-Nm],[180,80+Nm]])}function Ai(){return Si()()}function Oi(){Yy.point=Ti}function Ti(t,e){Yy.point=Di,vy=yy=t,my=gy=e}function Di(t,e){Wy.add(gy*t-yy*e),yy=t,gy=e}function ki(){Di(vy,my)}function Ni(t,e){t<Xy&&(Xy=t),t>Gy&&(Gy=t),e<$y&&($y=e),e>Zy&&(Zy=e)}function ji(t,e){Qy+=t,tg+=e,++eg}function Pi(){sg.point=Vi}function Vi(t,e){sg.point=Ri,ji(xy=t,wy=e)}function Ri(t,e){var n=t-xy,r=e-wy,i=Gm(n*n+r*r);ng+=i*(xy+t)/2,rg+=i*(wy+e)/2,ig+=i,ji(xy=t,wy=e)}function Ii(){sg.point=ji}function Li(){sg.point=Bi}function zi(){qi(_y,by)}function Bi(t,e){sg.point=qi,ji(_y=xy=t,by=wy=e)}function qi(t,e){var n=t-xy,r=e-wy,i=Gm(n*n+r*r);ng+=i*(xy+t)/2,rg+=i*(wy+e)/2,ig+=i,i=wy*t-xy*e,og+=i*(xy+t),ug+=i*(wy+e),ag+=3*i,ji(xy=t,wy=e)}function Ui(t){this._context=t}function Ki(t,e){vg.point=Hi,cg=hg=t,fg=pg=e}function Hi(t,e){hg-=t,pg-=e,dg.add(Gm(hg*hg+pg*pg)),hg=t,pg=e}function Wi(){this._string=[]}function Yi(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}function Xi(t){return t.length>1}function $i(t,e){return((t=t.x)[0]<0?t[1]-Pm-Nm:Pm-t[1])-((e=e.x)[0]<0?e[1]-Pm-Nm:Pm-e[1])}function Gi(t){var e,n=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),e=1},point:function(o,u){var a=o>0?jm:-jm,s=zm(o-n);zm(s-jm)<Nm?(t.point(n,r=(r+u)/2>0?Pm:-Pm),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(a,r),t.point(o,r),e=0):i!==a&&s>=jm&&(zm(n-i)<Nm&&(n-=i*Nm),zm(o-a)<Nm&&(o-=a*Nm),r=Zi(n,r,o,u),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(a,r),e=0),t.point(n=o,r=u),i=a},lineEnd:function(){t.lineEnd(),n=r=NaN},clean:function(){return 2-e}}}function Zi(t,e,n,r){var i,o,u=Xm(t-n);return zm(u)>Nm?Bm((Xm(e)*(o=Um(r))*Xm(n)-Xm(r)*(i=Um(e))*Xm(t))/(i*o*u)):(e+r)/2}function Ji(t,e,n,r){var i;if(null==t)i=n*Pm,r.point(-jm,i),r.point(0,i),r.point(jm,i),r.point(jm,0),r.point(jm,-i),r.point(0,-i),r.point(-jm,-i),r.point(-jm,0),r.point(-jm,i);else if(zm(t[0]-e[0])>Nm){var o=t[0]<e[0]?jm:-jm;i=n*o/2,r.point(-o,i),r.point(0,i),r.point(o,i)}else r.point(e[0],e[1])}function Qi(t){return function(e){var n=new to;for(var r in t)n[r]=t[r];return n.stream=e,n}}function to(){}function eo(t,e,n){var r=e[1][0]-e[0][0],i=e[1][1]-e[0][1],o=t.clipExtent&&t.clipExtent();t.scale(150).translate([0,0]),null!=o&&t.clipExtent(null),ty(n,t.stream(Jy));var u=Jy.result(),a=Math.min(r/(u[1][0]-u[0][0]),i/(u[1][1]-u[0][1])),s=+e[0][0]+(r-a*(u[1][0]+u[0][0]))/2,l=+e[0][1]+(i-a*(u[1][1]+u[0][1]))/2;return null!=o&&t.clipExtent(o),t.scale(150*a).translate([s,l])}function no(t,e,n){return eo(t,[[0,0],e],n)}function ro(t){return Qi({point:function(e,n){e=t(e,n),this.stream.point(e[0],e[1])}})}function io(t,e){function n(r,i,o,u,a,s,l,c,f,h,p,d,v,m){var y=l-r,g=c-i,_=y*y+g*g;if(_>4*e&&v--){var b=u+h,x=a+p,w=s+d,E=Gm(b*b+x*x+w*w),M=wr(w/=E),F=zm(zm(w)-1)<Nm||zm(o-f)<Nm?(o+f)/2:qm(x,b),C=t(F,M),S=C[0],A=C[1],O=S-r,T=A-i,D=g*O-y*T;(D*D/_>e||zm((y*O+g*T)/_-.5)>.3||u*h+a*p+s*d<wg)&&(n(r,i,o,u,a,s,S,A,F,b/=E,x/=E,w,v,m),m.point(S,A),n(S,A,F,b,x,w,l,c,f,h,p,d,v,m))}}return function(e){function r(n,r){n=t(n,r),e.point(n[0],n[1])}function i(){y=NaN,w.point=o,e.lineStart()}function o(r,i){var o=Nr([r,i]),u=t(r,i);n(y,g,m,_,b,x,y=u[0],g=u[1],m=r,_=o[0],b=o[1],x=o[2],xg,e),e.point(y,g)}function u(){w.point=r,e.lineEnd()}function a(){i(),w.point=s,w.lineEnd=l}function s(t,e){o(c=t,e),f=y,h=g,p=_,d=b,v=x,w.point=o}function l(){n(y,g,m,_,b,x,f,h,c,p,d,v,xg,e),w.lineEnd=u,u()}var c,f,h,p,d,v,m,y,g,_,b,x,w={point:r,lineStart:i,lineEnd:u,polygonStart:function(){e.polygonStart(),w.lineStart=a},polygonEnd:function(){e.polygonEnd(),w.lineStart=i}};return w}}function oo(t){return uo(function(){return t})()}function uo(t){function e(t){return t=c(t[0]*Lm,t[1]*Lm),[t[0]*m+a,s-t[1]*m]}function n(t){return(t=c.invert((t[0]-a)/m,(s-t[1])/m))&&[t[0]*Im,t[1]*Im]}function r(t,e){return t=u(t,e),[t[0]*m+a,s-t[1]*m]}function i(){c=fy(l=ui(x,w,E),u);var t=u(_,b);return a=y-t[0]*m,s=g+t[1]*m,o()}function o(){return d=v=null,e}var u,a,s,l,c,f,h,p,d,v,m=150,y=480,g=250,_=0,b=0,x=0,w=0,E=0,M=null,F=gg,C=null,S=Ky,A=.5,O=Eg(r,A);return e.stream=function(t){return d&&v===t?d:d=Mg(F(l,O(S(v=t))))},e.clipAngle=function(t){return arguments.length?(F=+t?_g(M=t*Lm,6*Lm):(M=null,gg),o()):M*Im},e.clipExtent=function(t){return arguments.length?(S=null==t?(C=f=h=p=null,Ky):di(C=+t[0][0],f=+t[0][1],h=+t[1][0],p=+t[1][1]),o()):null==C?null:[[C,f],[h,p]]},e.scale=function(t){return arguments.length?(m=+t,i()):m},e.translate=function(t){return arguments.length?(y=+t[0],g=+t[1],i()):[y,g]},e.center=function(t){return arguments.length?(_=t[0]%360*Lm,b=t[1]%360*Lm,i()):[_*Im,b*Im]},e.rotate=function(t){return arguments.length?(x=t[0]%360*Lm,w=t[1]%360*Lm,E=t.length>2?t[2]%360*Lm:0,i()):[x*Im,w*Im,E*Im]},e.precision=function(t){return arguments.length?(O=Eg(r,A=t*t),o()):Gm(A)},e.fitExtent=function(t,n){return eo(e,t,n)},e.fitSize=function(t,n){return no(e,t,n)},function(){return u=t.apply(this,arguments),e.invert=u.invert&&n,i()}}function ao(t){var e=0,n=jm/3,r=uo(t),i=r(e,n);return i.parallels=function(t){return arguments.length?r(e=t[0]*Lm,n=t[1]*Lm):[e*Im,n*Im]},i}function so(t){function e(t,e){return[t*n,Xm(e)/n]}var n=Um(t);return e.invert=function(t,e){return[t/n,wr(e*n)]},e}function lo(t,e){function n(t,e){var n=Gm(o-2*i*Xm(e))/i;return[n*Xm(t*=i),u-n*Um(t)]}var r=Xm(t),i=(r+Xm(e))/2;if(zm(i)<Nm)return so(t);var o=1+r*(2*i-r),u=Gm(o)/i;return n.invert=function(t,e){var n=u-e;return[qm(t,zm(n))/i*$m(n),wr((o-(t*t+n*n)*i*i)/(2*i))]},n}function co(t){var e=t.length;return{point:function(n,r){for(var i=-1;++i<e;)t[i].point(n,r)},sphere:function(){for(var n=-1;++n<e;)t[n].sphere()},lineStart:function(){for(var n=-1;++n<e;)t[n].lineStart()},lineEnd:function(){for(var n=-1;++n<e;)t[n].lineEnd()},polygonStart:function(){for(var n=-1;++n<e;)t[n].polygonStart()},polygonEnd:function(){for(var n=-1;++n<e;)t[n].polygonEnd()}}}function fo(t){return function(e,n){var r=Um(e),i=Um(n),o=t(r*i);return[o*i*Xm(e),o*Xm(n)]}}function ho(t){return function(e,n){var r=Gm(e*e+n*n),i=t(r),o=Xm(i),u=Um(i);return[qm(e*o,r*u),wr(r&&n*o/r)]}}function po(t,e){return[t,Wm(Zm((Pm+e)/2))]}function vo(t){function e(){var e=jm*a(),u=o(Ey(o.rotate()).invert([0,0]));return l(null==c?[[u[0]-e,u[1]-e],[u[0]+e,u[1]+e]]:t===po?[[Math.max(u[0]-e,c),n],[Math.min(u[0]+e,r),i]]:[[c,Math.max(u[1]-e,n)],[r,Math.min(u[1]+e,i)]])}var n,r,i,o=oo(t),u=o.center,a=o.scale,s=o.translate,l=o.clipExtent,c=null;return o.scale=function(t){return arguments.length?(a(t),e()):a()},o.translate=function(t){return arguments.length?(s(t),e()):s()},o.center=function(t){return arguments.length?(u(t),e()):u()},o.clipExtent=function(t){return arguments.length?(null==t?c=n=r=i=null:(c=+t[0][0],n=+t[0][1],r=+t[1][0],i=+t[1][1]),e()):null==c?null:[[c,n],[r,i]]},e()}function mo(t){return Zm((Pm+t)/2)}function yo(t,e){function n(t,e){o>0?e<-Pm+Nm&&(e=-Pm+Nm):e>Pm-Nm&&(e=Pm-Nm);var n=o/Ym(mo(e),i);return[n*Xm(i*t),o-n*Um(i*t)]}var r=Um(t),i=t===e?Xm(t):Wm(r/Um(e))/Wm(mo(e)/mo(t)),o=r*Ym(mo(t),i)/i;return i?(n.invert=function(t,e){var n=o-e,r=$m(i)*Gm(t*t+n*n);return[qm(t,zm(n))/i*$m(n),2*Bm(Ym(o/r,1/i))-Pm]},n):po}function go(t,e){return[t,e]}function _o(t,e){function n(t,e){var n=o-e,r=i*t;return[n*Xm(r),o-n*Um(r)]}var r=Um(t),i=t===e?Xm(t):(r-Um(e))/(e-t),o=r/i+t;return zm(i)<Nm?go:(n.invert=function(t,e){var n=o-e;return[qm(t,zm(n))/i*$m(n),o-$m(i)*Gm(t*t+n*n)]},n)}function bo(t,e){var n=Um(e),r=Um(t)*n;return[n*Xm(t)/r,Xm(e)/r]}function xo(t,e,n,r){return 1===t&&1===e&&0===n&&0===r?Ky:Qi({point:function(i,o){this.stream.point(i*t+n,o*e+r)}})}function wo(t,e){return[Um(e)*Xm(t),Xm(e)]}function Eo(t,e){var n=Um(e),r=1+Um(t)*n;return[n*Xm(t)/r,Xm(e)/r]}function Mo(t,e){return[Wm(Zm((Pm+e)/2)),-t]}function Fo(t,e){return t.parent===e.parent?1:2}function Co(t){return t.reduce(So,0)/t.length}function So(t,e){return t+e.x}function Ao(t){return 1+t.reduce(Oo,0)}function Oo(t,e){return Math.max(t,e.y)}function To(t){for(var e;e=t.children;)t=e[0];return t}function Do(t){for(var e;e=t.children;)t=e[e.length-1];return t}function ko(t){var e=0,n=t.children,r=n&&n.length;if(r)for(;--r>=0;)e+=n[r].value;else e=1;t.value=e}function No(t,e){if(t===e)return t;var n=t.ancestors(),r=e.ancestors(),i=null;for(t=n.pop(),e=r.pop();t===e;)i=t,t=n.pop(),e=r.pop();return i}function jo(t,e){var n,r,i,o,u,a=new Lo(t),s=+t.value&&(a.value=t.value),l=[a];for(null==e&&(e=Vo);n=l.pop();)if(s&&(n.value=+n.data.value),(i=e(n.data))&&(u=i.length))for(n.children=new Array(u),o=u-1;o>=0;--o)l.push(r=n.children[o]=new Lo(i[o])),r.parent=n,r.depth=n.depth+1;return a.eachBefore(Io)}function Po(){return jo(this).eachBefore(Ro)}function Vo(t){return t.children}function Ro(t){t.data=t.data.data}function Io(t){var e=0;do{t.height=e}while((t=t.parent)&&t.height<++e)}function Lo(t){this.data=t,this.depth=this.height=0,this.parent=null}function zo(t){for(var e,n,r=t.length;r;)n=Math.random()*r--|0,e=t[r],t[r]=t[n],t[n]=e;return t}function Bo(t,e){var n,r;if(Ko(e,t))return[e];for(n=0;n<t.length;++n)if(qo(e,t[n])&&Ko(Yo(t[n],e),t))return[t[n],e];for(n=0;n<t.length-1;++n)for(r=n+1;r<t.length;++r)if(qo(Yo(t[n],t[r]),e)&&qo(Yo(t[n],e),t[r])&&qo(Yo(t[r],e),t[n])&&Ko(Xo(t[n],t[r],e),t))return[t[n],t[r],e];throw new Error}function qo(t,e){var n=t.r-e.r,r=e.x-t.x,i=e.y-t.y;return n<0||n*n<r*r+i*i}function Uo(t,e){var n=t.r-e.r+1e-6,r=e.x-t.x,i=e.y-t.y;return n>0&&n*n>r*r+i*i}function Ko(t,e){for(var n=0;n<e.length;++n)if(!Uo(t,e[n]))return!1;return!0}function Ho(t){switch(t.length){case 1:return Wo(t[0]);case 2:return Yo(t[0],t[1]);case 3:return Xo(t[0],t[1],t[2])}}function Wo(t){return{x:t.x,y:t.y,r:t.r}}function Yo(t,e){var n=t.x,r=t.y,i=t.r,o=e.x,u=e.y,a=e.r,s=o-n,l=u-r,c=a-i,f=Math.sqrt(s*s+l*l);return{x:(n+o+s/f*c)/2,y:(r+u+l/f*c)/2,r:(f+i+a)/2}}function Xo(t,e,n){var r=t.x,i=t.y,o=t.r,u=e.x,a=e.y,s=e.r,l=n.x,c=n.y,f=n.r,h=r-u,p=r-l,d=i-a,v=i-c,m=s-o,y=f-o,g=r*r+i*i-o*o,_=g-u*u-a*a+s*s,b=g-l*l-c*c+f*f,x=p*d-h*v,w=(d*b-v*_)/(2*x)-r,E=(v*m-d*y)/x,M=(p*_-h*b)/(2*x)-i,F=(h*y-p*m)/x,C=E*E+F*F-1,S=2*(o+w*E+M*F),A=w*w+M*M-o*o,O=-(C?(S+Math.sqrt(S*S-4*C*A))/(2*C):A/S);return{x:r+w+E*O,y:i+M+F*O,r:O}}function $o(t,e,n){var r=t.x,i=t.y,o=e.r+n.r,u=t.r+n.r,a=e.x-r,s=e.y-i,l=a*a+s*s;if(l){var c=.5+((u*=u)-(o*=o))/(2*l),f=Math.sqrt(Math.max(0,2*o*(u+l)-(u-=l)*u-o*o))/(2*l);n.x=r+c*a+f*s,n.y=i+c*s-f*a}else n.x=r+u,n.y=i}function Go(t,e){var n=e.x-t.x,r=e.y-t.y,i=t.r+e.r;return i*i-1e-6>n*n+r*r}function Zo(t){var e=t._,n=t.next._,r=e.r+n.r,i=(e.x*n.r+n.x*e.r)/r,o=(e.y*n.r+n.y*e.r)/r;return i*i+o*o}function Jo(t){this._=t,this.next=null,this.previous=null}function Qo(t){if(!(i=t.length))return 0;var e,n,r,i,o,u,a,s,l,c,f;if(e=t[0],e.x=0,e.y=0,!(i>1))return e.r;if(n=t[1],e.x=-n.r,n.x=e.r,n.y=0,!(i>2))return e.r+n.r;$o(n,e,r=t[2]),e=new Jo(e),n=new Jo(n),r=new Jo(r),e.next=r.previous=n,n.next=e.previous=r,r.next=n.previous=e;t:for(a=3;a<i;++a){$o(e._,n._,r=t[a]),r=new Jo(r),s=n.next,l=e.previous,c=n._.r,f=e._.r;do{if(c<=f){if(Go(s._,r._)){n=s,e.next=n,n.previous=e,--a;continue t}c+=s._.r,s=s.next}else{if(Go(l._,r._)){e=l,e.next=n,n.previous=e,--a;continue t}f+=l._.r,l=l.previous}}while(s!==l.next);for(r.previous=e,r.next=n,e.next=n.previous=n=r,o=Zo(e);(r=r.next)!==n;)(u=Zo(r))<o&&(e=r,o=u);n=e.next}for(e=[n._],r=n;(r=r.next)!==n;)e.push(r._);for(r=t_(e),a=0;a<i;++a)e=t[a],e.x-=r.x,e.y-=r.y;return r.r}function tu(t){return null==t?null:eu(t)}function eu(t){if("function"!=typeof t)throw new Error;return t}function nu(){return 0}function ru(t){return Math.sqrt(t.value)}function iu(t){return function(e){e.children||(e.r=Math.max(0,+t(e)||0))}}function ou(t,e){return function(n){if(r=n.children){var r,i,o,u=r.length,a=t(n)*e||0;if(a)for(i=0;i<u;++i)r[i].r+=a;if(o=Qo(r),a)for(i=0;i<u;++i)r[i].r-=a;n.r=o+a}}}function uu(t){return function(e){var n=e.parent;e.r*=t,n&&(e.x=n.x+t*e.x,e.y=n.y+t*e.y)}}function au(t){return t.id}function su(t){return t.parentId}function lu(t,e){return t.parent===e.parent?1:2}function cu(t){var e=t.children;return e?e[0]:t.t}function fu(t){var e=t.children;return e?e[e.length-1]:t.t}function hu(t,e,n){var r=n/(e.i-t.i);e.c-=r,e.s+=n,t.c+=r,e.z+=n,e.m+=n}function pu(t){for(var e,n=0,r=0,i=t.children,o=i.length;--o>=0;)e=i[o],e.z+=n,e.m+=n,n+=e.s+(r+=e.c)}function du(t,e,n){return t.a.parent===e.parent?t.a:n}function vu(t,e){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=e}function mu(t){for(var e,n,r,i,o,u=new vu(t,0),a=[u];e=a.pop();)if(r=e._.children)for(e.children=new Array(o=r.length),i=o-1;i>=0;--i)a.push(n=e.children[i]=new vu(r[i],i)),n.parent=e;return(u.parent=new vu(null,0)).children=[u],u}function yu(t,e,n,r,i,o){for(var u,a,s,l,c,f,h,p,d,v,m,y=[],g=e.children,_=0,b=0,x=g.length,w=e.value;_<x;){s=i-n,l=o-r;do{c=g[b++].value}while(!c&&b<x);for(f=h=c,v=Math.max(l/s,s/l)/(w*t),m=c*c*v,d=Math.max(h/m,m/f);b<x;++b){if(c+=a=g[b].value,a<f&&(f=a),a>h&&(h=a),m=c*c*v,(p=Math.max(h/m,m/f))>d){c-=a;break}d=p}y.push(u={value:c,dice:s<l,children:g.slice(_,b)}),u.dice?o_(u,n,r,i,w?r+=l*c/w:o):h_(u,n,r,w?n+=s*c/w:i,o),w-=c,_=b}return y}function gu(t,e){return t[0]-e[0]||t[1]-e[1]}function _u(t){for(var e=t.length,n=[0,1],r=2,i=2;i<e;++i){for(;r>1&&x_(t[n[r-2]],t[n[r-1]],t[i])<=0;)--r;n[r++]=i}return n.slice(0,r)}function bu(t){this._size=t,this._call=this._error=null,this._tasks=[],this._data=[],this._waiting=this._active=this._ended=this._start=0}function xu(t){if(!t._start)try{wu(t)}catch(e){if(t._tasks[t._ended+t._active-1])Mu(t,e);else if(!t._data)throw e}}function wu(t){for(;t._start=t._waiting&&t._active<t._size;){var e=t._ended+t._active,n=t._tasks[e],r=n.length-1,i=n[r];n[r]=Eu(t,e),--t._waiting,++t._active,n=i.apply(null,n),t._tasks[e]&&(t._tasks[e]=n||C_)}}function Eu(t,e){return function(n,r){t._tasks[e]&&(--t._active,++t._ended,t._tasks[e]=null,null==t._error&&(null!=n?Mu(t,n):(t._data[e]=r,t._waiting?xu(t):Fu(t))))}}function Mu(t,e){var n,r=t._tasks.length;for(t._error=e,t._data=void 0,t._waiting=NaN;--r>=0;)if((n=t._tasks[r])&&(t._tasks[r]=null,n.abort))try{n.abort()}catch(e){}t._active=NaN,Fu(t)}function Fu(t){if(!t._active&&t._call){var e=t._data;t._data=void 0,t._call(t._error,e)}}function Cu(t){if(null==t)t=1/0;else if(!((t=+t)>=1))throw new Error("invalid concurrency");return new bu(t)}function Su(t){return function(e,n){t(null==e?n:null)}}function Au(t){var e=t.responseType;return e&&"text"!==e?t.response:t.responseText}function Ou(t,e){return function(n){return t(n.responseText,e)}}function Tu(t){function e(e){var o=e+"",u=n.get(o);if(!u){if(i!==W_)return i;n.set(o,u=r.push(e))}return t[(u-1)%t.length]}var n=Wn(),r=[],i=W_;return t=null==t?[]:H_.call(t),e.domain=function(t){if(!arguments.length)return r.slice();r=[],n=Wn();for(var i,o,u=-1,a=t.length;++u<a;)n.has(o=(i=t[u])+"")||n.set(o,r.push(i));return e},e.range=function(n){return arguments.length?(t=H_.call(n),e):t.slice()},e.unknown=function(t){return arguments.length?(i=t,e):i},e.copy=function(){return Tu().domain(r).range(t).unknown(i)},e}function Du(){function t(){var t=i().length,r=u[1]<u[0],f=u[r-0],h=u[1-r];e=(h-f)/Math.max(1,t-s+2*l),a&&(e=Math.floor(e)),f+=(h-f-e*(t-s))*c,n=e*(1-s),a&&(f=Math.round(f),n=Math.round(n));var p=vc(t).map(function(t){return f+e*t});return o(r?p.reverse():p)}var e,n,r=Tu().unknown(void 0),i=r.domain,o=r.range,u=[0,1],a=!1,s=0,l=0,c=.5;return delete r.unknown,r.domain=function(e){return arguments.length?(i(e),t()):i()},r.range=function(e){return arguments.length?(u=[+e[0],+e[1]],t()):u.slice()},r.rangeRound=function(e){return u=[+e[0],+e[1]],a=!0,t()},r.bandwidth=function(){return n},r.step=function(){return e},r.round=function(e){return arguments.length?(a=!!e,t()):a},r.padding=function(e){return arguments.length?(s=l=Math.max(0,Math.min(1,e)),t()):s},r.paddingInner=function(e){return arguments.length?(s=Math.max(0,Math.min(1,e)),t()):s},r.paddingOuter=function(e){return arguments.length?(l=Math.max(0,Math.min(1,e)),t()):l},r.align=function(e){return arguments.length?(c=Math.max(0,Math.min(1,e)),t()):c},r.copy=function(){return Du().domain(i()).range(u).round(a).paddingInner(s).paddingOuter(l).align(c)},t()}function ku(t){var e=t.copy;return t.padding=t.paddingOuter,delete t.paddingInner,delete t.paddingOuter,t.copy=function(){return ku(e())},t}function Nu(){return ku(Du().paddingInner(1))}function ju(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:Y_(e)}function Pu(t){return function(e,n){var r=t(e=+e,n=+n);return function(t){return t<=e?0:t>=n?1:r(t)}}}function Vu(t){return function(e,n){var r=t(e=+e,n=+n);return function(t){return t<=0?e:t>=1?n:r(t)}}}function Ru(t,e,n,r){var i=t[0],o=t[1],u=e[0],a=e[1];return o<i?(i=n(o,i),u=r(a,u)):(i=n(i,o),u=r(u,a)),function(t){return u(i(t))}}function Iu(t,e,n,r){var i=Math.min(t.length,e.length)-1,o=new Array(i),u=new Array(i),a=-1;for(t[i]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++a<i;)o[a]=n(t[a],t[a+1]),u[a]=r(e[a],e[a+1]);return function(e){var n=ec(t,e,1,i)-1;return u[n](o[n](e))}}function Lu(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp())}function zu(t,e){function n(){return i=Math.min(a.length,s.length)>2?Iu:Ru,o=u=null,r}function r(e){return(o||(o=i(a,s,c?Pu(t):t,l)))(+e)}var i,o,u,a=$_,s=$_,l=Uh,c=!1;return r.invert=function(t){return(u||(u=i(s,a,ju,c?Vu(e):e)))(+t)},r.domain=function(t){return arguments.length?(a=K_.call(t,X_),n()):a.slice()},r.range=function(t){return arguments.length?(s=H_.call(t),n()):s.slice()},r.rangeRound=function(t){return s=H_.call(t),l=Kh,n()},r.clamp=function(t){return arguments.length?(c=!!t,n()):c},r.interpolate=function(t){return arguments.length?(l=t,n()):l},n()}function Bu(t){var e=t.domain;return t.ticks=function(t){var n=e();return _c(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){return G_(e(),t,n)},t.nice=function(n){null==n&&(n=10);var i,o=e(),u=0,a=o.length-1,s=o[u],l=o[a];return l<s&&(i=s,s=l,l=i,i=u,u=a,a=i),i=r(s,l,n),i>0?(s=Math.floor(s/i)*i,l=Math.ceil(l/i)*i,i=r(s,l,n)):i<0&&(s=Math.ceil(s*i)/i,l=Math.floor(l*i)/i,i=r(s,l,n)),i>0?(o[u]=Math.floor(s/i)*i,o[a]=Math.ceil(l/i)*i,e(o)):i<0&&(o[u]=Math.ceil(s*i)/i,o[a]=Math.floor(l*i)/i,e(o)),t},t}function qu(){var t=zu(ju,Ih);return t.copy=function(){return Lu(t,qu())},Bu(t)}function Uu(){function t(t){return+t}var e=[0,1];return t.invert=t,t.domain=t.range=function(n){return arguments.length?(e=K_.call(n,X_),t):e.slice()},t.copy=function(){return Uu().domain(e)},Bu(t)}function Ku(t,e){return(e=Math.log(e/t))?function(n){return Math.log(n/t)/e}:Y_(e)}function Hu(t,e){return t<0?function(n){return-Math.pow(-e,n)*Math.pow(-t,1-n)}:function(n){return Math.pow(e,n)*Math.pow(t,1-n)}}function Wu(t){return isFinite(t)?+("1e"+t):t<0?0:t}function Yu(t){return 10===t?Wu:t===Math.E?Math.exp:function(e){return Math.pow(t,e)}}function Xu(t){return t===Math.E?Math.log:10===t&&Math.log10||2===t&&Math.log2||(t=Math.log(t),function(e){return Math.log(e)/t})}function $u(t){return function(e){return-t(-e)}}function Gu(){function e(){return o=Xu(i),u=Yu(i),r()[0]<0&&(o=$u(o),u=$u(u)),n}var n=zu(Ku,Hu).domain([1,10]),r=n.domain,i=10,o=Xu(10),u=Yu(10);return n.base=function(t){return arguments.length?(i=+t,e()):i},n.domain=function(t){return arguments.length?(r(t),e()):r()},n.ticks=function(t){var e,n=r(),a=n[0],s=n[n.length-1];(e=s<a)&&(h=a,a=s,s=h);var l,c,f,h=o(a),p=o(s),d=null==t?10:+t,v=[];if(!(i%1)&&p-h<d){if(h=Math.round(h)-1,p=Math.round(p)+1,a>0){for(;h<p;++h)for(c=1,l=u(h);c<i;++c)if(!((f=l*c)<a)){if(f>s)break;v.push(f)}}else for(;h<p;++h)for(c=i-1,l=u(h);c>=1;--c)if(!((f=l*c)<a)){if(f>s)break;v.push(f)}}else v=_c(h,p,Math.min(p-h,d)).map(u);return e?v.reverse():v},n.tickFormat=function(e,r){if(null==r&&(r=10===i?".0e":","),"function"!=typeof r&&(r=t.format(r)),e===1/0)return r;null==e&&(e=10);var a=Math.max(1,i*e/n.ticks().length);return function(t){var e=t/u(Math.round(o(t)));return e*i<i-.5&&(e*=i),e<=a?r(t):""}},n.nice=function(){return r(Z_(r(),{floor:function(t){return u(Math.floor(o(t)))},ceil:function(t){return u(Math.ceil(o(t)))}}))},n.copy=function(){return Lu(n,Gu().base(i))},n}function Zu(t,e){return t<0?-Math.pow(-t,e):Math.pow(t,e)}function Ju(){function t(t,e){return(e=Zu(e,n)-(t=Zu(t,n)))?function(r){return(Zu(r,n)-t)/e}:Y_(e)}function e(t,e){return e=Zu(e,n)-(t=Zu(t,n)),function(r){return Zu(t+e*r,1/n)}}var n=1,r=zu(t,e),i=r.domain;return r.exponent=function(t){return arguments.length?(n=+t,i(i())):n},r.copy=function(){return Lu(r,Ju().exponent(n))},Bu(r)}function Qu(){return Ju().exponent(.5)}function ta(){function t(){var t=0,o=Math.max(1,r.length);for(i=new Array(o-1);++t<o;)i[t-1]=wc(n,t/o);return e}function e(t){if(!isNaN(t=+t))return r[ec(i,t)]}var n=[],r=[],i=[];return e.invertExtent=function(t){var e=r.indexOf(t);return e<0?[NaN,NaN]:[e>0?i[e-1]:n[0],e<i.length?i[e]:n[n.length-1]]},e.domain=function(e){if(!arguments.length)return n.slice();n=[];for(var r,i=0,o=e.length;i<o;++i)null==(r=e[i])||isNaN(r=+r)||n.push(r);return n.sort(Jl),t()},e.range=function(e){return arguments.length?(r=H_.call(e),t()):r.slice()},e.quantiles=function(){return i.slice()},e.copy=function(){return ta().domain(n).range(r)},e}function ea(){function t(t){if(t<=t)return u[ec(o,t,0,i)]}function e(){var e=-1;for(o=new Array(i);++e<i;)o[e]=((e+1)*r-(e-i)*n)/(i+1);return t}var n=0,r=1,i=1,o=[.5],u=[0,1];return t.domain=function(t){return arguments.length?(n=+t[0],r=+t[1],e()):[n,r]},t.range=function(t){return arguments.length?(i=(u=H_.call(t)).length-1,e()):u.slice()},t.invertExtent=function(t){var e=u.indexOf(t);return e<0?[NaN,NaN]:e<1?[n,o[0]]:e>=i?[o[i-1],r]:[o[e-1],o[e]]},t.copy=function(){return ea().domain([n,r]).range(u)},Bu(t)}function na(){function t(t){if(t<=t)return n[ec(e,t,0,r)]}var e=[.5],n=[0,1],r=1;return t.domain=function(i){return arguments.length?(e=H_.call(i),r=Math.min(e.length,n.length-1),t):e.slice()},t.range=function(i){return arguments.length?(n=H_.call(i),r=Math.min(e.length,n.length-1),t):n.slice()},t.invertExtent=function(t){var r=n.indexOf(t);return[e[r-1],e[r]]},t.copy=function(){return na().domain(e).range(n)},t}function ra(t,e,n,r){function i(e){return t(e=new Date(+e)),e}return i.floor=i,i.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},i.round=function(t){var e=i(t),n=i.ceil(t);return t-e<n-t?e:n},i.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},i.range=function(n,r,o){var u=[];if(n=i.ceil(n),o=null==o?1:Math.floor(o),!(n<r&&o>0))return u;do{u.push(new Date(+n))}while(e(n,o),t(n),n<r);return u},i.filter=function(n){return ra(function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)},function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;e(t,-1),!n(t););else for(;--r>=0;)for(;e(t,1),!n(t););})},n&&(i.count=function(e,r){return J_.setTime(+e),Q_.setTime(+r),t(J_),t(Q_),Math.floor(n(J_,Q_))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(e){return r(e)%t==0}:function(e){return i.count(0,e)%t==0}):i:null}),i}function ia(t){return ra(function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+7*e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*nb)/rb})}function oa(t){return ra(function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+7*e)},function(t,e){return(e-t)/rb})}function ua(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function aa(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function sa(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}function la(t){function e(t,e){return function(n){var r,i,o,u=[],a=-1,s=0,l=t.length;for(n instanceof Date||(n=new Date(+n));++a<l;)37===t.charCodeAt(a)&&(u.push(t.slice(s,a)),null!=(i=ex[r=t.charAt(++a)])?r=t.charAt(++a):i="e"===r?" ":"0",(o=e[r])&&(r=o(n,i)),u.push(r),s=a+1);return u.push(t.slice(s,a)),u.join("")}}function n(t,e){return function(n){var i=sa(1900);if(r(i,t,n+="",0)!=n.length)return null;if("p"in i&&(i.H=i.H%12+12*i.p),"W"in i||"U"in i){"w"in i||(i.w="W"in i?1:0);var o="Z"in i?aa(sa(i.y)).getUTCDay():e(sa(i.y)).getDay();i.m=0,i.d="W"in i?(i.w+6)%7+7*i.W-(o+5)%7:i.w+7*i.U-(o+6)%7}return"Z"in i?(i.H+=i.Z/100|0,i.M+=i.Z%100,aa(i)):e(i)}}function r(t,e,n,r){for(var i,o,u=0,a=e.length,s=n.length;u<a;){if(r>=s)return-1;if(37===(i=e.charCodeAt(u++))){if(i=e.charAt(u++),!(o=q[i in ex?e.charAt(u++):i])||(r=o(t,n,r))<0)return-1}else if(i!=n.charCodeAt(r++))return-1}return r}function i(t,e,n){var r=T.exec(e.slice(n));return r?(t.p=D[r[0].toLowerCase()],n+r[0].length):-1}function o(t,e,n){var r=j.exec(e.slice(n));return r?(t.w=P[r[0].toLowerCase()],n+r[0].length):-1}function u(t,e,n){var r=k.exec(e.slice(n));return r?(t.w=N[r[0].toLowerCase()],n+r[0].length):-1}function a(t,e,n){var r=I.exec(e.slice(n));return r?(t.m=L[r[0].toLowerCase()],n+r[0].length):-1}function s(t,e,n){var r=V.exec(e.slice(n));return r?(t.m=R[r[0].toLowerCase()],n+r[0].length):-1}function l(t,e,n){return r(t,w,e,n)}function c(t,e,n){return r(t,E,e,n)}function f(t,e,n){return r(t,M,e,n)}function h(t){return S[t.getDay()]}function p(t){return C[t.getDay()]}function d(t){return O[t.getMonth()]}function v(t){return A[t.getMonth()]}function m(t){return F[+(t.getHours()>=12)]}function y(t){return S[t.getUTCDay()]}function g(t){return C[t.getUTCDay()]}function _(t){return O[t.getUTCMonth()]}function b(t){return A[t.getUTCMonth()]}function x(t){return F[+(t.getUTCHours()>=12)]}var w=t.dateTime,E=t.date,M=t.time,F=t.periods,C=t.days,S=t.shortDays,A=t.months,O=t.shortMonths,T=ha(F),D=pa(F),k=ha(C),N=pa(C),j=ha(S),P=pa(S),V=ha(A),R=pa(A),I=ha(O),L=pa(O),z={a:h,A:p,b:d,B:v,c:null,d:Aa,e:Aa,H:Oa,I:Ta,j:Da,L:ka,m:Na,M:ja,p:m,S:Pa,U:Va,w:Ra,W:Ia,x:null,X:null,y:La,Y:za,Z:Ba,"%":ns},B={a:y,A:g,b:_,B:b,c:null,d:qa,e:qa,H:Ua,I:Ka,j:Ha,L:Wa,m:Ya,M:Xa,p:x,S:$a,U:Ga,w:Za,W:Ja,x:null,X:null,y:Qa,Y:ts,Z:es,"%":ns},q={a:o,A:u,b:a,B:s,c:l,d:xa,e:xa,H:Ea,I:Ea,j:wa,L:Ca,m:ba,M:Ma,p:i,S:Fa,U:va,w:da,W:ma,x:c,X:f,y:ga,Y:ya,Z:_a,"%":Sa};return z.x=e(E,z),z.X=e(M,z),z.c=e(w,z),B.x=e(E,B),B.X=e(M,B),B.c=e(w,B),{format:function(t){var n=e(t+="",z);return n.toString=function(){return t},n},parse:function(t){var e=n(t+="",ua);return e.toString=function(){return t},e},utcFormat:function(t){var n=e(t+="",B);return n.toString=function(){return t},n},utcParse:function(t){var e=n(t,aa);return e.toString=function(){return t},e}}}function ca(t,e,n){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<n?new Array(n-o+1).join(e)+i:i)}function fa(t){return t.replace(ix,"\\$&")}function ha(t){return new RegExp("^(?:"+t.map(fa).join("|")+")","i")}function pa(t){for(var e={},n=-1,r=t.length;++n<r;)e[t[n].toLowerCase()]=n;return e}function da(t,e,n){var r=nx.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function va(t,e,n){var r=nx.exec(e.slice(n));return r?(t.U=+r[0],n+r[0].length):-1}function ma(t,e,n){var r=nx.exec(e.slice(n));return r?(t.W=+r[0],n+r[0].length):-1}function ya(t,e,n){var r=nx.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function ga(t,e,n){var r=nx.exec(e.slice(n,n+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function _a(t,e,n){var r=/^(Z)|([+-]\d\d)(?:\:?(\d\d))?/.exec(e.slice(n,n+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function ba(t,e,n){var r=nx.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function xa(t,e,n){var r=nx.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function wa(t,e,n){var r=nx.exec(e.slice(n,n+3));return r?(t.m=0,t.d=+r[0],n+r[0].length):-1}function Ea(t,e,n){var r=nx.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function Ma(t,e,n){var r=nx.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function Fa(t,e,n){var r=nx.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function Ca(t,e,n){var r=nx.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function Sa(t,e,n){var r=rx.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function Aa(t,e){return ca(t.getDate(),e,2)}function Oa(t,e){return ca(t.getHours(),e,2)}function Ta(t,e){return ca(t.getHours()%12||12,e,2)}function Da(t,e){return ca(1+cb.count(Ab(t),t),e,3)}function ka(t,e){return ca(t.getMilliseconds(),e,3)}function Na(t,e){return ca(t.getMonth()+1,e,2)}function ja(t,e){return ca(t.getMinutes(),e,2)}function Pa(t,e){return ca(t.getSeconds(),e,2)}function Va(t,e){return ca(hb.count(Ab(t),t),e,2)}function Ra(t){return t.getDay()}function Ia(t,e){return ca(pb.count(Ab(t),t),e,2)}function La(t,e){return ca(t.getFullYear()%100,e,2)}function za(t,e){return ca(t.getFullYear()%1e4,e,4)}function Ba(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+ca(e/60|0,"0",2)+ca(e%60,"0",2)}function qa(t,e){return ca(t.getUTCDate(),e,2)}function Ua(t,e){return ca(t.getUTCHours(),e,2)}function Ka(t,e){return ca(t.getUTCHours()%12||12,e,2)}function Ha(t,e){return ca(1+jb.count(Jb(t),t),e,3)}function Wa(t,e){return ca(t.getUTCMilliseconds(),e,3)}function Ya(t,e){return ca(t.getUTCMonth()+1,e,2)}function Xa(t,e){return ca(t.getUTCMinutes(),e,2)}function $a(t,e){return ca(t.getUTCSeconds(),e,2)}function Ga(t,e){return ca(Vb.count(Jb(t),t),e,2)}function Za(t){return t.getUTCDay()}function Ja(t,e){return ca(Rb.count(Jb(t),t),e,2)}function Qa(t,e){return ca(t.getUTCFullYear()%100,e,2)}function ts(t,e){return ca(t.getUTCFullYear()%1e4,e,4)}function es(){return"+0000"}function ns(){return"%"}function rs(e){return Qb=la(e),t.timeFormat=Qb.format,t.timeParse=Qb.parse,t.utcFormat=Qb.utcFormat,t.utcParse=Qb.utcParse,Qb}function is(t){return t.toISOString()}function os(t){var e=new Date(t);return isNaN(e)?null:e}function us(t){return new Date(t)}function as(t){return t instanceof Date?+t:+new Date(+t)}function ss(t,e,n,r,o,u,a,s,l){function c(i){return(a(i)<i?v:u(i)<i?m:o(i)<i?y:r(i)<i?g:e(i)<i?n(i)<i?_:b:t(i)<i?x:w)(i)}function f(e,n,r,o){if(null==e&&(e=10),"number"==typeof e){var u=Math.abs(r-n)/e,a=Ql(function(t){return t[2]}).right(E,u);a===E.length?(o=i(n/px,r/px,e),e=t):a?(a=E[u/E[a-1][2]<E[a][2]/u?a-1:a],o=a[1],e=a[0]):(o=i(n,r,e),e=s)}return null==o?e:e.every(o)}var h=zu(ju,Ih),p=h.invert,d=h.domain,v=l(".%L"),m=l(":%S"),y=l("%I:%M"),g=l("%I %p"),_=l("%a %d"),b=l("%b %d"),x=l("%B"),w=l("%Y"),E=[[a,1,ax],[a,5,5*ax],[a,15,15*ax],[a,30,30*ax],[u,1,sx],[u,5,5*sx],[u,15,15*sx],[u,30,30*sx],[o,1,lx],[o,3,3*lx],[o,6,6*lx],[o,12,12*lx],[r,1,cx],[r,2,2*cx],[n,1,fx],[e,1,hx],[e,3,3*hx],[t,1,px]];return h.invert=function(t){return new Date(p(t))},h.domain=function(t){return arguments.length?d(K_.call(t,as)):d().map(us)},h.ticks=function(t,e){var n,r=d(),i=r[0],o=r[r.length-1],u=o<i;return u&&(n=i,i=o,o=n),n=f(t,i,o,e),n=n?n.range(i,o+1):[],u?n.reverse():n},h.tickFormat=function(t,e){return null==e?c:l(e)},h.nice=function(t,e){var n=d();return(t=f(t,n[0],n[n.length-1],e))?d(Z_(n,t)):h},h.copy=function(){return Lu(h,ss(t,e,n,r,o,u,a,s,l))},h}function ls(t){var e=t.length;return function(n){return t[Math.max(0,Math.min(e-1,Math.floor(n*e)))]}}function cs(t){function e(e){var o=(e-n)/(r-n);return t(i?Math.max(0,Math.min(1,o)):o)}var n=0,r=1,i=!1;return e.domain=function(t){return arguments.length?(n=+t[0],r=+t[1],e):[n,r]},e.clamp=function(t){return arguments.length?(i=!!t,e):i},e.interpolator=function(n){return arguments.length?(t=n,e):t},e.copy=function(){return cs(t).domain([n,r]).clamp(i)},Bu(e)}function fs(t){return t>1?0:t<-1?Lx:Math.acos(t)}function hs(t){return t>=1?zx:t<=-1?-zx:Math.asin(t)}function ps(t){return t.innerRadius}function ds(t){return t.outerRadius}function vs(t){return t.startAngle}function ms(t){return t.endAngle}function ys(t){return t&&t.padAngle}function gs(t,e,n,r,i,o,u,a){var s=n-t,l=r-e,c=u-i,f=a-o,h=(c*(e-o)-f*(t-i))/(f*s-c*l);return[t+h*s,e+h*l]}function _s(t,e,n,r,i,o,u){var a=t-n,s=e-r,l=(u?o:-o)/Rx(a*a+s*s),c=l*s,f=-l*a,h=t+c,p=e+f,d=n+c,v=r+f,m=(h+d)/2,y=(p+v)/2,g=d-h,_=v-p,b=g*g+_*_,x=i-o,w=h*v-d*p,E=(_<0?-1:1)*Rx(jx(0,x*x*b-w*w)),M=(w*_-g*E)/b,F=(-w*g-_*E)/b,C=(w*_+g*E)/b,S=(-w*g+_*E)/b,A=M-m,O=F-y,T=C-m,D=S-y;return A*A+O*O>T*T+D*D&&(M=C,F=S),{cx:M,cy:F,x01:-c,y01:-f,x11:M*(i/x-1),y11:F*(i/x-1)}}function bs(t){this._context=t}function xs(t){return t[0]}function ws(t){return t[1]}function Es(t){this._curve=t}function Ms(t){function e(e){return new Es(t(e))}return e._curve=t,e}function Fs(t){var e=t.curve;return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t.curve=function(t){return arguments.length?e(Ms(t)):e()._curve},t}function Cs(t){return t.source}function Ss(t){return t.target}function As(t){function e(){var e,a=Qx.call(arguments),s=n.apply(this,a),l=r.apply(this,a);if(u||(u=e=Ln()),t(u,+i.apply(this,(a[0]=s,a)),+o.apply(this,a),+i.apply(this,(a[0]=l,a)),+o.apply(this,a)),e)return u=null,e+""||null}var n=Cs,r=Ss,i=xs,o=ws,u=null;return e.source=function(t){return arguments.length?(n=t,e):n},e.target=function(t){return arguments.length?(r=t,e):r},e.x=function(t){return arguments.length?(i="function"==typeof t?t:Tx(+t),e):i},e.y=function(t){return arguments.length?(o="function"==typeof t?t:Tx(+t),e):o},e.context=function(t){return arguments.length?(u=null==t?null:t,e):u},e}function Os(t,e,n,r,i){t.moveTo(e,n),t.bezierCurveTo(e=(e+r)/2,n,e,i,r,i)}function Ts(t,e,n,r,i){t.moveTo(e,n),t.bezierCurveTo(e,n=(n+i)/2,r,n,r,i)}function Ds(t,e,n,r,i){var o=Jx(e,n),u=Jx(e,n=(n+i)/2),a=Jx(r,n),s=Jx(r,i);t.moveTo(o[0],o[1]),t.bezierCurveTo(u[0],u[1],a[0],a[1],s[0],s[1])}function ks(){return As(Os)}function Ns(){return As(Ts)}function js(){var t=As(Ds);return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t}function Ps(t,e,n){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+e)/6,(t._y0+4*t._y1+n)/6)}function Vs(t){this._context=t}function Rs(t){this._context=t}function Is(t){this._context=t}function Ls(t,e){this._basis=new Vs(t),this._beta=e}function zs(t,e,n){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-e),t._y2+t._k*(t._y1-n),t._x2,t._y2)}function Bs(t,e){this._context=t,this._k=(1-e)/6}function qs(t,e){this._context=t,this._k=(1-e)/6}function Us(t,e){this._context=t,this._k=(1-e)/6}function Ks(t,e,n){var r=t._x1,i=t._y1,o=t._x2,u=t._y2;if(t._l01_a>Ix){var a=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,s=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*a-t._x0*t._l12_2a+t._x2*t._l01_2a)/s,i=(i*a-t._y0*t._l12_2a+t._y2*t._l01_2a)/s}if(t._l23_a>Ix){var l=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,c=3*t._l23_a*(t._l23_a+t._l12_a);o=(o*l+t._x1*t._l23_2a-e*t._l12_2a)/c,u=(u*l+t._y1*t._l23_2a-n*t._l12_2a)/c}t._context.bezierCurveTo(r,i,o,u,t._x2,t._y2)}function Hs(t,e){this._context=t,this._alpha=e}function Ws(t,e){this._context=t,this._alpha=e}function Ys(t,e){this._context=t,this._alpha=e}function Xs(t){this._context=t}function $s(t){return t<0?-1:1}function Gs(t,e,n){var r=t._x1-t._x0,i=e-t._x1,o=(t._y1-t._y0)/(r||i<0&&-0),u=(n-t._y1)/(i||r<0&&-0),a=(o*i+u*r)/(r+i);return($s(o)+$s(u))*Math.min(Math.abs(o),Math.abs(u),.5*Math.abs(a))||0}function Zs(t,e){var n=t._x1-t._x0;return n?(3*(t._y1-t._y0)/n-e)/2:e}function Js(t,e,n){var r=t._x0,i=t._y0,o=t._x1,u=t._y1,a=(o-r)/3;t._context.bezierCurveTo(r+a,i+a*e,o-a,u-a*n,o,u)}function Qs(t){this._context=t}function tl(t){this._context=new el(t)}function el(t){this._context=t}function nl(t){return new Qs(t)}function rl(t){return new tl(t)}function il(t){this._context=t}function ol(t){var e,n,r=t.length-1,i=new Array(r),o=new Array(r),u=new Array(r);for(i[0]=0,o[0]=2,u[0]=t[0]+2*t[1],e=1;e<r-1;++e)i[e]=1,o[e]=4,u[e]=4*t[e]+2*t[e+1];for(i[r-1]=2,o[r-1]=7,u[r-1]=8*t[r-1]+t[r],e=1;e<r;++e)n=i[e]/o[e-1],o[e]-=n,u[e]-=n*u[e-1];for(i[r-1]=u[r-1]/o[r-1],e=r-2;e>=0;--e)i[e]=(u[e]-i[e+1])/o[e];for(o[r-1]=(t[r]+i[r-1])/2,e=0;e<r-1;++e)o[e]=2*t[e+1]-i[e+1];return[i,o]}function ul(t,e){this._context=t,this._t=e}function al(t){return new ul(t,0)}function sl(t){return new ul(t,1)}function ll(t,e){return t[e]}function cl(t){for(var e,n=0,r=-1,i=t.length;++r<i;)(e=+t[r][1])&&(n+=e);return n}function fl(t){return t[0]}function hl(t){return t[1]}function pl(){this._=null}function dl(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function vl(t,e){var n=e,r=e.R,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.R=r.L,n.R&&(n.R.U=n),r.L=n}function ml(t,e){var n=e,r=e.L,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.L=r.R,n.L&&(n.L.U=n),r.R=n}function yl(t){for(;t.L;)t=t.L;return t}function gl(t,e,n,r){var i=[null,null],o=$w.push(i)-1;return i.left=t,i.right=e,n&&bl(i,t,e,n),r&&bl(i,e,t,r),Yw[t.index].halfedges.push(o),Yw[e.index].halfedges.push(o),i}function _l(t,e,n){var r=[e,n];return r.left=t,r}function bl(t,e,n,r){t[0]||t[1]?t.left===n?t[1]=r:t[0]=r:(t[0]=r,t.left=e,t.right=n)}function xl(t,e,n,r,i){var o,u=t[0],a=t[1],s=u[0],l=u[1],c=a[0],f=a[1],h=0,p=1,d=c-s,v=f-l;if(o=e-s,d||!(o>0)){if(o/=d,d<0){if(o<h)return;o<p&&(p=o)}else if(d>0){if(o>p)return;o>h&&(h=o)}if(o=r-s,d||!(o<0)){if(o/=d,d<0){if(o>p)return;o>h&&(h=o)}else if(d>0){if(o<h)return;o<p&&(p=o)}if(o=n-l,v||!(o>0)){if(o/=v,v<0){if(o<h)return;o<p&&(p=o)}else if(v>0){if(o>p)return;o>h&&(h=o)}if(o=i-l,v||!(o<0)){if(o/=v,v<0){if(o>p)return;o>h&&(h=o)}else if(v>0){if(o<h)return;o<p&&(p=o)}return!(h>0||p<1)||(h>0&&(t[0]=[s+h*d,l+h*v]),p<1&&(t[1]=[s+p*d,l+p*v]),!0)}}}}}function wl(t,e,n,r,i){var o=t[1];if(o)return!0;var u,a,s=t[0],l=t.left,c=t.right,f=l[0],h=l[1],p=c[0],d=c[1],v=(f+p)/2,m=(h+d)/2;if(d===h){if(v<e||v>=r)return;if(f>p){if(s){if(s[1]>=i)return}else s=[v,n];o=[v,i]}else{if(s){if(s[1]<n)return}else s=[v,i];o=[v,n]}}else if(u=(f-p)/(d-h),a=m-u*v,u<-1||u>1)if(f>p){if(s){if(s[1]>=i)return}else s=[(n-a)/u,n];o=[(i-a)/u,i]}else{if(s){if(s[1]<n)return}else s=[(i-a)/u,i];o=[(n-a)/u,n]}else if(h<d){if(s){if(s[0]>=r)return}else s=[e,u*e+a];o=[r,u*r+a]}else{if(s){if(s[0]<e)return}else s=[r,u*r+a];o=[e,u*e+a]}return t[0]=s,t[1]=o,!0}function El(t,e,n,r){for(var i,o=$w.length;o--;)wl(i=$w[o],t,e,n,r)&&xl(i,t,e,n,r)&&(Math.abs(i[0][0]-i[1][0])>Jw||Math.abs(i[0][1]-i[1][1])>Jw)||delete $w[o]}function Ml(t){return Yw[t.index]={site:t,halfedges:[]}}function Fl(t,e){var n=t.site,r=e.left,i=e.right;return n===i&&(i=r,r=n),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(n===r?(r=e[1],i=e[0]):(r=e[0],i=e[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function Cl(t,e){return e[+(e.left!==t.site)]}function Sl(t,e){return e[+(e.left===t.site)]}function Al(){for(var t,e,n,r,i=0,o=Yw.length;i<o;++i)if((t=Yw[i])&&(r=(e=t.halfedges).length)){var u=new Array(r),a=new Array(r);for(n=0;n<r;++n)u[n]=n,a[n]=Fl(t,$w[e[n]]);for(u.sort(function(t,e){return a[e]-a[t]}),n=0;n<r;++n)a[n]=e[u[n]];for(n=0;n<r;++n)e[n]=a[n]}}function Ol(t,e,n,r){var i,o,u,a,s,l,c,f,h,p,d,v,m=Yw.length,y=!0;for(i=0;i<m;++i)if(o=Yw[i]){for(u=o.site,s=o.halfedges,a=s.length;a--;)$w[s[a]]||s.splice(a,1);for(a=0,l=s.length;a<l;)p=Sl(o,$w[s[a]]),d=p[0],v=p[1],c=Cl(o,$w[s[++a%l]]),f=c[0],h=c[1],(Math.abs(d-f)>Jw||Math.abs(v-h)>Jw)&&(s.splice(a,0,$w.push(_l(u,p,Math.abs(d-t)<Jw&&r-v>Jw?[t,Math.abs(f-t)<Jw?h:r]:Math.abs(v-r)<Jw&&n-d>Jw?[Math.abs(h-r)<Jw?f:n,r]:Math.abs(d-n)<Jw&&v-e>Jw?[n,Math.abs(f-n)<Jw?h:e]:Math.abs(v-e)<Jw&&d-t>Jw?[Math.abs(h-e)<Jw?f:t,e]:null))-1),++l);l&&(y=!1)}if(y){var g,_,b,x=1/0;for(i=0,y=null;i<m;++i)(o=Yw[i])&&(u=o.site,g=u[0]-t,_=u[1]-e,(b=g*g+_*_)<x&&(x=b,y=o));if(y){var w=[t,e],E=[t,r],M=[n,r],F=[n,e];y.halfedges.push($w.push(_l(u=y.site,w,E))-1,$w.push(_l(u,E,M))-1,$w.push(_l(u,M,F))-1,$w.push(_l(u,F,w))-1)}}for(i=0;i<m;++i)(o=Yw[i])&&(o.halfedges.length||delete Yw[i])}function Tl(){dl(this),this.x=this.y=this.arc=this.site=this.cy=null}function Dl(t){var e=t.P,n=t.N;if(e&&n){var r=e.site,i=t.site,o=n.site;if(r!==o){var u=i[0],a=i[1],s=r[0]-u,l=r[1]-a,c=o[0]-u,f=o[1]-a,h=2*(s*f-l*c);if(!(h>=-Qw)){var p=s*s+l*l,d=c*c+f*f,v=(f*p-l*d)/h,m=(s*d-c*p)/h,y=Gw.pop()||new Tl;y.arc=t,y.site=i,y.x=v+u,y.y=(y.cy=m+a)+Math.sqrt(v*v+m*m),t.circle=y;for(var g=null,_=Xw._;_;)if(y.y<_.y||y.y===_.y&&y.x<=_.x){if(!_.L){g=_.P;break}_=_.L}else{if(!_.R){g=_;break}_=_.R}Xw.insert(g,y),g||(Hw=y)}}}}function kl(t){var e=t.circle;e&&(e.P||(Hw=e.N),Xw.remove(e),Gw.push(e),dl(e),t.circle=null)}function Nl(){dl(this),this.edge=this.site=this.circle=null}function jl(t){var e=Zw.pop()||new Nl;return e.site=t,e}function Pl(t){kl(t),Ww.remove(t),Zw.push(t),dl(t)}function Vl(t){var e=t.circle,n=e.x,r=e.cy,i=[n,r],o=t.P,u=t.N,a=[t];Pl(t);for(var s=o;s.circle&&Math.abs(n-s.circle.x)<Jw&&Math.abs(r-s.circle.cy)<Jw;)o=s.P,a.unshift(s),Pl(s),s=o;a.unshift(s),kl(s);for(var l=u;l.circle&&Math.abs(n-l.circle.x)<Jw&&Math.abs(r-l.circle.cy)<Jw;)u=l.N,a.push(l),Pl(l),l=u;a.push(l),kl(l);var c,f=a.length;for(c=1;c<f;++c)l=a[c],s=a[c-1],bl(l.edge,s.site,l.site,i);s=a[0],l=a[f-1],l.edge=gl(s.site,l.site,null,i),Dl(s),Dl(l)}function Rl(t){for(var e,n,r,i,o=t[0],u=t[1],a=Ww._;a;)if((r=Il(a,u)-o)>Jw)a=a.L;else{if(!((i=o-Ll(a,u))>Jw)){r>-Jw?(e=a.P,n=a):i>-Jw?(e=a,n=a.N):e=n=a;break}if(!a.R){e=a;break}a=a.R}Ml(t);var s=jl(t);if(Ww.insert(e,s),e||n){if(e===n)return kl(e),n=jl(e.site),Ww.insert(s,n),s.edge=n.edge=gl(e.site,s.site),Dl(e),void Dl(n);if(!n)return void(s.edge=gl(e.site,s.site));kl(e),kl(n);var l=e.site,c=l[0],f=l[1],h=t[0]-c,p=t[1]-f,d=n.site,v=d[0]-c,m=d[1]-f,y=2*(h*m-p*v),g=h*h+p*p,_=v*v+m*m,b=[(m*g-p*_)/y+c,(h*_-v*g)/y+f];bl(n.edge,l,d,b),s.edge=gl(l,t,null,b),n.edge=gl(t,d,null,b),Dl(e),Dl(n)}}function Il(t,e){var n=t.site,r=n[0],i=n[1],o=i-e;if(!o)return r;var u=t.P;if(!u)return-1/0;n=u.site;var a=n[0],s=n[1],l=s-e;if(!l)return a;var c=a-r,f=1/o-1/l,h=c/l;return f?(-h+Math.sqrt(h*h-2*f*(c*c/(-2*l)-s+l/2+i-o/2)))/f+r:(r+a)/2}function Ll(t,e){var n=t.N;if(n)return Il(n,e);var r=t.site;return r[1]===e?r[0]:1/0}function zl(t,e,n){return(t[0]-n[0])*(e[1]-t[1])-(t[0]-e[0])*(n[1]-t[1])}function Bl(t,e){return e[1]-t[1]||e[0]-t[0]}function ql(t,e){var n,r,i,o=t.sort(Bl).pop();for($w=[],Yw=new Array(t.length),Ww=new pl,Xw=new pl;;)if(i=Hw,o&&(!i||o[1]<i.y||o[1]===i.y&&o[0]<i.x))o[0]===n&&o[1]===r||(Rl(o),n=o[0],r=o[1]),o=t.pop();else{if(!i)break;Vl(i.arc)}if(Al(),e){var u=+e[0][0],a=+e[0][1],s=+e[1][0],l=+e[1][1];El(u,a,s,l),Ol(u,a,s,l)}this.edges=$w,this.cells=Yw,Ww=Xw=$w=Yw=null}function Ul(t,e,n){this.target=t,this.type=e,this.transform=n}function Kl(t,e,n){this.k=t,this.x=e,this.y=n}function Hl(t){return t.__zoom||nE}function Wl(){t.event.stopImmediatePropagation()}function Yl(){return!t.event.button}function Xl(){var t,e,n=this;return n instanceof SVGElement?(n=n.ownerSVGElement||n,t=n.width.baseVal.value,e=n.height.baseVal.value):(t=n.clientWidth,e=n.clientHeight),[[0,0],[t,e]]}function $l(){return this.__zoom||nE}function Gl(){return-t.event.deltaY*(t.event.deltaMode?120:1)/500}function Zl(){return"ontouchstart"in this}var Jl=function(t,e){return t<e?-1:t>e?1:t>=e?0:NaN},Ql=function(t){return 1===t.length&&(t=e(t)),{left:function(e,n,r,i){for(null==r&&(r=0),null==i&&(i=e.length);r<i;){var o=r+i>>>1;t(e[o],n)<0?r=o+1:i=o}return r},right:function(e,n,r,i){for(null==r&&(r=0),null==i&&(i=e.length);r<i;){var o=r+i>>>1;t(e[o],n)>0?i=o:r=o+1}return r}}},tc=Ql(Jl),ec=tc.right,nc=tc.left,rc=function(t,e){null==e&&(e=n);for(var r=0,i=t.length-1,o=t[0],u=new Array(i<0?0:i);r<i;)u[r]=e(o,o=t[++r]);return u},ic=function(t,e,r){var i,o,u,a,s=t.length,l=e.length,c=new Array(s*l);for(null==r&&(r=n),i=u=0;i<s;++i)for(a=t[i],o=0;o<l;++o,++u)c[u]=r(a,e[o]);return c},oc=function(t,e){return e<t?-1:e>t?1:e>=t?0:NaN},uc=function(t){return null===t?NaN:+t},ac=function(t,e){var n,r,i=t.length,o=0,u=-1,a=0,s=0;if(null==e)for(;++u<i;)isNaN(n=uc(t[u]))||(r=n-a,a+=r/++o,s+=r*(n-a));else for(;++u<i;)isNaN(n=uc(e(t[u],u,t)))||(r=n-a,a+=r/++o,s+=r*(n-a));if(o>1)return s/(o-1)},sc=function(t,e){var n=ac(t,e);return n?Math.sqrt(n):n},lc=function(t,e){var n,r,i,o=t.length,u=-1;if(null==e){for(;++u<o;)if(null!=(n=t[u])&&n>=n)for(r=i=n;++u<o;)null!=(n=t[u])&&(r>n&&(r=n),i<n&&(i=n))}else for(;++u<o;)if(null!=(n=e(t[u],u,t))&&n>=n)for(r=i=n;++u<o;)null!=(n=e(t[u],u,t))&&(r>n&&(r=n),i<n&&(i=n));return[r,i]},cc=Array.prototype,fc=cc.slice,hc=cc.map,pc=function(t){return function(){return t}},dc=function(t){return t},vc=function(t,e,n){t=+t,e=+e,n=(i=arguments.length)<2?(e=t,t=0,1):i<3?1:+n;for(var r=-1,i=0|Math.max(0,Math.ceil((e-t)/n)),o=new Array(i);++r<i;)o[r]=t+r*n;return o},mc=Math.sqrt(50),yc=Math.sqrt(10),gc=Math.sqrt(2),_c=function(t,e,n){var i,o,u,a=e<t,s=-1;if(a&&(i=t,t=e,e=i),0===(u=r(t,e,n))||!isFinite(u))return[];if(u>0)for(t=Math.ceil(t/u),e=Math.floor(e/u),o=new Array(i=Math.ceil(e-t+1));++s<i;)o[s]=(t+s)*u;else for(t=Math.floor(t*u),e=Math.ceil(e*u),o=new Array(i=Math.ceil(t-e+1));++s<i;)o[s]=(t-s)/u;return a&&o.reverse(),o},bc=function(t){return Math.ceil(Math.log(t.length)/Math.LN2)+1},xc=function(){function t(t){var o,u,a=t.length,s=new Array(a);for(o=0;o<a;++o)s[o]=e(t[o],o,t);var l=n(s),c=l[0],f=l[1],h=r(s,c,f);Array.isArray(h)||(h=i(c,f,h),h=vc(Math.ceil(c/h)*h,Math.floor(f/h)*h,h));for(var p=h.length;h[0]<=c;)h.shift(),--p;for(;h[p-1]>f;)h.pop(),--p;var d,v=new Array(p+1);for(o=0;o<=p;++o)d=v[o]=[],d.x0=o>0?h[o-1]:c,d.x1=o<p?h[o]:f;for(o=0;o<a;++o)u=s[o],c<=u&&u<=f&&v[ec(h,u,0,p)].push(t[o]);return v}var e=dc,n=lc,r=bc;return t.value=function(n){return arguments.length?(e="function"==typeof n?n:pc(n),t):e},t.domain=function(e){return arguments.length?(n="function"==typeof e?e:pc([e[0],e[1]]),t):n},t.thresholds=function(e){return arguments.length?(r="function"==typeof e?e:pc(Array.isArray(e)?fc.call(e):e),t):r},t},wc=function(t,e,n){if(null==n&&(n=uc),r=t.length){if((e=+e)<=0||r<2)return+n(t[0],0,t);if(e>=1)return+n(t[r-1],r-1,t);var r,i=(r-1)*e,o=Math.floor(i),u=+n(t[o],o,t);return u+(+n(t[o+1],o+1,t)-u)*(i-o)}},Ec=function(t,e,n){return t=hc.call(t,uc).sort(Jl),Math.ceil((n-e)/(2*(wc(t,.75)-wc(t,.25))*Math.pow(t.length,-1/3)))},Mc=function(t,e,n){return Math.ceil((n-e)/(3.5*sc(t)*Math.pow(t.length,-1/3)))},Fc=function(t,e){var n,r,i=t.length,o=-1;if(null==e){for(;++o<i;)if(null!=(n=t[o])&&n>=n)for(r=n;++o<i;)null!=(n=t[o])&&n>r&&(r=n)}else for(;++o<i;)if(null!=(n=e(t[o],o,t))&&n>=n)for(r=n;++o<i;)null!=(n=e(t[o],o,t))&&n>r&&(r=n);return r},Cc=function(t,e){var n,r=t.length,i=r,o=-1,u=0;if(null==e)for(;++o<r;)isNaN(n=uc(t[o]))?--i:u+=n;else for(;++o<r;)isNaN(n=uc(e(t[o],o,t)))?--i:u+=n;if(i)return u/i},Sc=function(t,e){var n,r=t.length,i=-1,o=[];if(null==e)for(;++i<r;)isNaN(n=uc(t[i]))||o.push(n);else for(;++i<r;)isNaN(n=uc(e(t[i],i,t)))||o.push(n);return wc(o.sort(Jl),.5)},Ac=function(t){for(var e,n,r,i=t.length,o=-1,u=0;++o<i;)u+=t[o].length;for(n=new Array(u);--i>=0;)for(r=t[i],e=r.length;--e>=0;)n[--u]=r[e];return n},Oc=function(t,e){var n,r,i=t.length,o=-1;if(null==e){for(;++o<i;)if(null!=(n=t[o])&&n>=n)for(r=n;++o<i;)null!=(n=t[o])&&r>n&&(r=n)}else for(;++o<i;)if(null!=(n=e(t[o],o,t))&&n>=n)for(r=n;++o<i;)null!=(n=e(t[o],o,t))&&r>n&&(r=n);return r},Tc=function(t,e){for(var n=e.length,r=new Array(n);n--;)r[n]=t[e[n]];return r},Dc=function(t,e){if(n=t.length){var n,r,i=0,o=0,u=t[o];for(null==e&&(e=Jl);++i<n;)(e(r=t[i],u)<0||0!==e(u,u))&&(u=r,o=i);return 0===e(u,u)?o:void 0}},kc=function(t,e,n){for(var r,i,o=(null==n?t.length:n)-(e=null==e?0:+e);o;)i=Math.random()*o--|0,r=t[o+e],t[o+e]=t[i+e],t[i+e]=r;return t},Nc=function(t,e){var n,r=t.length,i=-1,o=0;if(null==e)for(;++i<r;)(n=+t[i])&&(o+=n);else for(;++i<r;)(n=+e(t[i],i,t))&&(o+=n);return o},jc=function(t){if(!(i=t.length))return[];for(var e=-1,n=Oc(t,o),r=new Array(n);++e<n;)for(var i,u=-1,a=r[e]=new Array(i);++u<i;)a[u]=t[u][e];return r},Pc=function(){return jc(arguments)},Vc=Array.prototype.slice,Rc=function(t){return t},Ic=1,Lc=2,zc=3,Bc=4,qc=1e-6,Uc={value:function(){}};g.prototype=y.prototype={constructor:g,on:function(t,e){var n,r=this._,i=_(t+"",r),o=-1,u=i.length;{if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++o<u;)if(n=(t=i[o]).type)r[n]=x(r[n],t.name,e);else if(null==e)for(n in r)r[n]=x(r[n],t.name,null);return this}for(;++o<u;)if((n=(t=i[o]).type)&&(n=b(r[n],t.name)))return n}},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new g(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,i=new Array(n),o=0;o<n;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(r=this._[t],o=0,n=r.length;o<n;++o)r[o].value.apply(e,i)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(e,n)}};var Kc="http://www.w3.org/1999/xhtml",Hc={svg:"http://www.w3.org/2000/svg",xhtml:Kc,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},Wc=function(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),Hc.hasOwnProperty(e)?{space:Hc[e],local:t}:t},Yc=function(t){var e=Wc(t);return(e.local?E:w)(e)},Xc=0;F.prototype=M.prototype={constructor:F,get:function(t){for(var e=this._;!(e in t);)if(!(t=t.parentNode))return;return t[e]},set:function(t,e){return t[this._]=e},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};var $c=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var Gc=document.documentElement;if(!Gc.matches){var Zc=Gc.webkitMatchesSelector||Gc.msMatchesSelector||Gc.mozMatchesSelector||Gc.oMatchesSelector;$c=function(t){return function(){return Zc.call(this,t)}}}}var Jc=$c,Qc={};if(t.event=null,"undefined"!=typeof document){"onmouseenter"in document.documentElement||(Qc={mouseenter:"mouseover",mouseleave:"mouseout"})}var tf=function(t,e,n){var r,i,o=A(t+""),u=o.length;{if(!(arguments.length<2)){for(a=e?T:O,null==n&&(n=!1),r=0;r<u;++r)this.each(a(o[r],e,n));return this}var a=this.node().__on;if(a)for(var s,l=0,c=a.length;l<c;++l)for(r=0,s=a[l];r<u;++r)if((i=o[r]).type===s.type&&i.name===s.name)return s.value}},ef=function(){for(var e,n=t.event;e=n.sourceEvent;)n=e;return n},nf=function(t,e){var n=t.ownerSVGElement||t;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=e.clientX,r.y=e.clientY,r=r.matrixTransform(t.getScreenCTM().inverse()),[r.x,r.y]}var i=t.getBoundingClientRect();return[e.clientX-i.left-t.clientLeft,e.clientY-i.top-t.clientTop]},rf=function(t){var e=ef();return e.changedTouches&&(e=e.changedTouches[0]),nf(t,e)},of=function(t){return null==t?k:function(){return this.querySelector(t)}},uf=function(t){"function"!=typeof t&&(t=of(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,u,a=e[i],s=a.length,l=r[i]=new Array(s),c=0;c<s;++c)(o=a[c])&&(u=t.call(o,o.__data__,c,a))&&("__data__"in o&&(u.__data__=o.__data__),l[c]=u);return new gt(r,this._parents)},af=function(t){return null==t?N:function(){return this.querySelectorAll(t)}},sf=function(t){"function"!=typeof t&&(t=af(t));for(var e=this._groups,n=e.length,r=[],i=[],o=0;o<n;++o)for(var u,a=e[o],s=a.length,l=0;l<s;++l)(u=a[l])&&(r.push(t.call(u,u.__data__,l,a)),i.push(u));return new gt(r,i)},lf=function(t){"function"!=typeof t&&(t=Jc(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,u=e[i],a=u.length,s=r[i]=[],l=0;l<a;++l)(o=u[l])&&t.call(o,o.__data__,l,u)&&s.push(o);return new gt(r,this._parents)},cf=function(t){return new Array(t.length)},ff=function(){return new gt(this._enter||this._groups.map(cf),this._parents)};j.prototype={constructor:j,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var hf=function(t){return function(){return t}},pf="$",df=function(t,e){if(!t)return p=new Array(this.size()),l=-1,this.each(function(t){p[++l]=t}),p;var n=e?V:P,r=this._parents,i=this._groups;"function"!=typeof t&&(t=hf(t));for(var o=i.length,u=new Array(o),a=new Array(o),s=new Array(o),l=0;l<o;++l){var c=r[l],f=i[l],h=f.length,p=t.call(c,c&&c.__data__,l,r),d=p.length,v=a[l]=new Array(d),m=u[l]=new Array(d);n(c,f,v,m,s[l]=new Array(h),p,e);for(var y,g,_=0,b=0;_<d;++_)if(y=v[_]){for(_>=b&&(b=_+1);!(g=m[b])&&++b<d;);y._next=g||null}}return u=new gt(u,r),u._enter=a,u._exit=s,u},vf=function(){return new gt(this._exit||this._groups.map(cf),this._parents)},mf=function(t){for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),u=new Array(r),a=0;a<o;++a)for(var s,l=e[a],c=n[a],f=l.length,h=u[a]=new Array(f),p=0;p<f;++p)(s=l[p]||c[p])&&(h[p]=s);for(;a<r;++a)u[a]=e[a];return new gt(u,this._parents)},yf=function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,i=t[e],o=i.length-1,u=i[o];--o>=0;)(r=i[o])&&(u&&u!==r.nextSibling&&u.parentNode.insertBefore(r,u),u=r);return this},gf=function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=R);for(var n=this._groups,r=n.length,i=new Array(r),o=0;o<r;++o){for(var u,a=n[o],s=a.length,l=i[o]=new Array(s),c=0;c<s;++c)(u=a[c])&&(l[c]=u);l.sort(e)}return new gt(i,this._parents).order()},_f=function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},bf=function(){var t=new Array(this.size()),e=-1;return this.each(function(){t[++e]=this}),t},xf=function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],i=0,o=r.length;i<o;++i){var u=r[i];if(u)return u}return null},wf=function(){var t=0;return this.each(function(){++t}),t},Ef=function(){return!this.node()},Mf=function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var i,o=e[n],u=0,a=o.length;u<a;++u)(i=o[u])&&t.call(i,i.__data__,u,o);return this},Ff=function(t,e){var n=Wc(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?L:I:"function"==typeof e?n.local?U:q:n.local?B:z)(n,e))},Cf=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView},Sf=function(t,e,n){return arguments.length>1?this.each((null==e?K:"function"==typeof e?W:H)(t,e,null==n?"":n)):Y(this.node(),t)},Af=function(t,e){return arguments.length>1?this.each((null==e?X:"function"==typeof e?G:$)(t,e)):this.node()[t]};Q.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var Of=function(t,e){var n=Z(t+"");if(arguments.length<2){for(var r=J(this.node()),i=-1,o=n.length;++i<o;)if(!r.contains(n[i]))return!1;return!0}return this.each(("function"==typeof e?it:e?nt:rt)(n,e))},Tf=function(t){return arguments.length?this.each(null==t?ot:("function"==typeof t?at:ut)(t)):this.node().textContent},Df=function(t){return arguments.length?this.each(null==t?st:("function"==typeof t?ct:lt)(t)):this.node().innerHTML},kf=function(){return this.each(ft)},Nf=function(){return this.each(ht)},jf=function(t){var e="function"==typeof t?t:Yc(t);return this.select(function(){return this.appendChild(e.apply(this,arguments))})},Pf=function(t,e){var n="function"==typeof t?t:Yc(t),r=null==e?pt:"function"==typeof e?e:of(e);return this.select(function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)})},Vf=function(){return this.each(dt)},Rf=function(t){return arguments.length?this.property("__data__",t):this.node().__data__},If=function(t,e){return this.each(("function"==typeof e?yt:mt)(t,e))},Lf=[null];gt.prototype=_t.prototype={constructor:gt,select:uf,selectAll:sf,filter:lf,data:df,enter:ff,exit:vf,merge:mf,order:yf,sort:gf,call:_f,nodes:bf,node:xf,size:wf,empty:Ef,each:Mf,attr:Ff,style:Sf,property:Af,classed:Of,text:Tf,html:Df,raise:kf,lower:Nf,append:jf,insert:Pf,remove:Vf,datum:Rf,on:tf,dispatch:If};var zf=function(t){return"string"==typeof t?new gt([[document.querySelector(t)]],[document.documentElement]):new gt([[t]],Lf)},Bf=function(t){return"string"==typeof t?new gt([document.querySelectorAll(t)],[document.documentElement]):new gt([null==t?[]:t],Lf)},qf=function(t,e,n){arguments.length<3&&(n=e,e=ef().changedTouches);for(var r,i=0,o=e?e.length:0;i<o;++i)if((r=e[i]).identifier===n)return nf(t,r);return null},Uf=function(t,e){null==e&&(e=ef().touches);for(var n=0,r=e?e.length:0,i=new Array(r);n<r;++n)i[n]=nf(t,e[n]);return i},Kf=function(){t.event.preventDefault(),t.event.stopImmediatePropagation()},Hf=function(t){var e=t.document.documentElement,n=zf(t).on("dragstart.drag",Kf,!0);"onselectstart"in e?n.on("selectstart.drag",Kf,!0):(e.__noselect=e.style.MozUserSelect,e.style.MozUserSelect="none")},Wf=function(t){return function(){return t}};wt.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var Yf=function(){function e(t){t.on("mousedown.drag",n).filter(Ct).on("touchstart.drag",o).on("touchmove.drag",u).on("touchend.drag touchcancel.drag",a).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function n(){if(!h&&p.apply(this,arguments)){var e=s("mouse",d.apply(this,arguments),rf,this,arguments);e&&(zf(t.event.view).on("mousemove.drag",r,!0).on("mouseup.drag",i,!0),Hf(t.event.view),bt(),f=!1,l=t.event.clientX,c=t.event.clientY,e("start"))}}function r(){if(Kf(),!f){var e=t.event.clientX-l,n=t.event.clientY-c;f=e*e+n*n>b}m.mouse("drag")}function i(){zf(t.event.view).on("mousemove.drag mouseup.drag",null),xt(t.event.view,f),Kf(),m.mouse("end")}function o(){if(p.apply(this,arguments)){var e,n,r=t.event.changedTouches,i=d.apply(this,arguments),o=r.length;for(e=0;e<o;++e)(n=s(r[e].identifier,i,qf,this,arguments))&&(bt(),n("start"))}}function u(){var e,n,r=t.event.changedTouches,i=r.length;for(e=0;e<i;++e)(n=m[r[e].identifier])&&(Kf(),n("drag"))}function a(){var e,n,r=t.event.changedTouches,i=r.length;for(h&&clearTimeout(h),h=setTimeout(function(){h=null},500),e=0;e<i;++e)(n=m[r[e].identifier])&&(bt(),n("end"))}function s(n,r,i,o,u){var a,s,l,c=i(r,n),f=g.copy();if(D(new wt(e,"beforestart",a,n,_,c[0],c[1],0,0,f),function(){return null!=(t.event.subject=a=v.apply(o,u))&&(s=a.x-c[0]||0,l=a.y-c[1]||0,!0)}))return function t(h){var p,d=c;switch(h){case"start":m[n]=t,p=_++;break;case"end":delete m[n],--_;case"drag":c=i(r,n),p=_}D(new wt(e,h,a,n,p,c[0]+s,c[1]+l,c[0]-d[0],c[1]-d[1],f),f.apply,f,[h,o,u])}}var l,c,f,h,p=Et,d=Mt,v=Ft,m={},g=y("start","drag","end"),_=0,b=0;return e.filter=function(t){return arguments.length?(p="function"==typeof t?t:Wf(!!t),e):p},e.container=function(t){return arguments.length?(d="function"==typeof t?t:Wf(t),e):d},e.subject=function(t){return arguments.length?(v="function"==typeof t?t:Wf(t),e):v},e.on=function(){var t=g.on.apply(g,arguments);return t===g?e:t},e.clickDistance=function(t){return arguments.length?(b=(t=+t)*t,e):Math.sqrt(b)},e},Xf=function(t,e,n){t.prototype=e.prototype=n,n.constructor=t},$f="\\s*([+-]?\\d+)\\s*",Gf="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Zf="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Jf=/^#([0-9a-f]{3})$/,Qf=/^#([0-9a-f]{6})$/,th=new RegExp("^rgb\\("+[$f,$f,$f]+"\\)$"),eh=new RegExp("^rgb\\("+[Zf,Zf,Zf]+"\\)$"),nh=new RegExp("^rgba\\("+[$f,$f,$f,Gf]+"\\)$"),rh=new RegExp("^rgba\\("+[Zf,Zf,Zf,Gf]+"\\)$"),ih=new RegExp("^hsl\\("+[Gf,Zf,Zf]+"\\)$"),oh=new RegExp("^hsla\\("+[Gf,Zf,Zf,Gf]+"\\)$"),uh={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};Xf(At,Ot,{displayable:function(){return this.rgb().displayable()},toString:function(){return this.rgb()+""}}),Xf(jt,Nt,St(At,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new jt(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new jt(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},toString:function(){var t=this.opacity;return t=isNaN(t)?1:Math.max(0,Math.min(1,t)),(1===t?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),Xf(It,Rt,St(At,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new It(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new It(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,i=2*n-r;return new jt(Lt(t>=240?t-240:t+120,i,r),Lt(t,i,r),Lt(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var ah=Math.PI/180,sh=180/Math.PI,lh=.95047,ch=1,fh=1.08883,hh=4/29,ph=6/29,dh=3*ph*ph,vh=ph*ph*ph;Xf(qt,Bt,St(At,{brighter:function(t){return new qt(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new qt(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return t=ch*Kt(t),e=lh*Kt(e),n=fh*Kt(n),new jt(Ht(3.2404542*e-1.5371385*t-.4985314*n),Ht(-.969266*e+1.8760108*t+.041556*n),Ht(.0556434*e-.2040259*t+1.0572252*n),this.opacity)}})),Xf($t,Xt,St(At,{brighter:function(t){return new $t(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new $t(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return zt(this).rgb()}}));var mh=-.14861,yh=1.78277,gh=-.29227,_h=-.90649,bh=1.97294,xh=bh*_h,wh=bh*yh,Eh=yh*gh-_h*mh;Xf(Jt,Zt,St(At,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Jt(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Jt(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*ah,e=+this.l,n=isNaN(this.s)?0:this.s*e*(1-e),r=Math.cos(t),i=Math.sin(t);return new jt(255*(e+n*(mh*r+yh*i)),255*(e+n*(gh*r+_h*i)),255*(e+n*(bh*r)),this.opacity)}}));var Mh,Fh,Ch,Sh,Ah,Oh,Th=function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),i=t[r],o=t[r+1],u=r>0?t[r-1]:2*i-o,a=r<e-1?t[r+2]:2*o-i;return Qt((n-r/e)*e,u,i,o,a)}},Dh=function(t){var e=t.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*e),i=t[(r+e-1)%e],o=t[r%e],u=t[(r+1)%e],a=t[(r+2)%e];return Qt((n-r/e)*e,i,o,u,a)}},kh=function(t){return function(){return t}},Nh=function t(e){function n(t,e){var n=r((t=Nt(t)).r,(e=Nt(e)).r),i=r(t.g,e.g),o=r(t.b,e.b),u=ie(t.opacity,e.opacity);return function(e){return t.r=n(e),t.g=i(e),t.b=o(e),t.opacity=u(e),t+""}}var r=re(e);return n.gamma=t,n}(1),jh=oe(Th),Ph=oe(Dh),Vh=function(t,e){var n,r=e?e.length:0,i=t?Math.min(r,t.length):0,o=new Array(r),u=new Array(r);for(n=0;n<i;++n)o[n]=Uh(t[n],e[n]);for(;n<r;++n)u[n]=e[n];return function(t){for(n=0;n<i;++n)u[n]=o[n](t);return u}},Rh=function(t,e){var n=new Date;return t=+t,e-=t,function(r){return n.setTime(t+e*r),n}},Ih=function(t,e){return t=+t,e-=t,function(n){return t+e*n}},Lh=function(t,e){var n,r={},i={};null!==t&&"object"===(void 0===t?"undefined":u(t))||(t={}),null!==e&&"object"===(void 0===e?"undefined":u(e))||(e={});for(n in e)n in t?r[n]=Uh(t[n],e[n]):i[n]=e[n];return function(t){for(n in r)i[n]=r[n](t);return i}},zh=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Bh=new RegExp(zh.source,"g"),qh=function(t,e){var n,r,i,o=zh.lastIndex=Bh.lastIndex=0,u=-1,a=[],s=[];for(t+="",e+="";(n=zh.exec(t))&&(r=Bh.exec(e));)(i=r.index)>o&&(i=e.slice(o,i),a[u]?a[u]+=i:a[++u]=i),(n=n[0])===(r=r[0])?a[u]?a[u]+=r:a[++u]=r:(a[++u]=null,s.push({i:u,x:Ih(n,r)})),o=Bh.lastIndex;return o<e.length&&(i=e.slice(o),a[u]?a[u]+=i:a[++u]=i),a.length<2?s[0]?ae(s[0].x):ue(e):(e=s.length,function(t){for(var n,r=0;r<e;++r)a[(n=s[r]).i]=n.x(t);return a.join("")})},Uh=function(t,e){var n,r=void 0===e?"undefined":u(e);return null==e||"boolean"===r?kh(e):("number"===r?Ih:"string"===r?(n=Ot(e))?(e=n,Nh):qh:e instanceof Ot?Nh:e instanceof Date?Rh:Array.isArray(e)?Vh:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?Lh:Ih)(t,e)},Kh=function(t,e){return t=+t,e-=t,function(n){return Math.round(t+e*n)}},Hh=180/Math.PI,Wh={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},Yh=function(t,e,n,r,i,o){var u,a,s;return(u=Math.sqrt(t*t+e*e))&&(t/=u,e/=u),(s=t*n+e*r)&&(n-=t*s,r-=e*s),(a=Math.sqrt(n*n+r*r))&&(n/=a,r/=a,s/=a),t*r<e*n&&(t=-t,e=-e,s=-s,u=-u),{translateX:i,translateY:o,rotate:Math.atan2(e,t)*Hh,skewX:Math.atan(s)*Hh,scaleX:u,scaleY:a}},Xh=ce(se,"px, ","px)","deg)"),$h=ce(le,", ",")",")"),Gh=Math.SQRT2,Zh=function(t,e){var n,r,i=t[0],o=t[1],u=t[2],a=e[0],s=e[1],l=e[2],c=a-i,f=s-o,h=c*c+f*f;if(h<1e-12)r=Math.log(l/u)/Gh,n=function(t){return[i+t*c,o+t*f,u*Math.exp(Gh*t*r)]};else{var p=Math.sqrt(h),d=(l*l-u*u+4*h)/(2*u*2*p),v=(l*l-u*u-4*h)/(2*l*2*p),m=Math.log(Math.sqrt(d*d+1)-d),y=Math.log(Math.sqrt(v*v+1)-v);r=(y-m)/Gh,n=function(t){var e=t*r,n=fe(m),a=u/(2*p)*(n*pe(Gh*e+m)-he(m));return[i+a*c,o+a*f,u*n/fe(Gh*e+m)]}}return n.duration=1e3*r,n},Jh=de(ne),Qh=de(ie),tp=me(ne),ep=me(ie),np=ye(ne),rp=ye(ie),ip=function(t,e){for(var n=new Array(e),r=0;r<e;++r)n[r]=t(r/(e-1));return n},op=0,up=0,ap=0,sp=1e3,lp=0,cp=0,fp=0,hp="object"===("undefined"==typeof performance?"undefined":u(performance))&&performance.now?performance:Date,pp="object"===("undefined"==typeof window?"undefined":u(window))&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};be.prototype=xe.prototype={constructor:be,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?ge():+n)+(null==e?0:+e),this._next||Oh===this||(Oh?Oh._next=this:Ah=this,Oh=this),this._call=t,this._time=n,Ce()},stop:function(){this._call&&(this._call=null,this._time=1/0,Ce())}};var dp=function(t,e,n){var r=new be;return e=null==e?0:+e,r.restart(function(n){r.stop(),t(n+e)},e,n),r},vp=function(t,e,n){var r=new be,i=e;return null==e?(r.restart(t,e,n),r):(e=+e,n=null==n?ge():+n,r.restart(function o(u){u+=i,r.restart(o,i+=e,n),t(u)},e,n),r)},mp=y("start","end","interrupt"),yp=[],gp=0,_p=1,bp=2,xp=3,wp=4,Ep=5,Mp=6,Fp=function(t,e,n,r,i,o){var u=t.__transition;if(u){if(n in u)return}else t.__transition={};Te(t,n,{name:e,index:r,group:i,on:mp,tween:yp,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:gp})},Cp=function(t,e){var n,r,i,o=t.__transition,u=!0;if(o){e=null==e?null:e+"";for(i in o)(n=o[i]).name===e?(r=n.state>bp&&n.state<Ep,n.state=Mp,n.timer.stop(),r&&n.on.call("interrupt",t,t.__data__,n.index,n.group),delete o[i]):u=!1;u&&delete t.__transition}},Sp=function(t){return this.each(function(){Cp(this,t)})},Ap=function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,i=Oe(this.node(),n).tween,o=0,u=i.length;o<u;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==e?De:ke)(n,t,e))},Op=function(t,e){var n;return("number"==typeof e?Ih:e instanceof Ot?Nh:(n=Ot(e))?(e=n,Nh):qh)(t,e)},Tp=function(t,e){var n=Wc(t),r="transform"===n?$h:Op;return this.attrTween(t,"function"==typeof e?(n.local?Le:Ie)(n,r,Ne(this,"attr."+t,e)):null==e?(n.local?Pe:je)(n):(n.local?Re:Ve)(n,r,e+""))},Dp=function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=Wc(t);return this.tween(n,(r.local?ze:Be)(r,e))},kp=function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?qe:Ue)(e,t)):Oe(this.node(),e).delay},Np=function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Ke:He)(e,t)):Oe(this.node(),e).duration},jp=function(t){var e=this._id;return arguments.length?this.each(We(e,t)):Oe(this.node(),e).ease},Pp=function(t){"function"!=typeof t&&(t=Jc(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,u=e[i],a=u.length,s=r[i]=[],l=0;l<a;++l)(o=u[l])&&t.call(o,o.__data__,l,u)&&s.push(o);return new rn(r,this._parents,this._name,this._id)},Vp=function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),u=new Array(r),a=0;a<o;++a)for(var s,l=e[a],c=n[a],f=l.length,h=u[a]=new Array(f),p=0;p<f;++p)(s=l[p]||c[p])&&(h[p]=s);for(;a<r;++a)u[a]=e[a];return new rn(u,this._parents,this._name,this._id)},Rp=function(t,e){var n=this._id;return arguments.length<2?Oe(this.node(),n).on.on(t):this.each(Xe(n,t,e))},Ip=function(){return this.on("end.remove",$e(this._id))},Lp=function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=of(t));for(var r=this._groups,i=r.length,o=new Array(i),u=0;u<i;++u)for(var a,s,l=r[u],c=l.length,f=o[u]=new Array(c),h=0;h<c;++h)(a=l[h])&&(s=t.call(a,a.__data__,h,l))&&("__data__"in a&&(s.__data__=a.__data__),f[h]=s,Fp(f[h],e,n,h,f,Oe(a,n)));return new rn(o,this._parents,e,n)},zp=function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=af(t));for(var r=this._groups,i=r.length,o=[],u=[],a=0;a<i;++a)for(var s,l=r[a],c=l.length,f=0;f<c;++f)if(s=l[f]){for(var h,p=t.call(s,s.__data__,f,l),d=Oe(s,n),v=0,m=p.length;v<m;++v)(h=p[v])&&Fp(h,e,n,v,p,d);o.push(p),u.push(s)}return new rn(o,u,e,n)},Bp=_t.prototype.constructor,qp=function(){return new Bp(this._groups,this._parents)},Up=function(t,e,n){var r="transform"==(t+="")?Xh:Op;return null==e?this.styleTween(t,Ge(t,r)).on("end.style."+t,Ze(t)):this.styleTween(t,"function"==typeof e?Qe(t,r,Ne(this,"style."+t,e)):Je(t,r,e+""),n)},Kp=function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,tn(t,e,null==n?"":n))},Hp=function(t){return this.tween("text","function"==typeof t?nn(Ne(this,"text",t)):en(null==t?"":t+""))},Wp=function(){for(var t=this._name,e=this._id,n=un(),r=this._groups,i=r.length,o=0;o<i;++o)for(var u,a=r[o],s=a.length,l=0;l<s;++l)if(u=a[l]){var c=Oe(u,e);Fp(u,t,n,l,a,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new rn(r,this._parents,t,n)},Yp=0,Xp=_t.prototype;rn.prototype=on.prototype={constructor:rn,select:Lp,selectAll:zp,filter:Pp,merge:Vp,selection:qp,transition:Wp,call:Xp.call,nodes:Xp.nodes,node:Xp.node,size:Xp.size,empty:Xp.empty,each:Xp.each,on:Rp,attr:Tp,attrTween:Dp,style:Up,styleTween:Kp,text:Hp,remove:Ip,tween:Ap,delay:kp,duration:Np,ease:jp};var $p=function t(e){function n(t){return Math.pow(t,e)}return e=+e,n.exponent=t,n}(3),Gp=function t(e){function n(t){return 1-Math.pow(1-t,e)}return e=+e,n.exponent=t,n}(3),Zp=function t(e){function n(t){return((t*=2)<=1?Math.pow(t,e):2-Math.pow(2-t,e))/2}return e=+e,n.exponent=t,n}(3),Jp=Math.PI,Qp=Jp/2,td=4/11,ed=6/11,nd=8/11,rd=.75,id=9/11,od=10/11,ud=.9375,ad=21/22,sd=63/64,ld=1/td/td,cd=function t(e){function n(t){return t*t*((e+1)*t-e)}return e=+e,n.overshoot=t,n}(1.70158),fd=function t(e){function n(t){return--t*t*((e+1)*t+e)+1}return e=+e,n.overshoot=t,n}(1.70158),hd=function t(e){function n(t){return((t*=2)<1?t*t*((e+1)*t-e):(t-=2)*t*((e+1)*t+e)+2)/2}return e=+e,n.overshoot=t,n}(1.70158),pd=2*Math.PI,dd=function t(e,n){function r(t){return e*Math.pow(2,10*--t)*Math.sin((i-t)/n)}var i=Math.asin(1/(e=Math.max(1,e)))*(n/=pd);return r.amplitude=function(e){return t(e,n*pd)},r.period=function(n){return t(e,n)},r}(1,.3),vd=function t(e,n){function r(t){return 1-e*Math.pow(2,-10*(t=+t))*Math.sin((t+i)/n)}var i=Math.asin(1/(e=Math.max(1,e)))*(n/=pd);return r.amplitude=function(e){return t(e,n*pd)},r.period=function(n){return t(e,n)},r}(1,.3),md=function t(e,n){function r(t){return((t=2*t-1)<0?e*Math.pow(2,10*t)*Math.sin((i-t)/n):2-e*Math.pow(2,-10*t)*Math.sin((i+t)/n))/2}var i=Math.asin(1/(e=Math.max(1,e)))*(n/=pd);return r.amplitude=function(e){return t(e,n*pd)},r.period=function(n){return t(e,n)},r}(1,.3),yd={time:null,delay:0,duration:250,ease:pn},gd=function(t){var e,n;t instanceof rn?(e=t._id,t=t._name):(e=un(),(n=yd).time=ge(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var u,a=r[o],s=a.length,l=0;l<s;++l)(u=a[l])&&Fp(u,t,e,l,a,n||Cn(u,e));return new rn(r,this._parents,t,e)};_t.prototype.interrupt=Sp,_t.prototype.transition=gd;var _d=[null],bd=function(t,e){var n,r,i=t.__transition;if(i){e=null==e?null:e+"";for(r in i)if((n=i[r]).state>_p&&n.name===e)return new rn([[t]],_d,e,+r)}return null},xd=function(t){return function(){return t}},wd=function(t,e,n){this.target=t,this.type=e,this.selection=n},Ed=function(){t.event.preventDefault(),t.event.stopImmediatePropagation()},Md={name:"drag"},Fd={name:"space"},Cd={name:"handle"},Sd={name:"center"},Ad={name:"x",handles:["e","w"].map(An),input:function(t,e){return t&&[[t[0],e[0][1]],[t[1],e[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},Od={name:"y",handles:["n","s"].map(An),input:function(t,e){return t&&[[e[0][0],t[0]],[e[1][0],t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},Td={name:"xy",handles:["n","e","s","w","nw","ne","se","sw"].map(An),input:function(t){return t},output:function(t){return t}},Dd={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},kd={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},Nd={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},jd={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},Pd={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1},Vd=function(){return Vn(Td)},Rd=Math.cos,Id=Math.sin,Ld=Math.PI,zd=Ld/2,Bd=2*Ld,qd=Math.max,Ud=function(){function t(t){var o,u,a,s,l,c,f=t.length,h=[],p=vc(f),d=[],v=[],m=v.groups=new Array(f),y=new Array(f*f);for(o=0,l=-1;++l<f;){for(u=0,c=-1;++c<f;)u+=t[l][c];h.push(u),d.push(vc(f)),o+=u}for(n&&p.sort(function(t,e){return n(h[t],h[e])}),r&&d.forEach(function(e,n){e.sort(function(e,i){return r(t[n][e],t[n][i])})}),o=qd(0,Bd-e*f)/o,s=o?e:Bd/f,u=0,l=-1;++l<f;){for(a=u,c=-1;++c<f;){var g=p[l],_=d[g][c],b=t[g][_],x=u,w=u+=b*o;y[_*f+g]={index:g,subindex:_,startAngle:x,endAngle:w,value:b}}m[g]={index:g,startAngle:a,endAngle:u,value:h[g]},u+=s}for(l=-1;++l<f;)for(c=l-1;++c<f;){var E=y[c*f+l],M=y[l*f+c];(E.value||M.value)&&v.push(E.value<M.value?{source:M,target:E}:{source:E,target:M})}return i?v.sort(i):v}var e=0,n=null,r=null,i=null;return t.padAngle=function(n){return arguments.length?(e=qd(0,n),t):e},t.sortGroups=function(e){return arguments.length?(n=e,t):n},t.sortSubgroups=function(e){return arguments.length?(r=e,t):r},t.sortChords=function(e){return arguments.length?(null==e?i=null:(i=Rn(e))._=e,t):i&&i._},t},Kd=Array.prototype.slice,Hd=function(t){return function(){return t}},Wd=Math.PI,Yd=2*Wd,Xd=Yd-1e-6;In.prototype=Ln.prototype={constructor:In,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,i,o){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,e,n,r,i){t=+t,e=+e,n=+n,r=+r,i=+i;var o=this._x1,u=this._y1,a=n-t,s=r-e,l=o-t,c=u-e,f=l*l+c*c;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(f>1e-6)if(Math.abs(c*a-s*l)>1e-6&&i){var h=n-o,p=r-u,d=a*a+s*s,v=h*h+p*p,m=Math.sqrt(d),y=Math.sqrt(f),g=i*Math.tan((Wd-Math.acos((d+f-v)/(2*m*y)))/2),_=g/y,b=g/m;Math.abs(_-1)>1e-6&&(this._+="L"+(t+_*l)+","+(e+_*c)),this._+="A"+i+","+i+",0,0,"+ +(c*h>l*p)+","+(this._x1=t+b*a)+","+(this._y1=e+b*s)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,r,i,o){t=+t,e=+e,n=+n;var u=n*Math.cos(r),a=n*Math.sin(r),s=t+u,l=e+a,c=1^o,f=o?r-i:i-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+s+","+l:(Math.abs(this._x1-s)>1e-6||Math.abs(this._y1-l)>1e-6)&&(this._+="L"+s+","+l),n&&(f<0&&(f=f%Yd+Yd),f>Xd?this._+="A"+n+","+n+",0,1,"+c+","+(t-u)+","+(e-a)+"A"+n+","+n+",0,1,"+c+","+(this._x1=s)+","+(this._y1=l):f>1e-6&&(this._+="A"+n+","+n+",0,"+ +(f>=Wd)+","+c+","+(this._x1=t+n*Math.cos(i))+","+(this._y1=e+n*Math.sin(i))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};var $d=function(){function t(){var t,a=Kd.call(arguments),s=e.apply(this,a),l=n.apply(this,a),c=+r.apply(this,(a[0]=s,a)),f=i.apply(this,a)-zd,h=o.apply(this,a)-zd,p=c*Rd(f),d=c*Id(f),v=+r.apply(this,(a[0]=l,a)),m=i.apply(this,a)-zd,y=o.apply(this,a)-zd;if(u||(u=t=Ln()),u.moveTo(p,d),u.arc(0,0,c,f,h),f===m&&h===y||(u.quadraticCurveTo(0,0,v*Rd(m),v*Id(m)),u.arc(0,0,v,m,y)),u.quadraticCurveTo(0,0,p,d),u.closePath(),t)return u=null,t+""||null}var e=zn,n=Bn,r=qn,i=Un,o=Kn,u=null;return t.radius=function(e){return arguments.length?(r="function"==typeof e?e:Hd(+e),t):r},t.startAngle=function(e){return arguments.length?(i="function"==typeof e?e:Hd(+e),t):i},t.endAngle=function(e){return arguments.length?(o="function"==typeof e?e:Hd(+e),t):o},t.source=function(n){return arguments.length?(e=n,t):e},t.target=function(e){return arguments.length?(n=e,t):n},t.context=function(e){return arguments.length?(u=null==e?null:e,t):u},t};Hn.prototype=Wn.prototype={constructor:Hn,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,e){return this["$"+t]=e,this},remove:function(t){var e="$"+t;return e in this&&delete this[e]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)"$"===e[0]&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)"$"===e[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var e in this)"$"===e[0]&&t(this[e],e.slice(1),this)}};var Gd=function(){function t(e,i,u,a){if(i>=o.length)return null!=n&&e.sort(n),null!=r?r(e):e;for(var s,l,c,f=-1,h=e.length,p=o[i++],d=Wn(),v=u();++f<h;)(c=d.get(s=p(l=e[f])+""))?c.push(l):d.set(s,[l]);return d.each(function(e,n){a(v,n,t(e,i,u,a))}),v}function e(t,n){if(++n>o.length)return t;var i,a=u[n-1];return null!=r&&n>=o.length?i=t.entries():(i=[],t.each(function(t,r){i.push({key:r,values:e(t,n)})})),null!=a?i.sort(function(t,e){return a(t.key,e.key)}):i}var n,r,i,o=[],u=[];return i={object:function(e){return t(e,0,Yn,Xn)},map:function(e){return t(e,0,$n,Gn)},entries:function(n){return e(t(n,0,$n,Gn),0)},key:function(t){return o.push(t),i},sortKeys:function(t){return u[o.length-1]=t,i},sortValues:function(t){return n=t,i},rollup:function(t){return r=t,i}}},Zd=Wn.prototype;Zn.prototype=Jn.prototype={constructor:Zn,has:Zd.has,add:function(t){return t+="",this["$"+t]=t,this},remove:Zd.remove,clear:Zd.clear,values:Zd.keys,size:Zd.size,empty:Zd.empty,each:Zd.each};var Jd=function(t){var e=[];for(var n in t)e.push(n);return e},Qd=function(t){var e=[];for(var n in t)e.push(t[n]);return e},tv=function(t){var e=[];for(var n in t)e.push({key:n,value:t[n]});return e},ev=function(t){function e(t,e){var r,i,o=n(t,function(t,n){if(r)return r(t,n-1);i=t,r=e?tr(t,e):Qn(t)});return o.columns=i,o}function n(t,e){function n(){if(c>=l)return u;if(i)return i=!1,o;var e,n=c;if(34===t.charCodeAt(n)){for(var r=n;r++<l;)if(34===t.charCodeAt(r)){if(34!==t.charCodeAt(r+1))break;++r}return c=r+2,e=t.charCodeAt(r+1),13===e?(i=!0,10===t.charCodeAt(r+2)&&++c):10===e&&(i=!0),t.slice(n+1,r).replace(/""/g,'"')}for(;c<l;){var a=1;if(10===(e=t.charCodeAt(c++)))i=!0;else if(13===e)i=!0,10===t.charCodeAt(c)&&(++c,++a);else if(e!==s)continue;return t.slice(n,c-a)}return t.slice(n)}for(var r,i,o={},u={},a=[],l=t.length,c=0,f=0;(r=n())!==u;){for(var h=[];r!==o&&r!==u;)h.push(r),r=n();e&&null==(h=e(h,f++))||a.push(h)}return a}function r(e,n){return null==n&&(n=er(e)),[n.map(u).join(t)].concat(e.map(function(e){return n.map(function(t){return u(e[t])}).join(t)})).join("\n")}function i(t){return t.map(o).join("\n")}function o(e){return e.map(u).join(t)}function u(t){return null==t?"":a.test(t+="")?'"'+t.replace(/\"/g,'""')+'"':t}var a=new RegExp('["'+t+"\n\r]"),s=t.charCodeAt(0);return{parse:e,parseRows:n,format:r,formatRows:i}},nv=ev(","),rv=nv.parse,iv=nv.parseRows,ov=nv.format,uv=nv.formatRows,av=ev("\t"),sv=av.parse,lv=av.parseRows,cv=av.format,fv=av.formatRows,hv=function(t,e){function n(){var n,i,o=r.length,u=0,a=0;for(n=0;n<o;++n)i=r[n],u+=i.x,a+=i.y;for(u=u/o-t,a=a/o-e,n=0;n<o;++n)i=r[n],i.x-=u,i.y-=a}var r;return null==t&&(t=0),null==e&&(e=0),n.initialize=function(t){r=t},n.x=function(e){return arguments.length?(t=+e,n):t},n.y=function(t){return arguments.length?(e=+t,n):e},n},pv=function(t){return function(){return t}},dv=function(){return 1e-6*(Math.random()-.5)},vv=function(t){var e=+this._x.call(null,t),n=+this._y.call(null,t);return nr(this.cover(e,n),e,n,t)},mv=function(t,e){if(isNaN(t=+t)||isNaN(e=+e))return this;var n=this._x0,r=this._y0,i=this._x1,o=this._y1;if(isNaN(n))i=(n=Math.floor(t))+1,o=(r=Math.floor(e))+1;else{if(!(n>t||t>i||r>e||e>o))return this;var u,a,s=i-n,l=this._root;switch(a=(e<(r+o)/2)<<1|t<(n+i)/2){case 0:do{u=new Array(4),u[a]=l,l=u}while(s*=2,i=n+s,o=r+s,t>i||e>o);break;case 1:do{u=new Array(4),u[a]=l,l=u}while(s*=2,n=i-s,o=r+s,n>t||e>o);break;case 2:do{u=new Array(4),u[a]=l,l=u}while(s*=2,i=n+s,r=o-s,t>i||r>e);break;case 3:do{u=new Array(4),u[a]=l,l=u}while(s*=2,n=i-s,r=o-s,n>t||r>e)}this._root&&this._root.length&&(this._root=l)}return this._x0=n,this._y0=r,this._x1=i,this._y1=o,this},yv=function(){var t=[];return this.visit(function(e){if(!e.length)do{t.push(e.data)}while(e=e.next)}),t},gv=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},_v=function(t,e,n,r,i){this.node=t,this.x0=e,this.y0=n,this.x1=r,this.y1=i},bv=function(t,e,n){var r,i,o,u,a,s,l,c=this._x0,f=this._y0,h=this._x1,p=this._y1,d=[],v=this._root;for(v&&d.push(new _v(v,c,f,h,p)),null==n?n=1/0:(c=t-n,f=e-n,h=t+n,p=e+n,n*=n);s=d.pop();)if(!(!(v=s.node)||(i=s.x0)>h||(o=s.y0)>p||(u=s.x1)<c||(a=s.y1)<f))if(v.length){var m=(i+u)/2,y=(o+a)/2;d.push(new _v(v[3],m,y,u,a),new _v(v[2],i,y,m,a),new _v(v[1],m,o,u,y),new _v(v[0],i,o,m,y)),(l=(e>=y)<<1|t>=m)&&(s=d[d.length-1],d[d.length-1]=d[d.length-1-l],d[d.length-1-l]=s)}else{var g=t-+this._x.call(null,v.data),_=e-+this._y.call(null,v.data),b=g*g+_*_;if(b<n){var x=Math.sqrt(n=b);c=t-x,f=e-x,h=t+x,p=e+x,r=v.data}}return r},xv=function(t){if(isNaN(o=+this._x.call(null,t))||isNaN(u=+this._y.call(null,t)))return this;var e,n,r,i,o,u,a,s,l,c,f,h,p=this._root,d=this._x0,v=this._y0,m=this._x1,y=this._y1;if(!p)return this;if(p.length)for(;;){if((l=o>=(a=(d+m)/2))?d=a:m=a,(c=u>=(s=(v+y)/2))?v=s:y=s,e=p,!(p=p[f=c<<1|l]))return this;if(!p.length)break;(e[f+1&3]||e[f+2&3]||e[f+3&3])&&(n=e,h=f)}for(;p.data!==t;)if(r=p,!(p=p.next))return this;return(i=p.next)&&delete p.next,r?(i?r.next=i:delete r.next,this):e?(i?e[f]=i:delete e[f],(p=e[0]||e[1]||e[2]||e[3])&&p===(e[3]||e[2]||e[1]||e[0])&&!p.length&&(n?n[h]=p:this._root=p),this):(this._root=i,this)},wv=function(){return this._root},Ev=function(){var t=0;return this.visit(function(e){if(!e.length)do{++t}while(e=e.next)}),t},Mv=function(t){var e,n,r,i,o,u,a=[],s=this._root;for(s&&a.push(new _v(s,this._x0,this._y0,this._x1,this._y1));e=a.pop();)if(!t(s=e.node,r=e.x0,i=e.y0,o=e.x1,u=e.y1)&&s.length){var l=(r+o)/2,c=(i+u)/2;(n=s[3])&&a.push(new _v(n,l,c,o,u)),(n=s[2])&&a.push(new _v(n,r,c,l,u)),(n=s[1])&&a.push(new _v(n,l,i,o,c)),(n=s[0])&&a.push(new _v(n,r,i,l,c))}return this},Fv=function(t){var e,n=[],r=[];for(this._root&&n.push(new _v(this._root,this._x0,this._y0,this._x1,this._y1));e=n.pop();){var i=e.node;if(i.length){var o,u=e.x0,a=e.y0,s=e.x1,l=e.y1,c=(u+s)/2,f=(a+l)/2;(o=i[0])&&n.push(new _v(o,u,a,c,f)),(o=i[1])&&n.push(new _v(o,c,a,s,f)),(o=i[2])&&n.push(new _v(o,u,f,c,l)),(o=i[3])&&n.push(new _v(o,c,f,s,l))}r.push(e)}for(;e=r.pop();)t(e.node,e.x0,e.y0,e.x1,e.y1);return this},Cv=function(t){return arguments.length?(this._x=t,this):this._x},Sv=function(t){return arguments.length?(this._y=t,this):this._y},Av=ar.prototype=sr.prototype;Av.copy=function(){var t,e,n=new sr(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return n;if(!r.length)return n._root=lr(r),n;for(t=[{source:r,target:n._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(e=r.source[i])&&(e.length?t.push({source:e,target:r.target[i]=new Array(4)}):r.target[i]=lr(e));return n},Av.add=vv,Av.addAll=rr,Av.cover=mv,Av.data=yv,Av.extent=gv,Av.find=bv,Av.remove=xv,Av.removeAll=ir,Av.root=wv,Av.size=Ev,Av.visit=Mv,Av.visitAfter=Fv,Av.x=Cv,Av.y=Sv;var Ov,Tv=function(t){function e(){function t(t,e,n,r,i){var o=t.data,a=t.r,p=f+a;{if(!o)return e>l+p||r<l-p||n>c+p||i<c-p;if(o.index>s.index){var d=l-o.x-o.vx,v=c-o.y-o.vy,m=d*d+v*v;m<p*p&&(0===d&&(d=dv(),m+=d*d),0===v&&(v=dv(),m+=v*v),m=(p-(m=Math.sqrt(m)))/m*u,s.vx+=(d*=m)*(p=(a*=a)/(h+a)),s.vy+=(v*=m)*p,o.vx-=d*(p=1-p),o.vy-=v*p)}}}for(var e,r,s,l,c,f,h,p=i.length,d=0;d<a;++d)for(r=ar(i,cr,fr).visitAfter(n),e=0;e<p;++e)s=i[e],f=o[s.index],h=f*f,l=s.x+s.vx,c=s.y+s.vy,r.visit(t)}function n(t){if(t.data)return t.r=o[t.data.index];for(var e=t.r=0;e<4;++e)t[e]&&t[e].r>t.r&&(t.r=t[e].r)}function r(){if(i){var e,n,r=i.length;for(o=new Array(r),e=0;e<r;++e)n=i[e],o[n.index]=+t(n,e,i)}}var i,o,u=1,a=1;return"function"!=typeof t&&(t=pv(null==t?1:+t)),e.initialize=function(t){i=t,r()},e.iterations=function(t){return arguments.length?(a=+t,e):a},e.strength=function(t){return arguments.length?(u=+t,e):u},e.radius=function(n){return arguments.length?(t="function"==typeof n?n:pv(+n),r(),e):t},e},Dv=function(t){function e(t){return 1/Math.min(c[t.source.index],c[t.target.index])}function n(e){for(var n=0,r=t.length;n<v;++n)for(var i,o,u,l,c,h,p,d=0;d<r;++d)i=t[d],o=i.source,u=i.target,l=u.x+u.vx-o.x-o.vx||dv(),c=u.y+u.vy-o.y-o.vy||dv(),h=Math.sqrt(l*l+c*c),h=(h-s[d])/h*e*a[d],l*=h,c*=h,u.vx-=l*(p=f[d]),u.vy-=c*p,o.vx+=l*(p=1-p),o.vy+=c*p}function r(){if(l){var e,n,r=l.length,p=t.length,d=Wn(l,h);for(e=0,c=new Array(r);e<p;++e)n=t[e],n.index=e,"object"!==u(n.source)&&(n.source=pr(d,n.source)),"object"!==u(n.target)&&(n.target=pr(d,n.target)),c[n.source.index]=(c[n.source.index]||0)+1,c[n.target.index]=(c[n.target.index]||0)+1;for(e=0,f=new Array(p);e<p;++e)n=t[e],f[e]=c[n.source.index]/(c[n.source.index]+c[n.target.index]);a=new Array(p),i(),s=new Array(p),o()}}function i(){if(l)for(var e=0,n=t.length;e<n;++e)a[e]=+p(t[e],e,t)}function o(){if(l)for(var e=0,n=t.length;e<n;++e)s[e]=+d(t[e],e,t)}var a,s,l,c,f,h=hr,p=e,d=pv(30),v=1;return null==t&&(t=[]),n.initialize=function(t){l=t,r()},n.links=function(e){return arguments.length?(t=e,r(),n):t},n.id=function(t){return arguments.length?(h=t,n):h},n.iterations=function(t){return arguments.length?(v=+t,n):v},n.strength=function(t){return arguments.length?(p="function"==typeof t?t:pv(+t),i(),n):p},n.distance=function(t){return arguments.length?(d="function"==typeof t?t:pv(+t),o(),n):d},n},kv=10,Nv=Math.PI*(3-Math.sqrt(5)),jv=function(t){function e(){n(),p.call("tick",o),u<a&&(h.stop(),p.call("end",o))}function n(){var e,n,r=t.length;for(u+=(l-u)*s,f.each(function(t){t(u)}),e=0;e<r;++e)n=t[e],null==n.fx?n.x+=n.vx*=c:(n.x=n.fx,n.vx=0),null==n.fy?n.y+=n.vy*=c:(n.y=n.fy,n.vy=0)}function r(){for(var e,n=0,r=t.length;n<r;++n){if(e=t[n],e.index=n,isNaN(e.x)||isNaN(e.y)){var i=kv*Math.sqrt(n),o=n*Nv;e.x=i*Math.cos(o),e.y=i*Math.sin(o)}(isNaN(e.vx)||isNaN(e.vy))&&(e.vx=e.vy=0)}}function i(e){return e.initialize&&e.initialize(t),e}var o,u=1,a=.001,s=1-Math.pow(a,1/300),l=0,c=.6,f=Wn(),h=xe(e),p=y("tick","end");return null==t&&(t=[]),r(),o={tick:n,restart:function(){return h.restart(e),o},stop:function(){return h.stop(),o},nodes:function(e){return arguments.length?(t=e,r(),f.each(i),o):t},alpha:function(t){return arguments.length?(u=+t,o):u},alphaMin:function(t){return arguments.length?(a=+t,o):a},alphaDecay:function(t){return arguments.length?(s=+t,o):+s},alphaTarget:function(t){return arguments.length?(l=+t,o):l},velocityDecay:function(t){return arguments.length?(c=1-t,o):1-c},force:function(t,e){return arguments.length>1?(null==e?f.remove(t):f.set(t,i(e)),o):f.get(t)},find:function(e,n,r){var i,o,u,a,s,l=0,c=t.length;for(null==r?r=1/0:r*=r,l=0;l<c;++l)a=t[l],i=e-a.x,o=n-a.y,(u=i*i+o*o)<r&&(s=a,r=u);return s},on:function(t,e){return arguments.length>1?(p.on(t,e),o):p.on(t)}}},Pv=function(){function t(t){var e,a=i.length,s=ar(i,dr,vr).visitAfter(n);for(u=t,e=0;e<a;++e)o=i[e],s.visit(r)}function e(){if(i){var t,e,n=i.length;for(a=new Array(n),t=0;t<n;++t)e=i[t],a[e.index]=+s(e,t,i)}}function n(t){var e,n,r,i,o,u=0;if(t.length){for(r=i=o=0;o<4;++o)(e=t[o])&&(n=e.value)&&(u+=n,r+=n*e.x,i+=n*e.y);t.x=r/u,t.y=i/u}else{e=t,e.x=e.data.x,e.y=e.data.y;do{u+=a[e.data.index]}while(e=e.next)}t.value=u}function r(t,e,n,r){if(!t.value)return!0;var i=t.x-o.x,s=t.y-o.y,h=r-e,p=i*i+s*s;if(h*h/f<p)return p<c&&(0===i&&(i=dv(),p+=i*i),0===s&&(s=dv(),p+=s*s),p<l&&(p=Math.sqrt(l*p)),o.vx+=i*t.value*u/p,o.vy+=s*t.value*u/p),!0;if(!(t.length||p>=c)){(t.data!==o||t.next)&&(0===i&&(i=dv(),p+=i*i),0===s&&(s=dv(),p+=s*s),p<l&&(p=Math.sqrt(l*p)));do{t.data!==o&&(h=a[t.data.index]*u/p,o.vx+=i*h,o.vy+=s*h)}while(t=t.next)}}var i,o,u,a,s=pv(-30),l=1,c=1/0,f=.81;return t.initialize=function(t){i=t,e()},t.strength=function(n){return arguments.length?(s="function"==typeof n?n:pv(+n),e(),t):s},t.distanceMin=function(e){return arguments.length?(l=e*e,t):Math.sqrt(l)},t.distanceMax=function(e){return arguments.length?(c=e*e,t):Math.sqrt(c)},t.theta=function(e){return arguments.length?(f=e*e,t):Math.sqrt(f)},t},Vv=function(t){function e(t){for(var e,n=0,u=r.length;n<u;++n)e=r[n],e.vx+=(o[n]-e.x)*i[n]*t}function n(){if(r){var e,n=r.length;for(i=new Array(n),o=new Array(n),e=0;e<n;++e)i[e]=isNaN(o[e]=+t(r[e],e,r))?0:+u(r[e],e,r)}}var r,i,o,u=pv(.1);return"function"!=typeof t&&(t=pv(null==t?0:+t)),e.initialize=function(t){r=t,n()},e.strength=function(t){return arguments.length?(u="function"==typeof t?t:pv(+t),n(),e):u},e.x=function(r){return arguments.length?(t="function"==typeof r?r:pv(+r),n(),e):t},e},Rv=function(t){function e(t){for(var e,n=0,u=r.length;n<u;++n)e=r[n],e.vy+=(o[n]-e.y)*i[n]*t}function n(){if(r){var e,n=r.length;for(i=new Array(n),o=new Array(n),e=0;e<n;++e)i[e]=isNaN(o[e]=+t(r[e],e,r))?0:+u(r[e],e,r)}}var r,i,o,u=pv(.1);return"function"!=typeof t&&(t=pv(null==t?0:+t)),e.initialize=function(t){r=t,n()},e.strength=function(t){return arguments.length?(u="function"==typeof t?t:pv(+t),n(),e):u},e.y=function(r){return arguments.length?(t="function"==typeof r?r:pv(+r),n(),e):t},e},Iv=function(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]},Lv=function(t){return t=Iv(Math.abs(t)),t?t[1]:NaN},zv=function(t,e){return function(n,r){for(var i=n.length,o=[],u=0,a=t[0],s=0;i>0&&a>0&&(s+a+1>r&&(a=Math.max(1,r-s)),o.push(n.substring(i-=a,i+a)),!((s+=a+1)>r));)a=t[u=(u+1)%t.length];return o.reverse().join(e)}},Bv=function(t){return function(e){return e.replace(/[0-9]/g,function(e){return t[+e]})}},qv=function(t,e){t=t.toPrecision(e);t:for(var n,r=t.length,i=1,o=-1;i<r;++i)switch(t[i]){case".":o=n=i;break;case"0":0===o&&(o=i),n=i;break;case"e":break t;default:o>0&&(o=0)}return o>0?t.slice(0,o)+t.slice(n+1):t},Uv=function(t,e){var n=Iv(t,e);if(!n)return t+"";var r=n[0],i=n[1],o=i-(Ov=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,u=r.length;return o===u?r:o>u?r+new Array(o-u+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+Iv(t,Math.max(0,e+o-1))[0]},Kv=function(t,e){var n=Iv(t,e);if(!n)return t+"";var r=n[0],i=n[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},Hv={"":qv,"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return Kv(100*t,e)},r:Kv,s:Uv,X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},Wv=/^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;mr.prototype=yr.prototype,yr.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+this.type};var Yv,Xv=function(t){return t},$v=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"],Gv=function(t){function e(t){function e(t){var e,i,a,c=m,b=y;if("c"===v)b=g(t)+b,t="";else{t=+t;var x=t<0;if(t=g(Math.abs(t),d),x&&0==+t&&(x=!1),c=(x?"("===l?l:"-":"-"===l||"("===l?"":l)+c,b=b+("s"===v?$v[8+Ov/3]:"")+(x&&"("===l?")":""),_)for(e=-1,i=t.length;++e<i;)if(48>(a=t.charCodeAt(e))||a>57){b=(46===a?o+t.slice(e+1):t.slice(e))+b,t=t.slice(0,e);break}}p&&!f&&(t=r(t,1/0));var w=c.length+t.length+b.length,E=w<h?new Array(h-w+1).join(n):"";switch(p&&f&&(t=r(E+t,E.length?h-b.length:1/0),E=""),s){case"<":t=c+t+b+E;break;case"=":t=c+E+t+b;break;case"^":t=E.slice(0,w=E.length>>1)+c+t+b+E.slice(w);break;default:t=E+c+t+b}return u(t)}t=mr(t);var n=t.fill,s=t.align,l=t.sign,c=t.symbol,f=t.zero,h=t.width,p=t.comma,d=t.precision,v=t.type,m="$"===c?i[0]:"#"===c&&/[boxX]/.test(v)?"0"+v.toLowerCase():"",y="$"===c?i[1]:/[%p]/.test(v)?a:"",g=Hv[v],_=!v||/[defgprs%]/.test(v);return d=null==d?v?6:12:/[gprs]/.test(v)?Math.max(1,Math.min(21,d)):Math.max(0,Math.min(20,d)),e.toString=function(){return t+""},e}function n(t,n){var r=e((t=mr(t),t.type="f",t)),i=3*Math.max(-8,Math.min(8,Math.floor(Lv(n)/3))),o=Math.pow(10,-i),u=$v[8+i/3];return function(t){return r(o*t)+u}}var r=t.grouping&&t.thousands?zv(t.grouping,t.thousands):Xv,i=t.currency,o=t.decimal,u=t.numerals?Bv(t.numerals):Xv,a=t.percent||"%";return{format:e,formatPrefix:n}};gr({decimal:".",thousands:",",grouping:[3],currency:["$",""]});var Zv=function(t){return Math.max(0,-Lv(Math.abs(t)))},Jv=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Lv(e)/3)))-Lv(Math.abs(t)))},Qv=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,Lv(e)-Lv(t))+1},tm=function(){return new _r};_r.prototype={constructor:_r,reset:function(){this.s=this.t=0},add:function(t){br(km,t,this.t),br(this,km.s,this.s),this.s?this.t+=km.t:this.s=km.t},valueOf:function(){return this.s}};var em,nm,rm,im,om,um,am,sm,lm,cm,fm,hm,pm,dm,vm,mm,ym,gm,_m,bm,xm,wm,Em,Mm,Fm,Cm,Sm,Am,Om,Tm,Dm,km=new _r,Nm=1e-6,jm=Math.PI,Pm=jm/2,Vm=jm/4,Rm=2*jm,Im=180/jm,Lm=jm/180,zm=Math.abs,Bm=Math.atan,qm=Math.atan2,Um=Math.cos,Km=Math.ceil,Hm=Math.exp,Wm=Math.log,Ym=Math.pow,Xm=Math.sin,$m=Math.sign||function(t){return t>0?1:t<0?-1:0},Gm=Math.sqrt,Zm=Math.tan,Jm={Feature:function(t,e){Fr(t.geometry,e)},FeatureCollection:function(t,e){for(var n=t.features,r=-1,i=n.length;++r<i;)Fr(n[r].geometry,e)}},Qm={Sphere:function(t,e){e.sphere()},Point:function(t,e){t=t.coordinates,e.point(t[0],t[1],t[2])},MultiPoint:function(t,e){for(var n=t.coordinates,r=-1,i=n.length;++r<i;)t=n[r],e.point(t[0],t[1],t[2])},LineString:function(t,e){Cr(t.coordinates,e,0)},MultiLineString:function(t,e){for(var n=t.coordinates,r=-1,i=n.length;++r<i;)Cr(n[r],e,0)},Polygon:function(t,e){Sr(t.coordinates,e)},MultiPolygon:function(t,e){for(var n=t.coordinates,r=-1,i=n.length;++r<i;)Sr(n[r],e)},GeometryCollection:function(t,e){for(var n=t.geometries,r=-1,i=n.length;++r<i;)Fr(n[r],e)}},ty=function(t,e){t&&Jm.hasOwnProperty(t.type)?Jm[t.type](t,e):Fr(t,e)},ey=tm(),ny=tm(),ry={point:Mr,lineStart:Mr,lineEnd:Mr,polygonStart:function(){ey.reset(),ry.lineStart=Ar,ry.lineEnd=Or},polygonEnd:function(){var t=+ey;ny.add(t<0?Rm+t:t),this.lineStart=this.lineEnd=this.point=Mr},sphere:function(){ny.add(Rm)}},iy=function(t){return ny.reset(),ty(t,ry),2*ny},oy=tm(),uy={point:Lr,lineStart:Br,lineEnd:qr,polygonStart:function(){uy.point=Ur,uy.lineStart=Kr,uy.lineEnd=Hr,oy.reset(),ry.polygonStart()},polygonEnd:function(){ry.polygonEnd(),uy.point=Lr,uy.lineStart=Br,uy.lineEnd=qr,ey<0?(um=-(sm=180),am=-(lm=90)):oy>Nm?lm=90:oy<-Nm&&(am=-90),vm[0]=um,vm[1]=sm}},ay=function(t){var e,n,r,i,o,u,a;if(lm=sm=-(um=am=1/0),dm=[],ty(t,uy),n=dm.length){for(dm.sort(Yr),e=1,r=dm[0],o=[r];e<n;++e)i=dm[e],Xr(r,i[0])||Xr(r,i[1])?(Wr(r[0],i[1])>Wr(r[0],r[1])&&(r[1]=i[1]),Wr(i[0],r[1])>Wr(r[0],r[1])&&(r[0]=i[0])):o.push(r=i);for(u=-1/0,n=o.length-1,e=0,r=o[n];e<=n;r=i,++e)i=o[e],(a=Wr(r[1],i[0]))>u&&(u=a,um=i[0],sm=r[1])}return dm=vm=null,um===1/0||am===1/0?[[NaN,NaN],[NaN,NaN]]:[[um,am],[sm,lm]]},sy={sphere:Mr,point:$r,lineStart:Zr,lineEnd:ti,polygonStart:function(){sy.lineStart=ei,sy.lineEnd=ni},polygonEnd:function(){sy.lineStart=Zr,sy.lineEnd=ti}},ly=function(t){mm=ym=gm=_m=bm=xm=wm=Em=Mm=Fm=Cm=0,ty(t,sy);var e=Mm,n=Fm,r=Cm,i=e*e+n*n+r*r;return i<1e-12&&(e=xm,n=wm,r=Em,ym<Nm&&(e=gm,n=_m,r=bm),(i=e*e+n*n+r*r)<1e-12)?[NaN,NaN]:[qm(n,e)*Im,wr(r/Gm(i))*Im]},cy=function(t){return function(){return t}},fy=function(t,e){function n(n,r){return n=t(n,r),e(n[0],n[1])}return t.invert&&e.invert&&(n.invert=function(n,r){return(n=e.invert(n,r))&&t.invert(n[0],n[1])}),n};oi.invert=oi;var hy,py,dy,vy,my,yy,gy,_y,by,xy,wy,Ey=function(t){function e(e){return e=t(e[0]*Lm,e[1]*Lm),e[0]*=Im,e[1]*=Im,e}return t=ui(t[0]*Lm,t[1]*Lm,t.length>2?t[2]*Lm:0),e.invert=function(e){return e=t.invert(e[0]*Lm,e[1]*Lm),e[0]*=Im,e[1]*=Im,e},e},My=function(){function t(t,e){n.push(t=r(t,e)),t[0]*=Im,t[1]*=Im}function e(){var t=i.apply(this,arguments),e=o.apply(this,arguments)*Lm,s=u.apply(this,arguments)*Lm;return n=[],r=ui(-t[0]*Lm,-t[1]*Lm,0).invert,ci(a,e,s,1),t={type:"Polygon",coordinates:[n]},n=r=null,t}var n,r,i=cy([0,0]),o=cy(90),u=cy(6),a={point:t};return e.center=function(t){return arguments.length?(i="function"==typeof t?t:cy([+t[0],+t[1]]),e):i},e.radius=function(t){return arguments.length?(o="function"==typeof t?t:cy(+t),e):o},e.precision=function(t){return arguments.length?(u="function"==typeof t?t:cy(+t),e):u},e},Fy=function(){var t,e=[];return{point:function(e,n){t.push([e,n])},lineStart:function(){e.push(t=[])},lineEnd:Mr,rejoin:function(){e.length>1&&e.push(e.pop().concat(e.shift()))},result:function(){var n=e;return e=[],t=null,n}}},Cy=function(t,e,n,r,i,o){var u,a=t[0],s=t[1],l=e[0],c=e[1],f=0,h=1,p=l-a,d=c-s;if(u=n-a,p||!(u>0)){if(u/=p,p<0){if(u<f)return;u<h&&(h=u)}else if(p>0){if(u>h)return;u>f&&(f=u)}if(u=i-a,p||!(u<0)){if(u/=p,p<0){if(u>h)return;u>f&&(f=u)}else if(p>0){if(u<f)return;u<h&&(h=u)}if(u=r-s,d||!(u>0)){if(u/=d,d<0){if(u<f)return;u<h&&(h=u)}else if(d>0){if(u>h)return;u>f&&(f=u)}if(u=o-s,d||!(u<0)){if(u/=d,d<0){if(u>h)return;u>f&&(f=u)}else if(d>0){if(u<f)return;u<h&&(h=u)}return f>0&&(t[0]=a+f*p,t[1]=s+f*d),h<1&&(e[0]=a+h*p,e[1]=s+h*d),!0}}}}},Sy=function(t,e){return zm(t[0]-e[0])<Nm&&zm(t[1]-e[1])<Nm},Ay=function(t,e,n,r,i){var o,u,a=[],s=[];if(t.forEach(function(t){if(!((e=t.length-1)<=0)){var e,n,r=t[0],u=t[e];if(Sy(r,u)){for(i.lineStart(),o=0;o<e;++o)i.point((r=t[o])[0],r[1]);return void i.lineEnd()}a.push(n=new hi(r,t,null,!0)),s.push(n.o=new hi(r,null,n,!1)),a.push(n=new hi(u,t,null,!1)),s.push(n.o=new hi(u,null,n,!0))}}),a.length){for(s.sort(e),pi(a),pi(s),o=0,u=s.length;o<u;++o)s[o].e=n=!n;for(var l,c,f=a[0];;){for(var h=f,p=!0;h.v;)if((h=h.n)===f)return;l=h.z,i.lineStart();do{if(h.v=h.o.v=!0,h.e){if(p)for(o=0,u=l.length;o<u;++o)i.point((c=l[o])[0],c[1]);else r(h.x,h.n.x,1,i);h=h.n}else{if(p)for(l=h.p.z,o=l.length-1;o>=0;--o)i.point((c=l[o])[0],c[1]);else r(h.x,h.p.x,-1,i);h=h.p}h=h.o,l=h.z,p=!p}while(!h.v);i.lineEnd()}}},Oy=1e9,Ty=-Oy,Dy=function(){var t,e,n,r=0,i=0,o=960,u=500;return n={stream:function(n){return t&&e===n?t:t=di(r,i,o,u)(e=n)},extent:function(a){return arguments.length?(r=+a[0][0],i=+a[0][1],o=+a[1][0],u=+a[1][1],t=e=null,n):[[r,i],[o,u]]}}},ky=tm(),Ny=function(t,e){var n=e[0],r=e[1],i=[Xm(n),-Um(n),0],o=0,u=0;ky.reset();for(var a=0,s=t.length;a<s;++a)if(c=(l=t[a]).length)for(var l,c,f=l[c-1],h=f[0],p=f[1]/2+Vm,d=Xm(p),v=Um(p),m=0;m<c;++m,h=g,d=b,v=x,f=y){var y=l[m],g=y[0],_=y[1]/2+Vm,b=Xm(_),x=Um(_),w=g-h,E=w>=0?1:-1,M=E*w,F=M>jm,C=d*b;if(ky.add(qm(C*E*Xm(M),v*x+C*Um(M))),o+=F?w+E*Rm:w,F^h>=n^g>=n){var S=Pr(Nr(f),Nr(y));Ir(S);var A=Pr(i,S);Ir(A);var O=(F^w>=0?-1:1)*wr(A[2]);(r>O||r===O&&(S[0]||S[1]))&&(u+=F^w>=0?1:-1)}}return(o<-Nm||o<Nm&&ky<-Nm)^1&u},jy=tm(),Py={sphere:Mr,point:Mr,lineStart:vi,lineEnd:Mr,polygonStart:Mr,polygonEnd:Mr},Vy=function(t){return jy.reset(),ty(t,Py),+jy},Ry=[null,null],Iy={type:"LineString",coordinates:Ry},Ly=function(t,e){return Ry[0]=t,Ry[1]=e,Vy(Iy)},zy={Feature:function(t,e){return _i(t.geometry,e)},FeatureCollection:function(t,e){for(var n=t.features,r=-1,i=n.length;++r<i;)if(_i(n[r].geometry,e))return!0;return!1}},By={Sphere:function(){return!0},Point:function(t,e){return bi(t.coordinates,e)},MultiPoint:function(t,e){for(var n=t.coordinates,r=-1,i=n.length;++r<i;)if(bi(n[r],e))return!0;return!1},LineString:function(t,e){return xi(t.coordinates,e)},MultiLineString:function(t,e){for(var n=t.coordinates,r=-1,i=n.length;++r<i;)if(xi(n[r],e))return!0;return!1},Polygon:function(t,e){return wi(t.coordinates,e)},MultiPolygon:function(t,e){for(var n=t.coordinates,r=-1,i=n.length;++r<i;)if(wi(n[r],e))return!0;return!1},GeometryCollection:function(t,e){for(var n=t.geometries,r=-1,i=n.length;++r<i;)if(_i(n[r],e))return!0;return!1}},qy=function(t,e){return(t&&zy.hasOwnProperty(t.type)?zy[t.type]:_i)(t,e)},Uy=function(t,e){var n=t[0]*Lm,r=t[1]*Lm,i=e[0]*Lm,o=e[1]*Lm,u=Um(r),a=Xm(r),s=Um(o),l=Xm(o),c=u*Um(n),f=u*Xm(n),h=s*Um(i),p=s*Xm(i),d=2*wr(Gm(Er(o-r)+u*s*Er(i-n))),v=Xm(d),m=d?function(t){var e=Xm(t*=d)/v,n=Xm(d-t)/v,r=n*c+e*h,i=n*f+e*p,o=n*a+e*l;return[qm(i,r)*Im,qm(o,Gm(r*r+i*i))*Im]}:function(){return[n*Im,r*Im]};return m.distance=d,m},Ky=function(t){return t},Hy=tm(),Wy=tm(),Yy={point:Mr,lineStart:Mr,lineEnd:Mr,polygonStart:function(){Yy.lineStart=Oi,Yy.lineEnd=ki},polygonEnd:function(){Yy.lineStart=Yy.lineEnd=Yy.point=Mr,Hy.add(zm(Wy)),Wy.reset()},result:function(){var t=Hy/2;return Hy.reset(),t}},Xy=1/0,$y=Xy,Gy=-Xy,Zy=Gy,Jy={point:Ni,lineStart:Mr,lineEnd:Mr,polygonStart:Mr,polygonEnd:Mr,result:function(){var t=[[Xy,$y],[Gy,Zy]];return Gy=Zy=-($y=Xy=1/0),t}},Qy=0,tg=0,eg=0,ng=0,rg=0,ig=0,og=0,ug=0,ag=0,sg={point:ji,lineStart:Pi,lineEnd:Ii,polygonStart:function(){sg.lineStart=Li,sg.lineEnd=zi},polygonEnd:function(){sg.point=ji,sg.lineStart=Pi,sg.lineEnd=Ii},result:function(){var t=ag?[og/ag,ug/ag]:ig?[ng/ig,rg/ig]:eg?[Qy/eg,tg/eg]:[NaN,NaN];return Qy=tg=eg=ng=rg=ig=og=ug=ag=0,t}};Ui.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,e){switch(this._point){case 0:this._context.moveTo(t,e),this._point=1;break;case 1:this._context.lineTo(t,e);break;default:this._context.moveTo(t+this._radius,e),this._context.arc(t,e,this._radius,0,Rm)}},result:Mr};var lg,cg,fg,hg,pg,dg=tm(),vg={point:Mr,lineStart:function(){vg.point=Ki},lineEnd:function(){lg&&Hi(cg,fg),vg.point=Mr},polygonStart:function(){lg=!0},polygonEnd:function(){lg=null},result:function(){var t=+dg;return dg.reset(),t}};Wi.prototype={_radius:4.5,_circle:Yi(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,e){switch(this._point){case 0:this._string.push("M",t,",",e),this._point=1;break;case 1:this._string.push("L",t,",",e);break;default:null==this._circle&&(this._circle=Yi(this._radius)),this._string.push("M",t,",",e,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};var mg=function(t,e){function n(t){return t&&("function"==typeof o&&i.pointRadius(+o.apply(this,arguments)),ty(t,r(i))),i.result()}var r,i,o=4.5;return n.area=function(t){return ty(t,r(Yy)),Yy.result()},n.measure=function(t){return ty(t,r(vg)),vg.result()},n.bounds=function(t){return ty(t,r(Jy)),Jy.result()},n.centroid=function(t){return ty(t,r(sg)),sg.result()},n.projection=function(e){return arguments.length?(r=null==e?(t=null,Ky):(t=e).stream,n):t},n.context=function(t){return arguments.length?(i=null==t?(e=null,new Wi):new Ui(e=t),"function"!=typeof o&&i.pointRadius(o),n):e},n.pointRadius=function(t){return arguments.length?(o="function"==typeof t?t:(i.pointRadius(+t),+t),n):o},n.projection(t).context(e)},yg=function(t,e,n,r){return function(i,o){function u(e,n){var r=i(e,n);t(e=r[0],n=r[1])&&o.point(e,n)}function a(t,e){var n=i(t,e);m.point(n[0],n[1])}function s(){x.point=a,m.lineStart()}function l(){x.point=u,m.lineEnd()}function c(t,e){v.push([t,e]);var n=i(t,e);_.point(n[0],n[1])}function f(){_.lineStart(),v=[]}function h(){c(v[0][0],v[0][1]),_.lineEnd();var t,e,n,r,i=_.clean(),u=g.result(),a=u.length;if(v.pop(),p.push(v),v=null,a)if(1&i){if(n=u[0],(e=n.length-1)>0){for(b||(o.polygonStart(),b=!0),o.lineStart(),t=0;t<e;++t)o.point((r=n[t])[0],r[1]);o.lineEnd()}}else a>1&&2&i&&u.push(u.pop().concat(u.shift())),d.push(u.filter(Xi))}var p,d,v,m=e(o),y=i.invert(r[0],r[1]),g=Fy(),_=e(g),b=!1,x={point:u,lineStart:s,lineEnd:l,polygonStart:function(){x.point=c,x.lineStart=f,x.lineEnd=h,d=[],p=[]},polygonEnd:function(){x.point=u,x.lineStart=s,x.lineEnd=l,d=Ac(d);var t=Ny(p,y);d.length?(b||(o.polygonStart(),b=!0),Ay(d,$i,t,n,o)):t&&(b||(o.polygonStart(),b=!0),o.lineStart(),n(null,null,1,o),o.lineEnd()),b&&(o.polygonEnd(),b=!1),d=p=null},sphere:function(){o.polygonStart(),o.lineStart(),n(null,null,1,o),o.lineEnd(),o.polygonEnd()}};return x}},gg=yg(function(){return!0},Gi,Ji,[-jm,-Pm]),_g=function(t,e){function n(n,r,i,o){ci(o,t,e,i,n,r)}function r(t,e){return Um(t)*Um(e)>a}function i(t){var e,n,i,a,c;return{lineStart:function(){a=i=!1,c=1},point:function(f,h){var p,d=[f,h],v=r(f,h),m=s?v?0:u(f,h):v?u(f+(f<0?jm:-jm),h):0;if(!e&&(a=i=v)&&t.lineStart(),v!==i&&(!(p=o(e,d))||Sy(e,p)||Sy(d,p))&&(d[0]+=Nm,d[1]+=Nm,v=r(d[0],d[1])),v!==i)c=0,v?(t.lineStart(),p=o(d,e),t.point(p[0],p[1])):(p=o(e,d),t.point(p[0],p[1]),t.lineEnd()),e=p;else if(l&&e&&s^v){var y;m&n||!(y=o(d,e,!0))||(c=0,s?(t.lineStart(),t.point(y[0][0],y[0][1]),t.point(y[1][0],y[1][1]),t.lineEnd()):(t.point(y[1][0],y[1][1]),t.lineEnd(),t.lineStart(),t.point(y[0][0],y[0][1])))}!v||e&&Sy(e,d)||t.point(d[0],d[1]),e=d,i=v,n=m},lineEnd:function(){i&&t.lineEnd(),e=null},clean:function(){return c|(a&&i)<<1}}}function o(t,e,n){var r=Nr(t),i=Nr(e),o=[1,0,0],u=Pr(r,i),s=jr(u,u),l=u[0],c=s-l*l;if(!c)return!n&&t;var f=a*s/c,h=-a*l/c,p=Pr(o,u),d=Rr(o,f);Vr(d,Rr(u,h));var v=p,m=jr(d,v),y=jr(v,v),g=m*m-y*(jr(d,d)-1);if(!(g<0)){var _=Gm(g),b=Rr(v,(-m-_)/y);if(Vr(b,d),b=kr(b),!n)return b;var x,w=t[0],E=e[0],M=t[1],F=e[1];E<w&&(x=w,w=E,E=x);var C=E-w,S=zm(C-jm)<Nm,A=S||C<Nm;if(!S&&F<M&&(x=M,M=F,F=x),A?S?M+F>0^b[1]<(zm(b[0]-w)<Nm?M:F):M<=b[1]&&b[1]<=F:C>jm^(w<=b[0]&&b[0]<=E)){var O=Rr(v,(-m+_)/y);return Vr(O,d),[b,kr(O)]}}}function u(e,n){var r=s?t:jm-t,i=0;return e<-r?i|=1:e>r&&(i|=2),n<-r?i|=4:n>r&&(i|=8),i}var a=Um(t),s=a>0,l=zm(a)>Nm;return yg(r,i,n,s?[0,-t]:[-jm,t-jm])},bg=function(t){return{stream:Qi(t)}};to.prototype={constructor:to,point:function(t,e){this.stream.point(t,e)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var xg=16,wg=Um(30*Lm),Eg=function(t,e){return+e?io(t,e):ro(t)},Mg=Qi({point:function(t,e){this.stream.point(t*Lm,e*Lm)}}),Fg=function(){return ao(lo).scale(155.424).center([0,33.6442])},Cg=function(){return Fg().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])},Sg=function(){function t(t){var e=t[0],n=t[1];return a=null,i.point(e,n),a||(o.point(e,n),a)||(u.point(e,n),a)}function e(){return n=r=null,t}var n,r,i,o,u,a,s=Cg(),l=Fg().rotate([154,0]).center([-2,58.5]).parallels([55,65]),c=Fg().rotate([157,0]).center([-3,19.9]).parallels([8,18]),f={point:function(t,e){a=[t,e]}};return t.invert=function(t){var e=s.scale(),n=s.translate(),r=(t[0]-n[0])/e,i=(t[1]-n[1])/e;return(i>=.12&&i<.234&&r>=-.425&&r<-.214?l:i>=.166&&i<.234&&r>=-.214&&r<-.115?c:s).invert(t)},t.stream=function(t){return n&&r===t?n:n=co([s.stream(r=t),l.stream(t),c.stream(t)])},t.precision=function(t){return arguments.length?(s.precision(t),l.precision(t),c.precision(t),e()):s.precision()},t.scale=function(e){return arguments.length?(s.scale(e),l.scale(.35*e),c.scale(e),t.translate(s.translate())):s.scale()},t.translate=function(t){if(!arguments.length)return s.translate();var n=s.scale(),r=+t[0],a=+t[1];return i=s.translate(t).clipExtent([[r-.455*n,a-.238*n],[r+.455*n,a+.238*n]]).stream(f),o=l.translate([r-.307*n,a+.201*n]).clipExtent([[r-.425*n+Nm,a+.12*n+Nm],[r-.214*n-Nm,a+.234*n-Nm]]).stream(f),u=c.translate([r-.205*n,a+.212*n]).clipExtent([[r-.214*n+Nm,a+.166*n+Nm],[r-.115*n-Nm,a+.234*n-Nm]]).stream(f),e()},t.fitExtent=function(e,n){return eo(t,e,n)},t.fitSize=function(e,n){return no(t,e,n)},t.scale(1070)},Ag=fo(function(t){return Gm(2/(1+t))});Ag.invert=ho(function(t){return 2*wr(t/2)});var Og=function(){return oo(Ag).scale(124.75).clipAngle(179.999)},Tg=fo(function(t){return(t=xr(t))&&t/Xm(t)});Tg.invert=ho(function(t){return t});var Dg=function(){return oo(Tg).scale(79.4188).clipAngle(179.999)};po.invert=function(t,e){return[t,2*Bm(Hm(e))-Pm]};var kg=function(){return vo(po).scale(961/Rm)},Ng=function(){return ao(yo).scale(109.5).parallels([30,30])};go.invert=go;var jg=function(){return oo(go).scale(152.63)},Pg=function(){return ao(_o).scale(131.154).center([0,13.9389])};bo.invert=ho(Bm);var Vg=function(){return oo(bo).scale(144.049).clipAngle(60)},Rg=function(){function t(){return i=o=null,u}var e,n,r,i,o,u,a=1,s=0,l=0,c=1,f=1,h=Ky,p=null,d=Ky;return u={stream:function(t){return i&&o===t?i:i=h(d(o=t))},clipExtent:function(i){return arguments.length?(d=null==i?(p=e=n=r=null,Ky):di(p=+i[0][0],e=+i[0][1],n=+i[1][0],r=+i[1][1]),t()):null==p?null:[[p,e],[n,r]]},scale:function(e){return arguments.length?(h=xo((a=+e)*c,a*f,s,l),t()):a},translate:function(e){return arguments.length?(h=xo(a*c,a*f,s=+e[0],l=+e[1]),t()):[s,l]},reflectX:function(e){return arguments.length?(h=xo(a*(c=e?-1:1),a*f,s,l),t()):c<0},reflectY:function(e){return arguments.length?(h=xo(a*c,a*(f=e?-1:1),s,l),t()):f<0},fitExtent:function(t,e){return eo(u,t,e)},fitSize:function(t,e){return no(u,t,e)}}};wo.invert=ho(wr);var Ig=function(){return oo(wo).scale(249.5).clipAngle(90+Nm)};Eo.invert=ho(function(t){return 2*Bm(t)});var Lg=function(){return oo(Eo).scale(250).clipAngle(142)};Mo.invert=function(t,e){return[-e,2*Bm(Hm(t))-Pm]};var zg=function(){var t=vo(Mo),e=t.center,n=t.rotate;return t.center=function(t){return arguments.length?e([-t[1],t[0]]):(t=e(),[t[1],-t[0]])},t.rotate=function(t){return arguments.length?n([t[0],t[1],t.length>2?t[2]+90:90]):(t=n(),[t[0],t[1],t[2]-90])},n([0,0,90]).scale(159.155)},Bg=function(){function t(t){var o,u=0;t.eachAfter(function(t){var n=t.children;n?(t.x=Co(n),t.y=Ao(n)):(t.x=o?u+=e(t,o):0,t.y=0,o=t)});var a=To(t),s=Do(t),l=a.x-e(a,s)/2,c=s.x+e(s,a)/2;return t.eachAfter(i?function(e){e.x=(e.x-t.x)*n,e.y=(t.y-e.y)*r}:function(e){e.x=(e.x-l)/(c-l)*n,e.y=(1-(t.y?e.y/t.y:1))*r})}var e=Fo,n=1,r=1,i=!1;return t.separation=function(n){return arguments.length?(e=n,t):e},t.size=function(e){return arguments.length?(i=!1,n=+e[0],r=+e[1],t):i?null:[n,r]},t.nodeSize=function(e){return arguments.length?(i=!0,n=+e[0],r=+e[1],t):i?[n,r]:null},t},qg=function(){return this.eachAfter(ko)},Ug=function(t){var e,n,r,i,o=this,u=[o];do{for(e=u.reverse(),u=[];o=e.pop();)if(t(o),n=o.children)for(r=0,i=n.length;r<i;++r)u.push(n[r])}while(u.length);return this},Kg=function(t){for(var e,n,r=this,i=[r];r=i.pop();)if(t(r),e=r.children)for(n=e.length-1;n>=0;--n)i.push(e[n]);return this},Hg=function(t){for(var e,n,r,i=this,o=[i],u=[];i=o.pop();)if(u.push(i),e=i.children)for(n=0,r=e.length;n<r;++n)o.push(e[n]);for(;i=u.pop();)t(i);return this},Wg=function(t){return this.eachAfter(function(e){for(var n=+t(e.data)||0,r=e.children,i=r&&r.length;--i>=0;)n+=r[i].value;e.value=n})},Yg=function(t){return this.eachBefore(function(e){e.children&&e.children.sort(t)})},Xg=function(t){for(var e=this,n=No(e,t),r=[e];e!==n;)e=e.parent,r.push(e);for(var i=r.length;t!==n;)r.splice(i,0,t),t=t.parent;return r},$g=function(){for(var t=this,e=[t];t=t.parent;)e.push(t);return e},Gg=function(){var t=[];return this.each(function(e){t.push(e)}),t},Zg=function(){var t=[];return this.eachBefore(function(e){e.children||t.push(e)}),t},Jg=function(){var t=this,e=[];return t.each(function(n){n!==t&&e.push({source:n.parent,target:n})}),e};Lo.prototype=jo.prototype={constructor:Lo,count:qg,each:Ug,eachAfter:Hg,eachBefore:Kg,sum:Wg,sort:Yg,path:Xg,ancestors:$g,descendants:Gg,leaves:Zg,links:Jg,copy:Po};var Qg=Array.prototype.slice,t_=function(t){for(var e,n,r=0,i=(t=zo(Qg.call(t))).length,o=[];r<i;)e=t[r],n&&Uo(n,e)?++r:(n=Ho(o=Bo(o,e)),r=0);return n},e_=function(t){return Qo(t),t},n_=function(t){return function(){return t}},r_=function(){function t(t){return t.x=n/2,t.y=r/2,e?t.eachBefore(iu(e)).eachAfter(ou(i,.5)).eachBefore(uu(1)):t.eachBefore(iu(ru)).eachAfter(ou(nu,1)).eachAfter(ou(i,t.r/Math.min(n,r))).eachBefore(uu(Math.min(n,r)/(2*t.r))),t}var e=null,n=1,r=1,i=nu;return t.radius=function(n){return arguments.length?(e=tu(n),t):e},t.size=function(e){return arguments.length?(n=+e[0],r=+e[1],t):[n,r]},t.padding=function(e){return arguments.length?(i="function"==typeof e?e:n_(+e),t):i},t},i_=function(t){t.x0=Math.round(t.x0),t.y0=Math.round(t.y0),t.x1=Math.round(t.x1),t.y1=Math.round(t.y1)},o_=function(t,e,n,r,i){for(var o,u=t.children,a=-1,s=u.length,l=t.value&&(r-e)/t.value;++a<s;)o=u[a],o.y0=n,o.y1=i,o.x0=e,o.x1=e+=o.value*l},u_=function(){function t(t){var u=t.height+1;return t.x0=t.y0=i,t.x1=n,t.y1=r/u,t.eachBefore(e(r,u)),o&&t.eachBefore(i_),t}function e(t,e){return function(n){n.children&&o_(n,n.x0,t*(n.depth+1)/e,n.x1,t*(n.depth+2)/e);var r=n.x0,o=n.y0,u=n.x1-i,a=n.y1-i;u<r&&(r=u=(r+u)/2),a<o&&(o=a=(o+a)/2),n.x0=r,n.y0=o,n.x1=u,n.y1=a}}var n=1,r=1,i=0,o=!1;return t.round=function(e){return arguments.length?(o=!!e,t):o},t.size=function(e){return arguments.length?(n=+e[0],r=+e[1],t):[n,r]},t.padding=function(e){return arguments.length?(i=+e,t):i},t},a_="$",s_={depth:-1},l_={},c_=function(){function t(t){var r,i,o,u,a,s,l,c=t.length,f=new Array(c),h={};for(i=0;i<c;++i)r=t[i],a=f[i]=new Lo(r),null!=(s=e(r,i,t))&&(s+="")&&(l=a_+(a.id=s),h[l]=l in h?l_:a);for(i=0;i<c;++i)if(a=f[i],null!=(s=n(t[i],i,t))&&(s+="")){if(!(u=h[a_+s]))throw new Error("missing: "+s);if(u===l_)throw new Error("ambiguous: "+s);u.children?u.children.push(a):u.children=[a],a.parent=u}else{if(o)throw new Error("multiple roots");o=a}if(!o)throw new Error("no root");if(o.parent=s_,o.eachBefore(function(t){t.depth=t.parent.depth+1,--c}).eachBefore(Io),o.parent=null,c>0)throw new Error("cycle");return o}var e=au,n=su;return t.id=function(n){return arguments.length?(e=eu(n),t):e},t.parentId=function(e){return arguments.length?(n=eu(e),t):n},t};vu.prototype=Object.create(Lo.prototype);var f_=function(){function t(t){var r=mu(t);if(r.eachAfter(e),r.parent.m=-r.z,r.eachBefore(n),s)t.eachBefore(i);else{var l=t,c=t,f=t;t.eachBefore(function(t){t.x<l.x&&(l=t),t.x>c.x&&(c=t),t.depth>f.depth&&(f=t)});var h=l===c?1:o(l,c)/2,p=h-l.x,d=u/(c.x+h+p),v=a/(f.depth||1);t.eachBefore(function(t){t.x=(t.x+p)*d,t.y=t.depth*v})}return t}function e(t){var e=t.children,n=t.parent.children,i=t.i?n[t.i-1]:null;if(e){pu(t);var u=(e[0].z+e[e.length-1].z)/2;i?(t.z=i.z+o(t._,i._),t.m=t.z-u):t.z=u}else i&&(t.z=i.z+o(t._,i._));t.parent.A=r(t,i,t.parent.A||n[0])}function n(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function r(t,e,n){if(e){for(var r,i=t,u=t,a=e,s=i.parent.children[0],l=i.m,c=u.m,f=a.m,h=s.m;a=fu(a),i=cu(i),a&&i;)s=cu(s),u=fu(u),u.a=t,r=a.z+f-i.z-l+o(a._,i._),r>0&&(hu(du(a,t,n),t,r),l+=r,c+=r),f+=a.m,l+=i.m,h+=s.m,c+=u.m;a&&!fu(u)&&(u.t=a,u.m+=f-c),i&&!cu(s)&&(s.t=i,s.m+=l-h,n=t)}return n}function i(t){t.x*=u,t.y=t.depth*a}var o=lu,u=1,a=1,s=null;return t.separation=function(e){return arguments.length?(o=e,t):o},t.size=function(e){return arguments.length?(s=!1,u=+e[0],a=+e[1],t):s?null:[u,a]},t.nodeSize=function(e){return arguments.length?(s=!0,u=+e[0],a=+e[1],t):s?[u,a]:null},t},h_=function(t,e,n,r,i){for(var o,u=t.children,a=-1,s=u.length,l=t.value&&(i-n)/t.value;++a<s;)o=u[a],o.x0=e,o.x1=r,o.y0=n,o.y1=n+=o.value*l},p_=(1+Math.sqrt(5))/2,d_=function t(e){function n(t,n,r,i,o){yu(e,t,n,r,i,o)}return n.ratio=function(e){return t((e=+e)>1?e:1)},n}(p_),v_=function(){function t(t){return t.x0=t.y0=0,t.x1=i,t.y1=o,t.eachBefore(e),u=[0],r&&t.eachBefore(i_),t}function e(t){var e=u[t.depth],r=t.x0+e,i=t.y0+e,o=t.x1-e,h=t.y1-e;o<r&&(r=o=(r+o)/2),h<i&&(i=h=(i+h)/2),t.x0=r,t.y0=i,t.x1=o,t.y1=h,t.children&&(e=u[t.depth+1]=a(t)/2,r+=f(t)-e,i+=s(t)-e,o-=l(t)-e,h-=c(t)-e,o<r&&(r=o=(r+o)/2),h<i&&(i=h=(i+h)/2),n(t,r,i,o,h))}var n=d_,r=!1,i=1,o=1,u=[0],a=nu,s=nu,l=nu,c=nu,f=nu;return t.round=function(e){return arguments.length?(r=!!e,t):r},t.size=function(e){return arguments.length?(i=+e[0],o=+e[1],t):[i,o]},t.tile=function(e){return arguments.length?(n=eu(e),t):n},t.padding=function(e){return arguments.length?t.paddingInner(e).paddingOuter(e):t.paddingInner()},t.paddingInner=function(e){return arguments.length?(a="function"==typeof e?e:n_(+e),t):a},t.paddingOuter=function(e){return arguments.length?t.paddingTop(e).paddingRight(e).paddingBottom(e).paddingLeft(e):t.paddingTop()},t.paddingTop=function(e){return arguments.length?(s="function"==typeof e?e:n_(+e),t):s},t.paddingRight=function(e){return arguments.length?(l="function"==typeof e?e:n_(+e),t):l},t.paddingBottom=function(e){return arguments.length?(c="function"==typeof e?e:n_(+e),t):c},t.paddingLeft=function(e){return arguments.length?(f="function"==typeof e?e:n_(+e),t):f},t},m_=function(t,e,n,r,i){function o(t,e,n,r,i,u,a){if(t>=e-1){var l=s[t];return l.x0=r,l.y0=i,l.x1=u,l.y1=a,void 0}for(var f=c[t],h=n/2+f,p=t+1,d=e-1;p<d;){var v=p+d>>>1;c[v]<h?p=v+1:d=v}h-c[p-1]<c[p]-h&&t+1<p&&--p;var m=c[p]-f,y=n-m;if(u-r>a-i){var g=(r*y+u*m)/n;o(t,p,m,r,i,g,a),o(p,e,y,g,i,u,a)}else{var _=(i*y+a*m)/n;o(t,p,m,r,i,u,_),o(p,e,y,r,_,u,a)}}var u,a,s=t.children,l=s.length,c=new Array(l+1);for(c[0]=a=u=0;u<l;++u)c[u+1]=a+=s[u].value;o(0,l,t.value,e,n,r,i)},y_=function(t,e,n,r,i){(1&t.depth?h_:o_)(t,e,n,r,i)},g_=function t(e){function n(t,n,r,i,o){if((u=t._squarify)&&u.ratio===e)for(var u,a,s,l,c,f=-1,h=u.length,p=t.value;++f<h;){for(a=u[f],s=a.children,l=a.value=0,c=s.length;l<c;++l)a.value+=s[l].value;a.dice?o_(a,n,r,i,r+=(o-r)*a.value/p):h_(a,n,r,n+=(i-n)*a.value/p,o),p-=a.value}else t._squarify=u=yu(e,t,n,r,i,o),u.ratio=e}return n.ratio=function(e){return t((e=+e)>1?e:1)},n}(p_),__=function(t){for(var e,n=-1,r=t.length,i=t[r-1],o=0;++n<r;)e=i,i=t[n],o+=e[1]*i[0]-e[0]*i[1];return o/2},b_=function(t){for(var e,n,r=-1,i=t.length,o=0,u=0,a=t[i-1],s=0;++r<i;)e=a,a=t[r],s+=n=e[0]*a[1]-a[0]*e[1],o+=(e[0]+a[0])*n,u+=(e[1]+a[1])*n;return s*=3,[o/s,u/s]},x_=function(t,e,n){return(e[0]-t[0])*(n[1]-t[1])-(e[1]-t[1])*(n[0]-t[0])},w_=function(t){if((n=t.length)<3)return null;var e,n,r=new Array(n),i=new Array(n);for(e=0;e<n;++e)r[e]=[+t[e][0],+t[e][1],e];for(r.sort(gu),e=0;e<n;++e)i[e]=[r[e][0],-r[e][1]];var o=_u(r),u=_u(i),a=u[0]===o[0],s=u[u.length-1]===o[o.length-1],l=[];for(e=o.length-1;e>=0;--e)l.push(t[r[o[e]][2]]);for(e=+a;e<u.length-s;++e)l.push(t[r[u[e]][2]]);return l},E_=function(t,e){for(var n,r,i=t.length,o=t[i-1],u=e[0],a=e[1],s=o[0],l=o[1],c=!1,f=0;f<i;++f)o=t[f],n=o[0],r=o[1],r>a!=l>a&&u<(s-n)*(a-r)/(l-r)+n&&(c=!c),s=n,l=r;return c},M_=function(t){for(var e,n,r=-1,i=t.length,o=t[i-1],u=o[0],a=o[1],s=0;++r<i;)e=u,n=a,o=t[r],u=o[0],a=o[1],e-=u,n-=a,s+=Math.sqrt(e*e+n*n);return s},F_=[].slice,C_={};bu.prototype=Cu.prototype={constructor:bu,defer:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("defer after await");if(null!=this._error)return this;var e=F_.call(arguments,1);return e.push(t),++this._waiting,this._tasks.push(e),xu(this),this},abort:function(){return null==this._error&&Mu(this,new Error("abort")),this},await:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("multiple await");return this._call=function(e,n){t.apply(null,[e].concat(n))},Fu(this),this},awaitAll:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("multiple await");return this._call=t,Fu(this),this}};var S_=function(){return Math.random()},A_=function t(e){function n(t,n){return t=null==t?0:+t,n=null==n?1:+n,1===arguments.length?(n=t,t=0):n-=t,function(){return e()*n+t}}return n.source=t,n}(S_),O_=function t(e){function n(t,n){var r,i;return t=null==t?0:+t,n=null==n?1:+n,function(){var o;if(null!=r)o=r,r=null;else do{r=2*e()-1,o=2*e()-1,i=r*r+o*o}while(!i||i>1);return t+n*o*Math.sqrt(-2*Math.log(i)/i)}}return n.source=t,n}(S_),T_=function t(e){function n(){var t=O_.source(e).apply(this,arguments);return function(){return Math.exp(t())}}return n.source=t,n}(S_),D_=function t(e){function n(t){return function(){for(var n=0,r=0;r<t;++r)n+=e();return n}}return n.source=t,n}(S_),k_=function t(e){function n(t){var n=D_.source(e)(t);return function(){return n()/t}}return n.source=t,n}(S_),N_=function t(e){function n(t){return function(){return-Math.log(1-e())/t}}return n.source=t,n}(S_),j_=function(t,e){function n(t){var e,n=l.status;if(!n&&Au(l)||n>=200&&n<300||304===n){if(o)try{e=o.call(r,l)}catch(t){return void a.call("error",r,t)}else e=l;a.call("load",r,e)}else a.call("error",r,t)}var r,i,o,u,a=y("beforesend","progress","load","error"),s=Wn(),l=new XMLHttpRequest,c=null,f=null,h=0;if("undefined"==typeof XDomainRequest||"withCredentials"in l||!/^(http(s)?:)?\/\//.test(t)||(l=new XDomainRequest),"onload"in l?l.onload=l.onerror=l.ontimeout=n:l.onreadystatechange=function(t){l.readyState>3&&n(t)},l.onprogress=function(t){a.call("progress",r,t)},r={header:function(t,e){return t=(t+"").toLowerCase(),arguments.length<2?s.get(t):(null==e?s.remove(t):s.set(t,e+""),r)},mimeType:function(t){return arguments.length?(i=null==t?null:t+"",r):i},responseType:function(t){return arguments.length?(u=t,r):u},timeout:function(t){return arguments.length?(h=+t,r):h},user:function(t){return arguments.length<1?c:(c=null==t?null:t+"",r)},password:function(t){return arguments.length<1?f:(f=null==t?null:t+"",r)},response:function(t){return o=t,r},get:function(t,e){return r.send("GET",t,e)},post:function(t,e){return r.send("POST",t,e)},send:function(e,n,o){return l.open(e,t,!0,c,f),null==i||s.has("accept")||s.set("accept",i+",*/*"),l.setRequestHeader&&s.each(function(t,e){l.setRequestHeader(e,t)}),null!=i&&l.overrideMimeType&&l.overrideMimeType(i),null!=u&&(l.responseType=u),h>0&&(l.timeout=h),null==o&&"function"==typeof n&&(o=n,n=null),null!=o&&1===o.length&&(o=Su(o)),null!=o&&r.on("error",o).on("load",function(t){o(null,t)}),a.call("beforesend",r,l),l.send(null==n?null:n),r},abort:function(){return l.abort(),r},on:function(){var t=a.on.apply(a,arguments);return t===a?r:t}},null!=e){if("function"!=typeof e)throw new Error("invalid callback: "+e);return r.get(e)}return r},P_=function(t,e){return function(n,r){var i=j_(n).mimeType(t).response(e);if(null!=r){if("function"!=typeof r)throw new Error("invalid callback: "+r);return i.get(r)}return i}},V_=P_("text/html",function(t){return document.createRange().createContextualFragment(t.responseText)}),R_=P_("application/json",function(t){return JSON.parse(t.responseText)}),I_=P_("text/plain",function(t){return t.responseText}),L_=P_("application/xml",function(t){var e=t.responseXML;if(!e)throw new Error("parse error");return e}),z_=function(t,e){return function(n,r,i){arguments.length<3&&(i=r,r=null);var o=j_(n).mimeType(t);return o.row=function(t){return arguments.length?o.response(Ou(e,r=t)):r},o.row(r),i?o.get(i):o}},B_=z_("text/csv",rv),q_=z_("text/tab-separated-values",sv),U_=Array.prototype,K_=U_.map,H_=U_.slice,W_={name:"implicit"},Y_=function(t){return function(){return t}},X_=function(t){return+t},$_=[0,1],G_=function(e,n,r){var o,u=e[0],a=e[e.length-1],s=i(u,a,null==n?10:n);switch(r=mr(null==r?",f":r),r.type){case"s":var l=Math.max(Math.abs(u),Math.abs(a));return null!=r.precision||isNaN(o=Jv(s,l))||(r.precision=o),t.formatPrefix(r,l);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(o=Qv(s,Math.max(Math.abs(u),Math.abs(a))))||(r.precision=o-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(o=Zv(s))||(r.precision=o-2*("%"===r.type))}return t.format(r)},Z_=function(t,e){t=t.slice();var n,r=0,i=t.length-1,o=t[r],u=t[i];return u<o&&(n=r,r=i,i=n,n=o,o=u,u=n),t[r]=e.floor(o),t[i]=e.ceil(u),t},J_=new Date,Q_=new Date,tb=ra(function(){},function(t,e){t.setTime(+t+e)},function(t,e){return e-t});tb.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?ra(function(e){e.setTime(Math.floor(e/t)*t)},function(e,n){e.setTime(+e+n*t)},function(e,n){return(n-e)/t}):tb:null};var eb=tb.range,nb=6e4,rb=6048e5,ib=ra(function(t){t.setTime(1e3*Math.floor(t/1e3))},function(t,e){t.setTime(+t+1e3*e)},function(t,e){return(e-t)/1e3},function(t){return t.getUTCSeconds()}),ob=ib.range,ub=ra(function(t){t.setTime(Math.floor(t/nb)*nb)},function(t,e){t.setTime(+t+e*nb)},function(t,e){return(e-t)/nb},function(t){return t.getMinutes()}),ab=ub.range,sb=ra(function(t){var e=t.getTimezoneOffset()*nb%36e5;e<0&&(e+=36e5),t.setTime(36e5*Math.floor((+t-e)/36e5)+e)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getHours()}),lb=sb.range,cb=ra(function(t){t.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*nb)/864e5},function(t){return t.getDate()-1}),fb=cb.range,hb=ia(0),pb=ia(1),db=ia(2),vb=ia(3),mb=ia(4),yb=ia(5),gb=ia(6),_b=hb.range,bb=pb.range,xb=db.range,wb=vb.range,Eb=mb.range,Mb=yb.range,Fb=gb.range,Cb=ra(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,e){t.setMonth(t.getMonth()+e)},function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())},function(t){return t.getMonth()}),Sb=Cb.range,Ab=ra(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,e){t.setFullYear(t.getFullYear()+e)},function(t,e){return e.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()});Ab.every=function(t){return isFinite(t=Math.floor(t))&&t>0?ra(function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)},function(e,n){e.setFullYear(e.getFullYear()+n*t)}):null};var Ob=Ab.range,Tb=ra(function(t){t.setUTCSeconds(0,0)},function(t,e){t.setTime(+t+e*nb)},function(t,e){return(e-t)/nb},function(t){return t.getUTCMinutes()}),Db=Tb.range,kb=ra(function(t){t.setUTCMinutes(0,0,0)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getUTCHours()}),Nb=kb.range,jb=ra(function(t){t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+e)},function(t,e){return(e-t)/864e5},function(t){return t.getUTCDate()-1}),Pb=jb.range,Vb=oa(0),Rb=oa(1),Ib=oa(2),Lb=oa(3),zb=oa(4),Bb=oa(5),qb=oa(6),Ub=Vb.range,Kb=Rb.range,Hb=Ib.range,Wb=Lb.range,Yb=zb.range,Xb=Bb.range,$b=qb.range,Gb=ra(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCMonth(t.getUTCMonth()+e)},function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()}),Zb=Gb.range,Jb=ra(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)},function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()});Jb.every=function(t){return isFinite(t=Math.floor(t))&&t>0?ra(function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)},function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)}):null};var Qb,tx=Jb.range,ex={"-":"",_:" ",0:"0"},nx=/^\s*\d+/,rx=/^%/,ix=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;rs({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var ox=Date.prototype.toISOString?is:t.utcFormat("%Y-%m-%dT%H:%M:%S.%LZ"),ux=+new Date("2000-01-01T00:00:00.000Z")?os:t.utcParse("%Y-%m-%dT%H:%M:%S.%LZ"),ax=1e3,sx=60*ax,lx=60*sx,cx=24*lx,fx=7*cx,hx=30*cx,px=365*cx,dx=function(){return ss(Ab,Cb,hb,cb,sb,ub,ib,tb,t.timeFormat).domain([new Date(2e3,0,1),new Date(2e3,0,2)])},vx=function(){return ss(Jb,Gb,Vb,jb,kb,Tb,ib,tb,t.utcFormat).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)])},mx=function(t){return t.match(/.{6}/g).map(function(t){return"#"+t})},yx=mx("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),gx=mx("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6"),_x=mx("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9"),bx=mx("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5"),xx=rp(Zt(300,.5,0),Zt(-240,.5,1)),wx=rp(Zt(-100,.75,.35),Zt(80,1.5,.8)),Ex=rp(Zt(260,.75,.35),Zt(80,1.5,.8)),Mx=Zt(),Fx=function(t){(t<0||t>1)&&(t-=Math.floor(t));var e=Math.abs(t-.5);return Mx.h=360*t-100,Mx.s=1.5-1.5*e,Mx.l=.8-.9*e,Mx+""},Cx=ls(mx("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),Sx=ls(mx("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),Ax=ls(mx("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),Ox=ls(mx("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921")),Tx=function(t){return function(){return t}},Dx=Math.abs,kx=Math.atan2,Nx=Math.cos,jx=Math.max,Px=Math.min,Vx=Math.sin,Rx=Math.sqrt,Ix=1e-12,Lx=Math.PI,zx=Lx/2,Bx=2*Lx,qx=function(){function t(){var t,l,c=+e.apply(this,arguments),f=+n.apply(this,arguments),h=o.apply(this,arguments)-zx,p=u.apply(this,arguments)-zx,d=Dx(p-h),v=p>h;if(s||(s=t=Ln()),f<c&&(l=f,f=c,c=l),f>Ix)if(d>Bx-Ix)s.moveTo(f*Nx(h),f*Vx(h)),s.arc(0,0,f,h,p,!v),c>Ix&&(s.moveTo(c*Nx(p),c*Vx(p)),s.arc(0,0,c,p,h,v));else{var m,y,g=h,_=p,b=h,x=p,w=d,E=d,M=a.apply(this,arguments)/2,F=M>Ix&&(i?+i.apply(this,arguments):Rx(c*c+f*f)),C=Px(Dx(f-c)/2,+r.apply(this,arguments)),S=C,A=C;if(F>Ix){var O=hs(F/c*Vx(M)),T=hs(F/f*Vx(M));(w-=2*O)>Ix?(O*=v?1:-1,b+=O,x-=O):(w=0,b=x=(h+p)/2),(E-=2*T)>Ix?(T*=v?1:-1,g+=T,_-=T):(E=0,g=_=(h+p)/2)}var D=f*Nx(g),k=f*Vx(g),N=c*Nx(x),j=c*Vx(x);if(C>Ix){var P=f*Nx(_),V=f*Vx(_),R=c*Nx(b),I=c*Vx(b);if(d<Lx){var L=w>Ix?gs(D,k,R,I,P,V,N,j):[N,j],z=D-L[0],B=k-L[1],q=P-L[0],U=V-L[1],K=1/Vx(fs((z*q+B*U)/(Rx(z*z+B*B)*Rx(q*q+U*U)))/2),H=Rx(L[0]*L[0]+L[1]*L[1]);S=Px(C,(c-H)/(K-1)),A=Px(C,(f-H)/(K+1))}}E>Ix?A>Ix?(m=_s(R,I,D,k,f,A,v),y=_s(P,V,N,j,f,A,v),s.moveTo(m.cx+m.x01,m.cy+m.y01),A<C?s.arc(m.cx,m.cy,A,kx(m.y01,m.x01),kx(y.y01,y.x01),!v):(s.arc(m.cx,m.cy,A,kx(m.y01,m.x01),kx(m.y11,m.x11),!v),s.arc(0,0,f,kx(m.cy+m.y11,m.cx+m.x11),kx(y.cy+y.y11,y.cx+y.x11),!v),s.arc(y.cx,y.cy,A,kx(y.y11,y.x11),kx(y.y01,y.x01),!v))):(s.moveTo(D,k),s.arc(0,0,f,g,_,!v)):s.moveTo(D,k),c>Ix&&w>Ix?S>Ix?(m=_s(N,j,P,V,c,-S,v),y=_s(D,k,R,I,c,-S,v),s.lineTo(m.cx+m.x01,m.cy+m.y01),S<C?s.arc(m.cx,m.cy,S,kx(m.y01,m.x01),kx(y.y01,y.x01),!v):(s.arc(m.cx,m.cy,S,kx(m.y01,m.x01),kx(m.y11,m.x11),!v),s.arc(0,0,c,kx(m.cy+m.y11,m.cx+m.x11),kx(y.cy+y.y11,y.cx+y.x11),v),s.arc(y.cx,y.cy,S,kx(y.y11,y.x11),kx(y.y01,y.x01),!v))):s.arc(0,0,c,x,b,v):s.lineTo(N,j)}else s.moveTo(0,0);if(s.closePath(),t)return s=null,t+""||null}var e=ps,n=ds,r=Tx(0),i=null,o=vs,u=ms,a=ys,s=null;return t.centroid=function(){var t=(+e.apply(this,arguments)+ +n.apply(this,arguments))/2,r=(+o.apply(this,arguments)+ +u.apply(this,arguments))/2-Lx/2;return[Nx(r)*t,Vx(r)*t]},t.innerRadius=function(n){return arguments.length?(e="function"==typeof n?n:Tx(+n),t):e},t.outerRadius=function(e){return arguments.length?(n="function"==typeof e?e:Tx(+e),t):n},t.cornerRadius=function(e){return arguments.length?(r="function"==typeof e?e:Tx(+e),t):r},t.padRadius=function(e){return arguments.length?(i=null==e?null:"function"==typeof e?e:Tx(+e),t):i},t.startAngle=function(e){return arguments.length?(o="function"==typeof e?e:Tx(+e),t):o},t.endAngle=function(e){return arguments.length?(u="function"==typeof e?e:Tx(+e),t):u},t.padAngle=function(e){return arguments.length?(a="function"==typeof e?e:Tx(+e),t):a},t.context=function(e){return arguments.length?(s=null==e?null:e,t):s},t};bs.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}};var Ux=function(t){return new bs(t)},Kx=function(){function t(t){var a,s,l,c=t.length,f=!1;for(null==i&&(u=o(l=Ln())),a=0;a<=c;++a)!(a<c&&r(s=t[a],a,t))===f&&((f=!f)?u.lineStart():u.lineEnd()),f&&u.point(+e(s,a,t),+n(s,a,t));if(l)return u=null,l+""||null}var e=xs,n=ws,r=Tx(!0),i=null,o=Ux,u=null;return t.x=function(n){return arguments.length?(e="function"==typeof n?n:Tx(+n),t):e},t.y=function(e){return arguments.length?(n="function"==typeof e?e:Tx(+e),t):n},t.defined=function(e){return arguments.length?(r="function"==typeof e?e:Tx(!!e),t):r},t.curve=function(e){return arguments.length?(o=e,null!=i&&(u=o(i)),t):o},t.context=function(e){return arguments.length?(null==e?i=u=null:u=o(i=e),t):i},t},Hx=function(){function t(t){var e,c,f,h,p,d=t.length,v=!1,m=new Array(d),y=new Array(d);for(null==a&&(l=s(p=Ln())),e=0;e<=d;++e){if(!(e<d&&u(h=t[e],e,t))===v)if(v=!v)c=e,l.areaStart(),l.lineStart();else{for(l.lineEnd(),l.lineStart(),f=e-1;f>=c;--f)l.point(m[f],y[f]);l.lineEnd(),l.areaEnd()}v&&(m[e]=+n(h,e,t),y[e]=+i(h,e,t),l.point(r?+r(h,e,t):m[e],o?+o(h,e,t):y[e]))}if(p)return l=null,p+""||null}function e(){return Kx().defined(u).curve(s).context(a)}var n=xs,r=null,i=Tx(0),o=ws,u=Tx(!0),a=null,s=Ux,l=null;return t.x=function(e){return arguments.length?(n="function"==typeof e?e:Tx(+e),r=null,t):n},t.x0=function(e){return arguments.length?(n="function"==typeof e?e:Tx(+e),t):n},t.x1=function(e){return arguments.length?(r=null==e?null:"function"==typeof e?e:Tx(+e),t):r},t.y=function(e){return arguments.length?(i="function"==typeof e?e:Tx(+e),o=null,t):i},t.y0=function(e){return arguments.length?(i="function"==typeof e?e:Tx(+e),t):i},t.y1=function(e){return arguments.length?(o=null==e?null:"function"==typeof e?e:Tx(+e),t):o},t.lineX0=t.lineY0=function(){return e().x(n).y(i)},t.lineY1=function(){return e().x(n).y(o)},t.lineX1=function(){return e().x(r).y(i)},t.defined=function(e){return arguments.length?(u="function"==typeof e?e:Tx(!!e),t):u},t.curve=function(e){return arguments.length?(s=e,null!=a&&(l=s(a)),t):s},t.context=function(e){return arguments.length?(null==e?a=l=null:l=s(a=e),t):a},t},Wx=function(t,e){return e<t?-1:e>t?1:e>=t?0:NaN},Yx=function(t){return t},Xx=function(){function t(t){var a,s,l,c,f,h=t.length,p=0,d=new Array(h),v=new Array(h),m=+i.apply(this,arguments),y=Math.min(Bx,Math.max(-Bx,o.apply(this,arguments)-m)),g=Math.min(Math.abs(y)/h,u.apply(this,arguments)),_=g*(y<0?-1:1);for(a=0;a<h;++a)(f=v[d[a]=a]=+e(t[a],a,t))>0&&(p+=f);for(null!=n?d.sort(function(t,e){return n(v[t],v[e])}):null!=r&&d.sort(function(e,n){return r(t[e],t[n])}),a=0,l=p?(y-h*_)/p:0;a<h;++a,m=c)s=d[a],f=v[s],c=m+(f>0?f*l:0)+_,v[s]={data:t[s],index:a,value:f,startAngle:m,endAngle:c,padAngle:g};return v}var e=Yx,n=Wx,r=null,i=Tx(0),o=Tx(Bx),u=Tx(0);return t.value=function(n){return arguments.length?(e="function"==typeof n?n:Tx(+n),t):e},t.sortValues=function(e){return arguments.length?(n=e,r=null,t):n},t.sort=function(e){return arguments.length?(r=e,n=null,t):r},t.startAngle=function(e){return arguments.length?(i="function"==typeof e?e:Tx(+e),t):i},t.endAngle=function(e){return arguments.length?(o="function"==typeof e?e:Tx(+e),t):o},t.padAngle=function(e){return arguments.length?(u="function"==typeof e?e:Tx(+e),t):u},t},$x=Ms(Ux);Es.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,e){this._curve.point(e*Math.sin(t),e*-Math.cos(t))}};var Gx=function(){return Fs(Kx().curve($x))},Zx=function(){var t=Hx().curve($x),e=t.curve,n=t.lineX0,r=t.lineX1,i=t.lineY0,o=t.lineY1;return t.angle=t.x,delete t.x,t.startAngle=t.x0,delete t.x0,t.endAngle=t.x1,delete t.x1,t.radius=t.y,delete t.y,t.innerRadius=t.y0,delete t.y0,t.outerRadius=t.y1,delete t.y1,t.lineStartAngle=function(){return Fs(n())},delete t.lineX0,t.lineEndAngle=function(){return Fs(r())},delete t.lineX1,t.lineInnerRadius=function(){return Fs(i())},delete t.lineY0,t.lineOuterRadius=function(){return Fs(o())},delete t.lineY1,t.curve=function(t){return arguments.length?e(Ms(t)):e()._curve},t},Jx=function(t,e){return[(e=+e)*Math.cos(t-=Math.PI/2),e*Math.sin(t)]},Qx=Array.prototype.slice,tw={draw:function(t,e){var n=Math.sqrt(e/Lx);t.moveTo(n,0),t.arc(0,0,n,0,Bx)}},ew={draw:function(t,e){var n=Math.sqrt(e/5)/2;t.moveTo(-3*n,-n),t.lineTo(-n,-n),t.lineTo(-n,-3*n),t.lineTo(n,-3*n),t.lineTo(n,-n),t.lineTo(3*n,-n),t.lineTo(3*n,n),t.lineTo(n,n),t.lineTo(n,3*n),t.lineTo(-n,3*n),t.lineTo(-n,n),t.lineTo(-3*n,n),t.closePath()}},nw=Math.sqrt(1/3),rw=2*nw,iw={draw:function(t,e){var n=Math.sqrt(e/rw),r=n*nw;t.moveTo(0,-n),t.lineTo(r,0),t.lineTo(0,n),t.lineTo(-r,0),t.closePath()}},ow=Math.sin(Lx/10)/Math.sin(7*Lx/10),uw=Math.sin(Bx/10)*ow,aw=-Math.cos(Bx/10)*ow,sw={draw:function(t,e){var n=Math.sqrt(.8908130915292852*e),r=uw*n,i=aw*n;t.moveTo(0,-n),t.lineTo(r,i);for(var o=1;o<5;++o){var u=Bx*o/5,a=Math.cos(u),s=Math.sin(u);t.lineTo(s*n,-a*n),t.lineTo(a*r-s*i,s*r+a*i)}t.closePath()}},lw={draw:function(t,e){var n=Math.sqrt(e),r=-n/2;t.rect(r,r,n,n)}},cw=Math.sqrt(3),fw={draw:function(t,e){var n=-Math.sqrt(e/(3*cw));t.moveTo(0,2*n),t.lineTo(-cw*n,-n),t.lineTo(cw*n,-n),t.closePath()}},hw=-.5,pw=Math.sqrt(3)/2,dw=1/Math.sqrt(12),vw=3*(dw/2+1),mw={draw:function(t,e){var n=Math.sqrt(e/vw),r=n/2,i=n*dw,o=r,u=n*dw+n,a=-o,s=u;t.moveTo(r,i),t.lineTo(o,u),t.lineTo(a,s),t.lineTo(hw*r-pw*i,pw*r+hw*i),t.lineTo(hw*o-pw*u,pw*o+hw*u),t.lineTo(hw*a-pw*s,pw*a+hw*s),t.lineTo(hw*r+pw*i,hw*i-pw*r),t.lineTo(hw*o+pw*u,hw*u-pw*o),t.lineTo(hw*a+pw*s,hw*s-pw*a),t.closePath()}},yw=[tw,ew,iw,lw,sw,fw,mw],gw=function(){function t(){var t;if(r||(r=t=Ln()),e.apply(this,arguments).draw(r,+n.apply(this,arguments)),t)return r=null,t+""||null}var e=Tx(tw),n=Tx(64),r=null;return t.type=function(n){return arguments.length?(e="function"==typeof n?n:Tx(n),t):e},t.size=function(e){return arguments.length?(n="function"==typeof e?e:Tx(+e),t):n},t.context=function(e){return arguments.length?(r=null==e?null:e,t):r},t},_w=function(){};Vs.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:Ps(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:Ps(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};var bw=function(t){return new Vs(t)};Rs.prototype={areaStart:_w,areaEnd:_w,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x2=t,this._y2=e;break;case 1:this._point=2,this._x3=t,this._y3=e;break;case 2:this._point=3,this._x4=t,this._y4=e,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+e)/6);break;default:Ps(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};var xw=function(t){return new Rs(t)};Is.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var n=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+e)/6;this._line?this._context.lineTo(n,r):this._context.moveTo(n,r);break;case 3:this._point=4;default:Ps(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};var ww=function(t){return new Is(t)};Ls.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,e=this._y,n=t.length-1;if(n>0)for(var r,i=t[0],o=e[0],u=t[n]-i,a=e[n]-o,s=-1;++s<=n;)r=s/n,this._basis.point(this._beta*t[s]+(1-this._beta)*(i+r*u),this._beta*e[s]+(1-this._beta)*(o+r*a));this._x=this._y=null,this._basis.lineEnd()},point:function(t,e){this._x.push(+t),this._y.push(+e)}};var Ew=function t(e){function n(t){return 1===e?new Vs(t):new Ls(t,e)}return n.beta=function(e){return t(+e)},n}(.85);Bs.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:zs(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2,this._x1=t,this._y1=e;break;case 2:this._point=3;default:zs(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var Mw=function t(e){function n(t){return new Bs(t,e)}return n.tension=function(e){return t(+e)},n}(0);qs.prototype={areaStart:_w,areaEnd:_w,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:zs(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var Fw=function t(e){function n(t){return new qs(t,e)}return n.tension=function(e){return t(+e)},n}(0);Us.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:zs(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var Cw=function t(e){function n(t){return new Us(t,e)}return n.tension=function(e){return t(+e)},n}(0);Hs.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3;default:Ks(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var Sw=function t(e){function n(t){return e?new Hs(t,e):new Bs(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);Ws.prototype={areaStart:_w,areaEnd:_w,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:Ks(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var Aw=function t(e){function n(t){return e?new Ws(t,e):new qs(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);Ys.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Ks(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var Ow=function t(e){function n(t){return e?new Ys(t,e):new Us(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);Xs.prototype={areaStart:_w,areaEnd:_w,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,e){t=+t,e=+e,this._point?this._context.lineTo(t,e):(this._point=1,this._context.moveTo(t,e))}};var Tw=function(t){return new Xs(t)};Qs.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Js(this,this._t0,Zs(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){var n=NaN;if(t=+t,e=+e,t!==this._x1||e!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,Js(this,Zs(this,n=Gs(this,t,e)),n);break;default:Js(this,this._t0,n=Gs(this,t,e))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e,this._t0=n}}},(tl.prototype=Object.create(Qs.prototype)).point=function(t,e){Qs.prototype.point.call(this,e,t)},el.prototype={moveTo:function(t,e){this._context.moveTo(e,t)},closePath:function(){this._context.closePath()},lineTo:function(t,e){this._context.lineTo(e,t)},bezierCurveTo:function(t,e,n,r,i,o){this._context.bezierCurveTo(e,t,r,n,o,i)}},il.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,e=this._y,n=t.length;if(n)if(this._line?this._context.lineTo(t[0],e[0]):this._context.moveTo(t[0],e[0]),2===n)this._context.lineTo(t[1],e[1]);else for(var r=ol(t),i=ol(e),o=0,u=1;u<n;++o,++u)this._context.bezierCurveTo(r[0][o],i[0][o],r[1][o],i[1][o],t[u],e[u]);(this._line||0!==this._line&&1===n)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,e){this._x.push(+t),this._y.push(+e)}};var Dw=function(t){return new il(t)};ul.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,e),this._context.lineTo(t,e);else{var n=this._x*(1-this._t)+t*this._t;this._context.lineTo(n,this._y),this._context.lineTo(n,e)}}this._x=t,this._y=e}};var kw=function(t){return new ul(t,.5)},Nw=function(t,e){if((i=t.length)>1)for(var n,r,i,o=1,u=t[e[0]],a=u.length;o<i;++o)for(r=u,u=t[e[o]],n=0;n<a;++n)u[n][1]+=u[n][0]=isNaN(r[n][1])?r[n][0]:r[n][1]},jw=function(t){for(var e=t.length,n=new Array(e);--e>=0;)n[e]=e;return n},Pw=function(){function t(t){var o,u,a=e.apply(this,arguments),s=t.length,l=a.length,c=new Array(l);for(o=0;o<l;++o){for(var f,h=a[o],p=c[o]=new Array(s),d=0;d<s;++d)p[d]=f=[0,+i(t[d],h,d,t)],f.data=t[d];p.key=h}for(o=0,u=n(c);o<l;++o)c[u[o]].index=o;return r(c,u),c}var e=Tx([]),n=jw,r=Nw,i=ll;return t.keys=function(n){return arguments.length?(e="function"==typeof n?n:Tx(Qx.call(n)),t):e},t.value=function(e){return arguments.length?(i="function"==typeof e?e:Tx(+e),t):i},t.order=function(e){return arguments.length?(n=null==e?jw:"function"==typeof e?e:Tx(Qx.call(e)),t):n},t.offset=function(e){return arguments.length?(r=null==e?Nw:e,t):r},t},Vw=function(t,e){if((r=t.length)>0){for(var n,r,i,o=0,u=t[0].length;o<u;++o){for(i=n=0;n<r;++n)i+=t[n][o][1]||0;if(i)for(n=0;n<r;++n)t[n][o][1]/=i}Nw(t,e)}},Rw=function(t,e){if((a=t.length)>1)for(var n,r,i,o,u,a,s=0,l=t[e[0]].length;s<l;++s)for(o=u=0,n=0;n<a;++n)(i=(r=t[e[n]][s])[1]-r[0])>=0?(r[0]=o,r[1]=o+=i):i<0?(r[1]=u,r[0]=u+=i):r[0]=o},Iw=function(t,e){if((n=t.length)>0){for(var n,r=0,i=t[e[0]],o=i.length;r<o;++r){for(var u=0,a=0;u<n;++u)a+=t[u][r][1]||0;i[r][1]+=i[r][0]=-a/2}Nw(t,e)}},Lw=function(t,e){if((i=t.length)>0&&(r=(n=t[e[0]]).length)>0){for(var n,r,i,o=0,u=1;u<r;++u){for(var a=0,s=0,l=0;a<i;++a){for(var c=t[e[a]],f=c[u][1]||0,h=c[u-1][1]||0,p=(f-h)/2,d=0;d<a;++d){var v=t[e[d]];p+=(v[u][1]||0)-(v[u-1][1]||0)}s+=f,l+=p*f}n[u-1][1]+=n[u-1][0]=o,s&&(o-=l/s)}n[u-1][1]+=n[u-1][0]=o,Nw(t,e)}},zw=function(t){var e=t.map(cl);return jw(t).sort(function(t,n){return e[t]-e[n]})},Bw=function(t){return zw(t).reverse()},qw=function(t){var e,n,r=t.length,i=t.map(cl),o=jw(t).sort(function(t,e){return i[e]-i[t]}),u=0,a=0,s=[],l=[];for(e=0;e<r;++e)n=o[e],u<a?(u+=i[n],s.push(n)):(a+=i[n],l.push(n));return l.reverse().concat(s)},Uw=function(t){return jw(t).reverse()},Kw=function(t){return function(){return t}};pl.prototype={constructor:pl,insert:function(t,e){var n,r,i;if(t){if(e.P=t,e.N=t.N,t.N&&(t.N.P=e),t.N=e,t.R){for(t=t.R;t.L;)t=t.L;t.L=e}else t.R=e;n=t}else this._?(t=yl(this._),e.P=null,e.N=t,t.P=t.L=e,n=t):(e.P=e.N=null,this._=e,n=null);for(e.L=e.R=null,e.U=n,e.C=!0,t=e;n&&n.C;)r=n.U,n===r.L?(i=r.R,i&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.R&&(vl(this,n),t=n,n=t.U),n.C=!1,r.C=!0,ml(this,r))):(i=r.L,i&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.L&&(ml(this,n),t=n,n=t.U),n.C=!1,r.C=!0,vl(this,r))),n=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var e,n,r,i=t.U,o=t.L,u=t.R;if(n=o?u?yl(u):o:u,i?i.L===t?i.L=n:i.R=n:this._=n,o&&u?(r=n.C,n.C=t.C,n.L=o,o.U=n,n!==u?(i=n.U,n.U=t.U,t=n.R,i.L=t,n.R=u,u.U=n):(n.U=i,i=n,t=n.R)):(r=t.C,t=n),t&&(t.U=i),!r){if(t&&t.C)return void(t.C=!1);do{if(t===this._)break;if(t===i.L){if(e=i.R,e.C&&(e.C=!1,i.C=!0,vl(this,i),e=i.R),e.L&&e.L.C||e.R&&e.R.C){e.R&&e.R.C||(e.L.C=!1,e.C=!0,ml(this,e),e=i.R),e.C=i.C,i.C=e.R.C=!1,vl(this,i),t=this._;break}}else if(e=i.L,e.C&&(e.C=!1,i.C=!0,ml(this,i),e=i.L),e.L&&e.L.C||e.R&&e.R.C){e.L&&e.L.C||(e.R.C=!1,e.C=!0,vl(this,e),e=i.L),e.C=i.C,i.C=e.L.C=!1,ml(this,i),t=this._;break}e.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var Hw,Ww,Yw,Xw,$w,Gw=[],Zw=[],Jw=1e-6,Qw=1e-12;ql.prototype={constructor:ql,polygons:function(){var t=this.edges;return this.cells.map(function(e){var n=e.halfedges.map(function(n){return Cl(e,t[n])});return n.data=e.site.data,n})},triangles:function(){var t=[],e=this.edges;return this.cells.forEach(function(n,r){if(o=(i=n.halfedges).length)for(var i,o,u,a=n.site,s=-1,l=e[i[o-1]],c=l.left===a?l.right:l.left;++s<o;)u=c,l=e[i[s]],c=l.left===a?l.right:l.left,u&&c&&r<u.index&&r<c.index&&zl(a,u,c)<0&&t.push([a.data,u.data,c.data])}),t},links:function(){return this.edges.filter(function(t){return t.right}).map(function(t){return{source:t.left.data,target:t.right.data}})},find:function(t,e,n){for(var r,i,o=this,u=o._found||0,a=o.cells.length;!(i=o.cells[u]);)if(++u>=a)return null;var s=t-i.site[0],l=e-i.site[1],c=s*s+l*l;do{i=o.cells[r=u],u=null,i.halfedges.forEach(function(n){var r=o.edges[n],a=r.left;if(a!==i.site&&a||(a=r.right)){var s=t-a[0],l=e-a[1],f=s*s+l*l;f<c&&(c=f,u=a.index)}})}while(null!==u);return o._found=r,null==n||c<=n*n?i.site:null}};var tE=function(){function t(t){return new ql(t.map(function(r,i){var o=[Math.round(e(r,i,t)/Jw)*Jw,Math.round(n(r,i,t)/Jw)*Jw];return o.index=i,o.data=r,o}),r)}var e=fl,n=hl,r=null;return t.polygons=function(e){return t(e).polygons()},t.links=function(e){return t(e).links()},t.triangles=function(e){return t(e).triangles()},t.x=function(n){return arguments.length?(e="function"==typeof n?n:Kw(+n),t):e},t.y=function(e){return arguments.length?(n="function"==typeof e?e:Kw(+e),t):n},t.extent=function(e){return arguments.length?(r=null==e?null:[[+e[0][0],+e[0][1]],[+e[1][0],+e[1][1]]],t):r&&[[r[0][0],r[0][1]],[r[1][0],r[1][1]]]},t.size=function(e){return arguments.length?(r=null==e?null:[[0,0],[+e[0],+e[1]]],t):r&&[r[1][0]-r[0][0],r[1][1]-r[0][1]]},t},eE=function(t){return function(){return t}};Kl.prototype={constructor:Kl,scale:function(t){return 1===t?this:new Kl(this.k*t,this.x,this.y)},translate:function(t,e){return 0===t&0===e?this:new Kl(this.k,this.x+this.k*t,this.y+this.k*e)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var nE=new Kl(1,0,0);Hl.prototype=Kl.prototype;var rE=function(){t.event.preventDefault(),t.event.stopImmediatePropagation()},iE=function(){function e(t){t.property("__zoom",$l).on("wheel.zoom",l).on("mousedown.zoom",c).on("dblclick.zoom",f).filter(Zl).on("touchstart.zoom",h).on("touchmove.zoom",p).on("touchend.zoom touchcancel.zoom",d).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function n(t,e){return e=Math.max(x,Math.min(w,e)),e===t.k?t:new Kl(e,t.x,t.y)}function r(t,e,n){var r=e[0]-n[0]*t.k,i=e[1]-n[1]*t.k;return r===t.x&&i===t.y?t:new Kl(t.k,r,i)}function i(t,e){var n=t.invertX(e[0][0])-E,r=t.invertX(e[1][0])-M,i=t.invertY(e[0][1])-F,o=t.invertY(e[1][1])-C;return t.translate(r>n?(n+r)/2:Math.min(0,n)||Math.max(0,r),o>i?(i+o)/2:Math.min(0,i)||Math.max(0,o))}function o(t){return[(+t[0][0]+ +t[1][0])/2,(+t[0][1]+ +t[1][1])/2]}function u(t,e,n){t.on("start.zoom",function(){a(this,arguments).start()}).on("interrupt.zoom end.zoom",function(){a(this,arguments).end()}).tween("zoom",function(){var t=this,r=arguments,i=a(t,r),u=_.apply(t,r),s=n||o(u),l=Math.max(u[1][0]-u[0][0],u[1][1]-u[0][1]),c=t.__zoom,f="function"==typeof e?e.apply(t,r):e,h=A(c.invert(s).concat(l/c.k),f.invert(s).concat(l/f.k));return function(t){if(1===t)t=f;else{var e=h(t),n=l/e[2];t=new Kl(n,s[0]-e[0]*n,s[1]-e[1]*n)}i.zoom(null,t)}})}function a(t,e){for(var n,r=0,i=O.length;r<i;++r)if((n=O[r]).that===t)return n;return new s(t,e)}function s(t,e){this.that=t,this.args=e,this.index=-1,this.active=0,this.extent=_.apply(t,e)}function l(){function t(){e.wheel=null,e.end()}if(g.apply(this,arguments)){var e=a(this,arguments),o=this.__zoom,u=Math.max(x,Math.min(w,o.k*Math.pow(2,b.apply(this,arguments)))),s=rf(this);if(e.wheel)e.mouse[0][0]===s[0]&&e.mouse[0][1]===s[1]||(e.mouse[1]=o.invert(e.mouse[0]=s)),clearTimeout(e.wheel);else{if(o.k===u)return;e.mouse=[s,o.invert(s)],Cp(this),e.start()}rE(),e.wheel=setTimeout(t,N),e.zoom("mouse",i(r(n(o,u),e.mouse[0],e.mouse[1]),e.extent))}}function c(){function e(){if(rE(),!o.moved){var e=t.event.clientX-l,n=t.event.clientY-c;o.moved=e*e+n*n>j}o.zoom("mouse",i(r(o.that.__zoom,o.mouse[0]=rf(o.that),o.mouse[1]),o.extent))}function n(){u.on("mousemove.zoom mouseup.zoom",null),xt(t.event.view,o.moved),rE(),o.end()}if(!m&&g.apply(this,arguments)){var o=a(this,arguments),u=zf(t.event.view).on("mousemove.zoom",e,!0).on("mouseup.zoom",n,!0),s=rf(this),l=t.event.clientX,c=t.event.clientY;Hf(t.event.view),Wl(),o.mouse=[s,this.__zoom.invert(s)],Cp(this),o.start()}}function f(){if(g.apply(this,arguments)){var o=this.__zoom,a=rf(this),s=o.invert(a),l=o.k*(t.event.shiftKey?.5:2),c=i(r(n(o,l),a,s),_.apply(this,arguments));rE(),S>0?zf(this).transition().duration(S).call(u,c,a):zf(this).call(e.transform,c)}}function h(){if(g.apply(this,arguments)){var e,n,r,i,o=a(this,arguments),u=t.event.changedTouches,s=u.length;for(Wl(),n=0;n<s;++n)r=u[n],i=qf(this,u,r.identifier),i=[i,this.__zoom.invert(i),r.identifier],o.touch0?o.touch1||(o.touch1=i):(o.touch0=i,e=!0);if(v&&(v=clearTimeout(v),!o.touch1))return o.end(),void((i=zf(this).on("dblclick.zoom"))&&i.apply(this,arguments));e&&(v=setTimeout(function(){v=null},k),Cp(this),o.start())}}function p(){var e,o,u,s,l=a(this,arguments),c=t.event.changedTouches,f=c.length;for(rE(),v&&(v=clearTimeout(v)),e=0;e<f;++e)o=c[e],u=qf(this,c,o.identifier),l.touch0&&l.touch0[2]===o.identifier?l.touch0[0]=u:l.touch1&&l.touch1[2]===o.identifier&&(l.touch1[0]=u);if(o=l.that.__zoom,l.touch1){var h=l.touch0[0],p=l.touch0[1],d=l.touch1[0],m=l.touch1[1],y=(y=d[0]-h[0])*y+(y=d[1]-h[1])*y,g=(g=m[0]-p[0])*g+(g=m[1]-p[1])*g;o=n(o,Math.sqrt(y/g)),u=[(h[0]+d[0])/2,(h[1]+d[1])/2],s=[(p[0]+m[0])/2,(p[1]+m[1])/2]}else{if(!l.touch0)return;u=l.touch0[0],s=l.touch0[1]}l.zoom("touch",i(r(o,u,s),l.extent))}function d(){var e,n,r=a(this,arguments),i=t.event.changedTouches,o=i.length;for(Wl(),m&&clearTimeout(m),m=setTimeout(function(){m=null},k),e=0;e<o;++e)n=i[e],r.touch0&&r.touch0[2]===n.identifier?delete r.touch0:r.touch1&&r.touch1[2]===n.identifier&&delete r.touch1;r.touch1&&!r.touch0&&(r.touch0=r.touch1,delete r.touch1),r.touch0?r.touch0[1]=this.__zoom.invert(r.touch0[0]):r.end()}var v,m,g=Yl,_=Xl,b=Gl,x=0,w=1/0,E=-w,M=w,F=E,C=M,S=250,A=Zh,O=[],T=y("start","zoom","end"),k=500,N=150,j=0;return e.transform=function(t,e){var n=t.selection?t.selection():t;n.property("__zoom",$l),t!==n?u(t,e):n.interrupt().each(function(){a(this,arguments).start().zoom(null,"function"==typeof e?e.apply(this,arguments):e).end()})},e.scaleBy=function(t,n){e.scaleTo(t,function(){return this.__zoom.k*("function"==typeof n?n.apply(this,arguments):n)})},e.scaleTo=function(t,u){e.transform(t,function(){var t=_.apply(this,arguments),e=this.__zoom,a=o(t),s=e.invert(a);return i(r(n(e,"function"==typeof u?u.apply(this,arguments):u),a,s),t)})},e.translateBy=function(t,n,r){e.transform(t,function(){return i(this.__zoom.translate("function"==typeof n?n.apply(this,arguments):n,"function"==typeof r?r.apply(this,arguments):r),_.apply(this,arguments))})},e.translateTo=function(t,n,r){e.transform(t,function(){var t=_.apply(this,arguments),e=this.__zoom,u=o(t);return i(nE.translate(u[0],u[1]).scale(e.k).translate("function"==typeof n?-n.apply(this,arguments):-n,"function"==typeof r?-r.apply(this,arguments):-r),t)})},s.prototype={start:function(){return 1==++this.active&&(this.index=O.push(this)-1,this.emit("start")),this},zoom:function(t,e){return this.mouse&&"mouse"!==t&&(this.mouse[1]=e.invert(this.mouse[0])),this.touch0&&"touch"!==t&&(this.touch0[1]=e.invert(this.touch0[0])),this.touch1&&"touch"!==t&&(this.touch1[1]=e.invert(this.touch1[0])),this.that.__zoom=e,this.emit("zoom"),this},end:function(){return 0==--this.active&&(O.splice(this.index,1),this.index=-1,this.emit("end")),this},emit:function(t){D(new Ul(e,t,this.that.__zoom),T.apply,T,[t,this.that,this.args])}},e.wheelDelta=function(t){return arguments.length?(b="function"==typeof t?t:eE(+t),e):b},e.filter=function(t){return arguments.length?(g="function"==typeof t?t:eE(!!t),e):g},e.extent=function(t){return arguments.length?(_="function"==typeof t?t:eE([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),e):_},e.scaleExtent=function(t){return arguments.length?(x=+t[0],w=+t[1],e):[x,w]},e.translateExtent=function(t){return arguments.length?(E=+t[0][0],M=+t[1][0],F=+t[0][1],C=+t[1][1],e):[[E,F],[M,C]]},e.duration=function(t){return arguments.length?(S=+t,e):S},e.interpolate=function(t){return arguments.length?(A=t,e):A},e.on=function(){var t=T.on.apply(T,arguments);return t===T?e:t},e.clickDistance=function(t){return arguments.length?(j=(t=+t)*t,e):Math.sqrt(j)},e};t.version="4.10.0",t.bisect=ec,t.bisectRight=ec,t.bisectLeft=nc,t.ascending=Jl,t.bisector=Ql,t.cross=ic,t.descending=oc,t.deviation=sc,t.extent=lc,t.histogram=xc,t.thresholdFreedmanDiaconis=Ec,t.thresholdScott=Mc,t.thresholdSturges=bc,t.max=Fc,t.mean=Cc,t.median=Sc,t.merge=Ac,t.min=Oc,t.pairs=rc,t.permute=Tc,t.quantile=wc,t.range=vc,t.scan=Dc,t.shuffle=kc,t.sum=Nc,t.ticks=_c,t.tickIncrement=r,t.tickStep=i,t.transpose=jc,t.variance=ac,t.zip=Pc,t.axisTop=p,t.axisRight=d,t.axisBottom=v,t.axisLeft=m,t.brush=Vd,t.brushX=jn,t.brushY=Pn,t.brushSelection=Nn,t.chord=Ud,t.ribbon=$d,t.nest=Gd,t.set=Jn,t.map=Wn,t.keys=Jd,t.values=Qd,t.entries=tv,t.color=Ot,t.rgb=Nt,t.hsl=Rt,t.lab=Bt,t.hcl=Xt,t.cubehelix=Zt,t.dispatch=y,t.drag=Yf,t.dragDisable=Hf,t.dragEnable=xt,t.dsvFormat=ev,t.csvParse=rv,t.csvParseRows=iv,t.csvFormat=ov,t.csvFormatRows=uv,t.tsvParse=sv,t.tsvParseRows=lv,t.tsvFormat=cv,t.tsvFormatRows=fv,t.easeLinear=an,t.easeQuad=cn,t.easeQuadIn=sn,t.easeQuadOut=ln,t.easeQuadInOut=cn,t.easeCubic=pn,t.easeCubicIn=fn,t.easeCubicOut=hn,t.easeCubicInOut=pn,t.easePoly=Zp,t.easePolyIn=$p,t.easePolyOut=Gp,t.easePolyInOut=Zp,t.easeSin=mn,t.easeSinIn=dn,t.easeSinOut=vn,t.easeSinInOut=mn,t.easeExp=_n,t.easeExpIn=yn,t.easeExpOut=gn,t.easeExpInOut=_n,t.easeCircle=wn,t.easeCircleIn=bn,t.easeCircleOut=xn,t.easeCircleInOut=wn,t.easeBounce=Mn,t.easeBounceIn=En,t.easeBounceOut=Mn,t.easeBounceInOut=Fn,t.easeBack=hd,t.easeBackIn=cd,t.easeBackOut=fd,t.easeBackInOut=hd,t.easeElastic=vd,t.easeElasticIn=dd,t.easeElasticOut=vd,t.easeElasticInOut=md,t.forceCenter=hv,t.forceCollide=Tv,t.forceLink=Dv,t.forceManyBody=Pv,t.forceSimulation=jv,t.forceX=Vv,t.forceY=Rv,t.formatDefaultLocale=gr,t.formatLocale=Gv,t.formatSpecifier=mr,t.precisionFixed=Zv,t.precisionPrefix=Jv,t.precisionRound=Qv,t.geoArea=iy,t.geoBounds=ay,t.geoCentroid=ly,t.geoCircle=My,t.geoClipExtent=Dy,t.geoContains=qy,t.geoDistance=Ly,t.geoGraticule=Si,t.geoGraticule10=Ai,t.geoInterpolate=Uy,t.geoLength=Vy,t.geoPath=mg,t.geoAlbers=Cg,t.geoAlbersUsa=Sg,t.geoAzimuthalEqualArea=Og,t.geoAzimuthalEqualAreaRaw=Ag,t.geoAzimuthalEquidistant=Dg,t.geoAzimuthalEquidistantRaw=Tg,t.geoConicConformal=Ng,t.geoConicConformalRaw=yo,t.geoConicEqualArea=Fg,t.geoConicEqualAreaRaw=lo,t.geoConicEquidistant=Pg,t.geoConicEquidistantRaw=_o,t.geoEquirectangular=jg,t.geoEquirectangularRaw=go,t.geoGnomonic=Vg,t.geoGnomonicRaw=bo,t.geoIdentity=Rg,t.geoProjection=oo,t.geoProjectionMutator=uo,t.geoMercator=kg,t.geoMercatorRaw=po,t.geoOrthographic=Ig,t.geoOrthographicRaw=wo,t.geoStereographic=Lg,t.geoStereographicRaw=Eo,t.geoTransverseMercator=zg,t.geoTransverseMercatorRaw=Mo,t.geoRotation=Ey,t.geoStream=ty,t.geoTransform=bg,t.cluster=Bg,t.hierarchy=jo,t.pack=r_,t.packSiblings=e_,t.packEnclose=t_,t.partition=u_,t.stratify=c_,t.tree=f_,t.treemap=v_,t.treemapBinary=m_,t.treemapDice=o_,t.treemapSlice=h_,t.treemapSliceDice=y_,t.treemapSquarify=d_,t.treemapResquarify=g_,t.interpolate=Uh,t.interpolateArray=Vh,t.interpolateBasis=Th,t.interpolateBasisClosed=Dh,t.interpolateDate=Rh,t.interpolateNumber=Ih,t.interpolateObject=Lh,t.interpolateRound=Kh,t.interpolateString=qh,t.interpolateTransformCss=Xh,t.interpolateTransformSvg=$h,t.interpolateZoom=Zh,t.interpolateRgb=Nh,t.interpolateRgbBasis=jh,t.interpolateRgbBasisClosed=Ph,t.interpolateHsl=Jh,t.interpolateHslLong=Qh,t.interpolateLab=ve,t.interpolateHcl=tp,t.interpolateHclLong=ep,t.interpolateCubehelix=np,t.interpolateCubehelixLong=rp,t.quantize=ip,t.path=Ln,t.polygonArea=__,t.polygonCentroid=b_;t.polygonHull=w_,t.polygonContains=E_,t.polygonLength=M_,t.quadtree=ar,t.queue=Cu,t.randomUniform=A_,t.randomNormal=O_,t.randomLogNormal=T_,t.randomBates=k_,t.randomIrwinHall=D_,t.randomExponential=N_,t.request=j_,t.html=V_,t.json=R_,t.text=I_,t.xml=L_,t.csv=B_,t.tsv=q_,t.scaleBand=Du,t.scalePoint=Nu,t.scaleIdentity=Uu,t.scaleLinear=qu,t.scaleLog=Gu,t.scaleOrdinal=Tu,t.scaleImplicit=W_,t.scalePow=Ju,t.scaleSqrt=Qu,t.scaleQuantile=ta,t.scaleQuantize=ea,t.scaleThreshold=na,t.scaleTime=dx,t.scaleUtc=vx,t.schemeCategory10=yx,t.schemeCategory20b=gx,t.schemeCategory20c=_x,t.schemeCategory20=bx,t.interpolateCubehelixDefault=xx,t.interpolateRainbow=Fx,t.interpolateWarm=wx,t.interpolateCool=Ex,t.interpolateViridis=Cx,t.interpolateMagma=Sx,t.interpolateInferno=Ax,t.interpolatePlasma=Ox,t.scaleSequential=cs,t.creator=Yc,t.local=M,t.matcher=Jc,t.mouse=rf,t.namespace=Wc,t.namespaces=Hc,t.select=zf,t.selectAll=Bf,t.selection=_t,t.selector=of,t.selectorAll=af,t.style=Y,t.touch=qf,t.touches=Uf,t.window=Cf,t.customEvent=D,t.arc=qx,t.area=Hx,t.line=Kx,t.pie=Xx,t.areaRadial=Zx,t.radialArea=Zx,t.lineRadial=Gx,t.radialLine=Gx,t.pointRadial=Jx,t.linkHorizontal=ks,t.linkVertical=Ns,t.linkRadial=js,t.symbol=gw,t.symbols=yw,t.symbolCircle=tw,t.symbolCross=ew,t.symbolDiamond=iw,t.symbolSquare=lw,t.symbolStar=sw,t.symbolTriangle=fw,t.symbolWye=mw,t.curveBasisClosed=xw,t.curveBasisOpen=ww,t.curveBasis=bw,t.curveBundle=Ew,t.curveCardinalClosed=Fw,t.curveCardinalOpen=Cw,t.curveCardinal=Mw,t.curveCatmullRomClosed=Aw,t.curveCatmullRomOpen=Ow,t.curveCatmullRom=Sw,t.curveLinearClosed=Tw,t.curveLinear=Ux,t.curveMonotoneX=nl,t.curveMonotoneY=rl,t.curveNatural=Dw,t.curveStep=kw,t.curveStepAfter=sl,t.curveStepBefore=al,t.stack=Pw,t.stackOffsetExpand=Vw,t.stackOffsetDiverging=Rw,t.stackOffsetNone=Nw,t.stackOffsetSilhouette=Iw,t.stackOffsetWiggle=Lw,t.stackOrderAscending=zw,t.stackOrderDescending=Bw,t.stackOrderInsideOut=qw,t.stackOrderNone=jw,t.stackOrderReverse=Uw,t.timeInterval=ra,t.timeMillisecond=tb,t.timeMilliseconds=eb,t.utcMillisecond=tb,t.utcMilliseconds=eb,t.timeSecond=ib,t.timeSeconds=ob,t.utcSecond=ib,t.utcSeconds=ob,t.timeMinute=ub,t.timeMinutes=ab,t.timeHour=sb,t.timeHours=lb,t.timeDay=cb,t.timeDays=fb,t.timeWeek=hb,t.timeWeeks=_b,t.timeSunday=hb,t.timeSundays=_b,t.timeMonday=pb,t.timeMondays=bb,t.timeTuesday=db,t.timeTuesdays=xb,t.timeWednesday=vb,t.timeWednesdays=wb,t.timeThursday=mb,t.timeThursdays=Eb,t.timeFriday=yb,t.timeFridays=Mb,t.timeSaturday=gb,t.timeSaturdays=Fb,t.timeMonth=Cb,t.timeMonths=Sb,t.timeYear=Ab,t.timeYears=Ob,t.utcMinute=Tb,t.utcMinutes=Db,t.utcHour=kb,t.utcHours=Nb,t.utcDay=jb,t.utcDays=Pb,t.utcWeek=Vb,t.utcWeeks=Ub,t.utcSunday=Vb,t.utcSundays=Ub,t.utcMonday=Rb,t.utcMondays=Kb,t.utcTuesday=Ib,t.utcTuesdays=Hb,t.utcWednesday=Lb,t.utcWednesdays=Wb,t.utcThursday=zb,t.utcThursdays=Yb,t.utcFriday=Bb,t.utcFridays=Xb,t.utcSaturday=qb,t.utcSaturdays=$b,t.utcMonth=Gb,t.utcMonths=Zb,t.utcYear=Jb,t.utcYears=tx,t.timeFormatDefaultLocale=rs,t.timeFormatLocale=la,t.isoFormat=ox,t.isoParse=ux,t.now=ge,t.timer=xe,t.timerFlush=we,t.timeout=dp,t.interval=vp,t.transition=on,t.active=bd,t.interrupt=Cp,t.voronoi=tE,t.zoom=iE,t.zoomTransform=Hl,t.zoomIdentity=nE,Object.defineProperty(t,"__esModule",{value:!0})})},"./node_modules/form-data-to-object/index.js":function(t,e,n){"use strict";function r(t){return Object.keys(t).reduce(function(e,n){var r=n.match(/[^\[]*/i),i=n.match(/\[.*?\]/g)||[];i=[r[0]].concat(i).map(function(t){return t.replace(/\[|\]/g,"")});for(var o=e;i.length;){var u=i.shift();u in o?o=o[u]:(o[u]=i.length?isNaN(i[0])?{}:[]:t[n],o=o[u])}return e},{})}function i(t){function e(t,n,r){return Array.isArray(r)||"[object Object]"===Object.prototype.toString.call(r)?(Object.keys(r).forEach(function(i){e(t,n+"["+i+"]",r[i])}),t):(t[n]=r,t)}return Object.keys(t).reduce(function(n,r){return e(n,r,t[r])},{})}t.exports={fromObj:i,toObj:r}},"./node_modules/formsy-react/lib/Decorator.js":function(t,e,n){"use strict";(function(e){var r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},i=e.React||n("./node_modules/react/react.js"),o=n("./node_modules/create-react-class/index.js"),u=n("./node_modules/formsy-react/lib/Mixin.js");t.exports=function(){return function(t){return o({mixins:[u],render:function(){return i.createElement(t,r({setValidations:this.setValidations,setValue:this.setValue,resetValue:this.resetValue,getValue:this.getValue,hasValue:this.hasValue,getErrorMessage:this.getErrorMessage,getErrorMessages:this.getErrorMessages,isFormDisabled:this.isFormDisabled,isValid:this.isValid,isPristine:this.isPristine,isFormSubmitted:this.isFormSubmitted,isRequired:this.isRequired,showRequired:this.showRequired,showError:this.showError,isValidValue:this.isValidValue},this.props))}})}}}).call(e,n("./node_modules/webpack/buildin/global.js"))},"./node_modules/formsy-react/lib/HOC.js":function(t,e,n){"use strict";(function(e){function r(t){return t.displayName||t.name||("string"==typeof t?t:"Component")}var i=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},o=e.React||n("./node_modules/react/react.js"),u=n("./node_modules/create-react-class/index.js"),a=n("./node_modules/formsy-react/lib/Mixin.js");t.exports=function(t){return u({displayName:"Formsy("+r(t)+")",mixins:[a],render:function(){var e=this.props.innerRef,n=i({setValidations:this.setValidations,setValue:this.setValue,resetValue:this.resetValue,getValue:this.getValue,hasValue:this.hasValue,getErrorMessage:this.getErrorMessage,getErrorMessages:this.getErrorMessages,isFormDisabled:this.isFormDisabled,isValid:this.isValid,isPristine:this.isPristine,isFormSubmitted:this.isFormSubmitted,isRequired:this.isRequired,showRequired:this.showRequired,showError:this.showError,isValidValue:this.isValidValue},this.props);return e&&(n.ref=e),o.createElement(t,n)}})}}).call(e,n("./node_modules/webpack/buildin/global.js"))},"./node_modules/formsy-react/lib/Mixin.js":function(t,e,n){"use strict";(function(e){var r=n("./node_modules/prop-types/index.js"),i=n("./node_modules/formsy-react/lib/utils.js"),o=(e.React||n("./node_modules/react/react.js"),function(t){return"string"==typeof t?t.split(/\,(?![^{\[]*[}\]])/g).reduce(function(t,e){var n=e.split(":"),r=n.shift();if(n=n.map(function(t){try{return JSON.parse(t)}catch(e){return t}}),n.length>1)throw new Error("Formsy does not support multiple args on string validations. Use object format of validations instead.");return t[r]=!n.length||n[0],t},{}):t||{}});t.exports={getInitialState:function(){return{_value:this.props.value,_isRequired:!1,_isValid:!0,_isPristine:!0,_pristineValue:this.props.value,_validationError:[],_externalError:null,_formSubmitted:!1}},contextTypes:{formsy:r.object},getDefaultProps:function(){return{validationError:"",validationErrors:{}}},componentWillMount:function(){var t=function(){this.setValidations(this.props.validations,this.props.required),this.context.formsy.attachToForm(this)}.bind(this);if(!this.props.name)throw new Error("Form Input requires a name property when used");t()},componentWillReceiveProps:function(t){this.setValidations(t.validations,t.required)},componentDidUpdate:function(t){i.isSame(this.props.value,t.value)||this.setValue(this.props.value),i.isSame(this.props.validations,t.validations)&&i.isSame(this.props.required,t.required)||this.context.formsy.validate(this)},componentWillUnmount:function(){this.context.formsy.detachFromForm(this)},setValidations:function(t,e){this._validations=o(t)||{},this._requiredValidations=!0===e?{isDefaultRequiredValue:!0}:o(e)},setValue:function(t){this.setState({_value:t,_isPristine:!1},function(){this.context.formsy.validate(this)}.bind(this))},resetValue:function(){this.setState({_value:this.state._pristineValue,_isPristine:!0},function(){this.context.formsy.validate(this)})},getValue:function(){return this.state._value},hasValue:function(){return""!==this.state._value},getErrorMessage:function(){var t=this.getErrorMessages();return t.length?t[0]:null},getErrorMessages:function(){return!this.isValid()||this.showRequired()?this.state._externalError||this.state._validationError||[]:[]},isFormDisabled:function(){return this.context.formsy.isFormDisabled()},isValid:function(){return this.state._isValid},isPristine:function(){return this.state._isPristine},isFormSubmitted:function(){return this.state._formSubmitted},isRequired:function(){return!!this.props.required},showRequired:function(){return this.state._isRequired},showError:function(){return!this.showRequired()&&!this.isValid()},isValidValue:function(t){return this.context.formsy.isValidValue.call(null,this,t)}}}).call(e,n("./node_modules/webpack/buildin/global.js"))},"./node_modules/formsy-react/lib/main.js":function(t,e,n){"use strict";(function(e){function r(t,e){var n={};for(var r in t)e.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n}var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},u="function"==typeof Symbol&&"symbol"===i(Symbol.iterator)?function(t){return void 0===t?"undefined":i(t)}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":void 0===t?"undefined":i(t)},a=n("./node_modules/prop-types/index.js"),s=e.React||n("./node_modules/react/react.js"),l=n("./node_modules/create-react-class/index.js"),c={},f=n("./node_modules/formsy-react/lib/validationRules.js"),h=n("./node_modules/form-data-to-object/index.js"),p=n("./node_modules/formsy-react/lib/utils.js"),d=n("./node_modules/formsy-react/lib/Mixin.js"),v=n("./node_modules/formsy-react/lib/HOC.js"),m=n("./node_modules/formsy-react/lib/Decorator.js"),y={},g=[];c.Mixin=d,c.HOC=v,c.Decorator=m,c.defaults=function(t){y=t},c.addValidationRule=function(t,e){f[t]=e},c.Form=l({displayName:"Formsy",getInitialState:function(){return{isValid:!0,isSubmitting:!1,canChange:!1}},getDefaultProps:function(){return{onSuccess:function(){},onError:function(){},onSubmit:function(){},onValidSubmit:function(){},onInvalidSubmit:function(){},onValid:function(){},onInvalid:function(){},onChange:function(){},validationErrors:null,preventExternalInvalidation:!1}},childContextTypes:{formsy:a.object},getChildContext:function(){var t=this;return{formsy:{attachToForm:this.attachToForm,detachFromForm:this.detachFromForm,validate:this.validate,isFormDisabled:this.isFormDisabled,isValidValue:function(e,n){return t.runValidation(e,n).isValid}}}},componentWillMount:function(){this.inputs=[]},componentDidMount:function(){this.validateForm()},componentWillUpdate:function(){this.prevInputNames=this.inputs.map(function(t){return t.props.name})},componentDidUpdate:function(){this.props.validationErrors&&"object"===u(this.props.validationErrors)&&Object.keys(this.props.validationErrors).length>0&&this.setInputValidationErrors(this.props.validationErrors);var t=this.inputs.map(function(t){return t.props.name});p.arraysDiffer(this.prevInputNames,t)&&this.validateForm()},reset:function(t){this.setFormPristine(!0),this.resetModel(t)},submit:function(t){t&&t.preventDefault(),this.setFormPristine(!1);var e=this.getModel();this.props.onSubmit(e,this.resetModel,this.updateInputsWithError),this.state.isValid?this.props.onValidSubmit(e,this.resetModel,this.updateInputsWithError):this.props.onInvalidSubmit(e,this.resetModel,this.updateInputsWithError)},mapModel:function(t){return this.props.mapping?this.props.mapping(t):h.toObj(Object.keys(t).reduce(function(e,n){for(var r=n.split("."),i=e;r.length;){var o=r.shift();i=i[o]=r.length?i[o]||{}:t[n]}return e},{}))},getModel:function(){var t=this.getCurrentValues();return this.mapModel(t)},resetModel:function(t){this.inputs.forEach(function(e){var n=e.props.name;t&&t.hasOwnProperty(n)?e.setValue(t[n]):e.resetValue()}),this.validateForm()},setInputValidationErrors:function(t){this.inputs.forEach(function(e){var n=e.props.name,r=[{_isValid:!(n in t),_validationError:"string"==typeof t[n]?[t[n]]:t[n]}];e.setState.apply(e,r)})},isChanged:function(){return!p.isSame(this.getPristineValues(),this.getCurrentValues())},getPristineValues:function(){return this.inputs.reduce(function(t,e){return t[e.props.name]=e.props.value,t},{})},updateInputsWithError:function(t){var e=this;Object.keys(t).forEach(function(n,r){var i=p.find(e.inputs,function(t){return t.props.name===n});if(!i)throw new Error("You are trying to update an input that does not exist. Verify errors object with input names. "+JSON.stringify(t));var o=[{_isValid:e.props.preventExternalInvalidation||!1,_externalError:"string"==typeof t[n]?[t[n]]:t[n]}];i.setState.apply(i,o)})},isFormDisabled:function(){return this.props.disabled},getCurrentValues:function(){return this.inputs.reduce(function(t,e){return t[e.props.name]=e.state._value,t},{})},setFormPristine:function(t){this.setState({_formSubmitted:!t}),this.inputs.forEach(function(e,n){e.setState({_formSubmitted:!t,_isPristine:t})})},validate:function(t){this.state.canChange&&this.props.onChange(this.getCurrentValues(),this.isChanged());var e=this.runValidation(t);t.setState({_isValid:e.isValid,_isRequired:e.isRequired,_validationError:e.error,_externalError:null},this.validateForm)},runValidation:function(t,e){var n=this.getCurrentValues(),r=t.props.validationErrors,i=t.props.validationError;e=2===arguments.length?e:t.state._value;var o=this.runRules(e,n,t._validations),u=this.runRules(e,n,t._requiredValidations);"function"==typeof t.validate&&(o.failed=t.validate()?[]:["failed"]);var a=!!Object.keys(t._requiredValidations).length&&!!u.success.length,s=!(o.failed.length||this.props.validationErrors&&this.props.validationErrors[t.props.name]);return{isRequired:a,isValid:!a&&s,error:function(){if(s&&!a)return g;if(o.errors.length)return o.errors;if(this.props.validationErrors&&this.props.validationErrors[t.props.name])return"string"==typeof this.props.validationErrors[t.props.name]?[this.props.validationErrors[t.props.name]]:this.props.validationErrors[t.props.name];if(a){var e=r[u.success[0]];return e?[e]:null}return o.failed.length?o.failed.map(function(t){return r[t]?r[t]:i}).filter(function(t,e,n){return n.indexOf(t)===e}):void 0}.call(this)}},runRules:function(t,e,n){var r={errors:[],failed:[],success:[]};return Object.keys(n).length&&Object.keys(n).forEach(function(i){if(f[i]&&"function"==typeof n[i])throw new Error("Formsy does not allow you to override default validations: "+i);if(!f[i]&&"function"!=typeof n[i])throw new Error("Formsy does not have the validation rule: "+i);if("function"==typeof n[i]){var o=n[i](e,t);return void("string"==typeof o?(r.errors.push(o),r.failed.push(i)):o||r.failed.push(i))}if("function"!=typeof n[i]){var o=f[i](e,t,n[i]);return void("string"==typeof o?(r.errors.push(o),r.failed.push(i)):o?r.success.push(i):r.failed.push(i))}return r.success.push(i)}),r},validateForm:function(){var t=this,e=function(){var t=this.inputs.every(function(t){return t.state._isValid});this.setState({isValid:t}),t?this.props.onValid():this.props.onInvalid(),this.setState({canChange:!0})}.bind(this);this.inputs.forEach(function(n,r){var i=t.runValidation(n);i.isValid&&n.state._externalError&&(i.isValid=!1),n.setState({_isValid:i.isValid,_isRequired:i.isRequired,_validationError:i.error,_externalError:!i.isValid&&n.state._externalError?n.state._externalError:null},r===t.inputs.length-1?e:null)}),this.inputs.length||this.setState({canChange:!0})},attachToForm:function(t){-1===this.inputs.indexOf(t)&&this.inputs.push(t),this.validate(t)},detachFromForm:function(t){var e=this.inputs.indexOf(t);-1!==e&&(this.inputs=this.inputs.slice(0,e).concat(this.inputs.slice(e+1))),this.validateForm()},render:function(){var t=this.props,e=(t.mapping,t.validationErrors,t.onSubmit,t.onValid,t.onValidSubmit,t.onInvalid,t.onInvalidSubmit,t.onChange,t.reset,t.preventExternalInvalidation,t.onSuccess,t.onError,r(t,["mapping","validationErrors","onSubmit","onValid","onValidSubmit","onInvalid","onInvalidSubmit","onChange","reset","preventExternalInvalidation","onSuccess","onError"]));return s.createElement("form",o({},e,{onSubmit:this.submit}),this.props.children)}}),e.exports||e.module||e.define&&e.define.amd||(e.Formsy=c),t.exports=c}).call(e,n("./node_modules/webpack/buildin/global.js"))},"./node_modules/formsy-react/lib/utils.js":function(t,e,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i="function"==typeof Symbol&&"symbol"===r(Symbol.iterator)?function(t){return void 0===t?"undefined":r(t)}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":void 0===t?"undefined":r(t)};t.exports={arraysDiffer:function(t,e){var n=!1;return t.length!==e.length?n=!0:t.forEach(function(t,r){this.isSame(t,e[r])||(n=!0)},this),n},objectsDiffer:function(t,e){var n=!1;return Object.keys(t).length!==Object.keys(e).length?n=!0:Object.keys(t).forEach(function(r){this.isSame(t[r],e[r])||(n=!0)},this),n},isSame:function(t,e){return(void 0===t?"undefined":i(t))===(void 0===e?"undefined":i(e))&&(Array.isArray(t)&&Array.isArray(e)?!this.arraysDiffer(t,e):"function"==typeof t?t.toString()===e.toString():"object"===(void 0===t?"undefined":i(t))&&null!==t&&null!==e?!this.objectsDiffer(t,e):t===e)},find:function(t,e){for(var n=0,r=t.length;n<r;n++){var i=t[n];if(e(i))return i}return null}}},"./node_modules/formsy-react/lib/validationRules.js":function(t,e,n){"use strict";var r=function(t){return null!==t&&void 0!==t},i=function(t){return""===t},o={isDefaultRequiredValue:function(t,e){return void 0===e||""===e},isExisty:function(t,e){return r(e)},matchRegexp:function(t,e,n){return!r(e)||i(e)||n.test(e)},isUndefined:function(t,e){return void 0===e},isEmptyString:function(t,e){return i(e)},isEmail:function(t,e){return o.matchRegexp(t,e,/^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i)},isUrl:function(t,e){return o.matchRegexp(t,e,/^(https?|s?ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i)},isTrue:function(t,e){return!0===e},isFalse:function(t,e){return!1===e},isNumeric:function(t,e){return"number"==typeof e||o.matchRegexp(t,e,/^[-+]?(?:\d*[.])?\d+$/)},isAlpha:function(t,e){return o.matchRegexp(t,e,/^[A-Z]+$/i)},isAlphanumeric:function(t,e){return o.matchRegexp(t,e,/^[0-9A-Z]+$/i)},isInt:function(t,e){return o.matchRegexp(t,e,/^(?:[-+]?(?:0|[1-9]\d*))$/)},isFloat:function(t,e){return o.matchRegexp(t,e,/^(?:[-+]?(?:\d+))?(?:\.\d*)?(?:[eE][\+\-]?(?:\d+))?$/)},isWords:function(t,e){return o.matchRegexp(t,e,/^[A-Z\s]+$/i)},isSpecialWords:function(t,e){return o.matchRegexp(t,e,/^[A-Z\s\u00C0-\u017F]+$/i)},isLength:function(t,e,n){return!r(e)||i(e)||e.length===n},equals:function(t,e,n){return!r(e)||i(e)||e==n},equalsField:function(t,e,n){return e==t[n]},maxLength:function(t,e,n){return!r(e)||e.length<=n},minLength:function(t,e,n){return!r(e)||i(e)||e.length>=n}};t.exports=o},"./node_modules/react-input-autosize/lib/AutosizeInput.js":function(t,e,n){"use strict";var r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},i=n("./node_modules/react/react.js"),o=n("./node_modules/prop-types/index.js"),u=n("./node_modules/create-react-class/index.js"),a={position:"absolute",top:0,left:0,visibility:"hidden",height:0,overflow:"scroll",whiteSpace:"pre"},s=u({propTypes:{className:o.string,defaultValue:o.any,inputClassName:o.string,inputStyle:o.object,minWidth:o.oneOfType([o.number,o.string]),onAutosize:o.func,onChange:o.func,placeholder:o.string,placeholderIsMinWidth:o.bool,style:o.object,value:o.any},getDefaultProps:function(){return{minWidth:1}},getInitialState:function(){return{inputWidth:this.props.minWidth}},componentDidMount:function(){this.mounted=!0,this.copyInputStyles(),this.updateInputWidth()},componentDidUpdate:function(t,e){e.inputWidth!==this.state.inputWidth&&"function"==typeof this.props.onAutosize&&this.props.onAutosize(this.state.inputWidth),this.updateInputWidth()},componentWillUnmount:function(){this.mounted=!1},inputRef:function(t){this.input=t},placeHolderSizerRef:function(t){this.placeHolderSizer=t},sizerRef:function(t){this.sizer=t},copyInputStyles:function(){if(!this.mounted&&window.getComputedStyle){var t=this.input&&window.getComputedStyle(this.input);if(t){var e=this.sizer;if(e.style.fontSize=t.fontSize,e.style.fontFamily=t.fontFamily,e.style.fontWeight=t.fontWeight,e.style.fontStyle=t.fontStyle,e.style.letterSpacing=t.letterSpacing,e.style.textTransform=t.textTransform,this.props.placeholder){var n=this.placeHolderSizer;n.style.fontSize=t.fontSize,n.style.fontFamily=t.fontFamily,n.style.fontWeight=t.fontWeight,n.style.fontStyle=t.fontStyle,n.style.letterSpacing=t.letterSpacing,n.style.textTransform=t.textTransform}}}},updateInputWidth:function(){if(this.mounted&&this.sizer&&void 0!==this.sizer.scrollWidth){var t=void 0;t=this.props.placeholder&&(!this.props.value||this.props.value&&this.props.placeholderIsMinWidth)?Math.max(this.sizer.scrollWidth,this.placeHolderSizer.scrollWidth)+2:this.sizer.scrollWidth+2,t<this.props.minWidth&&(t=this.props.minWidth),t!==this.state.inputWidth&&this.setState({inputWidth:t})}},getInput:function(){return this.input},focus:function(){this.input.focus()},blur:function(){this.input.blur()},select:function(){this.input.select()},render:function(){var t=[this.props.defaultValue,this.props.value,""].reduce(function(t,e){return null!==t&&void 0!==t?t:e}),e=this.props.style||{};e.display||(e.display="inline-block");var n=r({},this.props.inputStyle);n.width=this.state.inputWidth+"px",n.boxSizing="content-box";var o=r({},this.props);return o.className=this.props.inputClassName,o.style=n,delete o.inputClassName,delete o.inputStyle,delete o.minWidth,delete o.onAutosize,delete o.placeholderIsMinWidth,i.createElement("div",{className:this.props.className,style:e},i.createElement("input",r({},o,{ref:this.inputRef})),i.createElement("div",{ref:this.sizerRef,style:a},t),this.props.placeholder?i.createElement("div",{ref:this.placeHolderSizerRef,style:a},this.props.placeholder):null)}});t.exports=s},"./node_modules/react-select/lib/Async.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+(void 0===e?"undefined":s(e)));t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function a(t){return p.default.createElement(y.default,t)}var s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};Object.defineProperty(e,"__esModule",{value:!0});var l=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},c=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),f=function(t,e,n){for(var r=!0;r;){var i=t,o=e,u=n;r=!1,null===i&&(i=Function.prototype);var a=Object.getOwnPropertyDescriptor(i,o);if(void 0!==a){if("value"in a)return a.value;var s=a.get;if(void 0===s)return;return s.call(u)}var l=Object.getPrototypeOf(i);if(null===l)return;t=l,e=o,n=u,r=!0,a=l=void 0}},h=n("./node_modules/react/react.js"),p=r(h),d=n("./node_modules/prop-types/index.js"),v=r(d),m=n("./node_modules/react-select/lib/Select.js"),y=r(m),g=n("./node_modules/react-select/lib/utils/stripDiacritics.js"),_=r(g),b={autoload:v.default.bool.isRequired,cache:v.default.any,children:v.default.func.isRequired,ignoreAccents:v.default.bool,ignoreCase:v.default.bool,loadingPlaceholder:v.default.oneOfType([v.default.string,v.default.node]),loadOptions:v.default.func.isRequired,multi:v.default.bool,options:v.default.array.isRequired,placeholder:v.default.oneOfType([v.default.string,v.default.node]),noResultsText:v.default.oneOfType([v.default.string,v.default.node]),onChange:v.default.func,searchPromptText:v.default.oneOfType([v.default.string,v.default.node]),onInputChange:v.default.func,value:v.default.any},x={},w={autoload:!0,cache:x,children:a,ignoreAccents:!0,ignoreCase:!0,loadingPlaceholder:"Loading...",options:[],searchPromptText:"Type to search"},E=function(t){function e(t,n){o(this,e),f(Object.getPrototypeOf(e.prototype),"constructor",this).call(this,t,n),this._cache=t.cache===x?{}:t.cache,this.state={isLoading:!1,options:t.options},this._onInputChange=this._onInputChange.bind(this)}return u(e,t),c(e,[{key:"componentDidMount",value:function(){this.props.autoload&&this.loadOptions("")}},{key:"componentWillUpdate",value:function(t,e){var n=this;["options"].forEach(function(e){n.props[e]!==t[e]&&n.setState(i({},e,t[e]))})}},{key:"clearOptions",value:function(){this.setState({options:[]})}},{key:"loadOptions",value:function(t){var e=this,n=this.props.loadOptions,r=this._cache;if(r&&r.hasOwnProperty(t))return void this.setState({options:r[t]});var i=function n(i,o){if(n===e._callback){e._callback=null;var u=o&&o.options||[];r&&(r[t]=u),e.setState({isLoading:!1,options:u})}};this._callback=i;var o=n(t,i);return o&&o.then(function(t){return i(0,t)},function(t){return i()}),this._callback&&!this.state.isLoading&&this.setState({isLoading:!0}),t}},{key:"_onInputChange",value:function(t){var e=this.props,n=e.ignoreAccents,r=e.ignoreCase,i=e.onInputChange;return n&&(t=(0,_.default)(t)),r&&(t=t.toLowerCase()),i&&i(t),this.loadOptions(t)}},{key:"inputValue",value:function(){return this.select?this.select.state.inputValue:""}},{key:"noResultsText",value:function(){var t=this.props,e=t.loadingPlaceholder,n=t.noResultsText,r=t.searchPromptText,i=this.state.isLoading,o=this.inputValue();return i?e:o&&n?n:r}},{key:"focus",value:function(){this.select.focus()}},{key:"render",value:function(){var t=this,e=this.props,n=e.children,r=e.loadingPlaceholder,i=e.placeholder,o=this.state,u=o.isLoading,a=o.options,s={noResultsText:this.noResultsText(),placeholder:u?r:i,options:u&&r?[]:a,ref:function(e){return t.select=e},onChange:function(e){t.props.multi&&t.props.value&&e.length>t.props.value.length&&t.clearOptions(),t.props.onChange(e)}};return n(l({},this.props,s,{isLoading:u,onInputChange:this._onInputChange}))}}]),e}(h.Component);e.default=E,E.propTypes=b,E.defaultProps=w,t.exports=e.default},"./node_modules/react-select/lib/AsyncCreatable.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t){var e=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];return Object.keys(t).reduce(function(e,n){var r=t[n];return void 0!==r&&(e[n]=r),e},e)}var o=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},u=n("./node_modules/react/react.js"),a=r(u),s=n("./node_modules/create-react-class/index.js"),l=r(s),c=n("./node_modules/react-select/lib/Select.js"),f=r(c),h=(0,l.default)({displayName:"AsyncCreatableSelect",focus:function(){this.select.focus()},render:function(){var t=this;return a.default.createElement(f.default.Async,this.props,function(e){return a.default.createElement(f.default.Creatable,t.props,function(n){return a.default.createElement(f.default,o({},i(e,i(n,{})),{onInputChange:function(t){return n.onInputChange(t),e.onInputChange(t)},ref:function(r){t.select=r,n.ref(r),e.ref(r)}}))})})}});t.exports=h},"./node_modules/react-select/lib/Creatable.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,e){var n={};for(var r in t)e.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n}function o(t){return p.default.createElement(_.default,t)}function u(t){var e=t.option,n=t.options,r=t.labelKey,i=t.valueKey;return 0===n.filter(function(t){return t[r]===e[r]||t[i]===e[i]}).length}function a(t){return!!t.label}function s(t){var e=t.label,n=t.labelKey,r=t.valueKey,i={};return i[r]=e,i[n]=e,i.className="Select-create-option-placeholder",i}function l(t){return'Create option "'+t+'"'}function c(t){switch(t.keyCode){case 9:case 13:case 188:return!0}return!1}var f=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},h=n("./node_modules/react/react.js"),p=r(h),d=n("./node_modules/create-react-class/index.js"),v=r(d),m=n("./node_modules/prop-types/index.js"),y=r(m),g=n("./node_modules/react-select/lib/Select.js"),_=r(g),b=n("./node_modules/react-select/lib/utils/defaultFilterOptions.js"),x=r(b),w=n("./node_modules/react-select/lib/utils/defaultMenuRenderer.js"),E=r(w),M=(0,v.default)({displayName:"CreatableSelect",propTypes:{children:y.default.func,filterOptions:y.default.any,isOptionUnique:y.default.func,isValidNewOption:y.default.func,menuRenderer:y.default.any,newOptionCreator:y.default.func,onInputChange:y.default.func,onInputKeyDown:y.default.func,onNewOptionClick:y.default.func,options:y.default.array,promptTextCreator:y.default.func,shouldKeyDownEventCreateNewOption:y.default.func},statics:{isOptionUnique:u,isValidNewOption:a,newOptionCreator:s,promptTextCreator:l,shouldKeyDownEventCreateNewOption:c},getDefaultProps:function(){return{filterOptions:x.default,isOptionUnique:u,isValidNewOption:a,menuRenderer:E.default,newOptionCreator:s,promptTextCreator:l,shouldKeyDownEventCreateNewOption:c}},createNewOption:function(){var t=this.props,e=t.isValidNewOption,n=t.newOptionCreator,r=t.onNewOptionClick,i=t.options,o=void 0===i?[]:i;t.shouldKeyDownEventCreateNewOption;if(e({label:this.inputValue})){var u=n({label:this.inputValue,labelKey:this.labelKey,valueKey:this.valueKey});this.isOptionUnique({option:u})&&(r?r(u):(o.unshift(u),this.select.selectValue(u)))}},filterOptions:function(){var t=this.props,e=t.filterOptions,n=t.isValidNewOption,r=(t.options,t.promptTextCreator),i=arguments[2]||[],o=e.apply(void 0,arguments)||[];if(n({label:this.inputValue})){var u=this.props.newOptionCreator,a=u({label:this.inputValue,labelKey:this.labelKey,valueKey:this.valueKey});if(this.isOptionUnique({option:a,options:i.concat(o)})){var s=r(this.inputValue);this._createPlaceholderOption=u({label:s,labelKey:this.labelKey,valueKey:this.valueKey}),o.unshift(this._createPlaceholderOption)}}return o},isOptionUnique:function(t){var e=t.option,n=t.options,r=this.props.isOptionUnique;return n=n||this.select.filterOptions(),r({labelKey:this.labelKey,option:e,options:n,valueKey:this.valueKey})},menuRenderer:function(t){return(0,this.props.menuRenderer)(f({},t,{onSelect:this.onOptionSelect,selectValue:this.onOptionSelect}))},onInputChange:function(t){var e=this.props.onInputChange;e&&e(t),this.inputValue=t},onInputKeyDown:function(t){var e=this.props,n=e.shouldKeyDownEventCreateNewOption,r=e.onInputKeyDown,i=this.select.getFocusedOption();i&&i===this._createPlaceholderOption&&n({keyCode:t.keyCode})?(this.createNewOption(),t.preventDefault()):r&&r(t)},onOptionSelect:function(t,e){t===this._createPlaceholderOption?this.createNewOption():this.select.selectValue(t)},focus:function(){this.select.focus()},render:function(){var t=this,e=this.props,n=(e.newOptionCreator,e.shouldKeyDownEventCreateNewOption,i(e,["newOptionCreator","shouldKeyDownEventCreateNewOption"])),r=this.props.children;return r||(r=o),r(f({},n,{allowCreate:!0,filterOptions:this.filterOptions,menuRenderer:this.menuRenderer,onInputChange:this.onInputChange,onInputKeyDown:this.onInputKeyDown,ref:function(e){t.select=e,e&&(t.labelKey=e.props.labelKey,t.valueKey=e.props.valueKey)}}))}});t.exports=M},"./node_modules/react-select/lib/Option.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}var i=n("./node_modules/react/react.js"),o=r(i),u=n("./node_modules/create-react-class/index.js"),a=r(u),s=n("./node_modules/prop-types/index.js"),l=r(s),c=n("./node_modules/classnames/index.js"),f=r(c),h=(0,a.default)({propTypes:{children:l.default.node,className:l.default.string,instancePrefix:l.default.string.isRequired,isDisabled:l.default.bool,isFocused:l.default.bool,isSelected:l.default.bool,onFocus:l.default.func,onSelect:l.default.func,onUnfocus:l.default.func,option:l.default.object.isRequired,optionIndex:l.default.number},blockEvent:function(t){t.preventDefault(),t.stopPropagation(),"A"===t.target.tagName&&"href"in t.target&&(t.target.target?window.open(t.target.href,t.target.target):window.location.href=t.target.href)},handleMouseDown:function(t){t.preventDefault(),t.stopPropagation(),this.props.onSelect(this.props.option,t)},handleMouseEnter:function(t){this.onFocus(t)},handleMouseMove:function(t){this.onFocus(t)},handleTouchEnd:function(t){this.dragging||this.handleMouseDown(t)},handleTouchMove:function(t){this.dragging=!0},handleTouchStart:function(t){this.dragging=!1},onFocus:function(t){this.props.isFocused||this.props.onFocus(this.props.option,t)},render:function(){var t=this.props,e=t.option,n=t.instancePrefix,r=t.optionIndex,i=(0,f.default)(this.props.className,e.className);return e.disabled?o.default.createElement("div",{className:i,onMouseDown:this.blockEvent,onClick:this.blockEvent},this.props.children):o.default.createElement("div",{className:i,style:e.style,role:"option",onMouseDown:this.handleMouseDown,onMouseEnter:this.handleMouseEnter,onMouseMove:this.handleMouseMove,onTouchStart:this.handleTouchStart,onTouchMove:this.handleTouchMove,onTouchEnd:this.handleTouchEnd,id:n+"-option-"+r,title:e.title},this.props.children)}});t.exports=h},"./node_modules/react-select/lib/Select.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,e){var n={};for(var r in t)e.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n}function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function u(t){var e=void 0===t?"undefined":a(t);return"string"===e?t:"object"===e?JSON.stringify(t):"number"===e||"boolean"===e?String(t):""}/*!
  Copyright (c) 2016 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/react-select
*/
var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};Object.defineProperty(e,"__esModule",{value:!0});var s=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},l=n("./node_modules/react/react.js"),c=r(l),f=n("./node_modules/create-react-class/index.js"),h=r(f),p=n("./node_modules/prop-types/index.js"),d=r(p),v=n("./node_modules/react-dom/index.js"),m=r(v),y=n("./node_modules/react-input-autosize/lib/AutosizeInput.js"),g=r(y),_=n("./node_modules/classnames/index.js"),b=r(_),x=n("./node_modules/react-select/lib/utils/defaultArrowRenderer.js"),w=r(x),E=n("./node_modules/react-select/lib/utils/defaultFilterOptions.js"),M=r(E),F=n("./node_modules/react-select/lib/utils/defaultMenuRenderer.js"),C=r(F),S=n("./node_modules/react-select/lib/utils/defaultClearRenderer.js"),A=r(S),O=n("./node_modules/react-select/lib/Async.js"),T=r(O),D=n("./node_modules/react-select/lib/AsyncCreatable.js"),k=r(D),N=n("./node_modules/react-select/lib/Creatable.js"),j=r(N),P=n("./node_modules/react-select/lib/Option.js"),V=r(P),R=n("./node_modules/react-select/lib/Value.js"),I=r(R),L=d.default.oneOfType([d.default.string,d.default.node]),z=1,B=(0,h.default)({displayName:"Select",propTypes:{addLabelText:d.default.string,"aria-describedby":d.default.string,"aria-label":d.default.string,"aria-labelledby":d.default.string,arrowRenderer:d.default.func,autoBlur:d.default.bool,autofocus:d.default.bool,autosize:d.default.bool,backspaceRemoves:d.default.bool,backspaceToRemoveMessage:d.default.string,className:d.default.string,clearAllText:L,clearRenderer:d.default.func,clearValueText:L,clearable:d.default.bool,deleteRemoves:d.default.bool,delimiter:d.default.string,disabled:d.default.bool,escapeClearsValue:d.default.bool,filterOption:d.default.func,filterOptions:d.default.any,ignoreAccents:d.default.bool,ignoreCase:d.default.bool,inputProps:d.default.object,inputRenderer:d.default.func,instanceId:d.default.string,isLoading:d.default.bool,joinValues:d.default.bool,labelKey:d.default.string,matchPos:d.default.string,matchProp:d.default.string,menuBuffer:d.default.number,menuContainerStyle:d.default.object,menuRenderer:d.default.func,menuStyle:d.default.object,multi:d.default.bool,name:d.default.string,noResultsText:L,onBlur:d.default.func,onBlurResetsInput:d.default.bool,onChange:d.default.func,onClose:d.default.func,onCloseResetsInput:d.default.bool,onFocus:d.default.func,onInputChange:d.default.func,onInputKeyDown:d.default.func,onMenuScrollToBottom:d.default.func,onOpen:d.default.func,onValueClick:d.default.func,openAfterFocus:d.default.bool,openOnFocus:d.default.bool,optionClassName:d.default.string,optionComponent:d.default.func,optionRenderer:d.default.func,options:d.default.array,pageSize:d.default.number,placeholder:L,required:d.default.bool,resetValue:d.default.any,scrollMenuIntoView:d.default.bool,searchable:d.default.bool,simpleValue:d.default.bool,style:d.default.object,tabIndex:d.default.string,tabSelectsValue:d.default.bool,value:d.default.any,valueComponent:d.default.func,valueKey:d.default.string,valueRenderer:d.default.func,wrapperStyle:d.default.object},statics:{Async:T.default,AsyncCreatable:k.default,Creatable:j.default},getDefaultProps:function(){return{addLabelText:'Add "{label}"?',arrowRenderer:w.default,autosize:!0,backspaceRemoves:!0,backspaceToRemoveMessage:"Press backspace to remove {label}",clearable:!0,clearAllText:"Clear all",clearRenderer:A.default,clearValueText:"Clear value",deleteRemoves:!0,delimiter:",",disabled:!1,escapeClearsValue:!0,filterOptions:M.default,ignoreAccents:!0,ignoreCase:!0,inputProps:{},isLoading:!1,joinValues:!1,labelKey:"label",matchPos:"any",matchProp:"any",menuBuffer:0,menuRenderer:C.default,multi:!1,noResultsText:"No results found",onBlurResetsInput:!0,onCloseResetsInput:!0,optionComponent:V.default,pageSize:5,placeholder:"Select...",required:!1,scrollMenuIntoView:!0,searchable:!0,simpleValue:!1,tabSelectsValue:!0,valueComponent:I.default,valueKey:"value"}},getInitialState:function(){return{inputValue:"",isFocused:!1,isOpen:!1,isPseudoFocused:!1,required:!1}},componentWillMount:function(){this._instancePrefix="react-select-"+(this.props.instanceId||++z)+"-";var t=this.getValueArray(this.props.value);this.props.required&&this.setState({required:this.handleRequired(t[0],this.props.multi)})},componentDidMount:function(){this.props.autofocus&&this.focus()},componentWillReceiveProps:function(t){var e=this.getValueArray(t.value,t);t.required&&this.setState({required:this.handleRequired(e[0],t.multi)})},componentWillUpdate:function(t,e){if(e.isOpen!==this.state.isOpen){this.toggleTouchOutsideEvent(e.isOpen);var n=e.isOpen?t.onOpen:t.onClose;n&&n()}},componentDidUpdate:function(t,e){if(this.menu&&this.focused&&this.state.isOpen&&!this.hasScrolledToOption){var n=m.default.findDOMNode(this.focused);m.default.findDOMNode(this.menu).scrollTop=n.offsetTop,this.hasScrolledToOption=!0}else this.state.isOpen||(this.hasScrolledToOption=!1);if(this._scrollToFocusedOptionOnUpdate&&this.focused&&this.menu){this._scrollToFocusedOptionOnUpdate=!1;var r=m.default.findDOMNode(this.focused),i=m.default.findDOMNode(this.menu),o=r.getBoundingClientRect(),u=i.getBoundingClientRect();(o.bottom>u.bottom||o.top<u.top)&&(i.scrollTop=r.offsetTop+r.clientHeight-i.offsetHeight)}if(this.props.scrollMenuIntoView&&this.menuContainer){var a=this.menuContainer.getBoundingClientRect();window.innerHeight<a.bottom+this.props.menuBuffer&&window.scrollBy(0,a.bottom+this.props.menuBuffer-window.innerHeight)}t.disabled!==this.props.disabled&&(this.setState({isFocused:!1}),this.closeMenu())},componentWillUnmount:function(){!document.removeEventListener&&document.detachEvent?document.detachEvent("ontouchstart",this.handleTouchOutside):document.removeEventListener("touchstart",this.handleTouchOutside)},toggleTouchOutsideEvent:function(t){t?!document.addEventListener&&document.attachEvent?document.attachEvent("ontouchstart",this.handleTouchOutside):document.addEventListener("touchstart",this.handleTouchOutside):!document.removeEventListener&&document.detachEvent?document.detachEvent("ontouchstart",this.handleTouchOutside):document.removeEventListener("touchstart",this.handleTouchOutside)},handleTouchOutside:function(t){this.wrapper&&!this.wrapper.contains(t.target)&&this.closeMenu()},focus:function(){this.input&&this.input.focus()},blurInput:function(){this.input&&this.input.blur()},handleTouchMove:function(t){this.dragging=!0},handleTouchStart:function(t){this.dragging=!1},handleTouchEnd:function(t){this.dragging||this.handleMouseDown(t)},handleTouchEndClearValue:function(t){this.dragging||this.clearValue(t)},handleMouseDown:function(t){if(!(this.props.disabled||"mousedown"===t.type&&0!==t.button)&&"INPUT"!==t.target.tagName){if(t.stopPropagation(),t.preventDefault(),!this.props.searchable)return this.focus(),this.setState({isOpen:!this.state.isOpen});if(this.state.isFocused){this.focus();var e=this.input;"function"==typeof e.getInput&&(e=e.getInput()),e.value="",this.setState({isOpen:!0,isPseudoFocused:!1})}else this._openAfterFocus=!0,this.focus()}},handleMouseDownOnArrow:function(t){this.props.disabled||"mousedown"===t.type&&0!==t.button||this.state.isOpen&&(t.stopPropagation(),t.preventDefault(),this.closeMenu())},handleMouseDownOnMenu:function(t){this.props.disabled||"mousedown"===t.type&&0!==t.button||(t.stopPropagation(),t.preventDefault(),this._openAfterFocus=!0,this.focus())},closeMenu:function(){this.props.onCloseResetsInput?this.setState({isOpen:!1,isPseudoFocused:this.state.isFocused&&!this.props.multi,inputValue:""}):this.setState({isOpen:!1,isPseudoFocused:this.state.isFocused&&!this.props.multi,inputValue:this.state.inputValue}),this.hasScrolledToOption=!1},handleInputFocus:function(t){if(!this.props.disabled){var e=this.state.isOpen||this._openAfterFocus||this.props.openOnFocus;this.props.onFocus&&this.props.onFocus(t),this.setState({isFocused:!0,isOpen:e}),this._openAfterFocus=!1}},handleInputBlur:function(t){if(this.menu&&(this.menu===document.activeElement||this.menu.contains(document.activeElement)))return void this.focus();this.props.onBlur&&this.props.onBlur(t);var e={isFocused:!1,isOpen:!1,isPseudoFocused:!1};this.props.onBlurResetsInput&&(e.inputValue=""),this.setState(e)},handleInputChange:function(t){var e=t.target.value;if(this.state.inputValue!==t.target.value&&this.props.onInputChange){var n=this.props.onInputChange(e);null!=n&&"object"!==(void 0===n?"undefined":a(n))&&(e=""+n)}this.setState({isOpen:!0,isPseudoFocused:!1,inputValue:e})},handleKeyDown:function(t){if(!(this.props.disabled||"function"==typeof this.props.onInputKeyDown&&(this.props.onInputKeyDown(t),t.defaultPrevented))){switch(t.keyCode){case 8:return void(!this.state.inputValue&&this.props.backspaceRemoves&&(t.preventDefault(),this.popValue()));case 9:if(t.shiftKey||!this.state.isOpen||!this.props.tabSelectsValue)return;return void this.selectFocusedOption();case 13:if(!this.state.isOpen)return;t.stopPropagation(),this.selectFocusedOption();break;case 27:this.state.isOpen?(this.closeMenu(),t.stopPropagation()):this.props.clearable&&this.props.escapeClearsValue&&(this.clearValue(t),t.stopPropagation());break;case 38:this.focusPreviousOption();break;case 40:this.focusNextOption();break;case 33:this.focusPageUpOption();break;case 34:this.focusPageDownOption();break;case 35:if(t.shiftKey)return;this.focusEndOption();break;case 36:if(t.shiftKey)return;this.focusStartOption();break;case 46:return void(!this.state.inputValue&&this.props.deleteRemoves&&(t.preventDefault(),this.popValue()));default:return}t.preventDefault()}},handleValueClick:function(t,e){this.props.onValueClick&&this.props.onValueClick(t,e)},handleMenuScroll:function(t){if(this.props.onMenuScrollToBottom){var e=t.target;e.scrollHeight>e.offsetHeight&&!(e.scrollHeight-e.offsetHeight-e.scrollTop)&&this.props.onMenuScrollToBottom()}},handleRequired:function(t,e){return!t||(e?0===t.length:0===Object.keys(t).length)},getOptionLabel:function(t){return t[this.props.labelKey]},getValueArray:function(t,e){var n=this,r="object"===(void 0===e?"undefined":a(e))?e:this.props;if(r.multi){if("string"==typeof t&&(t=t.split(r.delimiter)),!Array.isArray(t)){if(null===t||void 0===t)return[];t=[t]}return t.map(function(t){return n.expandValue(t,r)}).filter(function(t){return t})}var i=this.expandValue(t,r);return i?[i]:[]},expandValue:function(t,e){var n=void 0===t?"undefined":a(t);if("string"!==n&&"number"!==n&&"boolean"!==n)return t;var r=e.options,i=e.valueKey;if(r)for(var o=0;o<r.length;o++)if(r[o][i]===t)return r[o]},setValue:function(t){var e=this;if(this.props.autoBlur&&this.blurInput(),this.props.onChange){if(this.props.required){var n=this.handleRequired(t,this.props.multi);this.setState({required:n})}this.props.simpleValue&&t&&(t=this.props.multi?t.map(function(t){return t[e.props.valueKey]}).join(this.props.delimiter):t[this.props.valueKey]),this.props.onChange(t)}},selectValue:function(t){var e=this;this.hasScrolledToOption=!1,this.props.multi?this.setState({inputValue:"",focusedIndex:null},function(){e.addValue(t)}):this.setState({isOpen:!1,inputValue:"",isPseudoFocused:this.state.isFocused},function(){e.setValue(t)})},addValue:function(t){var e=this.getValueArray(this.props.value),n=this._visibleOptions.filter(function(t){return!t.disabled}),r=n.indexOf(t);this.setValue(e.concat(t)),n.length-1===r?this.focusOption(n[r-1]):n.length>r&&this.focusOption(n[r+1])},popValue:function(){var t=this.getValueArray(this.props.value);t.length&&!1!==t[t.length-1].clearableValue&&this.setValue(t.slice(0,t.length-1))},removeValue:function(t){var e=this.getValueArray(this.props.value);this.setValue(e.filter(function(e){return e!==t})),this.focus()},clearValue:function(t){t&&"mousedown"===t.type&&0!==t.button||(t.stopPropagation(),t.preventDefault(),this.setValue(this.getResetValue()),this.setState({isOpen:!1,inputValue:""},this.focus))},getResetValue:function(){return void 0!==this.props.resetValue?this.props.resetValue:this.props.multi?[]:null},focusOption:function(t){this.setState({focusedOption:t})},focusNextOption:function(){this.focusAdjacentOption("next")},focusPreviousOption:function(){this.focusAdjacentOption("previous")},focusPageUpOption:function(){this.focusAdjacentOption("page_up")},focusPageDownOption:function(){this.focusAdjacentOption("page_down")},focusStartOption:function(){this.focusAdjacentOption("start")},focusEndOption:function(){this.focusAdjacentOption("end")},focusAdjacentOption:function(t){var e=this._visibleOptions.map(function(t,e){return{option:t,index:e}}).filter(function(t){return!t.option.disabled});if(this._scrollToFocusedOptionOnUpdate=!0,!this.state.isOpen)return void this.setState({isOpen:!0,inputValue:"",focusedOption:this._focusedOption||(e.length?e["next"===t?0:e.length-1].option:null)});if(e.length){for(var n=-1,r=0;r<e.length;r++)if(this._focusedOption===e[r].option){n=r;break}if("next"===t&&-1!==n)n=(n+1)%e.length;else if("previous"===t)n>0?n-=1:n=e.length-1;else if("start"===t)n=0;else if("end"===t)n=e.length-1;else if("page_up"===t){var i=n-this.props.pageSize;n=i<0?0:i}else if("page_down"===t){var i=n+this.props.pageSize;n=i>e.length-1?e.length-1:i}-1===n&&(n=0),this.setState({focusedIndex:e[n].index,focusedOption:e[n].option})}},getFocusedOption:function(){return this._focusedOption},getInputValue:function(){return this.state.inputValue},selectFocusedOption:function(){if(this._focusedOption)return this.selectValue(this._focusedOption)},renderLoading:function(){if(this.props.isLoading)return c.default.createElement("span",{className:"Select-loading-zone","aria-hidden":"true"},c.default.createElement("span",{className:"Select-loading"}))},renderValue:function(t,e){var n=this,r=this.props.valueRenderer||this.getOptionLabel,i=this.props.valueComponent;if(!t.length)return this.state.inputValue?null:c.default.createElement("div",{className:"Select-placeholder"},this.props.placeholder);var o=this.props.onValueClick?this.handleValueClick:null;return this.props.multi?t.map(function(t,e){return c.default.createElement(i,{id:n._instancePrefix+"-value-"+e,instancePrefix:n._instancePrefix,disabled:n.props.disabled||!1===t.clearableValue,key:"value-"+e+"-"+t[n.props.valueKey],onClick:o,onRemove:n.removeValue,value:t},r(t,e),c.default.createElement("span",{className:"Select-aria-only"}," "))}):this.state.inputValue?void 0:(e&&(o=null),c.default.createElement(i,{id:this._instancePrefix+"-value-item",disabled:this.props.disabled,instancePrefix:this._instancePrefix,onClick:o,value:t[0]},r(t[0])))},renderInput:function(t,e){var n,r=this,u=(0,b.default)("Select-input",this.props.inputProps.className),a=!!this.state.isOpen,l=(0,b.default)((n={},o(n,this._instancePrefix+"-list",a),o(n,this._instancePrefix+"-backspace-remove-message",this.props.multi&&!this.props.disabled&&this.state.isFocused&&!this.state.inputValue),n)),f=s({},this.props.inputProps,{role:"combobox","aria-expanded":""+a,"aria-owns":l,"aria-haspopup":""+a,"aria-activedescendant":a?this._instancePrefix+"-option-"+e:this._instancePrefix+"-value","aria-describedby":this.props["aria-describedby"],"aria-labelledby":this.props["aria-labelledby"],"aria-label":this.props["aria-label"],className:u,tabIndex:this.props.tabIndex,onBlur:this.handleInputBlur,onChange:this.handleInputChange,onFocus:this.handleInputFocus,ref:function(t){return r.input=t},required:this.state.required,value:this.state.inputValue});if(this.props.inputRenderer)return this.props.inputRenderer(f);if(this.props.disabled||!this.props.searchable){var h=this.props.inputProps,p=(h.inputClassName,i(h,["inputClassName"])),d=(0,b.default)(o({},this._instancePrefix+"-list",a));return c.default.createElement("div",s({},p,{role:"combobox","aria-expanded":a,"aria-owns":d,"aria-activedescendant":a?this._instancePrefix+"-option-"+e:this._instancePrefix+"-value",className:u,tabIndex:this.props.tabIndex||0,onBlur:this.handleInputBlur,onFocus:this.handleInputFocus,ref:function(t){return r.input=t},"aria-readonly":""+!!this.props.disabled,style:{border:0,width:1,display:"inline-block"}}))}return this.props.autosize?c.default.createElement(g.default,s({},f,{minWidth:"5"})):c.default.createElement("div",{className:u},c.default.createElement("input",f))},renderClear:function(){if(!(!this.props.clearable||void 0===this.props.value||null===this.props.value||this.props.multi&&!this.props.value.length||this.props.disabled||this.props.isLoading)){var t=this.props.clearRenderer();return c.default.createElement("span",{className:"Select-clear-zone",title:this.props.multi?this.props.clearAllText:this.props.clearValueText,"aria-label":this.props.multi?this.props.clearAllText:this.props.clearValueText,onMouseDown:this.clearValue,onTouchStart:this.handleTouchStart,onTouchMove:this.handleTouchMove,onTouchEnd:this.handleTouchEndClearValue},t)}},renderArrow:function(){var t=this.handleMouseDownOnArrow,e=this.state.isOpen,n=this.props.arrowRenderer({onMouseDown:t,isOpen:e});return c.default.createElement("span",{className:"Select-arrow-zone",onMouseDown:t},n)},filterOptions:function(t){var e=this.state.inputValue,n=this.props.options||[];if(this.props.filterOptions){return("function"==typeof this.props.filterOptions?this.props.filterOptions:M.default)(n,e,t,{filterOption:this.props.filterOption,ignoreAccents:this.props.ignoreAccents,ignoreCase:this.props.ignoreCase,labelKey:this.props.labelKey,matchPos:this.props.matchPos,matchProp:this.props.matchProp,valueKey:this.props.valueKey})}return n},onOptionRef:function(t,e){e&&(this.focused=t)},renderMenu:function(t,e,n){return t&&t.length?this.props.menuRenderer({focusedOption:n,focusOption:this.focusOption,instancePrefix:this._instancePrefix,labelKey:this.props.labelKey,onFocus:this.focusOption,onSelect:this.selectValue,optionClassName:this.props.optionClassName,optionComponent:this.props.optionComponent,optionRenderer:this.props.optionRenderer||this.getOptionLabel,options:t,selectValue:this.selectValue,valueArray:e,valueKey:this.props.valueKey,onOptionRef:this.onOptionRef}):this.props.noResultsText?c.default.createElement("div",{className:"Select-noresults"},this.props.noResultsText):null},renderHiddenField:function(t){var e=this;if(this.props.name){if(this.props.joinValues){var n=t.map(function(t){return u(t[e.props.valueKey])}).join(this.props.delimiter);return c.default.createElement("input",{type:"hidden",ref:function(t){return e.value=t},name:this.props.name,value:n,disabled:this.props.disabled})}return t.map(function(t,n){return c.default.createElement("input",{key:"hidden."+n,type:"hidden",ref:"value"+n,name:e.props.name,value:u(t[e.props.valueKey]),disabled:e.props.disabled})})}},getFocusableOptionIndex:function(t){var e=this._visibleOptions;if(!e.length)return null;var n=this.props.valueKey,r=this.state.focusedOption||t;if(r&&!r.disabled){var i=-1;if(e.some(function(t,e){var o=t[n]===r[n];return o&&(i=e),o}),-1!==i)return i}for(var o=0;o<e.length;o++)if(!e[o].disabled)return o;return null},renderOuter:function(t,e,n){var r=this,i=this.renderMenu(t,e,n);return i?c.default.createElement("div",{ref:function(t){return r.menuContainer=t},className:"Select-menu-outer",style:this.props.menuContainerStyle},c.default.createElement("div",{ref:function(t){return r.menu=t},role:"listbox",className:"Select-menu",id:this._instancePrefix+"-list",style:this.props.menuStyle,onScroll:this.handleMenuScroll,onMouseDown:this.handleMouseDownOnMenu},i)):null},render:function(){var t=this,e=this.getValueArray(this.props.value),n=this._visibleOptions=this.filterOptions(this.props.multi?this.getValueArray(this.props.value):null),r=this.state.isOpen;this.props.multi&&!n.length&&e.length&&!this.state.inputValue&&(r=!1);var i=this.getFocusableOptionIndex(e[0]),o=null;o=this._focusedOption=null!==i?n[i]:null;var u=(0,b.default)("Select",this.props.className,{"Select--multi":this.props.multi,"Select--single":!this.props.multi,"is-clearable":this.props.clearable,"is-disabled":this.props.disabled,"is-focused":this.state.isFocused,"is-loading":this.props.isLoading,"is-open":r,"is-pseudo-focused":this.state.isPseudoFocused,"is-searchable":this.props.searchable,"has-value":e.length}),a=null;return this.props.multi&&!this.props.disabled&&e.length&&!this.state.inputValue&&this.state.isFocused&&this.props.backspaceRemoves&&(a=c.default.createElement("span",{id:this._instancePrefix+"-backspace-remove-message",className:"Select-aria-only","aria-live":"assertive"},this.props.backspaceToRemoveMessage.replace("{label}",e[e.length-1][this.props.labelKey]))),c.default.createElement("div",{ref:function(e){return t.wrapper=e},className:u,style:this.props.wrapperStyle},this.renderHiddenField(e),c.default.createElement("div",{ref:function(e){return t.control=e},className:"Select-control",style:this.props.style,onKeyDown:this.handleKeyDown,onMouseDown:this.handleMouseDown,onTouchEnd:this.handleTouchEnd,onTouchStart:this.handleTouchStart,onTouchMove:this.handleTouchMove},c.default.createElement("span",{className:"Select-multi-value-wrapper",id:this._instancePrefix+"-value"},this.renderValue(e,r),this.renderInput(e,i)),a,this.renderLoading(),this.renderClear(),this.renderArrow()),r?this.renderOuter(n,this.props.multi?null:e,o):null)}});e.default=B,t.exports=e.default},"./node_modules/react-select/lib/Value.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}var i=n("./node_modules/react/react.js"),o=r(i),u=n("./node_modules/create-react-class/index.js"),a=r(u),s=n("./node_modules/prop-types/index.js"),l=r(s),c=n("./node_modules/classnames/index.js"),f=r(c),h=(0,a.default)({displayName:"Value",propTypes:{children:l.default.node,disabled:l.default.bool,id:l.default.string,onClick:l.default.func,onRemove:l.default.func,value:l.default.object.isRequired},handleMouseDown:function(t){if("mousedown"!==t.type||0===t.button)return this.props.onClick?(t.stopPropagation(),void this.props.onClick(this.props.value,t)):void(this.props.value.href&&t.stopPropagation())},onRemove:function(t){t.preventDefault(),t.stopPropagation(),this.props.onRemove(this.props.value)},handleTouchEndRemove:function(t){this.dragging||this.onRemove(t)},handleTouchMove:function(t){this.dragging=!0},handleTouchStart:function(t){this.dragging=!1},renderRemoveIcon:function(){if(!this.props.disabled&&this.props.onRemove)return o.default.createElement("span",{className:"Select-value-icon","aria-hidden":"true",onMouseDown:this.onRemove,onTouchEnd:this.handleTouchEndRemove,onTouchStart:this.handleTouchStart,onTouchMove:this.handleTouchMove},"×")},renderLabel:function(){return this.props.onClick||this.props.value.href?o.default.createElement("a",{className:"Select-value-label",href:this.props.value.href,target:this.props.value.target,onMouseDown:this.handleMouseDown,onTouchEnd:this.handleMouseDown},this.props.children):o.default.createElement("span",{className:"Select-value-label",role:"option","aria-selected":"true",id:this.props.id},this.props.children)},render:function(){return o.default.createElement("div",{className:(0,f.default)("Select-value",this.props.value.className),style:this.props.value.style,title:this.props.value.title},this.renderRemoveIcon(),this.renderLabel())}});t.exports=h},"./node_modules/react-select/lib/utils/defaultArrowRenderer.js":function(t,e,n){"use strict";function r(t){var e=t.onMouseDown;return o.default.createElement("span",{className:"Select-arrow",onMouseDown:e})}Object.defineProperty(e,"__esModule",{value:!0}),e.default=r;var i=n("./node_modules/react/react.js"),o=function(t){return t&&t.__esModule?t:{default:t}}(i);t.exports=e.default},"./node_modules/react-select/lib/utils/defaultClearRenderer.js":function(t,e,n){"use strict";function r(){return o.default.createElement("span",{className:"Select-clear",dangerouslySetInnerHTML:{__html:"&times;"}})}Object.defineProperty(e,"__esModule",{value:!0}),e.default=r;var i=n("./node_modules/react/react.js"),o=function(t){return t&&t.__esModule?t:{default:t}}(i);t.exports=e.default},"./node_modules/react-select/lib/utils/defaultFilterOptions.js":function(t,e,n){"use strict";function r(t,e,n,r){var i=this;return r.ignoreAccents&&(e=(0,o.default)(e)),r.ignoreCase&&(e=e.toLowerCase()),n&&(n=n.map(function(t){return t[r.valueKey]})),t.filter(function(t){if(n&&n.indexOf(t[r.valueKey])>-1)return!1;if(r.filterOption)return r.filterOption.call(i,t,e);if(!e)return!0;var u=String(t[r.valueKey]),a=String(t[r.labelKey]);return r.ignoreAccents&&("label"!==r.matchProp&&(u=(0,o.default)(u)),"value"!==r.matchProp&&(a=(0,o.default)(a))),r.ignoreCase&&("label"!==r.matchProp&&(u=u.toLowerCase()),"value"!==r.matchProp&&(a=a.toLowerCase())),"start"===r.matchPos?"label"!==r.matchProp&&u.substr(0,e.length)===e||"value"!==r.matchProp&&a.substr(0,e.length)===e:"label"!==r.matchProp&&u.indexOf(e)>=0||"value"!==r.matchProp&&a.indexOf(e)>=0})}var i=n("./node_modules/react-select/lib/utils/stripDiacritics.js"),o=function(t){return t&&t.__esModule?t:{default:t}}(i);t.exports=r},"./node_modules/react-select/lib/utils/defaultMenuRenderer.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t){var e=t.focusedOption,n=t.instancePrefix,r=(t.labelKey,t.onFocus),i=t.onSelect,o=t.optionClassName,a=t.optionComponent,l=t.optionRenderer,c=t.options,f=t.valueArray,h=t.valueKey,p=t.onOptionRef,d=a;return c.map(function(t,a){var c=f&&f.indexOf(t)>-1,v=t===e,m=(0,u.default)(o,{"Select-option":!0,"is-selected":c,"is-focused":v,"is-disabled":t.disabled});return s.default.createElement(d,{className:m,instancePrefix:n,isDisabled:t.disabled,isFocused:v,isSelected:c,key:"option-"+a+"-"+t[h],onFocus:r,onSelect:i,option:t,optionIndex:a,ref:function(t){p(t,v)}},l(t,a))})}var o=n("./node_modules/classnames/index.js"),u=r(o),a=n("./node_modules/react/react.js"),s=r(a);t.exports=i},"./node_modules/react-select/lib/utils/stripDiacritics.js":function(t,e,n){"use strict";var r=[{base:"A",letters:/[\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F]/g},{base:"AA",letters:/[\uA732]/g},{base:"AE",letters:/[\u00C6\u01FC\u01E2]/g},{base:"AO",letters:/[\uA734]/g},{base:"AU",letters:/[\uA736]/g},{base:"AV",letters:/[\uA738\uA73A]/g},{base:"AY",letters:/[\uA73C]/g},{base:"B",letters:/[\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181]/g},{base:"C",letters:/[\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E]/g},{base:"D",letters:/[\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779]/g},{base:"DZ",letters:/[\u01F1\u01C4]/g},{base:"Dz",letters:/[\u01F2\u01C5]/g},{base:"E",letters:/[\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E]/g},{base:"F",letters:/[\u0046\u24BB\uFF26\u1E1E\u0191\uA77B]/g},{base:"G",letters:/[\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E]/g},{base:"H",letters:/[\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D]/g},{base:"I",letters:/[\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197]/g},{base:"J",letters:/[\u004A\u24BF\uFF2A\u0134\u0248]/g},{base:"K",letters:/[\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2]/g},{base:"L",letters:/[\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780]/g},{base:"LJ",letters:/[\u01C7]/g},{base:"Lj",letters:/[\u01C8]/g},{base:"M",letters:/[\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C]/g},{base:"N",letters:/[\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4]/g},{base:"NJ",letters:/[\u01CA]/g},{base:"Nj",letters:/[\u01CB]/g},{base:"O",letters:/[\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C]/g},{base:"OI",letters:/[\u01A2]/g},{base:"OO",letters:/[\uA74E]/g},{base:"OU",letters:/[\u0222]/g},{base:"P",letters:/[\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754]/g},{base:"Q",letters:/[\u0051\u24C6\uFF31\uA756\uA758\u024A]/g},{base:"R",letters:/[\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782]/g},{base:"S",letters:/[\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784]/g},{base:"T",letters:/[\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786]/g},{base:"TZ",letters:/[\uA728]/g},{base:"U",letters:/[\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244]/g},{base:"V",letters:/[\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245]/g},{base:"VY",letters:/[\uA760]/g},{base:"W",letters:/[\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72]/g},{base:"X",letters:/[\u0058\u24CD\uFF38\u1E8A\u1E8C]/g},{base:"Y",letters:/[\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE]/g},{base:"Z",letters:/[\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762]/g},{base:"a",letters:/[\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250]/g},{base:"aa",letters:/[\uA733]/g},{base:"ae",letters:/[\u00E6\u01FD\u01E3]/g},{base:"ao",letters:/[\uA735]/g},{base:"au",letters:/[\uA737]/g},{base:"av",letters:/[\uA739\uA73B]/g},{base:"ay",letters:/[\uA73D]/g},{base:"b",letters:/[\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253]/g},{base:"c",letters:/[\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184]/g},{base:"d",letters:/[\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A]/g},{base:"dz",letters:/[\u01F3\u01C6]/g},{base:"e",letters:/[\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD]/g},{base:"f",letters:/[\u0066\u24D5\uFF46\u1E1F\u0192\uA77C]/g},{base:"g",letters:/[\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F]/g},{base:"h",letters:/[\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265]/g},{base:"hv",letters:/[\u0195]/g},{base:"i",letters:/[\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131]/g},{base:"j",letters:/[\u006A\u24D9\uFF4A\u0135\u01F0\u0249]/g},{base:"k",letters:/[\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3]/g},{base:"l",letters:/[\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747]/g},{base:"lj",letters:/[\u01C9]/g},{base:"m",letters:/[\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F]/g},{base:"n",letters:/[\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5]/g},{base:"nj",letters:/[\u01CC]/g},{base:"o",letters:/[\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275]/g},{base:"oi",letters:/[\u01A3]/g},{base:"ou",letters:/[\u0223]/g},{base:"oo",letters:/[\uA74F]/g},{base:"p",letters:/[\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755]/g},{base:"q",letters:/[\u0071\u24E0\uFF51\u024B\uA757\uA759]/g},{base:"r",letters:/[\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783]/g},{base:"s",letters:/[\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B]/g},{base:"t",letters:/[\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787]/g},{base:"tz",letters:/[\uA729]/g},{base:"u",letters:/[\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289]/g},{base:"v",letters:/[\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C]/g},{base:"vy",letters:/[\uA761]/g},{base:"w",letters:/[\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73]/g},{base:"x",letters:/[\u0078\u24E7\uFF58\u1E8B\u1E8D]/g},{base:"y",letters:/[\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF]/g},{base:"z",letters:/[\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763]/g}];t.exports=function(t){for(var e=0;e<r.length;e++)t=t.replace(r[e].letters,r[e].base);return t}},"./node_modules/webpack/buildin/amd-options.js":function(t,e){(function(e){t.exports=e}).call(e,{})},"./src/components/Auth/Field/Field.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var a=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),s=n("./node_modules/react/react.js"),l=r(s),c=n("./node_modules/formsy-react/lib/main.js"),f=(r(c),n("./node_modules/prop-types/index.js")),h=r(f),p=function(t){function e(t){i(this,e);var n=o(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return n.changeValue=function(t){n.props.setValue(t.currentTarget["checkbox"===n.props.type?"checked":"value"])},n}return u(e,t),a(e,[{key:"render",value:function(){var t=this.props.getErrorMessage();return l.default.createElement("div",{className:"signup-field-group"},l.default.createElement("label",{htmlFor:this.props.name.toLowerCase(),className:"signup-form__label"},this.props.name),l.default.createElement("input",{onChange:this.changeValue,value:this.props.getValue(),type:this.props.type||"text",name:this.props.name.toLowerCase(),className:"signup-form__input-field"}),l.default.createElement("p",{className:"caption signup-form__caption"},this.props.text),l.default.createElement("span",{className:"signup-form__error-message"},t))}}]),e}(l.default.Component);p.propTypes={name:h.default.string,text:h.default.string,className:h.default.string,type:h.default.string,setValue:h.default.any,getValue:h.default.func,validations:h.default.any,getErrorMessage:h.default.func,registration:h.default.func},e.default=(0,c.HOC)(p)},"./src/components/Chart/Axis/Axis.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),s=n("./node_modules/react/react.js"),l=r(s),c=n("./node_modules/d3/build/d3.js"),f=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(c),h=n("./node_modules/react-dom/index.js"),p=(r(h),n("./node_modules/prop-types/index.js")),d=r(p),v=function(t){function e(){return i(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return u(e,t),a(e,[{key:"componentDidUpdate",value:function(){this.renderAxis()}},{key:"componentDidMount",value:function(){this.renderAxis()}},{key:"renderAxis",value:function(){var t="axis"+this.props.orient,e=f[t](this.props.scale).ticks(this.props.ticks);this.props.format&&(e=e.tickFormat(f.timeFormat(this.props.format))),f.select(this.axisElement).call(e)}},{key:"render",value:function(){var t=this,e="translate(0,"+this.props.h+")";return l.default.createElement("g",{className:"axis",ref:function(e){t.axisElement=e},transform:"x"===this.props.axisType?e:""})}}]),e}(s.Component);e.default=v,v.propTypes={h:d.default.number,orient:d.default.oneOf(["Left","Bottom","Right","Top"]),scale:d.default.func,axisType:d.default.oneOf(["x","y"]),ticks:d.default.number,format:d.default.string}},"./src/components/Chart/Chart.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),s=n("./node_modules/react/react.js"),l=r(s),c=n("./node_modules/prop-types/index.js"),f=r(c),h=n("./src/components/Chart/LineChart/LineChart.js"),p=r(h),d=function(t){function e(t){i(this,e);var n=o(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return n.setChildWidth=function(){n.setState({calcWidth:n.getElementWidth()})},n.state={calcWidth:200},n}return u(e,t),a(e,[{key:"componentDidMount",value:function(){window.addEventListener("resize",this.setChildWidth),this.setChildWidth()}},{key:"componentWillUnmount",value:function(){window.removeEventListener("resize",this.setChildWidth)}},{key:"getElementWidth",value:function(){return this.div.offsetWidth}},{key:"render",value:function(){var t=this;return l.default.createElement("div",{className:this.props.styleName,ref:function(e){t.div=e}},l.default.createElement(p.default,{width:this.state.calcWidth,data:this.props.data}))}}]),e}(l.default.Component);e.default=d,d.propTypes={parent:f.default.string,styleName:f.default.string,data:f.default.array}},"./src/components/Chart/Dots/Dots.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0}),e.Dots=void 0;var i=n("./node_modules/react/react.js"),o=r(i),u=n("./node_modules/prop-types/index.js"),a=r(u);(e.Dots=function(t){return o.default.createElement("g",null,t.data.map(function(e,n){return o.default.createElement("circle",{className:"dot",r:"5",cx:t.x(e.date),cy:t.y(e[t.yData]),key:n})}))}).propTypes={data:a.default.array,yData:a.default.string,x:a.default.func,y:a.default.func}},"./src/components/Chart/Grid/Grid.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),s=n("./node_modules/react/react.js"),l=r(s),c=n("./node_modules/d3/build/d3.js"),f=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(c),h=n("./node_modules/react-dom/index.js"),p=(r(h),n("./node_modules/prop-types/index.js")),d=r(p),v=function(t){function e(){return i(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return u(e,t),a(e,[{key:"componentDidUpdate",value:function(){this.renderGrid()}},{key:"componentDidMount",value:function(){this.renderGrid()}},{key:"renderGrid",value:function(){var t="axis"+this.props.orient,e=f[t](this.props.scale).ticks(this.props.ticks).tickSize(-this.props.len,0,0).tickFormat("");f.select(this.gridElement).call(e)}},{key:"render",value:function(){var t=this,e="translate(0,"+this.props.h+")";return l.default.createElement("g",{className:"grid",ref:function(e){t.gridElement=e},transform:"x"===this.props.gridType?e:""})}}]),e}(s.Component);e.default=v,v.propTypes={h:d.default.number,orient:d.default.oneOf(["Left","Bottom","Right","Top"]),scale:d.default.func,gridType:d.default.oneOf(["x","y"]),ticks:d.default.number,len:d.default.number}},"./src/components/Chart/LineChart/LineChart.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();n("./src/components/Chart/LineChart/index.scss");var s=n("./node_modules/react/react.js"),l=r(s),c=n("./node_modules/d3/build/d3.js"),f=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(c),h=n("./node_modules/prop-types/index.js"),p=r(h),d=n("./src/components/Chart/Dots/Dots.js"),v=n("./src/components/Chart/Grid/Grid.js"),m=r(v),y=n("./src/components/Chart/Axis/Axis.js"),g=r(y),_=function(t){function e(t){return i(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t))}return u(e,t),a(e,[{key:"render",value:function(){var t=this,e={top:20,right:20,bottom:20,left:50},n=this.props.width-(e.left+e.right),r=this.props.height-(e.top+e.bottom),i=f.timeParse("%x");this.data=this.props.data.map(function(e){return Object.assign({},e,{date:i(e[t.props.xData])})}).sort(function(e,n){return Date.parse(e[t.props.xData])-Date.parse(n[t.props.xData])});var o=f.scaleTime().domain(f.extent(this.data,function(t){return t.date})).rangeRound([0,n]),u=f.scaleLinear().domain([0,500]).range([r,0]),a=f.line().x(function(t){return o(t.date)}).y(function(e){return u(e[t.props.yData])}).curve(f.curveCardinal),s="translate("+e.left+","+e.top+")";return l.default.createElement("div",{className:this.props.styleName,style:{width:this.props.width,height:this.props.height}},l.default.createElement("svg",{width:"100%",height:"100%"},l.default.createElement("g",{transform:s},l.default.createElement(m.default,{h:r,len:r,scale:o,gridType:"x",orient:"Bottom",ticks:2*this.data.length}),l.default.createElement(m.default,{h:r,len:n,scale:u,gridType:"y",orient:"Left",ticks:6}),l.default.createElement(g.default,{h:r,orient:"Left",scale:u,axisType:"y",ticks:6}),l.default.createElement(g.default,{h:r,orient:"Bottom",scale:o,axisType:"x",ticks:8,format:"%d/%m"}),l.default.createElement(d.Dots,{x:o,y:u,data:this.data,yData:this.props.yData}),l.default.createElement("path",{className:"line shadow",d:a(this.data),strokeLinecap:"round"}))))}}]),e}(s.Component);e.default=_,_.propTypes={width:p.default.number,height:p.default.number,xData:p.default.string,yData:p.default.string,data:p.default.array,styleName:p.default.string},_.defaultProps={width:800,height:300,xData:"day",yData:"count",data:[{day:"02/11/2016",count:180},{day:"02/1/2016",count:250},{day:"02/10/2016",count:83},{day:"02/24/2016",count:430},{day:"02/15/2016",count:140},{day:"02/27/2016",count:310},{day:"02/17/2016",count:430},{day:"02/8/2016",count:180},{day:"02/19/2016",count:150},{day:"02/2/2016",count:180},{day:"02/3/2016",count:250}]}},"./src/components/Chart/LineChart/index.scss":function(t,e){},"./src/components/DeviceForm/deviceForm.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function a(t){return{settings:t.builder.device,status:t.builder.uploadStatus,locations:t.builder.locations,deviceInLocation:t.builder.deviceInLocation}}function s(t){return{setValue:(0,v.bindActionCreators)(m.setValue,t),addItem:(0,v.bindActionCreators)(m.addItem,t),resetProto:(0,v.bindActionCreators)(m.resetProto,t),addDevice:(0,v.bindActionCreators)(m.addDevice,t),updateDevice:function(e,n){return t((0,F.updateDevice)(e,n))},loadLocations:function(){return t((0,m.loadLocations)())},addLocation:function(e){return t((0,m.addLocation)(e))},deleteLocation:function(e){return t((0,m.deleteLocation)(e))},deviceExistInLocation:function(e,n){return t((0,m.devicesInLocation)(e,n))}}}Object.defineProperty(e,"__esModule",{value:!0});var l=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();n("./src/components/DeviceForm/deviceForm.scss");var c=n("./node_modules/react/react.js"),f=r(c),h=n("./node_modules/prop-types/index.js"),p=r(h),d=n("./node_modules/react-select/lib/Select.js"),v=(r(d),n("./node_modules/redux/es/index.js")),m=n("./src/actions/builder.action.js"),y=n("./node_modules/react-redux/es/index.js"),g=n("./node_modules/formsy-react/lib/main.js"),_=r(g),b=n("./src/components/Auth/Field/Field.js"),x=r(b),w=n("./src/components/SelectLocation/SelectLocation.js"),E=r(w),M=n("./src/utils/utils.js"),F=(n("./src/actions/notifications.action.js"),n("./src/actions/devices.action.js")),C=["Toggle","Timer","LineChart","Value","Range"],S=function(t){function e(t){i(this,e);var n=o(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return n.addItem=function(t){var e={name:t.target.value};(0,M.setItemDefaultData)(e),n.props.addItem(e)},n.createButton=function(t,e){return f.default.createElement("input",{key:e,type:"button",className:"form-button",onClick:n.addItem,value:t})},n.handleUserInput=function(){n.props.setValue("name",n.name.getValue())},n.selectLocation=function(t){n.props.setValue("location",t)},n.handleSubmit=function(){void 0!==n.props.settings._id?n.props.updateDevice(n.props.settings,n.props.settings._id):n.props.addDevice(n.props.settings)},n.enableButton=function(){n.setState({canSubmit:!0})},n.disableButton=function(){n.setState({canSubmit:!1})},n.state={items:[]},n}return u(e,t),l(e,[{key:"componentDidMount",value:function(){this.props.loadLocations()}},{key:"createButtons",value:function(){return C.map(this.createButton)}},{key:"render",value:function(){var t=this,e=this.props.settings.location;return f.default.createElement(_.default.Form,{onSubmit:this.handleSubmit,onValid:this.enableButton,onInvalid:this.disableButton,onChange:this.handleUserInput,className:"device-form"},f.default.createElement(x.default,{name:"Device name",type:"text",ref:function(e){t.name=e},text:"Please enter device name",validations:{matchRegexp:/[\w\d\s]+/},validationError:"This is not a valid name",required:!0,value:this.props.settings.name}),f.default.createElement("div",{className:"input-container"},f.default.createElement("label",null,"Location:"),f.default.createElement(E.default,{selectLocation:this.selectLocation,locations:this.props.locations,addLocation:this.props.addLocation,deleteLocation:this.props.deleteLocation,defaultLocation:e,deviceExistInLocation:this.props.deviceExistInLocation,deviceInLocation:this.props.deviceInLocation})),f.default.createElement("div",null,f.default.createElement("label",null," Device config:"),this.createButtons()),f.default.createElement("div",{className:"main-button-wrap signup-field-group signup-btn-group"},f.default.createElement("input",{className:"btn btn--primary btn--signup btn--signup-active",type:"submit",value:"Save",disabled:!this.state.canSubmit||"PENDING"===this.props.status})))}}]),e}(f.default.Component);e.default=(0,y.connect)(a,s)(S),S.propTypes={setValue:p.default.func,addItem:p.default.func,resetProto:p.default.func,addDevice:p.default.func,settings:p.default.object,status:p.default.string,updateDevice:p.default.func,loadLocations:p.default.func,locations:p.default.array,addLocation:p.default.func,deleteLocation:p.default.func,deviceInLocation:p.default.bool,deviceExistInLocation:p.default.func}},"./src/components/DeviceForm/deviceForm.scss":function(t,e){},"./src/components/Prototype/Prototype.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t){return{settings:t.builder.device}}function o(t){return{addDescription:(0,p.bindActionCreators)(h.addDescription,t),setItemValue:(0,p.bindActionCreators)(h.setItemValue,t),setParameters:(0,p.bindActionCreators)(h.setParameters,t)}}Object.defineProperty(e,"__esModule",{value:!0});var u=n("./node_modules/react/react.js"),a=r(u),s=n("./node_modules/prop-types/index.js"),l=r(s),c=n("./node_modules/react-redux/es/index.js");n("./src/components/Prototype/index.scss");var f=n("./src/components/SettingsList/SettingsList.js"),h=n("./src/actions/builder.action.js"),p=n("./node_modules/redux/es/index.js"),d=function(t){return a.default.createElement("div",{className:"Prototype"},a.default.createElement("h3",null,t.device.name||"Device name"),a.default.createElement(f.SettingsList,{addDescription:t.addDescription,settings:t.device,deleteItem:t.deleteItem,setItemValue:t.setItemValue,setParameters:t.setParameters}))};d.propTypes={device:l.default.object,addDescription:l.default.func,deleteItem:l.default.func,setItemValue:l.default.func,settings:l.default.object,setParameters:l.default.func},e.default=(0,c.connect)(i,o)(d)},"./src/components/Prototype/index.scss":function(t,e){},"./src/components/RangeSettings/Range.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),s=n("./node_modules/react/react.js"),l=r(s),c=n("./node_modules/prop-types/index.js"),f=r(c);n("./src/components/RangeSettings/RangeStyle.scss");var h=function(t){function e(t){i(this,e);var n=o(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));n.onChange=function(t){n.setState({value:t.target.value}),void 0!==n.props.onTimerChange&&n.props.onTimerChange(t)},n.setValue=function(t){void 0!==n.props.setTimerValue?n.props.setTimerValue():n.props.setItemValue(n.state.value,n.props.itemId,n.props.deviceId)},n.setParams=function(){n.props.setParameters(n.props.itemId,n.state.params)};var r=void 0,u=void 0;return n.props.params&&(r=n.props.params.minValue,u=n.props.params.maxValue),n.state={value:0,params:{minValue:r||0,maxValue:u||100}},n.setMinValue=function(t){n.setState({params:{minValue:parseInt(t.target.value),maxValue:n.state.params.maxValue}})},n.setMaxValue=function(t){n.setState({params:{maxValue:parseInt(t.target.value),minValue:n.state.params.minValue}})},n}return u(e,t),a(e,[{key:"componentDidMount",value:function(){void 0!==this.props.data&&this.setState({value:this.props.data})}},{key:"componentWillReceiveProps",value:function(t){this.setState({value:t.data||0})}},{key:"render",value:function(){var t=this.props,e=t.min,n=t.max;return l.default.createElement("div",{className:""+this.props.styleName},this.props.showMinMax?l.default.createElement("div",{className:"range-settings"},l.default.createElement("p",{className:"range-settings__title"},"Enter min and max values for setting"),l.default.createElement("div",{className:"range-settings__val"},l.default.createElement("input",{type:"number",name:"min",placeholder:"Enter min value",onChange:this.setMinValue,value:this.state.params.minValue})),l.default.createElement("div",{className:"range-settings__val"},l.default.createElement("input",{type:"number",name:"max",placeholder:"Enter max value",onChange:this.setMaxValue,value:this.state.params.maxValue})),l.default.createElement("button",{onClick:this.setParams,className:"btn range-settings__btn"},"Submit")):null,this.props.hideLabel?null:l.default.createElement("p",{className:"range_value"},this.state.value),l.default.createElement("input",{type:"range",onChange:this.onChange,onMouseUp:this.setValue,min:e||this.state.params.minValue,max:n||this.state.params.maxValue,step:1,value:this.state.value}))}}]),e}(l.default.Component);e.default=h,h.propTypes={styleName:f.default.string,itemId:f.default.number,max:f.default.number,min:f.default.number,setDevice:f.default.func,hideLabel:f.default.bool,setItemValue:f.default.func,data:f.default.any,onTimerChange:f.default.func,deviceId:f.default.string,setTimerValue:f.default.func,setParameters:f.default.func,showMinMax:f.default.bool,maxValue:f.default.number,minValue:f.default.number,params:f.default.object}},"./src/components/RangeSettings/RangeStyle.scss":function(t,e){},"./src/components/SelectLocation/SelectLocation.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),s=n("./node_modules/react/react.js"),l=r(s),c=n("./node_modules/prop-types/index.js"),f=r(c),h=n("./src/components/Popup/Popup.js"),p=n("./src/components/Button/Button.js"),d=function(t){function e(t){i(this,e);var n=o(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return n.setPopupShown=function(t){var e=n.state.popupShown,r=function(){n.setState({popupShown:!e,idLocation:t})};void 0!==t?n.props.deviceExistInLocation(t,r):r()},n.showInputLocation=function(){n.setState({input:!n.state.input})},n.setInputValue=function(t){n.setState({inputValue:t.target.value})},n.deleteSelectedLocation=function(t){n.props.deleteLocation(t)},n.setLocationValue=function(t){n.setState({locationValue:t.label}),n.props.selectLocation(t.label),n.showInputLocation()},n.addLocationValue=function(){""!==n.state.inputValue.trim()&&n.props.addLocation(n.state.inputValue),n.setState({inputValue:""})},n.state={input:!1,locationValue:"",inputValue:"",popupShown:!1,idLocation:""},n}return u(e,t),a(e,[{key:"render",value:function(){var t=this;return l.default.createElement("div",null,l.default.createElement("div",{className:"Select-control"},l.default.createElement("div",{className:"Select-value select-menu-container"},l.default.createElement("div",{className:"select-menu-label",onClick:this.showInputLocation},l.default.createElement("span",{className:"Select-value-label"},this.state.locationValue?this.state.locationValue:this.props.defaultLocation),l.default.createElement("i",{className:"select-toggle fa "+(this.state.input?"fa-caret-up":"fa-caret-down")}))),this.state.input?l.default.createElement("div",{className:"Select-menu__outer"},l.default.createElement("div",{className:"Select-input-location"},l.default.createElement("input",{type:"text",placeholder:"Add new location",className:"Select-input_add-location",onChange:this.setInputValue,value:this.state.inputValue}),l.default.createElement("i",{className:"fa fa-plus Select-input_add-location_icon",onClick:this.addLocationValue})),l.default.createElement("ul",{className:"Select-menu"},this.props.locations.map(function(e,n){return l.default.createElement("li",{key:n,className:"Select-option"},l.default.createElement("span",{className:"Select-option__item",onClick:function(n){return t.setLocationValue(e)}},e.label),l.default.createElement("i",{className:"fa fa-trash Select-option__icon",onClick:function(n){return t.setPopupShown(e._id)}}))}))):null),l.default.createElement(h.Popup,{setPopupShown:this.setPopupShown,popupShown:this.state.popupShown,header:"Confirm the action",text:this.props.deviceInLocation?"You can't delete this location, because you have devices in it":"Are you sure you want to delete this location?"},l.default.createElement(p.Button,{disabled:this.props.deviceInLocation,setPopupShown:this.setPopupShown,okHandler:function(){t.deleteSelectedLocation(t.state.idLocation),t.setPopupShown()},className:this.props.deviceInLocation?"btn btn--default":"btn popup__btn",innerText:"Ok"}),l.default.createElement(p.Button,{okHandler:function(){t.setPopupShown()},className:"btn btn--default popup__btn",innerText:"Cancel"})))}}]),e}(l.default.Component);e.default=d,d.propTypes={locations:f.default.array,addLocation:f.default.func,deleteLocation:f.default.func,selectLocation:f.default.func,defaultLocation:f.default.string,deviceExistInLocation:f.default.func,deviceInLocation:f.default.bool}},"./src/components/SettingsList/SettingsList.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0}),e.SettingsList=void 0;var i=n("./node_modules/react/react.js"),o=r(i),u=n("./node_modules/prop-types/index.js"),a=r(u),s=n("./src/data/componentsNames.js"),l=n("./src/components/SettingsListItem/SettingsListItem.js");(e.SettingsList=function(t){return o.default.createElement("div",{className:"settings-block"},t.settings.items.map(function(e,n){var r=s.settingsComponents[e.name];return o.default.createElement(l.SettingsListItem,{key:n,addDescription:t.addDescription,styleName:"settings-"+e.name.toLowerCase(),name:e.name,deleteItem:t.deleteItem,setItemValue:t.setItemValue,setParameters:t.setParameters,checked:e.data,data:e.data,params:e.params,description:e.description,id:n},o.default.createElement(r,null))}))}).propTypes={settings:a.default.object,width:a.default.number,addDescription:a.default.func,deleteItem:a.default.func,setItemValue:a.default.func,setParameters:a.default.func}},"./src/components/SettingsListItem/SettingsListItem.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0}),e.SettingsListItem=void 0;var i=n("./node_modules/react/react.js"),o=r(i);n("./src/components/SettingsListItem/index.scss");var u=n("./node_modules/prop-types/index.js"),a=r(u);(e.SettingsListItem=function(t){return o.default.createElement("div",{className:"settings "+t.styleName},o.default.createElement("div",{className:"item-header"},o.default.createElement("p",{className:"item-header__name"},t.name),o.default.createElement("button",{className:"item-header__delete-btn",onClick:function(){return t.deleteItem(t.id)}})),o.default.createElement("div",null,o.default.createElement("label",null,o.default.createElement("input",{className:"description-input",placeholder:"Description",type:"text",value:t.description,onChange:function(e){return t.addDescription(t.id,e.target.value)}}))),o.default.cloneElement(t.children,{styleName:"item-body",setItemValue:t.setItemValue,setParameters:t.setParameters,itemId:t.id,checked:t.checked,data:t.data,params:t.params,showMinMax:!0}))}).propTypes={styleName:a.default.string,setItemValue:a.default.func,checked:a.default.any,id:a.default.number,name:a.default.string,addDescription:a.default.func,deleteItem:a.default.func.isRequired,children:a.default.any,description:a.default.string,data:a.default.any,setParameters:a.default.func,params:a.default.object}},"./src/components/SettingsListItem/index.scss":function(t,e){},"./src/components/TimerSettings/Timer.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),s=n("./node_modules/react/react.js"),l=r(s),c=n("./node_modules/prop-types/index.js"),f=r(c);n("./src/components/TimerSettings/TimerStyle.scss");var h=n("./src/components/RangeSettings/Range.js"),p=r(h),d=function(t){function e(t){i(this,e);var n=o(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return n.changeHours=function(t){n.setState({hours:t.target.value})},n.changeMinutes=function(t){n.setState({minutes:t.target.value})},n.setTimerValue=function(){n.props.setItemValue(n.state.hours+":"+n.state.minutes,n.props.itemId,n.props.deviceId)},n.hoursKeyDown=function(t){(t.keyCode<47||t.keyCode>58)&&8!==t.keyCode&&t.preventDefault(),parseInt(t.target.value+t.key)>99&&t.preventDefault()},n.minutesKeyDown=function(t){(t.keyCode<47||t.keyCode>58)&&8!==t.keyCode&&t.preventDefault(),parseInt(t.target.value+t.key)>59&&t.preventDefault()},n.state={hours:0,minutes:0},n}return u(e,t),a(e,[{key:"componentDidMount",value:function(){if(void 0!==this.props.data){var t=this.props.data.split(":");this.setState({hours:t[0],minutes:t[1]})}}},{key:"render",value:function(){return l.default.createElement("div",{className:"m-time "+this.props.styleName},l.default.createElement("div",{className:"showtime"},l.default.createElement("input",{className:"showtime__time",type:"text",value:this.state.hours,onChange:this.changeHours,onKeyDown:this.hoursKeyDown}),l.default.createElement("span",{className:"showtime__separater"},":"),l.default.createElement("input",{className:"showtime__time",type:"text",value:this.state.minutes,onChange:this.changeMinutes,onKeyDown:this.minutesKeyDown})),l.default.createElement("div",{className:"sliders"},l.default.createElement("div",{className:"sliders__time-text"},"Hours"),l.default.createElement(p.default,{className:"u-slider-time",min:0,max:99,setItemValue:this.props.setItemValue,onTimerChange:this.changeHours,setTimerValue:this.setTimerValue,hideLabel:!0,data:this.state.hours}),l.default.createElement("div",{className:"sliders__time-text"},"Minutes"),l.default.createElement(p.default,{className:"u-slider-time",min:0,max:59,setItemValue:this.props.setItemValue,onTimerChange:this.changeMinutes,setTimerValue:this.setTimerValue,hideLabel:!0,data:this.state.minutes})))}}]),e}(l.default.Component);e.default=d,d.propTypes={styleName:f.default.string,value:f.default.string,onChange:f.default.func,setItemValue:f.default.func,itemId:f.default.number,newValue:f.default.string,data:f.default.string,deviceId:f.default.string}},"./src/components/TimerSettings/TimerStyle.scss":function(t,e){},"./src/components/ToggleSettings/ToggleSettings.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),s=n("./node_modules/react/react.js"),l=r(s),c=n("./node_modules/prop-types/index.js"),f=r(c);n("./src/components/ToggleSettings/ToggleStyle.scss");var h=function(t){function e(t){i(this,e);var n=o(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return n.onChangeValue=function(t){n.props.setItemValue(!n.props.checked,n.props.itemId,n.props.deviceId)},n}return u(e,t),a(e,[{key:"render",value:function(){return l.default.createElement("div",{className:""+this.props.styleName},l.default.createElement("label",{className:"switch"},l.default.createElement("input",{type:"checkbox",checked:this.props.checked,onChange:this.onChangeValue}),l.default.createElement("div",{className:"slider round"})))}}]),e}(l.default.Component);e.default=h,h.propTypes={device:f.default.object,styleName:f.default.string,checked:f.default.bool.isRequired,setItemValue:f.default.func,itemId:f.default.any,newValue:f.default.string,deviceId:f.default.string},h.defaultProps={checked:!1}},"./src/components/ToggleSettings/ToggleStyle.scss":function(t,e){},"./src/components/ValueSettings/Value.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),s=n("./node_modules/react/react.js"),l=r(s),c=n("./node_modules/prop-types/index.js"),f=r(c);n("./src/components/ValueSettings/ValueStyle.scss");var h=function(t){function e(t){i(this,e);var n=o(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return n.setTextValue=function(t){n.props.setItemValue(n.state.value,n.props.itemId,n.props.deviceId)},n.onChangeValue=function(t){var e=t.target.value;n.setState({value:e})},n.state={value:""},n}return u(e,t),a(e,[{key:"componentDidMount",value:function(){void 0!==this.props.data&&this.setState({value:this.props.data})}},{key:"render",value:function(){return l.default.createElement("div",{className:""+this.props.styleName},l.default.createElement("input",{type:"text",className:"value_input",placeholder:"Input...",value:this.state.value,onChange:this.onChangeValue,onBlur:this.setTextValue}))}}]),e}(l.default.Component);e.default=h,h.propTypes={styleName:f.default.string,value:f.default.string,onChangeValue:f.default.func,setItemValue:f.default.func,itemId:f.default.number,newValue:f.default.string,data:f.default.string,deviceId:f.default.string}},"./src/components/ValueSettings/ValueStyle.scss":function(t,e){},"./src/data/componentsNames.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0}),e.settingsComponents=void 0;var i=n("./src/components/RangeSettings/Range.js"),o=r(i),u=n("./src/components/ToggleSettings/ToggleSettings.js"),a=r(u),s=n("./src/components/TimerSettings/Timer.js"),l=r(s),c=n("./src/components/ValueSettings/Value.js"),f=r(c),h=n("./src/components/Chart/Chart.js"),p=r(h);e.settingsComponents={LineChart:p.default,Range:o.default,Timer:l.default,Value:f.default,Toggle:a.default}},"./src/pages/Builder/Builder.js":function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function u(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function a(t){return{device:t.builder.device,status:t.builder.uploadStatus,errorText:t.builder.errorText}}function s(t){return{deleteItem:(0,h.bindActionCreators)(x.deleteItem,t),resetBuilder:(0,h.bindActionCreators)(x.resetProto,t),editDevice:(0,h.bindActionCreators)(x.editDevice,t),clearAddStatus:(0,h.bindActionCreators)(x.clearAddStatus,t)}}Object.defineProperty(e,"__esModule",{value:!0});var l=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),c=n("./node_modules/react/react.js"),f=r(c),h=n("./node_modules/redux/es/index.js"),p=n("./node_modules/react-redux/es/index.js");n("./src/pages/Builder/builder.scss");var d=n("./src/components/DeviceForm/deviceForm.js"),v=r(d),m=n("./src/components/Prototype/Prototype.js"),y=r(m),g=n("./src/components/Message/Message.js"),_=n("./node_modules/prop-types/index.js"),b=r(_),x=n("./src/actions/builder.action.js"),w=function(t){function e(){return i(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return u(e,t),l(e,[{key:"componentWillMount",value:function(){void 0!==this.props.match.params.id?this.props.editDevice(this.props.match.params.id):this.props.resetBuilder()}},{key:"componentDidUpdate",value:function(){var t=this;"DONE"===this.props.status&&setTimeout(function(){t.props.resetBuilder(),t.props.history.push("/devices")},1e3)}},{key:"render",value:function(){return f.default.createElement("section",{className:"builder device-list"},f.default.createElement("h1",{className:"device-list__title"},"Device Builder"),f.default.createElement(v.default,null),f.default.createElement(g.Message,{clearStatus:this.props.clearAddStatus,status:this.props.status,header:"Error",text:this.props.errorText}),f.default.createElement("h3",{className:"builder__title"},"Prototype"),f.default.createElement(y.default,{device:this.props.device,deleteItem:this.props.deleteItem}))}}]),e}(c.Component);w.propTypes={status:b.default.string,device:b.default.object,resetBuilder:b.default.func,deleteItem:b.default.func,history:b.default.object,match:b.default.object,params:b.default.object,id:b.default.string,editDevice:b.default.func,clearAddStatus:b.default.func,errorText:b.default.string},e.default=(0,p.connect)(a,s)(w)},"./src/pages/Builder/builder.scss":function(t,e){}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vMC5pbmRleF9idW5kbGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jbGFzc25hbWVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vY3JlYXRlLXJlYWN0LWNsYXNzL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vZDMvYnVpbGQvZDMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9mb3JtLWRhdGEtdG8tb2JqZWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL34vZm9ybXN5LXJlYWN0L2xpYi9EZWNvcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vfi9mb3Jtc3ktcmVhY3QvbGliL0hPQy5qcyIsIndlYnBhY2s6Ly8vLi9+L2Zvcm1zeS1yZWFjdC9saWIvTWl4aW4uanMiLCJ3ZWJwYWNrOi8vLy4vfi9mb3Jtc3ktcmVhY3QvbGliL21haW4uanMiLCJ3ZWJwYWNrOi8vLy4vfi9mb3Jtc3ktcmVhY3QvbGliL3V0aWxzLmpzIiwid2VicGFjazovLy8uL34vZm9ybXN5LXJlYWN0L2xpYi92YWxpZGF0aW9uUnVsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1pbnB1dC1hdXRvc2l6ZS9saWIvQXV0b3NpemVJbnB1dC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LXNlbGVjdC9saWIvQXN5bmMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1zZWxlY3QvbGliL0FzeW5jQ3JlYXRhYmxlLmpzIiwid2VicGFjazovLy8uL34vcmVhY3Qtc2VsZWN0L2xpYi9DcmVhdGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1zZWxlY3QvbGliL09wdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LXNlbGVjdC9saWIvU2VsZWN0LmpzIiwid2VicGFjazovLy8uL34vcmVhY3Qtc2VsZWN0L2xpYi9WYWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LXNlbGVjdC9saWIvdXRpbHMvZGVmYXVsdEFycm93UmVuZGVyZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1zZWxlY3QvbGliL3V0aWxzL2RlZmF1bHRDbGVhclJlbmRlcmVyLmpzIiwid2VicGFjazovLy8uL34vcmVhY3Qtc2VsZWN0L2xpYi91dGlscy9kZWZhdWx0RmlsdGVyT3B0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LXNlbGVjdC9saWIvdXRpbHMvZGVmYXVsdE1lbnVSZW5kZXJlci5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LXNlbGVjdC9saWIvdXRpbHMvc3RyaXBEaWFjcml0aWNzLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9hbWQtb3B0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BdXRoL0ZpZWxkL0ZpZWxkLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0NoYXJ0L0F4aXMvQXhpcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9DaGFydC9DaGFydC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9DaGFydC9Eb3RzL0RvdHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQ2hhcnQvR3JpZC9HcmlkLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0NoYXJ0L0xpbmVDaGFydC9MaW5lQ2hhcnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvRGV2aWNlRm9ybS9kZXZpY2VGb3JtLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1Byb3RvdHlwZS9Qcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvUmFuZ2VTZXR0aW5ncy9SYW5nZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZWxlY3RMb2NhdGlvbi9TZWxlY3RMb2NhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZXR0aW5nc0xpc3QvU2V0dGluZ3NMaXN0LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NldHRpbmdzTGlzdEl0ZW0vU2V0dGluZ3NMaXN0SXRlbS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9UaW1lclNldHRpbmdzL1RpbWVyLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1RvZ2dsZVNldHRpbmdzL1RvZ2dsZVNldHRpbmdzLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1ZhbHVlU2V0dGluZ3MvVmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2RhdGEvY29tcG9uZW50c05hbWVzLmpzIiwid2VicGFjazovLy8uL3NyYy9wYWdlcy9CdWlsZGVyL0J1aWxkZXIuanMiXSwibmFtZXMiOlsid2VicGFja0pzb25wIiwiLi9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyIsIl9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fIiwiX3R5cGVvZiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwib2JqIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJjbGFzc05hbWVzIiwiY2xhc3NlcyIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJhcmciLCJhcmdUeXBlIiwicHVzaCIsIkFycmF5IiwiaXNBcnJheSIsImFwcGx5Iiwia2V5IiwiaGFzT3duIiwiY2FsbCIsImpvaW4iLCJoYXNPd25Qcm9wZXJ0eSIsInVuZGVmaW5lZCIsIndpbmRvdyIsIi4vbm9kZV9tb2R1bGVzL2NyZWF0ZS1yZWFjdC1jbGFzcy9pbmRleC5qcyIsIlJlYWN0IiwiZmFjdG9yeSIsIkVycm9yIiwiUmVhY3ROb29wVXBkYXRlUXVldWUiLCJDb21wb25lbnQiLCJ1cGRhdGVyIiwiaXNWYWxpZEVsZW1lbnQiLCIuL25vZGVfbW9kdWxlcy9kMy9idWlsZC9kMy5qcyIsIl9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyIsImdsb2JhbCIsImFzY2VuZGluZ0NvbXBhcmF0b3IiLCJmIiwiZCIsIngiLCJhc2NlbmRpbmciLCJwYWlyIiwiYSIsImIiLCJ0aWNrSW5jcmVtZW50Iiwic3RhcnQiLCJzdG9wIiwiY291bnQiLCJzdGVwIiwiTWF0aCIsIm1heCIsInBvd2VyIiwiZmxvb3IiLCJsb2ciLCJMTjEwIiwiZXJyb3IiLCJwb3ciLCJlMTAiLCJlNSIsImUyIiwidGlja1N0ZXAiLCJzdGVwMCIsImFicyIsInN0ZXAxIiwidHJhbnNsYXRlWCIsInRyYW5zbGF0ZVkiLCJ5IiwibnVtYmVyJDEiLCJzY2FsZSIsImNlbnRlciIsIm9mZnNldCIsImJhbmR3aWR0aCIsInJvdW5kIiwiZW50ZXJpbmciLCJ0aGlzIiwiX19heGlzIiwiYXhpcyIsIm9yaWVudCIsImNvbnRleHQiLCJ2YWx1ZXMiLCJ0aWNrVmFsdWVzIiwidGlja3MiLCJ0aWNrQXJndW1lbnRzIiwiZG9tYWluIiwiZm9ybWF0IiwidGlja0Zvcm1hdCIsImlkZW50aXR5JDEiLCJzcGFjaW5nIiwidGlja1NpemVJbm5lciIsInRpY2tQYWRkaW5nIiwicmFuZ2UiLCJyYW5nZTAiLCJyYW5nZTEiLCJwb3NpdGlvbiIsImNvcHkiLCJzZWxlY3Rpb24iLCJwYXRoIiwic2VsZWN0QWxsIiwiZGF0YSIsInRpY2siLCJvcmRlciIsInRpY2tFeGl0IiwiZXhpdCIsInRpY2tFbnRlciIsImVudGVyIiwiYXBwZW5kIiwiYXR0ciIsImxpbmUiLCJzZWxlY3QiLCJ0ZXh0IiwibWVyZ2UiLCJpbnNlcnQiLCJrIiwidG9wIiwiYm90dG9tIiwidHJhbnNpdGlvbiIsImVwc2lsb24iLCJpc0Zpbml0ZSIsInRyYW5zZm9ybSIsImdldEF0dHJpYnV0ZSIsInAiLCJwYXJlbnROb2RlIiwicmVtb3ZlIiwibGVmdCIsInJpZ2h0IiwidGlja1NpemVPdXRlciIsImZpbHRlciIsImVhY2giLCJfIiwic2xpY2UkMSIsInNsaWNlIiwidGlja1NpemUiLCJheGlzVG9wIiwiYXhpc1JpZ2h0IiwiYXhpc0JvdHRvbSIsImF4aXNMZWZ0IiwiZGlzcGF0Y2giLCJ0IiwibiIsIkRpc3BhdGNoIiwicGFyc2VUeXBlbmFtZXMiLCJ0eXBlbmFtZXMiLCJ0eXBlcyIsInRyaW0iLCJzcGxpdCIsIm1hcCIsIm5hbWUiLCJpbmRleE9mIiwidHlwZSIsImdldCIsImMiLCJ2YWx1ZSIsInNldCIsImNhbGxiYWNrIiwibm9vcCIsImNvbmNhdCIsImNyZWF0b3JJbmhlcml0IiwiZG9jdW1lbnQiLCJvd25lckRvY3VtZW50IiwidXJpIiwibmFtZXNwYWNlVVJJIiwieGh0bWwiLCJkb2N1bWVudEVsZW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRvckZpeGVkIiwiZnVsbG5hbWUiLCJzcGFjZSIsImxvY2FsIiwibG9jYWwkMSIsIkxvY2FsIiwibmV4dElkIiwidG9TdHJpbmciLCJmaWx0ZXJDb250ZXh0TGlzdGVuZXIiLCJsaXN0ZW5lciIsImluZGV4IiwiZ3JvdXAiLCJjb250ZXh0TGlzdGVuZXIiLCJldmVudCIsInJlbGF0ZWQiLCJyZWxhdGVkVGFyZ2V0IiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJldmVudDEiLCJldmVudDAiLCJfX2RhdGFfXyIsInBhcnNlVHlwZW5hbWVzJDEiLCJvblJlbW92ZSIsInR5cGVuYW1lIiwib24iLCJfX29uIiwibyIsImoiLCJtIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNhcHR1cmUiLCJvbkFkZCIsIndyYXAiLCJmaWx0ZXJFdmVudHMiLCJhZGRFdmVudExpc3RlbmVyIiwiY3VzdG9tRXZlbnQiLCJ0aGF0IiwiYXJncyIsInNvdXJjZUV2ZW50Iiwibm9uZSIsImVtcHR5JDEiLCJFbnRlck5vZGUiLCJwYXJlbnQiLCJkYXR1bSIsIl9uZXh0IiwiX3BhcmVudCIsImJpbmRJbmRleCIsInVwZGF0ZSIsIm5vZGUiLCJncm91cExlbmd0aCIsImRhdGFMZW5ndGgiLCJiaW5kS2V5Iiwia2V5VmFsdWUiLCJub2RlQnlLZXlWYWx1ZSIsImtleVZhbHVlcyIsImtleVByZWZpeCIsImFzY2VuZGluZyQxIiwiTmFOIiwiYXR0clJlbW92ZSIsInJlbW92ZUF0dHJpYnV0ZSIsImF0dHJSZW1vdmVOUyIsInJlbW92ZUF0dHJpYnV0ZU5TIiwiYXR0ckNvbnN0YW50Iiwic2V0QXR0cmlidXRlIiwiYXR0ckNvbnN0YW50TlMiLCJzZXRBdHRyaWJ1dGVOUyIsImF0dHJGdW5jdGlvbiIsInYiLCJhdHRyRnVuY3Rpb25OUyIsInN0eWxlUmVtb3ZlIiwic3R5bGUiLCJyZW1vdmVQcm9wZXJ0eSIsInN0eWxlQ29uc3RhbnQiLCJwcmlvcml0eSIsInNldFByb3BlcnR5Iiwic3R5bGVGdW5jdGlvbiIsInN0eWxlVmFsdWUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiZGVmYXVsdFZpZXciLCJnZXRDb21wdXRlZFN0eWxlIiwicHJvcGVydHlSZW1vdmUiLCJwcm9wZXJ0eUNvbnN0YW50IiwicHJvcGVydHlGdW5jdGlvbiIsImNsYXNzQXJyYXkiLCJzdHJpbmciLCJjbGFzc0xpc3QiLCJDbGFzc0xpc3QiLCJfbm9kZSIsIl9uYW1lcyIsImNsYXNzZWRBZGQiLCJuYW1lcyIsImxpc3QiLCJhZGQiLCJjbGFzc2VkUmVtb3ZlIiwiY2xhc3NlZFRydWUiLCJjbGFzc2VkRmFsc2UiLCJjbGFzc2VkRnVuY3Rpb24iLCJ0ZXh0UmVtb3ZlIiwidGV4dENvbnRlbnQiLCJ0ZXh0Q29uc3RhbnQiLCJ0ZXh0RnVuY3Rpb24iLCJodG1sUmVtb3ZlIiwiaW5uZXJIVE1MIiwiaHRtbENvbnN0YW50IiwiaHRtbEZ1bmN0aW9uIiwicmFpc2UiLCJuZXh0U2libGluZyIsImFwcGVuZENoaWxkIiwibG93ZXIiLCJwcmV2aW91c1NpYmxpbmciLCJpbnNlcnRCZWZvcmUiLCJmaXJzdENoaWxkIiwiY29uc3RhbnROdWxsIiwicmVtb3ZlQ2hpbGQiLCJkaXNwYXRjaEV2ZW50IiwicGFyYW1zIiwiQ3VzdG9tRXZlbnQiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiZGV0YWlsIiwiZGlzcGF0Y2hDb25zdGFudCIsImRpc3BhdGNoRnVuY3Rpb24iLCJTZWxlY3Rpb24iLCJncm91cHMiLCJwYXJlbnRzIiwiX2dyb3VwcyIsIl9wYXJlbnRzIiwicm9vdCIsIm5vcHJvcGFnYXRpb24iLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJ5ZXNkcmFnIiwidmlldyIsIm5vY2xpY2siLCJzZWxlY3Rpb24kJDEiLCJub2V2ZW50Iiwic2V0VGltZW91dCIsIk1velVzZXJTZWxlY3QiLCJfX25vc2VsZWN0IiwiRHJhZ0V2ZW50IiwidGFyZ2V0Iiwic3ViamVjdCIsImlkIiwiYWN0aXZlIiwiZHgiLCJkeSIsImlkZW50aWZpZXIiLCJkZWZhdWx0RmlsdGVyJDEiLCJidXR0b24iLCJkZWZhdWx0Q29udGFpbmVyIiwiZGVmYXVsdFN1YmplY3QiLCJ0b3VjaGFibGUiLCJleHRlbmQiLCJkZWZpbml0aW9uIiwiT2JqZWN0IiwiY3JlYXRlIiwiQ29sb3IiLCJjb2xvciIsInRvTG93ZXJDYXNlIiwicmVIZXgzIiwiZXhlYyIsInBhcnNlSW50IiwiUmdiIiwicmVIZXg2IiwicmdibiIsInJlUmdiSW50ZWdlciIsInJlUmdiUGVyY2VudCIsInJlUmdiYUludGVnZXIiLCJyZ2JhIiwicmVSZ2JhUGVyY2VudCIsInJlSHNsUGVyY2VudCIsImhzbGEiLCJyZUhzbGFQZXJjZW50IiwibmFtZWQiLCJyIiwiZyIsInJnYkNvbnZlcnQiLCJyZ2IiLCJvcGFjaXR5IiwiaCIsInMiLCJsIiwiSHNsIiwiaHNsQ29udmVydCIsIm1pbiIsImhzbCIsImhzbDJyZ2IiLCJtMSIsIm0yIiwibGFiQ29udmVydCIsIkxhYiIsIkhjbCIsImRlZzJyYWQiLCJjb3MiLCJzaW4iLCJyZ2IyeHl6IiwieHl6MmxhYiIsIlhuIiwiWW4iLCJabiIsImxhYiIsInQzIiwidDIiLCJ0MCIsImxhYjJ4eXoiLCJ0MSIsInh5ejJyZ2IiLCJoY2xDb252ZXJ0IiwiYXRhbjIiLCJyYWQyZGVnIiwic3FydCIsImhjbCIsImN1YmVoZWxpeENvbnZlcnQiLCJDdWJlaGVsaXgiLCJCQ19EQSIsIkVEIiwiRUIiLCJibCIsIkUiLCJDIiwiRCIsImN1YmVoZWxpeCIsImJhc2lzIiwidjAiLCJ2MSIsInYyIiwidjMiLCJsaW5lYXIiLCJleHBvbmVudGlhbCIsImh1ZSIsImNvbnN0YW50JDMiLCJpc05hTiIsImdhbW1hIiwibm9nYW1tYSIsInJnYlNwbGluZSIsInNwbGluZSIsImNvbG9ycyIsImNvbG9yJCQxIiwiemVybyIsIm9uZSIsInBhcnNlQ3NzIiwiaWRlbnRpdHkkMiIsImNzc05vZGUiLCJjc3NSb290IiwiY3NzVmlldyIsImRlY29tcG9zZSIsInBhcnNlU3ZnIiwic3ZnTm9kZSIsImJhc2VWYWwiLCJjb25zb2xpZGF0ZSIsIm1hdHJpeCIsImUiLCJpbnRlcnBvbGF0ZVRyYW5zZm9ybSIsInBhcnNlIiwicHhDb21tYSIsInB4UGFyZW4iLCJkZWdQYXJlbiIsInBvcCIsInRyYW5zbGF0ZSIsInhhIiwieWEiLCJ4YiIsInliIiwicSIsInJlaW50ZXJwb2xhdGUiLCJyb3RhdGUiLCJza2V3WCIsInNjYWxlWCIsInNjYWxlWSIsImNvc2giLCJleHAiLCJzaW5oIiwidGFuaCIsImhzbCQxIiwiaHVlJCQxIiwiZW5kIiwibGFiJDEiLCJoY2wkMSIsImN1YmVoZWxpeCQxIiwiY3ViZWhlbGl4R2FtbWEiLCJjdWJlaGVsaXgkJDEiLCJub3ciLCJjbG9ja05vdyIsInNldEZyYW1lIiwiY2xlYXJOb3ciLCJjbG9jayIsImNsb2NrU2tldyIsIlRpbWVyIiwiX2NhbGwiLCJfdGltZSIsInRpbWVyIiwiZGVsYXkiLCJ0aW1lIiwicmVzdGFydCIsInRpbWVyRmx1c2giLCJmcmFtZSIsInRhc2tIZWFkIiwid2FrZSIsImNsb2NrTGFzdCIsInRpbWVvdXQiLCJuYXAiLCJwb2tlIiwicG9rZURlbGF5IiwiSW5maW5pdHkiLCJ0YXNrVGFpbCIsInNsZWVwIiwiY2xlYXJUaW1lb3V0IiwiaW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJpbml0Iiwic2NoZWR1bGUiLCJfX3RyYW5zaXRpb24iLCJzdGF0ZSIsIkNSRUFURUQiLCJzZXQkMSIsIlNUQVJUSU5HIiwiZ2V0JDEiLCJzZWxmIiwiZWxhcHNlZCIsIlNDSEVEVUxFRCIsInNjaGVkdWxlcyIsIlNUQVJURUQiLCJ0aW1lb3V0JDEiLCJSVU5OSU5HIiwiRU5ERUQiLCJ0d2VlbiIsImR1cmF0aW9uIiwiZWFzZSIsIkVORElORyIsInR3ZWVuUmVtb3ZlIiwidHdlZW4wIiwidHdlZW4xIiwic2NoZWR1bGUkJDEiLCJzcGxpY2UiLCJ0d2VlbkZ1bmN0aW9uIiwidHdlZW5WYWx1ZSIsIl9pZCIsImF0dHJSZW1vdmUkMSIsImF0dHJSZW1vdmVOUyQxIiwiYXR0ckNvbnN0YW50JDEiLCJpbnRlcnBvbGF0ZSQkMSIsInZhbHVlMSIsInZhbHVlMDAiLCJpbnRlcnBvbGF0ZTAiLCJ2YWx1ZTAiLCJhdHRyQ29uc3RhbnROUyQxIiwiZ2V0QXR0cmlidXRlTlMiLCJhdHRyRnVuY3Rpb24kMSIsInZhbHVlMTAiLCJhdHRyRnVuY3Rpb25OUyQxIiwiYXR0clR3ZWVuTlMiLCJfdmFsdWUiLCJhdHRyVHdlZW4iLCJkZWxheUZ1bmN0aW9uIiwiZGVsYXlDb25zdGFudCIsImR1cmF0aW9uRnVuY3Rpb24iLCJkdXJhdGlvbkNvbnN0YW50IiwiZWFzZUNvbnN0YW50IiwiZXZlcnkiLCJvbkZ1bmN0aW9uIiwib24wIiwib24xIiwic2l0IiwicmVtb3ZlRnVuY3Rpb24iLCJzdHlsZVJlbW92ZSQxIiwic3R5bGVSZW1vdmVFbmQiLCJzdHlsZUNvbnN0YW50JDEiLCJzdHlsZUZ1bmN0aW9uJDEiLCJzdHlsZVR3ZWVuIiwidGV4dENvbnN0YW50JDEiLCJ0ZXh0RnVuY3Rpb24kMSIsIlRyYW5zaXRpb24iLCJfbmFtZSIsIm5ld0lkIiwibGluZWFyJDEiLCJxdWFkSW4iLCJxdWFkT3V0IiwicXVhZEluT3V0IiwiY3ViaWNJbiIsImN1YmljT3V0IiwiY3ViaWNJbk91dCIsInNpbkluIiwiaGFsZlBpIiwic2luT3V0Iiwic2luSW5PdXQiLCJwaSIsImV4cEluIiwiZXhwT3V0IiwiZXhwSW5PdXQiLCJjaXJjbGVJbiIsImNpcmNsZU91dCIsImNpcmNsZUluT3V0IiwiYm91bmNlSW4iLCJib3VuY2VPdXQiLCJiMSIsImIwIiwiYjMiLCJiMiIsImI0IiwiYjYiLCJiNSIsImI3IiwiYjgiLCJiOSIsImJvdW5jZUluT3V0IiwiaW5oZXJpdCIsInRpbWluZyIsImRlZmF1bHRUaW1pbmciLCJub3Byb3BhZ2F0aW9uJDEiLCJkZWZhdWx0RmlsdGVyIiwiZGVmYXVsdEV4dGVudCIsInN2ZyIsIm93bmVyU1ZHRWxlbWVudCIsIndpZHRoIiwiaGVpZ2h0IiwibG9jYWwkJDEiLCJfX2JydXNoIiwiZW1wdHkiLCJleHRlbnQiLCJicnVzaFNlbGVjdGlvbiIsImRpbSIsIm91dHB1dCIsImJydXNoWCIsImJydXNoJDEiLCJYIiwiYnJ1c2hZIiwiWSIsImJydXNoIiwib3ZlcmxheSIsInByb3BlcnR5IiwiaW5pdGlhbGl6ZSIsImN1cnNvcnMiLCJoYW5kbGUiLCJoYW5kbGVzIiwicmVkcmF3Iiwic3RhcnRlZCIsImhhbmRsZVNpemUiLCJlbWl0dGVyIiwiRW1pdHRlciIsIm1vdmVkIiwicG9pbnQxIiwibW91c2UiLCJzaGlmdGluZyIsImxvY2tYIiwibG9ja1kiLCJwb2ludCIsIm1vdmluZyIsIm5vZXZlbnQkMSIsIm1vdmUiLCJwb2ludDAiLCJtb2RlIiwiTU9ERV9TUEFDRSIsIk1PREVfRFJBRyIsInNpZ25YIiwiVyIsIncwIiwiZTAiLCJ3MSIsImUxIiwic2lnblkiLCJOIiwibjAiLCJTIiwiczAiLCJuMSIsInMxIiwiTU9ERV9IQU5ETEUiLCJNT0RFX0NFTlRFUiIsImZsaXBYIiwiZmxpcFkiLCJlbWl0IiwiZW5kZWQiLCJ0b3VjaGVzIiwidG91Y2hlbmRpbmciLCJrZXlkb3duZWQiLCJrZXlDb2RlIiwia2V5dXBwZWQiLCJhbHRLZXkiLCJjaGFuZ2VkVG91Y2hlcyIsIm1ldGFLZXkiLCJzaWduc1giLCJzaWduc1kiLCJzaGlmdEtleSIsImJlZm9yZXN0YXJ0IiwiZHJhZ0Rpc2FibGUiLCJpbnRlcnJ1cHQiLCJsaXN0ZW5lcnMiLCJzZWxlY3Rpb24xIiwic2VsZWN0aW9uMCIsImlucHV0IiwiaW50ZXJwb2xhdGVWYWx1ZSIsInN0YXJ0aW5nIiwiQnJ1c2hFdmVudCIsImNvbnN0YW50JDQiLCJjb21wYXJlVmFsdWUiLCJjb21wYXJlIiwic291cmNlIiwiUGF0aCIsIl94MCIsIl95MCIsIl94MSIsIl95MSIsImRlZmF1bHRTb3VyY2UiLCJkZWZhdWx0VGFyZ2V0IiwiZGVmYXVsdFJhZGl1cyIsInJhZGl1cyIsImRlZmF1bHRTdGFydEFuZ2xlIiwic3RhcnRBbmdsZSIsImRlZmF1bHRFbmRBbmdsZSIsImVuZEFuZ2xlIiwiTWFwIiwibWFwJDEiLCJvYmplY3QiLCJjcmVhdGVPYmplY3QiLCJzZXRPYmplY3QiLCJjcmVhdGVNYXAiLCJzZXRNYXAiLCJTZXQiLCJzZXQkMiIsIm9iamVjdENvbnZlcnRlciIsImNvbHVtbnMiLCJGdW5jdGlvbiIsIkpTT04iLCJzdHJpbmdpZnkiLCJjdXN0b21Db252ZXJ0ZXIiLCJyb3ciLCJpbmZlckNvbHVtbnMiLCJyb3dzIiwiY29sdW1uU2V0IiwiZm9yRWFjaCIsImNvbHVtbiIsInRyZWUiLCJ4bSIsInltIiwieHAiLCJ5cCIsIl9yb290IiwibGVhZiIsIngwIiwieTAiLCJ4MSIsInkxIiwiX3giLCJfeSIsIm5leHQiLCJhZGRBbGwiLCJ4eiIsInl6IiwiY292ZXIiLCJyZW1vdmVBbGwiLCJkZWZhdWx0WCIsImRlZmF1bHRZIiwicXVhZHRyZWUiLCJub2RlcyIsIlF1YWR0cmVlIiwibGVhZl9jb3B5IiwidngiLCJ2eSIsImZpbmQiLCJub2RlQnlJZCIsIm5vZGVJZCIsIngkMSIsInkkMSIsImZvcm1hdFNwZWNpZmllciIsInNwZWNpZmllciIsIkZvcm1hdFNwZWNpZmllciIsIm1hdGNoIiwicmUiLCJmaWxsIiwiYWxpZ24iLCJzaWduIiwic3ltYm9sIiwiY29tbWEiLCJwcmVjaXNpb24iLCJmb3JtYXRUeXBlcyIsImRlZmF1bHRMb2NhbGUiLCJsb2NhbGUkMSIsImZvcm1hdExvY2FsZSIsImZvcm1hdFByZWZpeCIsIkFkZGVyIiwicmVzZXQiLCJhZGQkMSIsImFkZGVyIiwiYnYiLCJhdiIsImFjb3MiLCJwaSQzIiwiYXNpbiIsImhhbGZQaSQyIiwiaGF2ZXJzaW4iLCJzaW4kMSIsIm5vb3AkMSIsInN0cmVhbUdlb21ldHJ5IiwiZ2VvbWV0cnkiLCJzdHJlYW0iLCJzdHJlYW1HZW9tZXRyeVR5cGUiLCJzdHJlYW1MaW5lIiwiY29vcmRpbmF0ZXMiLCJjbG9zZWQiLCJjb29yZGluYXRlIiwibGluZVN0YXJ0IiwibGluZUVuZCIsInN0cmVhbVBvbHlnb24iLCJwb2x5Z29uU3RhcnQiLCJwb2x5Z29uRW5kIiwiYXJlYVJpbmdTdGFydCIsImFyZWFTdHJlYW0iLCJhcmVhUG9pbnRGaXJzdCIsImFyZWFSaW5nRW5kIiwiYXJlYVBvaW50IiwibGFtYmRhMDAiLCJwaGkwMCIsImxhbWJkYSIsInBoaSIsInJhZGlhbnMiLCJsYW1iZGEwIiwiY29zUGhpMCIsImNvcyQxIiwicXVhcnRlclBpIiwic2luUGhpMCIsImRMYW1iZGEiLCJzZExhbWJkYSIsImFkTGFtYmRhIiwiY29zUGhpIiwic2luUGhpIiwidSIsImFyZWFSaW5nU3VtIiwic3BoZXJpY2FsIiwiY2FydGVzaWFuIiwiY2FydGVzaWFuRG90IiwiY2FydGVzaWFuQ3Jvc3MiLCJjYXJ0ZXNpYW5BZGRJblBsYWNlIiwiY2FydGVzaWFuU2NhbGUiLCJ2ZWN0b3IiLCJjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlIiwiYm91bmRzUG9pbnQiLCJyYW5nZXMiLCJsYW1iZGEwJDEiLCJsYW1iZGExIiwicGhpMCIsInBoaTEiLCJsaW5lUG9pbnQiLCJwMCIsIm5vcm1hbCIsImVxdWF0b3JpYWwiLCJpbmZsZWN0aW9uIiwicGhpaSIsImRlbHRhIiwibGFtYmRhMiIsInNpZ24kJDEiLCJsYW1iZGFpIiwiZGVncmVlcyQxIiwiYW50aW1lcmlkaWFuIiwiYW5nbGUiLCJib3VuZHNMaW5lU3RhcnQiLCJib3VuZHNTdHJlYW0iLCJib3VuZHNMaW5lRW5kIiwiYm91bmRzUmluZ1BvaW50IiwiZGVsdGFTdW0iLCJsYW1iZGEwMCQxIiwicGhpMDAkMSIsImJvdW5kc1JpbmdTdGFydCIsImJvdW5kc1JpbmdFbmQiLCJlcHNpbG9uJDIiLCJyYW5nZUNvbXBhcmUiLCJyYW5nZUNvbnRhaW5zIiwiY2VudHJvaWRQb2ludCIsImNlbnRyb2lkUG9pbnRDYXJ0ZXNpYW4iLCJ6IiwiVzAiLCJYMCIsIlkwIiwiWjAiLCJjZW50cm9pZExpbmVTdGFydCIsImNlbnRyb2lkU3RyZWFtIiwiY2VudHJvaWRMaW5lUG9pbnRGaXJzdCIsInowIiwiY2VudHJvaWRMaW5lUG9pbnQiLCJ3IiwiVzEiLCJYMSIsIlkxIiwiWjEiLCJjZW50cm9pZExpbmVFbmQiLCJjZW50cm9pZFJpbmdTdGFydCIsImNlbnRyb2lkUmluZ1BvaW50Rmlyc3QiLCJjZW50cm9pZFJpbmdFbmQiLCJjZW50cm9pZFJpbmdQb2ludCIsImxhbWJkYTAwJDIiLCJwaGkwMCQyIiwiY3giLCJjeSIsImN6IiwiWDIiLCJZMiIsIloyIiwicm90YXRpb25JZGVudGl0eSIsInRhdSQzIiwicm90YXRlUmFkaWFucyIsImRlbHRhTGFtYmRhIiwiZGVsdGFQaGkiLCJkZWx0YUdhbW1hIiwiY29tcG9zZSIsInJvdGF0aW9uTGFtYmRhIiwicm90YXRpb25QaGlHYW1tYSIsImZvcndhcmRSb3RhdGlvbkxhbWJkYSIsInJvdGF0aW9uIiwiaW52ZXJ0IiwiY29zRGVsdGFQaGkiLCJzaW5EZWx0YVBoaSIsImNvc0RlbHRhR2FtbWEiLCJzaW5EZWx0YUdhbW1hIiwiY2lyY2xlU3RyZWFtIiwiZGlyZWN0aW9uIiwiY29zUmFkaXVzIiwic2luUmFkaXVzIiwiY2lyY2xlUmFkaXVzIiwiSW50ZXJzZWN0aW9uIiwicG9pbnRzIiwib3RoZXIiLCJlbnRyeSIsImxpbmskMSIsImFycmF5IiwiY2xpcEV4dGVudCIsInZpc2libGUiLCJpbnRlcnBvbGF0ZSIsImZyb20iLCJ0byIsImExIiwiY29ybmVyIiwiY29tcGFyZVBvaW50IiwiY29tcGFyZUludGVyc2VjdGlvbiIsImNhIiwiY2IiLCJhY3RpdmVTdHJlYW0iLCJwb2x5Z29uSW5zaWRlIiwid2luZGluZyIsInBvbHlnb24iLCJhMCIsInJpbmciLCJidWZmZXJTdHJlYW0iLCJzZWdtZW50cyIsImNsZWFuIiwic3RhcnRJbnNpZGUiLCJjbGVhbkluc2lkZSIsImNsaXBQb2x5Z29uIiwiY2xpcFN0cmVhbSIsImZpcnN0Iiwidl8iLCJ4XyIsInlfIiwieF9fIiwieV9fIiwidl9fIiwicmVqb2luIiwicmVzdWx0IiwiY2xpcE1pbiIsImNsaXBNYXgiLCJjbGlwTGluZSIsImNsaXBCdWZmZXIiLCJsZW5ndGhMaW5lU3RhcnQiLCJsZW5ndGhTdHJlYW0iLCJsZW5ndGhQb2ludEZpcnN0IiwibGVuZ3RoTGluZUVuZCIsImxhbWJkYTAkMiIsInNpblBoaTAkMSIsImNvc1BoaTAkMSIsImxlbmd0aFBvaW50IiwiY29zRGVsdGEiLCJzaW5EZWx0YSIsImxlbmd0aFN1bSIsImNvbnRhaW5zR2VvbWV0cnkiLCJjb250YWluc0dlb21ldHJ5VHlwZSIsImNvbnRhaW5zUG9pbnQiLCJkaXN0YW5jZSIsImNvbnRhaW5zTGluZSIsImFiIiwiY29udGFpbnNQb2x5Z29uIiwicG9seWdvbkNvbnRhaW5zIiwicmluZ1JhZGlhbnMiLCJwb2ludFJhZGlhbnMiLCJncmF0aWN1bGVYIiwic2VxdWVuY2UiLCJncmF0aWN1bGVZIiwiZ3JhdGljdWxlIiwibGluZXMiLCJjZWlsIiwiRFgiLCJEWSIsIm91dGxpbmUiLCJyZXZlcnNlIiwiZXh0ZW50TWFqb3IiLCJleHRlbnRNaW5vciIsInN0ZXBNYWpvciIsInN0ZXBNaW5vciIsImdyYXRpY3VsZTEwIiwiYXJlYVJpbmdTdGFydCQxIiwiYXJlYVN0cmVhbSQxIiwiYXJlYVBvaW50Rmlyc3QkMSIsImFyZWFQb2ludCQxIiwieDAwIiwieDAkMSIsInkwMCIsInkwJDEiLCJhcmVhUmluZ1N1bSQxIiwiYXJlYVJpbmdFbmQkMSIsImJvdW5kc1BvaW50JDEiLCJ4MCQyIiwieTAkMiIsImNlbnRyb2lkUG9pbnQkMSIsIlgwJDEiLCJZMCQxIiwiWjAkMSIsImNlbnRyb2lkTGluZVN0YXJ0JDEiLCJjZW50cm9pZFN0cmVhbSQxIiwiY2VudHJvaWRQb2ludEZpcnN0TGluZSIsImNlbnRyb2lkUG9pbnRMaW5lIiwieDAkMyIsInkwJDMiLCJYMSQxIiwiWTEkMSIsIloxJDEiLCJjZW50cm9pZExpbmVFbmQkMSIsImNlbnRyb2lkUmluZ1N0YXJ0JDEiLCJjZW50cm9pZFBvaW50Rmlyc3RSaW5nIiwiY2VudHJvaWRSaW5nRW5kJDEiLCJjZW50cm9pZFBvaW50UmluZyIsIngwMCQxIiwieTAwJDEiLCJYMiQxIiwiWTIkMSIsIloyJDEiLCJQYXRoQ29udGV4dCIsIl9jb250ZXh0IiwibGVuZ3RoUG9pbnRGaXJzdCQxIiwibGVuZ3RoU3RyZWFtJDEiLCJsZW5ndGhQb2ludCQxIiwieDAwJDIiLCJ4MCQ0IiwieTAwJDIiLCJ5MCQ0IiwibGVuZ3RoU3VtJDEiLCJQYXRoU3RyaW5nIiwiX3N0cmluZyIsImNpcmNsZSQxIiwidmFsaWRTZWdtZW50Iiwic2VnbWVudCIsImNsaXBBbnRpbWVyaWRpYW5MaW5lIiwic2lnbjAiLCJzaWduMSIsImNsaXBBbnRpbWVyaWRpYW5JbnRlcnNlY3QiLCJjb3NQaGkxIiwic2luTGFtYmRhMExhbWJkYTEiLCJhdGFuIiwiY2xpcEFudGltZXJpZGlhbkludGVycG9sYXRlIiwidHJhbnNmb3JtZXIiLCJtZXRob2RzIiwiVHJhbnNmb3JtU3RyZWFtIiwiZml0RXh0ZW50IiwicHJvamVjdGlvbiIsImNsaXAiLCJnZW9TdHJlYW0iLCJib3VuZHNTdHJlYW0kMSIsImZpdFNpemUiLCJzaXplIiwicmVzYW1wbGVOb25lIiwicHJvamVjdCIsInJlc2FtcGxlJDEiLCJkZWx0YTIiLCJyZXNhbXBsZUxpbmVUbyIsImMwIiwiYzEiLCJkZXB0aCIsImQyIiwicGhpMiIsIngyIiwieTIiLCJkeDIiLCJkeTIiLCJkeiIsImNvc01pbkRpc3RhbmNlIiwicmVzYW1wbGVTdHJlYW0iLCJtYXhEZXB0aCIsInJpbmdTdGFydCIsInJpbmdQb2ludCIsInJpbmdFbmQiLCJhMDAiLCJiMDAiLCJjMDAiLCJwcm9qZWN0aW9uTXV0YXRvciIsInByb2plY3RBdCIsInByb2plY3RSb3RhdGUiLCJwcm9qZWN0VHJhbnNmb3JtIiwicmVjZW50ZXIiLCJjYWNoZSIsImNhY2hlU3RyZWFtIiwidGhldGEiLCJwcmVjbGlwIiwiY2xpcEFudGltZXJpZGlhbiIsInBvc3RjbGlwIiwiaWRlbnRpdHkkNCIsInByb2plY3RSZXNhbXBsZSIsInJlc2FtcGxlIiwidHJhbnNmb3JtUmFkaWFucyIsImNsaXBBbmdsZSIsImNsaXBDaXJjbGUiLCJjb25pY1Byb2plY3Rpb24iLCJwYXJhbGxlbHMiLCJjeWxpbmRyaWNhbEVxdWFsQXJlYVJhdyIsImZvcndhcmQiLCJjb25pY0VxdWFsQXJlYVJhdyIsInIwIiwic3kwIiwicjB5IiwibXVsdGlwbGV4Iiwic3RyZWFtcyIsInNwaGVyZSIsImF6aW11dGhhbFJhdyIsImF6aW11dGhhbEludmVydCIsInNjIiwiY2MiLCJtZXJjYXRvclJhdyIsInRhbiIsIm1lcmNhdG9yUHJvamVjdGlvbiIsInJlY2xpcCIsInRhbnkiLCJjb25pY0NvbmZvcm1hbFJhdyIsImN5MCIsImZ5IiwiZXF1aXJlY3Rhbmd1bGFyUmF3IiwiY29uaWNFcXVpZGlzdGFudFJhdyIsImd5IiwibngiLCJnbm9tb25pY1JhdyIsInNjYWxlVHJhbnNsYXRlIiwia3giLCJreSIsInR4IiwidHkiLCJvcnRob2dyYXBoaWNSYXciLCJzdGVyZW9ncmFwaGljUmF3IiwidHJhbnN2ZXJzZU1lcmNhdG9yUmF3IiwiZGVmYXVsdFNlcGFyYXRpb24iLCJtZWFuWCIsImNoaWxkcmVuIiwicmVkdWNlIiwibWVhblhSZWR1Y2UiLCJtYXhZIiwibWF4WVJlZHVjZSIsImxlYWZMZWZ0IiwibGVhZlJpZ2h0Iiwic3VtIiwibGVhc3RDb21tb25BbmNlc3RvciIsImFOb2RlcyIsImFuY2VzdG9ycyIsImJOb2RlcyIsImhpZXJhcmNoeSIsImNoaWxkIiwiY2hpbGRzIiwiTm9kZSIsInZhbHVlZCIsImRlZmF1bHRDaGlsZHJlbiIsImVhY2hCZWZvcmUiLCJjb21wdXRlSGVpZ2h0Iiwibm9kZV9jb3B5IiwiY29weURhdGEiLCJzaHVmZmxlJDEiLCJyYW5kb20iLCJleHRlbmRCYXNpcyIsIkIiLCJlbmNsb3Nlc1dlYWtBbGwiLCJlbmNsb3Nlc05vdCIsImVuY2xvc2VCYXNpczIiLCJlbmNsb3NlQmFzaXMzIiwiZHIiLCJlbmNsb3Nlc1dlYWsiLCJlbmNsb3NlQmFzaXMiLCJlbmNsb3NlQmFzaXMxIiwicjEiLCJyMiIsIngyMSIsInkyMSIsInIyMSIsIngzIiwieTMiLCJyMyIsImEyIiwiYTMiLCJjMiIsImMzIiwiZDEiLCJkMyIsIkEiLCJwbGFjZSIsImF4IiwiYXkiLCJkYSIsImRiIiwiZGMiLCJpbnRlcnNlY3RzIiwic2NvcmUiLCJOb2RlJDEiLCJjaXJjbGUiLCJwcmV2aW91cyIsInBhY2tFbmNsb3NlIiwiY2lyY2xlcyIsImFhIiwic2oiLCJzayIsInBhY2siLCJlbmNsb3NlIiwib3B0aW9uYWwiLCJyZXF1aXJlZCIsImNvbnN0YW50WmVybyIsImRlZmF1bHRSYWRpdXMkMSIsInJhZGl1c0xlYWYiLCJwYWNrQ2hpbGRyZW4iLCJwYWRkaW5nIiwidHJhbnNsYXRlQ2hpbGQiLCJkZWZhdWx0SWQiLCJkZWZhdWx0UGFyZW50SWQiLCJwYXJlbnRJZCIsImRlZmF1bHRTZXBhcmF0aW9uJDEiLCJuZXh0TGVmdCIsIm5leHRSaWdodCIsIm1vdmVTdWJ0cmVlIiwid20iLCJ3cCIsInNoaWZ0IiwiY2hhbmdlIiwiZXhlY3V0ZVNoaWZ0cyIsIm5leHRBbmNlc3RvciIsInZpbSIsImFuY2VzdG9yIiwiVHJlZU5vZGUiLCJ0cmVlUm9vdCIsInNxdWFyaWZ5UmF0aW8iLCJyYXRpbyIsIm5vZGVWYWx1ZSIsInN1bVZhbHVlIiwibWluVmFsdWUiLCJtYXhWYWx1ZSIsIm5ld1JhdGlvIiwibWluUmF0aW8iLCJhbHBoYSIsImJldGEiLCJpMCIsImkxIiwiZGljZSIsInRyZWVtYXBEaWNlIiwidHJlZW1hcFNsaWNlIiwibGV4aWNvZ3JhcGhpY09yZGVyIiwiY29tcHV0ZVVwcGVySHVsbEluZGV4ZXMiLCJpbmRleGVzIiwiY3Jvc3MkMSIsIlF1ZXVlIiwiX3NpemUiLCJfZXJyb3IiLCJfdGFza3MiLCJfZGF0YSIsIl93YWl0aW5nIiwiX2FjdGl2ZSIsIl9lbmRlZCIsIl9zdGFydCIsInBva2UkMSIsInN0YXJ0JDEiLCJhYm9ydCIsIm5vYWJvcnQiLCJtYXliZU5vdGlmeSIsInF1ZXVlIiwiY29uY3VycmVuY3kiLCJmaXhDYWxsYmFjayIsInhociIsImhhc1Jlc3BvbnNlIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2UiLCJyZXNwb25zZVRleHQiLCJyZXNwb25zZU9mIiwicmVxdWVzdCQkMSIsIm9yZGluYWwiLCJ1bmtub3duIiwiaW1wbGljaXQiLCJzbGljZSQ1IiwiaGFzIiwiYmFuZCIsInJlc2NhbGUiLCJwYWRkaW5nSW5uZXIiLCJwYWRkaW5nT3V0ZXIiLCJvcmRpbmFsUmFuZ2UiLCJyYW5nZVJvdW5kIiwicG9pbnRpc2giLCJwb2ludCQxIiwiZGVpbnRlcnBvbGF0ZUxpbmVhciIsImNvbnN0YW50JDkiLCJkZWludGVycG9sYXRlQ2xhbXAiLCJkZWludGVycG9sYXRlIiwicmVpbnRlcnBvbGF0ZUNsYW1wIiwicmVpbnRlcnBvbGF0ZSQkMSIsImJpbWFwIiwiZDAiLCJwb2x5bWFwIiwiYmlzZWN0UmlnaHQiLCJjbGFtcCIsImNvbnRpbnVvdXMiLCJwaWVjZXdpc2UiLCJ1bml0IiwibWFwJDMiLCJudW1iZXIkMiIsImludGVycG9sYXRlUm91bmQiLCJsaW5lYXJpc2giLCJuaWNlIiwibGluZWFyJDIiLCJpZGVudGl0eSQ2IiwicmVpbnRlcnBvbGF0ZSQxIiwicG93MTAiLCJwb3dwIiwiYmFzZSIsImxvZ3AiLCJsb2cxMCIsImxvZzIiLCJyZWZsZWN0IiwibG9nJDEiLCJsb2dzIiwicG93cyIsInJhaXNlJDEiLCJleHBvbmVudCIsInBvdyQxIiwic3FydCQxIiwicXVhbnRpbGUiLCJ0aHJlc2hvbGRzIiwidGhyZXNob2xkIiwiaW52ZXJ0RXh0ZW50Iiwic29ydCIsInF1YW50aWxlcyIsInF1YW50aXplJDEiLCJ0aHJlc2hvbGQkMSIsIm5ld0ludGVydmFsIiwiZmxvb3JpIiwib2Zmc2V0aSIsImZpZWxkIiwiZGF0ZSIsIkRhdGUiLCJ0ZXN0Iiwic2V0VGltZSIsInQwJDEiLCJ0MSQxIiwid2Vla2RheSIsInNldERhdGUiLCJnZXREYXRlIiwiZ2V0RGF5Iiwic2V0SG91cnMiLCJnZXRUaW1lem9uZU9mZnNldCIsImR1cmF0aW9uTWludXRlJDEiLCJkdXJhdGlvbldlZWskMSIsInV0Y1dlZWtkYXkiLCJzZXRVVENEYXRlIiwiZ2V0VVRDRGF0ZSIsImdldFVUQ0RheSIsInNldFVUQ0hvdXJzIiwibG9jYWxEYXRlIiwiSCIsIk0iLCJMIiwic2V0RnVsbFllYXIiLCJ1dGNEYXRlIiwiVVRDIiwic2V0VVRDRnVsbFllYXIiLCJuZXdZZWFyIiwiZm9ybWF0TG9jYWxlJDEiLCJsb2NhbGUiLCJuZXdGb3JtYXQiLCJmb3JtYXRzIiwicGFkIiwiY2hhckNvZGVBdCIsInBhZHMiLCJjaGFyQXQiLCJuZXdQYXJzZSIsIm5ld0RhdGUiLCJwYXJzZVNwZWNpZmllciIsImRheSQkMSIsIlUiLCJaIiwicGFyc2VzIiwicGFyc2VQZXJpb2QiLCJwZXJpb2RSZSIsInBlcmlvZExvb2t1cCIsInBhcnNlU2hvcnRXZWVrZGF5Iiwic2hvcnRXZWVrZGF5UmUiLCJzaG9ydFdlZWtkYXlMb29rdXAiLCJwYXJzZVdlZWtkYXkiLCJ3ZWVrZGF5UmUiLCJ3ZWVrZGF5TG9va3VwIiwicGFyc2VTaG9ydE1vbnRoIiwic2hvcnRNb250aFJlIiwic2hvcnRNb250aExvb2t1cCIsInBhcnNlTW9udGgiLCJtb250aFJlIiwibW9udGhMb29rdXAiLCJwYXJzZUxvY2FsZURhdGVUaW1lIiwibG9jYWxlX2RhdGVUaW1lIiwicGFyc2VMb2NhbGVEYXRlIiwibG9jYWxlX2RhdGUiLCJwYXJzZUxvY2FsZVRpbWUiLCJsb2NhbGVfdGltZSIsImZvcm1hdFNob3J0V2Vla2RheSIsImxvY2FsZV9zaG9ydFdlZWtkYXlzIiwiZm9ybWF0V2Vla2RheSIsImxvY2FsZV93ZWVrZGF5cyIsImZvcm1hdFNob3J0TW9udGgiLCJsb2NhbGVfc2hvcnRNb250aHMiLCJnZXRNb250aCIsImZvcm1hdE1vbnRoIiwibG9jYWxlX21vbnRocyIsImZvcm1hdFBlcmlvZCIsImxvY2FsZV9wZXJpb2RzIiwiZ2V0SG91cnMiLCJmb3JtYXRVVENTaG9ydFdlZWtkYXkiLCJmb3JtYXRVVENXZWVrZGF5IiwiZm9ybWF0VVRDU2hvcnRNb250aCIsImdldFVUQ01vbnRoIiwiZm9ybWF0VVRDTW9udGgiLCJmb3JtYXRVVENQZXJpb2QiLCJnZXRVVENIb3VycyIsImRhdGVUaW1lIiwicGVyaW9kcyIsImRheXMiLCJzaG9ydERheXMiLCJtb250aHMiLCJzaG9ydE1vbnRocyIsImZvcm1hdFJlIiwiZm9ybWF0TG9va3VwIiwiZm9ybWF0RGF5T2ZNb250aCIsImZvcm1hdEhvdXIyNCIsIkkiLCJmb3JtYXRIb3VyMTIiLCJmb3JtYXREYXlPZlllYXIiLCJmb3JtYXRNaWxsaXNlY29uZHMiLCJmb3JtYXRNb250aE51bWJlciIsImZvcm1hdE1pbnV0ZXMiLCJmb3JtYXRTZWNvbmRzIiwiZm9ybWF0V2Vla051bWJlclN1bmRheSIsImZvcm1hdFdlZWtkYXlOdW1iZXIiLCJmb3JtYXRXZWVrTnVtYmVyTW9uZGF5IiwiZm9ybWF0WWVhciIsImZvcm1hdEZ1bGxZZWFyIiwiZm9ybWF0Wm9uZSIsIiUiLCJmb3JtYXRMaXRlcmFsUGVyY2VudCIsInV0Y0Zvcm1hdHMiLCJmb3JtYXRVVENEYXlPZk1vbnRoIiwiZm9ybWF0VVRDSG91cjI0IiwiZm9ybWF0VVRDSG91cjEyIiwiZm9ybWF0VVRDRGF5T2ZZZWFyIiwiZm9ybWF0VVRDTWlsbGlzZWNvbmRzIiwiZm9ybWF0VVRDTW9udGhOdW1iZXIiLCJmb3JtYXRVVENNaW51dGVzIiwiZm9ybWF0VVRDU2Vjb25kcyIsImZvcm1hdFVUQ1dlZWtOdW1iZXJTdW5kYXkiLCJmb3JtYXRVVENXZWVrZGF5TnVtYmVyIiwiZm9ybWF0VVRDV2Vla051bWJlck1vbmRheSIsImZvcm1hdFVUQ1llYXIiLCJmb3JtYXRVVENGdWxsWWVhciIsImZvcm1hdFVUQ1pvbmUiLCJwYXJzZURheU9mTW9udGgiLCJwYXJzZUhvdXIyNCIsInBhcnNlRGF5T2ZZZWFyIiwicGFyc2VNaWxsaXNlY29uZHMiLCJwYXJzZU1vbnRoTnVtYmVyIiwicGFyc2VNaW51dGVzIiwicGFyc2VTZWNvbmRzIiwicGFyc2VXZWVrTnVtYmVyU3VuZGF5IiwicGFyc2VXZWVrZGF5TnVtYmVyIiwicGFyc2VXZWVrTnVtYmVyTW9uZGF5IiwicGFyc2VZZWFyIiwicGFyc2VGdWxsWWVhciIsInBhcnNlWm9uZSIsInBhcnNlTGl0ZXJhbFBlcmNlbnQiLCJ1dGNGb3JtYXQiLCJ1dGNQYXJzZSIsInJlcXVvdGUiLCJyZXBsYWNlIiwicmVxdW90ZVJlIiwiUmVnRXhwIiwibnVtYmVyUmUiLCJwZXJjZW50UmUiLCJkYXkiLCJ5ZWFyIiwiZ2V0TWlsbGlzZWNvbmRzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJzdW5kYXkiLCJtb25kYXkiLCJnZXRGdWxsWWVhciIsInV0Y0RheSIsInV0Y1llYXIiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsInV0Y1N1bmRheSIsInV0Y01vbmRheSIsImdldFVUQ0Z1bGxZZWFyIiwiZGVmYXVsdExvY2FsZSQxIiwibG9jYWxlJDIiLCJ0aW1lRm9ybWF0IiwidGltZVBhcnNlIiwiZm9ybWF0SXNvTmF0aXZlIiwidG9JU09TdHJpbmciLCJwYXJzZUlzb05hdGl2ZSIsImRhdGUkMSIsIm51bWJlciQzIiwiY2FsZW5kYXIiLCJ5ZWFyJCQxIiwibW9udGgkJDEiLCJ3ZWVrIiwiaG91ciQkMSIsIm1pbnV0ZSQkMSIsInNlY29uZCQkMSIsIm1pbGxpc2Vjb25kJCQxIiwiZGF0ZSQkMSIsImZvcm1hdE1pbGxpc2Vjb25kIiwiZm9ybWF0U2Vjb25kIiwiZm9ybWF0TWludXRlIiwiZm9ybWF0SG91ciIsImZvcm1hdERheSIsImZvcm1hdFdlZWsiLCJ0aWNrSW50ZXJ2YWwiLCJpbnRlcnZhbCQkMSIsImJpc2VjdG9yIiwidGlja0ludGVydmFscyIsImR1cmF0aW9uWWVhciIsImR1cmF0aW9uU2Vjb25kIiwiZHVyYXRpb25NaW51dGUiLCJkdXJhdGlvbkhvdXIiLCJkdXJhdGlvbkRheSIsImR1cmF0aW9uV2VlayIsImR1cmF0aW9uTW9udGgiLCJyYW1wIiwic2VxdWVudGlhbCIsImludGVycG9sYXRvciIsImFjb3MkMSIsInBpJDQiLCJhc2luJDEiLCJoYWxmUGkkMyIsImFyY0lubmVyUmFkaXVzIiwiaW5uZXJSYWRpdXMiLCJhcmNPdXRlclJhZGl1cyIsIm91dGVyUmFkaXVzIiwiYXJjU3RhcnRBbmdsZSIsImFyY0VuZEFuZ2xlIiwiYXJjUGFkQW5nbGUiLCJwYWRBbmdsZSIsImludGVyc2VjdCIsIngxMCIsInkxMCIsIngzMiIsInkzMiIsImNvcm5lclRhbmdlbnRzIiwicmMiLCJjdyIsIngwMSIsInkwMSIsImxvIiwic3FydCQyIiwib3giLCJveSIsIngxMSIsInkxMSIsIm1heCQyIiwiY3gwIiwiY3gxIiwiY3kxIiwiZHgwIiwiZHkwIiwiZHgxIiwiZHkxIiwiTGluZWFyIiwieCQzIiwieSQzIiwiUmFkaWFsIiwiY3VydmUiLCJfY3VydmUiLCJjdXJ2ZVJhZGlhbCIsInJhZGlhbCIsImxpbmVSYWRpYWwiLCJsaW5rU291cmNlIiwibGlua1RhcmdldCIsImxpbmskMiIsImxpbmsiLCJidWZmZXIiLCJhcmd2Iiwic2xpY2UkNiIsImNvbnN0YW50JDEwIiwiY3VydmVIb3Jpem9udGFsIiwibW92ZVRvIiwiYmV6aWVyQ3VydmVUbyIsImN1cnZlVmVydGljYWwiLCJjdXJ2ZVJhZGlhbCQxIiwicG9pbnRSYWRpYWwiLCJwMSIsInAyIiwicDMiLCJsaW5rSG9yaXpvbnRhbCIsImxpbmtWZXJ0aWNhbCIsImxpbmtSYWRpYWwiLCJwb2ludCQyIiwiQmFzaXMiLCJCYXNpc0Nsb3NlZCIsIkJhc2lzT3BlbiIsIkJ1bmRsZSIsIl9iYXNpcyIsIl9iZXRhIiwicG9pbnQkMyIsIl9rIiwiX3gyIiwiX3kyIiwiQ2FyZGluYWwiLCJ0ZW5zaW9uIiwiQ2FyZGluYWxDbG9zZWQiLCJDYXJkaW5hbE9wZW4iLCJwb2ludCQ0IiwiX2wwMV9hIiwiZXBzaWxvbiQzIiwiX2wwMV8yYSIsIl9sMTJfYSIsIl9sMTJfMmEiLCJfbDIzX2EiLCJfbDIzXzJhIiwiQ2F0bXVsbFJvbSIsIl9hbHBoYSIsIkNhdG11bGxSb21DbG9zZWQiLCJDYXRtdWxsUm9tT3BlbiIsIkxpbmVhckNsb3NlZCIsInNpZ24kMSIsInNsb3BlMyIsImgwIiwiaDEiLCJzbG9wZTIiLCJwb2ludCQ1IiwiTW9ub3RvbmVYIiwiTW9ub3RvbmVZIiwiUmVmbGVjdENvbnRleHQiLCJtb25vdG9uZVgiLCJtb25vdG9uZVkiLCJOYXR1cmFsIiwiY29udHJvbFBvaW50cyIsIlN0ZXAiLCJfdCIsInN0ZXBCZWZvcmUiLCJzdGVwQWZ0ZXIiLCJzdGFja1ZhbHVlIiwic3VtJDIiLCJzZXJpZXMiLCJ4JDQiLCJ5JDQiLCJSZWRCbGFja1RyZWUiLCJSZWRCbGFja05vZGUiLCJSIiwiUCIsIlJlZEJsYWNrUm90YXRlTGVmdCIsIlJlZEJsYWNrUm90YXRlUmlnaHQiLCJSZWRCbGFja0ZpcnN0IiwiY3JlYXRlRWRnZSIsImVkZ2UiLCJlZGdlcyIsInNldEVkZ2VFbmQiLCJjZWxscyIsImhhbGZlZGdlcyIsImNyZWF0ZUJvcmRlckVkZ2UiLCJ2ZXJ0ZXgiLCJjbGlwRWRnZSIsImJ4IiwiYnkiLCJjb25uZWN0RWRnZSIsImZtIiwiZmIiLCJseCIsImx5IiwicngiLCJyeSIsImZ4IiwiY2xpcEVkZ2VzIiwiZXBzaWxvbiQ0IiwiY3JlYXRlQ2VsbCIsInNpdGUiLCJjZWxsSGFsZmVkZ2VBbmdsZSIsImNlbGwiLCJ2YSIsInZiIiwiY2VsbEhhbGZlZGdlU3RhcnQiLCJjZWxsSGFsZmVkZ2VFbmQiLCJzb3J0Q2VsbEhhbGZlZGdlcyIsImNsaXBDZWxscyIsImlDZWxsIiwiaUhhbGZlZGdlIiwibkhhbGZlZGdlcyIsInN0YXJ0WCIsInN0YXJ0WSIsImVuZFgiLCJlbmRZIiwibkNlbGxzIiwidjAwIiwidjAxIiwidjExIiwidjEwIiwiQ2lyY2xlIiwiYXJjIiwiYXR0YWNoQ2lyY2xlIiwibEFyYyIsInJBcmMiLCJsU2l0ZSIsImNTaXRlIiwiclNpdGUiLCJlcHNpbG9uMiQyIiwiaGEiLCJoYyIsImNpcmNsZVBvb2wiLCJiZWZvcmUiLCJmaXJzdENpcmNsZSIsImRldGFjaENpcmNsZSIsIkJlYWNoIiwiY3JlYXRlQmVhY2giLCJiZWFjaCIsImJlYWNoUG9vbCIsImRldGFjaEJlYWNoIiwiYmVhY2hlcyIsInJlbW92ZUJlYWNoIiwiZGlzYXBwZWFyaW5nIiwidW5zaGlmdCIsImlBcmMiLCJuQXJjcyIsImFkZEJlYWNoIiwiZHhsIiwiZHhyIiwiZGlyZWN0cml4IiwibGVmdEJyZWFrUG9pbnQiLCJyaWdodEJyZWFrUG9pbnQiLCJuZXdBcmMiLCJoYiIsInJmb2N4IiwicmZvY3kiLCJwYnkyIiwibGZvY3giLCJsZm9jeSIsInBsYnkyIiwiaGwiLCJhYnkyIiwidHJpYW5nbGVBcmVhIiwibGV4aWNvZ3JhcGhpYyIsIkRpYWdyYW0iLCJzaXRlcyIsIlpvb21FdmVudCIsIlRyYW5zZm9ybSIsInRyYW5zZm9ybSQxIiwiX196b29tIiwiaWRlbnRpdHkkOCIsIm5vcHJvcGFnYXRpb24kMiIsImRlZmF1bHRGaWx0ZXIkMiIsImRlZmF1bHRFeHRlbnQkMSIsIlNWR0VsZW1lbnQiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsImRlZmF1bHRUcmFuc2Zvcm0iLCJkZWZhdWx0V2hlZWxEZWx0YSIsImRlbHRhWSIsImRlbHRhTW9kZSIsInRvdWNoYWJsZSQxIiwiaGkiLCJtaWQiLCJhc2NlbmRpbmdCaXNlY3QiLCJiaXNlY3RMZWZ0IiwicGFpcnMiLCJjcm9zcyIsInZhbHVlczAiLCJ2YWx1ZXMxIiwiZGVzY2VuZGluZyIsIm51bWJlciIsInZhcmlhbmNlIiwidmFsdWVvZiIsIm1lYW4iLCJkZXZpYXRpb24iLCJjb25zdGFudCIsImlkZW50aXR5Iiwic3R1cmdlcyIsIkxOMiIsImhpc3RvZ3JhbSIsInR6IiwiYmluIiwiYmlucyIsImZyZWVkbWFuRGlhY29uaXMiLCJzY290dCIsIm1lZGlhbiIsIm51bWJlcnMiLCJhcnJheXMiLCJtZXJnZWQiLCJwZXJtdXRlIiwicGVybXV0ZXMiLCJzY2FuIiwieGkiLCJ4aiIsInNodWZmbGUiLCJ0cmFuc3Bvc2UiLCJ6aXAiLCJUIiwibmFtZXNwYWNlcyIsInhsaW5rIiwieG1sIiwieG1sbnMiLCJuYW1lc3BhY2UiLCJwcmVmaXgiLCJjcmVhdG9yIiwibWF0Y2hlciIsInNlbGVjdG9yIiwibWF0Y2hlcyIsImVsZW1lbnQiLCJ2ZW5kb3JNYXRjaGVzIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwibWF0Y2hlciQxIiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJzZWxlY3Rpb25fb24iLCJjdXJyZW50IiwiY3JlYXRlU1ZHUG9pbnQiLCJjbGllbnRYIiwiY2xpZW50WSIsIm1hdHJpeFRyYW5zZm9ybSIsImdldFNjcmVlbkNUTSIsImludmVyc2UiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY2xpZW50TGVmdCIsImNsaWVudFRvcCIsInF1ZXJ5U2VsZWN0b3IiLCJzZWxlY3Rpb25fc2VsZWN0Iiwic3ViZ3JvdXBzIiwic3Vibm9kZSIsInN1Ymdyb3VwIiwic2VsZWN0b3JBbGwiLCJxdWVyeVNlbGVjdG9yQWxsIiwic2VsZWN0aW9uX3NlbGVjdEFsbCIsInNlbGVjdGlvbl9maWx0ZXIiLCJzcGFyc2UiLCJzZWxlY3Rpb25fZW50ZXIiLCJfZW50ZXIiLCJjb25zdGFudCQxIiwic2VsZWN0aW9uX2RhdGEiLCJiaW5kIiwiZW50ZXJHcm91cCIsInVwZGF0ZUdyb3VwIiwiX2V4aXQiLCJzZWxlY3Rpb25fZXhpdCIsInNlbGVjdGlvbl9tZXJnZSIsImdyb3VwczAiLCJncm91cHMxIiwibTAiLCJtZXJnZXMiLCJncm91cDAiLCJncm91cDEiLCJzZWxlY3Rpb25fb3JkZXIiLCJzZWxlY3Rpb25fc29ydCIsImNvbXBhcmVOb2RlIiwic29ydGdyb3VwcyIsInNvcnRncm91cCIsInNlbGVjdGlvbl9jYWxsIiwic2VsZWN0aW9uX25vZGVzIiwic2VsZWN0aW9uX25vZGUiLCJzZWxlY3Rpb25fc2l6ZSIsInNlbGVjdGlvbl9lbXB0eSIsInNlbGVjdGlvbl9lYWNoIiwic2VsZWN0aW9uX2F0dHIiLCJzZWxlY3Rpb25fc3R5bGUiLCJzZWxlY3Rpb25fcHJvcGVydHkiLCJjb250YWlucyIsInNlbGVjdGlvbl9jbGFzc2VkIiwic2VsZWN0aW9uX3RleHQiLCJzZWxlY3Rpb25faHRtbCIsInNlbGVjdGlvbl9yYWlzZSIsInNlbGVjdGlvbl9sb3dlciIsInNlbGVjdGlvbl9hcHBlbmQiLCJzZWxlY3Rpb25faW5zZXJ0Iiwic2VsZWN0aW9uX3JlbW92ZSIsInNlbGVjdGlvbl9kYXR1bSIsInNlbGVjdGlvbl9kaXNwYXRjaCIsImNsYXNzZWQiLCJodG1sIiwidG91Y2giLCJwcmV2ZW50RGVmYXVsdCIsImNvbnN0YW50JDIiLCJkcmFnIiwibW91c2Vkb3duZWQiLCJ0b3VjaHN0YXJ0ZWQiLCJ0b3VjaG1vdmVkIiwidG91Y2hlbmRlZCIsImdlc3R1cmUiLCJjb250YWluZXIiLCJtb3VzZW1vdmVkIiwibW91c2V1cHBlZCIsIm1vdXNlbW92aW5nIiwibW91c2Vkb3dueCIsIm1vdXNlZG93bnkiLCJjbGlja0Rpc3RhbmNlMiIsImdlc3R1cmVzIiwidG91Y2hlcyQkMSIsInN1Ymxpc3RlbmVycyIsImNsaWNrRGlzdGFuY2UiLCJkZWZpbmUiLCJyZUkiLCJyZU4iLCJyZVAiLCJhbGljZWJsdWUiLCJhbnRpcXVld2hpdGUiLCJhcXVhIiwiYXF1YW1hcmluZSIsImF6dXJlIiwiYmVpZ2UiLCJiaXNxdWUiLCJibGFjayIsImJsYW5jaGVkYWxtb25kIiwiYmx1ZSIsImJsdWV2aW9sZXQiLCJicm93biIsImJ1cmx5d29vZCIsImNhZGV0Ymx1ZSIsImNoYXJ0cmV1c2UiLCJjaG9jb2xhdGUiLCJjb3JhbCIsImNvcm5mbG93ZXJibHVlIiwiY29ybnNpbGsiLCJjcmltc29uIiwiY3lhbiIsImRhcmtibHVlIiwiZGFya2N5YW4iLCJkYXJrZ29sZGVucm9kIiwiZGFya2dyYXkiLCJkYXJrZ3JlZW4iLCJkYXJrZ3JleSIsImRhcmtraGFraSIsImRhcmttYWdlbnRhIiwiZGFya29saXZlZ3JlZW4iLCJkYXJrb3JhbmdlIiwiZGFya29yY2hpZCIsImRhcmtyZWQiLCJkYXJrc2FsbW9uIiwiZGFya3NlYWdyZWVuIiwiZGFya3NsYXRlYmx1ZSIsImRhcmtzbGF0ZWdyYXkiLCJkYXJrc2xhdGVncmV5IiwiZGFya3R1cnF1b2lzZSIsImRhcmt2aW9sZXQiLCJkZWVwcGluayIsImRlZXBza3libHVlIiwiZGltZ3JheSIsImRpbWdyZXkiLCJkb2RnZXJibHVlIiwiZmlyZWJyaWNrIiwiZmxvcmFsd2hpdGUiLCJmb3Jlc3RncmVlbiIsImZ1Y2hzaWEiLCJnYWluc2Jvcm8iLCJnaG9zdHdoaXRlIiwiZ29sZCIsImdvbGRlbnJvZCIsImdyYXkiLCJncmVlbiIsImdyZWVueWVsbG93IiwiZ3JleSIsImhvbmV5ZGV3IiwiaG90cGluayIsImluZGlhbnJlZCIsImluZGlnbyIsIml2b3J5Iiwia2hha2kiLCJsYXZlbmRlciIsImxhdmVuZGVyYmx1c2giLCJsYXduZ3JlZW4iLCJsZW1vbmNoaWZmb24iLCJsaWdodGJsdWUiLCJsaWdodGNvcmFsIiwibGlnaHRjeWFuIiwibGlnaHRnb2xkZW5yb2R5ZWxsb3ciLCJsaWdodGdyYXkiLCJsaWdodGdyZWVuIiwibGlnaHRncmV5IiwibGlnaHRwaW5rIiwibGlnaHRzYWxtb24iLCJsaWdodHNlYWdyZWVuIiwibGlnaHRza3libHVlIiwibGlnaHRzbGF0ZWdyYXkiLCJsaWdodHNsYXRlZ3JleSIsImxpZ2h0c3RlZWxibHVlIiwibGlnaHR5ZWxsb3ciLCJsaW1lIiwibGltZWdyZWVuIiwibGluZW4iLCJtYWdlbnRhIiwibWFyb29uIiwibWVkaXVtYXF1YW1hcmluZSIsIm1lZGl1bWJsdWUiLCJtZWRpdW1vcmNoaWQiLCJtZWRpdW1wdXJwbGUiLCJtZWRpdW1zZWFncmVlbiIsIm1lZGl1bXNsYXRlYmx1ZSIsIm1lZGl1bXNwcmluZ2dyZWVuIiwibWVkaXVtdHVycXVvaXNlIiwibWVkaXVtdmlvbGV0cmVkIiwibWlkbmlnaHRibHVlIiwibWludGNyZWFtIiwibWlzdHlyb3NlIiwibW9jY2FzaW4iLCJuYXZham93aGl0ZSIsIm5hdnkiLCJvbGRsYWNlIiwib2xpdmUiLCJvbGl2ZWRyYWIiLCJvcmFuZ2UiLCJvcmFuZ2VyZWQiLCJvcmNoaWQiLCJwYWxlZ29sZGVucm9kIiwicGFsZWdyZWVuIiwicGFsZXR1cnF1b2lzZSIsInBhbGV2aW9sZXRyZWQiLCJwYXBheWF3aGlwIiwicGVhY2hwdWZmIiwicGVydSIsInBpbmsiLCJwbHVtIiwicG93ZGVyYmx1ZSIsInB1cnBsZSIsInJlYmVjY2FwdXJwbGUiLCJyZWQiLCJyb3N5YnJvd24iLCJyb3lhbGJsdWUiLCJzYWRkbGVicm93biIsInNhbG1vbiIsInNhbmR5YnJvd24iLCJzZWFncmVlbiIsInNlYXNoZWxsIiwic2llbm5hIiwic2lsdmVyIiwic2t5Ymx1ZSIsInNsYXRlYmx1ZSIsInNsYXRlZ3JheSIsInNsYXRlZ3JleSIsInNub3ciLCJzcHJpbmdncmVlbiIsInN0ZWVsYmx1ZSIsInRlYWwiLCJ0aGlzdGxlIiwidG9tYXRvIiwidHVycXVvaXNlIiwidmlvbGV0Iiwid2hlYXQiLCJ3aGl0ZSIsIndoaXRlc21va2UiLCJ5ZWxsb3ciLCJ5ZWxsb3dncmVlbiIsImRpc3BsYXlhYmxlIiwiYnJpZ2h0ZXIiLCJkYXJrZXIiLCJQSSIsImJhc2lzJDEiLCJiYXNpc0Nsb3NlZCIsImludGVycG9sYXRlUmdiIiwicmdiR2FtbWEiLCJyZ2IkJDEiLCJyZ2JCYXNpcyIsInJnYkJhc2lzQ2xvc2VkIiwiYXJyYXkkMSIsIm5iIiwibmEiLCJyZUEiLCJyZUIiLCJpbnRlcnBvbGF0ZVN0cmluZyIsImFtIiwiYm0iLCJicyIsImJpIiwibGFzdEluZGV4IiwidmFsdWVPZiIsImRlZ3JlZXMiLCJpbnRlcnBvbGF0ZVRyYW5zZm9ybUNzcyIsImludGVycG9sYXRlVHJhbnNmb3JtU3ZnIiwicmhvIiwiU1FSVDIiLCJpbnRlcnBvbGF0ZVpvb20iLCJ1eDAiLCJ1eTAiLCJ1eDEiLCJ1eTEiLCJjb3NocjAiLCJoc2wkMiIsImhzbExvbmciLCJoY2wkMiIsImhjbExvbmciLCJjdWJlaGVsaXgkMiIsImN1YmVoZWxpeExvbmciLCJxdWFudGl6ZSIsInNhbXBsZXMiLCJwZXJmb3JtYW5jZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIlR5cGVFcnJvciIsImludGVydmFsJDEiLCJ0b3RhbCIsImVtcHR5T24iLCJlbXB0eVR3ZWVuIiwic2VsZWN0aW9uX2ludGVycnVwdCIsInRyYW5zaXRpb25fdHdlZW4iLCJ0cmFuc2l0aW9uX2F0dHIiLCJ0cmFuc2l0aW9uX2F0dHJUd2VlbiIsInRyYW5zaXRpb25fZGVsYXkiLCJ0cmFuc2l0aW9uX2R1cmF0aW9uIiwidHJhbnNpdGlvbl9lYXNlIiwidHJhbnNpdGlvbl9maWx0ZXIiLCJ0cmFuc2l0aW9uX21lcmdlIiwidHJhbnNpdGlvbiQkMSIsInRyYW5zaXRpb25fb24iLCJ0cmFuc2l0aW9uX3JlbW92ZSIsInRyYW5zaXRpb25fc2VsZWN0Iiwic2VsZWN0JCQxIiwidHJhbnNpdGlvbl9zZWxlY3RBbGwiLCJTZWxlY3Rpb24kMSIsInRyYW5zaXRpb25fc2VsZWN0aW9uIiwidHJhbnNpdGlvbl9zdHlsZSIsInRyYW5zaXRpb25fc3R5bGVUd2VlbiIsInRyYW5zaXRpb25fdGV4dCIsInRyYW5zaXRpb25fdHJhbnNpdGlvbiIsImlkMCIsImlkMSIsInNlbGVjdGlvbl9wcm90b3R5cGUiLCJwb2x5SW4iLCJjdXN0b20iLCJwb2x5T3V0IiwicG9seUluT3V0IiwiYmFja0luIiwib3ZlcnNob290IiwiYmFja091dCIsImJhY2tJbk91dCIsInRhdSIsImVsYXN0aWNJbiIsImFtcGxpdHVkZSIsInBlcmlvZCIsImVsYXN0aWNPdXQiLCJlbGFzdGljSW5PdXQiLCJzZWxlY3Rpb25fdHJhbnNpdGlvbiIsInJvb3QkMSIsInh5IiwiWFkiLCJudyIsIm5lIiwic2UiLCJzdyIsInBpJDEiLCJoYWxmUGkkMSIsInRhdSQxIiwibWF4JDEiLCJjaG9yZCIsImdyb3VwU3VtcyIsImdyb3VwSW5kZXgiLCJzdWJncm91cEluZGV4IiwiY2hvcmRzIiwic29ydEdyb3VwcyIsInNvcnRTdWJncm91cHMiLCJkaSIsImRqIiwic3ViaW5kZXgiLCJzb3J0Q2hvcmRzIiwic2xpY2UkMiIsImNvbnN0YW50JDUiLCJwaSQyIiwidGF1JDIiLCJ0YXVFcHNpbG9uIiwiY2xvc2VQYXRoIiwibGluZVRvIiwicXVhZHJhdGljQ3VydmVUbyIsImFyY1RvIiwibDAxXzIiLCJ4MjAiLCJ5MjAiLCJsMjFfMiIsImwyMF8yIiwibDIxIiwibDAxIiwidDAxIiwidDIxIiwiY2N3IiwicmliYm9uIiwic3IiLCJzYTAiLCJzYTEiLCJzeDAiLCJ0ciIsInRhMCIsInRhMSIsImNsZWFyIiwia2V5cyIsImVudHJpZXMiLCJuZXN0IiwiY3JlYXRlUmVzdWx0Iiwic2V0UmVzdWx0Iiwic29ydFZhbHVlcyIsInJvbGx1cCIsInZhbHVlc0J5S2V5Iiwic29ydEtleSIsInNvcnRLZXlzIiwicHJvdG8iLCJkc3YiLCJkZWxpbWl0ZXIiLCJjb252ZXJ0IiwicGFyc2VSb3dzIiwidG9rZW4iLCJFT0YiLCJlb2wiLCJFT0wiLCJkZWxpbWl0ZXJDb2RlIiwiZm9ybWF0VmFsdWUiLCJmb3JtYXRSb3dzIiwiZm9ybWF0Um93IiwicmVGb3JtYXQiLCJjc3YiLCJjc3ZQYXJzZSIsImNzdlBhcnNlUm93cyIsImNzdkZvcm1hdCIsImNzdkZvcm1hdFJvd3MiLCJ0c3YiLCJ0c3ZQYXJzZSIsInRzdlBhcnNlUm93cyIsInRzdkZvcm1hdCIsInRzdkZvcm1hdFJvd3MiLCJjZW50ZXIkMSIsImZvcmNlIiwic3giLCJzeSIsImNvbnN0YW50JDYiLCJqaWdnbGUiLCJ0cmVlX2FkZCIsInRyZWVfY292ZXIiLCJ0cmVlX2RhdGEiLCJ2aXNpdCIsInRyZWVfZXh0ZW50IiwiUXVhZCIsInRyZWVfZmluZCIsInF1YWRzIiwidHJlZV9yZW1vdmUiLCJyZXRhaW5lciIsInRyZWVfcm9vdCIsInRyZWVfc2l6ZSIsInRyZWVfdmlzaXQiLCJ0cmVlX3Zpc2l0QWZ0ZXIiLCJ0cmVlX3giLCJ0cmVlX3kiLCJ0cmVlUHJvdG8iLCJ2aXNpdEFmdGVyIiwicHJlZml4RXhwb25lbnQiLCJjb2xsaWRlIiwicXVhZCIsInJqIiwicmkiLCJ5aSIsInN0cmVuZ3RoIiwicmkyIiwiaXRlcmF0aW9ucyIsInByZXBhcmUiLCJyYWRpaSIsImxpbmtzIiwiZGVmYXVsdFN0cmVuZ3RoIiwiZGlzdGFuY2VzIiwic3RyZW5ndGhzIiwiYmlhcyIsImluaXRpYWxpemVTdHJlbmd0aCIsImluaXRpYWxpemVEaXN0YW5jZSIsImluaXRpYWxSYWRpdXMiLCJpbml0aWFsQW5nbGUiLCJzaW11bGF0aW9uIiwiYWxwaGFNaW4iLCJzdGVwcGVyIiwiYWxwaGFUYXJnZXQiLCJhbHBoYURlY2F5IiwiZm9yY2VzIiwidmVsb2NpdHlEZWNheSIsImluaXRpYWxpemVOb2RlcyIsImluaXRpYWxpemVGb3JjZSIsImNsb3Nlc3QiLCJtYW55Qm9keSIsImFjY3VtdWxhdGUiLCJ0aGV0YTIiLCJkaXN0YW5jZU1heDIiLCJkaXN0YW5jZU1pbjIiLCJkaXN0YW5jZU1pbiIsImRpc3RhbmNlTWF4IiwieCQyIiwieSQyIiwiZm9ybWF0RGVjaW1hbCIsInRvRXhwb25lbnRpYWwiLCJjb2VmZmljaWVudCIsImV4cG9uZW50JDEiLCJmb3JtYXRHcm91cCIsImdyb3VwaW5nIiwidGhvdXNhbmRzIiwic3Vic3RyaW5nIiwiZm9ybWF0TnVtZXJhbHMiLCJudW1lcmFscyIsImZvcm1hdERlZmF1bHQiLCJ0b1ByZWNpc2lvbiIsIm91dCIsImZvcm1hdFByZWZpeEF1dG8iLCJmb3JtYXRSb3VuZGVkIiwiIiwidG9GaXhlZCIsInRvVXBwZXJDYXNlIiwiaWRlbnRpdHkkMyIsInByZWZpeGVzIiwidmFsdWVQcmVmaXgiLCJ2YWx1ZVN1ZmZpeCIsInN1ZmZpeCIsImZvcm1hdFR5cGUiLCJ2YWx1ZU5lZ2F0aXZlIiwibWF5YmVTdWZmaXgiLCJkZWNpbWFsIiwiY3VycmVuY3kiLCJwZXJjZW50IiwicHJlY2lzaW9uRml4ZWQiLCJwcmVjaXNpb25QcmVmaXgiLCJwcmVjaXNpb25Sb3VuZCIsInRlbXAiLCJzdHJlYW1PYmplY3RUeXBlIiwiRmVhdHVyZSIsIkZlYXR1cmVDb2xsZWN0aW9uIiwiZmVhdHVyZXMiLCJTcGhlcmUiLCJQb2ludCIsIk11bHRpUG9pbnQiLCJMaW5lU3RyaW5nIiwiTXVsdGlMaW5lU3RyaW5nIiwiUG9seWdvbiIsIk11bHRpUG9seWdvbiIsIkdlb21ldHJ5Q29sbGVjdGlvbiIsImdlb21ldHJpZXMiLCJhcmVhU3VtIiwiYXJlYVJpbmciLCJhcmVhIiwiYm91bmRzIiwiZmVhdHVyZSIsImRlbHRhTWF4IiwiY2VudHJvaWQiLCJjb25zdGFudCQ3IiwicG9pbnRFcXVhbCIsImlzU3ViamVjdCIsImV4dGVudCQxIiwic3VtJDEiLCJzaW5QaGkxIiwiYWJzRGVsdGEiLCJpbnRlcnNlY3Rpb24iLCJwaGlBcmMiLCJsZW5ndGgkMSIsIm9iamVjdCQxIiwiY29udGFpbnNPYmplY3RUeXBlIiwiaW50ZXJwb2xhdGUkMSIsInN5MSIsImt4MCIsImt5MCIsImt4MSIsImt5MSIsImFyZWFTdW0kMSIsIl9yYWRpdXMiLCJwb2ludFJhZGl1cyIsIl9saW5lIiwiX3BvaW50IiwibGVuZ3RoUmluZyIsIl9jaXJjbGUiLCJpbmRleCQxIiwiY29udGV4dFN0cmVhbSIsInByb2plY3Rpb25TdHJlYW0iLCJtZWFzdXJlIiwicG9pbnRWaXNpYmxlIiwic2luayIsInBvaW50TGluZSIsInBvaW50UmluZyIsInJpbmdTaW5rIiwicmluZ1NlZ21lbnRzIiwicmluZ0J1ZmZlciIsInBvbHlnb25TdGFydGVkIiwicm90YXRlZFN0YXJ0IiwiY3IiLCJwb2ludDIiLCJzbWFsbFJhZGl1cyIsImNvZGUiLCJub3RIZW1pc3BoZXJlIiwidHdvIiwicGEiLCJwYiIsIm4yIiwibjJuMiIsIm4xbjIiLCJkZXRlcm1pbmFudCIsIm4xeG4yIiwidXUiLCJwb2xhciIsIm1lcmlkaWFuIiwicTEiLCJjb25pY0VxdWFsQXJlYSIsImFsYmVycyIsImFsYmVyc1VzYSIsImxvd2VyNDhQb2ludCIsImFsYXNrYVBvaW50IiwiaGF3YWlpUG9pbnQiLCJsb3dlcjQ4IiwiYWxhc2thIiwiaGF3YWlpIiwicG9pbnRTdHJlYW0iLCJhemltdXRoYWxFcXVhbEFyZWFSYXciLCJjeGN5IiwiYXppbXV0aGFsRXF1YWxBcmVhIiwiYXppbXV0aGFsRXF1aWRpc3RhbnRSYXciLCJhemltdXRoYWxFcXVpZGlzdGFudCIsIm1lcmNhdG9yIiwiY29uaWNDb25mb3JtYWwiLCJlcXVpcmVjdGFuZ3VsYXIiLCJjb25pY0VxdWlkaXN0YW50IiwiZ25vbW9uaWMiLCJpZGVudGl0eSQ1IiwidHJhbnNmb3JtJCQxIiwicmVmbGVjdFgiLCJyZWZsZWN0WSIsIm9ydGhvZ3JhcGhpYyIsInN0ZXJlb2dyYXBoaWMiLCJ0cmFuc3ZlcnNlTWVyY2F0b3IiLCJjbHVzdGVyIiwicHJldmlvdXNOb2RlIiwiZWFjaEFmdGVyIiwic2VwYXJhdGlvbiIsIm5vZGVTaXplIiwibm9kZV9jb3VudCIsIm5vZGVfZWFjaCIsIm5vZGVfZWFjaEJlZm9yZSIsIm5vZGVfZWFjaEFmdGVyIiwibm9kZV9zdW0iLCJub2RlX3NvcnQiLCJub2RlX3BhdGgiLCJub2RlX2FuY2VzdG9ycyIsIm5vZGVfZGVzY2VuZGFudHMiLCJub2RlX2xlYXZlcyIsImxlYXZlcyIsIm5vZGVfbGlua3MiLCJkZXNjZW5kYW50cyIsInNsaWNlJDMiLCJzaWJsaW5ncyIsImNvbnN0YW50JDgiLCJpbmRleCQyIiwicm91bmROb2RlIiwicGFydGl0aW9uIiwicG9zaXRpb25Ob2RlIiwia2V5UHJlZml4JDEiLCJwcmVyb290IiwiYW1iaWd1b3VzIiwic3RyYXRpZnkiLCJub2RlS2V5Iiwibm9kZUJ5S2V5IiwiZmlyc3RXYWxrIiwic2Vjb25kV2FsayIsInNpemVOb2RlIiwibWlkcG9pbnQiLCJhcHBvcnRpb24iLCJ2aXAiLCJ2b3AiLCJ2b20iLCJzaXAiLCJzb3AiLCJzaW0iLCJzb20iLCJzcXVhcmlmeSIsImluZGV4JDMiLCJ0cmVlbWFwIiwicGFkZGluZ1N0YWNrIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nVG9wIiwicGFkZGluZ1JpZ2h0IiwicGFkZGluZ0JvdHRvbSIsInRpbGUiLCJiaW5hcnkiLCJ2YWx1ZU9mZnNldCIsInN1bXMiLCJ2YWx1ZVRhcmdldCIsInZhbHVlTGVmdCIsInZhbHVlUmlnaHQiLCJ4ayIsInlrIiwic2xpY2VEaWNlIiwicmVzcXVhcmlmeSIsIl9zcXVhcmlmeSIsImFyZWEkMSIsImNlbnRyb2lkJDEiLCJodWxsIiwic29ydGVkUG9pbnRzIiwiZmxpcHBlZFBvaW50cyIsInVwcGVySW5kZXhlcyIsImxvd2VySW5kZXhlcyIsInNraXBMZWZ0Iiwic2tpcFJpZ2h0IiwiY29udGFpbnMkMSIsImluc2lkZSIsImxlbmd0aCQyIiwicGVyaW1ldGVyIiwic2xpY2UkNCIsImRlZmVyIiwiYXdhaXQiLCJyZXN1bHRzIiwiYXdhaXRBbGwiLCJkZWZhdWx0U291cmNlJDEiLCJ1bmlmb3JtIiwic291cmNlUmFuZG9tVW5pZm9ybSIsInJhbmRvbVVuaWZvcm0iLCJzb3VyY2VSYW5kb21Ob3JtYWwiLCJyYW5kb21Ob3JtYWwiLCJtdSIsInNpZ21hIiwibG9nTm9ybWFsIiwic291cmNlUmFuZG9tTG9nTm9ybWFsIiwicmFuZG9tTG9nTm9ybWFsIiwiaXJ3aW5IYWxsIiwic291cmNlUmFuZG9tSXJ3aW5IYWxsIiwicmFuZG9tSXJ3aW5IYWxsIiwiYmF0ZXMiLCJzb3VyY2VSYW5kb21CYXRlcyIsInJhbmRvbUJhdGVzIiwiZXhwb25lbnRpYWwkMSIsInNvdXJjZVJhbmRvbUV4cG9uZW50aWFsIiwicmFuZG9tRXhwb25lbnRpYWwiLCJyZXF1ZXN0IiwidXJsIiwicmVzcG9uZCIsInN0YXR1cyIsIm1pbWVUeXBlIiwiaGVhZGVycyIsIlhNTEh0dHBSZXF1ZXN0IiwidXNlciIsInBhc3N3b3JkIiwiWERvbWFpblJlcXVlc3QiLCJvbmxvYWQiLCJvbmVycm9yIiwib250aW1lb3V0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsIm9ucHJvZ3Jlc3MiLCJoZWFkZXIiLCJzZW5kIiwicG9zdCIsIm1ldGhvZCIsIm9wZW4iLCJzZXRSZXF1ZXN0SGVhZGVyIiwib3ZlcnJpZGVNaW1lVHlwZSIsInR5cGUkMSIsImRlZmF1bHRNaW1lVHlwZSIsImNyZWF0ZVJhbmdlIiwiY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50IiwianNvbiIsInJlc3BvbnNlWE1MIiwiZHN2JDEiLCJjc3YkMSIsInRzdiQxIiwiYXJyYXkkMiIsIm1pbGxpc2Vjb25kIiwibWlsbGlzZWNvbmRzIiwic2Vjb25kIiwic2Vjb25kcyIsIm1pbnV0ZSIsIm1pbnV0ZXMiLCJob3VyIiwiaG91cnMiLCJ0dWVzZGF5Iiwid2VkbmVzZGF5IiwidGh1cnNkYXkiLCJmcmlkYXkiLCJzYXR1cmRheSIsInN1bmRheXMiLCJtb25kYXlzIiwidHVlc2RheXMiLCJ3ZWRuZXNkYXlzIiwidGh1cnNkYXlzIiwiZnJpZGF5cyIsInNhdHVyZGF5cyIsIm1vbnRoIiwic2V0TW9udGgiLCJ5ZWFycyIsInV0Y01pbnV0ZSIsInNldFVUQ1NlY29uZHMiLCJ1dGNNaW51dGVzIiwidXRjSG91ciIsInNldFVUQ01pbnV0ZXMiLCJ1dGNIb3VycyIsInV0Y0RheXMiLCJ1dGNUdWVzZGF5IiwidXRjV2VkbmVzZGF5IiwidXRjVGh1cnNkYXkiLCJ1dGNGcmlkYXkiLCJ1dGNTYXR1cmRheSIsInV0Y1N1bmRheXMiLCJ1dGNNb25kYXlzIiwidXRjVHVlc2RheXMiLCJ1dGNXZWRuZXNkYXlzIiwidXRjVGh1cnNkYXlzIiwidXRjRnJpZGF5cyIsInV0Y1NhdHVyZGF5cyIsInV0Y01vbnRoIiwic2V0VVRDTW9udGgiLCJ1dGNNb250aHMiLCJ1dGNZZWFycyIsIi0iLCIwIiwiZm9ybWF0SXNvIiwicGFyc2VJc28iLCJ1dGNUaW1lIiwiY2F0ZWdvcnkxMCIsImNhdGVnb3J5MjBiIiwiY2F0ZWdvcnkyMGMiLCJjYXRlZ29yeTIwIiwiY3ViZWhlbGl4JDMiLCJ3YXJtIiwiY29vbCIsInJhaW5ib3ciLCJyYWluYm93JDEiLCJ0cyIsInZpcmlkaXMiLCJtYWdtYSIsImluZmVybm8iLCJwbGFzbWEiLCJhYnMkMSIsImF0YW4yJDEiLCJjb3MkMiIsIm1pbiQxIiwic2luJDIiLCJ0YXUkNCIsImEwMSIsImExMSIsImExMCIsImRhMCIsImRhMSIsImFwIiwicnAiLCJwYWRSYWRpdXMiLCJjb3JuZXJSYWRpdXMiLCJyYzAiLCJyYzEiLCJvYyIsImtjIiwibGMiLCJhcmVhU3RhcnQiLCJhcmVhRW5kIiwiY3VydmVMaW5lYXIiLCJkZWZpbmVkMCIsImRlZmluZWQiLCJhcmVhJDIiLCJ4MHoiLCJ5MHoiLCJhcmVhbGluZSIsImxpbmVYMCIsImxpbmVZMCIsImxpbmVZMSIsImxpbmVYMSIsImRlc2NlbmRpbmckMSIsImlkZW50aXR5JDciLCJwaWUiLCJhcmNzIiwiY3VydmVSYWRpYWxMaW5lYXIiLCJsaW5lUmFkaWFsJDEiLCJhcmVhUmFkaWFsIiwibGluZVN0YXJ0QW5nbGUiLCJsaW5lRW5kQW5nbGUiLCJsaW5lSW5uZXJSYWRpdXMiLCJsaW5lT3V0ZXJSYWRpdXMiLCJjaXJjbGUkMiIsImRyYXciLCJjcm9zcyQyIiwidGFuMzAiLCJ0YW4zMF8yIiwiZGlhbW9uZCIsImtyIiwic3RhciIsInNxdWFyZSIsInNxcnQzIiwidHJpYW5nbGUiLCJ3eWUiLCJzeW1ib2xzIiwibm9vcCQyIiwiYmFzaXMkMiIsIl94MyIsIl94NCIsIl95MyIsIl95NCIsImJhc2lzQ2xvc2VkJDEiLCJiYXNpc09wZW4iLCJidW5kbGUiLCJjYXJkaW5hbCIsIl94NSIsIl95NSIsImNhcmRpbmFsQ2xvc2VkIiwiY2FyZGluYWwkJDEiLCJjYXJkaW5hbE9wZW4iLCJ4MjMiLCJ5MjMiLCJjYXRtdWxsUm9tIiwiY2F0bXVsbFJvbUNsb3NlZCIsImNhdG11bGxSb20kJDEiLCJjYXRtdWxsUm9tT3BlbiIsImxpbmVhckNsb3NlZCIsIl90MCIsInB4IiwicHkiLCJuYXR1cmFsIiwibm9uZSQxIiwibm9uZSQyIiwic3RhY2siLCJveiIsImt6Iiwic3oiLCJzaWoiLCJraSIsInNpIiwiZXhwYW5kIiwiZGl2ZXJnaW5nIiwieW4iLCJzaWxob3VldHRlIiwid2lnZ2xlIiwiczIiLCJzaWowIiwic2lqMSIsInMzIiwiYXNjZW5kaW5nJDIiLCJkZXNjZW5kaW5nJDIiLCJpbnNpZGVPdXQiLCJ0b3BzIiwiYm90dG9tcyIsImNvbnN0YW50JDExIiwiYWZ0ZXIiLCJncmFuZHBhIiwidW5jbGUiLCJzaWJsaW5nIiwicG9seWdvbnMiLCJ0cmlhbmdsZXMiLCJfZm91bmQiLCJ2b3Jvbm9pIiwiY29uc3RhbnQkMTIiLCJhcHBseVgiLCJhcHBseVkiLCJsb2NhdGlvbiIsImludmVydFgiLCJpbnZlcnRZIiwicmVzY2FsZVgiLCJyZXNjYWxlWSIsIm5vZXZlbnQkMiIsInpvb20iLCJ3aGVlbGVkIiwiZGJsY2xpY2tlZCIsImswIiwiazEiLCJjb25zdHJhaW4iLCJHZXN0dXJlIiwid2hlZWxpZGxlZCIsIndoZWVsIiwid2hlZWxEZWx0YSIsIndoZWVsRGVsYXkiLCJ0b3VjaDAiLCJ0b3VjaDEiLCJ0b3VjaHN0YXJ0aW5nIiwidG91Y2hEZWxheSIsImwwIiwibDEiLCJkcCIsImRsIiwiY29sbGVjdGlvbiIsInNjYWxlQnkiLCJzY2FsZVRvIiwidHJhbnNsYXRlQnkiLCJ0cmFuc2xhdGVUbyIsInNjYWxlRXh0ZW50IiwidHJhbnNsYXRlRXh0ZW50IiwidmVyc2lvbiIsImJpc2VjdCIsInRocmVzaG9sZEZyZWVkbWFuRGlhY29uaXMiLCJ0aHJlc2hvbGRTY290dCIsInRocmVzaG9sZFN0dXJnZXMiLCJkcmFnRW5hYmxlIiwiZHN2Rm9ybWF0IiwiZWFzZUxpbmVhciIsImVhc2VRdWFkIiwiZWFzZVF1YWRJbiIsImVhc2VRdWFkT3V0IiwiZWFzZVF1YWRJbk91dCIsImVhc2VDdWJpYyIsImVhc2VDdWJpY0luIiwiZWFzZUN1YmljT3V0IiwiZWFzZUN1YmljSW5PdXQiLCJlYXNlUG9seSIsImVhc2VQb2x5SW4iLCJlYXNlUG9seU91dCIsImVhc2VQb2x5SW5PdXQiLCJlYXNlU2luIiwiZWFzZVNpbkluIiwiZWFzZVNpbk91dCIsImVhc2VTaW5Jbk91dCIsImVhc2VFeHAiLCJlYXNlRXhwSW4iLCJlYXNlRXhwT3V0IiwiZWFzZUV4cEluT3V0IiwiZWFzZUNpcmNsZSIsImVhc2VDaXJjbGVJbiIsImVhc2VDaXJjbGVPdXQiLCJlYXNlQ2lyY2xlSW5PdXQiLCJlYXNlQm91bmNlIiwiZWFzZUJvdW5jZUluIiwiZWFzZUJvdW5jZU91dCIsImVhc2VCb3VuY2VJbk91dCIsImVhc2VCYWNrIiwiZWFzZUJhY2tJbiIsImVhc2VCYWNrT3V0IiwiZWFzZUJhY2tJbk91dCIsImVhc2VFbGFzdGljIiwiZWFzZUVsYXN0aWNJbiIsImVhc2VFbGFzdGljT3V0IiwiZWFzZUVsYXN0aWNJbk91dCIsImZvcmNlQ2VudGVyIiwiZm9yY2VDb2xsaWRlIiwiZm9yY2VMaW5rIiwiZm9yY2VNYW55Qm9keSIsImZvcmNlU2ltdWxhdGlvbiIsImZvcmNlWCIsImZvcmNlWSIsImZvcm1hdERlZmF1bHRMb2NhbGUiLCJnZW9BcmVhIiwiZ2VvQm91bmRzIiwiZ2VvQ2VudHJvaWQiLCJnZW9DaXJjbGUiLCJnZW9DbGlwRXh0ZW50IiwiZ2VvQ29udGFpbnMiLCJnZW9EaXN0YW5jZSIsImdlb0dyYXRpY3VsZSIsImdlb0dyYXRpY3VsZTEwIiwiZ2VvSW50ZXJwb2xhdGUiLCJnZW9MZW5ndGgiLCJnZW9QYXRoIiwiZ2VvQWxiZXJzIiwiZ2VvQWxiZXJzVXNhIiwiZ2VvQXppbXV0aGFsRXF1YWxBcmVhIiwiZ2VvQXppbXV0aGFsRXF1YWxBcmVhUmF3IiwiZ2VvQXppbXV0aGFsRXF1aWRpc3RhbnQiLCJnZW9BemltdXRoYWxFcXVpZGlzdGFudFJhdyIsImdlb0NvbmljQ29uZm9ybWFsIiwiZ2VvQ29uaWNDb25mb3JtYWxSYXciLCJnZW9Db25pY0VxdWFsQXJlYSIsImdlb0NvbmljRXF1YWxBcmVhUmF3IiwiZ2VvQ29uaWNFcXVpZGlzdGFudCIsImdlb0NvbmljRXF1aWRpc3RhbnRSYXciLCJnZW9FcXVpcmVjdGFuZ3VsYXIiLCJnZW9FcXVpcmVjdGFuZ3VsYXJSYXciLCJnZW9Hbm9tb25pYyIsImdlb0dub21vbmljUmF3IiwiZ2VvSWRlbnRpdHkiLCJnZW9Qcm9qZWN0aW9uIiwiZ2VvUHJvamVjdGlvbk11dGF0b3IiLCJnZW9NZXJjYXRvciIsImdlb01lcmNhdG9yUmF3IiwiZ2VvT3J0aG9ncmFwaGljIiwiZ2VvT3J0aG9ncmFwaGljUmF3IiwiZ2VvU3RlcmVvZ3JhcGhpYyIsImdlb1N0ZXJlb2dyYXBoaWNSYXciLCJnZW9UcmFuc3ZlcnNlTWVyY2F0b3IiLCJnZW9UcmFuc3ZlcnNlTWVyY2F0b3JSYXciLCJnZW9Sb3RhdGlvbiIsImdlb1RyYW5zZm9ybSIsInBhY2tTaWJsaW5ncyIsInRyZWVtYXBCaW5hcnkiLCJ0cmVlbWFwU2xpY2VEaWNlIiwidHJlZW1hcFNxdWFyaWZ5IiwidHJlZW1hcFJlc3F1YXJpZnkiLCJpbnRlcnBvbGF0ZUFycmF5IiwiaW50ZXJwb2xhdGVCYXNpcyIsImludGVycG9sYXRlQmFzaXNDbG9zZWQiLCJpbnRlcnBvbGF0ZURhdGUiLCJpbnRlcnBvbGF0ZU51bWJlciIsImludGVycG9sYXRlT2JqZWN0IiwiaW50ZXJwb2xhdGVSZ2JCYXNpcyIsImludGVycG9sYXRlUmdiQmFzaXNDbG9zZWQiLCJpbnRlcnBvbGF0ZUhzbCIsImludGVycG9sYXRlSHNsTG9uZyIsImludGVycG9sYXRlTGFiIiwiaW50ZXJwb2xhdGVIY2wiLCJpbnRlcnBvbGF0ZUhjbExvbmciLCJpbnRlcnBvbGF0ZUN1YmVoZWxpeCIsImludGVycG9sYXRlQ3ViZWhlbGl4TG9uZyIsInBvbHlnb25BcmVhIiwicG9seWdvbkNlbnRyb2lkIiwicG9seWdvbkh1bGwiLCJwb2x5Z29uTGVuZ3RoIiwic2NhbGVCYW5kIiwic2NhbGVQb2ludCIsInNjYWxlSWRlbnRpdHkiLCJzY2FsZUxpbmVhciIsInNjYWxlTG9nIiwic2NhbGVPcmRpbmFsIiwic2NhbGVJbXBsaWNpdCIsInNjYWxlUG93Iiwic2NhbGVTcXJ0Iiwic2NhbGVRdWFudGlsZSIsInNjYWxlUXVhbnRpemUiLCJzY2FsZVRocmVzaG9sZCIsInNjYWxlVGltZSIsInNjYWxlVXRjIiwic2NoZW1lQ2F0ZWdvcnkxMCIsInNjaGVtZUNhdGVnb3J5MjBiIiwic2NoZW1lQ2F0ZWdvcnkyMGMiLCJzY2hlbWVDYXRlZ29yeTIwIiwiaW50ZXJwb2xhdGVDdWJlaGVsaXhEZWZhdWx0IiwiaW50ZXJwb2xhdGVSYWluYm93IiwiaW50ZXJwb2xhdGVXYXJtIiwiaW50ZXJwb2xhdGVDb29sIiwiaW50ZXJwb2xhdGVWaXJpZGlzIiwiaW50ZXJwb2xhdGVNYWdtYSIsImludGVycG9sYXRlSW5mZXJubyIsImludGVycG9sYXRlUGxhc21hIiwic2NhbGVTZXF1ZW50aWFsIiwicmFkaWFsQXJlYSIsInJhZGlhbExpbmUiLCJzeW1ib2xDaXJjbGUiLCJzeW1ib2xDcm9zcyIsInN5bWJvbERpYW1vbmQiLCJzeW1ib2xTcXVhcmUiLCJzeW1ib2xTdGFyIiwic3ltYm9sVHJpYW5nbGUiLCJzeW1ib2xXeWUiLCJjdXJ2ZUJhc2lzQ2xvc2VkIiwiY3VydmVCYXNpc09wZW4iLCJjdXJ2ZUJhc2lzIiwiY3VydmVCdW5kbGUiLCJjdXJ2ZUNhcmRpbmFsQ2xvc2VkIiwiY3VydmVDYXJkaW5hbE9wZW4iLCJjdXJ2ZUNhcmRpbmFsIiwiY3VydmVDYXRtdWxsUm9tQ2xvc2VkIiwiY3VydmVDYXRtdWxsUm9tT3BlbiIsImN1cnZlQ2F0bXVsbFJvbSIsImN1cnZlTGluZWFyQ2xvc2VkIiwiY3VydmVNb25vdG9uZVgiLCJjdXJ2ZU1vbm90b25lWSIsImN1cnZlTmF0dXJhbCIsImN1cnZlU3RlcCIsImN1cnZlU3RlcEFmdGVyIiwiY3VydmVTdGVwQmVmb3JlIiwic3RhY2tPZmZzZXRFeHBhbmQiLCJzdGFja09mZnNldERpdmVyZ2luZyIsInN0YWNrT2Zmc2V0Tm9uZSIsInN0YWNrT2Zmc2V0U2lsaG91ZXR0ZSIsInN0YWNrT2Zmc2V0V2lnZ2xlIiwic3RhY2tPcmRlckFzY2VuZGluZyIsInN0YWNrT3JkZXJEZXNjZW5kaW5nIiwic3RhY2tPcmRlckluc2lkZU91dCIsInN0YWNrT3JkZXJOb25lIiwic3RhY2tPcmRlclJldmVyc2UiLCJ0aW1lSW50ZXJ2YWwiLCJ0aW1lTWlsbGlzZWNvbmQiLCJ0aW1lTWlsbGlzZWNvbmRzIiwidXRjTWlsbGlzZWNvbmQiLCJ1dGNNaWxsaXNlY29uZHMiLCJ0aW1lU2Vjb25kIiwidGltZVNlY29uZHMiLCJ1dGNTZWNvbmQiLCJ1dGNTZWNvbmRzIiwidGltZU1pbnV0ZSIsInRpbWVNaW51dGVzIiwidGltZUhvdXIiLCJ0aW1lSG91cnMiLCJ0aW1lRGF5IiwidGltZURheXMiLCJ0aW1lV2VlayIsInRpbWVXZWVrcyIsInRpbWVTdW5kYXkiLCJ0aW1lU3VuZGF5cyIsInRpbWVNb25kYXkiLCJ0aW1lTW9uZGF5cyIsInRpbWVUdWVzZGF5IiwidGltZVR1ZXNkYXlzIiwidGltZVdlZG5lc2RheSIsInRpbWVXZWRuZXNkYXlzIiwidGltZVRodXJzZGF5IiwidGltZVRodXJzZGF5cyIsInRpbWVGcmlkYXkiLCJ0aW1lRnJpZGF5cyIsInRpbWVTYXR1cmRheSIsInRpbWVTYXR1cmRheXMiLCJ0aW1lTW9udGgiLCJ0aW1lTW9udGhzIiwidGltZVllYXIiLCJ0aW1lWWVhcnMiLCJ1dGNXZWVrIiwidXRjV2Vla3MiLCJ0aW1lRm9ybWF0RGVmYXVsdExvY2FsZSIsInRpbWVGb3JtYXRMb2NhbGUiLCJpc29Gb3JtYXQiLCJpc29QYXJzZSIsInpvb21UcmFuc2Zvcm0iLCJ6b29tSWRlbnRpdHkiLCJkZWZpbmVQcm9wZXJ0eSIsIi4vbm9kZV9tb2R1bGVzL2Zvcm0tZGF0YS10by1vYmplY3QvaW5kZXguanMiLCJ0b09iaiIsInBhcmVudEtleSIsInBhdGhzIiwiY3VycmVudFBhdGgiLCJwYXRoS2V5IiwiZnJvbU9iaiIsInJlY3VyIiwibmV3T2JqIiwicHJvcE5hbWUiLCJjdXJyVmFsIiwiLi9ub2RlX21vZHVsZXMvZm9ybXN5LXJlYWN0L2xpYi9EZWNvcmF0b3IuanMiLCJfZXh0ZW5kcyIsImFzc2lnbiIsImNyZWF0ZVJlYWN0Q2xhc3MiLCJNaXhpbiIsIm1peGlucyIsInJlbmRlciIsInNldFZhbGlkYXRpb25zIiwic2V0VmFsdWUiLCJyZXNldFZhbHVlIiwiZ2V0VmFsdWUiLCJoYXNWYWx1ZSIsImdldEVycm9yTWVzc2FnZSIsImdldEVycm9yTWVzc2FnZXMiLCJpc0Zvcm1EaXNhYmxlZCIsImlzVmFsaWQiLCJpc1ByaXN0aW5lIiwiaXNGb3JtU3VibWl0dGVkIiwiaXNSZXF1aXJlZCIsInNob3dSZXF1aXJlZCIsInNob3dFcnJvciIsImlzVmFsaWRWYWx1ZSIsInByb3BzIiwiLi9ub2RlX21vZHVsZXMvZm9ybXN5LXJlYWN0L2xpYi9IT0MuanMiLCJnZXREaXNwbGF5TmFtZSIsImRpc3BsYXlOYW1lIiwiaW5uZXJSZWYiLCJwcm9wc0ZvckVsZW1lbnQiLCJyZWYiLCIuL25vZGVfbW9kdWxlcy9mb3Jtc3ktcmVhY3QvbGliL01peGluLmpzIiwiUHJvcFR5cGVzIiwidXRpbHMiLCJjb252ZXJ0VmFsaWRhdGlvbnNUb09iamVjdCIsInZhbGlkYXRpb25zIiwidmFsaWRhdGlvbiIsInZhbGlkYXRlTWV0aG9kIiwiZ2V0SW5pdGlhbFN0YXRlIiwiX2lzUmVxdWlyZWQiLCJfaXNWYWxpZCIsIl9pc1ByaXN0aW5lIiwiX3ByaXN0aW5lVmFsdWUiLCJfdmFsaWRhdGlvbkVycm9yIiwiX2V4dGVybmFsRXJyb3IiLCJfZm9ybVN1Ym1pdHRlZCIsImNvbnRleHRUeXBlcyIsImZvcm1zeSIsImdldERlZmF1bHRQcm9wcyIsInZhbGlkYXRpb25FcnJvciIsInZhbGlkYXRpb25FcnJvcnMiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb25maWd1cmUiLCJhdHRhY2hUb0Zvcm0iLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwibmV4dFByb3BzIiwiY29tcG9uZW50RGlkVXBkYXRlIiwicHJldlByb3BzIiwiaXNTYW1lIiwidmFsaWRhdGUiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImRldGFjaEZyb21Gb3JtIiwiX3ZhbGlkYXRpb25zIiwiX3JlcXVpcmVkVmFsaWRhdGlvbnMiLCJpc0RlZmF1bHRSZXF1aXJlZFZhbHVlIiwic2V0U3RhdGUiLCJtZXNzYWdlcyIsIi4vbm9kZV9tb2R1bGVzL2Zvcm1zeS1yZWFjdC9saWIvbWFpbi5qcyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsIl90eXBlb2YyIiwiRm9ybXN5IiwidmFsaWRhdGlvblJ1bGVzIiwiZm9ybURhdGFUb09iamVjdCIsIkhPQyIsIkRlY29yYXRvciIsIm9wdGlvbnMiLCJlbXB0eUFycmF5IiwiZGVmYXVsdHMiLCJwYXNzZWRPcHRpb25zIiwiYWRkVmFsaWRhdGlvblJ1bGUiLCJmdW5jIiwiRm9ybSIsImlzU3VibWl0dGluZyIsImNhbkNoYW5nZSIsIm9uU3VjY2VzcyIsIm9uRXJyb3IiLCJvblN1Ym1pdCIsIm9uVmFsaWRTdWJtaXQiLCJvbkludmFsaWRTdWJtaXQiLCJvblZhbGlkIiwib25JbnZhbGlkIiwib25DaGFuZ2UiLCJwcmV2ZW50RXh0ZXJuYWxJbnZhbGlkYXRpb24iLCJjaGlsZENvbnRleHRUeXBlcyIsImdldENoaWxkQ29udGV4dCIsIl90aGlzIiwiY29tcG9uZW50IiwicnVuVmFsaWRhdGlvbiIsImlucHV0cyIsImNvbXBvbmVudERpZE1vdW50IiwidmFsaWRhdGVGb3JtIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsInByZXZJbnB1dE5hbWVzIiwic2V0SW5wdXRWYWxpZGF0aW9uRXJyb3JzIiwibmV3SW5wdXROYW1lcyIsImFycmF5c0RpZmZlciIsInNldEZvcm1QcmlzdGluZSIsInJlc2V0TW9kZWwiLCJzdWJtaXQiLCJtb2RlbCIsImdldE1vZGVsIiwidXBkYXRlSW5wdXRzV2l0aEVycm9yIiwibWFwTW9kZWwiLCJtYXBwaW5nIiwibWFwcGVkTW9kZWwiLCJrZXlBcnJheSIsImN1cnJlbnRLZXkiLCJjdXJyZW50VmFsdWVzIiwiZ2V0Q3VycmVudFZhbHVlcyIsImVycm9ycyIsImlzQ2hhbmdlZCIsImdldFByaXN0aW5lVmFsdWVzIiwiX3RoaXMyIiwiZGlzYWJsZWQiLCJ2YWxpZGF0aW9uUmVzdWx0cyIsInJ1blJ1bGVzIiwicmVxdWlyZWRSZXN1bHRzIiwiZmFpbGVkIiwic3VjY2VzcyIsInBvcyIsImFyciIsInZhbGlkYXRpb25NZXRob2QiLCJfdGhpczMiLCJvblZhbGlkYXRpb25Db21wbGV0ZSIsImFsbElzVmFsaWQiLCJjb21wb25lbnRQb3MiLCJfcHJvcHMiLCJub25Gb3Jtc3lQcm9wcyIsImFtZCIsIi4vbm9kZV9tb2R1bGVzL2Zvcm1zeS1yZWFjdC9saWIvdXRpbHMuanMiLCJpc0RpZmZlcmVudCIsIml0ZW0iLCJvYmplY3RzRGlmZmVyIiwiZm4iLCIuL25vZGVfbW9kdWxlcy9mb3Jtc3ktcmVhY3QvbGliL3ZhbGlkYXRpb25SdWxlcy5qcyIsIl9pc0V4aXN0eSIsImlzRW1wdHkiLCJpc0V4aXN0eSIsIm1hdGNoUmVnZXhwIiwicmVnZXhwIiwiaXNVbmRlZmluZWQiLCJpc0VtcHR5U3RyaW5nIiwiaXNFbWFpbCIsImlzVXJsIiwiaXNUcnVlIiwiaXNGYWxzZSIsImlzTnVtZXJpYyIsImlzQWxwaGEiLCJpc0FscGhhbnVtZXJpYyIsImlzSW50IiwiaXNGbG9hdCIsImlzV29yZHMiLCJpc1NwZWNpYWxXb3JkcyIsImlzTGVuZ3RoIiwiZXF1YWxzIiwiZXFsIiwiZXF1YWxzRmllbGQiLCJtYXhMZW5ndGgiLCJtaW5MZW5ndGgiLCIuL25vZGVfbW9kdWxlcy9yZWFjdC1pbnB1dC1hdXRvc2l6ZS9saWIvQXV0b3NpemVJbnB1dC5qcyIsImNyZWF0ZUNsYXNzIiwic2l6ZXJTdHlsZSIsInZpc2liaWxpdHkiLCJvdmVyZmxvdyIsIndoaXRlU3BhY2UiLCJBdXRvc2l6ZUlucHV0IiwicHJvcFR5cGVzIiwiY2xhc3NOYW1lIiwiZGVmYXVsdFZhbHVlIiwiYW55IiwiaW5wdXRDbGFzc05hbWUiLCJpbnB1dFN0eWxlIiwibWluV2lkdGgiLCJvbmVPZlR5cGUiLCJvbkF1dG9zaXplIiwicGxhY2Vob2xkZXIiLCJwbGFjZWhvbGRlcklzTWluV2lkdGgiLCJib29sIiwiaW5wdXRXaWR0aCIsIm1vdW50ZWQiLCJjb3B5SW5wdXRTdHlsZXMiLCJ1cGRhdGVJbnB1dFdpZHRoIiwicHJldlN0YXRlIiwiaW5wdXRSZWYiLCJlbCIsInBsYWNlSG9sZGVyU2l6ZXJSZWYiLCJwbGFjZUhvbGRlclNpemVyIiwic2l6ZXJSZWYiLCJzaXplciIsIndpZHRoTm9kZSIsImZvbnRTaXplIiwiZm9udEZhbWlseSIsImZvbnRXZWlnaHQiLCJmb250U3R5bGUiLCJsZXR0ZXJTcGFjaW5nIiwidGV4dFRyYW5zZm9ybSIsInBsYWNlaG9sZGVyTm9kZSIsInNjcm9sbFdpZHRoIiwibmV3SW5wdXRXaWR0aCIsImdldElucHV0IiwiZm9jdXMiLCJibHVyIiwic2l6ZXJWYWx1ZSIsInByZXZpb3VzVmFsdWUiLCJjdXJyZW50VmFsdWUiLCJ3cmFwcGVyU3R5bGUiLCJkaXNwbGF5IiwiYm94U2l6aW5nIiwiaW5wdXRQcm9wcyIsIi4vbm9kZV9tb2R1bGVzL3JlYWN0LXNlbGVjdC9saWIvQXN5bmMuanMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiX2luaGVyaXRzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfcmVhY3QyIiwiX1NlbGVjdDIiLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVzY3JpcHRvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9nZXQiLCJfYWdhaW4iLCJyZWNlaXZlciIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXR0ZXIiLCJnZXRQcm90b3R5cGVPZiIsIl9yZWFjdCIsIl9wcm9wVHlwZXMiLCJfcHJvcFR5cGVzMiIsIl9TZWxlY3QiLCJfdXRpbHNTdHJpcERpYWNyaXRpY3MiLCJfdXRpbHNTdHJpcERpYWNyaXRpY3MyIiwiYXV0b2xvYWQiLCJpZ25vcmVBY2NlbnRzIiwiaWdub3JlQ2FzZSIsImxvYWRpbmdQbGFjZWhvbGRlciIsImxvYWRPcHRpb25zIiwibXVsdGkiLCJub1Jlc3VsdHNUZXh0Iiwic2VhcmNoUHJvbXB0VGV4dCIsIm9uSW5wdXRDaGFuZ2UiLCJkZWZhdWx0Q2FjaGUiLCJkZWZhdWx0UHJvcHMiLCJBc3luYyIsIl9Db21wb25lbnQiLCJfY2FjaGUiLCJpc0xvYWRpbmciLCJfb25JbnB1dENoYW5nZSIsIm5leHRTdGF0ZSIsInByb3AiLCJpbnB1dFZhbHVlIiwiX2NhbGxiYWNrIiwicHJvbWlzZSIsInRoZW4iLCJfcHJvcHMyIiwiX3Byb3BzMyIsIl9zdGF0ZSIsIl9yZWYiLCJuZXdWYWx1ZXMiLCJjbGVhck9wdGlvbnMiLCIuL25vZGVfbW9kdWxlcy9yZWFjdC1zZWxlY3QvbGliL0FzeW5jQ3JlYXRhYmxlLmpzIiwiX2NyZWF0ZVJlYWN0Q2xhc3MiLCJfY3JlYXRlUmVhY3RDbGFzczIiLCJBc3luY0NyZWF0YWJsZSIsImFzeW5jUHJvcHMiLCJDcmVhdGFibGUiLCJjcmVhdGFibGVQcm9wcyIsIi4vbm9kZV9tb2R1bGVzL3JlYWN0LXNlbGVjdC9saWIvQ3JlYXRhYmxlLmpzIiwiaXNPcHRpb25VbmlxdWUiLCJfcmVmMyIsIm9wdGlvbiIsImxhYmVsS2V5IiwidmFsdWVLZXkiLCJleGlzdGluZ09wdGlvbiIsImlzVmFsaWROZXdPcHRpb24iLCJfcmVmNCIsImxhYmVsIiwibmV3T3B0aW9uQ3JlYXRvciIsIl9yZWY1IiwicHJvbXB0VGV4dENyZWF0b3IiLCJzaG91bGRLZXlEb3duRXZlbnRDcmVhdGVOZXdPcHRpb24iLCJfcmVmNiIsIl91dGlsc0RlZmF1bHRGaWx0ZXJPcHRpb25zIiwiX3V0aWxzRGVmYXVsdEZpbHRlck9wdGlvbnMyIiwiX3V0aWxzRGVmYXVsdE1lbnVSZW5kZXJlciIsIl91dGlsc0RlZmF1bHRNZW51UmVuZGVyZXIyIiwiZmlsdGVyT3B0aW9ucyIsIm1lbnVSZW5kZXJlciIsIm9uSW5wdXRLZXlEb3duIiwib25OZXdPcHRpb25DbGljayIsInN0YXRpY3MiLCJjcmVhdGVOZXdPcHRpb24iLCJfcHJvcHMkb3B0aW9ucyIsInNlbGVjdFZhbHVlIiwiZXhjbHVkZU9wdGlvbnMiLCJmaWx0ZXJlZE9wdGlvbnMiLCJfbmV3T3B0aW9uQ3JlYXRvciIsIl9wcm9tcHQiLCJfY3JlYXRlUGxhY2Vob2xkZXJPcHRpb24iLCJfcmVmMiIsIm9uU2VsZWN0Iiwib25PcHRpb25TZWxlY3QiLCJmb2N1c2VkT3B0aW9uIiwiZ2V0Rm9jdXNlZE9wdGlvbiIsIl9wcm9wczQiLCJyZXN0UHJvcHMiLCJhbGxvd0NyZWF0ZSIsIi4vbm9kZV9tb2R1bGVzL3JlYWN0LXNlbGVjdC9saWIvT3B0aW9uLmpzIiwiX2NsYXNzbmFtZXMiLCJfY2xhc3NuYW1lczIiLCJPcHRpb24iLCJpbnN0YW5jZVByZWZpeCIsImlzRGlzYWJsZWQiLCJpc0ZvY3VzZWQiLCJpc1NlbGVjdGVkIiwib25Gb2N1cyIsIm9uVW5mb2N1cyIsIm9wdGlvbkluZGV4IiwiYmxvY2tFdmVudCIsInN0b3BQcm9wYWdhdGlvbiIsInRhZ05hbWUiLCJocmVmIiwiaGFuZGxlTW91c2VEb3duIiwiaGFuZGxlTW91c2VFbnRlciIsImhhbmRsZU1vdXNlTW92ZSIsImhhbmRsZVRvdWNoRW5kIiwiZHJhZ2dpbmciLCJoYW5kbGVUb3VjaE1vdmUiLCJoYW5kbGVUb3VjaFN0YXJ0Iiwib25Nb3VzZURvd24iLCJvbkNsaWNrIiwicm9sZSIsIm9uTW91c2VFbnRlciIsIm9uTW91c2VNb3ZlIiwib25Ub3VjaFN0YXJ0Iiwib25Ub3VjaE1vdmUiLCJvblRvdWNoRW5kIiwidGl0bGUiLCIuL25vZGVfbW9kdWxlcy9yZWFjdC1zZWxlY3QvbGliL1NlbGVjdC5qcyIsInN0cmluZ2lmeVZhbHVlIiwidmFsdWVUeXBlIiwiU3RyaW5nIiwiX3JlYWN0RG9tIiwiX3JlYWN0RG9tMiIsIl9yZWFjdElucHV0QXV0b3NpemUiLCJfcmVhY3RJbnB1dEF1dG9zaXplMiIsIl91dGlsc0RlZmF1bHRBcnJvd1JlbmRlcmVyIiwiX3V0aWxzRGVmYXVsdEFycm93UmVuZGVyZXIyIiwiX3V0aWxzRGVmYXVsdENsZWFyUmVuZGVyZXIiLCJfdXRpbHNEZWZhdWx0Q2xlYXJSZW5kZXJlcjIiLCJfQXN5bmMiLCJfQXN5bmMyIiwiX0FzeW5jQ3JlYXRhYmxlIiwiX0FzeW5jQ3JlYXRhYmxlMiIsIl9DcmVhdGFibGUiLCJfQ3JlYXRhYmxlMiIsIl9PcHRpb24iLCJfT3B0aW9uMiIsIl9WYWx1ZSIsIl9WYWx1ZTIiLCJzdHJpbmdPck5vZGUiLCJpbnN0YW5jZUlkIiwiU2VsZWN0IiwiYWRkTGFiZWxUZXh0IiwiYXJpYS1kZXNjcmliZWRieSIsImFyaWEtbGFiZWwiLCJhcmlhLWxhYmVsbGVkYnkiLCJhcnJvd1JlbmRlcmVyIiwiYXV0b0JsdXIiLCJhdXRvZm9jdXMiLCJhdXRvc2l6ZSIsImJhY2tzcGFjZVJlbW92ZXMiLCJiYWNrc3BhY2VUb1JlbW92ZU1lc3NhZ2UiLCJjbGVhckFsbFRleHQiLCJjbGVhclJlbmRlcmVyIiwiY2xlYXJWYWx1ZVRleHQiLCJjbGVhcmFibGUiLCJkZWxldGVSZW1vdmVzIiwiZXNjYXBlQ2xlYXJzVmFsdWUiLCJmaWx0ZXJPcHRpb24iLCJpbnB1dFJlbmRlcmVyIiwiam9pblZhbHVlcyIsIm1hdGNoUG9zIiwibWF0Y2hQcm9wIiwibWVudUJ1ZmZlciIsIm1lbnVDb250YWluZXJTdHlsZSIsIm1lbnVTdHlsZSIsIm9uQmx1ciIsIm9uQmx1clJlc2V0c0lucHV0Iiwib25DbG9zZSIsIm9uQ2xvc2VSZXNldHNJbnB1dCIsIm9uTWVudVNjcm9sbFRvQm90dG9tIiwib25PcGVuIiwib25WYWx1ZUNsaWNrIiwib3BlbkFmdGVyRm9jdXMiLCJvcGVuT25Gb2N1cyIsIm9wdGlvbkNsYXNzTmFtZSIsIm9wdGlvbkNvbXBvbmVudCIsIm9wdGlvblJlbmRlcmVyIiwicGFnZVNpemUiLCJzY3JvbGxNZW51SW50b1ZpZXciLCJzZWFyY2hhYmxlIiwic2ltcGxlVmFsdWUiLCJ0YWJJbmRleCIsInRhYlNlbGVjdHNWYWx1ZSIsInZhbHVlQ29tcG9uZW50IiwidmFsdWVSZW5kZXJlciIsImlzT3BlbiIsImlzUHNldWRvRm9jdXNlZCIsIl9pbnN0YW5jZVByZWZpeCIsInZhbHVlQXJyYXkiLCJnZXRWYWx1ZUFycmF5IiwiaGFuZGxlUmVxdWlyZWQiLCJ0b2dnbGVUb3VjaE91dHNpZGVFdmVudCIsImhhbmRsZXIiLCJtZW51IiwiZm9jdXNlZCIsImhhc1Njcm9sbGVkVG9PcHRpb24iLCJmb2N1c2VkT3B0aW9uTm9kZSIsImZpbmRET01Ob2RlIiwic2Nyb2xsVG9wIiwib2Zmc2V0VG9wIiwiX3Njcm9sbFRvRm9jdXNlZE9wdGlvbk9uVXBkYXRlIiwiZm9jdXNlZERPTSIsIm1lbnVET00iLCJmb2N1c2VkUmVjdCIsIm1lbnVSZWN0Iiwib2Zmc2V0SGVpZ2h0IiwibWVudUNvbnRhaW5lciIsIm1lbnVDb250YWluZXJSZWN0IiwiaW5uZXJIZWlnaHQiLCJzY3JvbGxCeSIsImNsb3NlTWVudSIsImRldGFjaEV2ZW50IiwiaGFuZGxlVG91Y2hPdXRzaWRlIiwiZW5hYmxlZCIsImF0dGFjaEV2ZW50Iiwid3JhcHBlciIsImJsdXJJbnB1dCIsImhhbmRsZVRvdWNoRW5kQ2xlYXJWYWx1ZSIsImNsZWFyVmFsdWUiLCJfb3BlbkFmdGVyRm9jdXMiLCJoYW5kbGVNb3VzZURvd25PbkFycm93IiwiaGFuZGxlTW91c2VEb3duT25NZW51IiwiaGFuZGxlSW5wdXRGb2N1cyIsImhhbmRsZUlucHV0Qmx1ciIsImFjdGl2ZUVsZW1lbnQiLCJvbkJsdXJyZWRTdGF0ZSIsImhhbmRsZUlucHV0Q2hhbmdlIiwibmV3SW5wdXRWYWx1ZSIsImhhbmRsZUtleURvd24iLCJkZWZhdWx0UHJldmVudGVkIiwicG9wVmFsdWUiLCJzZWxlY3RGb2N1c2VkT3B0aW9uIiwiZm9jdXNQcmV2aW91c09wdGlvbiIsImZvY3VzTmV4dE9wdGlvbiIsImZvY3VzUGFnZVVwT3B0aW9uIiwiZm9jdXNQYWdlRG93bk9wdGlvbiIsImZvY3VzRW5kT3B0aW9uIiwiZm9jdXNTdGFydE9wdGlvbiIsImhhbmRsZVZhbHVlQ2xpY2siLCJoYW5kbGVNZW51U2Nyb2xsIiwic2Nyb2xsSGVpZ2h0IiwiZ2V0T3B0aW9uTGFiZWwiLCJvcCIsImV4cGFuZFZhbHVlIiwiZXhwYW5kZWRWYWx1ZSIsImZvY3VzZWRJbmRleCIsImFkZFZhbHVlIiwidmlzaWJsZU9wdGlvbnMiLCJfdmlzaWJsZU9wdGlvbnMiLCJ2YWwiLCJsYXN0VmFsdWVJbmRleCIsImZvY3VzT3B0aW9uIiwiY2xlYXJhYmxlVmFsdWUiLCJyZW1vdmVWYWx1ZSIsImdldFJlc2V0VmFsdWUiLCJmb2N1c0FkamFjZW50T3B0aW9uIiwiZGlyIiwiX2ZvY3VzZWRPcHRpb24iLCJwb3RlbnRpYWxJbmRleCIsImdldElucHV0VmFsdWUiLCJyZW5kZXJMb2FkaW5nIiwiYXJpYS1oaWRkZW4iLCJyZW5kZXJWYWx1ZSIsIl90aGlzNCIsInJlbmRlckxhYmVsIiwiVmFsdWVDb21wb25lbnQiLCJyZW5kZXJJbnB1dCIsImZvY3VzZWRPcHRpb25JbmRleCIsIl9jbGFzc05hbWVzIiwiX3RoaXM1IiwiYXJpYU93bnMiLCJhcmlhLWV4cGFuZGVkIiwiYXJpYS1vd25zIiwiYXJpYS1oYXNwb3B1cCIsImFyaWEtYWN0aXZlZGVzY2VuZGFudCIsIl9wcm9wcyRpbnB1dFByb3BzIiwiZGl2UHJvcHMiLCJfYXJpYU93bnMiLCJhcmlhLXJlYWRvbmx5IiwiYm9yZGVyIiwicmVuZGVyQ2xlYXIiLCJyZW5kZXJBcnJvdyIsImFycm93IiwiZmlsdGVyVmFsdWUiLCJvbk9wdGlvblJlZiIsInJlbmRlck1lbnUiLCJyZW5kZXJIaWRkZW5GaWVsZCIsIl90aGlzNiIsImdldEZvY3VzYWJsZU9wdGlvbkluZGV4Iiwic2VsZWN0ZWRPcHRpb24iLCJzb21lIiwiaXNPcHRpb25FcXVhbCIsInJlbmRlck91dGVyIiwiX3RoaXM3Iiwib25TY3JvbGwiLCJfdGhpczgiLCJTZWxlY3QtLW11bHRpIiwiU2VsZWN0LS1zaW5nbGUiLCJpcy1jbGVhcmFibGUiLCJpcy1kaXNhYmxlZCIsImlzLWZvY3VzZWQiLCJpcy1sb2FkaW5nIiwiaXMtb3BlbiIsImlzLXBzZXVkby1mb2N1c2VkIiwiaXMtc2VhcmNoYWJsZSIsImhhcy12YWx1ZSIsInJlbW92ZU1lc3NhZ2UiLCJhcmlhLWxpdmUiLCJjb250cm9sIiwib25LZXlEb3duIiwiLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2VsZWN0L2xpYi9WYWx1ZS5qcyIsIlZhbHVlIiwiaGFuZGxlVG91Y2hFbmRSZW1vdmUiLCJyZW5kZXJSZW1vdmVJY29uIiwiYXJpYS1zZWxlY3RlZCIsIi4vbm9kZV9tb2R1bGVzL3JlYWN0LXNlbGVjdC9saWIvdXRpbHMvZGVmYXVsdEFycm93UmVuZGVyZXIuanMiLCIuL25vZGVfbW9kdWxlcy9yZWFjdC1zZWxlY3QvbGliL3V0aWxzL2RlZmF1bHRDbGVhclJlbmRlcmVyLmpzIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJfX2h0bWwiLCIuL25vZGVfbW9kdWxlcy9yZWFjdC1zZWxlY3QvbGliL3V0aWxzL2RlZmF1bHRGaWx0ZXJPcHRpb25zLmpzIiwiX3N0cmlwRGlhY3JpdGljczIiLCJ2YWx1ZVRlc3QiLCJsYWJlbFRlc3QiLCJzdWJzdHIiLCJfc3RyaXBEaWFjcml0aWNzIiwiLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2VsZWN0L2xpYi91dGlscy9kZWZhdWx0TWVudVJlbmRlcmVyLmpzIiwib3B0aW9uQ2xhc3MiLCJTZWxlY3Qtb3B0aW9uIiwiaXMtc2VsZWN0ZWQiLCIuL25vZGVfbW9kdWxlcy9yZWFjdC1zZWxlY3QvbGliL3V0aWxzL3N0cmlwRGlhY3JpdGljcy5qcyIsImxldHRlcnMiLCJzdHIiLCIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2J1aWxkaW4vYW1kLW9wdGlvbnMuanMiLCJfX3dlYnBhY2tfYW1kX29wdGlvbnNfXyIsIi4vc3JjL2NvbXBvbmVudHMvQXV0aC9GaWVsZC9GaWVsZC5qcyIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiUmVmZXJlbmNlRXJyb3IiLCJfZm9ybXN5UmVhY3QiLCJGaWVsZCIsIl9SZWFjdCRDb21wb25lbnQiLCJjaGFuZ2VWYWx1ZSIsImN1cnJlbnRUYXJnZXQiLCJlcnJvck1lc3NhZ2UiLCJodG1sRm9yIiwicmVnaXN0cmF0aW9uIiwiLi9zcmMvY29tcG9uZW50cy9DaGFydC9BeGlzL0F4aXMuanMiLCJfZCIsIkF4aXMiLCJyZW5kZXJBeGlzIiwiYXhpc09yaWVudCIsImF4aXNFbGVtZW50IiwiYXhpc1R5cGUiLCJvbmVPZiIsIi4vc3JjL2NvbXBvbmVudHMvQ2hhcnQvQ2hhcnQuanMiLCJfTGluZUNoYXJ0IiwiX0xpbmVDaGFydDIiLCJDaGFydCIsInNldENoaWxkV2lkdGgiLCJjYWxjV2lkdGgiLCJnZXRFbGVtZW50V2lkdGgiLCJkaXYiLCJvZmZzZXRXaWR0aCIsInN0eWxlTmFtZSIsIi4vc3JjL2NvbXBvbmVudHMvQ2hhcnQvRG90cy9Eb3RzLmpzIiwiRG90cyIsInlEYXRhIiwiLi9zcmMvY29tcG9uZW50cy9DaGFydC9HcmlkL0dyaWQuanMiLCJHcmlkIiwicmVuZGVyR3JpZCIsImxlbiIsImdyaWRFbGVtZW50IiwiZ3JpZFR5cGUiLCIuL3NyYy9jb21wb25lbnRzL0NoYXJ0L0xpbmVDaGFydC9MaW5lQ2hhcnQuanMiLCJfRG90cyIsIl9HcmlkIiwiX0dyaWQyIiwiX0F4aXMiLCJfQXhpczIiLCJMaW5lQ2hhcnQiLCJtYXJnaW4iLCJwYXJzZURhdGUiLCJ4RGF0YSIsInN0cm9rZUxpbmVjYXAiLCIuL3NyYy9jb21wb25lbnRzL0NoYXJ0L0xpbmVDaGFydC9pbmRleC5zY3NzIiwiLi9zcmMvY29tcG9uZW50cy9EZXZpY2VGb3JtL2RldmljZUZvcm0uanMiLCJtYXBTdGF0ZVRvUHJvcHMiLCJzdG9yZSIsInNldHRpbmdzIiwiYnVpbGRlciIsImRldmljZSIsInVwbG9hZFN0YXR1cyIsImxvY2F0aW9ucyIsImRldmljZUluTG9jYXRpb24iLCJtYXBEaXNwYXRjaFRvUHJvcHMiLCJfcmVkdXgiLCJiaW5kQWN0aW9uQ3JlYXRvcnMiLCJfYnVpbGRlciIsImFkZEl0ZW0iLCJyZXNldFByb3RvIiwiYWRkRGV2aWNlIiwidXBkYXRlRGV2aWNlIiwiX2RldmljZXMiLCJsb2FkTG9jYXRpb25zIiwiYWRkTG9jYXRpb24iLCJkZWxldGVMb2NhdGlvbiIsImRldmljZUV4aXN0SW5Mb2NhdGlvbiIsImRldmljZXNJbkxvY2F0aW9uIiwiX3JlYWN0U2VsZWN0IiwiX3JlYWN0UmVkdXgiLCJfZm9ybXN5UmVhY3QyIiwiX0ZpZWxkIiwiX0ZpZWxkMiIsIl9TZWxlY3RMb2NhdGlvbiIsIl9TZWxlY3RMb2NhdGlvbjIiLCJfdXRpbHMiLCJpdGVtc1RvQ2hvb3NlIiwiRGV2aWNlRm9ybSIsIm5ld0l0ZW0iLCJzZXRJdGVtRGVmYXVsdERhdGEiLCJjcmVhdGVCdXR0b24iLCJoYW5kbGVVc2VySW5wdXQiLCJzZWxlY3RMb2NhdGlvbiIsImhhbmRsZVN1Ym1pdCIsImVuYWJsZUJ1dHRvbiIsImNhblN1Ym1pdCIsImRpc2FibGVCdXR0b24iLCJpdGVtcyIsImRlZmF1bHRMb2NhdGlvbiIsImNyZWF0ZUJ1dHRvbnMiLCJjb25uZWN0IiwiLi9zcmMvY29tcG9uZW50cy9EZXZpY2VGb3JtL2RldmljZUZvcm0uc2NzcyIsIi4vc3JjL2NvbXBvbmVudHMvUHJvdG90eXBlL1Byb3RvdHlwZS5qcyIsImFkZERlc2NyaXB0aW9uIiwic2V0SXRlbVZhbHVlIiwic2V0UGFyYW1ldGVycyIsIl9TZXR0aW5nc0xpc3QiLCJQcm90b3R5cGUiLCJTZXR0aW5nc0xpc3QiLCJkZWxldGVJdGVtIiwiLi9zcmMvY29tcG9uZW50cy9Qcm90b3R5cGUvaW5kZXguc2NzcyIsIi4vc3JjL2NvbXBvbmVudHMvUmFuZ2VTZXR0aW5ncy9SYW5nZS5qcyIsIlJhbmdlU2V0dGluZ3MiLCJvblRpbWVyQ2hhbmdlIiwic2V0VGltZXJWYWx1ZSIsIml0ZW1JZCIsImRldmljZUlkIiwic2V0UGFyYW1zIiwic2V0TWluVmFsdWUiLCJzZXRNYXhWYWx1ZSIsInNob3dNaW5NYXgiLCJoaWRlTGFiZWwiLCJvbk1vdXNlVXAiLCJzZXREZXZpY2UiLCIuL3NyYy9jb21wb25lbnRzL1JhbmdlU2V0dGluZ3MvUmFuZ2VTdHlsZS5zY3NzIiwiLi9zcmMvY29tcG9uZW50cy9TZWxlY3RMb2NhdGlvbi9TZWxlY3RMb2NhdGlvbi5qcyIsIl9Qb3B1cCIsIl9CdXR0b24iLCJTZWxlY3RMb2NhdGlvbiIsInNldFBvcHVwU2hvd24iLCJjdXJyZW50U3RhdGUiLCJwb3B1cFNob3duIiwiX3NldFBvcHVwU2hvd24iLCJpZExvY2F0aW9uIiwic2hvd0lucHV0TG9jYXRpb24iLCJzZXRJbnB1dFZhbHVlIiwiZGVsZXRlU2VsZWN0ZWRMb2NhdGlvbiIsInNldExvY2F0aW9uVmFsdWUiLCJsb2NhdGlvblZhbHVlIiwiYWRkTG9jYXRpb25WYWx1ZSIsIlBvcHVwIiwiQnV0dG9uIiwib2tIYW5kbGVyIiwiaW5uZXJUZXh0IiwiLi9zcmMvY29tcG9uZW50cy9TZXR0aW5nc0xpc3QvU2V0dGluZ3NMaXN0LmpzIiwiX2NvbXBvbmVudHNOYW1lcyIsIl9TZXR0aW5nc0xpc3RJdGVtIiwic2V0dGluZyIsIkl0ZW0iLCJzZXR0aW5nc0NvbXBvbmVudHMiLCJTZXR0aW5nc0xpc3RJdGVtIiwiY2hlY2tlZCIsImRlc2NyaXB0aW9uIiwiLi9zcmMvY29tcG9uZW50cy9TZXR0aW5nc0xpc3RJdGVtL1NldHRpbmdzTGlzdEl0ZW0uanMiLCJjbG9uZUVsZW1lbnQiLCIuL3NyYy9jb21wb25lbnRzL1NldHRpbmdzTGlzdEl0ZW0vaW5kZXguc2NzcyIsIi4vc3JjL2NvbXBvbmVudHMvVGltZXJTZXR0aW5ncy9UaW1lci5qcyIsIl9SYW5nZSIsIl9SYW5nZTIiLCJUaW1lclNldHRpbmdzIiwiY2hhbmdlSG91cnMiLCJjaGFuZ2VNaW51dGVzIiwiaG91cnNLZXlEb3duIiwibWludXRlc0tleURvd24iLCJuZXdWYWx1ZSIsIi4vc3JjL2NvbXBvbmVudHMvVGltZXJTZXR0aW5ncy9UaW1lclN0eWxlLnNjc3MiLCIuL3NyYy9jb21wb25lbnRzL1RvZ2dsZVNldHRpbmdzL1RvZ2dsZVNldHRpbmdzLmpzIiwiVG9nZ2xlU2V0dGluZ3MiLCJvbkNoYW5nZVZhbHVlIiwiLi9zcmMvY29tcG9uZW50cy9Ub2dnbGVTZXR0aW5ncy9Ub2dnbGVTdHlsZS5zY3NzIiwiLi9zcmMvY29tcG9uZW50cy9WYWx1ZVNldHRpbmdzL1ZhbHVlLmpzIiwiVmFsdWVTZXR0aW5ncyIsInNldFRleHRWYWx1ZSIsIi4vc3JjL2NvbXBvbmVudHMvVmFsdWVTZXR0aW5ncy9WYWx1ZVN0eWxlLnNjc3MiLCIuL3NyYy9kYXRhL2NvbXBvbmVudHNOYW1lcy5qcyIsIl9Ub2dnbGVTZXR0aW5ncyIsIl9Ub2dnbGVTZXR0aW5nczIiLCJfVGltZXIiLCJfVGltZXIyIiwiX0NoYXJ0IiwiX0NoYXJ0MiIsIlJhbmdlIiwiVG9nZ2xlIiwiLi9zcmMvcGFnZXMvQnVpbGRlci9CdWlsZGVyLmpzIiwiZXJyb3JUZXh0IiwicmVzZXRCdWlsZGVyIiwiZWRpdERldmljZSIsImNsZWFyQWRkU3RhdHVzIiwiX2RldmljZUZvcm0iLCJfZGV2aWNlRm9ybTIiLCJfUHJvdG90eXBlIiwiX1Byb3RvdHlwZTIiLCJfTWVzc2FnZSIsIkJ1aWxkZXIiLCJoaXN0b3J5IiwiTWVzc2FnZSIsImNsZWFyU3RhdHVzIiwiLi9zcmMvcGFnZXMvQnVpbGRlci9idWlsZGVyLnNjc3MiXSwibWFwcGluZ3MiOiJBQUFBQSxjQUFjLElBRVJDLHFDQUNBLFNBQVVDLEVB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L1gsRUFBQTdCLFFBQVV4OUUsT0FDbEJpL0YsYUFBYzVmLEVBQUE3QixRQUFVOUksS0FDeEIybEIsV0FBWWhiLEVBQUE3QixRQUFVOUksS0FDdEJnckIsUUFBU3JnQixFQUFBN0IsUUFBVXg5RSxPQUNuQnNELE1BQU8rN0UsRUFBQTdCLFFBQVV4OUUsT0FDakIvWSxPQUFRbzRGLEVBQUE3QixRQUFVeDlFLE9BQ2xCblgsR0FBSXcyRixFQUFBN0IsUUFBVXQ0RixPQUNkZzZHLFdBQVk3ZixFQUFBN0IsUUFBVTlJLEtBQ3RCeXFCLGVBQWdCOWYsRUFBQTdCLFFBQVU5SSxLQUMxQnNxQixVQUFXM2YsRUFBQTdCLFFBQVV0NEYsUXhDcXdzQnZCM1AsRUFBUWlvRyxTd0Nsd3NCTyxFQUFBK2EsRUFBQXFCLFNBQVE1QyxFQUFpQlEsR0FBb0JpSSxJeENzd3NCdERJLG1DQUNBLFNBQVV2cUgsRUFBUUMiLCJmaWxlIjoiMC5pbmRleF9idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ3ZWJwYWNrSnNvbnAoWzBdLHtcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xudmFyIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18sIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbi8qIVxuICBDb3B5cmlnaHQgKGMpIDIwMTYgSmVkIFdhdHNvbi5cbiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCBzZWVcbiAgaHR0cDovL2plZHdhdHNvbi5naXRodWIuaW8vY2xhc3NuYW1lc1xuKi9cbi8qIGdsb2JhbCBkZWZpbmUgKi9cblxuKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBoYXNPd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuXHRmdW5jdGlvbiBjbGFzc05hbWVzKCkge1xuXHRcdHZhciBjbGFzc2VzID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdGlmICghYXJnKSBjb250aW51ZTtcblxuXHRcdFx0dmFyIGFyZ1R5cGUgPSB0eXBlb2YgYXJnID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihhcmcpO1xuXG5cdFx0XHRpZiAoYXJnVHlwZSA9PT0gJ3N0cmluZycgfHwgYXJnVHlwZSA9PT0gJ251bWJlcicpIHtcblx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZyk7XG5cdFx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuXHRcdFx0XHRjbGFzc2VzLnB1c2goY2xhc3NOYW1lcy5hcHBseShudWxsLCBhcmcpKTtcblx0XHRcdH0gZWxzZSBpZiAoYXJnVHlwZSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0Zm9yICh2YXIga2V5IGluIGFyZykge1xuXHRcdFx0XHRcdGlmIChoYXNPd24uY2FsbChhcmcsIGtleSkgJiYgYXJnW2tleV0pIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChrZXkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdG1vZHVsZS5leHBvcnRzID0gY2xhc3NOYW1lcztcblx0fSBlbHNlIGlmIChcImZ1bmN0aW9uXCIgPT09ICdmdW5jdGlvbicgJiYgX3R5cGVvZihfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2FtZC1vcHRpb25zLmpzXCIpKSA9PT0gJ29iamVjdCcgJiYgX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9hbWQtb3B0aW9ucy5qc1wiKSkge1xuXHRcdC8vIHJlZ2lzdGVyIGFzICdjbGFzc25hbWVzJywgY29uc2lzdGVudCB3aXRoIG5wbSBwYWNrYWdlIG5hbWVcblx0XHQhKF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18gPSBbXSwgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gY2xhc3NOYW1lcztcblx0XHR9LmFwcGx5KGV4cG9ydHMsIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18pLFxuXHRcdFx0XHRfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyAhPT0gdW5kZWZpbmVkICYmIChtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fKSk7XG5cdH0gZWxzZSB7XG5cdFx0d2luZG93LmNsYXNzTmFtZXMgPSBjbGFzc05hbWVzO1xuXHR9XG59KSgpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9jcmVhdGUtcmVhY3QtY2xhc3MvaW5kZXguanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuXG5cbnZhciBSZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9yZWFjdC9yZWFjdC5qc1wiKTtcbnZhciBmYWN0b3J5ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL2NyZWF0ZS1yZWFjdC1jbGFzcy9mYWN0b3J5LmpzXCIpO1xuXG5pZiAodHlwZW9mIFJlYWN0ID09PSAndW5kZWZpbmVkJykge1xuICB0aHJvdyBFcnJvcignY3JlYXRlLXJlYWN0LWNsYXNzIGNvdWxkIG5vdCBmaW5kIHRoZSBSZWFjdCBvYmplY3QuIElmIHlvdSBhcmUgdXNpbmcgc2NyaXB0IHRhZ3MsICcgKyAnbWFrZSBzdXJlIHRoYXQgUmVhY3QgaXMgYmVpbmcgbG9hZGVkIGJlZm9yZSBjcmVhdGUtcmVhY3QtY2xhc3MuJyk7XG59XG5cbi8vIEhhY2sgdG8gZ3JhYiBOb29wVXBkYXRlUXVldWUgZnJvbSBpc29tb3JwaGljIFJlYWN0XG52YXIgUmVhY3ROb29wVXBkYXRlUXVldWUgPSBuZXcgUmVhY3QuQ29tcG9uZW50KCkudXBkYXRlcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFJlYWN0LkNvbXBvbmVudCwgUmVhY3QuaXNWYWxpZEVsZW1lbnQsIFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvZDMvYnVpbGQvZDMuanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXztcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG4vLyBodHRwczovL2QzanMub3JnIFZlcnNpb24gNC4xMC4wLiBDb3B5cmlnaHQgMjAxNyBNaWtlIEJvc3RvY2suXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAoIGZhbHNlID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGV4cG9ydHMpKSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWN0b3J5KGV4cG9ydHMpIDogIHRydWUgPyAhKF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18gPSBbZXhwb3J0c10sIF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyA9IChmYWN0b3J5KSxcblx0XHRcdFx0X19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gPSAodHlwZW9mIF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyA9PT0gJ2Z1bmN0aW9uJyA/XG5cdFx0XHRcdChfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18uYXBwbHkoZXhwb3J0cywgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXykpIDogX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fKSxcblx0XHRcdFx0X19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gIT09IHVuZGVmaW5lZCAmJiAobW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXykpIDogZmFjdG9yeShnbG9iYWwuZDMgPSBnbG9iYWwuZDMgfHwge30pO1xufSkodW5kZWZpbmVkLCBmdW5jdGlvbiAoZXhwb3J0cykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIHZlcnNpb24gPSBcIjQuMTAuMFwiO1xuXG4gIHZhciBhc2NlbmRpbmcgPSBmdW5jdGlvbiBhc2NlbmRpbmcoYSwgYikge1xuICAgIHJldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogYSA+PSBiID8gMCA6IE5hTjtcbiAgfTtcblxuICB2YXIgYmlzZWN0b3IgPSBmdW5jdGlvbiBiaXNlY3Rvcihjb21wYXJlKSB7XG4gICAgaWYgKGNvbXBhcmUubGVuZ3RoID09PSAxKSBjb21wYXJlID0gYXNjZW5kaW5nQ29tcGFyYXRvcihjb21wYXJlKTtcbiAgICByZXR1cm4ge1xuICAgICAgbGVmdDogZnVuY3Rpb24gbGVmdChhLCB4LCBsbywgaGkpIHtcbiAgICAgICAgaWYgKGxvID09IG51bGwpIGxvID0gMDtcbiAgICAgICAgaWYgKGhpID09IG51bGwpIGhpID0gYS5sZW5ndGg7XG4gICAgICAgIHdoaWxlIChsbyA8IGhpKSB7XG4gICAgICAgICAgdmFyIG1pZCA9IGxvICsgaGkgPj4+IDE7XG4gICAgICAgICAgaWYgKGNvbXBhcmUoYVttaWRdLCB4KSA8IDApIGxvID0gbWlkICsgMTtlbHNlIGhpID0gbWlkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsbztcbiAgICAgIH0sXG4gICAgICByaWdodDogZnVuY3Rpb24gcmlnaHQoYSwgeCwgbG8sIGhpKSB7XG4gICAgICAgIGlmIChsbyA9PSBudWxsKSBsbyA9IDA7XG4gICAgICAgIGlmIChoaSA9PSBudWxsKSBoaSA9IGEubGVuZ3RoO1xuICAgICAgICB3aGlsZSAobG8gPCBoaSkge1xuICAgICAgICAgIHZhciBtaWQgPSBsbyArIGhpID4+PiAxO1xuICAgICAgICAgIGlmIChjb21wYXJlKGFbbWlkXSwgeCkgPiAwKSBoaSA9IG1pZDtlbHNlIGxvID0gbWlkICsgMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG87XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBhc2NlbmRpbmdDb21wYXJhdG9yKGYpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIHgpIHtcbiAgICAgIHJldHVybiBhc2NlbmRpbmcoZihkKSwgeCk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBhc2NlbmRpbmdCaXNlY3QgPSBiaXNlY3Rvcihhc2NlbmRpbmcpO1xuICB2YXIgYmlzZWN0UmlnaHQgPSBhc2NlbmRpbmdCaXNlY3QucmlnaHQ7XG4gIHZhciBiaXNlY3RMZWZ0ID0gYXNjZW5kaW5nQmlzZWN0LmxlZnQ7XG5cbiAgdmFyIHBhaXJzID0gZnVuY3Rpb24gcGFpcnMoYXJyYXksIGYpIHtcbiAgICBpZiAoZiA9PSBudWxsKSBmID0gcGFpcjtcbiAgICB2YXIgaSA9IDAsXG4gICAgICAgIG4gPSBhcnJheS5sZW5ndGggLSAxLFxuICAgICAgICBwID0gYXJyYXlbMF0sXG4gICAgICAgIHBhaXJzID0gbmV3IEFycmF5KG4gPCAwID8gMCA6IG4pO1xuICAgIHdoaWxlIChpIDwgbikge1xuICAgICAgcGFpcnNbaV0gPSBmKHAsIHAgPSBhcnJheVsrK2ldKTtcbiAgICB9cmV0dXJuIHBhaXJzO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHBhaXIoYSwgYikge1xuICAgIHJldHVybiBbYSwgYl07XG4gIH1cblxuICB2YXIgY3Jvc3MgPSBmdW5jdGlvbiBjcm9zcyh2YWx1ZXMwLCB2YWx1ZXMxLCByZWR1Y2UpIHtcbiAgICB2YXIgbjAgPSB2YWx1ZXMwLmxlbmd0aCxcbiAgICAgICAgbjEgPSB2YWx1ZXMxLmxlbmd0aCxcbiAgICAgICAgdmFsdWVzID0gbmV3IEFycmF5KG4wICogbjEpLFxuICAgICAgICBpMCxcbiAgICAgICAgaTEsXG4gICAgICAgIGksXG4gICAgICAgIHZhbHVlMDtcblxuICAgIGlmIChyZWR1Y2UgPT0gbnVsbCkgcmVkdWNlID0gcGFpcjtcblxuICAgIGZvciAoaTAgPSBpID0gMDsgaTAgPCBuMDsgKytpMCkge1xuICAgICAgZm9yICh2YWx1ZTAgPSB2YWx1ZXMwW2kwXSwgaTEgPSAwOyBpMSA8IG4xOyArK2kxLCArK2kpIHtcbiAgICAgICAgdmFsdWVzW2ldID0gcmVkdWNlKHZhbHVlMCwgdmFsdWVzMVtpMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZXM7XG4gIH07XG5cbiAgdmFyIGRlc2NlbmRpbmcgPSBmdW5jdGlvbiBkZXNjZW5kaW5nKGEsIGIpIHtcbiAgICByZXR1cm4gYiA8IGEgPyAtMSA6IGIgPiBhID8gMSA6IGIgPj0gYSA/IDAgOiBOYU47XG4gIH07XG5cbiAgdmFyIG51bWJlciA9IGZ1bmN0aW9uIG51bWJlcih4KSB7XG4gICAgcmV0dXJuIHggPT09IG51bGwgPyBOYU4gOiAreDtcbiAgfTtcblxuICB2YXIgdmFyaWFuY2UgPSBmdW5jdGlvbiB2YXJpYW5jZSh2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgIG0gPSAwLFxuICAgICAgICBpID0gLTEsXG4gICAgICAgIG1lYW4gPSAwLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgZGVsdGEsXG4gICAgICAgIHN1bSA9IDA7XG5cbiAgICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBpZiAoIWlzTmFOKHZhbHVlID0gbnVtYmVyKHZhbHVlc1tpXSkpKSB7XG4gICAgICAgICAgZGVsdGEgPSB2YWx1ZSAtIG1lYW47XG4gICAgICAgICAgbWVhbiArPSBkZWx0YSAvICsrbTtcbiAgICAgICAgICBzdW0gKz0gZGVsdGEgKiAodmFsdWUgLSBtZWFuKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBpZiAoIWlzTmFOKHZhbHVlID0gbnVtYmVyKHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSkpIHtcbiAgICAgICAgICBkZWx0YSA9IHZhbHVlIC0gbWVhbjtcbiAgICAgICAgICBtZWFuICs9IGRlbHRhIC8gKyttO1xuICAgICAgICAgIHN1bSArPSBkZWx0YSAqICh2YWx1ZSAtIG1lYW4pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG0gPiAxKSByZXR1cm4gc3VtIC8gKG0gLSAxKTtcbiAgfTtcblxuICB2YXIgZGV2aWF0aW9uID0gZnVuY3Rpb24gZGV2aWF0aW9uKGFycmF5LCBmKSB7XG4gICAgdmFyIHYgPSB2YXJpYW5jZShhcnJheSwgZik7XG4gICAgcmV0dXJuIHYgPyBNYXRoLnNxcnQodikgOiB2O1xuICB9O1xuXG4gIHZhciBleHRlbnQgPSBmdW5jdGlvbiBleHRlbnQodmFsdWVzLCB2YWx1ZW9mKSB7XG4gICAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgICBpID0gLTEsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICBtaW4sXG4gICAgICAgIG1heDtcblxuICAgIGlmICh2YWx1ZW9mID09IG51bGwpIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIC8vIEZpbmQgdGhlIGZpcnN0IGNvbXBhcmFibGUgdmFsdWUuXG4gICAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgICBtaW4gPSBtYXggPSB2YWx1ZTtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICAgICAgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgaWYgKG1pbiA+IHZhbHVlKSBtaW4gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgaWYgKG1heCA8IHZhbHVlKSBtYXggPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSAhPSBudWxsICYmIHZhbHVlID49IHZhbHVlKSB7XG4gICAgICAgICAgbWluID0gbWF4ID0gdmFsdWU7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgICAgIC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgaWYgKG1pbiA+IHZhbHVlKSBtaW4gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgaWYgKG1heCA8IHZhbHVlKSBtYXggPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gW21pbiwgbWF4XTtcbiAgfTtcblxuICB2YXIgYXJyYXkgPSBBcnJheS5wcm90b3R5cGU7XG5cbiAgdmFyIHNsaWNlID0gYXJyYXkuc2xpY2U7XG4gIHZhciBtYXAgPSBhcnJheS5tYXA7XG5cbiAgdmFyIGNvbnN0YW50ID0gZnVuY3Rpb24gY29uc3RhbnQoeCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4geDtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBpZGVudGl0eSA9IGZ1bmN0aW9uIGlkZW50aXR5KHgpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcblxuICB2YXIgc2VxdWVuY2UgPSBmdW5jdGlvbiBzZXF1ZW5jZShzdGFydCwgc3RvcCwgc3RlcCkge1xuICAgIHN0YXJ0ID0gK3N0YXJ0LCBzdG9wID0gK3N0b3AsIHN0ZXAgPSAobiA9IGFyZ3VtZW50cy5sZW5ndGgpIDwgMiA/IChzdG9wID0gc3RhcnQsIHN0YXJ0ID0gMCwgMSkgOiBuIDwgMyA/IDEgOiArc3RlcDtcblxuICAgIHZhciBpID0gLTEsXG4gICAgICAgIG4gPSBNYXRoLm1heCgwLCBNYXRoLmNlaWwoKHN0b3AgLSBzdGFydCkgLyBzdGVwKSkgfCAwLFxuICAgICAgICByYW5nZSA9IG5ldyBBcnJheShuKTtcblxuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICByYW5nZVtpXSA9IHN0YXJ0ICsgaSAqIHN0ZXA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJhbmdlO1xuICB9O1xuXG4gIHZhciBlMTAgPSBNYXRoLnNxcnQoNTApO1xuICB2YXIgZTUgPSBNYXRoLnNxcnQoMTApO1xuICB2YXIgZTIgPSBNYXRoLnNxcnQoMik7XG5cbiAgdmFyIHRpY2tzID0gZnVuY3Rpb24gdGlja3Moc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gICAgdmFyIHJldmVyc2UgPSBzdG9wIDwgc3RhcnQsXG4gICAgICAgIGkgPSAtMSxcbiAgICAgICAgbixcbiAgICAgICAgdGlja3MsXG4gICAgICAgIHN0ZXA7XG5cbiAgICBpZiAocmV2ZXJzZSkgbiA9IHN0YXJ0LCBzdGFydCA9IHN0b3AsIHN0b3AgPSBuO1xuXG4gICAgaWYgKChzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpKSA9PT0gMCB8fCAhaXNGaW5pdGUoc3RlcCkpIHJldHVybiBbXTtcblxuICAgIGlmIChzdGVwID4gMCkge1xuICAgICAgc3RhcnQgPSBNYXRoLmNlaWwoc3RhcnQgLyBzdGVwKTtcbiAgICAgIHN0b3AgPSBNYXRoLmZsb29yKHN0b3AgLyBzdGVwKTtcbiAgICAgIHRpY2tzID0gbmV3IEFycmF5KG4gPSBNYXRoLmNlaWwoc3RvcCAtIHN0YXJ0ICsgMSkpO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgdGlja3NbaV0gPSAoc3RhcnQgKyBpKSAqIHN0ZXA7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXJ0ID0gTWF0aC5mbG9vcihzdGFydCAqIHN0ZXApO1xuICAgICAgc3RvcCA9IE1hdGguY2VpbChzdG9wICogc3RlcCk7XG4gICAgICB0aWNrcyA9IG5ldyBBcnJheShuID0gTWF0aC5jZWlsKHN0YXJ0IC0gc3RvcCArIDEpKTtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIHRpY2tzW2ldID0gKHN0YXJ0IC0gaSkgLyBzdGVwO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChyZXZlcnNlKSB0aWNrcy5yZXZlcnNlKCk7XG5cbiAgICByZXR1cm4gdGlja3M7XG4gIH07XG5cbiAgZnVuY3Rpb24gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpIHtcbiAgICB2YXIgc3RlcCA9IChzdG9wIC0gc3RhcnQpIC8gTWF0aC5tYXgoMCwgY291bnQpLFxuICAgICAgICBwb3dlciA9IE1hdGguZmxvb3IoTWF0aC5sb2coc3RlcCkgLyBNYXRoLkxOMTApLFxuICAgICAgICBlcnJvciA9IHN0ZXAgLyBNYXRoLnBvdygxMCwgcG93ZXIpO1xuICAgIHJldHVybiBwb3dlciA+PSAwID8gKGVycm9yID49IGUxMCA/IDEwIDogZXJyb3IgPj0gZTUgPyA1IDogZXJyb3IgPj0gZTIgPyAyIDogMSkgKiBNYXRoLnBvdygxMCwgcG93ZXIpIDogLU1hdGgucG93KDEwLCAtcG93ZXIpIC8gKGVycm9yID49IGUxMCA/IDEwIDogZXJyb3IgPj0gZTUgPyA1IDogZXJyb3IgPj0gZTIgPyAyIDogMSk7XG4gIH1cblxuICBmdW5jdGlvbiB0aWNrU3RlcChzdGFydCwgc3RvcCwgY291bnQpIHtcbiAgICB2YXIgc3RlcDAgPSBNYXRoLmFicyhzdG9wIC0gc3RhcnQpIC8gTWF0aC5tYXgoMCwgY291bnQpLFxuICAgICAgICBzdGVwMSA9IE1hdGgucG93KDEwLCBNYXRoLmZsb29yKE1hdGgubG9nKHN0ZXAwKSAvIE1hdGguTE4xMCkpLFxuICAgICAgICBlcnJvciA9IHN0ZXAwIC8gc3RlcDE7XG4gICAgaWYgKGVycm9yID49IGUxMCkgc3RlcDEgKj0gMTA7ZWxzZSBpZiAoZXJyb3IgPj0gZTUpIHN0ZXAxICo9IDU7ZWxzZSBpZiAoZXJyb3IgPj0gZTIpIHN0ZXAxICo9IDI7XG4gICAgcmV0dXJuIHN0b3AgPCBzdGFydCA/IC1zdGVwMSA6IHN0ZXAxO1xuICB9XG5cbiAgdmFyIHN0dXJnZXMgPSBmdW5jdGlvbiBzdHVyZ2VzKHZhbHVlcykge1xuICAgIHJldHVybiBNYXRoLmNlaWwoTWF0aC5sb2codmFsdWVzLmxlbmd0aCkgLyBNYXRoLkxOMikgKyAxO1xuICB9O1xuXG4gIHZhciBoaXN0b2dyYW0gPSBmdW5jdGlvbiBoaXN0b2dyYW0oKSB7XG4gICAgdmFyIHZhbHVlID0gaWRlbnRpdHksXG4gICAgICAgIGRvbWFpbiA9IGV4dGVudCxcbiAgICAgICAgdGhyZXNob2xkID0gc3R1cmdlcztcblxuICAgIGZ1bmN0aW9uIGhpc3RvZ3JhbShkYXRhKSB7XG4gICAgICB2YXIgaSxcbiAgICAgICAgICBuID0gZGF0YS5sZW5ndGgsXG4gICAgICAgICAgeCxcbiAgICAgICAgICB2YWx1ZXMgPSBuZXcgQXJyYXkobik7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgdmFsdWVzW2ldID0gdmFsdWUoZGF0YVtpXSwgaSwgZGF0YSk7XG4gICAgICB9XG5cbiAgICAgIHZhciB4eiA9IGRvbWFpbih2YWx1ZXMpLFxuICAgICAgICAgIHgwID0geHpbMF0sXG4gICAgICAgICAgeDEgPSB4elsxXSxcbiAgICAgICAgICB0eiA9IHRocmVzaG9sZCh2YWx1ZXMsIHgwLCB4MSk7XG5cbiAgICAgIC8vIENvbnZlcnQgbnVtYmVyIG9mIHRocmVzaG9sZHMgaW50byB1bmlmb3JtIHRocmVzaG9sZHMuXG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkodHopKSB7XG4gICAgICAgIHR6ID0gdGlja1N0ZXAoeDAsIHgxLCB0eik7XG4gICAgICAgIHR6ID0gc2VxdWVuY2UoTWF0aC5jZWlsKHgwIC8gdHopICogdHosIE1hdGguZmxvb3IoeDEgLyB0eikgKiB0eiwgdHopOyAvLyBleGNsdXNpdmVcbiAgICAgIH1cblxuICAgICAgLy8gUmVtb3ZlIGFueSB0aHJlc2hvbGRzIG91dHNpZGUgdGhlIGRvbWFpbi5cbiAgICAgIHZhciBtID0gdHoubGVuZ3RoO1xuICAgICAgd2hpbGUgKHR6WzBdIDw9IHgwKSB7XG4gICAgICAgIHR6LnNoaWZ0KCksIC0tbTtcbiAgICAgIH13aGlsZSAodHpbbSAtIDFdID4geDEpIHtcbiAgICAgICAgdHoucG9wKCksIC0tbTtcbiAgICAgIH12YXIgYmlucyA9IG5ldyBBcnJheShtICsgMSksXG4gICAgICAgICAgYmluO1xuXG4gICAgICAvLyBJbml0aWFsaXplIGJpbnMuXG4gICAgICBmb3IgKGkgPSAwOyBpIDw9IG07ICsraSkge1xuICAgICAgICBiaW4gPSBiaW5zW2ldID0gW107XG4gICAgICAgIGJpbi54MCA9IGkgPiAwID8gdHpbaSAtIDFdIDogeDA7XG4gICAgICAgIGJpbi54MSA9IGkgPCBtID8gdHpbaV0gOiB4MTtcbiAgICAgIH1cblxuICAgICAgLy8gQXNzaWduIGRhdGEgdG8gYmlucyBieSB2YWx1ZSwgaWdub3JpbmcgYW55IG91dHNpZGUgdGhlIGRvbWFpbi5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgeCA9IHZhbHVlc1tpXTtcbiAgICAgICAgaWYgKHgwIDw9IHggJiYgeCA8PSB4MSkge1xuICAgICAgICAgIGJpbnNbYmlzZWN0UmlnaHQodHosIHgsIDAsIG0pXS5wdXNoKGRhdGFbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBiaW5zO1xuICAgIH1cblxuICAgIGhpc3RvZ3JhbS52YWx1ZSA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh2YWx1ZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoXyksIGhpc3RvZ3JhbSkgOiB2YWx1ZTtcbiAgICB9O1xuXG4gICAgaGlzdG9ncmFtLmRvbWFpbiA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4gPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KFtfWzBdLCBfWzFdXSksIGhpc3RvZ3JhbSkgOiBkb21haW47XG4gICAgfTtcblxuICAgIGhpc3RvZ3JhbS50aHJlc2hvbGRzID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRocmVzaG9sZCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogQXJyYXkuaXNBcnJheShfKSA/IGNvbnN0YW50KHNsaWNlLmNhbGwoXykpIDogY29uc3RhbnQoXyksIGhpc3RvZ3JhbSkgOiB0aHJlc2hvbGQ7XG4gICAgfTtcblxuICAgIHJldHVybiBoaXN0b2dyYW07XG4gIH07XG5cbiAgdmFyIHRocmVzaG9sZCA9IGZ1bmN0aW9uIHRocmVzaG9sZCh2YWx1ZXMsIHAsIHZhbHVlb2YpIHtcbiAgICBpZiAodmFsdWVvZiA9PSBudWxsKSB2YWx1ZW9mID0gbnVtYmVyO1xuICAgIGlmICghKG4gPSB2YWx1ZXMubGVuZ3RoKSkgcmV0dXJuO1xuICAgIGlmICgocCA9ICtwKSA8PSAwIHx8IG4gPCAyKSByZXR1cm4gK3ZhbHVlb2YodmFsdWVzWzBdLCAwLCB2YWx1ZXMpO1xuICAgIGlmIChwID49IDEpIHJldHVybiArdmFsdWVvZih2YWx1ZXNbbiAtIDFdLCBuIC0gMSwgdmFsdWVzKTtcbiAgICB2YXIgbixcbiAgICAgICAgaSA9IChuIC0gMSkgKiBwLFxuICAgICAgICBpMCA9IE1hdGguZmxvb3IoaSksXG4gICAgICAgIHZhbHVlMCA9ICt2YWx1ZW9mKHZhbHVlc1tpMF0sIGkwLCB2YWx1ZXMpLFxuICAgICAgICB2YWx1ZTEgPSArdmFsdWVvZih2YWx1ZXNbaTAgKyAxXSwgaTAgKyAxLCB2YWx1ZXMpO1xuICAgIHJldHVybiB2YWx1ZTAgKyAodmFsdWUxIC0gdmFsdWUwKSAqIChpIC0gaTApO1xuICB9O1xuXG4gIHZhciBmcmVlZG1hbkRpYWNvbmlzID0gZnVuY3Rpb24gZnJlZWRtYW5EaWFjb25pcyh2YWx1ZXMsIG1pbiwgbWF4KSB7XG4gICAgdmFsdWVzID0gbWFwLmNhbGwodmFsdWVzLCBudW1iZXIpLnNvcnQoYXNjZW5kaW5nKTtcbiAgICByZXR1cm4gTWF0aC5jZWlsKChtYXggLSBtaW4pIC8gKDIgKiAodGhyZXNob2xkKHZhbHVlcywgMC43NSkgLSB0aHJlc2hvbGQodmFsdWVzLCAwLjI1KSkgKiBNYXRoLnBvdyh2YWx1ZXMubGVuZ3RoLCAtMSAvIDMpKSk7XG4gIH07XG5cbiAgdmFyIHNjb3R0ID0gZnVuY3Rpb24gc2NvdHQodmFsdWVzLCBtaW4sIG1heCkge1xuICAgIHJldHVybiBNYXRoLmNlaWwoKG1heCAtIG1pbikgLyAoMy41ICogZGV2aWF0aW9uKHZhbHVlcykgKiBNYXRoLnBvdyh2YWx1ZXMubGVuZ3RoLCAtMSAvIDMpKSk7XG4gIH07XG5cbiAgdmFyIG1heCA9IGZ1bmN0aW9uIG1heCh2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgIGkgPSAtMSxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIG1heDtcblxuICAgIGlmICh2YWx1ZW9mID09IG51bGwpIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIC8vIEZpbmQgdGhlIGZpcnN0IGNvbXBhcmFibGUgdmFsdWUuXG4gICAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgICBtYXggPSB2YWx1ZTtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICAgICAgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwgJiYgdmFsdWUgPiBtYXgpIHtcbiAgICAgICAgICAgICAgbWF4ID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIC8vIEZpbmQgdGhlIGZpcnN0IGNvbXBhcmFibGUgdmFsdWUuXG4gICAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICAgIG1heCA9IHZhbHVlO1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgICAgICAvLyBDb21wYXJlIHRoZSByZW1haW5pbmcgdmFsdWVzLlxuICAgICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSAhPSBudWxsICYmIHZhbHVlID4gbWF4KSB7XG4gICAgICAgICAgICAgIG1heCA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBtYXg7XG4gIH07XG5cbiAgdmFyIG1lYW4gPSBmdW5jdGlvbiBtZWFuKHZhbHVlcywgdmFsdWVvZikge1xuICAgIHZhciBuID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgICAgbSA9IG4sXG4gICAgICAgIGkgPSAtMSxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHN1bSA9IDA7XG5cbiAgICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBpZiAoIWlzTmFOKHZhbHVlID0gbnVtYmVyKHZhbHVlc1tpXSkpKSBzdW0gKz0gdmFsdWU7ZWxzZSAtLW07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIGlmICghaXNOYU4odmFsdWUgPSBudW1iZXIodmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpKSkgc3VtICs9IHZhbHVlO2Vsc2UgLS1tO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChtKSByZXR1cm4gc3VtIC8gbTtcbiAgfTtcblxuICB2YXIgbWVkaWFuID0gZnVuY3Rpb24gbWVkaWFuKHZhbHVlcywgdmFsdWVvZikge1xuICAgIHZhciBuID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgICAgaSA9IC0xLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgbnVtYmVycyA9IFtdO1xuXG4gICAgaWYgKHZhbHVlb2YgPT0gbnVsbCkge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgaWYgKCFpc05hTih2YWx1ZSA9IG51bWJlcih2YWx1ZXNbaV0pKSkge1xuICAgICAgICAgIG51bWJlcnMucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgaWYgKCFpc05hTih2YWx1ZSA9IG51bWJlcih2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkpKSB7XG4gICAgICAgICAgbnVtYmVycy5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aHJlc2hvbGQobnVtYmVycy5zb3J0KGFzY2VuZGluZyksIDAuNSk7XG4gIH07XG5cbiAgdmFyIG1lcmdlID0gZnVuY3Rpb24gbWVyZ2UoYXJyYXlzKSB7XG4gICAgdmFyIG4gPSBhcnJheXMubGVuZ3RoLFxuICAgICAgICBtLFxuICAgICAgICBpID0gLTEsXG4gICAgICAgIGogPSAwLFxuICAgICAgICBtZXJnZWQsXG4gICAgICAgIGFycmF5O1xuXG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGogKz0gYXJyYXlzW2ldLmxlbmd0aDtcbiAgICB9bWVyZ2VkID0gbmV3IEFycmF5KGopO1xuXG4gICAgd2hpbGUgKC0tbiA+PSAwKSB7XG4gICAgICBhcnJheSA9IGFycmF5c1tuXTtcbiAgICAgIG0gPSBhcnJheS5sZW5ndGg7XG4gICAgICB3aGlsZSAoLS1tID49IDApIHtcbiAgICAgICAgbWVyZ2VkWy0tal0gPSBhcnJheVttXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbWVyZ2VkO1xuICB9O1xuXG4gIHZhciBtaW4gPSBmdW5jdGlvbiBtaW4odmFsdWVzLCB2YWx1ZW9mKSB7XG4gICAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgICBpID0gLTEsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICBtaW47XG5cbiAgICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICAvLyBGaW5kIHRoZSBmaXJzdCBjb21wYXJhYmxlIHZhbHVlLlxuICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVzW2ldKSAhPSBudWxsICYmIHZhbHVlID49IHZhbHVlKSB7XG4gICAgICAgICAgbWluID0gdmFsdWU7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgICAgIC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVzW2ldKSAhPSBudWxsICYmIG1pbiA+IHZhbHVlKSB7XG4gICAgICAgICAgICAgIG1pbiA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICAvLyBGaW5kIHRoZSBmaXJzdCBjb21wYXJhYmxlIHZhbHVlLlxuICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgICBtaW4gPSB2YWx1ZTtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICAgICAgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCAmJiBtaW4gPiB2YWx1ZSkge1xuICAgICAgICAgICAgICBtaW4gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbWluO1xuICB9O1xuXG4gIHZhciBwZXJtdXRlID0gZnVuY3Rpb24gcGVybXV0ZShhcnJheSwgaW5kZXhlcykge1xuICAgIHZhciBpID0gaW5kZXhlcy5sZW5ndGgsXG4gICAgICAgIHBlcm11dGVzID0gbmV3IEFycmF5KGkpO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHBlcm11dGVzW2ldID0gYXJyYXlbaW5kZXhlc1tpXV07XG4gICAgfXJldHVybiBwZXJtdXRlcztcbiAgfTtcblxuICB2YXIgc2NhbiA9IGZ1bmN0aW9uIHNjYW4odmFsdWVzLCBjb21wYXJlKSB7XG4gICAgaWYgKCEobiA9IHZhbHVlcy5sZW5ndGgpKSByZXR1cm47XG4gICAgdmFyIG4sXG4gICAgICAgIGkgPSAwLFxuICAgICAgICBqID0gMCxcbiAgICAgICAgeGksXG4gICAgICAgIHhqID0gdmFsdWVzW2pdO1xuXG4gICAgaWYgKGNvbXBhcmUgPT0gbnVsbCkgY29tcGFyZSA9IGFzY2VuZGluZztcblxuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAoY29tcGFyZSh4aSA9IHZhbHVlc1tpXSwgeGopIDwgMCB8fCBjb21wYXJlKHhqLCB4aikgIT09IDApIHtcbiAgICAgICAgeGogPSB4aSwgaiA9IGk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvbXBhcmUoeGosIHhqKSA9PT0gMCkgcmV0dXJuIGo7XG4gIH07XG5cbiAgdmFyIHNodWZmbGUgPSBmdW5jdGlvbiBzaHVmZmxlKGFycmF5LCBpMCwgaTEpIHtcbiAgICB2YXIgbSA9IChpMSA9PSBudWxsID8gYXJyYXkubGVuZ3RoIDogaTEpIC0gKGkwID0gaTAgPT0gbnVsbCA/IDAgOiAraTApLFxuICAgICAgICB0LFxuICAgICAgICBpO1xuXG4gICAgd2hpbGUgKG0pIHtcbiAgICAgIGkgPSBNYXRoLnJhbmRvbSgpICogbS0tIHwgMDtcbiAgICAgIHQgPSBhcnJheVttICsgaTBdO1xuICAgICAgYXJyYXlbbSArIGkwXSA9IGFycmF5W2kgKyBpMF07XG4gICAgICBhcnJheVtpICsgaTBdID0gdDtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyYXk7XG4gIH07XG5cbiAgdmFyIHN1bSA9IGZ1bmN0aW9uIHN1bSh2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgIGkgPSAtMSxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHN1bSA9IDA7XG5cbiAgICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBpZiAodmFsdWUgPSArdmFsdWVzW2ldKSBzdW0gKz0gdmFsdWU7IC8vIE5vdGU6IHplcm8gYW5kIG51bGwgYXJlIGVxdWl2YWxlbnQuXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9ICt2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgc3VtICs9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzdW07XG4gIH07XG5cbiAgdmFyIHRyYW5zcG9zZSA9IGZ1bmN0aW9uIHRyYW5zcG9zZShtYXRyaXgpIHtcbiAgICBpZiAoIShuID0gbWF0cml4Lmxlbmd0aCkpIHJldHVybiBbXTtcbiAgICBmb3IgKHZhciBpID0gLTEsIG0gPSBtaW4obWF0cml4LCBsZW5ndGgpLCB0cmFuc3Bvc2UgPSBuZXcgQXJyYXkobSk7ICsraSA8IG07KSB7XG4gICAgICBmb3IgKHZhciBqID0gLTEsIG4sIHJvdyA9IHRyYW5zcG9zZVtpXSA9IG5ldyBBcnJheShuKTsgKytqIDwgbjspIHtcbiAgICAgICAgcm93W2pdID0gbWF0cml4W2pdW2ldO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJhbnNwb3NlO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGxlbmd0aChkKSB7XG4gICAgcmV0dXJuIGQubGVuZ3RoO1xuICB9XG5cbiAgdmFyIHppcCA9IGZ1bmN0aW9uIHppcCgpIHtcbiAgICByZXR1cm4gdHJhbnNwb3NlKGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgdmFyIHNsaWNlJDEgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG5cbiAgdmFyIGlkZW50aXR5JDEgPSBmdW5jdGlvbiBpZGVudGl0eSQxKHgpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcblxuICB2YXIgdG9wID0gMTtcbiAgdmFyIHJpZ2h0ID0gMjtcbiAgdmFyIGJvdHRvbSA9IDM7XG4gIHZhciBsZWZ0ID0gNDtcbiAgdmFyIGVwc2lsb24gPSAxZS02O1xuXG4gIGZ1bmN0aW9uIHRyYW5zbGF0ZVgoeCkge1xuICAgIHJldHVybiBcInRyYW5zbGF0ZShcIiArICh4ICsgMC41KSArIFwiLDApXCI7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2xhdGVZKHkpIHtcbiAgICByZXR1cm4gXCJ0cmFuc2xhdGUoMCxcIiArICh5ICsgMC41KSArIFwiKVwiO1xuICB9XG5cbiAgZnVuY3Rpb24gbnVtYmVyJDEoc2NhbGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQpIHtcbiAgICAgIHJldHVybiArc2NhbGUoZCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNlbnRlcihzY2FsZSkge1xuICAgIHZhciBvZmZzZXQgPSBNYXRoLm1heCgwLCBzY2FsZS5iYW5kd2lkdGgoKSAtIDEpIC8gMjsgLy8gQWRqdXN0IGZvciAwLjVweCBvZmZzZXQuXG4gICAgaWYgKHNjYWxlLnJvdW5kKCkpIG9mZnNldCA9IE1hdGgucm91bmQob2Zmc2V0KTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQpIHtcbiAgICAgIHJldHVybiArc2NhbGUoZCkgKyBvZmZzZXQ7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVudGVyaW5nKCkge1xuICAgIHJldHVybiAhdGhpcy5fX2F4aXM7XG4gIH1cblxuICBmdW5jdGlvbiBheGlzKG9yaWVudCwgc2NhbGUpIHtcbiAgICB2YXIgdGlja0FyZ3VtZW50cyA9IFtdLFxuICAgICAgICB0aWNrVmFsdWVzID0gbnVsbCxcbiAgICAgICAgdGlja0Zvcm1hdCA9IG51bGwsXG4gICAgICAgIHRpY2tTaXplSW5uZXIgPSA2LFxuICAgICAgICB0aWNrU2l6ZU91dGVyID0gNixcbiAgICAgICAgdGlja1BhZGRpbmcgPSAzLFxuICAgICAgICBrID0gb3JpZW50ID09PSB0b3AgfHwgb3JpZW50ID09PSBsZWZ0ID8gLTEgOiAxLFxuICAgICAgICB4ID0gb3JpZW50ID09PSBsZWZ0IHx8IG9yaWVudCA9PT0gcmlnaHQgPyBcInhcIiA6IFwieVwiLFxuICAgICAgICB0cmFuc2Zvcm0gPSBvcmllbnQgPT09IHRvcCB8fCBvcmllbnQgPT09IGJvdHRvbSA/IHRyYW5zbGF0ZVggOiB0cmFuc2xhdGVZO1xuXG4gICAgZnVuY3Rpb24gYXhpcyhjb250ZXh0KSB7XG4gICAgICB2YXIgdmFsdWVzID0gdGlja1ZhbHVlcyA9PSBudWxsID8gc2NhbGUudGlja3MgPyBzY2FsZS50aWNrcy5hcHBseShzY2FsZSwgdGlja0FyZ3VtZW50cykgOiBzY2FsZS5kb21haW4oKSA6IHRpY2tWYWx1ZXMsXG4gICAgICAgICAgZm9ybWF0ID0gdGlja0Zvcm1hdCA9PSBudWxsID8gc2NhbGUudGlja0Zvcm1hdCA/IHNjYWxlLnRpY2tGb3JtYXQuYXBwbHkoc2NhbGUsIHRpY2tBcmd1bWVudHMpIDogaWRlbnRpdHkkMSA6IHRpY2tGb3JtYXQsXG4gICAgICAgICAgc3BhY2luZyA9IE1hdGgubWF4KHRpY2tTaXplSW5uZXIsIDApICsgdGlja1BhZGRpbmcsXG4gICAgICAgICAgcmFuZ2UgPSBzY2FsZS5yYW5nZSgpLFxuICAgICAgICAgIHJhbmdlMCA9ICtyYW5nZVswXSArIDAuNSxcbiAgICAgICAgICByYW5nZTEgPSArcmFuZ2VbcmFuZ2UubGVuZ3RoIC0gMV0gKyAwLjUsXG4gICAgICAgICAgcG9zaXRpb24gPSAoc2NhbGUuYmFuZHdpZHRoID8gY2VudGVyIDogbnVtYmVyJDEpKHNjYWxlLmNvcHkoKSksXG4gICAgICAgICAgc2VsZWN0aW9uID0gY29udGV4dC5zZWxlY3Rpb24gPyBjb250ZXh0LnNlbGVjdGlvbigpIDogY29udGV4dCxcbiAgICAgICAgICBwYXRoID0gc2VsZWN0aW9uLnNlbGVjdEFsbChcIi5kb21haW5cIikuZGF0YShbbnVsbF0pLFxuICAgICAgICAgIHRpY2sgPSBzZWxlY3Rpb24uc2VsZWN0QWxsKFwiLnRpY2tcIikuZGF0YSh2YWx1ZXMsIHNjYWxlKS5vcmRlcigpLFxuICAgICAgICAgIHRpY2tFeGl0ID0gdGljay5leGl0KCksXG4gICAgICAgICAgdGlja0VudGVyID0gdGljay5lbnRlcigpLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsIFwidGlja1wiKSxcbiAgICAgICAgICBsaW5lID0gdGljay5zZWxlY3QoXCJsaW5lXCIpLFxuICAgICAgICAgIHRleHQgPSB0aWNrLnNlbGVjdChcInRleHRcIik7XG5cbiAgICAgIHBhdGggPSBwYXRoLm1lcmdlKHBhdGguZW50ZXIoKS5pbnNlcnQoXCJwYXRoXCIsIFwiLnRpY2tcIikuYXR0cihcImNsYXNzXCIsIFwiZG9tYWluXCIpLmF0dHIoXCJzdHJva2VcIiwgXCIjMDAwXCIpKTtcblxuICAgICAgdGljayA9IHRpY2subWVyZ2UodGlja0VudGVyKTtcblxuICAgICAgbGluZSA9IGxpbmUubWVyZ2UodGlja0VudGVyLmFwcGVuZChcImxpbmVcIikuYXR0cihcInN0cm9rZVwiLCBcIiMwMDBcIikuYXR0cih4ICsgXCIyXCIsIGsgKiB0aWNrU2l6ZUlubmVyKSk7XG5cbiAgICAgIHRleHQgPSB0ZXh0Lm1lcmdlKHRpY2tFbnRlci5hcHBlbmQoXCJ0ZXh0XCIpLmF0dHIoXCJmaWxsXCIsIFwiIzAwMFwiKS5hdHRyKHgsIGsgKiBzcGFjaW5nKS5hdHRyKFwiZHlcIiwgb3JpZW50ID09PSB0b3AgPyBcIjBlbVwiIDogb3JpZW50ID09PSBib3R0b20gPyBcIjAuNzFlbVwiIDogXCIwLjMyZW1cIikpO1xuXG4gICAgICBpZiAoY29udGV4dCAhPT0gc2VsZWN0aW9uKSB7XG4gICAgICAgIHBhdGggPSBwYXRoLnRyYW5zaXRpb24oY29udGV4dCk7XG4gICAgICAgIHRpY2sgPSB0aWNrLnRyYW5zaXRpb24oY29udGV4dCk7XG4gICAgICAgIGxpbmUgPSBsaW5lLnRyYW5zaXRpb24oY29udGV4dCk7XG4gICAgICAgIHRleHQgPSB0ZXh0LnRyYW5zaXRpb24oY29udGV4dCk7XG5cbiAgICAgICAgdGlja0V4aXQgPSB0aWNrRXhpdC50cmFuc2l0aW9uKGNvbnRleHQpLmF0dHIoXCJvcGFjaXR5XCIsIGVwc2lsb24pLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICByZXR1cm4gaXNGaW5pdGUoZCA9IHBvc2l0aW9uKGQpKSA/IHRyYW5zZm9ybShkKSA6IHRoaXMuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aWNrRW50ZXIuYXR0cihcIm9wYWNpdHlcIiwgZXBzaWxvbikuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgIHZhciBwID0gdGhpcy5wYXJlbnROb2RlLl9fYXhpcztyZXR1cm4gdHJhbnNmb3JtKHAgJiYgaXNGaW5pdGUocCA9IHAoZCkpID8gcCA6IHBvc2l0aW9uKGQpKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHRpY2tFeGl0LnJlbW92ZSgpO1xuXG4gICAgICBwYXRoLmF0dHIoXCJkXCIsIG9yaWVudCA9PT0gbGVmdCB8fCBvcmllbnQgPT0gcmlnaHQgPyBcIk1cIiArIGsgKiB0aWNrU2l6ZU91dGVyICsgXCIsXCIgKyByYW5nZTAgKyBcIkgwLjVWXCIgKyByYW5nZTEgKyBcIkhcIiArIGsgKiB0aWNrU2l6ZU91dGVyIDogXCJNXCIgKyByYW5nZTAgKyBcIixcIiArIGsgKiB0aWNrU2l6ZU91dGVyICsgXCJWMC41SFwiICsgcmFuZ2UxICsgXCJWXCIgKyBrICogdGlja1NpemVPdXRlcik7XG5cbiAgICAgIHRpY2suYXR0cihcIm9wYWNpdHlcIiwgMSkuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICByZXR1cm4gdHJhbnNmb3JtKHBvc2l0aW9uKGQpKTtcbiAgICAgIH0pO1xuXG4gICAgICBsaW5lLmF0dHIoeCArIFwiMlwiLCBrICogdGlja1NpemVJbm5lcik7XG5cbiAgICAgIHRleHQuYXR0cih4LCBrICogc3BhY2luZykudGV4dChmb3JtYXQpO1xuXG4gICAgICBzZWxlY3Rpb24uZmlsdGVyKGVudGVyaW5nKS5hdHRyKFwiZmlsbFwiLCBcIm5vbmVcIikuYXR0cihcImZvbnQtc2l6ZVwiLCAxMCkuYXR0cihcImZvbnQtZmFtaWx5XCIsIFwic2Fucy1zZXJpZlwiKS5hdHRyKFwidGV4dC1hbmNob3JcIiwgb3JpZW50ID09PSByaWdodCA/IFwic3RhcnRcIiA6IG9yaWVudCA9PT0gbGVmdCA/IFwiZW5kXCIgOiBcIm1pZGRsZVwiKTtcblxuICAgICAgc2VsZWN0aW9uLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9fYXhpcyA9IHBvc2l0aW9uO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgYXhpcy5zY2FsZSA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzY2FsZSA9IF8sIGF4aXMpIDogc2NhbGU7XG4gICAgfTtcblxuICAgIGF4aXMudGlja3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGlja0FyZ3VtZW50cyA9IHNsaWNlJDEuY2FsbChhcmd1bWVudHMpLCBheGlzO1xuICAgIH07XG5cbiAgICBheGlzLnRpY2tBcmd1bWVudHMgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja0FyZ3VtZW50cyA9IF8gPT0gbnVsbCA/IFtdIDogc2xpY2UkMS5jYWxsKF8pLCBheGlzKSA6IHRpY2tBcmd1bWVudHMuc2xpY2UoKTtcbiAgICB9O1xuXG4gICAgYXhpcy50aWNrVmFsdWVzID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tWYWx1ZXMgPSBfID09IG51bGwgPyBudWxsIDogc2xpY2UkMS5jYWxsKF8pLCBheGlzKSA6IHRpY2tWYWx1ZXMgJiYgdGlja1ZhbHVlcy5zbGljZSgpO1xuICAgIH07XG5cbiAgICBheGlzLnRpY2tGb3JtYXQgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja0Zvcm1hdCA9IF8sIGF4aXMpIDogdGlja0Zvcm1hdDtcbiAgICB9O1xuXG4gICAgYXhpcy50aWNrU2l6ZSA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrU2l6ZUlubmVyID0gdGlja1NpemVPdXRlciA9ICtfLCBheGlzKSA6IHRpY2tTaXplSW5uZXI7XG4gICAgfTtcblxuICAgIGF4aXMudGlja1NpemVJbm5lciA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrU2l6ZUlubmVyID0gK18sIGF4aXMpIDogdGlja1NpemVJbm5lcjtcbiAgICB9O1xuXG4gICAgYXhpcy50aWNrU2l6ZU91dGVyID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tTaXplT3V0ZXIgPSArXywgYXhpcykgOiB0aWNrU2l6ZU91dGVyO1xuICAgIH07XG5cbiAgICBheGlzLnRpY2tQYWRkaW5nID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tQYWRkaW5nID0gK18sIGF4aXMpIDogdGlja1BhZGRpbmc7XG4gICAgfTtcblxuICAgIHJldHVybiBheGlzO1xuICB9XG5cbiAgZnVuY3Rpb24gYXhpc1RvcChzY2FsZSkge1xuICAgIHJldHVybiBheGlzKHRvcCwgc2NhbGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gYXhpc1JpZ2h0KHNjYWxlKSB7XG4gICAgcmV0dXJuIGF4aXMocmlnaHQsIHNjYWxlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGF4aXNCb3R0b20oc2NhbGUpIHtcbiAgICByZXR1cm4gYXhpcyhib3R0b20sIHNjYWxlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGF4aXNMZWZ0KHNjYWxlKSB7XG4gICAgcmV0dXJuIGF4aXMobGVmdCwgc2NhbGUpO1xuICB9XG5cbiAgdmFyIG5vb3AgPSB7IHZhbHVlOiBmdW5jdGlvbiB2YWx1ZSgpIHt9IH07XG5cbiAgZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBhcmd1bWVudHMubGVuZ3RoLCBfID0ge30sIHQ7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICghKHQgPSBhcmd1bWVudHNbaV0gKyBcIlwiKSB8fCB0IGluIF8pIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgdHlwZTogXCIgKyB0KTtcbiAgICAgIF9bdF0gPSBbXTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBEaXNwYXRjaChfKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIERpc3BhdGNoKF8pIHtcbiAgICB0aGlzLl8gPSBfO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VUeXBlbmFtZXModHlwZW5hbWVzLCB0eXBlcykge1xuICAgIHJldHVybiB0eXBlbmFtZXMudHJpbSgpLnNwbGl0KC9efFxccysvKS5tYXAoZnVuY3Rpb24gKHQpIHtcbiAgICAgIHZhciBuYW1lID0gXCJcIixcbiAgICAgICAgICBpID0gdC5pbmRleE9mKFwiLlwiKTtcbiAgICAgIGlmIChpID49IDApIG5hbWUgPSB0LnNsaWNlKGkgKyAxKSwgdCA9IHQuc2xpY2UoMCwgaSk7XG4gICAgICBpZiAodCAmJiAhdHlwZXMuaGFzT3duUHJvcGVydHkodCkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0KTtcbiAgICAgIHJldHVybiB7IHR5cGU6IHQsIG5hbWU6IG5hbWUgfTtcbiAgICB9KTtcbiAgfVxuXG4gIERpc3BhdGNoLnByb3RvdHlwZSA9IGRpc3BhdGNoLnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogRGlzcGF0Y2gsXG4gICAgb246IGZ1bmN0aW9uIG9uKHR5cGVuYW1lLCBjYWxsYmFjaykge1xuICAgICAgdmFyIF8gPSB0aGlzLl8sXG4gICAgICAgICAgVCA9IHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lICsgXCJcIiwgXyksXG4gICAgICAgICAgdCxcbiAgICAgICAgICBpID0gLTEsXG4gICAgICAgICAgbiA9IFQubGVuZ3RoO1xuXG4gICAgICAvLyBJZiBubyBjYWxsYmFjayB3YXMgc3BlY2lmaWVkLCByZXR1cm4gdGhlIGNhbGxiYWNrIG9mIHRoZSBnaXZlbiB0eXBlIGFuZCBuYW1lLlxuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgICAgaWYgKCh0ID0gKHR5cGVuYW1lID0gVFtpXSkudHlwZSkgJiYgKHQgPSBnZXQoX1t0XSwgdHlwZW5hbWUubmFtZSkpKSByZXR1cm4gdDtcbiAgICAgICAgfXJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgYSB0eXBlIHdhcyBzcGVjaWZpZWQsIHNldCB0aGUgY2FsbGJhY2sgZm9yIHRoZSBnaXZlbiB0eXBlIGFuZCBuYW1lLlxuICAgICAgLy8gT3RoZXJ3aXNlLCBpZiBhIG51bGwgY2FsbGJhY2sgd2FzIHNwZWNpZmllZCwgcmVtb3ZlIGNhbGxiYWNrcyBvZiB0aGUgZ2l2ZW4gbmFtZS5cbiAgICAgIGlmIChjYWxsYmFjayAhPSBudWxsICYmIHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGNhbGxiYWNrOiBcIiArIGNhbGxiYWNrKTtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIGlmICh0ID0gKHR5cGVuYW1lID0gVFtpXSkudHlwZSkgX1t0XSA9IHNldChfW3RdLCB0eXBlbmFtZS5uYW1lLCBjYWxsYmFjayk7ZWxzZSBpZiAoY2FsbGJhY2sgPT0gbnVsbCkgZm9yICh0IGluIF8pIHtcbiAgICAgICAgICBfW3RdID0gc2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUsIG51bGwpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgY29weTogZnVuY3Rpb24gY29weSgpIHtcbiAgICAgIHZhciBjb3B5ID0ge30sXG4gICAgICAgICAgXyA9IHRoaXMuXztcbiAgICAgIGZvciAodmFyIHQgaW4gXykge1xuICAgICAgICBjb3B5W3RdID0gX1t0XS5zbGljZSgpO1xuICAgICAgfXJldHVybiBuZXcgRGlzcGF0Y2goY29weSk7XG4gICAgfSxcbiAgICBjYWxsOiBmdW5jdGlvbiBjYWxsKHR5cGUsIHRoYXQpIHtcbiAgICAgIGlmICgobiA9IGFyZ3VtZW50cy5sZW5ndGggLSAyKSA+IDApIGZvciAodmFyIGFyZ3MgPSBuZXcgQXJyYXkobiksIGkgPSAwLCBuLCB0OyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaSArIDJdO1xuICAgICAgfWlmICghdGhpcy5fLmhhc093blByb3BlcnR5KHR5cGUpKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHR5cGU6IFwiICsgdHlwZSk7XG4gICAgICBmb3IgKHQgPSB0aGlzLl9bdHlwZV0sIGkgPSAwLCBuID0gdC5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgdFtpXS52YWx1ZS5hcHBseSh0aGF0LCBhcmdzKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGFwcGx5OiBmdW5jdGlvbiBhcHBseSh0eXBlLCB0aGF0LCBhcmdzKSB7XG4gICAgICBpZiAoIXRoaXMuXy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSkgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB0eXBlOiBcIiArIHR5cGUpO1xuICAgICAgZm9yICh2YXIgdCA9IHRoaXMuX1t0eXBlXSwgaSA9IDAsIG4gPSB0Lmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICB0W2ldLnZhbHVlLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBnZXQodHlwZSwgbmFtZSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gdHlwZS5sZW5ndGgsIGM7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgoYyA9IHR5cGVbaV0pLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGMudmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0KHR5cGUsIG5hbWUsIGNhbGxiYWNrKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSB0eXBlLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKHR5cGVbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICB0eXBlW2ldID0gbm9vcCwgdHlwZSA9IHR5cGUuc2xpY2UoMCwgaSkuY29uY2F0KHR5cGUuc2xpY2UoaSArIDEpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChjYWxsYmFjayAhPSBudWxsKSB0eXBlLnB1c2goeyBuYW1lOiBuYW1lLCB2YWx1ZTogY2FsbGJhY2sgfSk7XG4gICAgcmV0dXJuIHR5cGU7XG4gIH1cblxuICB2YXIgeGh0bWwgPSBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjtcblxuICB2YXIgbmFtZXNwYWNlcyA9IHtcbiAgICBzdmc6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcbiAgICB4aHRtbDogeGh0bWwsXG4gICAgeGxpbms6IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICAgIHhtbDogXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIixcbiAgICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zL1wiXG4gIH07XG5cbiAgdmFyIG5hbWVzcGFjZSA9IGZ1bmN0aW9uIG5hbWVzcGFjZShuYW1lKSB7XG4gICAgdmFyIHByZWZpeCA9IG5hbWUgKz0gXCJcIixcbiAgICAgICAgaSA9IHByZWZpeC5pbmRleE9mKFwiOlwiKTtcbiAgICBpZiAoaSA+PSAwICYmIChwcmVmaXggPSBuYW1lLnNsaWNlKDAsIGkpKSAhPT0gXCJ4bWxuc1wiKSBuYW1lID0gbmFtZS5zbGljZShpICsgMSk7XG4gICAgcmV0dXJuIG5hbWVzcGFjZXMuaGFzT3duUHJvcGVydHkocHJlZml4KSA/IHsgc3BhY2U6IG5hbWVzcGFjZXNbcHJlZml4XSwgbG9jYWw6IG5hbWUgfSA6IG5hbWU7XG4gIH07XG5cbiAgZnVuY3Rpb24gY3JlYXRvckluaGVyaXQobmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZG9jdW1lbnQgPSB0aGlzLm93bmVyRG9jdW1lbnQsXG4gICAgICAgICAgdXJpID0gdGhpcy5uYW1lc3BhY2VVUkk7XG4gICAgICByZXR1cm4gdXJpID09PSB4aHRtbCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubmFtZXNwYWNlVVJJID09PSB4aHRtbCA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobmFtZSkgOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlModXJpLCBuYW1lKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRvckZpeGVkKGZ1bGxuYW1lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBjcmVhdG9yID0gZnVuY3Rpb24gY3JlYXRvcihuYW1lKSB7XG4gICAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpO1xuICAgIHJldHVybiAoZnVsbG5hbWUubG9jYWwgPyBjcmVhdG9yRml4ZWQgOiBjcmVhdG9ySW5oZXJpdCkoZnVsbG5hbWUpO1xuICB9O1xuXG4gIHZhciBuZXh0SWQgPSAwO1xuXG4gIGZ1bmN0aW9uIGxvY2FsJDEoKSB7XG4gICAgcmV0dXJuIG5ldyBMb2NhbCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gTG9jYWwoKSB7XG4gICAgdGhpcy5fID0gXCJAXCIgKyAoKytuZXh0SWQpLnRvU3RyaW5nKDM2KTtcbiAgfVxuXG4gIExvY2FsLnByb3RvdHlwZSA9IGxvY2FsJDEucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBMb2NhbCxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldChub2RlKSB7XG4gICAgICB2YXIgaWQgPSB0aGlzLl87XG4gICAgICB3aGlsZSAoIShpZCBpbiBub2RlKSkge1xuICAgICAgICBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkgcmV0dXJuO1xuICAgICAgfXJldHVybiBub2RlW2lkXTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KG5vZGUsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gbm9kZVt0aGlzLl9dID0gdmFsdWU7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShub2RlKSB7XG4gICAgICByZXR1cm4gdGhpcy5fIGluIG5vZGUgJiYgZGVsZXRlIG5vZGVbdGhpcy5fXTtcbiAgICB9LFxuICAgIHRvU3RyaW5nOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgIHJldHVybiB0aGlzLl87XG4gICAgfVxuICB9O1xuXG4gIHZhciBtYXRjaGVyID0gZnVuY3Rpb24gbWF0Y2hlcihzZWxlY3Rvcikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tYXRjaGVzKHNlbGVjdG9yKTtcbiAgICB9O1xuICB9O1xuXG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICBpZiAoIWVsZW1lbnQubWF0Y2hlcykge1xuICAgICAgdmFyIHZlbmRvck1hdGNoZXMgPSBlbGVtZW50LndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fCBlbGVtZW50Lm1zTWF0Y2hlc1NlbGVjdG9yIHx8IGVsZW1lbnQubW96TWF0Y2hlc1NlbGVjdG9yIHx8IGVsZW1lbnQub01hdGNoZXNTZWxlY3RvcjtcbiAgICAgIG1hdGNoZXIgPSBmdW5jdGlvbiBtYXRjaGVyKHNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHZlbmRvck1hdGNoZXMuY2FsbCh0aGlzLCBzZWxlY3Rvcik7XG4gICAgICAgIH07XG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBtYXRjaGVyJDEgPSBtYXRjaGVyO1xuXG4gIHZhciBmaWx0ZXJFdmVudHMgPSB7fTtcblxuICBleHBvcnRzLmV2ZW50ID0gbnVsbDtcblxuICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIGVsZW1lbnQkMSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICBpZiAoIShcIm9ubW91c2VlbnRlclwiIGluIGVsZW1lbnQkMSkpIHtcbiAgICAgIGZpbHRlckV2ZW50cyA9IHsgbW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIiwgbW91c2VsZWF2ZTogXCJtb3VzZW91dFwiIH07XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZmlsdGVyQ29udGV4dExpc3RlbmVyKGxpc3RlbmVyLCBpbmRleCwgZ3JvdXApIHtcbiAgICBsaXN0ZW5lciA9IGNvbnRleHRMaXN0ZW5lcihsaXN0ZW5lciwgaW5kZXgsIGdyb3VwKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgcmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQ7XG4gICAgICBpZiAoIXJlbGF0ZWQgfHwgcmVsYXRlZCAhPT0gdGhpcyAmJiAhKHJlbGF0ZWQuY29tcGFyZURvY3VtZW50UG9zaXRpb24odGhpcykgJiA4KSkge1xuICAgICAgICBsaXN0ZW5lci5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY29udGV4dExpc3RlbmVyKGxpc3RlbmVyLCBpbmRleCwgZ3JvdXApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50MSkge1xuICAgICAgdmFyIGV2ZW50MCA9IGV4cG9ydHMuZXZlbnQ7IC8vIEV2ZW50cyBjYW4gYmUgcmVlbnRyYW50IChlLmcuLCBmb2N1cykuXG4gICAgICBleHBvcnRzLmV2ZW50ID0gZXZlbnQxO1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCB0aGlzLl9fZGF0YV9fLCBpbmRleCwgZ3JvdXApO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgZXhwb3J0cy5ldmVudCA9IGV2ZW50MDtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VUeXBlbmFtZXMkMSh0eXBlbmFtZXMpIHtcbiAgICByZXR1cm4gdHlwZW5hbWVzLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykubWFwKGZ1bmN0aW9uICh0KSB7XG4gICAgICB2YXIgbmFtZSA9IFwiXCIsXG4gICAgICAgICAgaSA9IHQuaW5kZXhPZihcIi5cIik7XG4gICAgICBpZiAoaSA+PSAwKSBuYW1lID0gdC5zbGljZShpICsgMSksIHQgPSB0LnNsaWNlKDAsIGkpO1xuICAgICAgcmV0dXJuIHsgdHlwZTogdCwgbmFtZTogbmFtZSB9O1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gb25SZW1vdmUodHlwZW5hbWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIG9uID0gdGhpcy5fX29uO1xuICAgICAgaWYgKCFvbikgcmV0dXJuO1xuICAgICAgZm9yICh2YXIgaiA9IDAsIGkgPSAtMSwgbSA9IG9uLmxlbmd0aCwgbzsgaiA8IG07ICsraikge1xuICAgICAgICBpZiAobyA9IG9uW2pdLCAoIXR5cGVuYW1lLnR5cGUgfHwgby50eXBlID09PSB0eXBlbmFtZS50eXBlKSAmJiBvLm5hbWUgPT09IHR5cGVuYW1lLm5hbWUpIHtcbiAgICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoby50eXBlLCBvLmxpc3RlbmVyLCBvLmNhcHR1cmUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9uWysraV0gPSBvO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoKytpKSBvbi5sZW5ndGggPSBpO2Vsc2UgZGVsZXRlIHRoaXMuX19vbjtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gb25BZGQodHlwZW5hbWUsIHZhbHVlLCBjYXB0dXJlKSB7XG4gICAgdmFyIHdyYXAgPSBmaWx0ZXJFdmVudHMuaGFzT3duUHJvcGVydHkodHlwZW5hbWUudHlwZSkgPyBmaWx0ZXJDb250ZXh0TGlzdGVuZXIgOiBjb250ZXh0TGlzdGVuZXI7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBpLCBncm91cCkge1xuICAgICAgdmFyIG9uID0gdGhpcy5fX29uLFxuICAgICAgICAgIG8sXG4gICAgICAgICAgbGlzdGVuZXIgPSB3cmFwKHZhbHVlLCBpLCBncm91cCk7XG4gICAgICBpZiAob24pIGZvciAodmFyIGogPSAwLCBtID0gb24ubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgICAgIGlmICgobyA9IG9uW2pdKS50eXBlID09PSB0eXBlbmFtZS50eXBlICYmIG8ubmFtZSA9PT0gdHlwZW5hbWUubmFtZSkge1xuICAgICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihvLnR5cGUsIG8ubGlzdGVuZXIsIG8uY2FwdHVyZSk7XG4gICAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciA9IGxpc3RlbmVyLCBvLmNhcHR1cmUgPSBjYXB0dXJlKTtcbiAgICAgICAgICBvLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIodHlwZW5hbWUudHlwZSwgbGlzdGVuZXIsIGNhcHR1cmUpO1xuICAgICAgbyA9IHsgdHlwZTogdHlwZW5hbWUudHlwZSwgbmFtZTogdHlwZW5hbWUubmFtZSwgdmFsdWU6IHZhbHVlLCBsaXN0ZW5lcjogbGlzdGVuZXIsIGNhcHR1cmU6IGNhcHR1cmUgfTtcbiAgICAgIGlmICghb24pIHRoaXMuX19vbiA9IFtvXTtlbHNlIG9uLnB1c2gobyk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBzZWxlY3Rpb25fb24gPSBmdW5jdGlvbiBzZWxlY3Rpb25fb24odHlwZW5hbWUsIHZhbHVlLCBjYXB0dXJlKSB7XG4gICAgdmFyIHR5cGVuYW1lcyA9IHBhcnNlVHlwZW5hbWVzJDEodHlwZW5hbWUgKyBcIlwiKSxcbiAgICAgICAgaSxcbiAgICAgICAgbiA9IHR5cGVuYW1lcy5sZW5ndGgsXG4gICAgICAgIHQ7XG5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgIHZhciBvbiA9IHRoaXMubm9kZSgpLl9fb247XG4gICAgICBpZiAob24pIGZvciAodmFyIGogPSAwLCBtID0gb24ubGVuZ3RoLCBvOyBqIDwgbTsgKytqKSB7XG4gICAgICAgIGZvciAoaSA9IDAsIG8gPSBvbltqXTsgaSA8IG47ICsraSkge1xuICAgICAgICAgIGlmICgodCA9IHR5cGVuYW1lc1tpXSkudHlwZSA9PT0gby50eXBlICYmIHQubmFtZSA9PT0gby5uYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gby52YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBvbiA9IHZhbHVlID8gb25BZGQgOiBvblJlbW92ZTtcbiAgICBpZiAoY2FwdHVyZSA9PSBudWxsKSBjYXB0dXJlID0gZmFsc2U7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgdGhpcy5lYWNoKG9uKHR5cGVuYW1lc1tpXSwgdmFsdWUsIGNhcHR1cmUpKTtcbiAgICB9cmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgZnVuY3Rpb24gY3VzdG9tRXZlbnQoZXZlbnQxLCBsaXN0ZW5lciwgdGhhdCwgYXJncykge1xuICAgIHZhciBldmVudDAgPSBleHBvcnRzLmV2ZW50O1xuICAgIGV2ZW50MS5zb3VyY2VFdmVudCA9IGV4cG9ydHMuZXZlbnQ7XG4gICAgZXhwb3J0cy5ldmVudCA9IGV2ZW50MTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGxpc3RlbmVyLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBleHBvcnRzLmV2ZW50ID0gZXZlbnQwO1xuICAgIH1cbiAgfVxuXG4gIHZhciBzb3VyY2VFdmVudCA9IGZ1bmN0aW9uIHNvdXJjZUV2ZW50KCkge1xuICAgIHZhciBjdXJyZW50ID0gZXhwb3J0cy5ldmVudCxcbiAgICAgICAgc291cmNlO1xuICAgIHdoaWxlIChzb3VyY2UgPSBjdXJyZW50LnNvdXJjZUV2ZW50KSB7XG4gICAgICBjdXJyZW50ID0gc291cmNlO1xuICAgIH1yZXR1cm4gY3VycmVudDtcbiAgfTtcblxuICB2YXIgcG9pbnQgPSBmdW5jdGlvbiBwb2ludChub2RlLCBldmVudCkge1xuICAgIHZhciBzdmcgPSBub2RlLm93bmVyU1ZHRWxlbWVudCB8fCBub2RlO1xuXG4gICAgaWYgKHN2Zy5jcmVhdGVTVkdQb2ludCkge1xuICAgICAgdmFyIHBvaW50ID0gc3ZnLmNyZWF0ZVNWR1BvaW50KCk7XG4gICAgICBwb2ludC54ID0gZXZlbnQuY2xpZW50WCwgcG9pbnQueSA9IGV2ZW50LmNsaWVudFk7XG4gICAgICBwb2ludCA9IHBvaW50Lm1hdHJpeFRyYW5zZm9ybShub2RlLmdldFNjcmVlbkNUTSgpLmludmVyc2UoKSk7XG4gICAgICByZXR1cm4gW3BvaW50LngsIHBvaW50LnldO1xuICAgIH1cblxuICAgIHZhciByZWN0ID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICByZXR1cm4gW2V2ZW50LmNsaWVudFggLSByZWN0LmxlZnQgLSBub2RlLmNsaWVudExlZnQsIGV2ZW50LmNsaWVudFkgLSByZWN0LnRvcCAtIG5vZGUuY2xpZW50VG9wXTtcbiAgfTtcblxuICB2YXIgbW91c2UgPSBmdW5jdGlvbiBtb3VzZShub2RlKSB7XG4gICAgdmFyIGV2ZW50ID0gc291cmNlRXZlbnQoKTtcbiAgICBpZiAoZXZlbnQuY2hhbmdlZFRvdWNoZXMpIGV2ZW50ID0gZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF07XG4gICAgcmV0dXJuIHBvaW50KG5vZGUsIGV2ZW50KTtcbiAgfTtcblxuICBmdW5jdGlvbiBub25lKCkge31cblxuICB2YXIgc2VsZWN0b3IgPSBmdW5jdGlvbiBzZWxlY3Rvcihfc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gX3NlbGVjdG9yID09IG51bGwgPyBub25lIDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMucXVlcnlTZWxlY3Rvcihfc2VsZWN0b3IpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIHNlbGVjdGlvbl9zZWxlY3QgPSBmdW5jdGlvbiBzZWxlY3Rpb25fc2VsZWN0KHNlbGVjdCkge1xuICAgIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yKHNlbGVjdCk7XG5cbiAgICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIHN1Ym5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAoc3Vibm9kZSA9IHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkpIHtcbiAgICAgICAgICBpZiAoXCJfX2RhdGFfX1wiIGluIG5vZGUpIHN1Ym5vZGUuX19kYXRhX18gPSBub2RlLl9fZGF0YV9fO1xuICAgICAgICAgIHN1Ymdyb3VwW2ldID0gc3Vibm9kZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cyk7XG4gIH07XG5cbiAgZnVuY3Rpb24gZW1wdHkkMSgpIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICB2YXIgc2VsZWN0b3JBbGwgPSBmdW5jdGlvbiBzZWxlY3RvckFsbChzZWxlY3Rvcikge1xuICAgIHJldHVybiBzZWxlY3RvciA9PSBudWxsID8gZW1wdHkkMSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIHNlbGVjdGlvbl9zZWxlY3RBbGwgPSBmdW5jdGlvbiBzZWxlY3Rpb25fc2VsZWN0QWxsKHNlbGVjdCkge1xuICAgIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yQWxsKHNlbGVjdCk7XG5cbiAgICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBbXSwgcGFyZW50cyA9IFtdLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgICBzdWJncm91cHMucHVzaChzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpO1xuICAgICAgICAgIHBhcmVudHMucHVzaChub2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgcGFyZW50cyk7XG4gIH07XG5cbiAgdmFyIHNlbGVjdGlvbl9maWx0ZXIgPSBmdW5jdGlvbiBzZWxlY3Rpb25fZmlsdGVyKG1hdGNoKSB7XG4gICAgaWYgKHR5cGVvZiBtYXRjaCAhPT0gXCJmdW5jdGlvblwiKSBtYXRjaCA9IG1hdGNoZXIkMShtYXRjaCk7XG5cbiAgICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBbXSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIG1hdGNoLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSB7XG4gICAgICAgICAgc3ViZ3JvdXAucHVzaChub2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cyk7XG4gIH07XG5cbiAgdmFyIHNwYXJzZSA9IGZ1bmN0aW9uIHNwYXJzZSh1cGRhdGUpIHtcbiAgICByZXR1cm4gbmV3IEFycmF5KHVwZGF0ZS5sZW5ndGgpO1xuICB9O1xuXG4gIHZhciBzZWxlY3Rpb25fZW50ZXIgPSBmdW5jdGlvbiBzZWxlY3Rpb25fZW50ZXIoKSB7XG4gICAgcmV0dXJuIG5ldyBTZWxlY3Rpb24odGhpcy5fZW50ZXIgfHwgdGhpcy5fZ3JvdXBzLm1hcChzcGFyc2UpLCB0aGlzLl9wYXJlbnRzKTtcbiAgfTtcblxuICBmdW5jdGlvbiBFbnRlck5vZGUocGFyZW50LCBkYXR1bSkge1xuICAgIHRoaXMub3duZXJEb2N1bWVudCA9IHBhcmVudC5vd25lckRvY3VtZW50O1xuICAgIHRoaXMubmFtZXNwYWNlVVJJID0gcGFyZW50Lm5hbWVzcGFjZVVSSTtcbiAgICB0aGlzLl9uZXh0ID0gbnVsbDtcbiAgICB0aGlzLl9wYXJlbnQgPSBwYXJlbnQ7XG4gICAgdGhpcy5fX2RhdGFfXyA9IGRhdHVtO1xuICB9XG5cbiAgRW50ZXJOb2RlLnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogRW50ZXJOb2RlLFxuICAgIGFwcGVuZENoaWxkOiBmdW5jdGlvbiBhcHBlbmRDaGlsZChjaGlsZCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3BhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIHRoaXMuX25leHQpO1xuICAgIH0sXG4gICAgaW5zZXJ0QmVmb3JlOiBmdW5jdGlvbiBpbnNlcnRCZWZvcmUoY2hpbGQsIG5leHQpIHtcbiAgICAgIHJldHVybiB0aGlzLl9wYXJlbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCBuZXh0KTtcbiAgICB9LFxuICAgIHF1ZXJ5U2VsZWN0b3I6IGZ1bmN0aW9uIHF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpIHtcbiAgICAgIHJldHVybiB0aGlzLl9wYXJlbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgfSxcbiAgICBxdWVyeVNlbGVjdG9yQWxsOiBmdW5jdGlvbiBxdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgY29uc3RhbnQkMSA9IGZ1bmN0aW9uIGNvbnN0YW50JDEoeCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4geDtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBrZXlQcmVmaXggPSBcIiRcIjsgLy8gUHJvdGVjdCBhZ2FpbnN0IGtleXMgbGlrZSDigJxfX3Byb3RvX1/igJ0uXG5cbiAgZnVuY3Rpb24gYmluZEluZGV4KHBhcmVudCwgZ3JvdXAsIGVudGVyLCB1cGRhdGUsIGV4aXQsIGRhdGEpIHtcbiAgICB2YXIgaSA9IDAsXG4gICAgICAgIG5vZGUsXG4gICAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGg7XG5cbiAgICAvLyBQdXQgYW55IG5vbi1udWxsIG5vZGVzIHRoYXQgZml0IGludG8gdXBkYXRlLlxuICAgIC8vIFB1dCBhbnkgbnVsbCBub2RlcyBpbnRvIGVudGVyLlxuICAgIC8vIFB1dCBhbnkgcmVtYWluaW5nIGRhdGEgaW50byBlbnRlci5cbiAgICBmb3IgKDsgaSA8IGRhdGFMZW5ndGg7ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBub2RlLl9fZGF0YV9fID0gZGF0YVtpXTtcbiAgICAgICAgdXBkYXRlW2ldID0gbm9kZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVudGVyW2ldID0gbmV3IEVudGVyTm9kZShwYXJlbnQsIGRhdGFbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFB1dCBhbnkgbm9uLW51bGwgbm9kZXMgdGhhdCBkb27igJl0IGZpdCBpbnRvIGV4aXQuXG4gICAgZm9yICg7IGkgPCBncm91cExlbmd0aDsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGJpbmRLZXkocGFyZW50LCBncm91cCwgZW50ZXIsIHVwZGF0ZSwgZXhpdCwgZGF0YSwga2V5KSB7XG4gICAgdmFyIGksXG4gICAgICAgIG5vZGUsXG4gICAgICAgIG5vZGVCeUtleVZhbHVlID0ge30sXG4gICAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGgsXG4gICAgICAgIGtleVZhbHVlcyA9IG5ldyBBcnJheShncm91cExlbmd0aCksXG4gICAgICAgIGtleVZhbHVlO1xuXG4gICAgLy8gQ29tcHV0ZSB0aGUga2V5IGZvciBlYWNoIG5vZGUuXG4gICAgLy8gSWYgbXVsdGlwbGUgbm9kZXMgaGF2ZSB0aGUgc2FtZSBrZXksIHRoZSBkdXBsaWNhdGVzIGFyZSBhZGRlZCB0byBleGl0LlxuICAgIGZvciAoaSA9IDA7IGkgPCBncm91cExlbmd0aDsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIGtleVZhbHVlc1tpXSA9IGtleVZhbHVlID0ga2V5UHJlZml4ICsga2V5LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApO1xuICAgICAgICBpZiAoa2V5VmFsdWUgaW4gbm9kZUJ5S2V5VmFsdWUpIHtcbiAgICAgICAgICBleGl0W2ldID0gbm9kZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBub2RlQnlLZXlWYWx1ZVtrZXlWYWx1ZV0gPSBub2RlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ29tcHV0ZSB0aGUga2V5IGZvciBlYWNoIGRhdHVtLlxuICAgIC8vIElmIHRoZXJlIGEgbm9kZSBhc3NvY2lhdGVkIHdpdGggdGhpcyBrZXksIGpvaW4gYW5kIGFkZCBpdCB0byB1cGRhdGUuXG4gICAgLy8gSWYgdGhlcmUgaXMgbm90IChvciB0aGUga2V5IGlzIGEgZHVwbGljYXRlKSwgYWRkIGl0IHRvIGVudGVyLlxuICAgIGZvciAoaSA9IDA7IGkgPCBkYXRhTGVuZ3RoOyArK2kpIHtcbiAgICAgIGtleVZhbHVlID0ga2V5UHJlZml4ICsga2V5LmNhbGwocGFyZW50LCBkYXRhW2ldLCBpLCBkYXRhKTtcbiAgICAgIGlmIChub2RlID0gbm9kZUJ5S2V5VmFsdWVba2V5VmFsdWVdKSB7XG4gICAgICAgIHVwZGF0ZVtpXSA9IG5vZGU7XG4gICAgICAgIG5vZGUuX19kYXRhX18gPSBkYXRhW2ldO1xuICAgICAgICBub2RlQnlLZXlWYWx1ZVtrZXlWYWx1ZV0gPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW50ZXJbaV0gPSBuZXcgRW50ZXJOb2RlKHBhcmVudCwgZGF0YVtpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGFueSByZW1haW5pbmcgbm9kZXMgdGhhdCB3ZXJlIG5vdCBib3VuZCB0byBkYXRhIHRvIGV4aXQuXG4gICAgZm9yIChpID0gMDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiBub2RlQnlLZXlWYWx1ZVtrZXlWYWx1ZXNbaV1dID09PSBub2RlKSB7XG4gICAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBzZWxlY3Rpb25fZGF0YSA9IGZ1bmN0aW9uIHNlbGVjdGlvbl9kYXRhKHZhbHVlLCBrZXkpIHtcbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICBkYXRhID0gbmV3IEFycmF5KHRoaXMuc2l6ZSgpKSwgaiA9IC0xO1xuICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uIChkKSB7XG4gICAgICAgIGRhdGFbKytqXSA9IGQ7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIHZhciBiaW5kID0ga2V5ID8gYmluZEtleSA6IGJpbmRJbmRleCxcbiAgICAgICAgcGFyZW50cyA9IHRoaXMuX3BhcmVudHMsXG4gICAgICAgIGdyb3VwcyA9IHRoaXMuX2dyb3VwcztcblxuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdmFsdWUgPSBjb25zdGFudCQxKHZhbHVlKTtcblxuICAgIGZvciAodmFyIG0gPSBncm91cHMubGVuZ3RoLCB1cGRhdGUgPSBuZXcgQXJyYXkobSksIGVudGVyID0gbmV3IEFycmF5KG0pLCBleGl0ID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgICAgdmFyIHBhcmVudCA9IHBhcmVudHNbal0sXG4gICAgICAgICAgZ3JvdXAgPSBncm91cHNbal0sXG4gICAgICAgICAgZ3JvdXBMZW5ndGggPSBncm91cC5sZW5ndGgsXG4gICAgICAgICAgZGF0YSA9IHZhbHVlLmNhbGwocGFyZW50LCBwYXJlbnQgJiYgcGFyZW50Ll9fZGF0YV9fLCBqLCBwYXJlbnRzKSxcbiAgICAgICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGgsXG4gICAgICAgICAgZW50ZXJHcm91cCA9IGVudGVyW2pdID0gbmV3IEFycmF5KGRhdGFMZW5ndGgpLFxuICAgICAgICAgIHVwZGF0ZUdyb3VwID0gdXBkYXRlW2pdID0gbmV3IEFycmF5KGRhdGFMZW5ndGgpLFxuICAgICAgICAgIGV4aXRHcm91cCA9IGV4aXRbal0gPSBuZXcgQXJyYXkoZ3JvdXBMZW5ndGgpO1xuXG4gICAgICBiaW5kKHBhcmVudCwgZ3JvdXAsIGVudGVyR3JvdXAsIHVwZGF0ZUdyb3VwLCBleGl0R3JvdXAsIGRhdGEsIGtleSk7XG5cbiAgICAgIC8vIE5vdyBjb25uZWN0IHRoZSBlbnRlciBub2RlcyB0byB0aGVpciBmb2xsb3dpbmcgdXBkYXRlIG5vZGUsIHN1Y2ggdGhhdFxuICAgICAgLy8gYXBwZW5kQ2hpbGQgY2FuIGluc2VydCB0aGUgbWF0ZXJpYWxpemVkIGVudGVyIG5vZGUgYmVmb3JlIHRoaXMgbm9kZSxcbiAgICAgIC8vIHJhdGhlciB0aGFuIGF0IHRoZSBlbmQgb2YgdGhlIHBhcmVudCBub2RlLlxuICAgICAgZm9yICh2YXIgaTAgPSAwLCBpMSA9IDAsIHByZXZpb3VzLCBuZXh0OyBpMCA8IGRhdGFMZW5ndGg7ICsraTApIHtcbiAgICAgICAgaWYgKHByZXZpb3VzID0gZW50ZXJHcm91cFtpMF0pIHtcbiAgICAgICAgICBpZiAoaTAgPj0gaTEpIGkxID0gaTAgKyAxO1xuICAgICAgICAgIHdoaWxlICghKG5leHQgPSB1cGRhdGVHcm91cFtpMV0pICYmICsraTEgPCBkYXRhTGVuZ3RoKSB7fVxuICAgICAgICAgIHByZXZpb3VzLl9uZXh0ID0gbmV4dCB8fCBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlID0gbmV3IFNlbGVjdGlvbih1cGRhdGUsIHBhcmVudHMpO1xuICAgIHVwZGF0ZS5fZW50ZXIgPSBlbnRlcjtcbiAgICB1cGRhdGUuX2V4aXQgPSBleGl0O1xuICAgIHJldHVybiB1cGRhdGU7XG4gIH07XG5cbiAgdmFyIHNlbGVjdGlvbl9leGl0ID0gZnVuY3Rpb24gc2VsZWN0aW9uX2V4aXQoKSB7XG4gICAgcmV0dXJuIG5ldyBTZWxlY3Rpb24odGhpcy5fZXhpdCB8fCB0aGlzLl9ncm91cHMubWFwKHNwYXJzZSksIHRoaXMuX3BhcmVudHMpO1xuICB9O1xuXG4gIHZhciBzZWxlY3Rpb25fbWVyZ2UgPSBmdW5jdGlvbiBzZWxlY3Rpb25fbWVyZ2Uoc2VsZWN0aW9uJCQxKSB7XG5cbiAgICBmb3IgKHZhciBncm91cHMwID0gdGhpcy5fZ3JvdXBzLCBncm91cHMxID0gc2VsZWN0aW9uJCQxLl9ncm91cHMsIG0wID0gZ3JvdXBzMC5sZW5ndGgsIG0xID0gZ3JvdXBzMS5sZW5ndGgsIG0gPSBNYXRoLm1pbihtMCwgbTEpLCBtZXJnZXMgPSBuZXcgQXJyYXkobTApLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgICAgZm9yICh2YXIgZ3JvdXAwID0gZ3JvdXBzMFtqXSwgZ3JvdXAxID0gZ3JvdXBzMVtqXSwgbiA9IGdyb3VwMC5sZW5ndGgsIG1lcmdlID0gbWVyZ2VzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAobm9kZSA9IGdyb3VwMFtpXSB8fCBncm91cDFbaV0pIHtcbiAgICAgICAgICBtZXJnZVtpXSA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKDsgaiA8IG0wOyArK2opIHtcbiAgICAgIG1lcmdlc1tqXSA9IGdyb3VwczBbal07XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBTZWxlY3Rpb24obWVyZ2VzLCB0aGlzLl9wYXJlbnRzKTtcbiAgfTtcblxuICB2YXIgc2VsZWN0aW9uX29yZGVyID0gZnVuY3Rpb24gc2VsZWN0aW9uX29yZGVyKCkge1xuXG4gICAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gLTEsIG0gPSBncm91cHMubGVuZ3RoOyArK2ogPCBtOykge1xuICAgICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSBncm91cC5sZW5ndGggLSAxLCBuZXh0ID0gZ3JvdXBbaV0sIG5vZGU7IC0taSA+PSAwOykge1xuICAgICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgICAgaWYgKG5leHQgJiYgbmV4dCAhPT0gbm9kZS5uZXh0U2libGluZykgbmV4dC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShub2RlLCBuZXh0KTtcbiAgICAgICAgICBuZXh0ID0gbm9kZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciBzZWxlY3Rpb25fc29ydCA9IGZ1bmN0aW9uIHNlbGVjdGlvbl9zb3J0KGNvbXBhcmUpIHtcbiAgICBpZiAoIWNvbXBhcmUpIGNvbXBhcmUgPSBhc2NlbmRpbmckMTtcblxuICAgIGZ1bmN0aW9uIGNvbXBhcmVOb2RlKGEsIGIpIHtcbiAgICAgIHJldHVybiBhICYmIGIgPyBjb21wYXJlKGEuX19kYXRhX18sIGIuX19kYXRhX18pIDogIWEgLSAhYjtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzb3J0Z3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHNvcnRncm91cCA9IHNvcnRncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgICBzb3J0Z3JvdXBbaV0gPSBub2RlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzb3J0Z3JvdXAuc29ydChjb21wYXJlTm9kZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc29ydGdyb3VwcywgdGhpcy5fcGFyZW50cykub3JkZXIoKTtcbiAgfTtcblxuICBmdW5jdGlvbiBhc2NlbmRpbmckMShhLCBiKSB7XG4gICAgcmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiBhID49IGIgPyAwIDogTmFOO1xuICB9XG5cbiAgdmFyIHNlbGVjdGlvbl9jYWxsID0gZnVuY3Rpb24gc2VsZWN0aW9uX2NhbGwoKSB7XG4gICAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzWzBdO1xuICAgIGFyZ3VtZW50c1swXSA9IHRoaXM7XG4gICAgY2FsbGJhY2suYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB2YXIgc2VsZWN0aW9uX25vZGVzID0gZnVuY3Rpb24gc2VsZWN0aW9uX25vZGVzKCkge1xuICAgIHZhciBub2RlcyA9IG5ldyBBcnJheSh0aGlzLnNpemUoKSksXG4gICAgICAgIGkgPSAtMTtcbiAgICB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgbm9kZXNbKytpXSA9IHRoaXM7XG4gICAgfSk7XG4gICAgcmV0dXJuIG5vZGVzO1xuICB9O1xuXG4gIHZhciBzZWxlY3Rpb25fbm9kZSA9IGZ1bmN0aW9uIHNlbGVjdGlvbl9ub2RlKCkge1xuXG4gICAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gMCwgbSA9IGdyb3Vwcy5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICB2YXIgbm9kZSA9IGdyb3VwW2ldO1xuICAgICAgICBpZiAobm9kZSkgcmV0dXJuIG5vZGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgdmFyIHNlbGVjdGlvbl9zaXplID0gZnVuY3Rpb24gc2VsZWN0aW9uX3NpemUoKSB7XG4gICAgdmFyIHNpemUgPSAwO1xuICAgIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICArK3NpemU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHNpemU7XG4gIH07XG5cbiAgdmFyIHNlbGVjdGlvbl9lbXB0eSA9IGZ1bmN0aW9uIHNlbGVjdGlvbl9lbXB0eSgpIHtcbiAgICByZXR1cm4gIXRoaXMubm9kZSgpO1xuICB9O1xuXG4gIHZhciBzZWxlY3Rpb25fZWFjaCA9IGZ1bmN0aW9uIHNlbGVjdGlvbl9lYWNoKGNhbGxiYWNrKSB7XG5cbiAgICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIGogPSAwLCBtID0gZ3JvdXBzLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSAwLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIGNhbGxiYWNrLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGF0dHJSZW1vdmUobmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gYXR0clJlbW92ZU5TKGZ1bGxuYW1lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gYXR0ckNvbnN0YW50KG5hbWUsIHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gYXR0ckNvbnN0YW50TlMoZnVsbG5hbWUsIHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsLCB2YWx1ZSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGF0dHJGdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBpZiAodiA9PSBudWxsKSB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtlbHNlIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHYpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBhdHRyRnVuY3Rpb25OUyhmdWxsbmFtZSwgdmFsdWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO2Vsc2UgdGhpcy5zZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwsIHYpO1xuICAgIH07XG4gIH1cblxuICB2YXIgc2VsZWN0aW9uX2F0dHIgPSBmdW5jdGlvbiBzZWxlY3Rpb25fYXR0cihuYW1lLCB2YWx1ZSkge1xuICAgIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgICAgdmFyIG5vZGUgPSB0aGlzLm5vZGUoKTtcbiAgICAgIHJldHVybiBmdWxsbmFtZS5sb2NhbCA/IG5vZGUuZ2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKSA6IG5vZGUuZ2V0QXR0cmlidXRlKGZ1bGxuYW1lKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsID8gZnVsbG5hbWUubG9jYWwgPyBhdHRyUmVtb3ZlTlMgOiBhdHRyUmVtb3ZlIDogdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyBmdWxsbmFtZS5sb2NhbCA/IGF0dHJGdW5jdGlvbk5TIDogYXR0ckZ1bmN0aW9uIDogZnVsbG5hbWUubG9jYWwgPyBhdHRyQ29uc3RhbnROUyA6IGF0dHJDb25zdGFudCkoZnVsbG5hbWUsIHZhbHVlKSk7XG4gIH07XG5cbiAgdmFyIGRlZmF1bHRWaWV3ID0gZnVuY3Rpb24gZGVmYXVsdFZpZXcobm9kZSkge1xuICAgIHJldHVybiBub2RlLm93bmVyRG9jdW1lbnQgJiYgbm9kZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IHx8IC8vIG5vZGUgaXMgYSBOb2RlXG4gICAgbm9kZS5kb2N1bWVudCAmJiBub2RlIC8vIG5vZGUgaXMgYSBXaW5kb3dcbiAgICB8fCBub2RlLmRlZmF1bHRWaWV3OyAvLyBub2RlIGlzIGEgRG9jdW1lbnRcbiAgfTtcblxuICBmdW5jdGlvbiBzdHlsZVJlbW92ZShuYW1lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0eWxlQ29uc3RhbnQobmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdmFsdWUsIHByaW9yaXR5KTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gc3R5bGVGdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtlbHNlIHRoaXMuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdiwgcHJpb3JpdHkpO1xuICAgIH07XG4gIH1cblxuICB2YXIgc2VsZWN0aW9uX3N0eWxlID0gZnVuY3Rpb24gc2VsZWN0aW9uX3N0eWxlKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbCA/IHN0eWxlUmVtb3ZlIDogdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyBzdHlsZUZ1bmN0aW9uIDogc3R5bGVDb25zdGFudCkobmFtZSwgdmFsdWUsIHByaW9yaXR5ID09IG51bGwgPyBcIlwiIDogcHJpb3JpdHkpKSA6IHN0eWxlVmFsdWUodGhpcy5ub2RlKCksIG5hbWUpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHN0eWxlVmFsdWUobm9kZSwgbmFtZSkge1xuICAgIHJldHVybiBub2RlLnN0eWxlLmdldFByb3BlcnR5VmFsdWUobmFtZSkgfHwgZGVmYXVsdFZpZXcobm9kZSkuZ2V0Q29tcHV0ZWRTdHlsZShub2RlLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJvcGVydHlSZW1vdmUobmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBkZWxldGUgdGhpc1tuYW1lXTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcHJvcGVydHlDb25zdGFudChuYW1lLCB2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzW25hbWVdID0gdmFsdWU7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByb3BlcnR5RnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKHYgPT0gbnVsbCkgZGVsZXRlIHRoaXNbbmFtZV07ZWxzZSB0aGlzW25hbWVdID0gdjtcbiAgICB9O1xuICB9XG5cbiAgdmFyIHNlbGVjdGlvbl9wcm9wZXJ0eSA9IGZ1bmN0aW9uIHNlbGVjdGlvbl9wcm9wZXJ0eShuYW1lLCB2YWx1ZSkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbCA/IHByb3BlcnR5UmVtb3ZlIDogdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyBwcm9wZXJ0eUZ1bmN0aW9uIDogcHJvcGVydHlDb25zdGFudCkobmFtZSwgdmFsdWUpKSA6IHRoaXMubm9kZSgpW25hbWVdO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGNsYXNzQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy50cmltKCkuc3BsaXQoL158XFxzKy8pO1xuICB9XG5cbiAgZnVuY3Rpb24gY2xhc3NMaXN0KG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5jbGFzc0xpc3QgfHwgbmV3IENsYXNzTGlzdChub2RlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIENsYXNzTGlzdChub2RlKSB7XG4gICAgdGhpcy5fbm9kZSA9IG5vZGU7XG4gICAgdGhpcy5fbmFtZXMgPSBjbGFzc0FycmF5KG5vZGUuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIik7XG4gIH1cblxuICBDbGFzc0xpc3QucHJvdG90eXBlID0ge1xuICAgIGFkZDogZnVuY3Rpb24gYWRkKG5hbWUpIHtcbiAgICAgIHZhciBpID0gdGhpcy5fbmFtZXMuaW5kZXhPZihuYW1lKTtcbiAgICAgIGlmIChpIDwgMCkge1xuICAgICAgICB0aGlzLl9uYW1lcy5wdXNoKG5hbWUpO1xuICAgICAgICB0aGlzLl9ub2RlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIHRoaXMuX25hbWVzLmpvaW4oXCIgXCIpKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKG5hbWUpIHtcbiAgICAgIHZhciBpID0gdGhpcy5fbmFtZXMuaW5kZXhPZihuYW1lKTtcbiAgICAgIGlmIChpID49IDApIHtcbiAgICAgICAgdGhpcy5fbmFtZXMuc3BsaWNlKGksIDEpO1xuICAgICAgICB0aGlzLl9ub2RlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIHRoaXMuX25hbWVzLmpvaW4oXCIgXCIpKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGNvbnRhaW5zOiBmdW5jdGlvbiBjb250YWlucyhuYW1lKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbmFtZXMuaW5kZXhPZihuYW1lKSA+PSAwO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBjbGFzc2VkQWRkKG5vZGUsIG5hbWVzKSB7XG4gICAgdmFyIGxpc3QgPSBjbGFzc0xpc3Qobm9kZSksXG4gICAgICAgIGkgPSAtMSxcbiAgICAgICAgbiA9IG5hbWVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgbGlzdC5hZGQobmFtZXNbaV0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNsYXNzZWRSZW1vdmUobm9kZSwgbmFtZXMpIHtcbiAgICB2YXIgbGlzdCA9IGNsYXNzTGlzdChub2RlKSxcbiAgICAgICAgaSA9IC0xLFxuICAgICAgICBuID0gbmFtZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBsaXN0LnJlbW92ZShuYW1lc1tpXSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2xhc3NlZFRydWUobmFtZXMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2xhc3NlZEFkZCh0aGlzLCBuYW1lcyk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsYXNzZWRGYWxzZShuYW1lcykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjbGFzc2VkUmVtb3ZlKHRoaXMsIG5hbWVzKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY2xhc3NlZEZ1bmN0aW9uKG5hbWVzLCB2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAodmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKSA/IGNsYXNzZWRBZGQgOiBjbGFzc2VkUmVtb3ZlKSh0aGlzLCBuYW1lcyk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBzZWxlY3Rpb25fY2xhc3NlZCA9IGZ1bmN0aW9uIHNlbGVjdGlvbl9jbGFzc2VkKG5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIG5hbWVzID0gY2xhc3NBcnJheShuYW1lICsgXCJcIik7XG5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgIHZhciBsaXN0ID0gY2xhc3NMaXN0KHRoaXMubm9kZSgpKSxcbiAgICAgICAgICBpID0gLTEsXG4gICAgICAgICAgbiA9IG5hbWVzLmxlbmd0aDtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIGlmICghbGlzdC5jb250YWlucyhuYW1lc1tpXSkpIHJldHVybiBmYWxzZTtcbiAgICAgIH1yZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5lYWNoKCh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIiA/IGNsYXNzZWRGdW5jdGlvbiA6IHZhbHVlID8gY2xhc3NlZFRydWUgOiBjbGFzc2VkRmFsc2UpKG5hbWVzLCB2YWx1ZSkpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHRleHRSZW1vdmUoKSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IFwiXCI7XG4gIH1cblxuICBmdW5jdGlvbiB0ZXh0Q29uc3RhbnQodmFsdWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB0ZXh0RnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgdGhpcy50ZXh0Q29udGVudCA9IHYgPT0gbnVsbCA/IFwiXCIgOiB2O1xuICAgIH07XG4gIH1cblxuICB2YXIgc2VsZWN0aW9uX3RleHQgPSBmdW5jdGlvbiBzZWxlY3Rpb25fdGV4dCh2YWx1ZSkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy5lYWNoKHZhbHVlID09IG51bGwgPyB0ZXh0UmVtb3ZlIDogKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiID8gdGV4dEZ1bmN0aW9uIDogdGV4dENvbnN0YW50KSh2YWx1ZSkpIDogdGhpcy5ub2RlKCkudGV4dENvbnRlbnQ7XG4gIH07XG5cbiAgZnVuY3Rpb24gaHRtbFJlbW92ZSgpIHtcbiAgICB0aGlzLmlubmVySFRNTCA9IFwiXCI7XG4gIH1cblxuICBmdW5jdGlvbiBodG1sQ29uc3RhbnQodmFsdWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5pbm5lckhUTUwgPSB2YWx1ZTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gaHRtbEZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIHRoaXMuaW5uZXJIVE1MID0gdiA9PSBudWxsID8gXCJcIiA6IHY7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBzZWxlY3Rpb25faHRtbCA9IGZ1bmN0aW9uIHNlbGVjdGlvbl9odG1sKHZhbHVlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLmVhY2godmFsdWUgPT0gbnVsbCA/IGh0bWxSZW1vdmUgOiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyBodG1sRnVuY3Rpb24gOiBodG1sQ29uc3RhbnQpKHZhbHVlKSkgOiB0aGlzLm5vZGUoKS5pbm5lckhUTUw7XG4gIH07XG5cbiAgZnVuY3Rpb24gcmFpc2UoKSB7XG4gICAgaWYgKHRoaXMubmV4dFNpYmxpbmcpIHRoaXMucGFyZW50Tm9kZS5hcHBlbmRDaGlsZCh0aGlzKTtcbiAgfVxuXG4gIHZhciBzZWxlY3Rpb25fcmFpc2UgPSBmdW5jdGlvbiBzZWxlY3Rpb25fcmFpc2UoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChyYWlzZSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbG93ZXIoKSB7XG4gICAgaWYgKHRoaXMucHJldmlvdXNTaWJsaW5nKSB0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMsIHRoaXMucGFyZW50Tm9kZS5maXJzdENoaWxkKTtcbiAgfVxuXG4gIHZhciBzZWxlY3Rpb25fbG93ZXIgPSBmdW5jdGlvbiBzZWxlY3Rpb25fbG93ZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChsb3dlcik7XG4gIH07XG5cbiAgdmFyIHNlbGVjdGlvbl9hcHBlbmQgPSBmdW5jdGlvbiBzZWxlY3Rpb25fYXBwZW5kKG5hbWUpIHtcbiAgICB2YXIgY3JlYXRlID0gdHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIiA/IG5hbWUgOiBjcmVhdG9yKG5hbWUpO1xuICAgIHJldHVybiB0aGlzLnNlbGVjdChmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5hcHBlbmRDaGlsZChjcmVhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gY29uc3RhbnROdWxsKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIHNlbGVjdGlvbl9pbnNlcnQgPSBmdW5jdGlvbiBzZWxlY3Rpb25faW5zZXJ0KG5hbWUsIGJlZm9yZSkge1xuICAgIHZhciBjcmVhdGUgPSB0eXBlb2YgbmFtZSA9PT0gXCJmdW5jdGlvblwiID8gbmFtZSA6IGNyZWF0b3IobmFtZSksXG4gICAgICAgIHNlbGVjdCA9IGJlZm9yZSA9PSBudWxsID8gY29uc3RhbnROdWxsIDogdHlwZW9mIGJlZm9yZSA9PT0gXCJmdW5jdGlvblwiID8gYmVmb3JlIDogc2VsZWN0b3IoYmVmb3JlKTtcbiAgICByZXR1cm4gdGhpcy5zZWxlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuaW5zZXJ0QmVmb3JlKGNyZWF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCBzZWxlY3QuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCBudWxsKTtcbiAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgICBpZiAocGFyZW50KSBwYXJlbnQucmVtb3ZlQ2hpbGQodGhpcyk7XG4gIH1cblxuICB2YXIgc2VsZWN0aW9uX3JlbW92ZSA9IGZ1bmN0aW9uIHNlbGVjdGlvbl9yZW1vdmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChyZW1vdmUpO1xuICB9O1xuXG4gIHZhciBzZWxlY3Rpb25fZGF0dW0gPSBmdW5jdGlvbiBzZWxlY3Rpb25fZGF0dW0odmFsdWUpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMucHJvcGVydHkoXCJfX2RhdGFfX1wiLCB2YWx1ZSkgOiB0aGlzLm5vZGUoKS5fX2RhdGFfXztcbiAgfTtcblxuICBmdW5jdGlvbiBkaXNwYXRjaEV2ZW50KG5vZGUsIHR5cGUsIHBhcmFtcykge1xuICAgIHZhciB3aW5kb3cgPSBkZWZhdWx0Vmlldyhub2RlKSxcbiAgICAgICAgZXZlbnQgPSB3aW5kb3cuQ3VzdG9tRXZlbnQ7XG5cbiAgICBpZiAodHlwZW9mIGV2ZW50ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGV2ZW50ID0gbmV3IGV2ZW50KHR5cGUsIHBhcmFtcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV2ZW50ID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiRXZlbnRcIik7XG4gICAgICBpZiAocGFyYW1zKSBldmVudC5pbml0RXZlbnQodHlwZSwgcGFyYW1zLmJ1YmJsZXMsIHBhcmFtcy5jYW5jZWxhYmxlKSwgZXZlbnQuZGV0YWlsID0gcGFyYW1zLmRldGFpbDtlbHNlIGV2ZW50LmluaXRFdmVudCh0eXBlLCBmYWxzZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIG5vZGUuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gIH1cblxuICBmdW5jdGlvbiBkaXNwYXRjaENvbnN0YW50KHR5cGUsIHBhcmFtcykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZGlzcGF0Y2hFdmVudCh0aGlzLCB0eXBlLCBwYXJhbXMpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBkaXNwYXRjaEZ1bmN0aW9uKHR5cGUsIHBhcmFtcykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZGlzcGF0Y2hFdmVudCh0aGlzLCB0eXBlLCBwYXJhbXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBzZWxlY3Rpb25fZGlzcGF0Y2ggPSBmdW5jdGlvbiBzZWxlY3Rpb25fZGlzcGF0Y2godHlwZSwgcGFyYW1zKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaCgodHlwZW9mIHBhcmFtcyA9PT0gXCJmdW5jdGlvblwiID8gZGlzcGF0Y2hGdW5jdGlvbiA6IGRpc3BhdGNoQ29uc3RhbnQpKHR5cGUsIHBhcmFtcykpO1xuICB9O1xuXG4gIHZhciByb290ID0gW251bGxdO1xuXG4gIGZ1bmN0aW9uIFNlbGVjdGlvbihncm91cHMsIHBhcmVudHMpIHtcbiAgICB0aGlzLl9ncm91cHMgPSBncm91cHM7XG4gICAgdGhpcy5fcGFyZW50cyA9IHBhcmVudHM7XG4gIH1cblxuICBmdW5jdGlvbiBzZWxlY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oW1tkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRdXSwgcm9vdCk7XG4gIH1cblxuICBTZWxlY3Rpb24ucHJvdG90eXBlID0gc2VsZWN0aW9uLnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogU2VsZWN0aW9uLFxuICAgIHNlbGVjdDogc2VsZWN0aW9uX3NlbGVjdCxcbiAgICBzZWxlY3RBbGw6IHNlbGVjdGlvbl9zZWxlY3RBbGwsXG4gICAgZmlsdGVyOiBzZWxlY3Rpb25fZmlsdGVyLFxuICAgIGRhdGE6IHNlbGVjdGlvbl9kYXRhLFxuICAgIGVudGVyOiBzZWxlY3Rpb25fZW50ZXIsXG4gICAgZXhpdDogc2VsZWN0aW9uX2V4aXQsXG4gICAgbWVyZ2U6IHNlbGVjdGlvbl9tZXJnZSxcbiAgICBvcmRlcjogc2VsZWN0aW9uX29yZGVyLFxuICAgIHNvcnQ6IHNlbGVjdGlvbl9zb3J0LFxuICAgIGNhbGw6IHNlbGVjdGlvbl9jYWxsLFxuICAgIG5vZGVzOiBzZWxlY3Rpb25fbm9kZXMsXG4gICAgbm9kZTogc2VsZWN0aW9uX25vZGUsXG4gICAgc2l6ZTogc2VsZWN0aW9uX3NpemUsXG4gICAgZW1wdHk6IHNlbGVjdGlvbl9lbXB0eSxcbiAgICBlYWNoOiBzZWxlY3Rpb25fZWFjaCxcbiAgICBhdHRyOiBzZWxlY3Rpb25fYXR0cixcbiAgICBzdHlsZTogc2VsZWN0aW9uX3N0eWxlLFxuICAgIHByb3BlcnR5OiBzZWxlY3Rpb25fcHJvcGVydHksXG4gICAgY2xhc3NlZDogc2VsZWN0aW9uX2NsYXNzZWQsXG4gICAgdGV4dDogc2VsZWN0aW9uX3RleHQsXG4gICAgaHRtbDogc2VsZWN0aW9uX2h0bWwsXG4gICAgcmFpc2U6IHNlbGVjdGlvbl9yYWlzZSxcbiAgICBsb3dlcjogc2VsZWN0aW9uX2xvd2VyLFxuICAgIGFwcGVuZDogc2VsZWN0aW9uX2FwcGVuZCxcbiAgICBpbnNlcnQ6IHNlbGVjdGlvbl9pbnNlcnQsXG4gICAgcmVtb3ZlOiBzZWxlY3Rpb25fcmVtb3ZlLFxuICAgIGRhdHVtOiBzZWxlY3Rpb25fZGF0dW0sXG4gICAgb246IHNlbGVjdGlvbl9vbixcbiAgICBkaXNwYXRjaDogc2VsZWN0aW9uX2Rpc3BhdGNoXG4gIH07XG5cbiAgdmFyIHNlbGVjdCA9IGZ1bmN0aW9uIHNlbGVjdChzZWxlY3Rvcikge1xuICAgIHJldHVybiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgPyBuZXcgU2VsZWN0aW9uKFtbZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcildXSwgW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudF0pIDogbmV3IFNlbGVjdGlvbihbW3NlbGVjdG9yXV0sIHJvb3QpO1xuICB9O1xuXG4gIHZhciBzZWxlY3RBbGwgPSBmdW5jdGlvbiBzZWxlY3RBbGwoc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiID8gbmV3IFNlbGVjdGlvbihbZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcildLCBbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XSkgOiBuZXcgU2VsZWN0aW9uKFtzZWxlY3RvciA9PSBudWxsID8gW10gOiBzZWxlY3Rvcl0sIHJvb3QpO1xuICB9O1xuXG4gIHZhciB0b3VjaCA9IGZ1bmN0aW9uIHRvdWNoKG5vZGUsIHRvdWNoZXMsIGlkZW50aWZpZXIpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIGlkZW50aWZpZXIgPSB0b3VjaGVzLCB0b3VjaGVzID0gc291cmNlRXZlbnQoKS5jaGFuZ2VkVG91Y2hlcztcblxuICAgIGZvciAodmFyIGkgPSAwLCBuID0gdG91Y2hlcyA/IHRvdWNoZXMubGVuZ3RoIDogMCwgdG91Y2g7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgodG91Y2ggPSB0b3VjaGVzW2ldKS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICAgIHJldHVybiBwb2ludChub2RlLCB0b3VjaCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgdmFyIHRvdWNoZXMgPSBmdW5jdGlvbiB0b3VjaGVzKG5vZGUsIF90b3VjaGVzKSB7XG4gICAgaWYgKF90b3VjaGVzID09IG51bGwpIF90b3VjaGVzID0gc291cmNlRXZlbnQoKS50b3VjaGVzO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBfdG91Y2hlcyA/IF90b3VjaGVzLmxlbmd0aCA6IDAsIHBvaW50cyA9IG5ldyBBcnJheShuKTsgaSA8IG47ICsraSkge1xuICAgICAgcG9pbnRzW2ldID0gcG9pbnQobm9kZSwgX3RvdWNoZXNbaV0pO1xuICAgIH1cblxuICAgIHJldHVybiBwb2ludHM7XG4gIH07XG5cbiAgZnVuY3Rpb24gbm9wcm9wYWdhdGlvbigpIHtcbiAgICBleHBvcnRzLmV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICB9XG5cbiAgdmFyIG5vZXZlbnQgPSBmdW5jdGlvbiBub2V2ZW50KCkge1xuICAgIGV4cG9ydHMuZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBleHBvcnRzLmV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICB9O1xuXG4gIHZhciBkcmFnRGlzYWJsZSA9IGZ1bmN0aW9uIGRyYWdEaXNhYmxlKHZpZXcpIHtcbiAgICB2YXIgcm9vdCA9IHZpZXcuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LFxuICAgICAgICBzZWxlY3Rpb24kJDEgPSBzZWxlY3Qodmlldykub24oXCJkcmFnc3RhcnQuZHJhZ1wiLCBub2V2ZW50LCB0cnVlKTtcbiAgICBpZiAoXCJvbnNlbGVjdHN0YXJ0XCIgaW4gcm9vdCkge1xuICAgICAgc2VsZWN0aW9uJCQxLm9uKFwic2VsZWN0c3RhcnQuZHJhZ1wiLCBub2V2ZW50LCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm9vdC5fX25vc2VsZWN0ID0gcm9vdC5zdHlsZS5Nb3pVc2VyU2VsZWN0O1xuICAgICAgcm9vdC5zdHlsZS5Nb3pVc2VyU2VsZWN0ID0gXCJub25lXCI7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHllc2RyYWcodmlldywgbm9jbGljaykge1xuICAgIHZhciByb290ID0gdmlldy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXG4gICAgICAgIHNlbGVjdGlvbiQkMSA9IHNlbGVjdCh2aWV3KS5vbihcImRyYWdzdGFydC5kcmFnXCIsIG51bGwpO1xuICAgIGlmIChub2NsaWNrKSB7XG4gICAgICBzZWxlY3Rpb24kJDEub24oXCJjbGljay5kcmFnXCIsIG5vZXZlbnQsIHRydWUpO1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlbGVjdGlvbiQkMS5vbihcImNsaWNrLmRyYWdcIiwgbnVsbCk7XG4gICAgICB9LCAwKTtcbiAgICB9XG4gICAgaWYgKFwib25zZWxlY3RzdGFydFwiIGluIHJvb3QpIHtcbiAgICAgIHNlbGVjdGlvbiQkMS5vbihcInNlbGVjdHN0YXJ0LmRyYWdcIiwgbnVsbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJvb3Quc3R5bGUuTW96VXNlclNlbGVjdCA9IHJvb3QuX19ub3NlbGVjdDtcbiAgICAgIGRlbGV0ZSByb290Ll9fbm9zZWxlY3Q7XG4gICAgfVxuICB9XG5cbiAgdmFyIGNvbnN0YW50JDIgPSBmdW5jdGlvbiBjb25zdGFudCQyKHgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHg7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBEcmFnRXZlbnQodGFyZ2V0LCB0eXBlLCBzdWJqZWN0LCBpZCwgYWN0aXZlLCB4LCB5LCBkeCwgZHksIGRpc3BhdGNoKSB7XG4gICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLnN1YmplY3QgPSBzdWJqZWN0O1xuICAgIHRoaXMuaWRlbnRpZmllciA9IGlkO1xuICAgIHRoaXMuYWN0aXZlID0gYWN0aXZlO1xuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgICB0aGlzLmR4ID0gZHg7XG4gICAgdGhpcy5keSA9IGR5O1xuICAgIHRoaXMuXyA9IGRpc3BhdGNoO1xuICB9XG5cbiAgRHJhZ0V2ZW50LnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSB0aGlzLl8ub24uYXBwbHkodGhpcy5fLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdGhpcy5fID8gdGhpcyA6IHZhbHVlO1xuICB9O1xuXG4gIC8vIElnbm9yZSByaWdodC1jbGljaywgc2luY2UgdGhhdCBzaG91bGQgb3BlbiB0aGUgY29udGV4dCBtZW51LlxuICBmdW5jdGlvbiBkZWZhdWx0RmlsdGVyJDEoKSB7XG4gICAgcmV0dXJuICFleHBvcnRzLmV2ZW50LmJ1dHRvbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlZmF1bHRDb250YWluZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMucGFyZW50Tm9kZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlZmF1bHRTdWJqZWN0KGQpIHtcbiAgICByZXR1cm4gZCA9PSBudWxsID8geyB4OiBleHBvcnRzLmV2ZW50LngsIHk6IGV4cG9ydHMuZXZlbnQueSB9IDogZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNoYWJsZSgpIHtcbiAgICByZXR1cm4gXCJvbnRvdWNoc3RhcnRcIiBpbiB0aGlzO1xuICB9XG5cbiAgdmFyIGRyYWcgPSBmdW5jdGlvbiBkcmFnKCkge1xuICAgIHZhciBmaWx0ZXIgPSBkZWZhdWx0RmlsdGVyJDEsXG4gICAgICAgIGNvbnRhaW5lciA9IGRlZmF1bHRDb250YWluZXIsXG4gICAgICAgIHN1YmplY3QgPSBkZWZhdWx0U3ViamVjdCxcbiAgICAgICAgZ2VzdHVyZXMgPSB7fSxcbiAgICAgICAgbGlzdGVuZXJzID0gZGlzcGF0Y2goXCJzdGFydFwiLCBcImRyYWdcIiwgXCJlbmRcIiksXG4gICAgICAgIGFjdGl2ZSA9IDAsXG4gICAgICAgIG1vdXNlZG93bngsXG4gICAgICAgIG1vdXNlZG93bnksXG4gICAgICAgIG1vdXNlbW92aW5nLFxuICAgICAgICB0b3VjaGVuZGluZyxcbiAgICAgICAgY2xpY2tEaXN0YW5jZTIgPSAwO1xuXG4gICAgZnVuY3Rpb24gZHJhZyhzZWxlY3Rpb24pIHtcbiAgICAgIHNlbGVjdGlvbi5vbihcIm1vdXNlZG93bi5kcmFnXCIsIG1vdXNlZG93bmVkKS5maWx0ZXIodG91Y2hhYmxlKS5vbihcInRvdWNoc3RhcnQuZHJhZ1wiLCB0b3VjaHN0YXJ0ZWQpLm9uKFwidG91Y2htb3ZlLmRyYWdcIiwgdG91Y2htb3ZlZCkub24oXCJ0b3VjaGVuZC5kcmFnIHRvdWNoY2FuY2VsLmRyYWdcIiwgdG91Y2hlbmRlZCkuc3R5bGUoXCJ0b3VjaC1hY3Rpb25cIiwgXCJub25lXCIpLnN0eWxlKFwiLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yXCIsIFwicmdiYSgwLDAsMCwwKVwiKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb3VzZWRvd25lZCgpIHtcbiAgICAgIGlmICh0b3VjaGVuZGluZyB8fCAhZmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHJldHVybjtcbiAgICAgIHZhciBnZXN0dXJlID0gYmVmb3Jlc3RhcnQoXCJtb3VzZVwiLCBjb250YWluZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgbW91c2UsIHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBpZiAoIWdlc3R1cmUpIHJldHVybjtcbiAgICAgIHNlbGVjdChleHBvcnRzLmV2ZW50LnZpZXcpLm9uKFwibW91c2Vtb3ZlLmRyYWdcIiwgbW91c2Vtb3ZlZCwgdHJ1ZSkub24oXCJtb3VzZXVwLmRyYWdcIiwgbW91c2V1cHBlZCwgdHJ1ZSk7XG4gICAgICBkcmFnRGlzYWJsZShleHBvcnRzLmV2ZW50LnZpZXcpO1xuICAgICAgbm9wcm9wYWdhdGlvbigpO1xuICAgICAgbW91c2Vtb3ZpbmcgPSBmYWxzZTtcbiAgICAgIG1vdXNlZG93bnggPSBleHBvcnRzLmV2ZW50LmNsaWVudFg7XG4gICAgICBtb3VzZWRvd255ID0gZXhwb3J0cy5ldmVudC5jbGllbnRZO1xuICAgICAgZ2VzdHVyZShcInN0YXJ0XCIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vdXNlbW92ZWQoKSB7XG4gICAgICBub2V2ZW50KCk7XG4gICAgICBpZiAoIW1vdXNlbW92aW5nKSB7XG4gICAgICAgIHZhciBkeCA9IGV4cG9ydHMuZXZlbnQuY2xpZW50WCAtIG1vdXNlZG93bngsXG4gICAgICAgICAgICBkeSA9IGV4cG9ydHMuZXZlbnQuY2xpZW50WSAtIG1vdXNlZG93bnk7XG4gICAgICAgIG1vdXNlbW92aW5nID0gZHggKiBkeCArIGR5ICogZHkgPiBjbGlja0Rpc3RhbmNlMjtcbiAgICAgIH1cbiAgICAgIGdlc3R1cmVzLm1vdXNlKFwiZHJhZ1wiKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb3VzZXVwcGVkKCkge1xuICAgICAgc2VsZWN0KGV4cG9ydHMuZXZlbnQudmlldykub24oXCJtb3VzZW1vdmUuZHJhZyBtb3VzZXVwLmRyYWdcIiwgbnVsbCk7XG4gICAgICB5ZXNkcmFnKGV4cG9ydHMuZXZlbnQudmlldywgbW91c2Vtb3ZpbmcpO1xuICAgICAgbm9ldmVudCgpO1xuICAgICAgZ2VzdHVyZXMubW91c2UoXCJlbmRcIik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG91Y2hzdGFydGVkKCkge1xuICAgICAgaWYgKCFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuICAgICAgdmFyIHRvdWNoZXMkJDEgPSBleHBvcnRzLmV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICAgIGMgPSBjb250YWluZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgICBuID0gdG91Y2hlcyQkMS5sZW5ndGgsXG4gICAgICAgICAgaSxcbiAgICAgICAgICBnZXN0dXJlO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmIChnZXN0dXJlID0gYmVmb3Jlc3RhcnQodG91Y2hlcyQkMVtpXS5pZGVudGlmaWVyLCBjLCB0b3VjaCwgdGhpcywgYXJndW1lbnRzKSkge1xuICAgICAgICAgIG5vcHJvcGFnYXRpb24oKTtcbiAgICAgICAgICBnZXN0dXJlKFwic3RhcnRcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b3VjaG1vdmVkKCkge1xuICAgICAgdmFyIHRvdWNoZXMkJDEgPSBleHBvcnRzLmV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICAgIG4gPSB0b3VjaGVzJCQxLmxlbmd0aCxcbiAgICAgICAgICBpLFxuICAgICAgICAgIGdlc3R1cmU7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKGdlc3R1cmUgPSBnZXN0dXJlc1t0b3VjaGVzJCQxW2ldLmlkZW50aWZpZXJdKSB7XG4gICAgICAgICAgbm9ldmVudCgpO1xuICAgICAgICAgIGdlc3R1cmUoXCJkcmFnXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG91Y2hlbmRlZCgpIHtcbiAgICAgIHZhciB0b3VjaGVzJCQxID0gZXhwb3J0cy5ldmVudC5jaGFuZ2VkVG91Y2hlcyxcbiAgICAgICAgICBuID0gdG91Y2hlcyQkMS5sZW5ndGgsXG4gICAgICAgICAgaSxcbiAgICAgICAgICBnZXN0dXJlO1xuXG4gICAgICBpZiAodG91Y2hlbmRpbmcpIGNsZWFyVGltZW91dCh0b3VjaGVuZGluZyk7XG4gICAgICB0b3VjaGVuZGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICB0b3VjaGVuZGluZyA9IG51bGw7XG4gICAgICB9LCA1MDApOyAvLyBHaG9zdCBjbGlja3MgYXJlIGRlbGF5ZWQhXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmIChnZXN0dXJlID0gZ2VzdHVyZXNbdG91Y2hlcyQkMVtpXS5pZGVudGlmaWVyXSkge1xuICAgICAgICAgIG5vcHJvcGFnYXRpb24oKTtcbiAgICAgICAgICBnZXN0dXJlKFwiZW5kXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYmVmb3Jlc3RhcnQoaWQsIGNvbnRhaW5lciwgcG9pbnQsIHRoYXQsIGFyZ3MpIHtcbiAgICAgIHZhciBwID0gcG9pbnQoY29udGFpbmVyLCBpZCksXG4gICAgICAgICAgcyxcbiAgICAgICAgICBkeCxcbiAgICAgICAgICBkeSxcbiAgICAgICAgICBzdWJsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuY29weSgpO1xuXG4gICAgICBpZiAoIWN1c3RvbUV2ZW50KG5ldyBEcmFnRXZlbnQoZHJhZywgXCJiZWZvcmVzdGFydFwiLCBzLCBpZCwgYWN0aXZlLCBwWzBdLCBwWzFdLCAwLCAwLCBzdWJsaXN0ZW5lcnMpLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICgoZXhwb3J0cy5ldmVudC5zdWJqZWN0ID0gcyA9IHN1YmplY3QuYXBwbHkodGhhdCwgYXJncykpID09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgICAgICAgZHggPSBzLnggLSBwWzBdIHx8IDA7XG4gICAgICAgIGR5ID0gcy55IC0gcFsxXSB8fCAwO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0pKSByZXR1cm47XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiBnZXN0dXJlKHR5cGUpIHtcbiAgICAgICAgdmFyIHAwID0gcCxcbiAgICAgICAgICAgIG47XG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgIGNhc2UgXCJzdGFydFwiOlxuICAgICAgICAgICAgZ2VzdHVyZXNbaWRdID0gZ2VzdHVyZSwgbiA9IGFjdGl2ZSsrO2JyZWFrO1xuICAgICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICAgIGRlbGV0ZSBnZXN0dXJlc1tpZF0sIC0tYWN0aXZlOyAvLyBub2JyZWFrXG4gICAgICAgICAgY2FzZSBcImRyYWdcIjpcbiAgICAgICAgICAgIHAgPSBwb2ludChjb250YWluZXIsIGlkKSwgbiA9IGFjdGl2ZTticmVhaztcbiAgICAgICAgfVxuICAgICAgICBjdXN0b21FdmVudChuZXcgRHJhZ0V2ZW50KGRyYWcsIHR5cGUsIHMsIGlkLCBuLCBwWzBdICsgZHgsIHBbMV0gKyBkeSwgcFswXSAtIHAwWzBdLCBwWzFdIC0gcDBbMV0sIHN1Ymxpc3RlbmVycyksIHN1Ymxpc3RlbmVycy5hcHBseSwgc3VibGlzdGVuZXJzLCBbdHlwZSwgdGhhdCwgYXJnc10pO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBkcmFnLmZpbHRlciA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChmaWx0ZXIgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDIoISFfKSwgZHJhZykgOiBmaWx0ZXI7XG4gICAgfTtcblxuICAgIGRyYWcuY29udGFpbmVyID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNvbnRhaW5lciA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMihfKSwgZHJhZykgOiBjb250YWluZXI7XG4gICAgfTtcblxuICAgIGRyYWcuc3ViamVjdCA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdWJqZWN0ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQyKF8pLCBkcmFnKSA6IHN1YmplY3Q7XG4gICAgfTtcblxuICAgIGRyYWcub24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBsaXN0ZW5lcnMub24uYXBwbHkobGlzdGVuZXJzLCBhcmd1bWVudHMpO1xuICAgICAgcmV0dXJuIHZhbHVlID09PSBsaXN0ZW5lcnMgPyBkcmFnIDogdmFsdWU7XG4gICAgfTtcblxuICAgIGRyYWcuY2xpY2tEaXN0YW5jZSA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjbGlja0Rpc3RhbmNlMiA9IChfID0gK18pICogXywgZHJhZykgOiBNYXRoLnNxcnQoY2xpY2tEaXN0YW5jZTIpO1xuICAgIH07XG5cbiAgICByZXR1cm4gZHJhZztcbiAgfTtcblxuICB2YXIgZGVmaW5lID0gZnVuY3Rpb24gZGVmaW5lKGNvbnN0cnVjdG9yLCBmYWN0b3J5LCBwcm90b3R5cGUpIHtcbiAgICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBmYWN0b3J5LnByb3RvdHlwZSA9IHByb3RvdHlwZTtcbiAgICBwcm90b3R5cGUuY29uc3RydWN0b3IgPSBjb25zdHJ1Y3RvcjtcbiAgfTtcblxuICBmdW5jdGlvbiBleHRlbmQocGFyZW50LCBkZWZpbml0aW9uKSB7XG4gICAgdmFyIHByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUocGFyZW50LnByb3RvdHlwZSk7XG4gICAgZm9yICh2YXIga2V5IGluIGRlZmluaXRpb24pIHtcbiAgICAgIHByb3RvdHlwZVtrZXldID0gZGVmaW5pdGlvbltrZXldO1xuICAgIH1yZXR1cm4gcHJvdG90eXBlO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29sb3IoKSB7fVxuXG4gIHZhciBfZGFya2VyID0gMC43O1xuICB2YXIgX2JyaWdodGVyID0gMSAvIF9kYXJrZXI7XG5cbiAgdmFyIHJlSSA9IFwiXFxcXHMqKFsrLV0/XFxcXGQrKVxcXFxzKlwiO1xuICB2YXIgcmVOID0gXCJcXFxccyooWystXT9cXFxcZCpcXFxcLj9cXFxcZCsoPzpbZUVdWystXT9cXFxcZCspPylcXFxccypcIjtcbiAgdmFyIHJlUCA9IFwiXFxcXHMqKFsrLV0/XFxcXGQqXFxcXC4/XFxcXGQrKD86W2VFXVsrLV0/XFxcXGQrKT8pJVxcXFxzKlwiO1xuICB2YXIgcmVIZXgzID0gL14jKFswLTlhLWZdezN9KSQvO1xuICB2YXIgcmVIZXg2ID0gL14jKFswLTlhLWZdezZ9KSQvO1xuICB2YXIgcmVSZ2JJbnRlZ2VyID0gbmV3IFJlZ0V4cChcIl5yZ2JcXFxcKFwiICsgW3JlSSwgcmVJLCByZUldICsgXCJcXFxcKSRcIik7XG4gIHZhciByZVJnYlBlcmNlbnQgPSBuZXcgUmVnRXhwKFwiXnJnYlxcXFwoXCIgKyBbcmVQLCByZVAsIHJlUF0gKyBcIlxcXFwpJFwiKTtcbiAgdmFyIHJlUmdiYUludGVnZXIgPSBuZXcgUmVnRXhwKFwiXnJnYmFcXFxcKFwiICsgW3JlSSwgcmVJLCByZUksIHJlTl0gKyBcIlxcXFwpJFwiKTtcbiAgdmFyIHJlUmdiYVBlcmNlbnQgPSBuZXcgUmVnRXhwKFwiXnJnYmFcXFxcKFwiICsgW3JlUCwgcmVQLCByZVAsIHJlTl0gKyBcIlxcXFwpJFwiKTtcbiAgdmFyIHJlSHNsUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJeaHNsXFxcXChcIiArIFtyZU4sIHJlUCwgcmVQXSArIFwiXFxcXCkkXCIpO1xuICB2YXIgcmVIc2xhUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJeaHNsYVxcXFwoXCIgKyBbcmVOLCByZVAsIHJlUCwgcmVOXSArIFwiXFxcXCkkXCIpO1xuXG4gIHZhciBuYW1lZCA9IHtcbiAgICBhbGljZWJsdWU6IDB4ZjBmOGZmLFxuICAgIGFudGlxdWV3aGl0ZTogMHhmYWViZDcsXG4gICAgYXF1YTogMHgwMGZmZmYsXG4gICAgYXF1YW1hcmluZTogMHg3ZmZmZDQsXG4gICAgYXp1cmU6IDB4ZjBmZmZmLFxuICAgIGJlaWdlOiAweGY1ZjVkYyxcbiAgICBiaXNxdWU6IDB4ZmZlNGM0LFxuICAgIGJsYWNrOiAweDAwMDAwMCxcbiAgICBibGFuY2hlZGFsbW9uZDogMHhmZmViY2QsXG4gICAgYmx1ZTogMHgwMDAwZmYsXG4gICAgYmx1ZXZpb2xldDogMHg4YTJiZTIsXG4gICAgYnJvd246IDB4YTUyYTJhLFxuICAgIGJ1cmx5d29vZDogMHhkZWI4ODcsXG4gICAgY2FkZXRibHVlOiAweDVmOWVhMCxcbiAgICBjaGFydHJldXNlOiAweDdmZmYwMCxcbiAgICBjaG9jb2xhdGU6IDB4ZDI2OTFlLFxuICAgIGNvcmFsOiAweGZmN2Y1MCxcbiAgICBjb3JuZmxvd2VyYmx1ZTogMHg2NDk1ZWQsXG4gICAgY29ybnNpbGs6IDB4ZmZmOGRjLFxuICAgIGNyaW1zb246IDB4ZGMxNDNjLFxuICAgIGN5YW46IDB4MDBmZmZmLFxuICAgIGRhcmtibHVlOiAweDAwMDA4YixcbiAgICBkYXJrY3lhbjogMHgwMDhiOGIsXG4gICAgZGFya2dvbGRlbnJvZDogMHhiODg2MGIsXG4gICAgZGFya2dyYXk6IDB4YTlhOWE5LFxuICAgIGRhcmtncmVlbjogMHgwMDY0MDAsXG4gICAgZGFya2dyZXk6IDB4YTlhOWE5LFxuICAgIGRhcmtraGFraTogMHhiZGI3NmIsXG4gICAgZGFya21hZ2VudGE6IDB4OGIwMDhiLFxuICAgIGRhcmtvbGl2ZWdyZWVuOiAweDU1NmIyZixcbiAgICBkYXJrb3JhbmdlOiAweGZmOGMwMCxcbiAgICBkYXJrb3JjaGlkOiAweDk5MzJjYyxcbiAgICBkYXJrcmVkOiAweDhiMDAwMCxcbiAgICBkYXJrc2FsbW9uOiAweGU5OTY3YSxcbiAgICBkYXJrc2VhZ3JlZW46IDB4OGZiYzhmLFxuICAgIGRhcmtzbGF0ZWJsdWU6IDB4NDgzZDhiLFxuICAgIGRhcmtzbGF0ZWdyYXk6IDB4MmY0ZjRmLFxuICAgIGRhcmtzbGF0ZWdyZXk6IDB4MmY0ZjRmLFxuICAgIGRhcmt0dXJxdW9pc2U6IDB4MDBjZWQxLFxuICAgIGRhcmt2aW9sZXQ6IDB4OTQwMGQzLFxuICAgIGRlZXBwaW5rOiAweGZmMTQ5MyxcbiAgICBkZWVwc2t5Ymx1ZTogMHgwMGJmZmYsXG4gICAgZGltZ3JheTogMHg2OTY5NjksXG4gICAgZGltZ3JleTogMHg2OTY5NjksXG4gICAgZG9kZ2VyYmx1ZTogMHgxZTkwZmYsXG4gICAgZmlyZWJyaWNrOiAweGIyMjIyMixcbiAgICBmbG9yYWx3aGl0ZTogMHhmZmZhZjAsXG4gICAgZm9yZXN0Z3JlZW46IDB4MjI4YjIyLFxuICAgIGZ1Y2hzaWE6IDB4ZmYwMGZmLFxuICAgIGdhaW5zYm9ybzogMHhkY2RjZGMsXG4gICAgZ2hvc3R3aGl0ZTogMHhmOGY4ZmYsXG4gICAgZ29sZDogMHhmZmQ3MDAsXG4gICAgZ29sZGVucm9kOiAweGRhYTUyMCxcbiAgICBncmF5OiAweDgwODA4MCxcbiAgICBncmVlbjogMHgwMDgwMDAsXG4gICAgZ3JlZW55ZWxsb3c6IDB4YWRmZjJmLFxuICAgIGdyZXk6IDB4ODA4MDgwLFxuICAgIGhvbmV5ZGV3OiAweGYwZmZmMCxcbiAgICBob3RwaW5rOiAweGZmNjliNCxcbiAgICBpbmRpYW5yZWQ6IDB4Y2Q1YzVjLFxuICAgIGluZGlnbzogMHg0YjAwODIsXG4gICAgaXZvcnk6IDB4ZmZmZmYwLFxuICAgIGtoYWtpOiAweGYwZTY4YyxcbiAgICBsYXZlbmRlcjogMHhlNmU2ZmEsXG4gICAgbGF2ZW5kZXJibHVzaDogMHhmZmYwZjUsXG4gICAgbGF3bmdyZWVuOiAweDdjZmMwMCxcbiAgICBsZW1vbmNoaWZmb246IDB4ZmZmYWNkLFxuICAgIGxpZ2h0Ymx1ZTogMHhhZGQ4ZTYsXG4gICAgbGlnaHRjb3JhbDogMHhmMDgwODAsXG4gICAgbGlnaHRjeWFuOiAweGUwZmZmZixcbiAgICBsaWdodGdvbGRlbnJvZHllbGxvdzogMHhmYWZhZDIsXG4gICAgbGlnaHRncmF5OiAweGQzZDNkMyxcbiAgICBsaWdodGdyZWVuOiAweDkwZWU5MCxcbiAgICBsaWdodGdyZXk6IDB4ZDNkM2QzLFxuICAgIGxpZ2h0cGluazogMHhmZmI2YzEsXG4gICAgbGlnaHRzYWxtb246IDB4ZmZhMDdhLFxuICAgIGxpZ2h0c2VhZ3JlZW46IDB4MjBiMmFhLFxuICAgIGxpZ2h0c2t5Ymx1ZTogMHg4N2NlZmEsXG4gICAgbGlnaHRzbGF0ZWdyYXk6IDB4Nzc4ODk5LFxuICAgIGxpZ2h0c2xhdGVncmV5OiAweDc3ODg5OSxcbiAgICBsaWdodHN0ZWVsYmx1ZTogMHhiMGM0ZGUsXG4gICAgbGlnaHR5ZWxsb3c6IDB4ZmZmZmUwLFxuICAgIGxpbWU6IDB4MDBmZjAwLFxuICAgIGxpbWVncmVlbjogMHgzMmNkMzIsXG4gICAgbGluZW46IDB4ZmFmMGU2LFxuICAgIG1hZ2VudGE6IDB4ZmYwMGZmLFxuICAgIG1hcm9vbjogMHg4MDAwMDAsXG4gICAgbWVkaXVtYXF1YW1hcmluZTogMHg2NmNkYWEsXG4gICAgbWVkaXVtYmx1ZTogMHgwMDAwY2QsXG4gICAgbWVkaXVtb3JjaGlkOiAweGJhNTVkMyxcbiAgICBtZWRpdW1wdXJwbGU6IDB4OTM3MGRiLFxuICAgIG1lZGl1bXNlYWdyZWVuOiAweDNjYjM3MSxcbiAgICBtZWRpdW1zbGF0ZWJsdWU6IDB4N2I2OGVlLFxuICAgIG1lZGl1bXNwcmluZ2dyZWVuOiAweDAwZmE5YSxcbiAgICBtZWRpdW10dXJxdW9pc2U6IDB4NDhkMWNjLFxuICAgIG1lZGl1bXZpb2xldHJlZDogMHhjNzE1ODUsXG4gICAgbWlkbmlnaHRibHVlOiAweDE5MTk3MCxcbiAgICBtaW50Y3JlYW06IDB4ZjVmZmZhLFxuICAgIG1pc3R5cm9zZTogMHhmZmU0ZTEsXG4gICAgbW9jY2FzaW46IDB4ZmZlNGI1LFxuICAgIG5hdmFqb3doaXRlOiAweGZmZGVhZCxcbiAgICBuYXZ5OiAweDAwMDA4MCxcbiAgICBvbGRsYWNlOiAweGZkZjVlNixcbiAgICBvbGl2ZTogMHg4MDgwMDAsXG4gICAgb2xpdmVkcmFiOiAweDZiOGUyMyxcbiAgICBvcmFuZ2U6IDB4ZmZhNTAwLFxuICAgIG9yYW5nZXJlZDogMHhmZjQ1MDAsXG4gICAgb3JjaGlkOiAweGRhNzBkNixcbiAgICBwYWxlZ29sZGVucm9kOiAweGVlZThhYSxcbiAgICBwYWxlZ3JlZW46IDB4OThmYjk4LFxuICAgIHBhbGV0dXJxdW9pc2U6IDB4YWZlZWVlLFxuICAgIHBhbGV2aW9sZXRyZWQ6IDB4ZGI3MDkzLFxuICAgIHBhcGF5YXdoaXA6IDB4ZmZlZmQ1LFxuICAgIHBlYWNocHVmZjogMHhmZmRhYjksXG4gICAgcGVydTogMHhjZDg1M2YsXG4gICAgcGluazogMHhmZmMwY2IsXG4gICAgcGx1bTogMHhkZGEwZGQsXG4gICAgcG93ZGVyYmx1ZTogMHhiMGUwZTYsXG4gICAgcHVycGxlOiAweDgwMDA4MCxcbiAgICByZWJlY2NhcHVycGxlOiAweDY2MzM5OSxcbiAgICByZWQ6IDB4ZmYwMDAwLFxuICAgIHJvc3licm93bjogMHhiYzhmOGYsXG4gICAgcm95YWxibHVlOiAweDQxNjllMSxcbiAgICBzYWRkbGVicm93bjogMHg4YjQ1MTMsXG4gICAgc2FsbW9uOiAweGZhODA3MixcbiAgICBzYW5keWJyb3duOiAweGY0YTQ2MCxcbiAgICBzZWFncmVlbjogMHgyZThiNTcsXG4gICAgc2Vhc2hlbGw6IDB4ZmZmNWVlLFxuICAgIHNpZW5uYTogMHhhMDUyMmQsXG4gICAgc2lsdmVyOiAweGMwYzBjMCxcbiAgICBza3libHVlOiAweDg3Y2VlYixcbiAgICBzbGF0ZWJsdWU6IDB4NmE1YWNkLFxuICAgIHNsYXRlZ3JheTogMHg3MDgwOTAsXG4gICAgc2xhdGVncmV5OiAweDcwODA5MCxcbiAgICBzbm93OiAweGZmZmFmYSxcbiAgICBzcHJpbmdncmVlbjogMHgwMGZmN2YsXG4gICAgc3RlZWxibHVlOiAweDQ2ODJiNCxcbiAgICB0YW46IDB4ZDJiNDhjLFxuICAgIHRlYWw6IDB4MDA4MDgwLFxuICAgIHRoaXN0bGU6IDB4ZDhiZmQ4LFxuICAgIHRvbWF0bzogMHhmZjYzNDcsXG4gICAgdHVycXVvaXNlOiAweDQwZTBkMCxcbiAgICB2aW9sZXQ6IDB4ZWU4MmVlLFxuICAgIHdoZWF0OiAweGY1ZGViMyxcbiAgICB3aGl0ZTogMHhmZmZmZmYsXG4gICAgd2hpdGVzbW9rZTogMHhmNWY1ZjUsXG4gICAgeWVsbG93OiAweGZmZmYwMCxcbiAgICB5ZWxsb3dncmVlbjogMHg5YWNkMzJcbiAgfTtcblxuICBkZWZpbmUoQ29sb3IsIGNvbG9yLCB7XG4gICAgZGlzcGxheWFibGU6IGZ1bmN0aW9uIGRpc3BsYXlhYmxlKCkge1xuICAgICAgcmV0dXJuIHRoaXMucmdiKCkuZGlzcGxheWFibGUoKTtcbiAgICB9LFxuICAgIHRvU3RyaW5nOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgIHJldHVybiB0aGlzLnJnYigpICsgXCJcIjtcbiAgICB9XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGNvbG9yKGZvcm1hdCkge1xuICAgIHZhciBtO1xuICAgIGZvcm1hdCA9IChmb3JtYXQgKyBcIlwiKS50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgICByZXR1cm4gKG0gPSByZUhleDMuZXhlYyhmb3JtYXQpKSA/IChtID0gcGFyc2VJbnQobVsxXSwgMTYpLCBuZXcgUmdiKG0gPj4gOCAmIDB4ZiB8IG0gPj4gNCAmIDB4MGYwLCBtID4+IDQgJiAweGYgfCBtICYgMHhmMCwgKG0gJiAweGYpIDw8IDQgfCBtICYgMHhmLCAxKSAvLyAjZjAwXG4gICAgKSA6IChtID0gcmVIZXg2LmV4ZWMoZm9ybWF0KSkgPyByZ2JuKHBhcnNlSW50KG1bMV0sIDE2KSkgLy8gI2ZmMDAwMFxuICAgIDogKG0gPSByZVJnYkludGVnZXIuZXhlYyhmb3JtYXQpKSA/IG5ldyBSZ2IobVsxXSwgbVsyXSwgbVszXSwgMSkgLy8gcmdiKDI1NSwgMCwgMClcbiAgICA6IChtID0gcmVSZ2JQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBuZXcgUmdiKG1bMV0gKiAyNTUgLyAxMDAsIG1bMl0gKiAyNTUgLyAxMDAsIG1bM10gKiAyNTUgLyAxMDAsIDEpIC8vIHJnYigxMDAlLCAwJSwgMCUpXG4gICAgOiAobSA9IHJlUmdiYUludGVnZXIuZXhlYyhmb3JtYXQpKSA/IHJnYmEobVsxXSwgbVsyXSwgbVszXSwgbVs0XSkgLy8gcmdiYSgyNTUsIDAsIDAsIDEpXG4gICAgOiAobSA9IHJlUmdiYVBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IHJnYmEobVsxXSAqIDI1NSAvIDEwMCwgbVsyXSAqIDI1NSAvIDEwMCwgbVszXSAqIDI1NSAvIDEwMCwgbVs0XSkgLy8gcmdiKDEwMCUsIDAlLCAwJSwgMSlcbiAgICA6IChtID0gcmVIc2xQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBoc2xhKG1bMV0sIG1bMl0gLyAxMDAsIG1bM10gLyAxMDAsIDEpIC8vIGhzbCgxMjAsIDUwJSwgNTAlKVxuICAgIDogKG0gPSByZUhzbGFQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBoc2xhKG1bMV0sIG1bMl0gLyAxMDAsIG1bM10gLyAxMDAsIG1bNF0pIC8vIGhzbGEoMTIwLCA1MCUsIDUwJSwgMSlcbiAgICA6IG5hbWVkLmhhc093blByb3BlcnR5KGZvcm1hdCkgPyByZ2JuKG5hbWVkW2Zvcm1hdF0pIDogZm9ybWF0ID09PSBcInRyYW5zcGFyZW50XCIgPyBuZXcgUmdiKE5hTiwgTmFOLCBOYU4sIDApIDogbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJnYm4obikge1xuICAgIHJldHVybiBuZXcgUmdiKG4gPj4gMTYgJiAweGZmLCBuID4+IDggJiAweGZmLCBuICYgMHhmZiwgMSk7XG4gIH1cblxuICBmdW5jdGlvbiByZ2JhKHIsIGcsIGIsIGEpIHtcbiAgICBpZiAoYSA8PSAwKSByID0gZyA9IGIgPSBOYU47XG4gICAgcmV0dXJuIG5ldyBSZ2IociwgZywgYiwgYSk7XG4gIH1cblxuICBmdW5jdGlvbiByZ2JDb252ZXJ0KG8pIHtcbiAgICBpZiAoIShvIGluc3RhbmNlb2YgQ29sb3IpKSBvID0gY29sb3Iobyk7XG4gICAgaWYgKCFvKSByZXR1cm4gbmV3IFJnYigpO1xuICAgIG8gPSBvLnJnYigpO1xuICAgIHJldHVybiBuZXcgUmdiKG8uciwgby5nLCBvLmIsIG8ub3BhY2l0eSk7XG4gIH1cblxuICBmdW5jdGlvbiByZ2IociwgZywgYiwgb3BhY2l0eSkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gcmdiQ29udmVydChyKSA6IG5ldyBSZ2IociwgZywgYiwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xuICB9XG5cbiAgZnVuY3Rpb24gUmdiKHIsIGcsIGIsIG9wYWNpdHkpIHtcbiAgICB0aGlzLnIgPSArcjtcbiAgICB0aGlzLmcgPSArZztcbiAgICB0aGlzLmIgPSArYjtcbiAgICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbiAgfVxuXG4gIGRlZmluZShSZ2IsIHJnYiwgZXh0ZW5kKENvbG9yLCB7XG4gICAgYnJpZ2h0ZXI6IGZ1bmN0aW9uIGJyaWdodGVyKGspIHtcbiAgICAgIGsgPSBrID09IG51bGwgPyBfYnJpZ2h0ZXIgOiBNYXRoLnBvdyhfYnJpZ2h0ZXIsIGspO1xuICAgICAgcmV0dXJuIG5ldyBSZ2IodGhpcy5yICogaywgdGhpcy5nICogaywgdGhpcy5iICogaywgdGhpcy5vcGFjaXR5KTtcbiAgICB9LFxuICAgIGRhcmtlcjogZnVuY3Rpb24gZGFya2VyKGspIHtcbiAgICAgIGsgPSBrID09IG51bGwgPyBfZGFya2VyIDogTWF0aC5wb3coX2Rhcmtlciwgayk7XG4gICAgICByZXR1cm4gbmV3IFJnYih0aGlzLnIgKiBrLCB0aGlzLmcgKiBrLCB0aGlzLmIgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICAgIH0sXG4gICAgcmdiOiBmdW5jdGlvbiByZ2IoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGRpc3BsYXlhYmxlOiBmdW5jdGlvbiBkaXNwbGF5YWJsZSgpIHtcbiAgICAgIHJldHVybiAwIDw9IHRoaXMuciAmJiB0aGlzLnIgPD0gMjU1ICYmIDAgPD0gdGhpcy5nICYmIHRoaXMuZyA8PSAyNTUgJiYgMCA8PSB0aGlzLmIgJiYgdGhpcy5iIDw9IDI1NSAmJiAwIDw9IHRoaXMub3BhY2l0eSAmJiB0aGlzLm9wYWNpdHkgPD0gMTtcbiAgICB9LFxuICAgIHRvU3RyaW5nOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgIHZhciBhID0gdGhpcy5vcGFjaXR5O2EgPSBpc05hTihhKSA/IDEgOiBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBhKSk7XG4gICAgICByZXR1cm4gKGEgPT09IDEgPyBcInJnYihcIiA6IFwicmdiYShcIikgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodGhpcy5yKSB8fCAwKSkgKyBcIiwgXCIgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodGhpcy5nKSB8fCAwKSkgKyBcIiwgXCIgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodGhpcy5iKSB8fCAwKSkgKyAoYSA9PT0gMSA/IFwiKVwiIDogXCIsIFwiICsgYSArIFwiKVwiKTtcbiAgICB9XG4gIH0pKTtcblxuICBmdW5jdGlvbiBoc2xhKGgsIHMsIGwsIGEpIHtcbiAgICBpZiAoYSA8PSAwKSBoID0gcyA9IGwgPSBOYU47ZWxzZSBpZiAobCA8PSAwIHx8IGwgPj0gMSkgaCA9IHMgPSBOYU47ZWxzZSBpZiAocyA8PSAwKSBoID0gTmFOO1xuICAgIHJldHVybiBuZXcgSHNsKGgsIHMsIGwsIGEpO1xuICB9XG5cbiAgZnVuY3Rpb24gaHNsQ29udmVydChvKSB7XG4gICAgaWYgKG8gaW5zdGFuY2VvZiBIc2wpIHJldHVybiBuZXcgSHNsKG8uaCwgby5zLCBvLmwsIG8ub3BhY2l0eSk7XG4gICAgaWYgKCEobyBpbnN0YW5jZW9mIENvbG9yKSkgbyA9IGNvbG9yKG8pO1xuICAgIGlmICghbykgcmV0dXJuIG5ldyBIc2woKTtcbiAgICBpZiAobyBpbnN0YW5jZW9mIEhzbCkgcmV0dXJuIG87XG4gICAgbyA9IG8ucmdiKCk7XG4gICAgdmFyIHIgPSBvLnIgLyAyNTUsXG4gICAgICAgIGcgPSBvLmcgLyAyNTUsXG4gICAgICAgIGIgPSBvLmIgLyAyNTUsXG4gICAgICAgIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpLFxuICAgICAgICBtYXggPSBNYXRoLm1heChyLCBnLCBiKSxcbiAgICAgICAgaCA9IE5hTixcbiAgICAgICAgcyA9IG1heCAtIG1pbixcbiAgICAgICAgbCA9IChtYXggKyBtaW4pIC8gMjtcbiAgICBpZiAocykge1xuICAgICAgaWYgKHIgPT09IG1heCkgaCA9IChnIC0gYikgLyBzICsgKGcgPCBiKSAqIDY7ZWxzZSBpZiAoZyA9PT0gbWF4KSBoID0gKGIgLSByKSAvIHMgKyAyO2Vsc2UgaCA9IChyIC0gZykgLyBzICsgNDtcbiAgICAgIHMgLz0gbCA8IDAuNSA/IG1heCArIG1pbiA6IDIgLSBtYXggLSBtaW47XG4gICAgICBoICo9IDYwO1xuICAgIH0gZWxzZSB7XG4gICAgICBzID0gbCA+IDAgJiYgbCA8IDEgPyAwIDogaDtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBIc2woaCwgcywgbCwgby5vcGFjaXR5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhzbChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBoc2xDb252ZXJ0KGgpIDogbmV3IEhzbChoLCBzLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG4gIH1cblxuICBmdW5jdGlvbiBIc2woaCwgcywgbCwgb3BhY2l0eSkge1xuICAgIHRoaXMuaCA9ICtoO1xuICAgIHRoaXMucyA9ICtzO1xuICAgIHRoaXMubCA9ICtsO1xuICAgIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xuICB9XG5cbiAgZGVmaW5lKEhzbCwgaHNsLCBleHRlbmQoQ29sb3IsIHtcbiAgICBicmlnaHRlcjogZnVuY3Rpb24gYnJpZ2h0ZXIoaykge1xuICAgICAgayA9IGsgPT0gbnVsbCA/IF9icmlnaHRlciA6IE1hdGgucG93KF9icmlnaHRlciwgayk7XG4gICAgICByZXR1cm4gbmV3IEhzbCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgICB9LFxuICAgIGRhcmtlcjogZnVuY3Rpb24gZGFya2VyKGspIHtcbiAgICAgIGsgPSBrID09IG51bGwgPyBfZGFya2VyIDogTWF0aC5wb3coX2Rhcmtlciwgayk7XG4gICAgICByZXR1cm4gbmV3IEhzbCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgICB9LFxuICAgIHJnYjogZnVuY3Rpb24gcmdiKCkge1xuICAgICAgdmFyIGggPSB0aGlzLmggJSAzNjAgKyAodGhpcy5oIDwgMCkgKiAzNjAsXG4gICAgICAgICAgcyA9IGlzTmFOKGgpIHx8IGlzTmFOKHRoaXMucykgPyAwIDogdGhpcy5zLFxuICAgICAgICAgIGwgPSB0aGlzLmwsXG4gICAgICAgICAgbTIgPSBsICsgKGwgPCAwLjUgPyBsIDogMSAtIGwpICogcyxcbiAgICAgICAgICBtMSA9IDIgKiBsIC0gbTI7XG4gICAgICByZXR1cm4gbmV3IFJnYihoc2wycmdiKGggPj0gMjQwID8gaCAtIDI0MCA6IGggKyAxMjAsIG0xLCBtMiksIGhzbDJyZ2IoaCwgbTEsIG0yKSwgaHNsMnJnYihoIDwgMTIwID8gaCArIDI0MCA6IGggLSAxMjAsIG0xLCBtMiksIHRoaXMub3BhY2l0eSk7XG4gICAgfSxcbiAgICBkaXNwbGF5YWJsZTogZnVuY3Rpb24gZGlzcGxheWFibGUoKSB7XG4gICAgICByZXR1cm4gKDAgPD0gdGhpcy5zICYmIHRoaXMucyA8PSAxIHx8IGlzTmFOKHRoaXMucykpICYmIDAgPD0gdGhpcy5sICYmIHRoaXMubCA8PSAxICYmIDAgPD0gdGhpcy5vcGFjaXR5ICYmIHRoaXMub3BhY2l0eSA8PSAxO1xuICAgIH1cbiAgfSkpO1xuXG4gIC8qIEZyb20gRnZEIDEzLjM3LCBDU1MgQ29sb3IgTW9kdWxlIExldmVsIDMgKi9cbiAgZnVuY3Rpb24gaHNsMnJnYihoLCBtMSwgbTIpIHtcbiAgICByZXR1cm4gKGggPCA2MCA/IG0xICsgKG0yIC0gbTEpICogaCAvIDYwIDogaCA8IDE4MCA/IG0yIDogaCA8IDI0MCA/IG0xICsgKG0yIC0gbTEpICogKDI0MCAtIGgpIC8gNjAgOiBtMSkgKiAyNTU7XG4gIH1cblxuICB2YXIgZGVnMnJhZCA9IE1hdGguUEkgLyAxODA7XG4gIHZhciByYWQyZGVnID0gMTgwIC8gTWF0aC5QSTtcblxuICB2YXIgS24gPSAxODtcbiAgdmFyIFhuID0gMC45NTA0NzA7XG4gIHZhciBZbiA9IDE7XG4gIHZhciBabiA9IDEuMDg4ODMwO1xuICB2YXIgdDAgPSA0IC8gMjk7XG4gIHZhciB0MSA9IDYgLyAyOTtcbiAgdmFyIHQyID0gMyAqIHQxICogdDE7XG4gIHZhciB0MyA9IHQxICogdDEgKiB0MTtcblxuICBmdW5jdGlvbiBsYWJDb252ZXJ0KG8pIHtcbiAgICBpZiAobyBpbnN0YW5jZW9mIExhYikgcmV0dXJuIG5ldyBMYWIoby5sLCBvLmEsIG8uYiwgby5vcGFjaXR5KTtcbiAgICBpZiAobyBpbnN0YW5jZW9mIEhjbCkge1xuICAgICAgdmFyIGggPSBvLmggKiBkZWcycmFkO1xuICAgICAgcmV0dXJuIG5ldyBMYWIoby5sLCBNYXRoLmNvcyhoKSAqIG8uYywgTWF0aC5zaW4oaCkgKiBvLmMsIG8ub3BhY2l0eSk7XG4gICAgfVxuICAgIGlmICghKG8gaW5zdGFuY2VvZiBSZ2IpKSBvID0gcmdiQ29udmVydChvKTtcbiAgICB2YXIgYiA9IHJnYjJ4eXooby5yKSxcbiAgICAgICAgYSA9IHJnYjJ4eXooby5nKSxcbiAgICAgICAgbCA9IHJnYjJ4eXooby5iKSxcbiAgICAgICAgeCA9IHh5ejJsYWIoKDAuNDEyNDU2NCAqIGIgKyAwLjM1NzU3NjEgKiBhICsgMC4xODA0Mzc1ICogbCkgLyBYbiksXG4gICAgICAgIHkgPSB4eXoybGFiKCgwLjIxMjY3MjkgKiBiICsgMC43MTUxNTIyICogYSArIDAuMDcyMTc1MCAqIGwpIC8gWW4pLFxuICAgICAgICB6ID0geHl6MmxhYigoMC4wMTkzMzM5ICogYiArIDAuMTE5MTkyMCAqIGEgKyAwLjk1MDMwNDEgKiBsKSAvIFpuKTtcbiAgICByZXR1cm4gbmV3IExhYigxMTYgKiB5IC0gMTYsIDUwMCAqICh4IC0geSksIDIwMCAqICh5IC0geiksIG8ub3BhY2l0eSk7XG4gIH1cblxuICBmdW5jdGlvbiBsYWIobCwgYSwgYiwgb3BhY2l0eSkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gbGFiQ29udmVydChsKSA6IG5ldyBMYWIobCwgYSwgYiwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xuICB9XG5cbiAgZnVuY3Rpb24gTGFiKGwsIGEsIGIsIG9wYWNpdHkpIHtcbiAgICB0aGlzLmwgPSArbDtcbiAgICB0aGlzLmEgPSArYTtcbiAgICB0aGlzLmIgPSArYjtcbiAgICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbiAgfVxuXG4gIGRlZmluZShMYWIsIGxhYiwgZXh0ZW5kKENvbG9yLCB7XG4gICAgYnJpZ2h0ZXI6IGZ1bmN0aW9uIGJyaWdodGVyKGspIHtcbiAgICAgIHJldHVybiBuZXcgTGFiKHRoaXMubCArIEtuICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5hLCB0aGlzLmIsIHRoaXMub3BhY2l0eSk7XG4gICAgfSxcbiAgICBkYXJrZXI6IGZ1bmN0aW9uIGRhcmtlcihrKSB7XG4gICAgICByZXR1cm4gbmV3IExhYih0aGlzLmwgLSBLbiAqIChrID09IG51bGwgPyAxIDogayksIHRoaXMuYSwgdGhpcy5iLCB0aGlzLm9wYWNpdHkpO1xuICAgIH0sXG4gICAgcmdiOiBmdW5jdGlvbiByZ2IoKSB7XG4gICAgICB2YXIgeSA9ICh0aGlzLmwgKyAxNikgLyAxMTYsXG4gICAgICAgICAgeCA9IGlzTmFOKHRoaXMuYSkgPyB5IDogeSArIHRoaXMuYSAvIDUwMCxcbiAgICAgICAgICB6ID0gaXNOYU4odGhpcy5iKSA/IHkgOiB5IC0gdGhpcy5iIC8gMjAwO1xuICAgICAgeSA9IFluICogbGFiMnh5eih5KTtcbiAgICAgIHggPSBYbiAqIGxhYjJ4eXooeCk7XG4gICAgICB6ID0gWm4gKiBsYWIyeHl6KHopO1xuICAgICAgcmV0dXJuIG5ldyBSZ2IoeHl6MnJnYigzLjI0MDQ1NDIgKiB4IC0gMS41MzcxMzg1ICogeSAtIDAuNDk4NTMxNCAqIHopLCAvLyBENjUgLT4gc1JHQlxuICAgICAgeHl6MnJnYigtMC45NjkyNjYwICogeCArIDEuODc2MDEwOCAqIHkgKyAwLjA0MTU1NjAgKiB6KSwgeHl6MnJnYigwLjA1NTY0MzQgKiB4IC0gMC4yMDQwMjU5ICogeSArIDEuMDU3MjI1MiAqIHopLCB0aGlzLm9wYWNpdHkpO1xuICAgIH1cbiAgfSkpO1xuXG4gIGZ1bmN0aW9uIHh5ejJsYWIodCkge1xuICAgIHJldHVybiB0ID4gdDMgPyBNYXRoLnBvdyh0LCAxIC8gMykgOiB0IC8gdDIgKyB0MDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxhYjJ4eXoodCkge1xuICAgIHJldHVybiB0ID4gdDEgPyB0ICogdCAqIHQgOiB0MiAqICh0IC0gdDApO1xuICB9XG5cbiAgZnVuY3Rpb24geHl6MnJnYih4KSB7XG4gICAgcmV0dXJuIDI1NSAqICh4IDw9IDAuMDAzMTMwOCA/IDEyLjkyICogeCA6IDEuMDU1ICogTWF0aC5wb3coeCwgMSAvIDIuNCkgLSAwLjA1NSk7XG4gIH1cblxuICBmdW5jdGlvbiByZ2IyeHl6KHgpIHtcbiAgICByZXR1cm4gKHggLz0gMjU1KSA8PSAwLjA0MDQ1ID8geCAvIDEyLjkyIDogTWF0aC5wb3coKHggKyAwLjA1NSkgLyAxLjA1NSwgMi40KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhjbENvbnZlcnQobykge1xuICAgIGlmIChvIGluc3RhbmNlb2YgSGNsKSByZXR1cm4gbmV3IEhjbChvLmgsIG8uYywgby5sLCBvLm9wYWNpdHkpO1xuICAgIGlmICghKG8gaW5zdGFuY2VvZiBMYWIpKSBvID0gbGFiQ29udmVydChvKTtcbiAgICB2YXIgaCA9IE1hdGguYXRhbjIoby5iLCBvLmEpICogcmFkMmRlZztcbiAgICByZXR1cm4gbmV3IEhjbChoIDwgMCA/IGggKyAzNjAgOiBoLCBNYXRoLnNxcnQoby5hICogby5hICsgby5iICogby5iKSwgby5sLCBvLm9wYWNpdHkpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGNsKGgsIGMsIGwsIG9wYWNpdHkpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGhjbENvbnZlcnQoaCkgOiBuZXcgSGNsKGgsIGMsIGwsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEhjbChoLCBjLCBsLCBvcGFjaXR5KSB7XG4gICAgdGhpcy5oID0gK2g7XG4gICAgdGhpcy5jID0gK2M7XG4gICAgdGhpcy5sID0gK2w7XG4gICAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG4gIH1cblxuICBkZWZpbmUoSGNsLCBoY2wsIGV4dGVuZChDb2xvciwge1xuICAgIGJyaWdodGVyOiBmdW5jdGlvbiBicmlnaHRlcihrKSB7XG4gICAgICByZXR1cm4gbmV3IEhjbCh0aGlzLmgsIHRoaXMuYywgdGhpcy5sICsgS24gKiAoayA9PSBudWxsID8gMSA6IGspLCB0aGlzLm9wYWNpdHkpO1xuICAgIH0sXG4gICAgZGFya2VyOiBmdW5jdGlvbiBkYXJrZXIoaykge1xuICAgICAgcmV0dXJuIG5ldyBIY2wodGhpcy5oLCB0aGlzLmMsIHRoaXMubCAtIEtuICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5vcGFjaXR5KTtcbiAgICB9LFxuICAgIHJnYjogZnVuY3Rpb24gcmdiKCkge1xuICAgICAgcmV0dXJuIGxhYkNvbnZlcnQodGhpcykucmdiKCk7XG4gICAgfVxuICB9KSk7XG5cbiAgdmFyIEEgPSAtMC4xNDg2MTtcbiAgdmFyIEIgPSArMS43ODI3NztcbiAgdmFyIEMgPSAtMC4yOTIyNztcbiAgdmFyIEQgPSAtMC45MDY0OTtcbiAgdmFyIEUgPSArMS45NzI5NDtcbiAgdmFyIEVEID0gRSAqIEQ7XG4gIHZhciBFQiA9IEUgKiBCO1xuICB2YXIgQkNfREEgPSBCICogQyAtIEQgKiBBO1xuXG4gIGZ1bmN0aW9uIGN1YmVoZWxpeENvbnZlcnQobykge1xuICAgIGlmIChvIGluc3RhbmNlb2YgQ3ViZWhlbGl4KSByZXR1cm4gbmV3IEN1YmVoZWxpeChvLmgsIG8ucywgby5sLCBvLm9wYWNpdHkpO1xuICAgIGlmICghKG8gaW5zdGFuY2VvZiBSZ2IpKSBvID0gcmdiQ29udmVydChvKTtcbiAgICB2YXIgciA9IG8uciAvIDI1NSxcbiAgICAgICAgZyA9IG8uZyAvIDI1NSxcbiAgICAgICAgYiA9IG8uYiAvIDI1NSxcbiAgICAgICAgbCA9IChCQ19EQSAqIGIgKyBFRCAqIHIgLSBFQiAqIGcpIC8gKEJDX0RBICsgRUQgLSBFQiksXG4gICAgICAgIGJsID0gYiAtIGwsXG4gICAgICAgIGsgPSAoRSAqIChnIC0gbCkgLSBDICogYmwpIC8gRCxcbiAgICAgICAgcyA9IE1hdGguc3FydChrICogayArIGJsICogYmwpIC8gKEUgKiBsICogKDEgLSBsKSksXG4gICAgICAgIC8vIE5hTiBpZiBsPTAgb3IgbD0xXG4gICAgaCA9IHMgPyBNYXRoLmF0YW4yKGssIGJsKSAqIHJhZDJkZWcgLSAxMjAgOiBOYU47XG4gICAgcmV0dXJuIG5ldyBDdWJlaGVsaXgoaCA8IDAgPyBoICsgMzYwIDogaCwgcywgbCwgby5vcGFjaXR5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGN1YmVoZWxpeChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBjdWJlaGVsaXhDb252ZXJ0KGgpIDogbmV3IEN1YmVoZWxpeChoLCBzLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG4gIH1cblxuICBmdW5jdGlvbiBDdWJlaGVsaXgoaCwgcywgbCwgb3BhY2l0eSkge1xuICAgIHRoaXMuaCA9ICtoO1xuICAgIHRoaXMucyA9ICtzO1xuICAgIHRoaXMubCA9ICtsO1xuICAgIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xuICB9XG5cbiAgZGVmaW5lKEN1YmVoZWxpeCwgY3ViZWhlbGl4LCBleHRlbmQoQ29sb3IsIHtcbiAgICBicmlnaHRlcjogZnVuY3Rpb24gYnJpZ2h0ZXIoaykge1xuICAgICAgayA9IGsgPT0gbnVsbCA/IF9icmlnaHRlciA6IE1hdGgucG93KF9icmlnaHRlciwgayk7XG4gICAgICByZXR1cm4gbmV3IEN1YmVoZWxpeCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgICB9LFxuICAgIGRhcmtlcjogZnVuY3Rpb24gZGFya2VyKGspIHtcbiAgICAgIGsgPSBrID09IG51bGwgPyBfZGFya2VyIDogTWF0aC5wb3coX2Rhcmtlciwgayk7XG4gICAgICByZXR1cm4gbmV3IEN1YmVoZWxpeCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgICB9LFxuICAgIHJnYjogZnVuY3Rpb24gcmdiKCkge1xuICAgICAgdmFyIGggPSBpc05hTih0aGlzLmgpID8gMCA6ICh0aGlzLmggKyAxMjApICogZGVnMnJhZCxcbiAgICAgICAgICBsID0gK3RoaXMubCxcbiAgICAgICAgICBhID0gaXNOYU4odGhpcy5zKSA/IDAgOiB0aGlzLnMgKiBsICogKDEgLSBsKSxcbiAgICAgICAgICBjb3NoID0gTWF0aC5jb3MoaCksXG4gICAgICAgICAgc2luaCA9IE1hdGguc2luKGgpO1xuICAgICAgcmV0dXJuIG5ldyBSZ2IoMjU1ICogKGwgKyBhICogKEEgKiBjb3NoICsgQiAqIHNpbmgpKSwgMjU1ICogKGwgKyBhICogKEMgKiBjb3NoICsgRCAqIHNpbmgpKSwgMjU1ICogKGwgKyBhICogKEUgKiBjb3NoKSksIHRoaXMub3BhY2l0eSk7XG4gICAgfVxuICB9KSk7XG5cbiAgZnVuY3Rpb24gYmFzaXModDEsIHYwLCB2MSwgdjIsIHYzKSB7XG4gICAgdmFyIHQyID0gdDEgKiB0MSxcbiAgICAgICAgdDMgPSB0MiAqIHQxO1xuICAgIHJldHVybiAoKDEgLSAzICogdDEgKyAzICogdDIgLSB0MykgKiB2MCArICg0IC0gNiAqIHQyICsgMyAqIHQzKSAqIHYxICsgKDEgKyAzICogdDEgKyAzICogdDIgLSAzICogdDMpICogdjIgKyB0MyAqIHYzKSAvIDY7XG4gIH1cblxuICB2YXIgYmFzaXMkMSA9IGZ1bmN0aW9uIGJhc2lzJDEodmFsdWVzKSB7XG4gICAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoIC0gMTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHQpIHtcbiAgICAgIHZhciBpID0gdCA8PSAwID8gdCA9IDAgOiB0ID49IDEgPyAodCA9IDEsIG4gLSAxKSA6IE1hdGguZmxvb3IodCAqIG4pLFxuICAgICAgICAgIHYxID0gdmFsdWVzW2ldLFxuICAgICAgICAgIHYyID0gdmFsdWVzW2kgKyAxXSxcbiAgICAgICAgICB2MCA9IGkgPiAwID8gdmFsdWVzW2kgLSAxXSA6IDIgKiB2MSAtIHYyLFxuICAgICAgICAgIHYzID0gaSA8IG4gLSAxID8gdmFsdWVzW2kgKyAyXSA6IDIgKiB2MiAtIHYxO1xuICAgICAgcmV0dXJuIGJhc2lzKCh0IC0gaSAvIG4pICogbiwgdjAsIHYxLCB2MiwgdjMpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGJhc2lzQ2xvc2VkID0gZnVuY3Rpb24gYmFzaXNDbG9zZWQodmFsdWVzKSB7XG4gICAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoO1xuICAgIHJldHVybiBmdW5jdGlvbiAodCkge1xuICAgICAgdmFyIGkgPSBNYXRoLmZsb29yKCgodCAlPSAxKSA8IDAgPyArK3QgOiB0KSAqIG4pLFxuICAgICAgICAgIHYwID0gdmFsdWVzWyhpICsgbiAtIDEpICUgbl0sXG4gICAgICAgICAgdjEgPSB2YWx1ZXNbaSAlIG5dLFxuICAgICAgICAgIHYyID0gdmFsdWVzWyhpICsgMSkgJSBuXSxcbiAgICAgICAgICB2MyA9IHZhbHVlc1soaSArIDIpICUgbl07XG4gICAgICByZXR1cm4gYmFzaXMoKHQgLSBpIC8gbikgKiBuLCB2MCwgdjEsIHYyLCB2Myk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgY29uc3RhbnQkMyA9IGZ1bmN0aW9uIGNvbnN0YW50JDMoeCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4geDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIGxpbmVhcihhLCBkKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0KSB7XG4gICAgICByZXR1cm4gYSArIHQgKiBkO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBleHBvbmVudGlhbChhLCBiLCB5KSB7XG4gICAgcmV0dXJuIGEgPSBNYXRoLnBvdyhhLCB5KSwgYiA9IE1hdGgucG93KGIsIHkpIC0gYSwgeSA9IDEgLyB5LCBmdW5jdGlvbiAodCkge1xuICAgICAgcmV0dXJuIE1hdGgucG93KGEgKyB0ICogYiwgeSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGh1ZShhLCBiKSB7XG4gICAgdmFyIGQgPSBiIC0gYTtcbiAgICByZXR1cm4gZCA/IGxpbmVhcihhLCBkID4gMTgwIHx8IGQgPCAtMTgwID8gZCAtIDM2MCAqIE1hdGgucm91bmQoZCAvIDM2MCkgOiBkKSA6IGNvbnN0YW50JDMoaXNOYU4oYSkgPyBiIDogYSk7XG4gIH1cblxuICBmdW5jdGlvbiBnYW1tYSh5KSB7XG4gICAgcmV0dXJuICh5ID0gK3kpID09PSAxID8gbm9nYW1tYSA6IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gYiAtIGEgPyBleHBvbmVudGlhbChhLCBiLCB5KSA6IGNvbnN0YW50JDMoaXNOYU4oYSkgPyBiIDogYSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vZ2FtbWEoYSwgYikge1xuICAgIHZhciBkID0gYiAtIGE7XG4gICAgcmV0dXJuIGQgPyBsaW5lYXIoYSwgZCkgOiBjb25zdGFudCQzKGlzTmFOKGEpID8gYiA6IGEpO1xuICB9XG5cbiAgdmFyIGludGVycG9sYXRlUmdiID0gZnVuY3Rpb24gcmdiR2FtbWEoeSkge1xuICAgIHZhciBjb2xvciQkMSA9IGdhbW1hKHkpO1xuXG4gICAgZnVuY3Rpb24gcmdiJCQxKHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciByID0gY29sb3IkJDEoKHN0YXJ0ID0gcmdiKHN0YXJ0KSkuciwgKGVuZCA9IHJnYihlbmQpKS5yKSxcbiAgICAgICAgICBnID0gY29sb3IkJDEoc3RhcnQuZywgZW5kLmcpLFxuICAgICAgICAgIGIgPSBjb2xvciQkMShzdGFydC5iLCBlbmQuYiksXG4gICAgICAgICAgb3BhY2l0eSA9IG5vZ2FtbWEoc3RhcnQub3BhY2l0eSwgZW5kLm9wYWNpdHkpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHN0YXJ0LnIgPSByKHQpO1xuICAgICAgICBzdGFydC5nID0gZyh0KTtcbiAgICAgICAgc3RhcnQuYiA9IGIodCk7XG4gICAgICAgIHN0YXJ0Lm9wYWNpdHkgPSBvcGFjaXR5KHQpO1xuICAgICAgICByZXR1cm4gc3RhcnQgKyBcIlwiO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZ2IkJDEuZ2FtbWEgPSByZ2JHYW1tYTtcblxuICAgIHJldHVybiByZ2IkJDE7XG4gIH0oMSk7XG5cbiAgZnVuY3Rpb24gcmdiU3BsaW5lKHNwbGluZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoY29sb3JzKSB7XG4gICAgICB2YXIgbiA9IGNvbG9ycy5sZW5ndGgsXG4gICAgICAgICAgciA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgICBnID0gbmV3IEFycmF5KG4pLFxuICAgICAgICAgIGIgPSBuZXcgQXJyYXkobiksXG4gICAgICAgICAgaSxcbiAgICAgICAgICBjb2xvciQkMTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgY29sb3IkJDEgPSByZ2IoY29sb3JzW2ldKTtcbiAgICAgICAgcltpXSA9IGNvbG9yJCQxLnIgfHwgMDtcbiAgICAgICAgZ1tpXSA9IGNvbG9yJCQxLmcgfHwgMDtcbiAgICAgICAgYltpXSA9IGNvbG9yJCQxLmIgfHwgMDtcbiAgICAgIH1cbiAgICAgIHIgPSBzcGxpbmUocik7XG4gICAgICBnID0gc3BsaW5lKGcpO1xuICAgICAgYiA9IHNwbGluZShiKTtcbiAgICAgIGNvbG9yJCQxLm9wYWNpdHkgPSAxO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIGNvbG9yJCQxLnIgPSByKHQpO1xuICAgICAgICBjb2xvciQkMS5nID0gZyh0KTtcbiAgICAgICAgY29sb3IkJDEuYiA9IGIodCk7XG4gICAgICAgIHJldHVybiBjb2xvciQkMSArIFwiXCI7XG4gICAgICB9O1xuICAgIH07XG4gIH1cblxuICB2YXIgcmdiQmFzaXMgPSByZ2JTcGxpbmUoYmFzaXMkMSk7XG4gIHZhciByZ2JCYXNpc0Nsb3NlZCA9IHJnYlNwbGluZShiYXNpc0Nsb3NlZCk7XG5cbiAgdmFyIGFycmF5JDEgPSBmdW5jdGlvbiBhcnJheSQxKGEsIGIpIHtcbiAgICB2YXIgbmIgPSBiID8gYi5sZW5ndGggOiAwLFxuICAgICAgICBuYSA9IGEgPyBNYXRoLm1pbihuYiwgYS5sZW5ndGgpIDogMCxcbiAgICAgICAgeCA9IG5ldyBBcnJheShuYiksXG4gICAgICAgIGMgPSBuZXcgQXJyYXkobmIpLFxuICAgICAgICBpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IG5hOyArK2kpIHtcbiAgICAgIHhbaV0gPSBpbnRlcnBvbGF0ZVZhbHVlKGFbaV0sIGJbaV0pO1xuICAgIH1mb3IgKDsgaSA8IG5iOyArK2kpIHtcbiAgICAgIGNbaV0gPSBiW2ldO1xuICAgIH1yZXR1cm4gZnVuY3Rpb24gKHQpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuYTsgKytpKSB7XG4gICAgICAgIGNbaV0gPSB4W2ldKHQpO1xuICAgICAgfXJldHVybiBjO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGRhdGUgPSBmdW5jdGlvbiBkYXRlKGEsIGIpIHtcbiAgICB2YXIgZCA9IG5ldyBEYXRlKCk7XG4gICAgcmV0dXJuIGEgPSArYSwgYiAtPSBhLCBmdW5jdGlvbiAodCkge1xuICAgICAgcmV0dXJuIGQuc2V0VGltZShhICsgYiAqIHQpLCBkO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIHJlaW50ZXJwb2xhdGUgPSBmdW5jdGlvbiByZWludGVycG9sYXRlKGEsIGIpIHtcbiAgICByZXR1cm4gYSA9ICthLCBiIC09IGEsIGZ1bmN0aW9uICh0KSB7XG4gICAgICByZXR1cm4gYSArIGIgKiB0O1xuICAgIH07XG4gIH07XG5cbiAgdmFyIG9iamVjdCA9IGZ1bmN0aW9uIG9iamVjdChhLCBiKSB7XG4gICAgdmFyIGkgPSB7fSxcbiAgICAgICAgYyA9IHt9LFxuICAgICAgICBrO1xuXG4gICAgaWYgKGEgPT09IG51bGwgfHwgKHR5cGVvZiBhID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihhKSkgIT09IFwib2JqZWN0XCIpIGEgPSB7fTtcbiAgICBpZiAoYiA9PT0gbnVsbCB8fCAodHlwZW9mIGIgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGIpKSAhPT0gXCJvYmplY3RcIikgYiA9IHt9O1xuXG4gICAgZm9yIChrIGluIGIpIHtcbiAgICAgIGlmIChrIGluIGEpIHtcbiAgICAgICAgaVtrXSA9IGludGVycG9sYXRlVmFsdWUoYVtrXSwgYltrXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjW2tdID0gYltrXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKHQpIHtcbiAgICAgIGZvciAoayBpbiBpKSB7XG4gICAgICAgIGNba10gPSBpW2tdKHQpO1xuICAgICAgfXJldHVybiBjO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIHJlQSA9IC9bLStdPyg/OlxcZCtcXC4/XFxkKnxcXC4/XFxkKykoPzpbZUVdWy0rXT9cXGQrKT8vZztcbiAgdmFyIHJlQiA9IG5ldyBSZWdFeHAocmVBLnNvdXJjZSwgXCJnXCIpO1xuXG4gIGZ1bmN0aW9uIHplcm8oYikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gYjtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gb25lKGIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHQpIHtcbiAgICAgIHJldHVybiBiKHQpICsgXCJcIjtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGludGVycG9sYXRlU3RyaW5nID0gZnVuY3Rpb24gaW50ZXJwb2xhdGVTdHJpbmcoYSwgYikge1xuICAgIHZhciBiaSA9IHJlQS5sYXN0SW5kZXggPSByZUIubGFzdEluZGV4ID0gMCxcbiAgICAgICAgLy8gc2NhbiBpbmRleCBmb3IgbmV4dCBudW1iZXIgaW4gYlxuICAgIGFtLFxuICAgICAgICAvLyBjdXJyZW50IG1hdGNoIGluIGFcbiAgICBibSxcbiAgICAgICAgLy8gY3VycmVudCBtYXRjaCBpbiBiXG4gICAgYnMsXG4gICAgICAgIC8vIHN0cmluZyBwcmVjZWRpbmcgY3VycmVudCBudW1iZXIgaW4gYiwgaWYgYW55XG4gICAgaSA9IC0xLFxuICAgICAgICAvLyBpbmRleCBpbiBzXG4gICAgcyA9IFtdLFxuICAgICAgICAvLyBzdHJpbmcgY29uc3RhbnRzIGFuZCBwbGFjZWhvbGRlcnNcbiAgICBxID0gW107IC8vIG51bWJlciBpbnRlcnBvbGF0b3JzXG5cbiAgICAvLyBDb2VyY2UgaW5wdXRzIHRvIHN0cmluZ3MuXG4gICAgYSA9IGEgKyBcIlwiLCBiID0gYiArIFwiXCI7XG5cbiAgICAvLyBJbnRlcnBvbGF0ZSBwYWlycyBvZiBudW1iZXJzIGluIGEgJiBiLlxuICAgIHdoaWxlICgoYW0gPSByZUEuZXhlYyhhKSkgJiYgKGJtID0gcmVCLmV4ZWMoYikpKSB7XG4gICAgICBpZiAoKGJzID0gYm0uaW5kZXgpID4gYmkpIHtcbiAgICAgICAgLy8gYSBzdHJpbmcgcHJlY2VkZXMgdGhlIG5leHQgbnVtYmVyIGluIGJcbiAgICAgICAgYnMgPSBiLnNsaWNlKGJpLCBicyk7XG4gICAgICAgIGlmIChzW2ldKSBzW2ldICs9IGJzOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xuICAgICAgICBlbHNlIHNbKytpXSA9IGJzO1xuICAgICAgfVxuICAgICAgaWYgKChhbSA9IGFtWzBdKSA9PT0gKGJtID0gYm1bMF0pKSB7XG4gICAgICAgIC8vIG51bWJlcnMgaW4gYSAmIGIgbWF0Y2hcbiAgICAgICAgaWYgKHNbaV0pIHNbaV0gKz0gYm07IC8vIGNvYWxlc2NlIHdpdGggcHJldmlvdXMgc3RyaW5nXG4gICAgICAgIGVsc2Ugc1srK2ldID0gYm07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBpbnRlcnBvbGF0ZSBub24tbWF0Y2hpbmcgbnVtYmVyc1xuICAgICAgICBzWysraV0gPSBudWxsO1xuICAgICAgICBxLnB1c2goeyBpOiBpLCB4OiByZWludGVycG9sYXRlKGFtLCBibSkgfSk7XG4gICAgICB9XG4gICAgICBiaSA9IHJlQi5sYXN0SW5kZXg7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlbWFpbnMgb2YgYi5cbiAgICBpZiAoYmkgPCBiLmxlbmd0aCkge1xuICAgICAgYnMgPSBiLnNsaWNlKGJpKTtcbiAgICAgIGlmIChzW2ldKSBzW2ldICs9IGJzOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xuICAgICAgZWxzZSBzWysraV0gPSBicztcbiAgICB9XG5cbiAgICAvLyBTcGVjaWFsIG9wdGltaXphdGlvbiBmb3Igb25seSBhIHNpbmdsZSBtYXRjaC5cbiAgICAvLyBPdGhlcndpc2UsIGludGVycG9sYXRlIGVhY2ggb2YgdGhlIG51bWJlcnMgYW5kIHJlam9pbiB0aGUgc3RyaW5nLlxuICAgIHJldHVybiBzLmxlbmd0aCA8IDIgPyBxWzBdID8gb25lKHFbMF0ueCkgOiB6ZXJvKGIpIDogKGIgPSBxLmxlbmd0aCwgZnVuY3Rpb24gKHQpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBvOyBpIDwgYjsgKytpKSB7XG4gICAgICAgIHNbKG8gPSBxW2ldKS5pXSA9IG8ueCh0KTtcbiAgICAgIH1yZXR1cm4gcy5qb2luKFwiXCIpO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBpbnRlcnBvbGF0ZVZhbHVlID0gZnVuY3Rpb24gaW50ZXJwb2xhdGVWYWx1ZShhLCBiKSB7XG4gICAgdmFyIHQgPSB0eXBlb2YgYiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoYiksXG4gICAgICAgIGM7XG4gICAgcmV0dXJuIGIgPT0gbnVsbCB8fCB0ID09PSBcImJvb2xlYW5cIiA/IGNvbnN0YW50JDMoYikgOiAodCA9PT0gXCJudW1iZXJcIiA/IHJlaW50ZXJwb2xhdGUgOiB0ID09PSBcInN0cmluZ1wiID8gKGMgPSBjb2xvcihiKSkgPyAoYiA9IGMsIGludGVycG9sYXRlUmdiKSA6IGludGVycG9sYXRlU3RyaW5nIDogYiBpbnN0YW5jZW9mIGNvbG9yID8gaW50ZXJwb2xhdGVSZ2IgOiBiIGluc3RhbmNlb2YgRGF0ZSA/IGRhdGUgOiBBcnJheS5pc0FycmF5KGIpID8gYXJyYXkkMSA6IHR5cGVvZiBiLnZhbHVlT2YgIT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgYi50b1N0cmluZyAhPT0gXCJmdW5jdGlvblwiIHx8IGlzTmFOKGIpID8gb2JqZWN0IDogcmVpbnRlcnBvbGF0ZSkoYSwgYik7XG4gIH07XG5cbiAgdmFyIGludGVycG9sYXRlUm91bmQgPSBmdW5jdGlvbiBpbnRlcnBvbGF0ZVJvdW5kKGEsIGIpIHtcbiAgICByZXR1cm4gYSA9ICthLCBiIC09IGEsIGZ1bmN0aW9uICh0KSB7XG4gICAgICByZXR1cm4gTWF0aC5yb3VuZChhICsgYiAqIHQpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGRlZ3JlZXMgPSAxODAgLyBNYXRoLlBJO1xuXG4gIHZhciBpZGVudGl0eSQyID0ge1xuICAgIHRyYW5zbGF0ZVg6IDAsXG4gICAgdHJhbnNsYXRlWTogMCxcbiAgICByb3RhdGU6IDAsXG4gICAgc2tld1g6IDAsXG4gICAgc2NhbGVYOiAxLFxuICAgIHNjYWxlWTogMVxuICB9O1xuXG4gIHZhciBkZWNvbXBvc2UgPSBmdW5jdGlvbiBkZWNvbXBvc2UoYSwgYiwgYywgZCwgZSwgZikge1xuICAgIHZhciBzY2FsZVgsIHNjYWxlWSwgc2tld1g7XG4gICAgaWYgKHNjYWxlWCA9IE1hdGguc3FydChhICogYSArIGIgKiBiKSkgYSAvPSBzY2FsZVgsIGIgLz0gc2NhbGVYO1xuICAgIGlmIChza2V3WCA9IGEgKiBjICsgYiAqIGQpIGMgLT0gYSAqIHNrZXdYLCBkIC09IGIgKiBza2V3WDtcbiAgICBpZiAoc2NhbGVZID0gTWF0aC5zcXJ0KGMgKiBjICsgZCAqIGQpKSBjIC89IHNjYWxlWSwgZCAvPSBzY2FsZVksIHNrZXdYIC89IHNjYWxlWTtcbiAgICBpZiAoYSAqIGQgPCBiICogYykgYSA9IC1hLCBiID0gLWIsIHNrZXdYID0gLXNrZXdYLCBzY2FsZVggPSAtc2NhbGVYO1xuICAgIHJldHVybiB7XG4gICAgICB0cmFuc2xhdGVYOiBlLFxuICAgICAgdHJhbnNsYXRlWTogZixcbiAgICAgIHJvdGF0ZTogTWF0aC5hdGFuMihiLCBhKSAqIGRlZ3JlZXMsXG4gICAgICBza2V3WDogTWF0aC5hdGFuKHNrZXdYKSAqIGRlZ3JlZXMsXG4gICAgICBzY2FsZVg6IHNjYWxlWCxcbiAgICAgIHNjYWxlWTogc2NhbGVZXG4gICAgfTtcbiAgfTtcblxuICB2YXIgY3NzTm9kZTtcbiAgdmFyIGNzc1Jvb3Q7XG4gIHZhciBjc3NWaWV3O1xuICB2YXIgc3ZnTm9kZTtcblxuICBmdW5jdGlvbiBwYXJzZUNzcyh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gXCJub25lXCIpIHJldHVybiBpZGVudGl0eSQyO1xuICAgIGlmICghY3NzTm9kZSkgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJESVZcIiksIGNzc1Jvb3QgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIGNzc1ZpZXcgPSBkb2N1bWVudC5kZWZhdWx0VmlldztcbiAgICBjc3NOb2RlLnN0eWxlLnRyYW5zZm9ybSA9IHZhbHVlO1xuICAgIHZhbHVlID0gY3NzVmlldy5nZXRDb21wdXRlZFN0eWxlKGNzc1Jvb3QuYXBwZW5kQ2hpbGQoY3NzTm9kZSksIG51bGwpLmdldFByb3BlcnR5VmFsdWUoXCJ0cmFuc2Zvcm1cIik7XG4gICAgY3NzUm9vdC5yZW1vdmVDaGlsZChjc3NOb2RlKTtcbiAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDcsIC0xKS5zcGxpdChcIixcIik7XG4gICAgcmV0dXJuIGRlY29tcG9zZSgrdmFsdWVbMF0sICt2YWx1ZVsxXSwgK3ZhbHVlWzJdLCArdmFsdWVbM10sICt2YWx1ZVs0XSwgK3ZhbHVlWzVdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlU3ZnKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiBpZGVudGl0eSQyO1xuICAgIGlmICghc3ZnTm9kZSkgc3ZnTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwiZ1wiKTtcbiAgICBzdmdOb2RlLnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCB2YWx1ZSk7XG4gICAgaWYgKCEodmFsdWUgPSBzdmdOb2RlLnRyYW5zZm9ybS5iYXNlVmFsLmNvbnNvbGlkYXRlKCkpKSByZXR1cm4gaWRlbnRpdHkkMjtcbiAgICB2YWx1ZSA9IHZhbHVlLm1hdHJpeDtcbiAgICByZXR1cm4gZGVjb21wb3NlKHZhbHVlLmEsIHZhbHVlLmIsIHZhbHVlLmMsIHZhbHVlLmQsIHZhbHVlLmUsIHZhbHVlLmYpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2UsIHB4Q29tbWEsIHB4UGFyZW4sIGRlZ1BhcmVuKSB7XG5cbiAgICBmdW5jdGlvbiBwb3Aocykge1xuICAgICAgcmV0dXJuIHMubGVuZ3RoID8gcy5wb3AoKSArIFwiIFwiIDogXCJcIjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0cmFuc2xhdGUoeGEsIHlhLCB4YiwgeWIsIHMsIHEpIHtcbiAgICAgIGlmICh4YSAhPT0geGIgfHwgeWEgIT09IHliKSB7XG4gICAgICAgIHZhciBpID0gcy5wdXNoKFwidHJhbnNsYXRlKFwiLCBudWxsLCBweENvbW1hLCBudWxsLCBweFBhcmVuKTtcbiAgICAgICAgcS5wdXNoKHsgaTogaSAtIDQsIHg6IHJlaW50ZXJwb2xhdGUoeGEsIHhiKSB9LCB7IGk6IGkgLSAyLCB4OiByZWludGVycG9sYXRlKHlhLCB5YikgfSk7XG4gICAgICB9IGVsc2UgaWYgKHhiIHx8IHliKSB7XG4gICAgICAgIHMucHVzaChcInRyYW5zbGF0ZShcIiArIHhiICsgcHhDb21tYSArIHliICsgcHhQYXJlbik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcm90YXRlKGEsIGIsIHMsIHEpIHtcbiAgICAgIGlmIChhICE9PSBiKSB7XG4gICAgICAgIGlmIChhIC0gYiA+IDE4MCkgYiArPSAzNjA7ZWxzZSBpZiAoYiAtIGEgPiAxODApIGEgKz0gMzYwOyAvLyBzaG9ydGVzdCBwYXRoXG4gICAgICAgIHEucHVzaCh7IGk6IHMucHVzaChwb3AocykgKyBcInJvdGF0ZShcIiwgbnVsbCwgZGVnUGFyZW4pIC0gMiwgeDogcmVpbnRlcnBvbGF0ZShhLCBiKSB9KTtcbiAgICAgIH0gZWxzZSBpZiAoYikge1xuICAgICAgICBzLnB1c2gocG9wKHMpICsgXCJyb3RhdGUoXCIgKyBiICsgZGVnUGFyZW4pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNrZXdYKGEsIGIsIHMsIHEpIHtcbiAgICAgIGlmIChhICE9PSBiKSB7XG4gICAgICAgIHEucHVzaCh7IGk6IHMucHVzaChwb3AocykgKyBcInNrZXdYKFwiLCBudWxsLCBkZWdQYXJlbikgLSAyLCB4OiByZWludGVycG9sYXRlKGEsIGIpIH0pO1xuICAgICAgfSBlbHNlIGlmIChiKSB7XG4gICAgICAgIHMucHVzaChwb3AocykgKyBcInNrZXdYKFwiICsgYiArIGRlZ1BhcmVuKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzY2FsZSh4YSwgeWEsIHhiLCB5YiwgcywgcSkge1xuICAgICAgaWYgKHhhICE9PSB4YiB8fCB5YSAhPT0geWIpIHtcbiAgICAgICAgdmFyIGkgPSBzLnB1c2gocG9wKHMpICsgXCJzY2FsZShcIiwgbnVsbCwgXCIsXCIsIG51bGwsIFwiKVwiKTtcbiAgICAgICAgcS5wdXNoKHsgaTogaSAtIDQsIHg6IHJlaW50ZXJwb2xhdGUoeGEsIHhiKSB9LCB7IGk6IGkgLSAyLCB4OiByZWludGVycG9sYXRlKHlhLCB5YikgfSk7XG4gICAgICB9IGVsc2UgaWYgKHhiICE9PSAxIHx8IHliICE9PSAxKSB7XG4gICAgICAgIHMucHVzaChwb3AocykgKyBcInNjYWxlKFwiICsgeGIgKyBcIixcIiArIHliICsgXCIpXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgdmFyIHMgPSBbXSxcbiAgICAgICAgICAvLyBzdHJpbmcgY29uc3RhbnRzIGFuZCBwbGFjZWhvbGRlcnNcbiAgICAgIHEgPSBbXTsgLy8gbnVtYmVyIGludGVycG9sYXRvcnNcbiAgICAgIGEgPSBwYXJzZShhKSwgYiA9IHBhcnNlKGIpO1xuICAgICAgdHJhbnNsYXRlKGEudHJhbnNsYXRlWCwgYS50cmFuc2xhdGVZLCBiLnRyYW5zbGF0ZVgsIGIudHJhbnNsYXRlWSwgcywgcSk7XG4gICAgICByb3RhdGUoYS5yb3RhdGUsIGIucm90YXRlLCBzLCBxKTtcbiAgICAgIHNrZXdYKGEuc2tld1gsIGIuc2tld1gsIHMsIHEpO1xuICAgICAgc2NhbGUoYS5zY2FsZVgsIGEuc2NhbGVZLCBiLnNjYWxlWCwgYi5zY2FsZVksIHMsIHEpO1xuICAgICAgYSA9IGIgPSBudWxsOyAvLyBnY1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHZhciBpID0gLTEsXG4gICAgICAgICAgICBuID0gcS5sZW5ndGgsXG4gICAgICAgICAgICBvO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICAgIHNbKG8gPSBxW2ldKS5pXSA9IG8ueCh0KTtcbiAgICAgICAgfXJldHVybiBzLmpvaW4oXCJcIik7XG4gICAgICB9O1xuICAgIH07XG4gIH1cblxuICB2YXIgaW50ZXJwb2xhdGVUcmFuc2Zvcm1Dc3MgPSBpbnRlcnBvbGF0ZVRyYW5zZm9ybShwYXJzZUNzcywgXCJweCwgXCIsIFwicHgpXCIsIFwiZGVnKVwiKTtcbiAgdmFyIGludGVycG9sYXRlVHJhbnNmb3JtU3ZnID0gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2VTdmcsIFwiLCBcIiwgXCIpXCIsIFwiKVwiKTtcblxuICB2YXIgcmhvID0gTWF0aC5TUVJUMjtcbiAgdmFyIHJobzIgPSAyO1xuICB2YXIgcmhvNCA9IDQ7XG4gIHZhciBlcHNpbG9uMiA9IDFlLTEyO1xuXG4gIGZ1bmN0aW9uIGNvc2goeCkge1xuICAgIHJldHVybiAoKHggPSBNYXRoLmV4cCh4KSkgKyAxIC8geCkgLyAyO1xuICB9XG5cbiAgZnVuY3Rpb24gc2luaCh4KSB7XG4gICAgcmV0dXJuICgoeCA9IE1hdGguZXhwKHgpKSAtIDEgLyB4KSAvIDI7XG4gIH1cblxuICBmdW5jdGlvbiB0YW5oKHgpIHtcbiAgICByZXR1cm4gKCh4ID0gTWF0aC5leHAoMiAqIHgpKSAtIDEpIC8gKHggKyAxKTtcbiAgfVxuXG4gIC8vIHAwID0gW3V4MCwgdXkwLCB3MF1cbiAgLy8gcDEgPSBbdXgxLCB1eTEsIHcxXVxuICB2YXIgaW50ZXJwb2xhdGVab29tID0gZnVuY3Rpb24gaW50ZXJwb2xhdGVab29tKHAwLCBwMSkge1xuICAgIHZhciB1eDAgPSBwMFswXSxcbiAgICAgICAgdXkwID0gcDBbMV0sXG4gICAgICAgIHcwID0gcDBbMl0sXG4gICAgICAgIHV4MSA9IHAxWzBdLFxuICAgICAgICB1eTEgPSBwMVsxXSxcbiAgICAgICAgdzEgPSBwMVsyXSxcbiAgICAgICAgZHggPSB1eDEgLSB1eDAsXG4gICAgICAgIGR5ID0gdXkxIC0gdXkwLFxuICAgICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5LFxuICAgICAgICBpLFxuICAgICAgICBTO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIGZvciB1MCDiiYUgdTEuXG4gICAgaWYgKGQyIDwgZXBzaWxvbjIpIHtcbiAgICAgIFMgPSBNYXRoLmxvZyh3MSAvIHcwKSAvIHJobztcbiAgICAgIGkgPSBmdW5jdGlvbiBpKHQpIHtcbiAgICAgICAgcmV0dXJuIFt1eDAgKyB0ICogZHgsIHV5MCArIHQgKiBkeSwgdzAgKiBNYXRoLmV4cChyaG8gKiB0ICogUyldO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBHZW5lcmFsIGNhc2UuXG4gICAgZWxzZSB7XG4gICAgICAgIHZhciBkMSA9IE1hdGguc3FydChkMiksXG4gICAgICAgICAgICBiMCA9ICh3MSAqIHcxIC0gdzAgKiB3MCArIHJobzQgKiBkMikgLyAoMiAqIHcwICogcmhvMiAqIGQxKSxcbiAgICAgICAgICAgIGIxID0gKHcxICogdzEgLSB3MCAqIHcwIC0gcmhvNCAqIGQyKSAvICgyICogdzEgKiByaG8yICogZDEpLFxuICAgICAgICAgICAgcjAgPSBNYXRoLmxvZyhNYXRoLnNxcnQoYjAgKiBiMCArIDEpIC0gYjApLFxuICAgICAgICAgICAgcjEgPSBNYXRoLmxvZyhNYXRoLnNxcnQoYjEgKiBiMSArIDEpIC0gYjEpO1xuICAgICAgICBTID0gKHIxIC0gcjApIC8gcmhvO1xuICAgICAgICBpID0gZnVuY3Rpb24gaSh0KSB7XG4gICAgICAgICAgdmFyIHMgPSB0ICogUyxcbiAgICAgICAgICAgICAgY29zaHIwID0gY29zaChyMCksXG4gICAgICAgICAgICAgIHUgPSB3MCAvIChyaG8yICogZDEpICogKGNvc2hyMCAqIHRhbmgocmhvICogcyArIHIwKSAtIHNpbmgocjApKTtcbiAgICAgICAgICByZXR1cm4gW3V4MCArIHUgKiBkeCwgdXkwICsgdSAqIGR5LCB3MCAqIGNvc2hyMCAvIGNvc2gocmhvICogcyArIHIwKV07XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICBpLmR1cmF0aW9uID0gUyAqIDEwMDA7XG5cbiAgICByZXR1cm4gaTtcbiAgfTtcblxuICBmdW5jdGlvbiBoc2wkMShodWUkJDEpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBoID0gaHVlJCQxKChzdGFydCA9IGhzbChzdGFydCkpLmgsIChlbmQgPSBoc2woZW5kKSkuaCksXG4gICAgICAgICAgcyA9IG5vZ2FtbWEoc3RhcnQucywgZW5kLnMpLFxuICAgICAgICAgIGwgPSBub2dhbW1hKHN0YXJ0LmwsIGVuZC5sKSxcbiAgICAgICAgICBvcGFjaXR5ID0gbm9nYW1tYShzdGFydC5vcGFjaXR5LCBlbmQub3BhY2l0eSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgc3RhcnQuaCA9IGgodCk7XG4gICAgICAgIHN0YXJ0LnMgPSBzKHQpO1xuICAgICAgICBzdGFydC5sID0gbCh0KTtcbiAgICAgICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XG4gICAgICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gICAgICB9O1xuICAgIH07XG4gIH1cblxuICB2YXIgaHNsJDIgPSBoc2wkMShodWUpO1xuICB2YXIgaHNsTG9uZyA9IGhzbCQxKG5vZ2FtbWEpO1xuXG4gIGZ1bmN0aW9uIGxhYiQxKHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgbCA9IG5vZ2FtbWEoKHN0YXJ0ID0gbGFiKHN0YXJ0KSkubCwgKGVuZCA9IGxhYihlbmQpKS5sKSxcbiAgICAgICAgYSA9IG5vZ2FtbWEoc3RhcnQuYSwgZW5kLmEpLFxuICAgICAgICBiID0gbm9nYW1tYShzdGFydC5iLCBlbmQuYiksXG4gICAgICAgIG9wYWNpdHkgPSBub2dhbW1hKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHQpIHtcbiAgICAgIHN0YXJ0LmwgPSBsKHQpO1xuICAgICAgc3RhcnQuYSA9IGEodCk7XG4gICAgICBzdGFydC5iID0gYih0KTtcbiAgICAgIHN0YXJ0Lm9wYWNpdHkgPSBvcGFjaXR5KHQpO1xuICAgICAgcmV0dXJuIHN0YXJ0ICsgXCJcIjtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gaGNsJDEoaHVlJCQxKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgaCA9IGh1ZSQkMSgoc3RhcnQgPSBoY2woc3RhcnQpKS5oLCAoZW5kID0gaGNsKGVuZCkpLmgpLFxuICAgICAgICAgIGMgPSBub2dhbW1hKHN0YXJ0LmMsIGVuZC5jKSxcbiAgICAgICAgICBsID0gbm9nYW1tYShzdGFydC5sLCBlbmQubCksXG4gICAgICAgICAgb3BhY2l0eSA9IG5vZ2FtbWEoc3RhcnQub3BhY2l0eSwgZW5kLm9wYWNpdHkpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHN0YXJ0LmggPSBoKHQpO1xuICAgICAgICBzdGFydC5jID0gYyh0KTtcbiAgICAgICAgc3RhcnQubCA9IGwodCk7XG4gICAgICAgIHN0YXJ0Lm9wYWNpdHkgPSBvcGFjaXR5KHQpO1xuICAgICAgICByZXR1cm4gc3RhcnQgKyBcIlwiO1xuICAgICAgfTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGhjbCQyID0gaGNsJDEoaHVlKTtcbiAgdmFyIGhjbExvbmcgPSBoY2wkMShub2dhbW1hKTtcblxuICBmdW5jdGlvbiBjdWJlaGVsaXgkMShodWUkJDEpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gY3ViZWhlbGl4R2FtbWEoeSkge1xuICAgICAgeSA9ICt5O1xuXG4gICAgICBmdW5jdGlvbiBjdWJlaGVsaXgkJDEoc3RhcnQsIGVuZCkge1xuICAgICAgICB2YXIgaCA9IGh1ZSQkMSgoc3RhcnQgPSBjdWJlaGVsaXgoc3RhcnQpKS5oLCAoZW5kID0gY3ViZWhlbGl4KGVuZCkpLmgpLFxuICAgICAgICAgICAgcyA9IG5vZ2FtbWEoc3RhcnQucywgZW5kLnMpLFxuICAgICAgICAgICAgbCA9IG5vZ2FtbWEoc3RhcnQubCwgZW5kLmwpLFxuICAgICAgICAgICAgb3BhY2l0eSA9IG5vZ2FtbWEoc3RhcnQub3BhY2l0eSwgZW5kLm9wYWNpdHkpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICBzdGFydC5oID0gaCh0KTtcbiAgICAgICAgICBzdGFydC5zID0gcyh0KTtcbiAgICAgICAgICBzdGFydC5sID0gbChNYXRoLnBvdyh0LCB5KSk7XG4gICAgICAgICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XG4gICAgICAgICAgcmV0dXJuIHN0YXJ0ICsgXCJcIjtcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgY3ViZWhlbGl4JCQxLmdhbW1hID0gY3ViZWhlbGl4R2FtbWE7XG5cbiAgICAgIHJldHVybiBjdWJlaGVsaXgkJDE7XG4gICAgfSgxKTtcbiAgfVxuXG4gIHZhciBjdWJlaGVsaXgkMiA9IGN1YmVoZWxpeCQxKGh1ZSk7XG4gIHZhciBjdWJlaGVsaXhMb25nID0gY3ViZWhlbGl4JDEobm9nYW1tYSk7XG5cbiAgdmFyIHF1YW50aXplID0gZnVuY3Rpb24gcXVhbnRpemUoaW50ZXJwb2xhdG9yLCBuKSB7XG4gICAgdmFyIHNhbXBsZXMgPSBuZXcgQXJyYXkobik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIHNhbXBsZXNbaV0gPSBpbnRlcnBvbGF0b3IoaSAvIChuIC0gMSkpO1xuICAgIH1yZXR1cm4gc2FtcGxlcztcbiAgfTtcblxuICB2YXIgZnJhbWUgPSAwO1xuICB2YXIgdGltZW91dCA9IDA7XG4gIHZhciBpbnRlcnZhbCA9IDA7XG4gIHZhciBwb2tlRGVsYXkgPSAxMDAwO1xuICB2YXIgdGFza0hlYWQ7XG4gIHZhciB0YXNrVGFpbDtcbiAgdmFyIGNsb2NrTGFzdCA9IDA7XG4gIHZhciBjbG9ja05vdyA9IDA7XG4gIHZhciBjbG9ja1NrZXcgPSAwO1xuICB2YXIgY2xvY2sgPSAodHlwZW9mIHBlcmZvcm1hbmNlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwZXJmb3JtYW5jZSkpID09PSBcIm9iamVjdFwiICYmIHBlcmZvcm1hbmNlLm5vdyA/IHBlcmZvcm1hbmNlIDogRGF0ZTtcbiAgdmFyIHNldEZyYW1lID0gKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHdpbmRvdykpID09PSBcIm9iamVjdFwiICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQod2luZG93KSA6IGZ1bmN0aW9uIChmKSB7XG4gICAgc2V0VGltZW91dChmLCAxNyk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbm93KCkge1xuICAgIHJldHVybiBjbG9ja05vdyB8fCAoc2V0RnJhbWUoY2xlYXJOb3cpLCBjbG9ja05vdyA9IGNsb2NrLm5vdygpICsgY2xvY2tTa2V3KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsZWFyTm93KCkge1xuICAgIGNsb2NrTm93ID0gMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIFRpbWVyKCkge1xuICAgIHRoaXMuX2NhbGwgPSB0aGlzLl90aW1lID0gdGhpcy5fbmV4dCA9IG51bGw7XG4gIH1cblxuICBUaW1lci5wcm90b3R5cGUgPSB0aW1lci5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IFRpbWVyLFxuICAgIHJlc3RhcnQ6IGZ1bmN0aW9uIHJlc3RhcnQoY2FsbGJhY2ssIGRlbGF5LCB0aW1lKSB7XG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJjYWxsYmFjayBpcyBub3QgYSBmdW5jdGlvblwiKTtcbiAgICAgIHRpbWUgPSAodGltZSA9PSBudWxsID8gbm93KCkgOiArdGltZSkgKyAoZGVsYXkgPT0gbnVsbCA/IDAgOiArZGVsYXkpO1xuICAgICAgaWYgKCF0aGlzLl9uZXh0ICYmIHRhc2tUYWlsICE9PSB0aGlzKSB7XG4gICAgICAgIGlmICh0YXNrVGFpbCkgdGFza1RhaWwuX25leHQgPSB0aGlzO2Vsc2UgdGFza0hlYWQgPSB0aGlzO1xuICAgICAgICB0YXNrVGFpbCA9IHRoaXM7XG4gICAgICB9XG4gICAgICB0aGlzLl9jYWxsID0gY2FsbGJhY2s7XG4gICAgICB0aGlzLl90aW1lID0gdGltZTtcbiAgICAgIHNsZWVwKCk7XG4gICAgfSxcbiAgICBzdG9wOiBmdW5jdGlvbiBzdG9wKCkge1xuICAgICAgaWYgKHRoaXMuX2NhbGwpIHtcbiAgICAgICAgdGhpcy5fY2FsbCA9IG51bGw7XG4gICAgICAgIHRoaXMuX3RpbWUgPSBJbmZpbml0eTtcbiAgICAgICAgc2xlZXAoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gdGltZXIoY2FsbGJhY2ssIGRlbGF5LCB0aW1lKSB7XG4gICAgdmFyIHQgPSBuZXcgVGltZXIoKTtcbiAgICB0LnJlc3RhcnQoY2FsbGJhY2ssIGRlbGF5LCB0aW1lKTtcbiAgICByZXR1cm4gdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRpbWVyRmx1c2goKSB7XG4gICAgbm93KCk7IC8vIEdldCB0aGUgY3VycmVudCB0aW1lLCBpZiBub3QgYWxyZWFkeSBzZXQuXG4gICAgKytmcmFtZTsgLy8gUHJldGVuZCB3ZeKAmXZlIHNldCBhbiBhbGFybSwgaWYgd2UgaGF2ZW7igJl0IGFscmVhZHkuXG4gICAgdmFyIHQgPSB0YXNrSGVhZCxcbiAgICAgICAgZTtcbiAgICB3aGlsZSAodCkge1xuICAgICAgaWYgKChlID0gY2xvY2tOb3cgLSB0Ll90aW1lKSA+PSAwKSB0Ll9jYWxsLmNhbGwobnVsbCwgZSk7XG4gICAgICB0ID0gdC5fbmV4dDtcbiAgICB9XG4gICAgLS1mcmFtZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdha2UoKSB7XG4gICAgY2xvY2tOb3cgPSAoY2xvY2tMYXN0ID0gY2xvY2subm93KCkpICsgY2xvY2tTa2V3O1xuICAgIGZyYW1lID0gdGltZW91dCA9IDA7XG4gICAgdHJ5IHtcbiAgICAgIHRpbWVyRmx1c2goKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgZnJhbWUgPSAwO1xuICAgICAgbmFwKCk7XG4gICAgICBjbG9ja05vdyA9IDA7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcG9rZSgpIHtcbiAgICB2YXIgbm93ID0gY2xvY2subm93KCksXG4gICAgICAgIGRlbGF5ID0gbm93IC0gY2xvY2tMYXN0O1xuICAgIGlmIChkZWxheSA+IHBva2VEZWxheSkgY2xvY2tTa2V3IC09IGRlbGF5LCBjbG9ja0xhc3QgPSBub3c7XG4gIH1cblxuICBmdW5jdGlvbiBuYXAoKSB7XG4gICAgdmFyIHQwLFxuICAgICAgICB0MSA9IHRhc2tIZWFkLFxuICAgICAgICB0MixcbiAgICAgICAgdGltZSA9IEluZmluaXR5O1xuICAgIHdoaWxlICh0MSkge1xuICAgICAgaWYgKHQxLl9jYWxsKSB7XG4gICAgICAgIGlmICh0aW1lID4gdDEuX3RpbWUpIHRpbWUgPSB0MS5fdGltZTtcbiAgICAgICAgdDAgPSB0MSwgdDEgPSB0MS5fbmV4dDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHQyID0gdDEuX25leHQsIHQxLl9uZXh0ID0gbnVsbDtcbiAgICAgICAgdDEgPSB0MCA/IHQwLl9uZXh0ID0gdDIgOiB0YXNrSGVhZCA9IHQyO1xuICAgICAgfVxuICAgIH1cbiAgICB0YXNrVGFpbCA9IHQwO1xuICAgIHNsZWVwKHRpbWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2xlZXAodGltZSkge1xuICAgIGlmIChmcmFtZSkgcmV0dXJuOyAvLyBTb29uZXN0IGFsYXJtIGFscmVhZHkgc2V0LCBvciB3aWxsIGJlLlxuICAgIGlmICh0aW1lb3V0KSB0aW1lb3V0ID0gY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgIHZhciBkZWxheSA9IHRpbWUgLSBjbG9ja05vdztcbiAgICBpZiAoZGVsYXkgPiAyNCkge1xuICAgICAgaWYgKHRpbWUgPCBJbmZpbml0eSkgdGltZW91dCA9IHNldFRpbWVvdXQod2FrZSwgZGVsYXkpO1xuICAgICAgaWYgKGludGVydmFsKSBpbnRlcnZhbCA9IGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWludGVydmFsKSBjbG9ja0xhc3QgPSBjbG9ja05vdywgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChwb2tlLCBwb2tlRGVsYXkpO1xuICAgICAgZnJhbWUgPSAxLCBzZXRGcmFtZSh3YWtlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgdGltZW91dCQxID0gZnVuY3Rpb24gdGltZW91dCQxKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICAgIHZhciB0ID0gbmV3IFRpbWVyKCk7XG4gICAgZGVsYXkgPSBkZWxheSA9PSBudWxsID8gMCA6ICtkZWxheTtcbiAgICB0LnJlc3RhcnQoZnVuY3Rpb24gKGVsYXBzZWQpIHtcbiAgICAgIHQuc3RvcCgpO1xuICAgICAgY2FsbGJhY2soZWxhcHNlZCArIGRlbGF5KTtcbiAgICB9LCBkZWxheSwgdGltZSk7XG4gICAgcmV0dXJuIHQ7XG4gIH07XG5cbiAgdmFyIGludGVydmFsJDEgPSBmdW5jdGlvbiBpbnRlcnZhbCQxKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICAgIHZhciB0ID0gbmV3IFRpbWVyKCksXG4gICAgICAgIHRvdGFsID0gZGVsYXk7XG4gICAgaWYgKGRlbGF5ID09IG51bGwpIHJldHVybiB0LnJlc3RhcnQoY2FsbGJhY2ssIGRlbGF5LCB0aW1lKSwgdDtcbiAgICBkZWxheSA9ICtkZWxheSwgdGltZSA9IHRpbWUgPT0gbnVsbCA/IG5vdygpIDogK3RpbWU7XG4gICAgdC5yZXN0YXJ0KGZ1bmN0aW9uIHRpY2soZWxhcHNlZCkge1xuICAgICAgZWxhcHNlZCArPSB0b3RhbDtcbiAgICAgIHQucmVzdGFydCh0aWNrLCB0b3RhbCArPSBkZWxheSwgdGltZSk7XG4gICAgICBjYWxsYmFjayhlbGFwc2VkKTtcbiAgICB9LCBkZWxheSwgdGltZSk7XG4gICAgcmV0dXJuIHQ7XG4gIH07XG5cbiAgdmFyIGVtcHR5T24gPSBkaXNwYXRjaChcInN0YXJ0XCIsIFwiZW5kXCIsIFwiaW50ZXJydXB0XCIpO1xuICB2YXIgZW1wdHlUd2VlbiA9IFtdO1xuXG4gIHZhciBDUkVBVEVEID0gMDtcbiAgdmFyIFNDSEVEVUxFRCA9IDE7XG4gIHZhciBTVEFSVElORyA9IDI7XG4gIHZhciBTVEFSVEVEID0gMztcbiAgdmFyIFJVTk5JTkcgPSA0O1xuICB2YXIgRU5ESU5HID0gNTtcbiAgdmFyIEVOREVEID0gNjtcblxuICB2YXIgc2NoZWR1bGUgPSBmdW5jdGlvbiBzY2hlZHVsZShub2RlLCBuYW1lLCBpZCwgaW5kZXgsIGdyb3VwLCB0aW1pbmcpIHtcbiAgICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb247XG4gICAgaWYgKCFzY2hlZHVsZXMpIG5vZGUuX190cmFuc2l0aW9uID0ge307ZWxzZSBpZiAoaWQgaW4gc2NoZWR1bGVzKSByZXR1cm47XG4gICAgY3JlYXRlKG5vZGUsIGlkLCB7XG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgaW5kZXg6IGluZGV4LCAvLyBGb3IgY29udGV4dCBkdXJpbmcgY2FsbGJhY2suXG4gICAgICBncm91cDogZ3JvdXAsIC8vIEZvciBjb250ZXh0IGR1cmluZyBjYWxsYmFjay5cbiAgICAgIG9uOiBlbXB0eU9uLFxuICAgICAgdHdlZW46IGVtcHR5VHdlZW4sXG4gICAgICB0aW1lOiB0aW1pbmcudGltZSxcbiAgICAgIGRlbGF5OiB0aW1pbmcuZGVsYXksXG4gICAgICBkdXJhdGlvbjogdGltaW5nLmR1cmF0aW9uLFxuICAgICAgZWFzZTogdGltaW5nLmVhc2UsXG4gICAgICB0aW1lcjogbnVsbCxcbiAgICAgIHN0YXRlOiBDUkVBVEVEXG4gICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gaW5pdChub2RlLCBpZCkge1xuICAgIHZhciBzY2hlZHVsZSA9IG5vZGUuX190cmFuc2l0aW9uO1xuICAgIGlmICghc2NoZWR1bGUgfHwgIShzY2hlZHVsZSA9IHNjaGVkdWxlW2lkXSkgfHwgc2NoZWR1bGUuc3RhdGUgPiBDUkVBVEVEKSB0aHJvdyBuZXcgRXJyb3IoXCJ0b28gbGF0ZVwiKTtcbiAgICByZXR1cm4gc2NoZWR1bGU7XG4gIH1cblxuICBmdW5jdGlvbiBzZXQkMShub2RlLCBpZCkge1xuICAgIHZhciBzY2hlZHVsZSA9IG5vZGUuX190cmFuc2l0aW9uO1xuICAgIGlmICghc2NoZWR1bGUgfHwgIShzY2hlZHVsZSA9IHNjaGVkdWxlW2lkXSkgfHwgc2NoZWR1bGUuc3RhdGUgPiBTVEFSVElORykgdGhyb3cgbmV3IEVycm9yKFwidG9vIGxhdGVcIik7XG4gICAgcmV0dXJuIHNjaGVkdWxlO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0JDEobm9kZSwgaWQpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgICBpZiAoIXNjaGVkdWxlIHx8ICEoc2NoZWR1bGUgPSBzY2hlZHVsZVtpZF0pKSB0aHJvdyBuZXcgRXJyb3IoXCJ0b28gbGF0ZVwiKTtcbiAgICByZXR1cm4gc2NoZWR1bGU7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGUobm9kZSwgaWQsIHNlbGYpIHtcbiAgICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb24sXG4gICAgICAgIHR3ZWVuO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSB0aGUgc2VsZiB0aW1lciB3aGVuIHRoZSB0cmFuc2l0aW9uIGlzIGNyZWF0ZWQuXG4gICAgLy8gTm90ZSB0aGUgYWN0dWFsIGRlbGF5IGlzIG5vdCBrbm93biB1bnRpbCB0aGUgZmlyc3QgY2FsbGJhY2shXG4gICAgc2NoZWR1bGVzW2lkXSA9IHNlbGY7XG4gICAgc2VsZi50aW1lciA9IHRpbWVyKHNjaGVkdWxlLCAwLCBzZWxmLnRpbWUpO1xuXG4gICAgZnVuY3Rpb24gc2NoZWR1bGUoZWxhcHNlZCkge1xuICAgICAgc2VsZi5zdGF0ZSA9IFNDSEVEVUxFRDtcbiAgICAgIHNlbGYudGltZXIucmVzdGFydChzdGFydCwgc2VsZi5kZWxheSwgc2VsZi50aW1lKTtcblxuICAgICAgLy8gSWYgdGhlIGVsYXBzZWQgZGVsYXkgaXMgbGVzcyB0aGFuIG91ciBmaXJzdCBzbGVlcCwgc3RhcnQgaW1tZWRpYXRlbHkuXG4gICAgICBpZiAoc2VsZi5kZWxheSA8PSBlbGFwc2VkKSBzdGFydChlbGFwc2VkIC0gc2VsZi5kZWxheSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3RhcnQoZWxhcHNlZCkge1xuICAgICAgdmFyIGksIGosIG4sIG87XG5cbiAgICAgIC8vIElmIHRoZSBzdGF0ZSBpcyBub3QgU0NIRURVTEVELCB0aGVuIHdlIHByZXZpb3VzbHkgZXJyb3JlZCBvbiBzdGFydC5cbiAgICAgIGlmIChzZWxmLnN0YXRlICE9PSBTQ0hFRFVMRUQpIHJldHVybiBzdG9wKCk7XG5cbiAgICAgIGZvciAoaSBpbiBzY2hlZHVsZXMpIHtcbiAgICAgICAgbyA9IHNjaGVkdWxlc1tpXTtcbiAgICAgICAgaWYgKG8ubmFtZSAhPT0gc2VsZi5uYW1lKSBjb250aW51ZTtcblxuICAgICAgICAvLyBXaGlsZSB0aGlzIGVsZW1lbnQgYWxyZWFkeSBoYXMgYSBzdGFydGluZyB0cmFuc2l0aW9uIGR1cmluZyB0aGlzIGZyYW1lLFxuICAgICAgICAvLyBkZWZlciBzdGFydGluZyBhbiBpbnRlcnJ1cHRpbmcgdHJhbnNpdGlvbiB1bnRpbCB0aGF0IHRyYW5zaXRpb24gaGFzIGFcbiAgICAgICAgLy8gY2hhbmNlIHRvIHRpY2sgKGFuZCBwb3NzaWJseSBlbmQpOyBzZWUgZDMvZDMtdHJhbnNpdGlvbiM1NCFcbiAgICAgICAgaWYgKG8uc3RhdGUgPT09IFNUQVJURUQpIHJldHVybiB0aW1lb3V0JDEoc3RhcnQpO1xuXG4gICAgICAgIC8vIEludGVycnVwdCB0aGUgYWN0aXZlIHRyYW5zaXRpb24sIGlmIGFueS5cbiAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGludGVycnVwdCBldmVudC5cbiAgICAgICAgaWYgKG8uc3RhdGUgPT09IFJVTk5JTkcpIHtcbiAgICAgICAgICBvLnN0YXRlID0gRU5ERUQ7XG4gICAgICAgICAgby50aW1lci5zdG9wKCk7XG4gICAgICAgICAgby5vbi5jYWxsKFwiaW50ZXJydXB0XCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIG8uaW5kZXgsIG8uZ3JvdXApO1xuICAgICAgICAgIGRlbGV0ZSBzY2hlZHVsZXNbaV07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDYW5jZWwgYW55IHByZS1lbXB0ZWQgdHJhbnNpdGlvbnMuIE5vIGludGVycnVwdCBldmVudCBpcyBkaXNwYXRjaGVkXG4gICAgICAgIC8vIGJlY2F1c2UgdGhlIGNhbmNlbGxlZCB0cmFuc2l0aW9ucyBuZXZlciBzdGFydGVkLiBOb3RlIHRoYXQgdGhpcyBhbHNvXG4gICAgICAgIC8vIHJlbW92ZXMgdGhpcyB0cmFuc2l0aW9uIGZyb20gdGhlIHBlbmRpbmcgbGlzdCFcbiAgICAgICAgZWxzZSBpZiAoK2kgPCBpZCkge1xuICAgICAgICAgICAgby5zdGF0ZSA9IEVOREVEO1xuICAgICAgICAgICAgby50aW1lci5zdG9wKCk7XG4gICAgICAgICAgICBkZWxldGUgc2NoZWR1bGVzW2ldO1xuICAgICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gRGVmZXIgdGhlIGZpcnN0IHRpY2sgdG8gZW5kIG9mIHRoZSBjdXJyZW50IGZyYW1lOyBzZWUgZDMvZDMjMTU3Ni5cbiAgICAgIC8vIE5vdGUgdGhlIHRyYW5zaXRpb24gbWF5IGJlIGNhbmNlbGVkIGFmdGVyIHN0YXJ0IGFuZCBiZWZvcmUgdGhlIGZpcnN0IHRpY2shXG4gICAgICAvLyBOb3RlIHRoaXMgbXVzdCBiZSBzY2hlZHVsZWQgYmVmb3JlIHRoZSBzdGFydCBldmVudDsgc2VlIGQzL2QzLXRyYW5zaXRpb24jMTYhXG4gICAgICAvLyBBc3N1bWluZyB0aGlzIGlzIHN1Y2Nlc3NmdWwsIHN1YnNlcXVlbnQgY2FsbGJhY2tzIGdvIHN0cmFpZ2h0IHRvIHRpY2suXG4gICAgICB0aW1lb3V0JDEoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoc2VsZi5zdGF0ZSA9PT0gU1RBUlRFRCkge1xuICAgICAgICAgIHNlbGYuc3RhdGUgPSBSVU5OSU5HO1xuICAgICAgICAgIHNlbGYudGltZXIucmVzdGFydCh0aWNrLCBzZWxmLmRlbGF5LCBzZWxmLnRpbWUpO1xuICAgICAgICAgIHRpY2soZWxhcHNlZCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBEaXNwYXRjaCB0aGUgc3RhcnQgZXZlbnQuXG4gICAgICAvLyBOb3RlIHRoaXMgbXVzdCBiZSBkb25lIGJlZm9yZSB0aGUgdHdlZW4gYXJlIGluaXRpYWxpemVkLlxuICAgICAgc2VsZi5zdGF0ZSA9IFNUQVJUSU5HO1xuICAgICAgc2VsZi5vbi5jYWxsKFwic3RhcnRcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgc2VsZi5pbmRleCwgc2VsZi5ncm91cCk7XG4gICAgICBpZiAoc2VsZi5zdGF0ZSAhPT0gU1RBUlRJTkcpIHJldHVybjsgLy8gaW50ZXJydXB0ZWRcbiAgICAgIHNlbGYuc3RhdGUgPSBTVEFSVEVEO1xuXG4gICAgICAvLyBJbml0aWFsaXplIHRoZSB0d2VlbiwgZGVsZXRpbmcgbnVsbCB0d2Vlbi5cbiAgICAgIHR3ZWVuID0gbmV3IEFycmF5KG4gPSBzZWxmLnR3ZWVuLmxlbmd0aCk7XG4gICAgICBmb3IgKGkgPSAwLCBqID0gLTE7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKG8gPSBzZWxmLnR3ZWVuW2ldLnZhbHVlLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgc2VsZi5pbmRleCwgc2VsZi5ncm91cCkpIHtcbiAgICAgICAgICB0d2VlblsrK2pdID0gbztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdHdlZW4ubGVuZ3RoID0gaiArIDE7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGljayhlbGFwc2VkKSB7XG4gICAgICB2YXIgdCA9IGVsYXBzZWQgPCBzZWxmLmR1cmF0aW9uID8gc2VsZi5lYXNlLmNhbGwobnVsbCwgZWxhcHNlZCAvIHNlbGYuZHVyYXRpb24pIDogKHNlbGYudGltZXIucmVzdGFydChzdG9wKSwgc2VsZi5zdGF0ZSA9IEVORElORywgMSksXG4gICAgICAgICAgaSA9IC0xLFxuICAgICAgICAgIG4gPSB0d2Vlbi5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIHR3ZWVuW2ldLmNhbGwobnVsbCwgdCk7XG4gICAgICB9XG5cbiAgICAgIC8vIERpc3BhdGNoIHRoZSBlbmQgZXZlbnQuXG4gICAgICBpZiAoc2VsZi5zdGF0ZSA9PT0gRU5ESU5HKSB7XG4gICAgICAgIHNlbGYub24uY2FsbChcImVuZFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBzZWxmLmluZGV4LCBzZWxmLmdyb3VwKTtcbiAgICAgICAgc3RvcCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICBzZWxmLnN0YXRlID0gRU5ERUQ7XG4gICAgICBzZWxmLnRpbWVyLnN0b3AoKTtcbiAgICAgIGRlbGV0ZSBzY2hlZHVsZXNbaWRdO1xuICAgICAgZm9yICh2YXIgaSBpbiBzY2hlZHVsZXMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICBkZWxldGUgbm9kZS5fX3RyYW5zaXRpb247XG4gICAgfVxuICB9XG5cbiAgdmFyIGludGVycnVwdCA9IGZ1bmN0aW9uIGludGVycnVwdChub2RlLCBuYW1lKSB7XG4gICAgdmFyIHNjaGVkdWxlcyA9IG5vZGUuX190cmFuc2l0aW9uLFxuICAgICAgICBzY2hlZHVsZSQkMSxcbiAgICAgICAgYWN0aXZlLFxuICAgICAgICBlbXB0eSA9IHRydWUsXG4gICAgICAgIGk7XG5cbiAgICBpZiAoIXNjaGVkdWxlcykgcmV0dXJuO1xuXG4gICAgbmFtZSA9IG5hbWUgPT0gbnVsbCA/IG51bGwgOiBuYW1lICsgXCJcIjtcblxuICAgIGZvciAoaSBpbiBzY2hlZHVsZXMpIHtcbiAgICAgIGlmICgoc2NoZWR1bGUkJDEgPSBzY2hlZHVsZXNbaV0pLm5hbWUgIT09IG5hbWUpIHtcbiAgICAgICAgZW1wdHkgPSBmYWxzZTtjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGFjdGl2ZSA9IHNjaGVkdWxlJCQxLnN0YXRlID4gU1RBUlRJTkcgJiYgc2NoZWR1bGUkJDEuc3RhdGUgPCBFTkRJTkc7XG4gICAgICBzY2hlZHVsZSQkMS5zdGF0ZSA9IEVOREVEO1xuICAgICAgc2NoZWR1bGUkJDEudGltZXIuc3RvcCgpO1xuICAgICAgaWYgKGFjdGl2ZSkgc2NoZWR1bGUkJDEub24uY2FsbChcImludGVycnVwdFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBzY2hlZHVsZSQkMS5pbmRleCwgc2NoZWR1bGUkJDEuZ3JvdXApO1xuICAgICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgICB9XG5cbiAgICBpZiAoZW1wdHkpIGRlbGV0ZSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgfTtcblxuICB2YXIgc2VsZWN0aW9uX2ludGVycnVwdCA9IGZ1bmN0aW9uIHNlbGVjdGlvbl9pbnRlcnJ1cHQobmFtZSkge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgaW50ZXJydXB0KHRoaXMsIG5hbWUpO1xuICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHR3ZWVuUmVtb3ZlKGlkLCBuYW1lKSB7XG4gICAgdmFyIHR3ZWVuMCwgdHdlZW4xO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc2NoZWR1bGUkJDEgPSBzZXQkMSh0aGlzLCBpZCksXG4gICAgICAgICAgdHdlZW4gPSBzY2hlZHVsZSQkMS50d2VlbjtcblxuICAgICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCB0d2VlbiB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIHR3ZWVuIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgICBpZiAodHdlZW4gIT09IHR3ZWVuMCkge1xuICAgICAgICB0d2VlbjEgPSB0d2VlbjAgPSB0d2VlbjtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSB0d2VlbjEubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgICAgaWYgKHR3ZWVuMVtpXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgICAgICB0d2VlbjEgPSB0d2VlbjEuc2xpY2UoKTtcbiAgICAgICAgICAgIHR3ZWVuMS5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc2NoZWR1bGUkJDEudHdlZW4gPSB0d2VlbjE7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHR3ZWVuRnVuY3Rpb24oaWQsIG5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIHR3ZWVuMCwgdHdlZW4xO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzY2hlZHVsZSQkMSA9IHNldCQxKHRoaXMsIGlkKSxcbiAgICAgICAgICB0d2VlbiA9IHNjaGVkdWxlJCQxLnR3ZWVuO1xuXG4gICAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIHR3ZWVuIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgdHdlZW4gYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cbiAgICAgIGlmICh0d2VlbiAhPT0gdHdlZW4wKSB7XG4gICAgICAgIHR3ZWVuMSA9ICh0d2VlbjAgPSB0d2Vlbikuc2xpY2UoKTtcbiAgICAgICAgZm9yICh2YXIgdCA9IHsgbmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlIH0sIGkgPSAwLCBuID0gdHdlZW4xLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICAgIGlmICh0d2VlbjFbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgICAgdHdlZW4xW2ldID0gdDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaSA9PT0gbikgdHdlZW4xLnB1c2godCk7XG4gICAgICB9XG5cbiAgICAgIHNjaGVkdWxlJCQxLnR3ZWVuID0gdHdlZW4xO1xuICAgIH07XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbl90d2VlbiA9IGZ1bmN0aW9uIHRyYW5zaXRpb25fdHdlZW4obmFtZSwgdmFsdWUpIHtcbiAgICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICAgIG5hbWUgKz0gXCJcIjtcblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgICAgdmFyIHR3ZWVuID0gZ2V0JDEodGhpcy5ub2RlKCksIGlkKS50d2VlbjtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gdHdlZW4ubGVuZ3RoLCB0OyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICgodCA9IHR3ZWVuW2ldKS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIHQudmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmVhY2goKHZhbHVlID09IG51bGwgPyB0d2VlblJlbW92ZSA6IHR3ZWVuRnVuY3Rpb24pKGlkLCBuYW1lLCB2YWx1ZSkpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHR3ZWVuVmFsdWUodHJhbnNpdGlvbiwgbmFtZSwgdmFsdWUpIHtcbiAgICB2YXIgaWQgPSB0cmFuc2l0aW9uLl9pZDtcblxuICAgIHRyYW5zaXRpb24uZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc2NoZWR1bGUkJDEgPSBzZXQkMSh0aGlzLCBpZCk7XG4gICAgICAoc2NoZWR1bGUkJDEudmFsdWUgfHwgKHNjaGVkdWxlJCQxLnZhbHVlID0ge30pKVtuYW1lXSA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHJldHVybiBnZXQkMShub2RlLCBpZCkudmFsdWVbbmFtZV07XG4gICAgfTtcbiAgfVxuXG4gIHZhciBpbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uIGludGVycG9sYXRlKGEsIGIpIHtcbiAgICB2YXIgYztcbiAgICByZXR1cm4gKHR5cGVvZiBiID09PSBcIm51bWJlclwiID8gcmVpbnRlcnBvbGF0ZSA6IGIgaW5zdGFuY2VvZiBjb2xvciA/IGludGVycG9sYXRlUmdiIDogKGMgPSBjb2xvcihiKSkgPyAoYiA9IGMsIGludGVycG9sYXRlUmdiKSA6IGludGVycG9sYXRlU3RyaW5nKShhLCBiKTtcbiAgfTtcblxuICBmdW5jdGlvbiBhdHRyUmVtb3ZlJDEobmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gYXR0clJlbW92ZU5TJDEoZnVsbG5hbWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBhdHRyQ29uc3RhbnQkMShuYW1lLCBpbnRlcnBvbGF0ZSQkMSwgdmFsdWUxKSB7XG4gICAgdmFyIHZhbHVlMDAsIGludGVycG9sYXRlMDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHZhbHVlMCA9IHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgICAgcmV0dXJuIHZhbHVlMCA9PT0gdmFsdWUxID8gbnVsbCA6IHZhbHVlMCA9PT0gdmFsdWUwMCA/IGludGVycG9sYXRlMCA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlJCQxKHZhbHVlMDAgPSB2YWx1ZTAsIHZhbHVlMSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGF0dHJDb25zdGFudE5TJDEoZnVsbG5hbWUsIGludGVycG9sYXRlJCQxLCB2YWx1ZTEpIHtcbiAgICB2YXIgdmFsdWUwMCwgaW50ZXJwb2xhdGUwO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdmFsdWUwID0gdGhpcy5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgICAgcmV0dXJuIHZhbHVlMCA9PT0gdmFsdWUxID8gbnVsbCA6IHZhbHVlMCA9PT0gdmFsdWUwMCA/IGludGVycG9sYXRlMCA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlJCQxKHZhbHVlMDAgPSB2YWx1ZTAsIHZhbHVlMSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGF0dHJGdW5jdGlvbiQxKG5hbWUsIGludGVycG9sYXRlJCQxLCB2YWx1ZSkge1xuICAgIHZhciB2YWx1ZTAwLCB2YWx1ZTEwLCBpbnRlcnBvbGF0ZTA7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB2YWx1ZTAsXG4gICAgICAgICAgdmFsdWUxID0gdmFsdWUodGhpcyk7XG4gICAgICBpZiAodmFsdWUxID09IG51bGwpIHJldHVybiB2b2lkIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgICAgdmFsdWUwID0gdGhpcy5nZXRBdHRyaWJ1dGUobmFtZSk7XG4gICAgICByZXR1cm4gdmFsdWUwID09PSB2YWx1ZTEgPyBudWxsIDogdmFsdWUwID09PSB2YWx1ZTAwICYmIHZhbHVlMSA9PT0gdmFsdWUxMCA/IGludGVycG9sYXRlMCA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlJCQxKHZhbHVlMDAgPSB2YWx1ZTAsIHZhbHVlMTAgPSB2YWx1ZTEpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBhdHRyRnVuY3Rpb25OUyQxKGZ1bGxuYW1lLCBpbnRlcnBvbGF0ZSQkMSwgdmFsdWUpIHtcbiAgICB2YXIgdmFsdWUwMCwgdmFsdWUxMCwgaW50ZXJwb2xhdGUwO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdmFsdWUwLFxuICAgICAgICAgIHZhbHVlMSA9IHZhbHVlKHRoaXMpO1xuICAgICAgaWYgKHZhbHVlMSA9PSBudWxsKSByZXR1cm4gdm9pZCB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgICB2YWx1ZTAgPSB0aGlzLmdldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgICByZXR1cm4gdmFsdWUwID09PSB2YWx1ZTEgPyBudWxsIDogdmFsdWUwID09PSB2YWx1ZTAwICYmIHZhbHVlMSA9PT0gdmFsdWUxMCA/IGludGVycG9sYXRlMCA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlJCQxKHZhbHVlMDAgPSB2YWx1ZTAsIHZhbHVlMTAgPSB2YWx1ZTEpO1xuICAgIH07XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbl9hdHRyID0gZnVuY3Rpb24gdHJhbnNpdGlvbl9hdHRyKG5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpLFxuICAgICAgICBpID0gZnVsbG5hbWUgPT09IFwidHJhbnNmb3JtXCIgPyBpbnRlcnBvbGF0ZVRyYW5zZm9ybVN2ZyA6IGludGVycG9sYXRlO1xuICAgIHJldHVybiB0aGlzLmF0dHJUd2VlbihuYW1lLCB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIiA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJGdW5jdGlvbk5TJDEgOiBhdHRyRnVuY3Rpb24kMSkoZnVsbG5hbWUsIGksIHR3ZWVuVmFsdWUodGhpcywgXCJhdHRyLlwiICsgbmFtZSwgdmFsdWUpKSA6IHZhbHVlID09IG51bGwgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyUmVtb3ZlTlMkMSA6IGF0dHJSZW1vdmUkMSkoZnVsbG5hbWUpIDogKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckNvbnN0YW50TlMkMSA6IGF0dHJDb25zdGFudCQxKShmdWxsbmFtZSwgaSwgdmFsdWUgKyBcIlwiKSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gYXR0clR3ZWVuTlMoZnVsbG5hbWUsIHZhbHVlKSB7XG4gICAgZnVuY3Rpb24gdHdlZW4oKSB7XG4gICAgICB2YXIgbm9kZSA9IHRoaXMsXG4gICAgICAgICAgaSA9IHZhbHVlLmFwcGx5KG5vZGUsIGFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gaSAmJiBmdW5jdGlvbiAodCkge1xuICAgICAgICBub2RlLnNldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCwgaSh0KSk7XG4gICAgICB9O1xuICAgIH1cbiAgICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgICByZXR1cm4gdHdlZW47XG4gIH1cblxuICBmdW5jdGlvbiBhdHRyVHdlZW4obmFtZSwgdmFsdWUpIHtcbiAgICBmdW5jdGlvbiB0d2VlbigpIHtcbiAgICAgIHZhciBub2RlID0gdGhpcyxcbiAgICAgICAgICBpID0gdmFsdWUuYXBwbHkobm9kZSwgYXJndW1lbnRzKTtcbiAgICAgIHJldHVybiBpICYmIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKG5hbWUsIGkodCkpO1xuICAgICAgfTtcbiAgICB9XG4gICAgdHdlZW4uX3ZhbHVlID0gdmFsdWU7XG4gICAgcmV0dXJuIHR3ZWVuO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25fYXR0clR3ZWVuID0gZnVuY3Rpb24gdHJhbnNpdGlvbl9hdHRyVHdlZW4obmFtZSwgdmFsdWUpIHtcbiAgICB2YXIga2V5ID0gXCJhdHRyLlwiICsgbmFtZTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHJldHVybiAoa2V5ID0gdGhpcy50d2VlbihrZXkpKSAmJiBrZXkuX3ZhbHVlO1xuICAgIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gdGhpcy50d2VlbihrZXksIG51bGwpO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpO1xuICAgIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgKGZ1bGxuYW1lLmxvY2FsID8gYXR0clR3ZWVuTlMgOiBhdHRyVHdlZW4pKGZ1bGxuYW1lLCB2YWx1ZSkpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGRlbGF5RnVuY3Rpb24oaWQsIHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGluaXQodGhpcywgaWQpLmRlbGF5ID0gK3ZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlbGF5Q29uc3RhbnQoaWQsIHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID0gK3ZhbHVlLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpbml0KHRoaXMsIGlkKS5kZWxheSA9IHZhbHVlO1xuICAgIH07XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbl9kZWxheSA9IGZ1bmN0aW9uIHRyYW5zaXRpb25fZGVsYXkodmFsdWUpIHtcbiAgICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy5lYWNoKCh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIiA/IGRlbGF5RnVuY3Rpb24gOiBkZWxheUNvbnN0YW50KShpZCwgdmFsdWUpKSA6IGdldCQxKHRoaXMubm9kZSgpLCBpZCkuZGVsYXk7XG4gIH07XG5cbiAgZnVuY3Rpb24gZHVyYXRpb25GdW5jdGlvbihpZCwgdmFsdWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgc2V0JDEodGhpcywgaWQpLmR1cmF0aW9uID0gK3ZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGR1cmF0aW9uQ29uc3RhbnQoaWQsIHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID0gK3ZhbHVlLCBmdW5jdGlvbiAoKSB7XG4gICAgICBzZXQkMSh0aGlzLCBpZCkuZHVyYXRpb24gPSB2YWx1ZTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25fZHVyYXRpb24gPSBmdW5jdGlvbiB0cmFuc2l0aW9uX2R1cmF0aW9uKHZhbHVlKSB7XG4gICAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyBkdXJhdGlvbkZ1bmN0aW9uIDogZHVyYXRpb25Db25zdGFudCkoaWQsIHZhbHVlKSkgOiBnZXQkMSh0aGlzLm5vZGUoKSwgaWQpLmR1cmF0aW9uO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGVhc2VDb25zdGFudChpZCwgdmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcigpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBzZXQkMSh0aGlzLCBpZCkuZWFzZSA9IHZhbHVlO1xuICAgIH07XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbl9lYXNlID0gZnVuY3Rpb24gdHJhbnNpdGlvbl9lYXNlKHZhbHVlKSB7XG4gICAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMuZWFjaChlYXNlQ29uc3RhbnQoaWQsIHZhbHVlKSkgOiBnZXQkMSh0aGlzLm5vZGUoKSwgaWQpLmVhc2U7XG4gIH07XG5cbiAgdmFyIHRyYW5zaXRpb25fZmlsdGVyID0gZnVuY3Rpb24gdHJhbnNpdGlvbl9maWx0ZXIobWF0Y2gpIHtcbiAgICBpZiAodHlwZW9mIG1hdGNoICE9PSBcImZ1bmN0aW9uXCIpIG1hdGNoID0gbWF0Y2hlciQxKG1hdGNoKTtcblxuICAgIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IFtdLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgbWF0Y2guY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpIHtcbiAgICAgICAgICBzdWJncm91cC5wdXNoKG5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cywgdGhpcy5fbmFtZSwgdGhpcy5faWQpO1xuICB9O1xuXG4gIHZhciB0cmFuc2l0aW9uX21lcmdlID0gZnVuY3Rpb24gdHJhbnNpdGlvbl9tZXJnZSh0cmFuc2l0aW9uJCQxKSB7XG4gICAgaWYgKHRyYW5zaXRpb24kJDEuX2lkICE9PSB0aGlzLl9pZCkgdGhyb3cgbmV3IEVycm9yKCk7XG5cbiAgICBmb3IgKHZhciBncm91cHMwID0gdGhpcy5fZ3JvdXBzLCBncm91cHMxID0gdHJhbnNpdGlvbiQkMS5fZ3JvdXBzLCBtMCA9IGdyb3VwczAubGVuZ3RoLCBtMSA9IGdyb3VwczEubGVuZ3RoLCBtID0gTWF0aC5taW4obTAsIG0xKSwgbWVyZ2VzID0gbmV3IEFycmF5KG0wKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICAgIGZvciAodmFyIGdyb3VwMCA9IGdyb3VwczBbal0sIGdyb3VwMSA9IGdyb3VwczFbal0sIG4gPSBncm91cDAubGVuZ3RoLCBtZXJnZSA9IG1lcmdlc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKG5vZGUgPSBncm91cDBbaV0gfHwgZ3JvdXAxW2ldKSB7XG4gICAgICAgICAgbWVyZ2VbaV0gPSBub2RlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICg7IGogPCBtMDsgKytqKSB7XG4gICAgICBtZXJnZXNbal0gPSBncm91cHMwW2pdO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgVHJhbnNpdGlvbihtZXJnZXMsIHRoaXMuX3BhcmVudHMsIHRoaXMuX25hbWUsIHRoaXMuX2lkKTtcbiAgfTtcblxuICBmdW5jdGlvbiBzdGFydChuYW1lKSB7XG4gICAgcmV0dXJuIChuYW1lICsgXCJcIikudHJpbSgpLnNwbGl0KC9efFxccysvKS5ldmVyeShmdW5jdGlvbiAodCkge1xuICAgICAgdmFyIGkgPSB0LmluZGV4T2YoXCIuXCIpO1xuICAgICAgaWYgKGkgPj0gMCkgdCA9IHQuc2xpY2UoMCwgaSk7XG4gICAgICByZXR1cm4gIXQgfHwgdCA9PT0gXCJzdGFydFwiO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gb25GdW5jdGlvbihpZCwgbmFtZSwgbGlzdGVuZXIpIHtcbiAgICB2YXIgb24wLFxuICAgICAgICBvbjEsXG4gICAgICAgIHNpdCA9IHN0YXJ0KG5hbWUpID8gaW5pdCA6IHNldCQxO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc2NoZWR1bGUkJDEgPSBzaXQodGhpcywgaWQpLFxuICAgICAgICAgIG9uID0gc2NoZWR1bGUkJDEub247XG5cbiAgICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgYSBkaXNwYXRjaCB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIGRpc3BhdGNoIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgICBpZiAob24gIT09IG9uMCkgKG9uMSA9IChvbjAgPSBvbikuY29weSgpKS5vbihuYW1lLCBsaXN0ZW5lcik7XG5cbiAgICAgIHNjaGVkdWxlJCQxLm9uID0gb24xO1xuICAgIH07XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbl9vbiA9IGZ1bmN0aW9uIHRyYW5zaXRpb25fb24obmFtZSwgbGlzdGVuZXIpIHtcbiAgICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGdldCQxKHRoaXMubm9kZSgpLCBpZCkub24ub24obmFtZSkgOiB0aGlzLmVhY2gob25GdW5jdGlvbihpZCwgbmFtZSwgbGlzdGVuZXIpKTtcbiAgfTtcblxuICBmdW5jdGlvbiByZW1vdmVGdW5jdGlvbihpZCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICAgICAgZm9yICh2YXIgaSBpbiB0aGlzLl9fdHJhbnNpdGlvbikge1xuICAgICAgICBpZiAoK2kgIT09IGlkKSByZXR1cm47XG4gICAgICB9aWYgKHBhcmVudCkgcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgIH07XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbl9yZW1vdmUgPSBmdW5jdGlvbiB0cmFuc2l0aW9uX3JlbW92ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5vbihcImVuZC5yZW1vdmVcIiwgcmVtb3ZlRnVuY3Rpb24odGhpcy5faWQpKTtcbiAgfTtcblxuICB2YXIgdHJhbnNpdGlvbl9zZWxlY3QgPSBmdW5jdGlvbiB0cmFuc2l0aW9uX3NlbGVjdChzZWxlY3QkJDEpIHtcbiAgICB2YXIgbmFtZSA9IHRoaXMuX25hbWUsXG4gICAgICAgIGlkID0gdGhpcy5faWQ7XG5cbiAgICBpZiAodHlwZW9mIHNlbGVjdCQkMSAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QkJDEgPSBzZWxlY3RvcihzZWxlY3QkJDEpO1xuXG4gICAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHN1Ymdyb3VwID0gc3ViZ3JvdXBzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBzdWJub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKHN1Ym5vZGUgPSBzZWxlY3QkJDEuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpKSB7XG4gICAgICAgICAgaWYgKFwiX19kYXRhX19cIiBpbiBub2RlKSBzdWJub2RlLl9fZGF0YV9fID0gbm9kZS5fX2RhdGFfXztcbiAgICAgICAgICBzdWJncm91cFtpXSA9IHN1Ym5vZGU7XG4gICAgICAgICAgc2NoZWR1bGUoc3ViZ3JvdXBbaV0sIG5hbWUsIGlkLCBpLCBzdWJncm91cCwgZ2V0JDEobm9kZSwgaWQpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgVHJhbnNpdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMsIG5hbWUsIGlkKTtcbiAgfTtcblxuICB2YXIgdHJhbnNpdGlvbl9zZWxlY3RBbGwgPSBmdW5jdGlvbiB0cmFuc2l0aW9uX3NlbGVjdEFsbChzZWxlY3QkJDEpIHtcbiAgICB2YXIgbmFtZSA9IHRoaXMuX25hbWUsXG4gICAgICAgIGlkID0gdGhpcy5faWQ7XG5cbiAgICBpZiAodHlwZW9mIHNlbGVjdCQkMSAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QkJDEgPSBzZWxlY3RvckFsbChzZWxlY3QkJDEpO1xuXG4gICAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gW10sIHBhcmVudHMgPSBbXSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgICAgZm9yICh2YXIgY2hpbGRyZW4gPSBzZWxlY3QkJDEuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCksIGNoaWxkLCBpbmhlcml0ID0gZ2V0JDEobm9kZSwgaWQpLCBrID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgayA8IGw7ICsraykge1xuICAgICAgICAgICAgaWYgKGNoaWxkID0gY2hpbGRyZW5ba10pIHtcbiAgICAgICAgICAgICAgc2NoZWR1bGUoY2hpbGQsIG5hbWUsIGlkLCBrLCBjaGlsZHJlbiwgaW5oZXJpdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHN1Ymdyb3Vwcy5wdXNoKGNoaWxkcmVuKTtcbiAgICAgICAgICBwYXJlbnRzLnB1c2gobm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFRyYW5zaXRpb24oc3ViZ3JvdXBzLCBwYXJlbnRzLCBuYW1lLCBpZCk7XG4gIH07XG5cbiAgdmFyIFNlbGVjdGlvbiQxID0gc2VsZWN0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvcjtcblxuICB2YXIgdHJhbnNpdGlvbl9zZWxlY3Rpb24gPSBmdW5jdGlvbiB0cmFuc2l0aW9uX3NlbGVjdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IFNlbGVjdGlvbiQxKHRoaXMuX2dyb3VwcywgdGhpcy5fcGFyZW50cyk7XG4gIH07XG5cbiAgZnVuY3Rpb24gc3R5bGVSZW1vdmUkMShuYW1lLCBpbnRlcnBvbGF0ZSQkMSkge1xuICAgIHZhciB2YWx1ZTAwLCB2YWx1ZTEwLCBpbnRlcnBvbGF0ZTA7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB2YWx1ZTAgPSBzdHlsZVZhbHVlKHRoaXMsIG5hbWUpLFxuICAgICAgICAgIHZhbHVlMSA9ICh0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpLCBzdHlsZVZhbHVlKHRoaXMsIG5hbWUpKTtcbiAgICAgIHJldHVybiB2YWx1ZTAgPT09IHZhbHVlMSA/IG51bGwgOiB2YWx1ZTAgPT09IHZhbHVlMDAgJiYgdmFsdWUxID09PSB2YWx1ZTEwID8gaW50ZXJwb2xhdGUwIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUkJDEodmFsdWUwMCA9IHZhbHVlMCwgdmFsdWUxMCA9IHZhbHVlMSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0eWxlUmVtb3ZlRW5kKG5hbWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gc3R5bGVDb25zdGFudCQxKG5hbWUsIGludGVycG9sYXRlJCQxLCB2YWx1ZTEpIHtcbiAgICB2YXIgdmFsdWUwMCwgaW50ZXJwb2xhdGUwO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdmFsdWUwID0gc3R5bGVWYWx1ZSh0aGlzLCBuYW1lKTtcbiAgICAgIHJldHVybiB2YWx1ZTAgPT09IHZhbHVlMSA/IG51bGwgOiB2YWx1ZTAgPT09IHZhbHVlMDAgPyBpbnRlcnBvbGF0ZTAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZSQkMSh2YWx1ZTAwID0gdmFsdWUwLCB2YWx1ZTEpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBzdHlsZUZ1bmN0aW9uJDEobmFtZSwgaW50ZXJwb2xhdGUkJDEsIHZhbHVlKSB7XG4gICAgdmFyIHZhbHVlMDAsIHZhbHVlMTAsIGludGVycG9sYXRlMDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHZhbHVlMCA9IHN0eWxlVmFsdWUodGhpcywgbmFtZSksXG4gICAgICAgICAgdmFsdWUxID0gdmFsdWUodGhpcyk7XG4gICAgICBpZiAodmFsdWUxID09IG51bGwpIHZhbHVlMSA9ICh0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpLCBzdHlsZVZhbHVlKHRoaXMsIG5hbWUpKTtcbiAgICAgIHJldHVybiB2YWx1ZTAgPT09IHZhbHVlMSA/IG51bGwgOiB2YWx1ZTAgPT09IHZhbHVlMDAgJiYgdmFsdWUxID09PSB2YWx1ZTEwID8gaW50ZXJwb2xhdGUwIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUkJDEodmFsdWUwMCA9IHZhbHVlMCwgdmFsdWUxMCA9IHZhbHVlMSk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciB0cmFuc2l0aW9uX3N0eWxlID0gZnVuY3Rpb24gdHJhbnNpdGlvbl9zdHlsZShuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgICB2YXIgaSA9IChuYW1lICs9IFwiXCIpID09PSBcInRyYW5zZm9ybVwiID8gaW50ZXJwb2xhdGVUcmFuc2Zvcm1Dc3MgOiBpbnRlcnBvbGF0ZTtcbiAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IHRoaXMuc3R5bGVUd2VlbihuYW1lLCBzdHlsZVJlbW92ZSQxKG5hbWUsIGkpKS5vbihcImVuZC5zdHlsZS5cIiArIG5hbWUsIHN0eWxlUmVtb3ZlRW5kKG5hbWUpKSA6IHRoaXMuc3R5bGVUd2VlbihuYW1lLCB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIiA/IHN0eWxlRnVuY3Rpb24kMShuYW1lLCBpLCB0d2VlblZhbHVlKHRoaXMsIFwic3R5bGUuXCIgKyBuYW1lLCB2YWx1ZSkpIDogc3R5bGVDb25zdGFudCQxKG5hbWUsIGksIHZhbHVlICsgXCJcIiksIHByaW9yaXR5KTtcbiAgfTtcblxuICBmdW5jdGlvbiBzdHlsZVR3ZWVuKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICAgIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgICAgdmFyIG5vZGUgPSB0aGlzLFxuICAgICAgICAgIGkgPSB2YWx1ZS5hcHBseShub2RlLCBhcmd1bWVudHMpO1xuICAgICAgcmV0dXJuIGkgJiYgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgbm9kZS5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCBpKHQpLCBwcmlvcml0eSk7XG4gICAgICB9O1xuICAgIH1cbiAgICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgICByZXR1cm4gdHdlZW47XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbl9zdHlsZVR3ZWVuID0gZnVuY3Rpb24gdHJhbnNpdGlvbl9zdHlsZVR3ZWVuKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICAgIHZhciBrZXkgPSBcInN0eWxlLlwiICsgKG5hbWUgKz0gXCJcIik7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gKGtleSA9IHRoaXMudHdlZW4oa2V5KSkgJiYga2V5Ll92YWx1ZTtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCBudWxsKTtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcigpO1xuICAgIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgc3R5bGVUd2VlbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkgPT0gbnVsbCA/IFwiXCIgOiBwcmlvcml0eSkpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHRleHRDb25zdGFudCQxKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gdGV4dEZ1bmN0aW9uJDEodmFsdWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHZhbHVlMSA9IHZhbHVlKHRoaXMpO1xuICAgICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlMSA9PSBudWxsID8gXCJcIiA6IHZhbHVlMTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25fdGV4dCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25fdGV4dCh2YWx1ZSkge1xuICAgIHJldHVybiB0aGlzLnR3ZWVuKFwidGV4dFwiLCB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIiA/IHRleHRGdW5jdGlvbiQxKHR3ZWVuVmFsdWUodGhpcywgXCJ0ZXh0XCIsIHZhbHVlKSkgOiB0ZXh0Q29uc3RhbnQkMSh2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIikpO1xuICB9O1xuXG4gIHZhciB0cmFuc2l0aW9uX3RyYW5zaXRpb24gPSBmdW5jdGlvbiB0cmFuc2l0aW9uX3RyYW5zaXRpb24oKSB7XG4gICAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgICBpZDAgPSB0aGlzLl9pZCxcbiAgICAgICAgaWQxID0gbmV3SWQoKTtcblxuICAgIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICAgIHZhciBpbmhlcml0ID0gZ2V0JDEobm9kZSwgaWQwKTtcbiAgICAgICAgICBzY2hlZHVsZShub2RlLCBuYW1lLCBpZDEsIGksIGdyb3VwLCB7XG4gICAgICAgICAgICB0aW1lOiBpbmhlcml0LnRpbWUgKyBpbmhlcml0LmRlbGF5ICsgaW5oZXJpdC5kdXJhdGlvbixcbiAgICAgICAgICAgIGRlbGF5OiAwLFxuICAgICAgICAgICAgZHVyYXRpb246IGluaGVyaXQuZHVyYXRpb24sXG4gICAgICAgICAgICBlYXNlOiBpbmhlcml0LmVhc2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgVHJhbnNpdGlvbihncm91cHMsIHRoaXMuX3BhcmVudHMsIG5hbWUsIGlkMSk7XG4gIH07XG5cbiAgdmFyIGlkID0gMDtcblxuICBmdW5jdGlvbiBUcmFuc2l0aW9uKGdyb3VwcywgcGFyZW50cywgbmFtZSwgaWQpIHtcbiAgICB0aGlzLl9ncm91cHMgPSBncm91cHM7XG4gICAgdGhpcy5fcGFyZW50cyA9IHBhcmVudHM7XG4gICAgdGhpcy5fbmFtZSA9IG5hbWU7XG4gICAgdGhpcy5faWQgPSBpZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb24obmFtZSkge1xuICAgIHJldHVybiBzZWxlY3Rpb24oKS50cmFuc2l0aW9uKG5hbWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gbmV3SWQoKSB7XG4gICAgcmV0dXJuICsraWQ7XG4gIH1cblxuICB2YXIgc2VsZWN0aW9uX3Byb3RvdHlwZSA9IHNlbGVjdGlvbi5wcm90b3R5cGU7XG5cbiAgVHJhbnNpdGlvbi5wcm90b3R5cGUgPSB0cmFuc2l0aW9uLnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogVHJhbnNpdGlvbixcbiAgICBzZWxlY3Q6IHRyYW5zaXRpb25fc2VsZWN0LFxuICAgIHNlbGVjdEFsbDogdHJhbnNpdGlvbl9zZWxlY3RBbGwsXG4gICAgZmlsdGVyOiB0cmFuc2l0aW9uX2ZpbHRlcixcbiAgICBtZXJnZTogdHJhbnNpdGlvbl9tZXJnZSxcbiAgICBzZWxlY3Rpb246IHRyYW5zaXRpb25fc2VsZWN0aW9uLFxuICAgIHRyYW5zaXRpb246IHRyYW5zaXRpb25fdHJhbnNpdGlvbixcbiAgICBjYWxsOiBzZWxlY3Rpb25fcHJvdG90eXBlLmNhbGwsXG4gICAgbm9kZXM6IHNlbGVjdGlvbl9wcm90b3R5cGUubm9kZXMsXG4gICAgbm9kZTogc2VsZWN0aW9uX3Byb3RvdHlwZS5ub2RlLFxuICAgIHNpemU6IHNlbGVjdGlvbl9wcm90b3R5cGUuc2l6ZSxcbiAgICBlbXB0eTogc2VsZWN0aW9uX3Byb3RvdHlwZS5lbXB0eSxcbiAgICBlYWNoOiBzZWxlY3Rpb25fcHJvdG90eXBlLmVhY2gsXG4gICAgb246IHRyYW5zaXRpb25fb24sXG4gICAgYXR0cjogdHJhbnNpdGlvbl9hdHRyLFxuICAgIGF0dHJUd2VlbjogdHJhbnNpdGlvbl9hdHRyVHdlZW4sXG4gICAgc3R5bGU6IHRyYW5zaXRpb25fc3R5bGUsXG4gICAgc3R5bGVUd2VlbjogdHJhbnNpdGlvbl9zdHlsZVR3ZWVuLFxuICAgIHRleHQ6IHRyYW5zaXRpb25fdGV4dCxcbiAgICByZW1vdmU6IHRyYW5zaXRpb25fcmVtb3ZlLFxuICAgIHR3ZWVuOiB0cmFuc2l0aW9uX3R3ZWVuLFxuICAgIGRlbGF5OiB0cmFuc2l0aW9uX2RlbGF5LFxuICAgIGR1cmF0aW9uOiB0cmFuc2l0aW9uX2R1cmF0aW9uLFxuICAgIGVhc2U6IHRyYW5zaXRpb25fZWFzZVxuICB9O1xuXG4gIGZ1bmN0aW9uIGxpbmVhciQxKHQpIHtcbiAgICByZXR1cm4gK3Q7XG4gIH1cblxuICBmdW5jdGlvbiBxdWFkSW4odCkge1xuICAgIHJldHVybiB0ICogdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHF1YWRPdXQodCkge1xuICAgIHJldHVybiB0ICogKDIgLSB0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHF1YWRJbk91dCh0KSB7XG4gICAgcmV0dXJuICgodCAqPSAyKSA8PSAxID8gdCAqIHQgOiAtLXQgKiAoMiAtIHQpICsgMSkgLyAyO1xuICB9XG5cbiAgZnVuY3Rpb24gY3ViaWNJbih0KSB7XG4gICAgcmV0dXJuIHQgKiB0ICogdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGN1YmljT3V0KHQpIHtcbiAgICByZXR1cm4gLS10ICogdCAqIHQgKyAxO1xuICB9XG5cbiAgZnVuY3Rpb24gY3ViaWNJbk91dCh0KSB7XG4gICAgcmV0dXJuICgodCAqPSAyKSA8PSAxID8gdCAqIHQgKiB0IDogKHQgLT0gMikgKiB0ICogdCArIDIpIC8gMjtcbiAgfVxuXG4gIHZhciBleHBvbmVudCA9IDM7XG5cbiAgdmFyIHBvbHlJbiA9IGZ1bmN0aW9uIGN1c3RvbShlKSB7XG4gICAgZSA9ICtlO1xuXG4gICAgZnVuY3Rpb24gcG9seUluKHQpIHtcbiAgICAgIHJldHVybiBNYXRoLnBvdyh0LCBlKTtcbiAgICB9XG5cbiAgICBwb2x5SW4uZXhwb25lbnQgPSBjdXN0b207XG5cbiAgICByZXR1cm4gcG9seUluO1xuICB9KGV4cG9uZW50KTtcblxuICB2YXIgcG9seU91dCA9IGZ1bmN0aW9uIGN1c3RvbShlKSB7XG4gICAgZSA9ICtlO1xuXG4gICAgZnVuY3Rpb24gcG9seU91dCh0KSB7XG4gICAgICByZXR1cm4gMSAtIE1hdGgucG93KDEgLSB0LCBlKTtcbiAgICB9XG5cbiAgICBwb2x5T3V0LmV4cG9uZW50ID0gY3VzdG9tO1xuXG4gICAgcmV0dXJuIHBvbHlPdXQ7XG4gIH0oZXhwb25lbnQpO1xuXG4gIHZhciBwb2x5SW5PdXQgPSBmdW5jdGlvbiBjdXN0b20oZSkge1xuICAgIGUgPSArZTtcblxuICAgIGZ1bmN0aW9uIHBvbHlJbk91dCh0KSB7XG4gICAgICByZXR1cm4gKCh0ICo9IDIpIDw9IDEgPyBNYXRoLnBvdyh0LCBlKSA6IDIgLSBNYXRoLnBvdygyIC0gdCwgZSkpIC8gMjtcbiAgICB9XG5cbiAgICBwb2x5SW5PdXQuZXhwb25lbnQgPSBjdXN0b207XG5cbiAgICByZXR1cm4gcG9seUluT3V0O1xuICB9KGV4cG9uZW50KTtcblxuICB2YXIgcGkgPSBNYXRoLlBJO1xuICB2YXIgaGFsZlBpID0gcGkgLyAyO1xuXG4gIGZ1bmN0aW9uIHNpbkluKHQpIHtcbiAgICByZXR1cm4gMSAtIE1hdGguY29zKHQgKiBoYWxmUGkpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2luT3V0KHQpIHtcbiAgICByZXR1cm4gTWF0aC5zaW4odCAqIGhhbGZQaSk7XG4gIH1cblxuICBmdW5jdGlvbiBzaW5Jbk91dCh0KSB7XG4gICAgcmV0dXJuICgxIC0gTWF0aC5jb3MocGkgKiB0KSkgLyAyO1xuICB9XG5cbiAgZnVuY3Rpb24gZXhwSW4odCkge1xuICAgIHJldHVybiBNYXRoLnBvdygyLCAxMCAqIHQgLSAxMCk7XG4gIH1cblxuICBmdW5jdGlvbiBleHBPdXQodCkge1xuICAgIHJldHVybiAxIC0gTWF0aC5wb3coMiwgLTEwICogdCk7XG4gIH1cblxuICBmdW5jdGlvbiBleHBJbk91dCh0KSB7XG4gICAgcmV0dXJuICgodCAqPSAyKSA8PSAxID8gTWF0aC5wb3coMiwgMTAgKiB0IC0gMTApIDogMiAtIE1hdGgucG93KDIsIDEwIC0gMTAgKiB0KSkgLyAyO1xuICB9XG5cbiAgZnVuY3Rpb24gY2lyY2xlSW4odCkge1xuICAgIHJldHVybiAxIC0gTWF0aC5zcXJ0KDEgLSB0ICogdCk7XG4gIH1cblxuICBmdW5jdGlvbiBjaXJjbGVPdXQodCkge1xuICAgIHJldHVybiBNYXRoLnNxcnQoMSAtIC0tdCAqIHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2lyY2xlSW5PdXQodCkge1xuICAgIHJldHVybiAoKHQgKj0gMikgPD0gMSA/IDEgLSBNYXRoLnNxcnQoMSAtIHQgKiB0KSA6IE1hdGguc3FydCgxIC0gKHQgLT0gMikgKiB0KSArIDEpIC8gMjtcbiAgfVxuXG4gIHZhciBiMSA9IDQgLyAxMTtcbiAgdmFyIGIyID0gNiAvIDExO1xuICB2YXIgYjMgPSA4IC8gMTE7XG4gIHZhciBiNCA9IDMgLyA0O1xuICB2YXIgYjUgPSA5IC8gMTE7XG4gIHZhciBiNiA9IDEwIC8gMTE7XG4gIHZhciBiNyA9IDE1IC8gMTY7XG4gIHZhciBiOCA9IDIxIC8gMjI7XG4gIHZhciBiOSA9IDYzIC8gNjQ7XG4gIHZhciBiMCA9IDEgLyBiMSAvIGIxO1xuXG4gIGZ1bmN0aW9uIGJvdW5jZUluKHQpIHtcbiAgICByZXR1cm4gMSAtIGJvdW5jZU91dCgxIC0gdCk7XG4gIH1cblxuICBmdW5jdGlvbiBib3VuY2VPdXQodCkge1xuICAgIHJldHVybiAodCA9ICt0KSA8IGIxID8gYjAgKiB0ICogdCA6IHQgPCBiMyA/IGIwICogKHQgLT0gYjIpICogdCArIGI0IDogdCA8IGI2ID8gYjAgKiAodCAtPSBiNSkgKiB0ICsgYjcgOiBiMCAqICh0IC09IGI4KSAqIHQgKyBiOTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJvdW5jZUluT3V0KHQpIHtcbiAgICByZXR1cm4gKCh0ICo9IDIpIDw9IDEgPyAxIC0gYm91bmNlT3V0KDEgLSB0KSA6IGJvdW5jZU91dCh0IC0gMSkgKyAxKSAvIDI7XG4gIH1cblxuICB2YXIgb3ZlcnNob290ID0gMS43MDE1ODtcblxuICB2YXIgYmFja0luID0gZnVuY3Rpb24gY3VzdG9tKHMpIHtcbiAgICBzID0gK3M7XG5cbiAgICBmdW5jdGlvbiBiYWNrSW4odCkge1xuICAgICAgcmV0dXJuIHQgKiB0ICogKChzICsgMSkgKiB0IC0gcyk7XG4gICAgfVxuXG4gICAgYmFja0luLm92ZXJzaG9vdCA9IGN1c3RvbTtcblxuICAgIHJldHVybiBiYWNrSW47XG4gIH0ob3ZlcnNob290KTtcblxuICB2YXIgYmFja091dCA9IGZ1bmN0aW9uIGN1c3RvbShzKSB7XG4gICAgcyA9ICtzO1xuXG4gICAgZnVuY3Rpb24gYmFja091dCh0KSB7XG4gICAgICByZXR1cm4gLS10ICogdCAqICgocyArIDEpICogdCArIHMpICsgMTtcbiAgICB9XG5cbiAgICBiYWNrT3V0Lm92ZXJzaG9vdCA9IGN1c3RvbTtcblxuICAgIHJldHVybiBiYWNrT3V0O1xuICB9KG92ZXJzaG9vdCk7XG5cbiAgdmFyIGJhY2tJbk91dCA9IGZ1bmN0aW9uIGN1c3RvbShzKSB7XG4gICAgcyA9ICtzO1xuXG4gICAgZnVuY3Rpb24gYmFja0luT3V0KHQpIHtcbiAgICAgIHJldHVybiAoKHQgKj0gMikgPCAxID8gdCAqIHQgKiAoKHMgKyAxKSAqIHQgLSBzKSA6ICh0IC09IDIpICogdCAqICgocyArIDEpICogdCArIHMpICsgMikgLyAyO1xuICAgIH1cblxuICAgIGJhY2tJbk91dC5vdmVyc2hvb3QgPSBjdXN0b207XG5cbiAgICByZXR1cm4gYmFja0luT3V0O1xuICB9KG92ZXJzaG9vdCk7XG5cbiAgdmFyIHRhdSA9IDIgKiBNYXRoLlBJO1xuICB2YXIgYW1wbGl0dWRlID0gMTtcbiAgdmFyIHBlcmlvZCA9IDAuMztcblxuICB2YXIgZWxhc3RpY0luID0gZnVuY3Rpb24gY3VzdG9tKGEsIHApIHtcbiAgICB2YXIgcyA9IE1hdGguYXNpbigxIC8gKGEgPSBNYXRoLm1heCgxLCBhKSkpICogKHAgLz0gdGF1KTtcblxuICAgIGZ1bmN0aW9uIGVsYXN0aWNJbih0KSB7XG4gICAgICByZXR1cm4gYSAqIE1hdGgucG93KDIsIDEwICogLS10KSAqIE1hdGguc2luKChzIC0gdCkgLyBwKTtcbiAgICB9XG5cbiAgICBlbGFzdGljSW4uYW1wbGl0dWRlID0gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBjdXN0b20oYSwgcCAqIHRhdSk7XG4gICAgfTtcbiAgICBlbGFzdGljSW4ucGVyaW9kID0gZnVuY3Rpb24gKHApIHtcbiAgICAgIHJldHVybiBjdXN0b20oYSwgcCk7XG4gICAgfTtcblxuICAgIHJldHVybiBlbGFzdGljSW47XG4gIH0oYW1wbGl0dWRlLCBwZXJpb2QpO1xuXG4gIHZhciBlbGFzdGljT3V0ID0gZnVuY3Rpb24gY3VzdG9tKGEsIHApIHtcbiAgICB2YXIgcyA9IE1hdGguYXNpbigxIC8gKGEgPSBNYXRoLm1heCgxLCBhKSkpICogKHAgLz0gdGF1KTtcblxuICAgIGZ1bmN0aW9uIGVsYXN0aWNPdXQodCkge1xuICAgICAgcmV0dXJuIDEgLSBhICogTWF0aC5wb3coMiwgLTEwICogKHQgPSArdCkpICogTWF0aC5zaW4oKHQgKyBzKSAvIHApO1xuICAgIH1cblxuICAgIGVsYXN0aWNPdXQuYW1wbGl0dWRlID0gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBjdXN0b20oYSwgcCAqIHRhdSk7XG4gICAgfTtcbiAgICBlbGFzdGljT3V0LnBlcmlvZCA9IGZ1bmN0aW9uIChwKSB7XG4gICAgICByZXR1cm4gY3VzdG9tKGEsIHApO1xuICAgIH07XG5cbiAgICByZXR1cm4gZWxhc3RpY091dDtcbiAgfShhbXBsaXR1ZGUsIHBlcmlvZCk7XG5cbiAgdmFyIGVsYXN0aWNJbk91dCA9IGZ1bmN0aW9uIGN1c3RvbShhLCBwKSB7XG4gICAgdmFyIHMgPSBNYXRoLmFzaW4oMSAvIChhID0gTWF0aC5tYXgoMSwgYSkpKSAqIChwIC89IHRhdSk7XG5cbiAgICBmdW5jdGlvbiBlbGFzdGljSW5PdXQodCkge1xuICAgICAgcmV0dXJuICgodCA9IHQgKiAyIC0gMSkgPCAwID8gYSAqIE1hdGgucG93KDIsIDEwICogdCkgKiBNYXRoLnNpbigocyAtIHQpIC8gcCkgOiAyIC0gYSAqIE1hdGgucG93KDIsIC0xMCAqIHQpICogTWF0aC5zaW4oKHMgKyB0KSAvIHApKSAvIDI7XG4gICAgfVxuXG4gICAgZWxhc3RpY0luT3V0LmFtcGxpdHVkZSA9IGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gY3VzdG9tKGEsIHAgKiB0YXUpO1xuICAgIH07XG4gICAgZWxhc3RpY0luT3V0LnBlcmlvZCA9IGZ1bmN0aW9uIChwKSB7XG4gICAgICByZXR1cm4gY3VzdG9tKGEsIHApO1xuICAgIH07XG5cbiAgICByZXR1cm4gZWxhc3RpY0luT3V0O1xuICB9KGFtcGxpdHVkZSwgcGVyaW9kKTtcblxuICB2YXIgZGVmYXVsdFRpbWluZyA9IHtcbiAgICB0aW1lOiBudWxsLCAvLyBTZXQgb24gdXNlLlxuICAgIGRlbGF5OiAwLFxuICAgIGR1cmF0aW9uOiAyNTAsXG4gICAgZWFzZTogY3ViaWNJbk91dFxuICB9O1xuXG4gIGZ1bmN0aW9uIGluaGVyaXQobm9kZSwgaWQpIHtcbiAgICB2YXIgdGltaW5nO1xuICAgIHdoaWxlICghKHRpbWluZyA9IG5vZGUuX190cmFuc2l0aW9uKSB8fCAhKHRpbWluZyA9IHRpbWluZ1tpZF0pKSB7XG4gICAgICBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFRpbWluZy50aW1lID0gbm93KCksIGRlZmF1bHRUaW1pbmc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aW1pbmc7XG4gIH1cblxuICB2YXIgc2VsZWN0aW9uX3RyYW5zaXRpb24gPSBmdW5jdGlvbiBzZWxlY3Rpb25fdHJhbnNpdGlvbihuYW1lKSB7XG4gICAgdmFyIGlkLCB0aW1pbmc7XG5cbiAgICBpZiAobmFtZSBpbnN0YW5jZW9mIFRyYW5zaXRpb24pIHtcbiAgICAgIGlkID0gbmFtZS5faWQsIG5hbWUgPSBuYW1lLl9uYW1lO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZCA9IG5ld0lkKCksICh0aW1pbmcgPSBkZWZhdWx0VGltaW5nKS50aW1lID0gbm93KCksIG5hbWUgPSBuYW1lID09IG51bGwgPyBudWxsIDogbmFtZSArIFwiXCI7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgICAgc2NoZWR1bGUobm9kZSwgbmFtZSwgaWQsIGksIGdyb3VwLCB0aW1pbmcgfHwgaW5oZXJpdChub2RlLCBpZCkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKGdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQpO1xuICB9O1xuXG4gIHNlbGVjdGlvbi5wcm90b3R5cGUuaW50ZXJydXB0ID0gc2VsZWN0aW9uX2ludGVycnVwdDtcbiAgc2VsZWN0aW9uLnByb3RvdHlwZS50cmFuc2l0aW9uID0gc2VsZWN0aW9uX3RyYW5zaXRpb247XG5cbiAgdmFyIHJvb3QkMSA9IFtudWxsXTtcblxuICB2YXIgYWN0aXZlID0gZnVuY3Rpb24gYWN0aXZlKG5vZGUsIG5hbWUpIHtcbiAgICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb24sXG4gICAgICAgIHNjaGVkdWxlJCQxLFxuICAgICAgICBpO1xuXG4gICAgaWYgKHNjaGVkdWxlcykge1xuICAgICAgbmFtZSA9IG5hbWUgPT0gbnVsbCA/IG51bGwgOiBuYW1lICsgXCJcIjtcbiAgICAgIGZvciAoaSBpbiBzY2hlZHVsZXMpIHtcbiAgICAgICAgaWYgKChzY2hlZHVsZSQkMSA9IHNjaGVkdWxlc1tpXSkuc3RhdGUgPiBTQ0hFRFVMRUQgJiYgc2NoZWR1bGUkJDEubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgIHJldHVybiBuZXcgVHJhbnNpdGlvbihbW25vZGVdXSwgcm9vdCQxLCBuYW1lLCAraSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICB2YXIgY29uc3RhbnQkNCA9IGZ1bmN0aW9uIGNvbnN0YW50JDQoeCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4geDtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBCcnVzaEV2ZW50ID0gZnVuY3Rpb24gQnJ1c2hFdmVudCh0YXJnZXQsIHR5cGUsIHNlbGVjdGlvbikge1xuICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgdGhpcy5zZWxlY3Rpb24gPSBzZWxlY3Rpb247XG4gIH07XG5cbiAgZnVuY3Rpb24gbm9wcm9wYWdhdGlvbiQxKCkge1xuICAgIGV4cG9ydHMuZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gIH1cblxuICB2YXIgbm9ldmVudCQxID0gZnVuY3Rpb24gbm9ldmVudCQxKCkge1xuICAgIGV4cG9ydHMuZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBleHBvcnRzLmV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICB9O1xuXG4gIHZhciBNT0RFX0RSQUcgPSB7IG5hbWU6IFwiZHJhZ1wiIH07XG4gIHZhciBNT0RFX1NQQUNFID0geyBuYW1lOiBcInNwYWNlXCIgfTtcbiAgdmFyIE1PREVfSEFORExFID0geyBuYW1lOiBcImhhbmRsZVwiIH07XG4gIHZhciBNT0RFX0NFTlRFUiA9IHsgbmFtZTogXCJjZW50ZXJcIiB9O1xuXG4gIHZhciBYID0ge1xuICAgIG5hbWU6IFwieFwiLFxuICAgIGhhbmRsZXM6IFtcImVcIiwgXCJ3XCJdLm1hcCh0eXBlKSxcbiAgICBpbnB1dDogZnVuY3Rpb24gaW5wdXQoeCwgZSkge1xuICAgICAgcmV0dXJuIHggJiYgW1t4WzBdLCBlWzBdWzFdXSwgW3hbMV0sIGVbMV1bMV1dXTtcbiAgICB9LFxuICAgIG91dHB1dDogZnVuY3Rpb24gb3V0cHV0KHh5KSB7XG4gICAgICByZXR1cm4geHkgJiYgW3h5WzBdWzBdLCB4eVsxXVswXV07XG4gICAgfVxuICB9O1xuXG4gIHZhciBZID0ge1xuICAgIG5hbWU6IFwieVwiLFxuICAgIGhhbmRsZXM6IFtcIm5cIiwgXCJzXCJdLm1hcCh0eXBlKSxcbiAgICBpbnB1dDogZnVuY3Rpb24gaW5wdXQoeSwgZSkge1xuICAgICAgcmV0dXJuIHkgJiYgW1tlWzBdWzBdLCB5WzBdXSwgW2VbMV1bMF0sIHlbMV1dXTtcbiAgICB9LFxuICAgIG91dHB1dDogZnVuY3Rpb24gb3V0cHV0KHh5KSB7XG4gICAgICByZXR1cm4geHkgJiYgW3h5WzBdWzFdLCB4eVsxXVsxXV07XG4gICAgfVxuICB9O1xuXG4gIHZhciBYWSA9IHtcbiAgICBuYW1lOiBcInh5XCIsXG4gICAgaGFuZGxlczogW1wiblwiLCBcImVcIiwgXCJzXCIsIFwid1wiLCBcIm53XCIsIFwibmVcIiwgXCJzZVwiLCBcInN3XCJdLm1hcCh0eXBlKSxcbiAgICBpbnB1dDogZnVuY3Rpb24gaW5wdXQoeHkpIHtcbiAgICAgIHJldHVybiB4eTtcbiAgICB9LFxuICAgIG91dHB1dDogZnVuY3Rpb24gb3V0cHV0KHh5KSB7XG4gICAgICByZXR1cm4geHk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBjdXJzb3JzID0ge1xuICAgIG92ZXJsYXk6IFwiY3Jvc3NoYWlyXCIsXG4gICAgc2VsZWN0aW9uOiBcIm1vdmVcIixcbiAgICBuOiBcIm5zLXJlc2l6ZVwiLFxuICAgIGU6IFwiZXctcmVzaXplXCIsXG4gICAgczogXCJucy1yZXNpemVcIixcbiAgICB3OiBcImV3LXJlc2l6ZVwiLFxuICAgIG53OiBcIm53c2UtcmVzaXplXCIsXG4gICAgbmU6IFwibmVzdy1yZXNpemVcIixcbiAgICBzZTogXCJud3NlLXJlc2l6ZVwiLFxuICAgIHN3OiBcIm5lc3ctcmVzaXplXCJcbiAgfTtcblxuICB2YXIgZmxpcFggPSB7XG4gICAgZTogXCJ3XCIsXG4gICAgdzogXCJlXCIsXG4gICAgbnc6IFwibmVcIixcbiAgICBuZTogXCJud1wiLFxuICAgIHNlOiBcInN3XCIsXG4gICAgc3c6IFwic2VcIlxuICB9O1xuXG4gIHZhciBmbGlwWSA9IHtcbiAgICBuOiBcInNcIixcbiAgICBzOiBcIm5cIixcbiAgICBudzogXCJzd1wiLFxuICAgIG5lOiBcInNlXCIsXG4gICAgc2U6IFwibmVcIixcbiAgICBzdzogXCJud1wiXG4gIH07XG5cbiAgdmFyIHNpZ25zWCA9IHtcbiAgICBvdmVybGF5OiArMSxcbiAgICBzZWxlY3Rpb246ICsxLFxuICAgIG46IG51bGwsXG4gICAgZTogKzEsXG4gICAgczogbnVsbCxcbiAgICB3OiAtMSxcbiAgICBudzogLTEsXG4gICAgbmU6ICsxLFxuICAgIHNlOiArMSxcbiAgICBzdzogLTFcbiAgfTtcblxuICB2YXIgc2lnbnNZID0ge1xuICAgIG92ZXJsYXk6ICsxLFxuICAgIHNlbGVjdGlvbjogKzEsXG4gICAgbjogLTEsXG4gICAgZTogbnVsbCxcbiAgICBzOiArMSxcbiAgICB3OiBudWxsLFxuICAgIG53OiAtMSxcbiAgICBuZTogLTEsXG4gICAgc2U6ICsxLFxuICAgIHN3OiArMVxuICB9O1xuXG4gIGZ1bmN0aW9uIHR5cGUodCkge1xuICAgIHJldHVybiB7IHR5cGU6IHQgfTtcbiAgfVxuXG4gIC8vIElnbm9yZSByaWdodC1jbGljaywgc2luY2UgdGhhdCBzaG91bGQgb3BlbiB0aGUgY29udGV4dCBtZW51LlxuICBmdW5jdGlvbiBkZWZhdWx0RmlsdGVyKCkge1xuICAgIHJldHVybiAhZXhwb3J0cy5ldmVudC5idXR0b247XG4gIH1cblxuICBmdW5jdGlvbiBkZWZhdWx0RXh0ZW50KCkge1xuICAgIHZhciBzdmcgPSB0aGlzLm93bmVyU1ZHRWxlbWVudCB8fCB0aGlzO1xuICAgIHJldHVybiBbWzAsIDBdLCBbc3ZnLndpZHRoLmJhc2VWYWwudmFsdWUsIHN2Zy5oZWlnaHQuYmFzZVZhbC52YWx1ZV1dO1xuICB9XG5cbiAgLy8gTGlrZSBkMy5sb2NhbCwgYnV0IHdpdGggdGhlIG5hbWUg4oCcX19icnVzaOKAnSByYXRoZXIgdGhhbiBhdXRvLWdlbmVyYXRlZC5cbiAgZnVuY3Rpb24gbG9jYWwkJDEobm9kZSkge1xuICAgIHdoaWxlICghbm9kZS5fX2JydXNoKSB7XG4gICAgICBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkgcmV0dXJuO1xuICAgIH1yZXR1cm4gbm9kZS5fX2JydXNoO1xuICB9XG5cbiAgZnVuY3Rpb24gZW1wdHkoZXh0ZW50KSB7XG4gICAgcmV0dXJuIGV4dGVudFswXVswXSA9PT0gZXh0ZW50WzFdWzBdIHx8IGV4dGVudFswXVsxXSA9PT0gZXh0ZW50WzFdWzFdO1xuICB9XG5cbiAgZnVuY3Rpb24gYnJ1c2hTZWxlY3Rpb24obm9kZSkge1xuICAgIHZhciBzdGF0ZSA9IG5vZGUuX19icnVzaDtcbiAgICByZXR1cm4gc3RhdGUgPyBzdGF0ZS5kaW0ub3V0cHV0KHN0YXRlLnNlbGVjdGlvbikgOiBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gYnJ1c2hYKCkge1xuICAgIHJldHVybiBicnVzaCQxKFgpO1xuICB9XG5cbiAgZnVuY3Rpb24gYnJ1c2hZKCkge1xuICAgIHJldHVybiBicnVzaCQxKFkpO1xuICB9XG5cbiAgdmFyIGJydXNoID0gZnVuY3Rpb24gYnJ1c2goKSB7XG4gICAgcmV0dXJuIGJydXNoJDEoWFkpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGJydXNoJDEoZGltKSB7XG4gICAgdmFyIGV4dGVudCA9IGRlZmF1bHRFeHRlbnQsXG4gICAgICAgIGZpbHRlciA9IGRlZmF1bHRGaWx0ZXIsXG4gICAgICAgIGxpc3RlbmVycyA9IGRpc3BhdGNoKGJydXNoLCBcInN0YXJ0XCIsIFwiYnJ1c2hcIiwgXCJlbmRcIiksXG4gICAgICAgIGhhbmRsZVNpemUgPSA2LFxuICAgICAgICB0b3VjaGVuZGluZztcblxuICAgIGZ1bmN0aW9uIGJydXNoKGdyb3VwKSB7XG4gICAgICB2YXIgb3ZlcmxheSA9IGdyb3VwLnByb3BlcnR5KFwiX19icnVzaFwiLCBpbml0aWFsaXplKS5zZWxlY3RBbGwoXCIub3ZlcmxheVwiKS5kYXRhKFt0eXBlKFwib3ZlcmxheVwiKV0pO1xuXG4gICAgICBvdmVybGF5LmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKS5hdHRyKFwiY2xhc3NcIiwgXCJvdmVybGF5XCIpLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcImFsbFwiKS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnMub3ZlcmxheSkubWVyZ2Uob3ZlcmxheSkuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBleHRlbnQgPSBsb2NhbCQkMSh0aGlzKS5leHRlbnQ7XG4gICAgICAgIHNlbGVjdCh0aGlzKS5hdHRyKFwieFwiLCBleHRlbnRbMF1bMF0pLmF0dHIoXCJ5XCIsIGV4dGVudFswXVsxXSkuYXR0cihcIndpZHRoXCIsIGV4dGVudFsxXVswXSAtIGV4dGVudFswXVswXSkuYXR0cihcImhlaWdodFwiLCBleHRlbnRbMV1bMV0gLSBleHRlbnRbMF1bMV0pO1xuICAgICAgfSk7XG5cbiAgICAgIGdyb3VwLnNlbGVjdEFsbChcIi5zZWxlY3Rpb25cIikuZGF0YShbdHlwZShcInNlbGVjdGlvblwiKV0pLmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKS5hdHRyKFwiY2xhc3NcIiwgXCJzZWxlY3Rpb25cIikuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzLnNlbGVjdGlvbikuYXR0cihcImZpbGxcIiwgXCIjNzc3XCIpLmF0dHIoXCJmaWxsLW9wYWNpdHlcIiwgMC4zKS5hdHRyKFwic3Ryb2tlXCIsIFwiI2ZmZlwiKS5hdHRyKFwic2hhcGUtcmVuZGVyaW5nXCIsIFwiY3Jpc3BFZGdlc1wiKTtcblxuICAgICAgdmFyIGhhbmRsZSA9IGdyb3VwLnNlbGVjdEFsbChcIi5oYW5kbGVcIikuZGF0YShkaW0uaGFuZGxlcywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgcmV0dXJuIGQudHlwZTtcbiAgICAgIH0pO1xuXG4gICAgICBoYW5kbGUuZXhpdCgpLnJlbW92ZSgpO1xuXG4gICAgICBoYW5kbGUuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpLmF0dHIoXCJjbGFzc1wiLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICByZXR1cm4gXCJoYW5kbGUgaGFuZGxlLS1cIiArIGQudHlwZTtcbiAgICAgIH0pLmF0dHIoXCJjdXJzb3JcIiwgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgcmV0dXJuIGN1cnNvcnNbZC50eXBlXTtcbiAgICAgIH0pO1xuXG4gICAgICBncm91cC5lYWNoKHJlZHJhdykuYXR0cihcImZpbGxcIiwgXCJub25lXCIpLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcImFsbFwiKS5zdHlsZShcIi13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvclwiLCBcInJnYmEoMCwwLDAsMClcIikub24oXCJtb3VzZWRvd24uYnJ1c2ggdG91Y2hzdGFydC5icnVzaFwiLCBzdGFydGVkKTtcbiAgICB9XG5cbiAgICBicnVzaC5tb3ZlID0gZnVuY3Rpb24gKGdyb3VwLCBzZWxlY3Rpb24pIHtcbiAgICAgIGlmIChncm91cC5zZWxlY3Rpb24pIHtcbiAgICAgICAgZ3JvdXAub24oXCJzdGFydC5icnVzaFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZW1pdHRlcih0aGlzLCBhcmd1bWVudHMpLmJlZm9yZXN0YXJ0KCkuc3RhcnQoKTtcbiAgICAgICAgfSkub24oXCJpbnRlcnJ1cHQuYnJ1c2ggZW5kLmJydXNoXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBlbWl0dGVyKHRoaXMsIGFyZ3VtZW50cykuZW5kKCk7XG4gICAgICAgIH0pLnR3ZWVuKFwiYnJ1c2hcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgICAgc3RhdGUgPSB0aGF0Ll9fYnJ1c2gsXG4gICAgICAgICAgICAgIGVtaXQgPSBlbWl0dGVyKHRoYXQsIGFyZ3VtZW50cyksXG4gICAgICAgICAgICAgIHNlbGVjdGlvbjAgPSBzdGF0ZS5zZWxlY3Rpb24sXG4gICAgICAgICAgICAgIHNlbGVjdGlvbjEgPSBkaW0uaW5wdXQodHlwZW9mIHNlbGVjdGlvbiA9PT0gXCJmdW5jdGlvblwiID8gc2VsZWN0aW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBzZWxlY3Rpb24sIHN0YXRlLmV4dGVudCksXG4gICAgICAgICAgICAgIGkgPSBpbnRlcnBvbGF0ZVZhbHVlKHNlbGVjdGlvbjAsIHNlbGVjdGlvbjEpO1xuXG4gICAgICAgICAgZnVuY3Rpb24gdHdlZW4odCkge1xuICAgICAgICAgICAgc3RhdGUuc2VsZWN0aW9uID0gdCA9PT0gMSAmJiBlbXB0eShzZWxlY3Rpb24xKSA/IG51bGwgOiBpKHQpO1xuICAgICAgICAgICAgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgICAgICAgICBlbWl0LmJydXNoKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHNlbGVjdGlvbjAgJiYgc2VsZWN0aW9uMSA/IHR3ZWVuIDogdHdlZW4oMSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ3JvdXAuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgICBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgICBzdGF0ZSA9IHRoYXQuX19icnVzaCxcbiAgICAgICAgICAgICAgc2VsZWN0aW9uMSA9IGRpbS5pbnB1dCh0eXBlb2Ygc2VsZWN0aW9uID09PSBcImZ1bmN0aW9uXCIgPyBzZWxlY3Rpb24uYXBwbHkodGhhdCwgYXJncykgOiBzZWxlY3Rpb24sIHN0YXRlLmV4dGVudCksXG4gICAgICAgICAgICAgIGVtaXQgPSBlbWl0dGVyKHRoYXQsIGFyZ3MpLmJlZm9yZXN0YXJ0KCk7XG5cbiAgICAgICAgICBpbnRlcnJ1cHQodGhhdCk7XG4gICAgICAgICAgc3RhdGUuc2VsZWN0aW9uID0gc2VsZWN0aW9uMSA9PSBudWxsIHx8IGVtcHR5KHNlbGVjdGlvbjEpID8gbnVsbCA6IHNlbGVjdGlvbjE7XG4gICAgICAgICAgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgICAgICAgZW1pdC5zdGFydCgpLmJydXNoKCkuZW5kKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiByZWRyYXcoKSB7XG4gICAgICB2YXIgZ3JvdXAgPSBzZWxlY3QodGhpcyksXG4gICAgICAgICAgc2VsZWN0aW9uID0gbG9jYWwkJDEodGhpcykuc2VsZWN0aW9uO1xuXG4gICAgICBpZiAoc2VsZWN0aW9uKSB7XG4gICAgICAgIGdyb3VwLnNlbGVjdEFsbChcIi5zZWxlY3Rpb25cIikuc3R5bGUoXCJkaXNwbGF5XCIsIG51bGwpLmF0dHIoXCJ4XCIsIHNlbGVjdGlvblswXVswXSkuYXR0cihcInlcIiwgc2VsZWN0aW9uWzBdWzFdKS5hdHRyKFwid2lkdGhcIiwgc2VsZWN0aW9uWzFdWzBdIC0gc2VsZWN0aW9uWzBdWzBdKS5hdHRyKFwiaGVpZ2h0XCIsIHNlbGVjdGlvblsxXVsxXSAtIHNlbGVjdGlvblswXVsxXSk7XG5cbiAgICAgICAgZ3JvdXAuc2VsZWN0QWxsKFwiLmhhbmRsZVwiKS5zdHlsZShcImRpc3BsYXlcIiwgbnVsbCkuYXR0cihcInhcIiwgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICByZXR1cm4gZC50eXBlW2QudHlwZS5sZW5ndGggLSAxXSA9PT0gXCJlXCIgPyBzZWxlY3Rpb25bMV1bMF0gLSBoYW5kbGVTaXplIC8gMiA6IHNlbGVjdGlvblswXVswXSAtIGhhbmRsZVNpemUgLyAyO1xuICAgICAgICB9KS5hdHRyKFwieVwiLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgIHJldHVybiBkLnR5cGVbMF0gPT09IFwic1wiID8gc2VsZWN0aW9uWzFdWzFdIC0gaGFuZGxlU2l6ZSAvIDIgOiBzZWxlY3Rpb25bMF1bMV0gLSBoYW5kbGVTaXplIC8gMjtcbiAgICAgICAgfSkuYXR0cihcIndpZHRoXCIsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgcmV0dXJuIGQudHlwZSA9PT0gXCJuXCIgfHwgZC50eXBlID09PSBcInNcIiA/IHNlbGVjdGlvblsxXVswXSAtIHNlbGVjdGlvblswXVswXSArIGhhbmRsZVNpemUgOiBoYW5kbGVTaXplO1xuICAgICAgICB9KS5hdHRyKFwiaGVpZ2h0XCIsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgcmV0dXJuIGQudHlwZSA9PT0gXCJlXCIgfHwgZC50eXBlID09PSBcIndcIiA/IHNlbGVjdGlvblsxXVsxXSAtIHNlbGVjdGlvblswXVsxXSArIGhhbmRsZVNpemUgOiBoYW5kbGVTaXplO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdyb3VwLnNlbGVjdEFsbChcIi5zZWxlY3Rpb24sLmhhbmRsZVwiKS5zdHlsZShcImRpc3BsYXlcIiwgXCJub25lXCIpLmF0dHIoXCJ4XCIsIG51bGwpLmF0dHIoXCJ5XCIsIG51bGwpLmF0dHIoXCJ3aWR0aFwiLCBudWxsKS5hdHRyKFwiaGVpZ2h0XCIsIG51bGwpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVtaXR0ZXIodGhhdCwgYXJncykge1xuICAgICAgcmV0dXJuIHRoYXQuX19icnVzaC5lbWl0dGVyIHx8IG5ldyBFbWl0dGVyKHRoYXQsIGFyZ3MpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIEVtaXR0ZXIodGhhdCwgYXJncykge1xuICAgICAgdGhpcy50aGF0ID0gdGhhdDtcbiAgICAgIHRoaXMuYXJncyA9IGFyZ3M7XG4gICAgICB0aGlzLnN0YXRlID0gdGhhdC5fX2JydXNoO1xuICAgICAgdGhpcy5hY3RpdmUgPSAwO1xuICAgIH1cblxuICAgIEVtaXR0ZXIucHJvdG90eXBlID0ge1xuICAgICAgYmVmb3Jlc3RhcnQ6IGZ1bmN0aW9uIGJlZm9yZXN0YXJ0KCkge1xuICAgICAgICBpZiAoKyt0aGlzLmFjdGl2ZSA9PT0gMSkgdGhpcy5zdGF0ZS5lbWl0dGVyID0gdGhpcywgdGhpcy5zdGFydGluZyA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSxcbiAgICAgIHN0YXJ0OiBmdW5jdGlvbiBzdGFydCgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhcnRpbmcpIHRoaXMuc3RhcnRpbmcgPSBmYWxzZSwgdGhpcy5lbWl0KFwic3RhcnRcIik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSxcbiAgICAgIGJydXNoOiBmdW5jdGlvbiBicnVzaCgpIHtcbiAgICAgICAgdGhpcy5lbWl0KFwiYnJ1c2hcIik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSxcbiAgICAgIGVuZDogZnVuY3Rpb24gZW5kKCkge1xuICAgICAgICBpZiAoLS10aGlzLmFjdGl2ZSA9PT0gMCkgZGVsZXRlIHRoaXMuc3RhdGUuZW1pdHRlciwgdGhpcy5lbWl0KFwiZW5kXCIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0sXG4gICAgICBlbWl0OiBmdW5jdGlvbiBlbWl0KHR5cGUpIHtcbiAgICAgICAgY3VzdG9tRXZlbnQobmV3IEJydXNoRXZlbnQoYnJ1c2gsIHR5cGUsIGRpbS5vdXRwdXQodGhpcy5zdGF0ZS5zZWxlY3Rpb24pKSwgbGlzdGVuZXJzLmFwcGx5LCBsaXN0ZW5lcnMsIFt0eXBlLCB0aGlzLnRoYXQsIHRoaXMuYXJnc10pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBzdGFydGVkKCkge1xuICAgICAgaWYgKGV4cG9ydHMuZXZlbnQudG91Y2hlcykge1xuICAgICAgICBpZiAoZXhwb3J0cy5ldmVudC5jaGFuZ2VkVG91Y2hlcy5sZW5ndGggPCBleHBvcnRzLmV2ZW50LnRvdWNoZXMubGVuZ3RoKSByZXR1cm4gbm9ldmVudCQxKCk7XG4gICAgICB9IGVsc2UgaWYgKHRvdWNoZW5kaW5nKSByZXR1cm47XG4gICAgICBpZiAoIWZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSByZXR1cm47XG5cbiAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICB0eXBlID0gZXhwb3J0cy5ldmVudC50YXJnZXQuX19kYXRhX18udHlwZSxcbiAgICAgICAgICBtb2RlID0gKGV4cG9ydHMuZXZlbnQubWV0YUtleSA/IHR5cGUgPSBcIm92ZXJsYXlcIiA6IHR5cGUpID09PSBcInNlbGVjdGlvblwiID8gTU9ERV9EUkFHIDogZXhwb3J0cy5ldmVudC5hbHRLZXkgPyBNT0RFX0NFTlRFUiA6IE1PREVfSEFORExFLFxuICAgICAgICAgIHNpZ25YID0gZGltID09PSBZID8gbnVsbCA6IHNpZ25zWFt0eXBlXSxcbiAgICAgICAgICBzaWduWSA9IGRpbSA9PT0gWCA/IG51bGwgOiBzaWduc1lbdHlwZV0sXG4gICAgICAgICAgc3RhdGUgPSBsb2NhbCQkMSh0aGF0KSxcbiAgICAgICAgICBleHRlbnQgPSBzdGF0ZS5leHRlbnQsXG4gICAgICAgICAgc2VsZWN0aW9uID0gc3RhdGUuc2VsZWN0aW9uLFxuICAgICAgICAgIFcgPSBleHRlbnRbMF1bMF0sXG4gICAgICAgICAgdzAsXG4gICAgICAgICAgdzEsXG4gICAgICAgICAgTiA9IGV4dGVudFswXVsxXSxcbiAgICAgICAgICBuMCxcbiAgICAgICAgICBuMSxcbiAgICAgICAgICBFID0gZXh0ZW50WzFdWzBdLFxuICAgICAgICAgIGUwLFxuICAgICAgICAgIGUxLFxuICAgICAgICAgIFMgPSBleHRlbnRbMV1bMV0sXG4gICAgICAgICAgczAsXG4gICAgICAgICAgczEsXG4gICAgICAgICAgZHgsXG4gICAgICAgICAgZHksXG4gICAgICAgICAgbW92aW5nLFxuICAgICAgICAgIHNoaWZ0aW5nID0gc2lnblggJiYgc2lnblkgJiYgZXhwb3J0cy5ldmVudC5zaGlmdEtleSxcbiAgICAgICAgICBsb2NrWCxcbiAgICAgICAgICBsb2NrWSxcbiAgICAgICAgICBwb2ludDAgPSBtb3VzZSh0aGF0KSxcbiAgICAgICAgICBwb2ludCA9IHBvaW50MCxcbiAgICAgICAgICBlbWl0ID0gZW1pdHRlcih0aGF0LCBhcmd1bWVudHMpLmJlZm9yZXN0YXJ0KCk7XG5cbiAgICAgIGlmICh0eXBlID09PSBcIm92ZXJsYXlcIikge1xuICAgICAgICBzdGF0ZS5zZWxlY3Rpb24gPSBzZWxlY3Rpb24gPSBbW3cwID0gZGltID09PSBZID8gVyA6IHBvaW50MFswXSwgbjAgPSBkaW0gPT09IFggPyBOIDogcG9pbnQwWzFdXSwgW2UwID0gZGltID09PSBZID8gRSA6IHcwLCBzMCA9IGRpbSA9PT0gWCA/IFMgOiBuMF1dO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdzAgPSBzZWxlY3Rpb25bMF1bMF07XG4gICAgICAgIG4wID0gc2VsZWN0aW9uWzBdWzFdO1xuICAgICAgICBlMCA9IHNlbGVjdGlvblsxXVswXTtcbiAgICAgICAgczAgPSBzZWxlY3Rpb25bMV1bMV07XG4gICAgICB9XG5cbiAgICAgIHcxID0gdzA7XG4gICAgICBuMSA9IG4wO1xuICAgICAgZTEgPSBlMDtcbiAgICAgIHMxID0gczA7XG5cbiAgICAgIHZhciBncm91cCA9IHNlbGVjdCh0aGF0KS5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJub25lXCIpO1xuXG4gICAgICB2YXIgb3ZlcmxheSA9IGdyb3VwLnNlbGVjdEFsbChcIi5vdmVybGF5XCIpLmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29yc1t0eXBlXSk7XG5cbiAgICAgIGlmIChleHBvcnRzLmV2ZW50LnRvdWNoZXMpIHtcbiAgICAgICAgZ3JvdXAub24oXCJ0b3VjaG1vdmUuYnJ1c2hcIiwgbW92ZWQsIHRydWUpLm9uKFwidG91Y2hlbmQuYnJ1c2ggdG91Y2hjYW5jZWwuYnJ1c2hcIiwgZW5kZWQsIHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHZpZXcgPSBzZWxlY3QoZXhwb3J0cy5ldmVudC52aWV3KS5vbihcImtleWRvd24uYnJ1c2hcIiwga2V5ZG93bmVkLCB0cnVlKS5vbihcImtleXVwLmJydXNoXCIsIGtleXVwcGVkLCB0cnVlKS5vbihcIm1vdXNlbW92ZS5icnVzaFwiLCBtb3ZlZCwgdHJ1ZSkub24oXCJtb3VzZXVwLmJydXNoXCIsIGVuZGVkLCB0cnVlKTtcblxuICAgICAgICBkcmFnRGlzYWJsZShleHBvcnRzLmV2ZW50LnZpZXcpO1xuICAgICAgfVxuXG4gICAgICBub3Byb3BhZ2F0aW9uJDEoKTtcbiAgICAgIGludGVycnVwdCh0aGF0KTtcbiAgICAgIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgICAgZW1pdC5zdGFydCgpO1xuXG4gICAgICBmdW5jdGlvbiBtb3ZlZCgpIHtcbiAgICAgICAgdmFyIHBvaW50MSA9IG1vdXNlKHRoYXQpO1xuICAgICAgICBpZiAoc2hpZnRpbmcgJiYgIWxvY2tYICYmICFsb2NrWSkge1xuICAgICAgICAgIGlmIChNYXRoLmFicyhwb2ludDFbMF0gLSBwb2ludFswXSkgPiBNYXRoLmFicyhwb2ludDFbMV0gLSBwb2ludFsxXSkpIGxvY2tZID0gdHJ1ZTtlbHNlIGxvY2tYID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBwb2ludCA9IHBvaW50MTtcbiAgICAgICAgbW92aW5nID0gdHJ1ZTtcbiAgICAgICAgbm9ldmVudCQxKCk7XG4gICAgICAgIG1vdmUoKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbW92ZSgpIHtcbiAgICAgICAgdmFyIHQ7XG5cbiAgICAgICAgZHggPSBwb2ludFswXSAtIHBvaW50MFswXTtcbiAgICAgICAgZHkgPSBwb2ludFsxXSAtIHBvaW50MFsxXTtcblxuICAgICAgICBzd2l0Y2ggKG1vZGUpIHtcbiAgICAgICAgICBjYXNlIE1PREVfU1BBQ0U6XG4gICAgICAgICAgY2FzZSBNT0RFX0RSQUc6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGlmIChzaWduWCkgZHggPSBNYXRoLm1heChXIC0gdzAsIE1hdGgubWluKEUgLSBlMCwgZHgpKSwgdzEgPSB3MCArIGR4LCBlMSA9IGUwICsgZHg7XG4gICAgICAgICAgICAgIGlmIChzaWduWSkgZHkgPSBNYXRoLm1heChOIC0gbjAsIE1hdGgubWluKFMgLSBzMCwgZHkpKSwgbjEgPSBuMCArIGR5LCBzMSA9IHMwICsgZHk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgTU9ERV9IQU5ETEU6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGlmIChzaWduWCA8IDApIGR4ID0gTWF0aC5tYXgoVyAtIHcwLCBNYXRoLm1pbihFIC0gdzAsIGR4KSksIHcxID0gdzAgKyBkeCwgZTEgPSBlMDtlbHNlIGlmIChzaWduWCA+IDApIGR4ID0gTWF0aC5tYXgoVyAtIGUwLCBNYXRoLm1pbihFIC0gZTAsIGR4KSksIHcxID0gdzAsIGUxID0gZTAgKyBkeDtcbiAgICAgICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgZHkgPSBNYXRoLm1heChOIC0gbjAsIE1hdGgubWluKFMgLSBuMCwgZHkpKSwgbjEgPSBuMCArIGR5LCBzMSA9IHMwO2Vsc2UgaWYgKHNpZ25ZID4gMCkgZHkgPSBNYXRoLm1heChOIC0gczAsIE1hdGgubWluKFMgLSBzMCwgZHkpKSwgbjEgPSBuMCwgczEgPSBzMCArIGR5O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIE1PREVfQ0VOVEVSOlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBpZiAoc2lnblgpIHcxID0gTWF0aC5tYXgoVywgTWF0aC5taW4oRSwgdzAgLSBkeCAqIHNpZ25YKSksIGUxID0gTWF0aC5tYXgoVywgTWF0aC5taW4oRSwgZTAgKyBkeCAqIHNpZ25YKSk7XG4gICAgICAgICAgICAgIGlmIChzaWduWSkgbjEgPSBNYXRoLm1heChOLCBNYXRoLm1pbihTLCBuMCAtIGR5ICogc2lnblkpKSwgczEgPSBNYXRoLm1heChOLCBNYXRoLm1pbihTLCBzMCArIGR5ICogc2lnblkpKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZTEgPCB3MSkge1xuICAgICAgICAgIHNpZ25YICo9IC0xO1xuICAgICAgICAgIHQgPSB3MCwgdzAgPSBlMCwgZTAgPSB0O1xuICAgICAgICAgIHQgPSB3MSwgdzEgPSBlMSwgZTEgPSB0O1xuICAgICAgICAgIGlmICh0eXBlIGluIGZsaXBYKSBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29yc1t0eXBlID0gZmxpcFhbdHlwZV1dKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzMSA8IG4xKSB7XG4gICAgICAgICAgc2lnblkgKj0gLTE7XG4gICAgICAgICAgdCA9IG4wLCBuMCA9IHMwLCBzMCA9IHQ7XG4gICAgICAgICAgdCA9IG4xLCBuMSA9IHMxLCBzMSA9IHQ7XG4gICAgICAgICAgaWYgKHR5cGUgaW4gZmxpcFkpIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGUgPSBmbGlwWVt0eXBlXV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0YXRlLnNlbGVjdGlvbikgc2VsZWN0aW9uID0gc3RhdGUuc2VsZWN0aW9uOyAvLyBNYXkgYmUgc2V0IGJ5IGJydXNoLm1vdmUhXG4gICAgICAgIGlmIChsb2NrWCkgdzEgPSBzZWxlY3Rpb25bMF1bMF0sIGUxID0gc2VsZWN0aW9uWzFdWzBdO1xuICAgICAgICBpZiAobG9ja1kpIG4xID0gc2VsZWN0aW9uWzBdWzFdLCBzMSA9IHNlbGVjdGlvblsxXVsxXTtcblxuICAgICAgICBpZiAoc2VsZWN0aW9uWzBdWzBdICE9PSB3MSB8fCBzZWxlY3Rpb25bMF1bMV0gIT09IG4xIHx8IHNlbGVjdGlvblsxXVswXSAhPT0gZTEgfHwgc2VsZWN0aW9uWzFdWzFdICE9PSBzMSkge1xuICAgICAgICAgIHN0YXRlLnNlbGVjdGlvbiA9IFtbdzEsIG4xXSwgW2UxLCBzMV1dO1xuICAgICAgICAgIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgICAgICAgIGVtaXQuYnJ1c2goKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBlbmRlZCgpIHtcbiAgICAgICAgbm9wcm9wYWdhdGlvbiQxKCk7XG4gICAgICAgIGlmIChleHBvcnRzLmV2ZW50LnRvdWNoZXMpIHtcbiAgICAgICAgICBpZiAoZXhwb3J0cy5ldmVudC50b3VjaGVzLmxlbmd0aCkgcmV0dXJuO1xuICAgICAgICAgIGlmICh0b3VjaGVuZGluZykgY2xlYXJUaW1lb3V0KHRvdWNoZW5kaW5nKTtcbiAgICAgICAgICB0b3VjaGVuZGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdG91Y2hlbmRpbmcgPSBudWxsO1xuICAgICAgICAgIH0sIDUwMCk7IC8vIEdob3N0IGNsaWNrcyBhcmUgZGVsYXllZCFcbiAgICAgICAgICBncm91cC5vbihcInRvdWNobW92ZS5icnVzaCB0b3VjaGVuZC5icnVzaCB0b3VjaGNhbmNlbC5icnVzaFwiLCBudWxsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB5ZXNkcmFnKGV4cG9ydHMuZXZlbnQudmlldywgbW92aW5nKTtcbiAgICAgICAgICB2aWV3Lm9uKFwia2V5ZG93bi5icnVzaCBrZXl1cC5icnVzaCBtb3VzZW1vdmUuYnJ1c2ggbW91c2V1cC5icnVzaFwiLCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgICBncm91cC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJhbGxcIik7XG4gICAgICAgIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzLm92ZXJsYXkpO1xuICAgICAgICBpZiAoc3RhdGUuc2VsZWN0aW9uKSBzZWxlY3Rpb24gPSBzdGF0ZS5zZWxlY3Rpb247IC8vIE1heSBiZSBzZXQgYnkgYnJ1c2gubW92ZSAob24gc3RhcnQpIVxuICAgICAgICBpZiAoZW1wdHkoc2VsZWN0aW9uKSkgc3RhdGUuc2VsZWN0aW9uID0gbnVsbCwgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgICAgIGVtaXQuZW5kKCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGtleWRvd25lZCgpIHtcbiAgICAgICAgc3dpdGNoIChleHBvcnRzLmV2ZW50LmtleUNvZGUpIHtcbiAgICAgICAgICBjYXNlIDE2OlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAvLyBTSElGVFxuICAgICAgICAgICAgICBzaGlmdGluZyA9IHNpZ25YICYmIHNpZ25ZO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIDE4OlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAvLyBBTFRcbiAgICAgICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfSEFORExFKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNpZ25YKSBlMCA9IGUxIC0gZHggKiBzaWduWCwgdzAgPSB3MSArIGR4ICogc2lnblg7XG4gICAgICAgICAgICAgICAgaWYgKHNpZ25ZKSBzMCA9IHMxIC0gZHkgKiBzaWduWSwgbjAgPSBuMSArIGR5ICogc2lnblk7XG4gICAgICAgICAgICAgICAgbW9kZSA9IE1PREVfQ0VOVEVSO1xuICAgICAgICAgICAgICAgIG1vdmUoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIDMyOlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAvLyBTUEFDRTsgdGFrZXMgcHJpb3JpdHkgb3ZlciBBTFRcbiAgICAgICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfSEFORExFIHx8IG1vZGUgPT09IE1PREVfQ0VOVEVSKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNpZ25YIDwgMCkgZTAgPSBlMSAtIGR4O2Vsc2UgaWYgKHNpZ25YID4gMCkgdzAgPSB3MSAtIGR4O1xuICAgICAgICAgICAgICAgIGlmIChzaWduWSA8IDApIHMwID0gczEgLSBkeTtlbHNlIGlmIChzaWduWSA+IDApIG4wID0gbjEgLSBkeTtcbiAgICAgICAgICAgICAgICBtb2RlID0gTU9ERV9TUEFDRTtcbiAgICAgICAgICAgICAgICBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29ycy5zZWxlY3Rpb24pO1xuICAgICAgICAgICAgICAgIG1vdmUoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIG5vZXZlbnQkMSgpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBrZXl1cHBlZCgpIHtcbiAgICAgICAgc3dpdGNoIChleHBvcnRzLmV2ZW50LmtleUNvZGUpIHtcbiAgICAgICAgICBjYXNlIDE2OlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAvLyBTSElGVFxuICAgICAgICAgICAgICBpZiAoc2hpZnRpbmcpIHtcbiAgICAgICAgICAgICAgICBsb2NrWCA9IGxvY2tZID0gc2hpZnRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBtb3ZlKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSAxODpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgLy8gQUxUXG4gICAgICAgICAgICAgIGlmIChtb2RlID09PSBNT0RFX0NFTlRFUikge1xuICAgICAgICAgICAgICAgIGlmIChzaWduWCA8IDApIGUwID0gZTE7ZWxzZSBpZiAoc2lnblggPiAwKSB3MCA9IHcxO1xuICAgICAgICAgICAgICAgIGlmIChzaWduWSA8IDApIHMwID0gczE7ZWxzZSBpZiAoc2lnblkgPiAwKSBuMCA9IG4xO1xuICAgICAgICAgICAgICAgIG1vZGUgPSBNT0RFX0hBTkRMRTtcbiAgICAgICAgICAgICAgICBtb3ZlKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgLy8gU1BBQ0VcbiAgICAgICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfU1BBQ0UpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXhwb3J0cy5ldmVudC5hbHRLZXkpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChzaWduWCkgZTAgPSBlMSAtIGR4ICogc2lnblgsIHcwID0gdzEgKyBkeCAqIHNpZ25YO1xuICAgICAgICAgICAgICAgICAgaWYgKHNpZ25ZKSBzMCA9IHMxIC0gZHkgKiBzaWduWSwgbjAgPSBuMSArIGR5ICogc2lnblk7XG4gICAgICAgICAgICAgICAgICBtb2RlID0gTU9ERV9DRU5URVI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGlmIChzaWduWCA8IDApIGUwID0gZTE7ZWxzZSBpZiAoc2lnblggPiAwKSB3MCA9IHcxO1xuICAgICAgICAgICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgczAgPSBzMTtlbHNlIGlmIChzaWduWSA+IDApIG4wID0gbjE7XG4gICAgICAgICAgICAgICAgICBtb2RlID0gTU9ERV9IQU5ETEU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGVdKTtcbiAgICAgICAgICAgICAgICBtb3ZlKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBub2V2ZW50JDEoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgICAgdmFyIHN0YXRlID0gdGhpcy5fX2JydXNoIHx8IHsgc2VsZWN0aW9uOiBudWxsIH07XG4gICAgICBzdGF0ZS5leHRlbnQgPSBleHRlbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIHN0YXRlLmRpbSA9IGRpbTtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG5cbiAgICBicnVzaC5leHRlbnQgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZXh0ZW50ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQ0KFtbK19bMF1bMF0sICtfWzBdWzFdXSwgWytfWzFdWzBdLCArX1sxXVsxXV1dKSwgYnJ1c2gpIDogZXh0ZW50O1xuICAgIH07XG5cbiAgICBicnVzaC5maWx0ZXIgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZmlsdGVyID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQ0KCEhXyksIGJydXNoKSA6IGZpbHRlcjtcbiAgICB9O1xuXG4gICAgYnJ1c2guaGFuZGxlU2l6ZSA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChoYW5kbGVTaXplID0gK18sIGJydXNoKSA6IGhhbmRsZVNpemU7XG4gICAgfTtcblxuICAgIGJydXNoLm9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHZhbHVlID0gbGlzdGVuZXJzLm9uLmFwcGx5KGxpc3RlbmVycywgYXJndW1lbnRzKTtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbGlzdGVuZXJzID8gYnJ1c2ggOiB2YWx1ZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGJydXNoO1xuICB9XG5cbiAgdmFyIGNvcyA9IE1hdGguY29zO1xuICB2YXIgc2luID0gTWF0aC5zaW47XG4gIHZhciBwaSQxID0gTWF0aC5QSTtcbiAgdmFyIGhhbGZQaSQxID0gcGkkMSAvIDI7XG4gIHZhciB0YXUkMSA9IHBpJDEgKiAyO1xuICB2YXIgbWF4JDEgPSBNYXRoLm1heDtcblxuICBmdW5jdGlvbiBjb21wYXJlVmFsdWUoY29tcGFyZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGNvbXBhcmUoYS5zb3VyY2UudmFsdWUgKyBhLnRhcmdldC52YWx1ZSwgYi5zb3VyY2UudmFsdWUgKyBiLnRhcmdldC52YWx1ZSk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBjaG9yZCA9IGZ1bmN0aW9uIGNob3JkKCkge1xuICAgIHZhciBwYWRBbmdsZSA9IDAsXG4gICAgICAgIHNvcnRHcm91cHMgPSBudWxsLFxuICAgICAgICBzb3J0U3ViZ3JvdXBzID0gbnVsbCxcbiAgICAgICAgc29ydENob3JkcyA9IG51bGw7XG5cbiAgICBmdW5jdGlvbiBjaG9yZChtYXRyaXgpIHtcbiAgICAgIHZhciBuID0gbWF0cml4Lmxlbmd0aCxcbiAgICAgICAgICBncm91cFN1bXMgPSBbXSxcbiAgICAgICAgICBncm91cEluZGV4ID0gc2VxdWVuY2UobiksXG4gICAgICAgICAgc3ViZ3JvdXBJbmRleCA9IFtdLFxuICAgICAgICAgIGNob3JkcyA9IFtdLFxuICAgICAgICAgIGdyb3VwcyA9IGNob3Jkcy5ncm91cHMgPSBuZXcgQXJyYXkobiksXG4gICAgICAgICAgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG4gKiBuKSxcbiAgICAgICAgICBrLFxuICAgICAgICAgIHgsXG4gICAgICAgICAgeDAsXG4gICAgICAgICAgZHgsXG4gICAgICAgICAgaSxcbiAgICAgICAgICBqO1xuXG4gICAgICAvLyBDb21wdXRlIHRoZSBzdW0uXG4gICAgICBrID0gMCwgaSA9IC0xO3doaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIHggPSAwLCBqID0gLTE7d2hpbGUgKCsraiA8IG4pIHtcbiAgICAgICAgICB4ICs9IG1hdHJpeFtpXVtqXTtcbiAgICAgICAgfVxuICAgICAgICBncm91cFN1bXMucHVzaCh4KTtcbiAgICAgICAgc3ViZ3JvdXBJbmRleC5wdXNoKHNlcXVlbmNlKG4pKTtcbiAgICAgICAgayArPSB4O1xuICAgICAgfVxuXG4gICAgICAvLyBTb3J0IGdyb3Vwc+KAplxuICAgICAgaWYgKHNvcnRHcm91cHMpIGdyb3VwSW5kZXguc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICByZXR1cm4gc29ydEdyb3Vwcyhncm91cFN1bXNbYV0sIGdyb3VwU3Vtc1tiXSk7XG4gICAgICB9KTtcblxuICAgICAgLy8gU29ydCBzdWJncm91cHPigKZcbiAgICAgIGlmIChzb3J0U3ViZ3JvdXBzKSBzdWJncm91cEluZGV4LmZvckVhY2goZnVuY3Rpb24gKGQsIGkpIHtcbiAgICAgICAgZC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgcmV0dXJuIHNvcnRTdWJncm91cHMobWF0cml4W2ldW2FdLCBtYXRyaXhbaV1bYl0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBDb252ZXJ0IHRoZSBzdW0gdG8gc2NhbGluZyBmYWN0b3IgZm9yIFswLCAycGldLlxuICAgICAgLy8gVE9ETyBBbGxvdyBzdGFydCBhbmQgZW5kIGFuZ2xlIHRvIGJlIHNwZWNpZmllZD9cbiAgICAgIC8vIFRPRE8gQWxsb3cgcGFkZGluZyB0byBiZSBzcGVjaWZpZWQgYXMgcGVyY2VudGFnZT9cbiAgICAgIGsgPSBtYXgkMSgwLCB0YXUkMSAtIHBhZEFuZ2xlICogbikgLyBrO1xuICAgICAgZHggPSBrID8gcGFkQW5nbGUgOiB0YXUkMSAvIG47XG5cbiAgICAgIC8vIENvbXB1dGUgdGhlIHN0YXJ0IGFuZCBlbmQgYW5nbGUgZm9yIGVhY2ggZ3JvdXAgYW5kIHN1Ymdyb3VwLlxuICAgICAgLy8gTm90ZTogT3BlcmEgaGFzIGEgYnVnIHJlb3JkZXJpbmcgb2JqZWN0IGxpdGVyYWwgcHJvcGVydGllcyFcbiAgICAgIHggPSAwLCBpID0gLTE7d2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgeDAgPSB4LCBqID0gLTE7d2hpbGUgKCsraiA8IG4pIHtcbiAgICAgICAgICB2YXIgZGkgPSBncm91cEluZGV4W2ldLFxuICAgICAgICAgICAgICBkaiA9IHN1Ymdyb3VwSW5kZXhbZGldW2pdLFxuICAgICAgICAgICAgICB2ID0gbWF0cml4W2RpXVtkal0sXG4gICAgICAgICAgICAgIGEwID0geCxcbiAgICAgICAgICAgICAgYTEgPSB4ICs9IHYgKiBrO1xuICAgICAgICAgIHN1Ymdyb3Vwc1tkaiAqIG4gKyBkaV0gPSB7XG4gICAgICAgICAgICBpbmRleDogZGksXG4gICAgICAgICAgICBzdWJpbmRleDogZGosXG4gICAgICAgICAgICBzdGFydEFuZ2xlOiBhMCxcbiAgICAgICAgICAgIGVuZEFuZ2xlOiBhMSxcbiAgICAgICAgICAgIHZhbHVlOiB2XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBncm91cHNbZGldID0ge1xuICAgICAgICAgIGluZGV4OiBkaSxcbiAgICAgICAgICBzdGFydEFuZ2xlOiB4MCxcbiAgICAgICAgICBlbmRBbmdsZTogeCxcbiAgICAgICAgICB2YWx1ZTogZ3JvdXBTdW1zW2RpXVxuICAgICAgICB9O1xuICAgICAgICB4ICs9IGR4O1xuICAgICAgfVxuXG4gICAgICAvLyBHZW5lcmF0ZSBjaG9yZHMgZm9yIGVhY2ggKG5vbi1lbXB0eSkgc3ViZ3JvdXAtc3ViZ3JvdXAgbGluay5cbiAgICAgIGkgPSAtMTt3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBqID0gaSAtIDE7d2hpbGUgKCsraiA8IG4pIHtcbiAgICAgICAgICB2YXIgc291cmNlID0gc3ViZ3JvdXBzW2ogKiBuICsgaV0sXG4gICAgICAgICAgICAgIHRhcmdldCA9IHN1Ymdyb3Vwc1tpICogbiArIGpdO1xuICAgICAgICAgIGlmIChzb3VyY2UudmFsdWUgfHwgdGFyZ2V0LnZhbHVlKSB7XG4gICAgICAgICAgICBjaG9yZHMucHVzaChzb3VyY2UudmFsdWUgPCB0YXJnZXQudmFsdWUgPyB7IHNvdXJjZTogdGFyZ2V0LCB0YXJnZXQ6IHNvdXJjZSB9IDogeyBzb3VyY2U6IHNvdXJjZSwgdGFyZ2V0OiB0YXJnZXQgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzb3J0Q2hvcmRzID8gY2hvcmRzLnNvcnQoc29ydENob3JkcykgOiBjaG9yZHM7XG4gICAgfVxuXG4gICAgY2hvcmQucGFkQW5nbGUgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkQW5nbGUgPSBtYXgkMSgwLCBfKSwgY2hvcmQpIDogcGFkQW5nbGU7XG4gICAgfTtcblxuICAgIGNob3JkLnNvcnRHcm91cHMgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc29ydEdyb3VwcyA9IF8sIGNob3JkKSA6IHNvcnRHcm91cHM7XG4gICAgfTtcblxuICAgIGNob3JkLnNvcnRTdWJncm91cHMgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc29ydFN1Ymdyb3VwcyA9IF8sIGNob3JkKSA6IHNvcnRTdWJncm91cHM7XG4gICAgfTtcblxuICAgIGNob3JkLnNvcnRDaG9yZHMgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoXyA9PSBudWxsID8gc29ydENob3JkcyA9IG51bGwgOiAoc29ydENob3JkcyA9IGNvbXBhcmVWYWx1ZShfKSkuXyA9IF8sIGNob3JkKSA6IHNvcnRDaG9yZHMgJiYgc29ydENob3Jkcy5fO1xuICAgIH07XG5cbiAgICByZXR1cm4gY2hvcmQ7XG4gIH07XG5cbiAgdmFyIHNsaWNlJDIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG5cbiAgdmFyIGNvbnN0YW50JDUgPSBmdW5jdGlvbiBjb25zdGFudCQ1KHgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHg7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgcGkkMiA9IE1hdGguUEk7XG4gIHZhciB0YXUkMiA9IDIgKiBwaSQyO1xuICB2YXIgZXBzaWxvbiQxID0gMWUtNjtcbiAgdmFyIHRhdUVwc2lsb24gPSB0YXUkMiAtIGVwc2lsb24kMTtcblxuICBmdW5jdGlvbiBQYXRoKCkge1xuICAgIHRoaXMuX3gwID0gdGhpcy5feTAgPSAvLyBzdGFydCBvZiBjdXJyZW50IHN1YnBhdGhcbiAgICB0aGlzLl94MSA9IHRoaXMuX3kxID0gbnVsbDsgLy8gZW5kIG9mIGN1cnJlbnQgc3VicGF0aFxuICAgIHRoaXMuXyA9IFwiXCI7XG4gIH1cblxuICBmdW5jdGlvbiBwYXRoKCkge1xuICAgIHJldHVybiBuZXcgUGF0aCgpO1xuICB9XG5cbiAgUGF0aC5wcm90b3R5cGUgPSBwYXRoLnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogUGF0aCxcbiAgICBtb3ZlVG86IGZ1bmN0aW9uIG1vdmVUbyh4LCB5KSB7XG4gICAgICB0aGlzLl8gKz0gXCJNXCIgKyAodGhpcy5feDAgPSB0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kwID0gdGhpcy5feTEgPSAreSk7XG4gICAgfSxcbiAgICBjbG9zZVBhdGg6IGZ1bmN0aW9uIGNsb3NlUGF0aCgpIHtcbiAgICAgIGlmICh0aGlzLl94MSAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLl94MSA9IHRoaXMuX3gwLCB0aGlzLl95MSA9IHRoaXMuX3kwO1xuICAgICAgICB0aGlzLl8gKz0gXCJaXCI7XG4gICAgICB9XG4gICAgfSxcbiAgICBsaW5lVG86IGZ1bmN0aW9uIGxpbmVUbyh4LCB5KSB7XG4gICAgICB0aGlzLl8gKz0gXCJMXCIgKyAodGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MSA9ICt5KTtcbiAgICB9LFxuICAgIHF1YWRyYXRpY0N1cnZlVG86IGZ1bmN0aW9uIHF1YWRyYXRpY0N1cnZlVG8oeDEsIHkxLCB4LCB5KSB7XG4gICAgICB0aGlzLl8gKz0gXCJRXCIgKyAreDEgKyBcIixcIiArICt5MSArIFwiLFwiICsgKHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTEgPSAreSk7XG4gICAgfSxcbiAgICBiZXppZXJDdXJ2ZVRvOiBmdW5jdGlvbiBiZXppZXJDdXJ2ZVRvKHgxLCB5MSwgeDIsIHkyLCB4LCB5KSB7XG4gICAgICB0aGlzLl8gKz0gXCJDXCIgKyAreDEgKyBcIixcIiArICt5MSArIFwiLFwiICsgK3gyICsgXCIsXCIgKyAreTIgKyBcIixcIiArICh0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kxID0gK3kpO1xuICAgIH0sXG4gICAgYXJjVG86IGZ1bmN0aW9uIGFyY1RvKHgxLCB5MSwgeDIsIHkyLCByKSB7XG4gICAgICB4MSA9ICt4MSwgeTEgPSAreTEsIHgyID0gK3gyLCB5MiA9ICt5MiwgciA9ICtyO1xuICAgICAgdmFyIHgwID0gdGhpcy5feDEsXG4gICAgICAgICAgeTAgPSB0aGlzLl95MSxcbiAgICAgICAgICB4MjEgPSB4MiAtIHgxLFxuICAgICAgICAgIHkyMSA9IHkyIC0geTEsXG4gICAgICAgICAgeDAxID0geDAgLSB4MSxcbiAgICAgICAgICB5MDEgPSB5MCAtIHkxLFxuICAgICAgICAgIGwwMV8yID0geDAxICogeDAxICsgeTAxICogeTAxO1xuXG4gICAgICAvLyBJcyB0aGUgcmFkaXVzIG5lZ2F0aXZlPyBFcnJvci5cbiAgICAgIGlmIChyIDwgMCkgdGhyb3cgbmV3IEVycm9yKFwibmVnYXRpdmUgcmFkaXVzOiBcIiArIHIpO1xuXG4gICAgICAvLyBJcyB0aGlzIHBhdGggZW1wdHk/IE1vdmUgdG8gKHgxLHkxKS5cbiAgICAgIGlmICh0aGlzLl94MSA9PT0gbnVsbCkge1xuICAgICAgICB0aGlzLl8gKz0gXCJNXCIgKyAodGhpcy5feDEgPSB4MSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkxKTtcbiAgICAgIH1cblxuICAgICAgLy8gT3IsIGlzICh4MSx5MSkgY29pbmNpZGVudCB3aXRoICh4MCx5MCk/IERvIG5vdGhpbmcuXG4gICAgICBlbHNlIGlmICghKGwwMV8yID4gZXBzaWxvbiQxKSkge31cblxuICAgICAgICAvLyBPciwgYXJlICh4MCx5MCksICh4MSx5MSkgYW5kICh4Mix5MikgY29sbGluZWFyP1xuICAgICAgICAvLyBFcXVpdmFsZW50bHksIGlzICh4MSx5MSkgY29pbmNpZGVudCB3aXRoICh4Mix5Mik/XG4gICAgICAgIC8vIE9yLCBpcyB0aGUgcmFkaXVzIHplcm8/IExpbmUgdG8gKHgxLHkxKS5cbiAgICAgICAgZWxzZSBpZiAoIShNYXRoLmFicyh5MDEgKiB4MjEgLSB5MjEgKiB4MDEpID4gZXBzaWxvbiQxKSB8fCAhcikge1xuICAgICAgICAgICAgdGhpcy5fICs9IFwiTFwiICsgKHRoaXMuX3gxID0geDEpICsgXCIsXCIgKyAodGhpcy5feTEgPSB5MSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gT3RoZXJ3aXNlLCBkcmF3IGFuIGFyYyFcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgdmFyIHgyMCA9IHgyIC0geDAsXG4gICAgICAgICAgICAgICAgICB5MjAgPSB5MiAtIHkwLFxuICAgICAgICAgICAgICAgICAgbDIxXzIgPSB4MjEgKiB4MjEgKyB5MjEgKiB5MjEsXG4gICAgICAgICAgICAgICAgICBsMjBfMiA9IHgyMCAqIHgyMCArIHkyMCAqIHkyMCxcbiAgICAgICAgICAgICAgICAgIGwyMSA9IE1hdGguc3FydChsMjFfMiksXG4gICAgICAgICAgICAgICAgICBsMDEgPSBNYXRoLnNxcnQobDAxXzIpLFxuICAgICAgICAgICAgICAgICAgbCA9IHIgKiBNYXRoLnRhbigocGkkMiAtIE1hdGguYWNvcygobDIxXzIgKyBsMDFfMiAtIGwyMF8yKSAvICgyICogbDIxICogbDAxKSkpIC8gMiksXG4gICAgICAgICAgICAgICAgICB0MDEgPSBsIC8gbDAxLFxuICAgICAgICAgICAgICAgICAgdDIxID0gbCAvIGwyMTtcblxuICAgICAgICAgICAgICAvLyBJZiB0aGUgc3RhcnQgdGFuZ2VudCBpcyBub3QgY29pbmNpZGVudCB3aXRoICh4MCx5MCksIGxpbmUgdG8uXG4gICAgICAgICAgICAgIGlmIChNYXRoLmFicyh0MDEgLSAxKSA+IGVwc2lsb24kMSkge1xuICAgICAgICAgICAgICAgIHRoaXMuXyArPSBcIkxcIiArICh4MSArIHQwMSAqIHgwMSkgKyBcIixcIiArICh5MSArIHQwMSAqIHkwMSk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB0aGlzLl8gKz0gXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIsMCwwLFwiICsgKyh5MDEgKiB4MjAgPiB4MDEgKiB5MjApICsgXCIsXCIgKyAodGhpcy5feDEgPSB4MSArIHQyMSAqIHgyMSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkxICsgdDIxICogeTIxKTtcbiAgICAgICAgICAgIH1cbiAgICB9LFxuICAgIGFyYzogZnVuY3Rpb24gYXJjKHgsIHksIHIsIGEwLCBhMSwgY2N3KSB7XG4gICAgICB4ID0gK3gsIHkgPSAreSwgciA9ICtyO1xuICAgICAgdmFyIGR4ID0gciAqIE1hdGguY29zKGEwKSxcbiAgICAgICAgICBkeSA9IHIgKiBNYXRoLnNpbihhMCksXG4gICAgICAgICAgeDAgPSB4ICsgZHgsXG4gICAgICAgICAgeTAgPSB5ICsgZHksXG4gICAgICAgICAgY3cgPSAxIF4gY2N3LFxuICAgICAgICAgIGRhID0gY2N3ID8gYTAgLSBhMSA6IGExIC0gYTA7XG5cbiAgICAgIC8vIElzIHRoZSByYWRpdXMgbmVnYXRpdmU/IEVycm9yLlxuICAgICAgaWYgKHIgPCAwKSB0aHJvdyBuZXcgRXJyb3IoXCJuZWdhdGl2ZSByYWRpdXM6IFwiICsgcik7XG5cbiAgICAgIC8vIElzIHRoaXMgcGF0aCBlbXB0eT8gTW92ZSB0byAoeDAseTApLlxuICAgICAgaWYgKHRoaXMuX3gxID09PSBudWxsKSB7XG4gICAgICAgIHRoaXMuXyArPSBcIk1cIiArIHgwICsgXCIsXCIgKyB5MDtcbiAgICAgIH1cblxuICAgICAgLy8gT3IsIGlzICh4MCx5MCkgbm90IGNvaW5jaWRlbnQgd2l0aCB0aGUgcHJldmlvdXMgcG9pbnQ/IExpbmUgdG8gKHgwLHkwKS5cbiAgICAgIGVsc2UgaWYgKE1hdGguYWJzKHRoaXMuX3gxIC0geDApID4gZXBzaWxvbiQxIHx8IE1hdGguYWJzKHRoaXMuX3kxIC0geTApID4gZXBzaWxvbiQxKSB7XG4gICAgICAgICAgdGhpcy5fICs9IFwiTFwiICsgeDAgKyBcIixcIiArIHkwO1xuICAgICAgICB9XG5cbiAgICAgIC8vIElzIHRoaXMgYXJjIGVtcHR5PyBXZeKAmXJlIGRvbmUuXG4gICAgICBpZiAoIXIpIHJldHVybjtcblxuICAgICAgLy8gRG9lcyB0aGUgYW5nbGUgZ28gdGhlIHdyb25nIHdheT8gRmxpcCB0aGUgZGlyZWN0aW9uLlxuICAgICAgaWYgKGRhIDwgMCkgZGEgPSBkYSAlIHRhdSQyICsgdGF1JDI7XG5cbiAgICAgIC8vIElzIHRoaXMgYSBjb21wbGV0ZSBjaXJjbGU/IERyYXcgdHdvIGFyY3MgdG8gY29tcGxldGUgdGhlIGNpcmNsZS5cbiAgICAgIGlmIChkYSA+IHRhdUVwc2lsb24pIHtcbiAgICAgICAgdGhpcy5fICs9IFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsMSxcIiArIGN3ICsgXCIsXCIgKyAoeCAtIGR4KSArIFwiLFwiICsgKHkgLSBkeSkgKyBcIkFcIiArIHIgKyBcIixcIiArIHIgKyBcIiwwLDEsXCIgKyBjdyArIFwiLFwiICsgKHRoaXMuX3gxID0geDApICsgXCIsXCIgKyAodGhpcy5feTEgPSB5MCk7XG4gICAgICB9XG5cbiAgICAgIC8vIElzIHRoaXMgYXJjIG5vbi1lbXB0eT8gRHJhdyBhbiBhcmMhXG4gICAgICBlbHNlIGlmIChkYSA+IGVwc2lsb24kMSkge1xuICAgICAgICAgIHRoaXMuXyArPSBcIkFcIiArIHIgKyBcIixcIiArIHIgKyBcIiwwLFwiICsgKyhkYSA+PSBwaSQyKSArIFwiLFwiICsgY3cgKyBcIixcIiArICh0aGlzLl94MSA9IHggKyByICogTWF0aC5jb3MoYTEpKSArIFwiLFwiICsgKHRoaXMuX3kxID0geSArIHIgKiBNYXRoLnNpbihhMSkpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICByZWN0OiBmdW5jdGlvbiByZWN0KHgsIHksIHcsIGgpIHtcbiAgICAgIHRoaXMuXyArPSBcIk1cIiArICh0aGlzLl94MCA9IHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTAgPSB0aGlzLl95MSA9ICt5KSArIFwiaFwiICsgK3cgKyBcInZcIiArICtoICsgXCJoXCIgKyAtdyArIFwiWlwiO1xuICAgIH0sXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIHRoaXMuXztcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gZGVmYXVsdFNvdXJjZShkKSB7XG4gICAgcmV0dXJuIGQuc291cmNlO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVmYXVsdFRhcmdldChkKSB7XG4gICAgcmV0dXJuIGQudGFyZ2V0O1xuICB9XG5cbiAgZnVuY3Rpb24gZGVmYXVsdFJhZGl1cyhkKSB7XG4gICAgcmV0dXJuIGQucmFkaXVzO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVmYXVsdFN0YXJ0QW5nbGUoZCkge1xuICAgIHJldHVybiBkLnN0YXJ0QW5nbGU7XG4gIH1cblxuICBmdW5jdGlvbiBkZWZhdWx0RW5kQW5nbGUoZCkge1xuICAgIHJldHVybiBkLmVuZEFuZ2xlO1xuICB9XG5cbiAgdmFyIHJpYmJvbiA9IGZ1bmN0aW9uIHJpYmJvbigpIHtcbiAgICB2YXIgc291cmNlID0gZGVmYXVsdFNvdXJjZSxcbiAgICAgICAgdGFyZ2V0ID0gZGVmYXVsdFRhcmdldCxcbiAgICAgICAgcmFkaXVzID0gZGVmYXVsdFJhZGl1cyxcbiAgICAgICAgc3RhcnRBbmdsZSA9IGRlZmF1bHRTdGFydEFuZ2xlLFxuICAgICAgICBlbmRBbmdsZSA9IGRlZmF1bHRFbmRBbmdsZSxcbiAgICAgICAgY29udGV4dCA9IG51bGw7XG5cbiAgICBmdW5jdGlvbiByaWJib24oKSB7XG4gICAgICB2YXIgYnVmZmVyLFxuICAgICAgICAgIGFyZ3YgPSBzbGljZSQyLmNhbGwoYXJndW1lbnRzKSxcbiAgICAgICAgICBzID0gc291cmNlLmFwcGx5KHRoaXMsIGFyZ3YpLFxuICAgICAgICAgIHQgPSB0YXJnZXQuYXBwbHkodGhpcywgYXJndiksXG4gICAgICAgICAgc3IgPSArcmFkaXVzLmFwcGx5KHRoaXMsIChhcmd2WzBdID0gcywgYXJndikpLFxuICAgICAgICAgIHNhMCA9IHN0YXJ0QW5nbGUuYXBwbHkodGhpcywgYXJndikgLSBoYWxmUGkkMSxcbiAgICAgICAgICBzYTEgPSBlbmRBbmdsZS5hcHBseSh0aGlzLCBhcmd2KSAtIGhhbGZQaSQxLFxuICAgICAgICAgIHN4MCA9IHNyICogY29zKHNhMCksXG4gICAgICAgICAgc3kwID0gc3IgKiBzaW4oc2EwKSxcbiAgICAgICAgICB0ciA9ICtyYWRpdXMuYXBwbHkodGhpcywgKGFyZ3ZbMF0gPSB0LCBhcmd2KSksXG4gICAgICAgICAgdGEwID0gc3RhcnRBbmdsZS5hcHBseSh0aGlzLCBhcmd2KSAtIGhhbGZQaSQxLFxuICAgICAgICAgIHRhMSA9IGVuZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3YpIC0gaGFsZlBpJDE7XG5cbiAgICAgIGlmICghY29udGV4dCkgY29udGV4dCA9IGJ1ZmZlciA9IHBhdGgoKTtcblxuICAgICAgY29udGV4dC5tb3ZlVG8oc3gwLCBzeTApO1xuICAgICAgY29udGV4dC5hcmMoMCwgMCwgc3IsIHNhMCwgc2ExKTtcbiAgICAgIGlmIChzYTAgIT09IHRhMCB8fCBzYTEgIT09IHRhMSkge1xuICAgICAgICAvLyBUT0RPIHNyICE9PSB0cj9cbiAgICAgICAgY29udGV4dC5xdWFkcmF0aWNDdXJ2ZVRvKDAsIDAsIHRyICogY29zKHRhMCksIHRyICogc2luKHRhMCkpO1xuICAgICAgICBjb250ZXh0LmFyYygwLCAwLCB0ciwgdGEwLCB0YTEpO1xuICAgICAgfVxuICAgICAgY29udGV4dC5xdWFkcmF0aWNDdXJ2ZVRvKDAsIDAsIHN4MCwgc3kwKTtcbiAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG5cbiAgICAgIGlmIChidWZmZXIpIHJldHVybiBjb250ZXh0ID0gbnVsbCwgYnVmZmVyICsgXCJcIiB8fCBudWxsO1xuICAgIH1cblxuICAgIHJpYmJvbi5yYWRpdXMgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFkaXVzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQ1KCtfKSwgcmliYm9uKSA6IHJhZGl1cztcbiAgICB9O1xuXG4gICAgcmliYm9uLnN0YXJ0QW5nbGUgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3RhcnRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkNSgrXyksIHJpYmJvbikgOiBzdGFydEFuZ2xlO1xuICAgIH07XG5cbiAgICByaWJib24uZW5kQW5nbGUgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZW5kQW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDUoK18pLCByaWJib24pIDogZW5kQW5nbGU7XG4gICAgfTtcblxuICAgIHJpYmJvbi5zb3VyY2UgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc291cmNlID0gXywgcmliYm9uKSA6IHNvdXJjZTtcbiAgICB9O1xuXG4gICAgcmliYm9uLnRhcmdldCA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0YXJnZXQgPSBfLCByaWJib24pIDogdGFyZ2V0O1xuICAgIH07XG5cbiAgICByaWJib24uY29udGV4dCA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjb250ZXh0ID0gXyA9PSBudWxsID8gbnVsbCA6IF8sIHJpYmJvbikgOiBjb250ZXh0O1xuICAgIH07XG5cbiAgICByZXR1cm4gcmliYm9uO1xuICB9O1xuXG4gIHZhciBwcmVmaXggPSBcIiRcIjtcblxuICBmdW5jdGlvbiBNYXAoKSB7fVxuXG4gIE1hcC5wcm90b3R5cGUgPSBtYXAkMS5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IE1hcCxcbiAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgIHJldHVybiBwcmVmaXggKyBrZXkgaW4gdGhpcztcbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgICAgcmV0dXJuIHRoaXNbcHJlZml4ICsga2V5XTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHRoaXNbcHJlZml4ICsga2V5XSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShrZXkpIHtcbiAgICAgIHZhciBwcm9wZXJ0eSA9IHByZWZpeCArIGtleTtcbiAgICAgIHJldHVybiBwcm9wZXJ0eSBpbiB0aGlzICYmIGRlbGV0ZSB0aGlzW3Byb3BlcnR5XTtcbiAgICB9LFxuICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIHtcbiAgICAgICAgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGRlbGV0ZSB0aGlzW3Byb3BlcnR5XTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGtleXM6IGZ1bmN0aW9uIGtleXMoKSB7XG4gICAgICB2YXIga2V5cyA9IFtdO1xuICAgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykge1xuICAgICAgICBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkga2V5cy5wdXNoKHByb3BlcnR5LnNsaWNlKDEpKTtcbiAgICAgIH1yZXR1cm4ga2V5cztcbiAgICB9LFxuICAgIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKCkge1xuICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykge1xuICAgICAgICBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgdmFsdWVzLnB1c2godGhpc1twcm9wZXJ0eV0pO1xuICAgICAgfXJldHVybiB2YWx1ZXM7XG4gICAgfSxcbiAgICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKCkge1xuICAgICAgdmFyIGVudHJpZXMgPSBbXTtcbiAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIHtcbiAgICAgICAgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGVudHJpZXMucHVzaCh7IGtleTogcHJvcGVydHkuc2xpY2UoMSksIHZhbHVlOiB0aGlzW3Byb3BlcnR5XSB9KTtcbiAgICAgIH1yZXR1cm4gZW50cmllcztcbiAgICB9LFxuICAgIHNpemU6IGZ1bmN0aW9uIHNpemUoKSB7XG4gICAgICB2YXIgc2l6ZSA9IDA7XG4gICAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSB7XG4gICAgICAgIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSArK3NpemU7XG4gICAgICB9cmV0dXJuIHNpemU7XG4gICAgfSxcbiAgICBlbXB0eTogZnVuY3Rpb24gZW1wdHkoKSB7XG4gICAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSB7XG4gICAgICAgIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSByZXR1cm4gZmFsc2U7XG4gICAgICB9cmV0dXJuIHRydWU7XG4gICAgfSxcbiAgICBlYWNoOiBmdW5jdGlvbiBlYWNoKGYpIHtcbiAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIHtcbiAgICAgICAgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGYodGhpc1twcm9wZXJ0eV0sIHByb3BlcnR5LnNsaWNlKDEpLCB0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFwJDEob2JqZWN0LCBmKSB7XG4gICAgdmFyIG1hcCA9IG5ldyBNYXAoKTtcblxuICAgIC8vIENvcHkgY29uc3RydWN0b3IuXG4gICAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIE1hcCkgb2JqZWN0LmVhY2goZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgIG1hcC5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgfSk7XG5cbiAgICAvLyBJbmRleCBhcnJheSBieSBudW1lcmljIGluZGV4IG9yIHNwZWNpZmllZCBrZXkgZnVuY3Rpb24uXG4gICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvYmplY3QpKSB7XG4gICAgICAgIHZhciBpID0gLTEsXG4gICAgICAgICAgICBuID0gb2JqZWN0Lmxlbmd0aCxcbiAgICAgICAgICAgIG87XG5cbiAgICAgICAgaWYgKGYgPT0gbnVsbCkgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgICBtYXAuc2V0KGksIG9iamVjdFtpXSk7XG4gICAgICAgIH0gZWxzZSB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICAgIG1hcC5zZXQoZihvID0gb2JqZWN0W2ldLCBpLCBvYmplY3QpLCBvKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBDb252ZXJ0IG9iamVjdCB0byBtYXAuXG4gICAgICBlbHNlIGlmIChvYmplY3QpIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBtYXAuc2V0KGtleSwgb2JqZWN0W2tleV0pO1xuICAgICAgICB9cmV0dXJuIG1hcDtcbiAgfVxuXG4gIHZhciBuZXN0ID0gZnVuY3Rpb24gbmVzdCgpIHtcbiAgICB2YXIga2V5cyA9IFtdLFxuICAgICAgICBfc29ydEtleXMgPSBbXSxcbiAgICAgICAgX3NvcnRWYWx1ZXMsXG4gICAgICAgIF9yb2xsdXAsXG4gICAgICAgIG5lc3Q7XG5cbiAgICBmdW5jdGlvbiBhcHBseShhcnJheSwgZGVwdGgsIGNyZWF0ZVJlc3VsdCwgc2V0UmVzdWx0KSB7XG4gICAgICBpZiAoZGVwdGggPj0ga2V5cy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKF9zb3J0VmFsdWVzICE9IG51bGwpIGFycmF5LnNvcnQoX3NvcnRWYWx1ZXMpO1xuICAgICAgICByZXR1cm4gX3JvbGx1cCAhPSBudWxsID8gX3JvbGx1cChhcnJheSkgOiBhcnJheTtcbiAgICAgIH1cblxuICAgICAgdmFyIGkgPSAtMSxcbiAgICAgICAgICBuID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGtleSA9IGtleXNbZGVwdGgrK10sXG4gICAgICAgICAga2V5VmFsdWUsXG4gICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgdmFsdWVzQnlLZXkgPSBtYXAkMSgpLFxuICAgICAgICAgIHZhbHVlcyxcbiAgICAgICAgICByZXN1bHQgPSBjcmVhdGVSZXN1bHQoKTtcblxuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgaWYgKHZhbHVlcyA9IHZhbHVlc0J5S2V5LmdldChrZXlWYWx1ZSA9IGtleSh2YWx1ZSA9IGFycmF5W2ldKSArIFwiXCIpKSB7XG4gICAgICAgICAgdmFsdWVzLnB1c2godmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbHVlc0J5S2V5LnNldChrZXlWYWx1ZSwgW3ZhbHVlXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFsdWVzQnlLZXkuZWFjaChmdW5jdGlvbiAodmFsdWVzLCBrZXkpIHtcbiAgICAgICAgc2V0UmVzdWx0KHJlc3VsdCwga2V5LCBhcHBseSh2YWx1ZXMsIGRlcHRoLCBjcmVhdGVSZXN1bHQsIHNldFJlc3VsdCkpO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX2VudHJpZXMobWFwLCBkZXB0aCkge1xuICAgICAgaWYgKCsrZGVwdGggPiBrZXlzLmxlbmd0aCkgcmV0dXJuIG1hcDtcbiAgICAgIHZhciBhcnJheSxcbiAgICAgICAgICBzb3J0S2V5ID0gX3NvcnRLZXlzW2RlcHRoIC0gMV07XG4gICAgICBpZiAoX3JvbGx1cCAhPSBudWxsICYmIGRlcHRoID49IGtleXMubGVuZ3RoKSBhcnJheSA9IG1hcC5lbnRyaWVzKCk7ZWxzZSBhcnJheSA9IFtdLCBtYXAuZWFjaChmdW5jdGlvbiAodiwgaykge1xuICAgICAgICBhcnJheS5wdXNoKHsga2V5OiBrLCB2YWx1ZXM6IF9lbnRyaWVzKHYsIGRlcHRoKSB9KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHNvcnRLZXkgIT0gbnVsbCA/IGFycmF5LnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIHNvcnRLZXkoYS5rZXksIGIua2V5KTtcbiAgICAgIH0pIDogYXJyYXk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5lc3QgPSB7XG4gICAgICBvYmplY3Q6IGZ1bmN0aW9uIG9iamVjdChhcnJheSkge1xuICAgICAgICByZXR1cm4gYXBwbHkoYXJyYXksIDAsIGNyZWF0ZU9iamVjdCwgc2V0T2JqZWN0KTtcbiAgICAgIH0sXG4gICAgICBtYXA6IGZ1bmN0aW9uIG1hcChhcnJheSkge1xuICAgICAgICByZXR1cm4gYXBwbHkoYXJyYXksIDAsIGNyZWF0ZU1hcCwgc2V0TWFwKTtcbiAgICAgIH0sXG4gICAgICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKGFycmF5KSB7XG4gICAgICAgIHJldHVybiBfZW50cmllcyhhcHBseShhcnJheSwgMCwgY3JlYXRlTWFwLCBzZXRNYXApLCAwKTtcbiAgICAgIH0sXG4gICAgICBrZXk6IGZ1bmN0aW9uIGtleShkKSB7XG4gICAgICAgIGtleXMucHVzaChkKTtyZXR1cm4gbmVzdDtcbiAgICAgIH0sXG4gICAgICBzb3J0S2V5czogZnVuY3Rpb24gc29ydEtleXMob3JkZXIpIHtcbiAgICAgICAgX3NvcnRLZXlzW2tleXMubGVuZ3RoIC0gMV0gPSBvcmRlcjtyZXR1cm4gbmVzdDtcbiAgICAgIH0sXG4gICAgICBzb3J0VmFsdWVzOiBmdW5jdGlvbiBzb3J0VmFsdWVzKG9yZGVyKSB7XG4gICAgICAgIF9zb3J0VmFsdWVzID0gb3JkZXI7cmV0dXJuIG5lc3Q7XG4gICAgICB9LFxuICAgICAgcm9sbHVwOiBmdW5jdGlvbiByb2xsdXAoZikge1xuICAgICAgICBfcm9sbHVwID0gZjtyZXR1cm4gbmVzdDtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZU9iamVjdCgpIHtcbiAgICByZXR1cm4ge307XG4gIH1cblxuICBmdW5jdGlvbiBzZXRPYmplY3Qob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZU1hcCgpIHtcbiAgICByZXR1cm4gbWFwJDEoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldE1hcChtYXAsIGtleSwgdmFsdWUpIHtcbiAgICBtYXAuc2V0KGtleSwgdmFsdWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gU2V0KCkge31cblxuICB2YXIgcHJvdG8gPSBtYXAkMS5wcm90b3R5cGU7XG5cbiAgU2V0LnByb3RvdHlwZSA9IHNldCQyLnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogU2V0LFxuICAgIGhhczogcHJvdG8uaGFzLFxuICAgIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgICB2YWx1ZSArPSBcIlwiO1xuICAgICAgdGhpc1twcmVmaXggKyB2YWx1ZV0gPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBwcm90by5yZW1vdmUsXG4gICAgY2xlYXI6IHByb3RvLmNsZWFyLFxuICAgIHZhbHVlczogcHJvdG8ua2V5cyxcbiAgICBzaXplOiBwcm90by5zaXplLFxuICAgIGVtcHR5OiBwcm90by5lbXB0eSxcbiAgICBlYWNoOiBwcm90by5lYWNoXG4gIH07XG5cbiAgZnVuY3Rpb24gc2V0JDIob2JqZWN0LCBmKSB7XG4gICAgdmFyIHNldCA9IG5ldyBTZXQoKTtcblxuICAgIC8vIENvcHkgY29uc3RydWN0b3IuXG4gICAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIFNldCkgb2JqZWN0LmVhY2goZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBzZXQuYWRkKHZhbHVlKTtcbiAgICB9KTtcblxuICAgIC8vIE90aGVyd2lzZSwgYXNzdW1lIGl04oCZcyBhbiBhcnJheS5cbiAgICBlbHNlIGlmIChvYmplY3QpIHtcbiAgICAgICAgdmFyIGkgPSAtMSxcbiAgICAgICAgICAgIG4gPSBvYmplY3QubGVuZ3RoO1xuICAgICAgICBpZiAoZiA9PSBudWxsKSB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICAgIHNldC5hZGQob2JqZWN0W2ldKTtcbiAgICAgICAgfSBlbHNlIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgICAgc2V0LmFkZChmKG9iamVjdFtpXSwgaSwgb2JqZWN0KSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgIHJldHVybiBzZXQ7XG4gIH1cblxuICB2YXIga2V5cyA9IGZ1bmN0aW9uIGtleXMobWFwKSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gbWFwKSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9cmV0dXJuIGtleXM7XG4gIH07XG5cbiAgdmFyIHZhbHVlcyA9IGZ1bmN0aW9uIHZhbHVlcyhtYXApIHtcbiAgICB2YXIgdmFsdWVzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG1hcCkge1xuICAgICAgdmFsdWVzLnB1c2gobWFwW2tleV0pO1xuICAgIH1yZXR1cm4gdmFsdWVzO1xuICB9O1xuXG4gIHZhciBlbnRyaWVzID0gZnVuY3Rpb24gZW50cmllcyhtYXApIHtcbiAgICB2YXIgZW50cmllcyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBtYXApIHtcbiAgICAgIGVudHJpZXMucHVzaCh7IGtleToga2V5LCB2YWx1ZTogbWFwW2tleV0gfSk7XG4gICAgfXJldHVybiBlbnRyaWVzO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG9iamVjdENvbnZlcnRlcihjb2x1bW5zKSB7XG4gICAgcmV0dXJuIG5ldyBGdW5jdGlvbihcImRcIiwgXCJyZXR1cm4ge1wiICsgY29sdW1ucy5tYXAoZnVuY3Rpb24gKG5hbWUsIGkpIHtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShuYW1lKSArIFwiOiBkW1wiICsgaSArIFwiXVwiO1xuICAgIH0pLmpvaW4oXCIsXCIpICsgXCJ9XCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3VzdG9tQ29udmVydGVyKGNvbHVtbnMsIGYpIHtcbiAgICB2YXIgb2JqZWN0ID0gb2JqZWN0Q29udmVydGVyKGNvbHVtbnMpO1xuICAgIHJldHVybiBmdW5jdGlvbiAocm93LCBpKSB7XG4gICAgICByZXR1cm4gZihvYmplY3Qocm93KSwgaSwgY29sdW1ucyk7XG4gICAgfTtcbiAgfVxuXG4gIC8vIENvbXB1dGUgdW5pcXVlIGNvbHVtbnMgaW4gb3JkZXIgb2YgZGlzY292ZXJ5LlxuICBmdW5jdGlvbiBpbmZlckNvbHVtbnMocm93cykge1xuICAgIHZhciBjb2x1bW5TZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpLFxuICAgICAgICBjb2x1bW5zID0gW107XG5cbiAgICByb3dzLmZvckVhY2goZnVuY3Rpb24gKHJvdykge1xuICAgICAgZm9yICh2YXIgY29sdW1uIGluIHJvdykge1xuICAgICAgICBpZiAoIShjb2x1bW4gaW4gY29sdW1uU2V0KSkge1xuICAgICAgICAgIGNvbHVtbnMucHVzaChjb2x1bW5TZXRbY29sdW1uXSA9IGNvbHVtbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBjb2x1bW5zO1xuICB9XG5cbiAgdmFyIGRzdiA9IGZ1bmN0aW9uIGRzdihkZWxpbWl0ZXIpIHtcbiAgICB2YXIgcmVGb3JtYXQgPSBuZXcgUmVnRXhwKFwiW1xcXCJcIiArIGRlbGltaXRlciArIFwiXFxuXFxyXVwiKSxcbiAgICAgICAgZGVsaW1pdGVyQ29kZSA9IGRlbGltaXRlci5jaGFyQ29kZUF0KDApO1xuXG4gICAgZnVuY3Rpb24gcGFyc2UodGV4dCwgZikge1xuICAgICAgdmFyIGNvbnZlcnQsXG4gICAgICAgICAgY29sdW1ucyxcbiAgICAgICAgICByb3dzID0gcGFyc2VSb3dzKHRleHQsIGZ1bmN0aW9uIChyb3csIGkpIHtcbiAgICAgICAgaWYgKGNvbnZlcnQpIHJldHVybiBjb252ZXJ0KHJvdywgaSAtIDEpO1xuICAgICAgICBjb2x1bW5zID0gcm93LCBjb252ZXJ0ID0gZiA/IGN1c3RvbUNvbnZlcnRlcihyb3csIGYpIDogb2JqZWN0Q29udmVydGVyKHJvdyk7XG4gICAgICB9KTtcbiAgICAgIHJvd3MuY29sdW1ucyA9IGNvbHVtbnM7XG4gICAgICByZXR1cm4gcm93cztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZVJvd3ModGV4dCwgZikge1xuICAgICAgdmFyIEVPTCA9IHt9LFxuICAgICAgICAgIC8vIHNlbnRpbmVsIHZhbHVlIGZvciBlbmQtb2YtbGluZVxuICAgICAgRU9GID0ge30sXG4gICAgICAgICAgLy8gc2VudGluZWwgdmFsdWUgZm9yIGVuZC1vZi1maWxlXG4gICAgICByb3dzID0gW10sXG4gICAgICAgICAgLy8gb3V0cHV0IHJvd3NcbiAgICAgIE4gPSB0ZXh0Lmxlbmd0aCxcbiAgICAgICAgICBJID0gMCxcbiAgICAgICAgICAvLyBjdXJyZW50IGNoYXJhY3RlciBpbmRleFxuICAgICAgbiA9IDAsXG4gICAgICAgICAgLy8gdGhlIGN1cnJlbnQgbGluZSBudW1iZXJcbiAgICAgIHQsXG4gICAgICAgICAgLy8gdGhlIGN1cnJlbnQgdG9rZW5cbiAgICAgIGVvbDsgLy8gaXMgdGhlIGN1cnJlbnQgdG9rZW4gZm9sbG93ZWQgYnkgRU9MP1xuXG4gICAgICBmdW5jdGlvbiB0b2tlbigpIHtcbiAgICAgICAgaWYgKEkgPj0gTikgcmV0dXJuIEVPRjsgLy8gc3BlY2lhbCBjYXNlOiBlbmQgb2YgZmlsZVxuICAgICAgICBpZiAoZW9sKSByZXR1cm4gZW9sID0gZmFsc2UsIEVPTDsgLy8gc3BlY2lhbCBjYXNlOiBlbmQgb2YgbGluZVxuXG4gICAgICAgIC8vIHNwZWNpYWwgY2FzZTogcXVvdGVzXG4gICAgICAgIHZhciBqID0gSSxcbiAgICAgICAgICAgIGM7XG4gICAgICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoaikgPT09IDM0KSB7XG4gICAgICAgICAgdmFyIGkgPSBqO1xuICAgICAgICAgIHdoaWxlIChpKysgPCBOKSB7XG4gICAgICAgICAgICBpZiAodGV4dC5jaGFyQ29kZUF0KGkpID09PSAzNCkge1xuICAgICAgICAgICAgICBpZiAodGV4dC5jaGFyQ29kZUF0KGkgKyAxKSAhPT0gMzQpIGJyZWFrO1xuICAgICAgICAgICAgICArK2k7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIEkgPSBpICsgMjtcbiAgICAgICAgICBjID0gdGV4dC5jaGFyQ29kZUF0KGkgKyAxKTtcbiAgICAgICAgICBpZiAoYyA9PT0gMTMpIHtcbiAgICAgICAgICAgIGVvbCA9IHRydWU7XG4gICAgICAgICAgICBpZiAodGV4dC5jaGFyQ29kZUF0KGkgKyAyKSA9PT0gMTApICsrSTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09IDEwKSB7XG4gICAgICAgICAgICBlb2wgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGV4dC5zbGljZShqICsgMSwgaSkucmVwbGFjZSgvXCJcIi9nLCBcIlxcXCJcIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjb21tb24gY2FzZTogZmluZCBuZXh0IGRlbGltaXRlciBvciBuZXdsaW5lXG4gICAgICAgIHdoaWxlIChJIDwgTikge1xuICAgICAgICAgIHZhciBrID0gMTtcbiAgICAgICAgICBjID0gdGV4dC5jaGFyQ29kZUF0KEkrKyk7XG4gICAgICAgICAgaWYgKGMgPT09IDEwKSBlb2wgPSB0cnVlOyAvLyBcXG5cbiAgICAgICAgICBlbHNlIGlmIChjID09PSAxMykge1xuICAgICAgICAgICAgICBlb2wgPSB0cnVlO2lmICh0ZXh0LmNoYXJDb2RlQXQoSSkgPT09IDEwKSArK0ksICsraztcbiAgICAgICAgICAgIH0gLy8gXFxyfFxcclxcblxuICAgICAgICAgICAgZWxzZSBpZiAoYyAhPT0gZGVsaW1pdGVyQ29kZSkgY29udGludWU7XG4gICAgICAgICAgcmV0dXJuIHRleHQuc2xpY2UoaiwgSSAtIGspO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc3BlY2lhbCBjYXNlOiBsYXN0IHRva2VuIGJlZm9yZSBFT0ZcbiAgICAgICAgcmV0dXJuIHRleHQuc2xpY2Uoaik7XG4gICAgICB9XG5cbiAgICAgIHdoaWxlICgodCA9IHRva2VuKCkpICE9PSBFT0YpIHtcbiAgICAgICAgdmFyIGEgPSBbXTtcbiAgICAgICAgd2hpbGUgKHQgIT09IEVPTCAmJiB0ICE9PSBFT0YpIHtcbiAgICAgICAgICBhLnB1c2godCk7XG4gICAgICAgICAgdCA9IHRva2VuKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGYgJiYgKGEgPSBmKGEsIG4rKykpID09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgICByb3dzLnB1c2goYSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByb3dzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZvcm1hdChyb3dzLCBjb2x1bW5zKSB7XG4gICAgICBpZiAoY29sdW1ucyA9PSBudWxsKSBjb2x1bW5zID0gaW5mZXJDb2x1bW5zKHJvd3MpO1xuICAgICAgcmV0dXJuIFtjb2x1bW5zLm1hcChmb3JtYXRWYWx1ZSkuam9pbihkZWxpbWl0ZXIpXS5jb25jYXQocm93cy5tYXAoZnVuY3Rpb24gKHJvdykge1xuICAgICAgICByZXR1cm4gY29sdW1ucy5tYXAoZnVuY3Rpb24gKGNvbHVtbikge1xuICAgICAgICAgIHJldHVybiBmb3JtYXRWYWx1ZShyb3dbY29sdW1uXSk7XG4gICAgICAgIH0pLmpvaW4oZGVsaW1pdGVyKTtcbiAgICAgIH0pKS5qb2luKFwiXFxuXCIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZvcm1hdFJvd3Mocm93cykge1xuICAgICAgcmV0dXJuIHJvd3MubWFwKGZvcm1hdFJvdykuam9pbihcIlxcblwiKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmb3JtYXRSb3cocm93KSB7XG4gICAgICByZXR1cm4gcm93Lm1hcChmb3JtYXRWYWx1ZSkuam9pbihkZWxpbWl0ZXIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZvcm1hdFZhbHVlKHRleHQpIHtcbiAgICAgIHJldHVybiB0ZXh0ID09IG51bGwgPyBcIlwiIDogcmVGb3JtYXQudGVzdCh0ZXh0ICs9IFwiXCIpID8gXCJcXFwiXCIgKyB0ZXh0LnJlcGxhY2UoL1xcXCIvZywgXCJcXFwiXFxcIlwiKSArIFwiXFxcIlwiIDogdGV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgcGFyc2U6IHBhcnNlLFxuICAgICAgcGFyc2VSb3dzOiBwYXJzZVJvd3MsXG4gICAgICBmb3JtYXQ6IGZvcm1hdCxcbiAgICAgIGZvcm1hdFJvd3M6IGZvcm1hdFJvd3NcbiAgICB9O1xuICB9O1xuXG4gIHZhciBjc3YgPSBkc3YoXCIsXCIpO1xuXG4gIHZhciBjc3ZQYXJzZSA9IGNzdi5wYXJzZTtcbiAgdmFyIGNzdlBhcnNlUm93cyA9IGNzdi5wYXJzZVJvd3M7XG4gIHZhciBjc3ZGb3JtYXQgPSBjc3YuZm9ybWF0O1xuICB2YXIgY3N2Rm9ybWF0Um93cyA9IGNzdi5mb3JtYXRSb3dzO1xuXG4gIHZhciB0c3YgPSBkc3YoXCJcXHRcIik7XG5cbiAgdmFyIHRzdlBhcnNlID0gdHN2LnBhcnNlO1xuICB2YXIgdHN2UGFyc2VSb3dzID0gdHN2LnBhcnNlUm93cztcbiAgdmFyIHRzdkZvcm1hdCA9IHRzdi5mb3JtYXQ7XG4gIHZhciB0c3ZGb3JtYXRSb3dzID0gdHN2LmZvcm1hdFJvd3M7XG5cbiAgdmFyIGNlbnRlciQxID0gZnVuY3Rpb24gY2VudGVyJDEoeCwgeSkge1xuICAgIHZhciBub2RlcztcblxuICAgIGlmICh4ID09IG51bGwpIHggPSAwO1xuICAgIGlmICh5ID09IG51bGwpIHkgPSAwO1xuXG4gICAgZnVuY3Rpb24gZm9yY2UoKSB7XG4gICAgICB2YXIgaSxcbiAgICAgICAgICBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgc3ggPSAwLFxuICAgICAgICAgIHN5ID0gMDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBub2RlID0gbm9kZXNbaV0sIHN4ICs9IG5vZGUueCwgc3kgKz0gbm9kZS55O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHN4ID0gc3ggLyBuIC0geCwgc3kgPSBzeSAvIG4gLSB5LCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBub2RlID0gbm9kZXNbaV0sIG5vZGUueCAtPSBzeCwgbm9kZS55IC09IHN5O1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvcmNlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoXykge1xuICAgICAgbm9kZXMgPSBfO1xuICAgIH07XG5cbiAgICBmb3JjZS54ID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHggPSArXywgZm9yY2UpIDogeDtcbiAgICB9O1xuXG4gICAgZm9yY2UueSA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5ID0gK18sIGZvcmNlKSA6IHk7XG4gICAgfTtcblxuICAgIHJldHVybiBmb3JjZTtcbiAgfTtcblxuICB2YXIgY29uc3RhbnQkNiA9IGZ1bmN0aW9uIGNvbnN0YW50JDYoeCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4geDtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBqaWdnbGUgPSBmdW5jdGlvbiBqaWdnbGUoKSB7XG4gICAgcmV0dXJuIChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIDFlLTY7XG4gIH07XG5cbiAgdmFyIHRyZWVfYWRkID0gZnVuY3Rpb24gdHJlZV9hZGQoZCkge1xuICAgIHZhciB4ID0gK3RoaXMuX3guY2FsbChudWxsLCBkKSxcbiAgICAgICAgeSA9ICt0aGlzLl95LmNhbGwobnVsbCwgZCk7XG4gICAgcmV0dXJuIGFkZCh0aGlzLmNvdmVyKHgsIHkpLCB4LCB5LCBkKTtcbiAgfTtcblxuICBmdW5jdGlvbiBhZGQodHJlZSwgeCwgeSwgZCkge1xuICAgIGlmIChpc05hTih4KSB8fCBpc05hTih5KSkgcmV0dXJuIHRyZWU7IC8vIGlnbm9yZSBpbnZhbGlkIHBvaW50c1xuXG4gICAgdmFyIHBhcmVudCxcbiAgICAgICAgbm9kZSA9IHRyZWUuX3Jvb3QsXG4gICAgICAgIGxlYWYgPSB7IGRhdGE6IGQgfSxcbiAgICAgICAgeDAgPSB0cmVlLl94MCxcbiAgICAgICAgeTAgPSB0cmVlLl95MCxcbiAgICAgICAgeDEgPSB0cmVlLl94MSxcbiAgICAgICAgeTEgPSB0cmVlLl95MSxcbiAgICAgICAgeG0sXG4gICAgICAgIHltLFxuICAgICAgICB4cCxcbiAgICAgICAgeXAsXG4gICAgICAgIHJpZ2h0LFxuICAgICAgICBib3R0b20sXG4gICAgICAgIGksXG4gICAgICAgIGo7XG5cbiAgICAvLyBJZiB0aGUgdHJlZSBpcyBlbXB0eSwgaW5pdGlhbGl6ZSB0aGUgcm9vdCBhcyBhIGxlYWYuXG4gICAgaWYgKCFub2RlKSByZXR1cm4gdHJlZS5fcm9vdCA9IGxlYWYsIHRyZWU7XG5cbiAgICAvLyBGaW5kIHRoZSBleGlzdGluZyBsZWFmIGZvciB0aGUgbmV3IHBvaW50LCBvciBhZGQgaXQuXG4gICAgd2hpbGUgKG5vZGUubGVuZ3RoKSB7XG4gICAgICBpZiAocmlnaHQgPSB4ID49ICh4bSA9ICh4MCArIHgxKSAvIDIpKSB4MCA9IHhtO2Vsc2UgeDEgPSB4bTtcbiAgICAgIGlmIChib3R0b20gPSB5ID49ICh5bSA9ICh5MCArIHkxKSAvIDIpKSB5MCA9IHltO2Vsc2UgeTEgPSB5bTtcbiAgICAgIGlmIChwYXJlbnQgPSBub2RlLCAhKG5vZGUgPSBub2RlW2kgPSBib3R0b20gPDwgMSB8IHJpZ2h0XSkpIHJldHVybiBwYXJlbnRbaV0gPSBsZWFmLCB0cmVlO1xuICAgIH1cblxuICAgIC8vIElzIHRoZSBuZXcgcG9pbnQgaXMgZXhhY3RseSBjb2luY2lkZW50IHdpdGggdGhlIGV4aXN0aW5nIHBvaW50P1xuICAgIHhwID0gK3RyZWUuX3guY2FsbChudWxsLCBub2RlLmRhdGEpO1xuICAgIHlwID0gK3RyZWUuX3kuY2FsbChudWxsLCBub2RlLmRhdGEpO1xuICAgIGlmICh4ID09PSB4cCAmJiB5ID09PSB5cCkgcmV0dXJuIGxlYWYubmV4dCA9IG5vZGUsIHBhcmVudCA/IHBhcmVudFtpXSA9IGxlYWYgOiB0cmVlLl9yb290ID0gbGVhZiwgdHJlZTtcblxuICAgIC8vIE90aGVyd2lzZSwgc3BsaXQgdGhlIGxlYWYgbm9kZSB1bnRpbCB0aGUgb2xkIGFuZCBuZXcgcG9pbnQgYXJlIHNlcGFyYXRlZC5cbiAgICBkbyB7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQgPyBwYXJlbnRbaV0gPSBuZXcgQXJyYXkoNCkgOiB0cmVlLl9yb290ID0gbmV3IEFycmF5KDQpO1xuICAgICAgaWYgKHJpZ2h0ID0geCA+PSAoeG0gPSAoeDAgKyB4MSkgLyAyKSkgeDAgPSB4bTtlbHNlIHgxID0geG07XG4gICAgICBpZiAoYm90dG9tID0geSA+PSAoeW0gPSAoeTAgKyB5MSkgLyAyKSkgeTAgPSB5bTtlbHNlIHkxID0geW07XG4gICAgfSB3aGlsZSAoKGkgPSBib3R0b20gPDwgMSB8IHJpZ2h0KSA9PT0gKGogPSAoeXAgPj0geW0pIDw8IDEgfCB4cCA+PSB4bSkpO1xuICAgIHJldHVybiBwYXJlbnRbal0gPSBub2RlLCBwYXJlbnRbaV0gPSBsZWFmLCB0cmVlO1xuICB9XG5cbiAgZnVuY3Rpb24gYWRkQWxsKGRhdGEpIHtcbiAgICB2YXIgZCxcbiAgICAgICAgaSxcbiAgICAgICAgbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICB4LFxuICAgICAgICB5LFxuICAgICAgICB4eiA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgeXogPSBuZXcgQXJyYXkobiksXG4gICAgICAgIHgwID0gSW5maW5pdHksXG4gICAgICAgIHkwID0gSW5maW5pdHksXG4gICAgICAgIHgxID0gLUluZmluaXR5LFxuICAgICAgICB5MSA9IC1JbmZpbml0eTtcblxuICAgIC8vIENvbXB1dGUgdGhlIHBvaW50cyBhbmQgdGhlaXIgZXh0ZW50LlxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChpc05hTih4ID0gK3RoaXMuX3guY2FsbChudWxsLCBkID0gZGF0YVtpXSkpIHx8IGlzTmFOKHkgPSArdGhpcy5feS5jYWxsKG51bGwsIGQpKSkgY29udGludWU7XG4gICAgICB4eltpXSA9IHg7XG4gICAgICB5eltpXSA9IHk7XG4gICAgICBpZiAoeCA8IHgwKSB4MCA9IHg7XG4gICAgICBpZiAoeCA+IHgxKSB4MSA9IHg7XG4gICAgICBpZiAoeSA8IHkwKSB5MCA9IHk7XG4gICAgICBpZiAoeSA+IHkxKSB5MSA9IHk7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlcmUgd2VyZSBubyAodmFsaWQpIHBvaW50cywgaW5oZXJpdCB0aGUgZXhpc3RpbmcgZXh0ZW50LlxuICAgIGlmICh4MSA8IHgwKSB4MCA9IHRoaXMuX3gwLCB4MSA9IHRoaXMuX3gxO1xuICAgIGlmICh5MSA8IHkwKSB5MCA9IHRoaXMuX3kwLCB5MSA9IHRoaXMuX3kxO1xuXG4gICAgLy8gRXhwYW5kIHRoZSB0cmVlIHRvIGNvdmVyIHRoZSBuZXcgcG9pbnRzLlxuICAgIHRoaXMuY292ZXIoeDAsIHkwKS5jb3Zlcih4MSwgeTEpO1xuXG4gICAgLy8gQWRkIHRoZSBuZXcgcG9pbnRzLlxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGFkZCh0aGlzLCB4eltpXSwgeXpbaV0sIGRhdGFbaV0pO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgdmFyIHRyZWVfY292ZXIgPSBmdW5jdGlvbiB0cmVlX2NvdmVyKHgsIHkpIHtcbiAgICBpZiAoaXNOYU4oeCA9ICt4KSB8fCBpc05hTih5ID0gK3kpKSByZXR1cm4gdGhpczsgLy8gaWdub3JlIGludmFsaWQgcG9pbnRzXG5cbiAgICB2YXIgeDAgPSB0aGlzLl94MCxcbiAgICAgICAgeTAgPSB0aGlzLl95MCxcbiAgICAgICAgeDEgPSB0aGlzLl94MSxcbiAgICAgICAgeTEgPSB0aGlzLl95MTtcblxuICAgIC8vIElmIHRoZSBxdWFkdHJlZSBoYXMgbm8gZXh0ZW50LCBpbml0aWFsaXplIHRoZW0uXG4gICAgLy8gSW50ZWdlciBleHRlbnQgYXJlIG5lY2Vzc2FyeSBzbyB0aGF0IGlmIHdlIGxhdGVyIGRvdWJsZSB0aGUgZXh0ZW50LFxuICAgIC8vIHRoZSBleGlzdGluZyBxdWFkcmFudCBib3VuZGFyaWVzIGRvbuKAmXQgY2hhbmdlIGR1ZSB0byBmbG9hdGluZyBwb2ludCBlcnJvciFcbiAgICBpZiAoaXNOYU4oeDApKSB7XG4gICAgICB4MSA9ICh4MCA9IE1hdGguZmxvb3IoeCkpICsgMTtcbiAgICAgIHkxID0gKHkwID0gTWF0aC5mbG9vcih5KSkgKyAxO1xuICAgIH1cblxuICAgIC8vIE90aGVyd2lzZSwgZG91YmxlIHJlcGVhdGVkbHkgdG8gY292ZXIuXG4gICAgZWxzZSBpZiAoeDAgPiB4IHx8IHggPiB4MSB8fCB5MCA+IHkgfHwgeSA+IHkxKSB7XG4gICAgICAgIHZhciB6ID0geDEgLSB4MCxcbiAgICAgICAgICAgIG5vZGUgPSB0aGlzLl9yb290LFxuICAgICAgICAgICAgcGFyZW50LFxuICAgICAgICAgICAgaTtcblxuICAgICAgICBzd2l0Y2ggKGkgPSAoeSA8ICh5MCArIHkxKSAvIDIpIDw8IDEgfCB4IDwgKHgwICsgeDEpIC8gMikge1xuICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIHBhcmVudCA9IG5ldyBBcnJheSg0KSwgcGFyZW50W2ldID0gbm9kZSwgbm9kZSA9IHBhcmVudDtcbiAgICAgICAgICAgICAgfSB3aGlsZSAoKHogKj0gMiwgeDEgPSB4MCArIHosIHkxID0geTAgKyB6LCB4ID4geDEgfHwgeSA+IHkxKSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIHBhcmVudCA9IG5ldyBBcnJheSg0KSwgcGFyZW50W2ldID0gbm9kZSwgbm9kZSA9IHBhcmVudDtcbiAgICAgICAgICAgICAgfSB3aGlsZSAoKHogKj0gMiwgeDAgPSB4MSAtIHosIHkxID0geTAgKyB6LCB4MCA+IHggfHwgeSA+IHkxKSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIHBhcmVudCA9IG5ldyBBcnJheSg0KSwgcGFyZW50W2ldID0gbm9kZSwgbm9kZSA9IHBhcmVudDtcbiAgICAgICAgICAgICAgfSB3aGlsZSAoKHogKj0gMiwgeDEgPSB4MCArIHosIHkwID0geTEgLSB6LCB4ID4geDEgfHwgeTAgPiB5KSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIHBhcmVudCA9IG5ldyBBcnJheSg0KSwgcGFyZW50W2ldID0gbm9kZSwgbm9kZSA9IHBhcmVudDtcbiAgICAgICAgICAgICAgfSB3aGlsZSAoKHogKj0gMiwgeDAgPSB4MSAtIHosIHkwID0geTEgLSB6LCB4MCA+IHggfHwgeTAgPiB5KSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX3Jvb3QgJiYgdGhpcy5fcm9vdC5sZW5ndGgpIHRoaXMuX3Jvb3QgPSBub2RlO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiB0aGUgcXVhZHRyZWUgY292ZXJzIHRoZSBwb2ludCBhbHJlYWR5LCBqdXN0IHJldHVybi5cbiAgICAgIGVsc2UgcmV0dXJuIHRoaXM7XG5cbiAgICB0aGlzLl94MCA9IHgwO1xuICAgIHRoaXMuX3kwID0geTA7XG4gICAgdGhpcy5feDEgPSB4MTtcbiAgICB0aGlzLl95MSA9IHkxO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciB0cmVlX2RhdGEgPSBmdW5jdGlvbiB0cmVlX2RhdGEoKSB7XG4gICAgdmFyIGRhdGEgPSBbXTtcbiAgICB0aGlzLnZpc2l0KGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICBpZiAoIW5vZGUubGVuZ3RoKSBkbyB7XG4gICAgICAgIGRhdGEucHVzaChub2RlLmRhdGEpO1xuICAgICAgfSB3aGlsZSAobm9kZSA9IG5vZGUubmV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG5cbiAgdmFyIHRyZWVfZXh0ZW50ID0gZnVuY3Rpb24gdHJlZV9leHRlbnQoXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy5jb3ZlcigrX1swXVswXSwgK19bMF1bMV0pLmNvdmVyKCtfWzFdWzBdLCArX1sxXVsxXSkgOiBpc05hTih0aGlzLl94MCkgPyB1bmRlZmluZWQgOiBbW3RoaXMuX3gwLCB0aGlzLl95MF0sIFt0aGlzLl94MSwgdGhpcy5feTFdXTtcbiAgfTtcblxuICB2YXIgUXVhZCA9IGZ1bmN0aW9uIFF1YWQobm9kZSwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgICB0aGlzLm5vZGUgPSBub2RlO1xuICAgIHRoaXMueDAgPSB4MDtcbiAgICB0aGlzLnkwID0geTA7XG4gICAgdGhpcy54MSA9IHgxO1xuICAgIHRoaXMueTEgPSB5MTtcbiAgfTtcblxuICB2YXIgdHJlZV9maW5kID0gZnVuY3Rpb24gdHJlZV9maW5kKHgsIHksIHJhZGl1cykge1xuICAgIHZhciBkYXRhLFxuICAgICAgICB4MCA9IHRoaXMuX3gwLFxuICAgICAgICB5MCA9IHRoaXMuX3kwLFxuICAgICAgICB4MSxcbiAgICAgICAgeTEsXG4gICAgICAgIHgyLFxuICAgICAgICB5MixcbiAgICAgICAgeDMgPSB0aGlzLl94MSxcbiAgICAgICAgeTMgPSB0aGlzLl95MSxcbiAgICAgICAgcXVhZHMgPSBbXSxcbiAgICAgICAgbm9kZSA9IHRoaXMuX3Jvb3QsXG4gICAgICAgIHEsXG4gICAgICAgIGk7XG5cbiAgICBpZiAobm9kZSkgcXVhZHMucHVzaChuZXcgUXVhZChub2RlLCB4MCwgeTAsIHgzLCB5MykpO1xuICAgIGlmIChyYWRpdXMgPT0gbnVsbCkgcmFkaXVzID0gSW5maW5pdHk7ZWxzZSB7XG4gICAgICB4MCA9IHggLSByYWRpdXMsIHkwID0geSAtIHJhZGl1cztcbiAgICAgIHgzID0geCArIHJhZGl1cywgeTMgPSB5ICsgcmFkaXVzO1xuICAgICAgcmFkaXVzICo9IHJhZGl1cztcbiAgICB9XG5cbiAgICB3aGlsZSAocSA9IHF1YWRzLnBvcCgpKSB7XG5cbiAgICAgIC8vIFN0b3Agc2VhcmNoaW5nIGlmIHRoaXMgcXVhZHJhbnQgY2Fu4oCZdCBjb250YWluIGEgY2xvc2VyIG5vZGUuXG4gICAgICBpZiAoIShub2RlID0gcS5ub2RlKSB8fCAoeDEgPSBxLngwKSA+IHgzIHx8ICh5MSA9IHEueTApID4geTMgfHwgKHgyID0gcS54MSkgPCB4MCB8fCAoeTIgPSBxLnkxKSA8IHkwKSBjb250aW51ZTtcblxuICAgICAgLy8gQmlzZWN0IHRoZSBjdXJyZW50IHF1YWRyYW50LlxuICAgICAgaWYgKG5vZGUubGVuZ3RoKSB7XG4gICAgICAgIHZhciB4bSA9ICh4MSArIHgyKSAvIDIsXG4gICAgICAgICAgICB5bSA9ICh5MSArIHkyKSAvIDI7XG5cbiAgICAgICAgcXVhZHMucHVzaChuZXcgUXVhZChub2RlWzNdLCB4bSwgeW0sIHgyLCB5MiksIG5ldyBRdWFkKG5vZGVbMl0sIHgxLCB5bSwgeG0sIHkyKSwgbmV3IFF1YWQobm9kZVsxXSwgeG0sIHkxLCB4MiwgeW0pLCBuZXcgUXVhZChub2RlWzBdLCB4MSwgeTEsIHhtLCB5bSkpO1xuXG4gICAgICAgIC8vIFZpc2l0IHRoZSBjbG9zZXN0IHF1YWRyYW50IGZpcnN0LlxuICAgICAgICBpZiAoaSA9ICh5ID49IHltKSA8PCAxIHwgeCA+PSB4bSkge1xuICAgICAgICAgIHEgPSBxdWFkc1txdWFkcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICBxdWFkc1txdWFkcy5sZW5ndGggLSAxXSA9IHF1YWRzW3F1YWRzLmxlbmd0aCAtIDEgLSBpXTtcbiAgICAgICAgICBxdWFkc1txdWFkcy5sZW5ndGggLSAxIC0gaV0gPSBxO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFZpc2l0IHRoaXMgcG9pbnQuIChWaXNpdGluZyBjb2luY2lkZW50IHBvaW50cyBpc27igJl0IG5lY2Vzc2FyeSEpXG4gICAgICBlbHNlIHtcbiAgICAgICAgICB2YXIgZHggPSB4IC0gK3RoaXMuX3guY2FsbChudWxsLCBub2RlLmRhdGEpLFxuICAgICAgICAgICAgICBkeSA9IHkgLSArdGhpcy5feS5jYWxsKG51bGwsIG5vZGUuZGF0YSksXG4gICAgICAgICAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICAgICAgaWYgKGQyIDwgcmFkaXVzKSB7XG4gICAgICAgICAgICB2YXIgZCA9IE1hdGguc3FydChyYWRpdXMgPSBkMik7XG4gICAgICAgICAgICB4MCA9IHggLSBkLCB5MCA9IHkgLSBkO1xuICAgICAgICAgICAgeDMgPSB4ICsgZCwgeTMgPSB5ICsgZDtcbiAgICAgICAgICAgIGRhdGEgPSBub2RlLmRhdGE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG5cbiAgdmFyIHRyZWVfcmVtb3ZlID0gZnVuY3Rpb24gdHJlZV9yZW1vdmUoZCkge1xuICAgIGlmIChpc05hTih4ID0gK3RoaXMuX3guY2FsbChudWxsLCBkKSkgfHwgaXNOYU4oeSA9ICt0aGlzLl95LmNhbGwobnVsbCwgZCkpKSByZXR1cm4gdGhpczsgLy8gaWdub3JlIGludmFsaWQgcG9pbnRzXG5cbiAgICB2YXIgcGFyZW50LFxuICAgICAgICBub2RlID0gdGhpcy5fcm9vdCxcbiAgICAgICAgcmV0YWluZXIsXG4gICAgICAgIHByZXZpb3VzLFxuICAgICAgICBuZXh0LFxuICAgICAgICB4MCA9IHRoaXMuX3gwLFxuICAgICAgICB5MCA9IHRoaXMuX3kwLFxuICAgICAgICB4MSA9IHRoaXMuX3gxLFxuICAgICAgICB5MSA9IHRoaXMuX3kxLFxuICAgICAgICB4LFxuICAgICAgICB5LFxuICAgICAgICB4bSxcbiAgICAgICAgeW0sXG4gICAgICAgIHJpZ2h0LFxuICAgICAgICBib3R0b20sXG4gICAgICAgIGksXG4gICAgICAgIGo7XG5cbiAgICAvLyBJZiB0aGUgdHJlZSBpcyBlbXB0eSwgaW5pdGlhbGl6ZSB0aGUgcm9vdCBhcyBhIGxlYWYuXG4gICAgaWYgKCFub2RlKSByZXR1cm4gdGhpcztcblxuICAgIC8vIEZpbmQgdGhlIGxlYWYgbm9kZSBmb3IgdGhlIHBvaW50LlxuICAgIC8vIFdoaWxlIGRlc2NlbmRpbmcsIGFsc28gcmV0YWluIHRoZSBkZWVwZXN0IHBhcmVudCB3aXRoIGEgbm9uLXJlbW92ZWQgc2libGluZy5cbiAgICBpZiAobm9kZS5sZW5ndGgpIHdoaWxlICh0cnVlKSB7XG4gICAgICBpZiAocmlnaHQgPSB4ID49ICh4bSA9ICh4MCArIHgxKSAvIDIpKSB4MCA9IHhtO2Vsc2UgeDEgPSB4bTtcbiAgICAgIGlmIChib3R0b20gPSB5ID49ICh5bSA9ICh5MCArIHkxKSAvIDIpKSB5MCA9IHltO2Vsc2UgeTEgPSB5bTtcbiAgICAgIGlmICghKHBhcmVudCA9IG5vZGUsIG5vZGUgPSBub2RlW2kgPSBib3R0b20gPDwgMSB8IHJpZ2h0XSkpIHJldHVybiB0aGlzO1xuICAgICAgaWYgKCFub2RlLmxlbmd0aCkgYnJlYWs7XG4gICAgICBpZiAocGFyZW50W2kgKyAxICYgM10gfHwgcGFyZW50W2kgKyAyICYgM10gfHwgcGFyZW50W2kgKyAzICYgM10pIHJldGFpbmVyID0gcGFyZW50LCBqID0gaTtcbiAgICB9XG5cbiAgICAvLyBGaW5kIHRoZSBwb2ludCB0byByZW1vdmUuXG4gICAgd2hpbGUgKG5vZGUuZGF0YSAhPT0gZCkge1xuICAgICAgaWYgKCEocHJldmlvdXMgPSBub2RlLCBub2RlID0gbm9kZS5uZXh0KSkgcmV0dXJuIHRoaXM7XG4gICAgfWlmIChuZXh0ID0gbm9kZS5uZXh0KSBkZWxldGUgbm9kZS5uZXh0O1xuXG4gICAgLy8gSWYgdGhlcmUgYXJlIG11bHRpcGxlIGNvaW5jaWRlbnQgcG9pbnRzLCByZW1vdmUganVzdCB0aGUgcG9pbnQuXG4gICAgaWYgKHByZXZpb3VzKSByZXR1cm4gbmV4dCA/IHByZXZpb3VzLm5leHQgPSBuZXh0IDogZGVsZXRlIHByZXZpb3VzLm5leHQsIHRoaXM7XG5cbiAgICAvLyBJZiB0aGlzIGlzIHRoZSByb290IHBvaW50LCByZW1vdmUgaXQuXG4gICAgaWYgKCFwYXJlbnQpIHJldHVybiB0aGlzLl9yb290ID0gbmV4dCwgdGhpcztcblxuICAgIC8vIFJlbW92ZSB0aGlzIGxlYWYuXG4gICAgbmV4dCA/IHBhcmVudFtpXSA9IG5leHQgOiBkZWxldGUgcGFyZW50W2ldO1xuXG4gICAgLy8gSWYgdGhlIHBhcmVudCBub3cgY29udGFpbnMgZXhhY3RseSBvbmUgbGVhZiwgY29sbGFwc2Ugc3VwZXJmbHVvdXMgcGFyZW50cy5cbiAgICBpZiAoKG5vZGUgPSBwYXJlbnRbMF0gfHwgcGFyZW50WzFdIHx8IHBhcmVudFsyXSB8fCBwYXJlbnRbM10pICYmIG5vZGUgPT09IChwYXJlbnRbM10gfHwgcGFyZW50WzJdIHx8IHBhcmVudFsxXSB8fCBwYXJlbnRbMF0pICYmICFub2RlLmxlbmd0aCkge1xuICAgICAgaWYgKHJldGFpbmVyKSByZXRhaW5lcltqXSA9IG5vZGU7ZWxzZSB0aGlzLl9yb290ID0gbm9kZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBmdW5jdGlvbiByZW1vdmVBbGwoZGF0YSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gZGF0YS5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgIHRoaXMucmVtb3ZlKGRhdGFbaV0pO1xuICAgIH1yZXR1cm4gdGhpcztcbiAgfVxuXG4gIHZhciB0cmVlX3Jvb3QgPSBmdW5jdGlvbiB0cmVlX3Jvb3QoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Jvb3Q7XG4gIH07XG5cbiAgdmFyIHRyZWVfc2l6ZSA9IGZ1bmN0aW9uIHRyZWVfc2l6ZSgpIHtcbiAgICB2YXIgc2l6ZSA9IDA7XG4gICAgdGhpcy52aXNpdChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgaWYgKCFub2RlLmxlbmd0aCkgZG8ge1xuICAgICAgICArK3NpemU7XG4gICAgICB9IHdoaWxlIChub2RlID0gbm9kZS5uZXh0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gc2l6ZTtcbiAgfTtcblxuICB2YXIgdHJlZV92aXNpdCA9IGZ1bmN0aW9uIHRyZWVfdmlzaXQoY2FsbGJhY2spIHtcbiAgICB2YXIgcXVhZHMgPSBbXSxcbiAgICAgICAgcSxcbiAgICAgICAgbm9kZSA9IHRoaXMuX3Jvb3QsXG4gICAgICAgIGNoaWxkLFxuICAgICAgICB4MCxcbiAgICAgICAgeTAsXG4gICAgICAgIHgxLFxuICAgICAgICB5MTtcbiAgICBpZiAobm9kZSkgcXVhZHMucHVzaChuZXcgUXVhZChub2RlLCB0aGlzLl94MCwgdGhpcy5feTAsIHRoaXMuX3gxLCB0aGlzLl95MSkpO1xuICAgIHdoaWxlIChxID0gcXVhZHMucG9wKCkpIHtcbiAgICAgIGlmICghY2FsbGJhY2sobm9kZSA9IHEubm9kZSwgeDAgPSBxLngwLCB5MCA9IHEueTAsIHgxID0gcS54MSwgeTEgPSBxLnkxKSAmJiBub2RlLmxlbmd0aCkge1xuICAgICAgICB2YXIgeG0gPSAoeDAgKyB4MSkgLyAyLFxuICAgICAgICAgICAgeW0gPSAoeTAgKyB5MSkgLyAyO1xuICAgICAgICBpZiAoY2hpbGQgPSBub2RlWzNdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4bSwgeW0sIHgxLCB5MSkpO1xuICAgICAgICBpZiAoY2hpbGQgPSBub2RlWzJdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4MCwgeW0sIHhtLCB5MSkpO1xuICAgICAgICBpZiAoY2hpbGQgPSBub2RlWzFdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4bSwgeTAsIHgxLCB5bSkpO1xuICAgICAgICBpZiAoY2hpbGQgPSBub2RlWzBdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4MCwgeTAsIHhtLCB5bSkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB2YXIgdHJlZV92aXNpdEFmdGVyID0gZnVuY3Rpb24gdHJlZV92aXNpdEFmdGVyKGNhbGxiYWNrKSB7XG4gICAgdmFyIHF1YWRzID0gW10sXG4gICAgICAgIG5leHQgPSBbXSxcbiAgICAgICAgcTtcbiAgICBpZiAodGhpcy5fcm9vdCkgcXVhZHMucHVzaChuZXcgUXVhZCh0aGlzLl9yb290LCB0aGlzLl94MCwgdGhpcy5feTAsIHRoaXMuX3gxLCB0aGlzLl95MSkpO1xuICAgIHdoaWxlIChxID0gcXVhZHMucG9wKCkpIHtcbiAgICAgIHZhciBub2RlID0gcS5ub2RlO1xuICAgICAgaWYgKG5vZGUubGVuZ3RoKSB7XG4gICAgICAgIHZhciBjaGlsZCxcbiAgICAgICAgICAgIHgwID0gcS54MCxcbiAgICAgICAgICAgIHkwID0gcS55MCxcbiAgICAgICAgICAgIHgxID0gcS54MSxcbiAgICAgICAgICAgIHkxID0gcS55MSxcbiAgICAgICAgICAgIHhtID0gKHgwICsgeDEpIC8gMixcbiAgICAgICAgICAgIHltID0gKHkwICsgeTEpIC8gMjtcbiAgICAgICAgaWYgKGNoaWxkID0gbm9kZVswXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeDAsIHkwLCB4bSwgeW0pKTtcbiAgICAgICAgaWYgKGNoaWxkID0gbm9kZVsxXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeG0sIHkwLCB4MSwgeW0pKTtcbiAgICAgICAgaWYgKGNoaWxkID0gbm9kZVsyXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeDAsIHltLCB4bSwgeTEpKTtcbiAgICAgICAgaWYgKGNoaWxkID0gbm9kZVszXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeG0sIHltLCB4MSwgeTEpKTtcbiAgICAgIH1cbiAgICAgIG5leHQucHVzaChxKTtcbiAgICB9XG4gICAgd2hpbGUgKHEgPSBuZXh0LnBvcCgpKSB7XG4gICAgICBjYWxsYmFjayhxLm5vZGUsIHEueDAsIHEueTAsIHEueDEsIHEueTEpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBmdW5jdGlvbiBkZWZhdWx0WChkKSB7XG4gICAgcmV0dXJuIGRbMF07XG4gIH1cblxuICB2YXIgdHJlZV94ID0gZnVuY3Rpb24gdHJlZV94KF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aGlzLl94ID0gXywgdGhpcykgOiB0aGlzLl94O1xuICB9O1xuXG4gIGZ1bmN0aW9uIGRlZmF1bHRZKGQpIHtcbiAgICByZXR1cm4gZFsxXTtcbiAgfVxuXG4gIHZhciB0cmVlX3kgPSBmdW5jdGlvbiB0cmVlX3koXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRoaXMuX3kgPSBfLCB0aGlzKSA6IHRoaXMuX3k7XG4gIH07XG5cbiAgZnVuY3Rpb24gcXVhZHRyZWUobm9kZXMsIHgsIHkpIHtcbiAgICB2YXIgdHJlZSA9IG5ldyBRdWFkdHJlZSh4ID09IG51bGwgPyBkZWZhdWx0WCA6IHgsIHkgPT0gbnVsbCA/IGRlZmF1bHRZIDogeSwgTmFOLCBOYU4sIE5hTiwgTmFOKTtcbiAgICByZXR1cm4gbm9kZXMgPT0gbnVsbCA/IHRyZWUgOiB0cmVlLmFkZEFsbChub2Rlcyk7XG4gIH1cblxuICBmdW5jdGlvbiBRdWFkdHJlZSh4LCB5LCB4MCwgeTAsIHgxLCB5MSkge1xuICAgIHRoaXMuX3ggPSB4O1xuICAgIHRoaXMuX3kgPSB5O1xuICAgIHRoaXMuX3gwID0geDA7XG4gICAgdGhpcy5feTAgPSB5MDtcbiAgICB0aGlzLl94MSA9IHgxO1xuICAgIHRoaXMuX3kxID0geTE7XG4gICAgdGhpcy5fcm9vdCA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxlYWZfY29weShsZWFmKSB7XG4gICAgdmFyIGNvcHkgPSB7IGRhdGE6IGxlYWYuZGF0YSB9LFxuICAgICAgICBuZXh0ID0gY29weTtcbiAgICB3aGlsZSAobGVhZiA9IGxlYWYubmV4dCkge1xuICAgICAgbmV4dCA9IG5leHQubmV4dCA9IHsgZGF0YTogbGVhZi5kYXRhIH07XG4gICAgfXJldHVybiBjb3B5O1xuICB9XG5cbiAgdmFyIHRyZWVQcm90byA9IHF1YWR0cmVlLnByb3RvdHlwZSA9IFF1YWR0cmVlLnByb3RvdHlwZTtcblxuICB0cmVlUHJvdG8uY29weSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY29weSA9IG5ldyBRdWFkdHJlZSh0aGlzLl94LCB0aGlzLl95LCB0aGlzLl94MCwgdGhpcy5feTAsIHRoaXMuX3gxLCB0aGlzLl95MSksXG4gICAgICAgIG5vZGUgPSB0aGlzLl9yb290LFxuICAgICAgICBub2RlcyxcbiAgICAgICAgY2hpbGQ7XG5cbiAgICBpZiAoIW5vZGUpIHJldHVybiBjb3B5O1xuXG4gICAgaWYgKCFub2RlLmxlbmd0aCkgcmV0dXJuIGNvcHkuX3Jvb3QgPSBsZWFmX2NvcHkobm9kZSksIGNvcHk7XG5cbiAgICBub2RlcyA9IFt7IHNvdXJjZTogbm9kZSwgdGFyZ2V0OiBjb3B5Ll9yb290ID0gbmV3IEFycmF5KDQpIH1dO1xuICAgIHdoaWxlIChub2RlID0gbm9kZXMucG9wKCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgKytpKSB7XG4gICAgICAgIGlmIChjaGlsZCA9IG5vZGUuc291cmNlW2ldKSB7XG4gICAgICAgICAgaWYgKGNoaWxkLmxlbmd0aCkgbm9kZXMucHVzaCh7IHNvdXJjZTogY2hpbGQsIHRhcmdldDogbm9kZS50YXJnZXRbaV0gPSBuZXcgQXJyYXkoNCkgfSk7ZWxzZSBub2RlLnRhcmdldFtpXSA9IGxlYWZfY29weShjaGlsZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY29weTtcbiAgfTtcblxuICB0cmVlUHJvdG8uYWRkID0gdHJlZV9hZGQ7XG4gIHRyZWVQcm90by5hZGRBbGwgPSBhZGRBbGw7XG4gIHRyZWVQcm90by5jb3ZlciA9IHRyZWVfY292ZXI7XG4gIHRyZWVQcm90by5kYXRhID0gdHJlZV9kYXRhO1xuICB0cmVlUHJvdG8uZXh0ZW50ID0gdHJlZV9leHRlbnQ7XG4gIHRyZWVQcm90by5maW5kID0gdHJlZV9maW5kO1xuICB0cmVlUHJvdG8ucmVtb3ZlID0gdHJlZV9yZW1vdmU7XG4gIHRyZWVQcm90by5yZW1vdmVBbGwgPSByZW1vdmVBbGw7XG4gIHRyZWVQcm90by5yb290ID0gdHJlZV9yb290O1xuICB0cmVlUHJvdG8uc2l6ZSA9IHRyZWVfc2l6ZTtcbiAgdHJlZVByb3RvLnZpc2l0ID0gdHJlZV92aXNpdDtcbiAgdHJlZVByb3RvLnZpc2l0QWZ0ZXIgPSB0cmVlX3Zpc2l0QWZ0ZXI7XG4gIHRyZWVQcm90by54ID0gdHJlZV94O1xuICB0cmVlUHJvdG8ueSA9IHRyZWVfeTtcblxuICBmdW5jdGlvbiB4KGQpIHtcbiAgICByZXR1cm4gZC54ICsgZC52eDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHkoZCkge1xuICAgIHJldHVybiBkLnkgKyBkLnZ5O1xuICB9XG5cbiAgdmFyIGNvbGxpZGUgPSBmdW5jdGlvbiBjb2xsaWRlKHJhZGl1cykge1xuICAgIHZhciBub2RlcyxcbiAgICAgICAgcmFkaWksXG4gICAgICAgIHN0cmVuZ3RoID0gMSxcbiAgICAgICAgaXRlcmF0aW9ucyA9IDE7XG5cbiAgICBpZiAodHlwZW9mIHJhZGl1cyAhPT0gXCJmdW5jdGlvblwiKSByYWRpdXMgPSBjb25zdGFudCQ2KHJhZGl1cyA9PSBudWxsID8gMSA6ICtyYWRpdXMpO1xuXG4gICAgZnVuY3Rpb24gZm9yY2UoKSB7XG4gICAgICB2YXIgaSxcbiAgICAgICAgICBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgICAgIHRyZWUsXG4gICAgICAgICAgbm9kZSxcbiAgICAgICAgICB4aSxcbiAgICAgICAgICB5aSxcbiAgICAgICAgICByaSxcbiAgICAgICAgICByaTI7XG5cbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgaXRlcmF0aW9uczsgKytrKSB7XG4gICAgICAgIHRyZWUgPSBxdWFkdHJlZShub2RlcywgeCwgeSkudmlzaXRBZnRlcihwcmVwYXJlKTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICAgIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgICByaSA9IHJhZGlpW25vZGUuaW5kZXhdLCByaTIgPSByaSAqIHJpO1xuICAgICAgICAgIHhpID0gbm9kZS54ICsgbm9kZS52eDtcbiAgICAgICAgICB5aSA9IG5vZGUueSArIG5vZGUudnk7XG4gICAgICAgICAgdHJlZS52aXNpdChhcHBseSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gYXBwbHkocXVhZCwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgICAgICAgdmFyIGRhdGEgPSBxdWFkLmRhdGEsXG4gICAgICAgICAgICByaiA9IHF1YWQucixcbiAgICAgICAgICAgIHIgPSByaSArIHJqO1xuICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgIGlmIChkYXRhLmluZGV4ID4gbm9kZS5pbmRleCkge1xuICAgICAgICAgICAgdmFyIHggPSB4aSAtIGRhdGEueCAtIGRhdGEudngsXG4gICAgICAgICAgICAgICAgeSA9IHlpIC0gZGF0YS55IC0gZGF0YS52eSxcbiAgICAgICAgICAgICAgICBsID0geCAqIHggKyB5ICogeTtcbiAgICAgICAgICAgIGlmIChsIDwgciAqIHIpIHtcbiAgICAgICAgICAgICAgaWYgKHggPT09IDApIHggPSBqaWdnbGUoKSwgbCArPSB4ICogeDtcbiAgICAgICAgICAgICAgaWYgKHkgPT09IDApIHkgPSBqaWdnbGUoKSwgbCArPSB5ICogeTtcbiAgICAgICAgICAgICAgbCA9IChyIC0gKGwgPSBNYXRoLnNxcnQobCkpKSAvIGwgKiBzdHJlbmd0aDtcbiAgICAgICAgICAgICAgbm9kZS52eCArPSAoeCAqPSBsKSAqIChyID0gKHJqICo9IHJqKSAvIChyaTIgKyByaikpO1xuICAgICAgICAgICAgICBub2RlLnZ5ICs9ICh5ICo9IGwpICogcjtcbiAgICAgICAgICAgICAgZGF0YS52eCAtPSB4ICogKHIgPSAxIC0gcik7XG4gICAgICAgICAgICAgIGRhdGEudnkgLT0geSAqIHI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geDAgPiB4aSArIHIgfHwgeDEgPCB4aSAtIHIgfHwgeTAgPiB5aSArIHIgfHwgeTEgPCB5aSAtIHI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJlcGFyZShxdWFkKSB7XG4gICAgICBpZiAocXVhZC5kYXRhKSByZXR1cm4gcXVhZC5yID0gcmFkaWlbcXVhZC5kYXRhLmluZGV4XTtcbiAgICAgIGZvciAodmFyIGkgPSBxdWFkLnIgPSAwOyBpIDwgNDsgKytpKSB7XG4gICAgICAgIGlmIChxdWFkW2ldICYmIHF1YWRbaV0uciA+IHF1YWQucikge1xuICAgICAgICAgIHF1YWQuciA9IHF1YWRbaV0ucjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgICBpZiAoIW5vZGVzKSByZXR1cm47XG4gICAgICB2YXIgaSxcbiAgICAgICAgICBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgICAgIG5vZGU7XG4gICAgICByYWRpaSA9IG5ldyBBcnJheShuKTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgbm9kZSA9IG5vZGVzW2ldLCByYWRpaVtub2RlLmluZGV4XSA9ICtyYWRpdXMobm9kZSwgaSwgbm9kZXMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvcmNlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoXykge1xuICAgICAgbm9kZXMgPSBfO1xuICAgICAgaW5pdGlhbGl6ZSgpO1xuICAgIH07XG5cbiAgICBmb3JjZS5pdGVyYXRpb25zID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGl0ZXJhdGlvbnMgPSArXywgZm9yY2UpIDogaXRlcmF0aW9ucztcbiAgICB9O1xuXG4gICAgZm9yY2Uuc3RyZW5ndGggPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3RyZW5ndGggPSArXywgZm9yY2UpIDogc3RyZW5ndGg7XG4gICAgfTtcblxuICAgIGZvcmNlLnJhZGl1cyA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDYoK18pLCBpbml0aWFsaXplKCksIGZvcmNlKSA6IHJhZGl1cztcbiAgICB9O1xuXG4gICAgcmV0dXJuIGZvcmNlO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGluZGV4KGQpIHtcbiAgICByZXR1cm4gZC5pbmRleDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbmQobm9kZUJ5SWQsIG5vZGVJZCkge1xuICAgIHZhciBub2RlID0gbm9kZUJ5SWQuZ2V0KG5vZGVJZCk7XG4gICAgaWYgKCFub2RlKSB0aHJvdyBuZXcgRXJyb3IoXCJtaXNzaW5nOiBcIiArIG5vZGVJZCk7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cblxuICB2YXIgbGluayA9IGZ1bmN0aW9uIGxpbmsobGlua3MpIHtcbiAgICB2YXIgaWQgPSBpbmRleCxcbiAgICAgICAgc3RyZW5ndGggPSBkZWZhdWx0U3RyZW5ndGgsXG4gICAgICAgIHN0cmVuZ3RocyxcbiAgICAgICAgZGlzdGFuY2UgPSBjb25zdGFudCQ2KDMwKSxcbiAgICAgICAgZGlzdGFuY2VzLFxuICAgICAgICBub2RlcyxcbiAgICAgICAgY291bnQsXG4gICAgICAgIGJpYXMsXG4gICAgICAgIGl0ZXJhdGlvbnMgPSAxO1xuXG4gICAgaWYgKGxpbmtzID09IG51bGwpIGxpbmtzID0gW107XG5cbiAgICBmdW5jdGlvbiBkZWZhdWx0U3RyZW5ndGgobGluaykge1xuICAgICAgcmV0dXJuIDEgLyBNYXRoLm1pbihjb3VudFtsaW5rLnNvdXJjZS5pbmRleF0sIGNvdW50W2xpbmsudGFyZ2V0LmluZGV4XSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZm9yY2UoYWxwaGEpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwLCBuID0gbGlua3MubGVuZ3RoOyBrIDwgaXRlcmF0aW9uczsgKytrKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsaW5rLCBzb3VyY2UsIHRhcmdldCwgeCwgeSwgbCwgYjsgaSA8IG47ICsraSkge1xuICAgICAgICAgIGxpbmsgPSBsaW5rc1tpXSwgc291cmNlID0gbGluay5zb3VyY2UsIHRhcmdldCA9IGxpbmsudGFyZ2V0O1xuICAgICAgICAgIHggPSB0YXJnZXQueCArIHRhcmdldC52eCAtIHNvdXJjZS54IC0gc291cmNlLnZ4IHx8IGppZ2dsZSgpO1xuICAgICAgICAgIHkgPSB0YXJnZXQueSArIHRhcmdldC52eSAtIHNvdXJjZS55IC0gc291cmNlLnZ5IHx8IGppZ2dsZSgpO1xuICAgICAgICAgIGwgPSBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSk7XG4gICAgICAgICAgbCA9IChsIC0gZGlzdGFuY2VzW2ldKSAvIGwgKiBhbHBoYSAqIHN0cmVuZ3Roc1tpXTtcbiAgICAgICAgICB4ICo9IGwsIHkgKj0gbDtcbiAgICAgICAgICB0YXJnZXQudnggLT0geCAqIChiID0gYmlhc1tpXSk7XG4gICAgICAgICAgdGFyZ2V0LnZ5IC09IHkgKiBiO1xuICAgICAgICAgIHNvdXJjZS52eCArPSB4ICogKGIgPSAxIC0gYik7XG4gICAgICAgICAgc291cmNlLnZ5ICs9IHkgKiBiO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcbiAgICAgIGlmICghbm9kZXMpIHJldHVybjtcblxuICAgICAgdmFyIGksXG4gICAgICAgICAgbiA9IG5vZGVzLmxlbmd0aCxcbiAgICAgICAgICBtID0gbGlua3MubGVuZ3RoLFxuICAgICAgICAgIG5vZGVCeUlkID0gbWFwJDEobm9kZXMsIGlkKSxcbiAgICAgICAgICBsaW5rO1xuXG4gICAgICBmb3IgKGkgPSAwLCBjb3VudCA9IG5ldyBBcnJheShuKTsgaSA8IG07ICsraSkge1xuICAgICAgICBsaW5rID0gbGlua3NbaV0sIGxpbmsuaW5kZXggPSBpO1xuICAgICAgICBpZiAoX3R5cGVvZihsaW5rLnNvdXJjZSkgIT09IFwib2JqZWN0XCIpIGxpbmsuc291cmNlID0gZmluZChub2RlQnlJZCwgbGluay5zb3VyY2UpO1xuICAgICAgICBpZiAoX3R5cGVvZihsaW5rLnRhcmdldCkgIT09IFwib2JqZWN0XCIpIGxpbmsudGFyZ2V0ID0gZmluZChub2RlQnlJZCwgbGluay50YXJnZXQpO1xuICAgICAgICBjb3VudFtsaW5rLnNvdXJjZS5pbmRleF0gPSAoY291bnRbbGluay5zb3VyY2UuaW5kZXhdIHx8IDApICsgMTtcbiAgICAgICAgY291bnRbbGluay50YXJnZXQuaW5kZXhdID0gKGNvdW50W2xpbmsudGFyZ2V0LmluZGV4XSB8fCAwKSArIDE7XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDAsIGJpYXMgPSBuZXcgQXJyYXkobSk7IGkgPCBtOyArK2kpIHtcbiAgICAgICAgbGluayA9IGxpbmtzW2ldLCBiaWFzW2ldID0gY291bnRbbGluay5zb3VyY2UuaW5kZXhdIC8gKGNvdW50W2xpbmsuc291cmNlLmluZGV4XSArIGNvdW50W2xpbmsudGFyZ2V0LmluZGV4XSk7XG4gICAgICB9XG5cbiAgICAgIHN0cmVuZ3RocyA9IG5ldyBBcnJheShtKSwgaW5pdGlhbGl6ZVN0cmVuZ3RoKCk7XG4gICAgICBkaXN0YW5jZXMgPSBuZXcgQXJyYXkobSksIGluaXRpYWxpemVEaXN0YW5jZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluaXRpYWxpemVTdHJlbmd0aCgpIHtcbiAgICAgIGlmICghbm9kZXMpIHJldHVybjtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBsaW5rcy5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgc3RyZW5ndGhzW2ldID0gK3N0cmVuZ3RoKGxpbmtzW2ldLCBpLCBsaW5rcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5pdGlhbGl6ZURpc3RhbmNlKCkge1xuICAgICAgaWYgKCFub2RlcykgcmV0dXJuO1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwgbiA9IGxpbmtzLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICBkaXN0YW5jZXNbaV0gPSArZGlzdGFuY2UobGlua3NbaV0sIGksIGxpbmtzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3JjZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgIG5vZGVzID0gXztcbiAgICAgIGluaXRpYWxpemUoKTtcbiAgICB9O1xuXG4gICAgZm9yY2UubGlua3MgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAobGlua3MgPSBfLCBpbml0aWFsaXplKCksIGZvcmNlKSA6IGxpbmtzO1xuICAgIH07XG5cbiAgICBmb3JjZS5pZCA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpZCA9IF8sIGZvcmNlKSA6IGlkO1xuICAgIH07XG5cbiAgICBmb3JjZS5pdGVyYXRpb25zID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGl0ZXJhdGlvbnMgPSArXywgZm9yY2UpIDogaXRlcmF0aW9ucztcbiAgICB9O1xuXG4gICAgZm9yY2Uuc3RyZW5ndGggPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3RyZW5ndGggPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDYoK18pLCBpbml0aWFsaXplU3RyZW5ndGgoKSwgZm9yY2UpIDogc3RyZW5ndGg7XG4gICAgfTtcblxuICAgIGZvcmNlLmRpc3RhbmNlID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRpc3RhbmNlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQ2KCtfKSwgaW5pdGlhbGl6ZURpc3RhbmNlKCksIGZvcmNlKSA6IGRpc3RhbmNlO1xuICAgIH07XG5cbiAgICByZXR1cm4gZm9yY2U7XG4gIH07XG5cbiAgZnVuY3Rpb24geCQxKGQpIHtcbiAgICByZXR1cm4gZC54O1xuICB9XG5cbiAgZnVuY3Rpb24geSQxKGQpIHtcbiAgICByZXR1cm4gZC55O1xuICB9XG5cbiAgdmFyIGluaXRpYWxSYWRpdXMgPSAxMDtcbiAgdmFyIGluaXRpYWxBbmdsZSA9IE1hdGguUEkgKiAoMyAtIE1hdGguc3FydCg1KSk7XG5cbiAgdmFyIHNpbXVsYXRpb24gPSBmdW5jdGlvbiBzaW11bGF0aW9uKF9ub2Rlcykge1xuICAgIHZhciBzaW11bGF0aW9uLFxuICAgICAgICBfYWxwaGEgPSAxLFxuICAgICAgICBfYWxwaGFNaW4gPSAwLjAwMSxcbiAgICAgICAgX2FscGhhRGVjYXkgPSAxIC0gTWF0aC5wb3coX2FscGhhTWluLCAxIC8gMzAwKSxcbiAgICAgICAgX2FscGhhVGFyZ2V0ID0gMCxcbiAgICAgICAgX3ZlbG9jaXR5RGVjYXkgPSAwLjYsXG4gICAgICAgIGZvcmNlcyA9IG1hcCQxKCksXG4gICAgICAgIHN0ZXBwZXIgPSB0aW1lcihzdGVwKSxcbiAgICAgICAgZXZlbnQgPSBkaXNwYXRjaChcInRpY2tcIiwgXCJlbmRcIik7XG5cbiAgICBpZiAoX25vZGVzID09IG51bGwpIF9ub2RlcyA9IFtdO1xuXG4gICAgZnVuY3Rpb24gc3RlcCgpIHtcbiAgICAgIHRpY2soKTtcbiAgICAgIGV2ZW50LmNhbGwoXCJ0aWNrXCIsIHNpbXVsYXRpb24pO1xuICAgICAgaWYgKF9hbHBoYSA8IF9hbHBoYU1pbikge1xuICAgICAgICBzdGVwcGVyLnN0b3AoKTtcbiAgICAgICAgZXZlbnQuY2FsbChcImVuZFwiLCBzaW11bGF0aW9uKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0aWNrKCkge1xuICAgICAgdmFyIGksXG4gICAgICAgICAgbiA9IF9ub2Rlcy5sZW5ndGgsXG4gICAgICAgICAgbm9kZTtcblxuICAgICAgX2FscGhhICs9IChfYWxwaGFUYXJnZXQgLSBfYWxwaGEpICogX2FscGhhRGVjYXk7XG5cbiAgICAgIGZvcmNlcy5lYWNoKGZ1bmN0aW9uIChmb3JjZSkge1xuICAgICAgICBmb3JjZShfYWxwaGEpO1xuICAgICAgfSk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgbm9kZSA9IF9ub2Rlc1tpXTtcbiAgICAgICAgaWYgKG5vZGUuZnggPT0gbnVsbCkgbm9kZS54ICs9IG5vZGUudnggKj0gX3ZlbG9jaXR5RGVjYXk7ZWxzZSBub2RlLnggPSBub2RlLmZ4LCBub2RlLnZ4ID0gMDtcbiAgICAgICAgaWYgKG5vZGUuZnkgPT0gbnVsbCkgbm9kZS55ICs9IG5vZGUudnkgKj0gX3ZlbG9jaXR5RGVjYXk7ZWxzZSBub2RlLnkgPSBub2RlLmZ5LCBub2RlLnZ5ID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbml0aWFsaXplTm9kZXMoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbiA9IF9ub2Rlcy5sZW5ndGgsIG5vZGU7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgbm9kZSA9IF9ub2Rlc1tpXSwgbm9kZS5pbmRleCA9IGk7XG4gICAgICAgIGlmIChpc05hTihub2RlLngpIHx8IGlzTmFOKG5vZGUueSkpIHtcbiAgICAgICAgICB2YXIgcmFkaXVzID0gaW5pdGlhbFJhZGl1cyAqIE1hdGguc3FydChpKSxcbiAgICAgICAgICAgICAgYW5nbGUgPSBpICogaW5pdGlhbEFuZ2xlO1xuICAgICAgICAgIG5vZGUueCA9IHJhZGl1cyAqIE1hdGguY29zKGFuZ2xlKTtcbiAgICAgICAgICBub2RlLnkgPSByYWRpdXMgKiBNYXRoLnNpbihhbmdsZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTmFOKG5vZGUudngpIHx8IGlzTmFOKG5vZGUudnkpKSB7XG4gICAgICAgICAgbm9kZS52eCA9IG5vZGUudnkgPSAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5pdGlhbGl6ZUZvcmNlKGZvcmNlKSB7XG4gICAgICBpZiAoZm9yY2UuaW5pdGlhbGl6ZSkgZm9yY2UuaW5pdGlhbGl6ZShfbm9kZXMpO1xuICAgICAgcmV0dXJuIGZvcmNlO1xuICAgIH1cblxuICAgIGluaXRpYWxpemVOb2RlcygpO1xuXG4gICAgcmV0dXJuIHNpbXVsYXRpb24gPSB7XG4gICAgICB0aWNrOiB0aWNrLFxuXG4gICAgICByZXN0YXJ0OiBmdW5jdGlvbiByZXN0YXJ0KCkge1xuICAgICAgICByZXR1cm4gc3RlcHBlci5yZXN0YXJ0KHN0ZXApLCBzaW11bGF0aW9uO1xuICAgICAgfSxcblxuICAgICAgc3RvcDogZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgICAgcmV0dXJuIHN0ZXBwZXIuc3RvcCgpLCBzaW11bGF0aW9uO1xuICAgICAgfSxcblxuICAgICAgbm9kZXM6IGZ1bmN0aW9uIG5vZGVzKF8pIHtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoX25vZGVzID0gXywgaW5pdGlhbGl6ZU5vZGVzKCksIGZvcmNlcy5lYWNoKGluaXRpYWxpemVGb3JjZSksIHNpbXVsYXRpb24pIDogX25vZGVzO1xuICAgICAgfSxcblxuICAgICAgYWxwaGE6IGZ1bmN0aW9uIGFscGhhKF8pIHtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoX2FscGhhID0gK18sIHNpbXVsYXRpb24pIDogX2FscGhhO1xuICAgICAgfSxcblxuICAgICAgYWxwaGFNaW46IGZ1bmN0aW9uIGFscGhhTWluKF8pIHtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoX2FscGhhTWluID0gK18sIHNpbXVsYXRpb24pIDogX2FscGhhTWluO1xuICAgICAgfSxcblxuICAgICAgYWxwaGFEZWNheTogZnVuY3Rpb24gYWxwaGFEZWNheShfKSB7XG4gICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKF9hbHBoYURlY2F5ID0gK18sIHNpbXVsYXRpb24pIDogK19hbHBoYURlY2F5O1xuICAgICAgfSxcblxuICAgICAgYWxwaGFUYXJnZXQ6IGZ1bmN0aW9uIGFscGhhVGFyZ2V0KF8pIHtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoX2FscGhhVGFyZ2V0ID0gK18sIHNpbXVsYXRpb24pIDogX2FscGhhVGFyZ2V0O1xuICAgICAgfSxcblxuICAgICAgdmVsb2NpdHlEZWNheTogZnVuY3Rpb24gdmVsb2NpdHlEZWNheShfKSB7XG4gICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKF92ZWxvY2l0eURlY2F5ID0gMSAtIF8sIHNpbXVsYXRpb24pIDogMSAtIF92ZWxvY2l0eURlY2F5O1xuICAgICAgfSxcblxuICAgICAgZm9yY2U6IGZ1bmN0aW9uIGZvcmNlKG5hbWUsIF8pIHtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gKF8gPT0gbnVsbCA/IGZvcmNlcy5yZW1vdmUobmFtZSkgOiBmb3JjZXMuc2V0KG5hbWUsIGluaXRpYWxpemVGb3JjZShfKSksIHNpbXVsYXRpb24pIDogZm9yY2VzLmdldChuYW1lKTtcbiAgICAgIH0sXG5cbiAgICAgIGZpbmQ6IGZ1bmN0aW9uIGZpbmQoeCwgeSwgcmFkaXVzKSB7XG4gICAgICAgIHZhciBpID0gMCxcbiAgICAgICAgICAgIG4gPSBfbm9kZXMubGVuZ3RoLFxuICAgICAgICAgICAgZHgsXG4gICAgICAgICAgICBkeSxcbiAgICAgICAgICAgIGQyLFxuICAgICAgICAgICAgbm9kZSxcbiAgICAgICAgICAgIGNsb3Nlc3Q7XG5cbiAgICAgICAgaWYgKHJhZGl1cyA9PSBudWxsKSByYWRpdXMgPSBJbmZpbml0eTtlbHNlIHJhZGl1cyAqPSByYWRpdXM7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICAgIG5vZGUgPSBfbm9kZXNbaV07XG4gICAgICAgICAgZHggPSB4IC0gbm9kZS54O1xuICAgICAgICAgIGR5ID0geSAtIG5vZGUueTtcbiAgICAgICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgICAgICAgIGlmIChkMiA8IHJhZGl1cykgY2xvc2VzdCA9IG5vZGUsIHJhZGl1cyA9IGQyO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNsb3Nlc3Q7XG4gICAgICB9LFxuXG4gICAgICBvbjogZnVuY3Rpb24gb24obmFtZSwgXykge1xuICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyAoZXZlbnQub24obmFtZSwgXyksIHNpbXVsYXRpb24pIDogZXZlbnQub24obmFtZSk7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICB2YXIgbWFueUJvZHkgPSBmdW5jdGlvbiBtYW55Qm9keSgpIHtcbiAgICB2YXIgbm9kZXMsXG4gICAgICAgIG5vZGUsXG4gICAgICAgIGFscGhhLFxuICAgICAgICBzdHJlbmd0aCA9IGNvbnN0YW50JDYoLTMwKSxcbiAgICAgICAgc3RyZW5ndGhzLFxuICAgICAgICBkaXN0YW5jZU1pbjIgPSAxLFxuICAgICAgICBkaXN0YW5jZU1heDIgPSBJbmZpbml0eSxcbiAgICAgICAgdGhldGEyID0gMC44MTtcblxuICAgIGZ1bmN0aW9uIGZvcmNlKF8pIHtcbiAgICAgIHZhciBpLFxuICAgICAgICAgIG4gPSBub2Rlcy5sZW5ndGgsXG4gICAgICAgICAgdHJlZSA9IHF1YWR0cmVlKG5vZGVzLCB4JDEsIHkkMSkudmlzaXRBZnRlcihhY2N1bXVsYXRlKTtcbiAgICAgIGZvciAoYWxwaGEgPSBfLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBub2RlID0gbm9kZXNbaV0sIHRyZWUudmlzaXQoYXBwbHkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgICBpZiAoIW5vZGVzKSByZXR1cm47XG4gICAgICB2YXIgaSxcbiAgICAgICAgICBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgICAgIG5vZGU7XG4gICAgICBzdHJlbmd0aHMgPSBuZXcgQXJyYXkobik7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIG5vZGUgPSBub2Rlc1tpXSwgc3RyZW5ndGhzW25vZGUuaW5kZXhdID0gK3N0cmVuZ3RoKG5vZGUsIGksIG5vZGVzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhY2N1bXVsYXRlKHF1YWQpIHtcbiAgICAgIHZhciBzdHJlbmd0aCA9IDAsXG4gICAgICAgICAgcSxcbiAgICAgICAgICBjLFxuICAgICAgICAgIHgsXG4gICAgICAgICAgeSxcbiAgICAgICAgICBpO1xuXG4gICAgICAvLyBGb3IgaW50ZXJuYWwgbm9kZXMsIGFjY3VtdWxhdGUgZm9yY2VzIGZyb20gY2hpbGQgcXVhZHJhbnRzLlxuICAgICAgaWYgKHF1YWQubGVuZ3RoKSB7XG4gICAgICAgIGZvciAoeCA9IHkgPSBpID0gMDsgaSA8IDQ7ICsraSkge1xuICAgICAgICAgIGlmICgocSA9IHF1YWRbaV0pICYmIChjID0gcS52YWx1ZSkpIHtcbiAgICAgICAgICAgIHN0cmVuZ3RoICs9IGMsIHggKz0gYyAqIHEueCwgeSArPSBjICogcS55O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWFkLnggPSB4IC8gc3RyZW5ndGg7XG4gICAgICAgIHF1YWQueSA9IHkgLyBzdHJlbmd0aDtcbiAgICAgIH1cblxuICAgICAgLy8gRm9yIGxlYWYgbm9kZXMsIGFjY3VtdWxhdGUgZm9yY2VzIGZyb20gY29pbmNpZGVudCBxdWFkcmFudHMuXG4gICAgICBlbHNlIHtcbiAgICAgICAgICBxID0gcXVhZDtcbiAgICAgICAgICBxLnggPSBxLmRhdGEueDtcbiAgICAgICAgICBxLnkgPSBxLmRhdGEueTtcbiAgICAgICAgICBkbyB7XG4gICAgICAgICAgICBzdHJlbmd0aCArPSBzdHJlbmd0aHNbcS5kYXRhLmluZGV4XTtcbiAgICAgICAgICB9IHdoaWxlIChxID0gcS5uZXh0KTtcbiAgICAgICAgfVxuXG4gICAgICBxdWFkLnZhbHVlID0gc3RyZW5ndGg7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXBwbHkocXVhZCwgeDEsIF8sIHgyKSB7XG4gICAgICBpZiAoIXF1YWQudmFsdWUpIHJldHVybiB0cnVlO1xuXG4gICAgICB2YXIgeCA9IHF1YWQueCAtIG5vZGUueCxcbiAgICAgICAgICB5ID0gcXVhZC55IC0gbm9kZS55LFxuICAgICAgICAgIHcgPSB4MiAtIHgxLFxuICAgICAgICAgIGwgPSB4ICogeCArIHkgKiB5O1xuXG4gICAgICAvLyBBcHBseSB0aGUgQmFybmVzLUh1dCBhcHByb3hpbWF0aW9uIGlmIHBvc3NpYmxlLlxuICAgICAgLy8gTGltaXQgZm9yY2VzIGZvciB2ZXJ5IGNsb3NlIG5vZGVzOyByYW5kb21pemUgZGlyZWN0aW9uIGlmIGNvaW5jaWRlbnQuXG4gICAgICBpZiAodyAqIHcgLyB0aGV0YTIgPCBsKSB7XG4gICAgICAgIGlmIChsIDwgZGlzdGFuY2VNYXgyKSB7XG4gICAgICAgICAgaWYgKHggPT09IDApIHggPSBqaWdnbGUoKSwgbCArPSB4ICogeDtcbiAgICAgICAgICBpZiAoeSA9PT0gMCkgeSA9IGppZ2dsZSgpLCBsICs9IHkgKiB5O1xuICAgICAgICAgIGlmIChsIDwgZGlzdGFuY2VNaW4yKSBsID0gTWF0aC5zcXJ0KGRpc3RhbmNlTWluMiAqIGwpO1xuICAgICAgICAgIG5vZGUudnggKz0geCAqIHF1YWQudmFsdWUgKiBhbHBoYSAvIGw7XG4gICAgICAgICAgbm9kZS52eSArPSB5ICogcXVhZC52YWx1ZSAqIGFscGhhIC8gbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgLy8gT3RoZXJ3aXNlLCBwcm9jZXNzIHBvaW50cyBkaXJlY3RseS5cbiAgICAgIGVsc2UgaWYgKHF1YWQubGVuZ3RoIHx8IGwgPj0gZGlzdGFuY2VNYXgyKSByZXR1cm47XG5cbiAgICAgIC8vIExpbWl0IGZvcmNlcyBmb3IgdmVyeSBjbG9zZSBub2RlczsgcmFuZG9taXplIGRpcmVjdGlvbiBpZiBjb2luY2lkZW50LlxuICAgICAgaWYgKHF1YWQuZGF0YSAhPT0gbm9kZSB8fCBxdWFkLm5leHQpIHtcbiAgICAgICAgaWYgKHggPT09IDApIHggPSBqaWdnbGUoKSwgbCArPSB4ICogeDtcbiAgICAgICAgaWYgKHkgPT09IDApIHkgPSBqaWdnbGUoKSwgbCArPSB5ICogeTtcbiAgICAgICAgaWYgKGwgPCBkaXN0YW5jZU1pbjIpIGwgPSBNYXRoLnNxcnQoZGlzdGFuY2VNaW4yICogbCk7XG4gICAgICB9XG5cbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKHF1YWQuZGF0YSAhPT0gbm9kZSkge1xuICAgICAgICAgIHcgPSBzdHJlbmd0aHNbcXVhZC5kYXRhLmluZGV4XSAqIGFscGhhIC8gbDtcbiAgICAgICAgICBub2RlLnZ4ICs9IHggKiB3O1xuICAgICAgICAgIG5vZGUudnkgKz0geSAqIHc7XG4gICAgICAgIH1cbiAgICAgIH0gd2hpbGUgKHF1YWQgPSBxdWFkLm5leHQpO1xuICAgIH1cblxuICAgIGZvcmNlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoXykge1xuICAgICAgbm9kZXMgPSBfO1xuICAgICAgaW5pdGlhbGl6ZSgpO1xuICAgIH07XG5cbiAgICBmb3JjZS5zdHJlbmd0aCA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdHJlbmd0aCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkNigrXyksIGluaXRpYWxpemUoKSwgZm9yY2UpIDogc3RyZW5ndGg7XG4gICAgfTtcblxuICAgIGZvcmNlLmRpc3RhbmNlTWluID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRpc3RhbmNlTWluMiA9IF8gKiBfLCBmb3JjZSkgOiBNYXRoLnNxcnQoZGlzdGFuY2VNaW4yKTtcbiAgICB9O1xuXG4gICAgZm9yY2UuZGlzdGFuY2VNYXggPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZGlzdGFuY2VNYXgyID0gXyAqIF8sIGZvcmNlKSA6IE1hdGguc3FydChkaXN0YW5jZU1heDIpO1xuICAgIH07XG5cbiAgICBmb3JjZS50aGV0YSA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aGV0YTIgPSBfICogXywgZm9yY2UpIDogTWF0aC5zcXJ0KHRoZXRhMik7XG4gICAgfTtcblxuICAgIHJldHVybiBmb3JjZTtcbiAgfTtcblxuICB2YXIgeCQyID0gZnVuY3Rpb24geCQyKHgpIHtcbiAgICB2YXIgc3RyZW5ndGggPSBjb25zdGFudCQ2KDAuMSksXG4gICAgICAgIG5vZGVzLFxuICAgICAgICBzdHJlbmd0aHMsXG4gICAgICAgIHh6O1xuXG4gICAgaWYgKHR5cGVvZiB4ICE9PSBcImZ1bmN0aW9uXCIpIHggPSBjb25zdGFudCQ2KHggPT0gbnVsbCA/IDAgOiAreCk7XG5cbiAgICBmdW5jdGlvbiBmb3JjZShhbHBoYSkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBub2Rlcy5sZW5ndGgsIG5vZGU7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgbm9kZSA9IG5vZGVzW2ldLCBub2RlLnZ4ICs9ICh4eltpXSAtIG5vZGUueCkgKiBzdHJlbmd0aHNbaV0gKiBhbHBoYTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgICAgaWYgKCFub2RlcykgcmV0dXJuO1xuICAgICAgdmFyIGksXG4gICAgICAgICAgbiA9IG5vZGVzLmxlbmd0aDtcbiAgICAgIHN0cmVuZ3RocyA9IG5ldyBBcnJheShuKTtcbiAgICAgIHh6ID0gbmV3IEFycmF5KG4pO1xuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBzdHJlbmd0aHNbaV0gPSBpc05hTih4eltpXSA9ICt4KG5vZGVzW2ldLCBpLCBub2RlcykpID8gMCA6ICtzdHJlbmd0aChub2Rlc1tpXSwgaSwgbm9kZXMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvcmNlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoXykge1xuICAgICAgbm9kZXMgPSBfO1xuICAgICAgaW5pdGlhbGl6ZSgpO1xuICAgIH07XG5cbiAgICBmb3JjZS5zdHJlbmd0aCA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdHJlbmd0aCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkNigrXyksIGluaXRpYWxpemUoKSwgZm9yY2UpIDogc3RyZW5ndGg7XG4gICAgfTtcblxuICAgIGZvcmNlLnggPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkNigrXyksIGluaXRpYWxpemUoKSwgZm9yY2UpIDogeDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGZvcmNlO1xuICB9O1xuXG4gIHZhciB5JDIgPSBmdW5jdGlvbiB5JDIoeSkge1xuICAgIHZhciBzdHJlbmd0aCA9IGNvbnN0YW50JDYoMC4xKSxcbiAgICAgICAgbm9kZXMsXG4gICAgICAgIHN0cmVuZ3RocyxcbiAgICAgICAgeXo7XG5cbiAgICBpZiAodHlwZW9mIHkgIT09IFwiZnVuY3Rpb25cIikgeSA9IGNvbnN0YW50JDYoeSA9PSBudWxsID8gMCA6ICt5KTtcblxuICAgIGZ1bmN0aW9uIGZvcmNlKGFscGhhKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbiA9IG5vZGVzLmxlbmd0aCwgbm9kZTsgaSA8IG47ICsraSkge1xuICAgICAgICBub2RlID0gbm9kZXNbaV0sIG5vZGUudnkgKz0gKHl6W2ldIC0gbm9kZS55KSAqIHN0cmVuZ3Roc1tpXSAqIGFscGhhO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgICBpZiAoIW5vZGVzKSByZXR1cm47XG4gICAgICB2YXIgaSxcbiAgICAgICAgICBuID0gbm9kZXMubGVuZ3RoO1xuICAgICAgc3RyZW5ndGhzID0gbmV3IEFycmF5KG4pO1xuICAgICAgeXogPSBuZXcgQXJyYXkobik7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIHN0cmVuZ3Roc1tpXSA9IGlzTmFOKHl6W2ldID0gK3kobm9kZXNbaV0sIGksIG5vZGVzKSkgPyAwIDogK3N0cmVuZ3RoKG5vZGVzW2ldLCBpLCBub2Rlcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yY2UuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICBub2RlcyA9IF87XG4gICAgICBpbml0aWFsaXplKCk7XG4gICAgfTtcblxuICAgIGZvcmNlLnN0cmVuZ3RoID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN0cmVuZ3RoID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQ2KCtfKSwgaW5pdGlhbGl6ZSgpLCBmb3JjZSkgOiBzdHJlbmd0aDtcbiAgICB9O1xuXG4gICAgZm9yY2UueSA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQ2KCtfKSwgaW5pdGlhbGl6ZSgpLCBmb3JjZSkgOiB5O1xuICAgIH07XG5cbiAgICByZXR1cm4gZm9yY2U7XG4gIH07XG5cbiAgLy8gQ29tcHV0ZXMgdGhlIGRlY2ltYWwgY29lZmZpY2llbnQgYW5kIGV4cG9uZW50IG9mIHRoZSBzcGVjaWZpZWQgbnVtYmVyIHggd2l0aFxuICAvLyBzaWduaWZpY2FudCBkaWdpdHMgcCwgd2hlcmUgeCBpcyBwb3NpdGl2ZSBhbmQgcCBpcyBpbiBbMSwgMjFdIG9yIHVuZGVmaW5lZC5cbiAgLy8gRm9yIGV4YW1wbGUsIGZvcm1hdERlY2ltYWwoMS4yMykgcmV0dXJucyBbXCIxMjNcIiwgMF0uXG4gIHZhciBmb3JtYXREZWNpbWFsID0gZnVuY3Rpb24gZm9ybWF0RGVjaW1hbCh4LCBwKSB7XG4gICAgaWYgKChpID0gKHggPSBwID8geC50b0V4cG9uZW50aWFsKHAgLSAxKSA6IHgudG9FeHBvbmVudGlhbCgpKS5pbmRleE9mKFwiZVwiKSkgPCAwKSByZXR1cm4gbnVsbDsgLy8gTmFOLCDCsUluZmluaXR5XG4gICAgdmFyIGksXG4gICAgICAgIGNvZWZmaWNpZW50ID0geC5zbGljZSgwLCBpKTtcblxuICAgIC8vIFRoZSBzdHJpbmcgcmV0dXJuZWQgYnkgdG9FeHBvbmVudGlhbCBlaXRoZXIgaGFzIHRoZSBmb3JtIFxcZFxcLlxcZCtlWy0rXVxcZCtcbiAgICAvLyAoZS5nLiwgMS4yZSszKSBvciB0aGUgZm9ybSBcXGRlWy0rXVxcZCsgKGUuZy4sIDFlKzMpLlxuICAgIHJldHVybiBbY29lZmZpY2llbnQubGVuZ3RoID4gMSA/IGNvZWZmaWNpZW50WzBdICsgY29lZmZpY2llbnQuc2xpY2UoMikgOiBjb2VmZmljaWVudCwgK3guc2xpY2UoaSArIDEpXTtcbiAgfTtcblxuICB2YXIgZXhwb25lbnQkMSA9IGZ1bmN0aW9uIGV4cG9uZW50JDEoeCkge1xuICAgIHJldHVybiB4ID0gZm9ybWF0RGVjaW1hbChNYXRoLmFicyh4KSksIHggPyB4WzFdIDogTmFOO1xuICB9O1xuXG4gIHZhciBmb3JtYXRHcm91cCA9IGZ1bmN0aW9uIGZvcm1hdEdyb3VwKGdyb3VwaW5nLCB0aG91c2FuZHMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlLCB3aWR0aCkge1xuICAgICAgdmFyIGkgPSB2YWx1ZS5sZW5ndGgsXG4gICAgICAgICAgdCA9IFtdLFxuICAgICAgICAgIGogPSAwLFxuICAgICAgICAgIGcgPSBncm91cGluZ1swXSxcbiAgICAgICAgICBsZW5ndGggPSAwO1xuXG4gICAgICB3aGlsZSAoaSA+IDAgJiYgZyA+IDApIHtcbiAgICAgICAgaWYgKGxlbmd0aCArIGcgKyAxID4gd2lkdGgpIGcgPSBNYXRoLm1heCgxLCB3aWR0aCAtIGxlbmd0aCk7XG4gICAgICAgIHQucHVzaCh2YWx1ZS5zdWJzdHJpbmcoaSAtPSBnLCBpICsgZykpO1xuICAgICAgICBpZiAoKGxlbmd0aCArPSBnICsgMSkgPiB3aWR0aCkgYnJlYWs7XG4gICAgICAgIGcgPSBncm91cGluZ1tqID0gKGogKyAxKSAlIGdyb3VwaW5nLmxlbmd0aF07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0LnJldmVyc2UoKS5qb2luKHRob3VzYW5kcyk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgZm9ybWF0TnVtZXJhbHMgPSBmdW5jdGlvbiBmb3JtYXROdW1lcmFscyhudW1lcmFscykge1xuICAgIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKC9bMC05XS9nLCBmdW5jdGlvbiAoaSkge1xuICAgICAgICByZXR1cm4gbnVtZXJhbHNbK2ldO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgZm9ybWF0RGVmYXVsdCA9IGZ1bmN0aW9uIGZvcm1hdERlZmF1bHQoeCwgcCkge1xuICAgIHggPSB4LnRvUHJlY2lzaW9uKHApO1xuXG4gICAgb3V0OiBmb3IgKHZhciBuID0geC5sZW5ndGgsIGkgPSAxLCBpMCA9IC0xLCBpMTsgaSA8IG47ICsraSkge1xuICAgICAgc3dpdGNoICh4W2ldKSB7XG4gICAgICAgIGNhc2UgXCIuXCI6XG4gICAgICAgICAgaTAgPSBpMSA9IGk7YnJlYWs7XG4gICAgICAgIGNhc2UgXCIwXCI6XG4gICAgICAgICAgaWYgKGkwID09PSAwKSBpMCA9IGk7aTEgPSBpO2JyZWFrO1xuICAgICAgICBjYXNlIFwiZVwiOlxuICAgICAgICAgIGJyZWFrIG91dDtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBpZiAoaTAgPiAwKSBpMCA9IDA7YnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGkwID4gMCA/IHguc2xpY2UoMCwgaTApICsgeC5zbGljZShpMSArIDEpIDogeDtcbiAgfTtcblxuICB2YXIgcHJlZml4RXhwb25lbnQ7XG5cbiAgdmFyIGZvcm1hdFByZWZpeEF1dG8gPSBmdW5jdGlvbiBmb3JtYXRQcmVmaXhBdXRvKHgsIHApIHtcbiAgICB2YXIgZCA9IGZvcm1hdERlY2ltYWwoeCwgcCk7XG4gICAgaWYgKCFkKSByZXR1cm4geCArIFwiXCI7XG4gICAgdmFyIGNvZWZmaWNpZW50ID0gZFswXSxcbiAgICAgICAgZXhwb25lbnQgPSBkWzFdLFxuICAgICAgICBpID0gZXhwb25lbnQgLSAocHJlZml4RXhwb25lbnQgPSBNYXRoLm1heCgtOCwgTWF0aC5taW4oOCwgTWF0aC5mbG9vcihleHBvbmVudCAvIDMpKSkgKiAzKSArIDEsXG4gICAgICAgIG4gPSBjb2VmZmljaWVudC5sZW5ndGg7XG4gICAgcmV0dXJuIGkgPT09IG4gPyBjb2VmZmljaWVudCA6IGkgPiBuID8gY29lZmZpY2llbnQgKyBuZXcgQXJyYXkoaSAtIG4gKyAxKS5qb2luKFwiMFwiKSA6IGkgPiAwID8gY29lZmZpY2llbnQuc2xpY2UoMCwgaSkgKyBcIi5cIiArIGNvZWZmaWNpZW50LnNsaWNlKGkpIDogXCIwLlwiICsgbmV3IEFycmF5KDEgLSBpKS5qb2luKFwiMFwiKSArIGZvcm1hdERlY2ltYWwoeCwgTWF0aC5tYXgoMCwgcCArIGkgLSAxKSlbMF07IC8vIGxlc3MgdGhhbiAxeSFcbiAgfTtcblxuICB2YXIgZm9ybWF0Um91bmRlZCA9IGZ1bmN0aW9uIGZvcm1hdFJvdW5kZWQoeCwgcCkge1xuICAgIHZhciBkID0gZm9ybWF0RGVjaW1hbCh4LCBwKTtcbiAgICBpZiAoIWQpIHJldHVybiB4ICsgXCJcIjtcbiAgICB2YXIgY29lZmZpY2llbnQgPSBkWzBdLFxuICAgICAgICBleHBvbmVudCA9IGRbMV07XG4gICAgcmV0dXJuIGV4cG9uZW50IDwgMCA/IFwiMC5cIiArIG5ldyBBcnJheSgtZXhwb25lbnQpLmpvaW4oXCIwXCIpICsgY29lZmZpY2llbnQgOiBjb2VmZmljaWVudC5sZW5ndGggPiBleHBvbmVudCArIDEgPyBjb2VmZmljaWVudC5zbGljZSgwLCBleHBvbmVudCArIDEpICsgXCIuXCIgKyBjb2VmZmljaWVudC5zbGljZShleHBvbmVudCArIDEpIDogY29lZmZpY2llbnQgKyBuZXcgQXJyYXkoZXhwb25lbnQgLSBjb2VmZmljaWVudC5sZW5ndGggKyAyKS5qb2luKFwiMFwiKTtcbiAgfTtcblxuICB2YXIgZm9ybWF0VHlwZXMgPSB7XG4gICAgXCJcIjogZm9ybWF0RGVmYXVsdCxcbiAgICBcIiVcIjogZnVuY3Rpb24gXyh4LCBwKSB7XG4gICAgICByZXR1cm4gKHggKiAxMDApLnRvRml4ZWQocCk7XG4gICAgfSxcbiAgICBcImJcIjogZnVuY3Rpb24gYih4KSB7XG4gICAgICByZXR1cm4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygyKTtcbiAgICB9LFxuICAgIFwiY1wiOiBmdW5jdGlvbiBjKHgpIHtcbiAgICAgIHJldHVybiB4ICsgXCJcIjtcbiAgICB9LFxuICAgIFwiZFwiOiBmdW5jdGlvbiBkKHgpIHtcbiAgICAgIHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDEwKTtcbiAgICB9LFxuICAgIFwiZVwiOiBmdW5jdGlvbiBlKHgsIHApIHtcbiAgICAgIHJldHVybiB4LnRvRXhwb25lbnRpYWwocCk7XG4gICAgfSxcbiAgICBcImZcIjogZnVuY3Rpb24gZih4LCBwKSB7XG4gICAgICByZXR1cm4geC50b0ZpeGVkKHApO1xuICAgIH0sXG4gICAgXCJnXCI6IGZ1bmN0aW9uIGcoeCwgcCkge1xuICAgICAgcmV0dXJuIHgudG9QcmVjaXNpb24ocCk7XG4gICAgfSxcbiAgICBcIm9cIjogZnVuY3Rpb24gbyh4KSB7XG4gICAgICByZXR1cm4gTWF0aC5yb3VuZCh4KS50b1N0cmluZyg4KTtcbiAgICB9LFxuICAgIFwicFwiOiBmdW5jdGlvbiBwKHgsIF9wKSB7XG4gICAgICByZXR1cm4gZm9ybWF0Um91bmRlZCh4ICogMTAwLCBfcCk7XG4gICAgfSxcbiAgICBcInJcIjogZm9ybWF0Um91bmRlZCxcbiAgICBcInNcIjogZm9ybWF0UHJlZml4QXV0byxcbiAgICBcIlhcIjogZnVuY3Rpb24gWCh4KSB7XG4gICAgICByZXR1cm4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTtcbiAgICB9LFxuICAgIFwieFwiOiBmdW5jdGlvbiB4KF94KSB7XG4gICAgICByZXR1cm4gTWF0aC5yb3VuZChfeCkudG9TdHJpbmcoMTYpO1xuICAgIH1cbiAgfTtcblxuICAvLyBbW2ZpbGxdYWxpZ25dW3NpZ25dW3N5bWJvbF1bMF1bd2lkdGhdWyxdWy5wcmVjaXNpb25dW3R5cGVdXG4gIHZhciByZSA9IC9eKD86KC4pPyhbPD49Xl0pKT8oWytcXC1cXCggXSk/KFskI10pPygwKT8oXFxkKyk/KCwpPyhcXC5cXGQrKT8oW2EteiVdKT8kL2k7XG5cbiAgZnVuY3Rpb24gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcikge1xuICAgIHJldHVybiBuZXcgRm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcik7XG4gIH1cblxuICBmb3JtYXRTcGVjaWZpZXIucHJvdG90eXBlID0gRm9ybWF0U3BlY2lmaWVyLnByb3RvdHlwZTsgLy8gaW5zdGFuY2VvZlxuXG4gIGZ1bmN0aW9uIEZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpIHtcbiAgICBpZiAoIShtYXRjaCA9IHJlLmV4ZWMoc3BlY2lmaWVyKSkpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgZm9ybWF0OiBcIiArIHNwZWNpZmllcik7XG5cbiAgICB2YXIgbWF0Y2gsXG4gICAgICAgIGZpbGwgPSBtYXRjaFsxXSB8fCBcIiBcIixcbiAgICAgICAgYWxpZ24gPSBtYXRjaFsyXSB8fCBcIj5cIixcbiAgICAgICAgc2lnbiA9IG1hdGNoWzNdIHx8IFwiLVwiLFxuICAgICAgICBzeW1ib2wgPSBtYXRjaFs0XSB8fCBcIlwiLFxuICAgICAgICB6ZXJvID0gISFtYXRjaFs1XSxcbiAgICAgICAgd2lkdGggPSBtYXRjaFs2XSAmJiArbWF0Y2hbNl0sXG4gICAgICAgIGNvbW1hID0gISFtYXRjaFs3XSxcbiAgICAgICAgcHJlY2lzaW9uID0gbWF0Y2hbOF0gJiYgK21hdGNoWzhdLnNsaWNlKDEpLFxuICAgICAgICB0eXBlID0gbWF0Y2hbOV0gfHwgXCJcIjtcblxuICAgIC8vIFRoZSBcIm5cIiB0eXBlIGlzIGFuIGFsaWFzIGZvciBcIixnXCIuXG4gICAgaWYgKHR5cGUgPT09IFwiblwiKSBjb21tYSA9IHRydWUsIHR5cGUgPSBcImdcIjtcblxuICAgIC8vIE1hcCBpbnZhbGlkIHR5cGVzIHRvIHRoZSBkZWZhdWx0IGZvcm1hdC5cbiAgICBlbHNlIGlmICghZm9ybWF0VHlwZXNbdHlwZV0pIHR5cGUgPSBcIlwiO1xuXG4gICAgLy8gSWYgemVybyBmaWxsIGlzIHNwZWNpZmllZCwgcGFkZGluZyBnb2VzIGFmdGVyIHNpZ24gYW5kIGJlZm9yZSBkaWdpdHMuXG4gICAgaWYgKHplcm8gfHwgZmlsbCA9PT0gXCIwXCIgJiYgYWxpZ24gPT09IFwiPVwiKSB6ZXJvID0gdHJ1ZSwgZmlsbCA9IFwiMFwiLCBhbGlnbiA9IFwiPVwiO1xuXG4gICAgdGhpcy5maWxsID0gZmlsbDtcbiAgICB0aGlzLmFsaWduID0gYWxpZ247XG4gICAgdGhpcy5zaWduID0gc2lnbjtcbiAgICB0aGlzLnN5bWJvbCA9IHN5bWJvbDtcbiAgICB0aGlzLnplcm8gPSB6ZXJvO1xuICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICB0aGlzLmNvbW1hID0gY29tbWE7XG4gICAgdGhpcy5wcmVjaXNpb24gPSBwcmVjaXNpb247XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgfVxuXG4gIEZvcm1hdFNwZWNpZmllci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZmlsbCArIHRoaXMuYWxpZ24gKyB0aGlzLnNpZ24gKyB0aGlzLnN5bWJvbCArICh0aGlzLnplcm8gPyBcIjBcIiA6IFwiXCIpICsgKHRoaXMud2lkdGggPT0gbnVsbCA/IFwiXCIgOiBNYXRoLm1heCgxLCB0aGlzLndpZHRoIHwgMCkpICsgKHRoaXMuY29tbWEgPyBcIixcIiA6IFwiXCIpICsgKHRoaXMucHJlY2lzaW9uID09IG51bGwgPyBcIlwiIDogXCIuXCIgKyBNYXRoLm1heCgwLCB0aGlzLnByZWNpc2lvbiB8IDApKSArIHRoaXMudHlwZTtcbiAgfTtcblxuICB2YXIgaWRlbnRpdHkkMyA9IGZ1bmN0aW9uIGlkZW50aXR5JDMoeCkge1xuICAgIHJldHVybiB4O1xuICB9O1xuXG4gIHZhciBwcmVmaXhlcyA9IFtcInlcIiwgXCJ6XCIsIFwiYVwiLCBcImZcIiwgXCJwXCIsIFwiblwiLCBcIlxceEI1XCIsIFwibVwiLCBcIlwiLCBcImtcIiwgXCJNXCIsIFwiR1wiLCBcIlRcIiwgXCJQXCIsIFwiRVwiLCBcIlpcIiwgXCJZXCJdO1xuXG4gIHZhciBmb3JtYXRMb2NhbGUgPSBmdW5jdGlvbiBmb3JtYXRMb2NhbGUobG9jYWxlKSB7XG4gICAgdmFyIGdyb3VwID0gbG9jYWxlLmdyb3VwaW5nICYmIGxvY2FsZS50aG91c2FuZHMgPyBmb3JtYXRHcm91cChsb2NhbGUuZ3JvdXBpbmcsIGxvY2FsZS50aG91c2FuZHMpIDogaWRlbnRpdHkkMyxcbiAgICAgICAgY3VycmVuY3kgPSBsb2NhbGUuY3VycmVuY3ksXG4gICAgICAgIGRlY2ltYWwgPSBsb2NhbGUuZGVjaW1hbCxcbiAgICAgICAgbnVtZXJhbHMgPSBsb2NhbGUubnVtZXJhbHMgPyBmb3JtYXROdW1lcmFscyhsb2NhbGUubnVtZXJhbHMpIDogaWRlbnRpdHkkMyxcbiAgICAgICAgcGVyY2VudCA9IGxvY2FsZS5wZXJjZW50IHx8IFwiJVwiO1xuXG4gICAgZnVuY3Rpb24gbmV3Rm9ybWF0KHNwZWNpZmllcikge1xuICAgICAgc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcik7XG5cbiAgICAgIHZhciBmaWxsID0gc3BlY2lmaWVyLmZpbGwsXG4gICAgICAgICAgYWxpZ24gPSBzcGVjaWZpZXIuYWxpZ24sXG4gICAgICAgICAgc2lnbiA9IHNwZWNpZmllci5zaWduLFxuICAgICAgICAgIHN5bWJvbCA9IHNwZWNpZmllci5zeW1ib2wsXG4gICAgICAgICAgemVybyA9IHNwZWNpZmllci56ZXJvLFxuICAgICAgICAgIHdpZHRoID0gc3BlY2lmaWVyLndpZHRoLFxuICAgICAgICAgIGNvbW1hID0gc3BlY2lmaWVyLmNvbW1hLFxuICAgICAgICAgIHByZWNpc2lvbiA9IHNwZWNpZmllci5wcmVjaXNpb24sXG4gICAgICAgICAgdHlwZSA9IHNwZWNpZmllci50eXBlO1xuXG4gICAgICAvLyBDb21wdXRlIHRoZSBwcmVmaXggYW5kIHN1ZmZpeC5cbiAgICAgIC8vIEZvciBTSS1wcmVmaXgsIHRoZSBzdWZmaXggaXMgbGF6aWx5IGNvbXB1dGVkLlxuICAgICAgdmFyIHByZWZpeCA9IHN5bWJvbCA9PT0gXCIkXCIgPyBjdXJyZW5jeVswXSA6IHN5bWJvbCA9PT0gXCIjXCIgJiYgL1tib3hYXS8udGVzdCh0eXBlKSA/IFwiMFwiICsgdHlwZS50b0xvd2VyQ2FzZSgpIDogXCJcIixcbiAgICAgICAgICBzdWZmaXggPSBzeW1ib2wgPT09IFwiJFwiID8gY3VycmVuY3lbMV0gOiAvWyVwXS8udGVzdCh0eXBlKSA/IHBlcmNlbnQgOiBcIlwiO1xuXG4gICAgICAvLyBXaGF0IGZvcm1hdCBmdW5jdGlvbiBzaG91bGQgd2UgdXNlP1xuICAgICAgLy8gSXMgdGhpcyBhbiBpbnRlZ2VyIHR5cGU/XG4gICAgICAvLyBDYW4gdGhpcyB0eXBlIGdlbmVyYXRlIGV4cG9uZW50aWFsIG5vdGF0aW9uP1xuICAgICAgdmFyIGZvcm1hdFR5cGUgPSBmb3JtYXRUeXBlc1t0eXBlXSxcbiAgICAgICAgICBtYXliZVN1ZmZpeCA9ICF0eXBlIHx8IC9bZGVmZ3BycyVdLy50ZXN0KHR5cGUpO1xuXG4gICAgICAvLyBTZXQgdGhlIGRlZmF1bHQgcHJlY2lzaW9uIGlmIG5vdCBzcGVjaWZpZWQsXG4gICAgICAvLyBvciBjbGFtcCB0aGUgc3BlY2lmaWVkIHByZWNpc2lvbiB0byB0aGUgc3VwcG9ydGVkIHJhbmdlLlxuICAgICAgLy8gRm9yIHNpZ25pZmljYW50IHByZWNpc2lvbiwgaXQgbXVzdCBiZSBpbiBbMSwgMjFdLlxuICAgICAgLy8gRm9yIGZpeGVkIHByZWNpc2lvbiwgaXQgbXVzdCBiZSBpbiBbMCwgMjBdLlxuICAgICAgcHJlY2lzaW9uID0gcHJlY2lzaW9uID09IG51bGwgPyB0eXBlID8gNiA6IDEyIDogL1tncHJzXS8udGVzdCh0eXBlKSA/IE1hdGgubWF4KDEsIE1hdGgubWluKDIxLCBwcmVjaXNpb24pKSA6IE1hdGgubWF4KDAsIE1hdGgubWluKDIwLCBwcmVjaXNpb24pKTtcblxuICAgICAgZnVuY3Rpb24gZm9ybWF0KHZhbHVlKSB7XG4gICAgICAgIHZhciB2YWx1ZVByZWZpeCA9IHByZWZpeCxcbiAgICAgICAgICAgIHZhbHVlU3VmZml4ID0gc3VmZml4LFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIG4sXG4gICAgICAgICAgICBjO1xuXG4gICAgICAgIGlmICh0eXBlID09PSBcImNcIikge1xuICAgICAgICAgIHZhbHVlU3VmZml4ID0gZm9ybWF0VHlwZSh2YWx1ZSkgKyB2YWx1ZVN1ZmZpeDtcbiAgICAgICAgICB2YWx1ZSA9IFwiXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWUgPSArdmFsdWU7XG5cbiAgICAgICAgICAvLyBQZXJmb3JtIHRoZSBpbml0aWFsIGZvcm1hdHRpbmcuXG4gICAgICAgICAgdmFyIHZhbHVlTmVnYXRpdmUgPSB2YWx1ZSA8IDA7XG4gICAgICAgICAgdmFsdWUgPSBmb3JtYXRUeXBlKE1hdGguYWJzKHZhbHVlKSwgcHJlY2lzaW9uKTtcblxuICAgICAgICAgIC8vIElmIGEgbmVnYXRpdmUgdmFsdWUgcm91bmRzIHRvIHplcm8gZHVyaW5nIGZvcm1hdHRpbmcsIHRyZWF0IGFzIHBvc2l0aXZlLlxuICAgICAgICAgIGlmICh2YWx1ZU5lZ2F0aXZlICYmICt2YWx1ZSA9PT0gMCkgdmFsdWVOZWdhdGl2ZSA9IGZhbHNlO1xuXG4gICAgICAgICAgLy8gQ29tcHV0ZSB0aGUgcHJlZml4IGFuZCBzdWZmaXguXG4gICAgICAgICAgdmFsdWVQcmVmaXggPSAodmFsdWVOZWdhdGl2ZSA/IHNpZ24gPT09IFwiKFwiID8gc2lnbiA6IFwiLVwiIDogc2lnbiA9PT0gXCItXCIgfHwgc2lnbiA9PT0gXCIoXCIgPyBcIlwiIDogc2lnbikgKyB2YWx1ZVByZWZpeDtcbiAgICAgICAgICB2YWx1ZVN1ZmZpeCA9IHZhbHVlU3VmZml4ICsgKHR5cGUgPT09IFwic1wiID8gcHJlZml4ZXNbOCArIHByZWZpeEV4cG9uZW50IC8gM10gOiBcIlwiKSArICh2YWx1ZU5lZ2F0aXZlICYmIHNpZ24gPT09IFwiKFwiID8gXCIpXCIgOiBcIlwiKTtcblxuICAgICAgICAgIC8vIEJyZWFrIHRoZSBmb3JtYXR0ZWQgdmFsdWUgaW50byB0aGUgaW50ZWdlciDigJx2YWx1ZeKAnSBwYXJ0IHRoYXQgY2FuIGJlXG4gICAgICAgICAgLy8gZ3JvdXBlZCwgYW5kIGZyYWN0aW9uYWwgb3IgZXhwb25lbnRpYWwg4oCcc3VmZml44oCdIHBhcnQgdGhhdCBpcyBub3QuXG4gICAgICAgICAgaWYgKG1heWJlU3VmZml4KSB7XG4gICAgICAgICAgICBpID0gLTEsIG4gPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICAgICAgICBpZiAoYyA9IHZhbHVlLmNoYXJDb2RlQXQoaSksIDQ4ID4gYyB8fCBjID4gNTcpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZVN1ZmZpeCA9IChjID09PSA0NiA/IGRlY2ltYWwgKyB2YWx1ZS5zbGljZShpICsgMSkgOiB2YWx1ZS5zbGljZShpKSkgKyB2YWx1ZVN1ZmZpeDtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDAsIGkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgdGhlIGZpbGwgY2hhcmFjdGVyIGlzIG5vdCBcIjBcIiwgZ3JvdXBpbmcgaXMgYXBwbGllZCBiZWZvcmUgcGFkZGluZy5cbiAgICAgICAgaWYgKGNvbW1hICYmICF6ZXJvKSB2YWx1ZSA9IGdyb3VwKHZhbHVlLCBJbmZpbml0eSk7XG5cbiAgICAgICAgLy8gQ29tcHV0ZSB0aGUgcGFkZGluZy5cbiAgICAgICAgdmFyIGxlbmd0aCA9IHZhbHVlUHJlZml4Lmxlbmd0aCArIHZhbHVlLmxlbmd0aCArIHZhbHVlU3VmZml4Lmxlbmd0aCxcbiAgICAgICAgICAgIHBhZGRpbmcgPSBsZW5ndGggPCB3aWR0aCA/IG5ldyBBcnJheSh3aWR0aCAtIGxlbmd0aCArIDEpLmpvaW4oZmlsbCkgOiBcIlwiO1xuXG4gICAgICAgIC8vIElmIHRoZSBmaWxsIGNoYXJhY3RlciBpcyBcIjBcIiwgZ3JvdXBpbmcgaXMgYXBwbGllZCBhZnRlciBwYWRkaW5nLlxuICAgICAgICBpZiAoY29tbWEgJiYgemVybykgdmFsdWUgPSBncm91cChwYWRkaW5nICsgdmFsdWUsIHBhZGRpbmcubGVuZ3RoID8gd2lkdGggLSB2YWx1ZVN1ZmZpeC5sZW5ndGggOiBJbmZpbml0eSksIHBhZGRpbmcgPSBcIlwiO1xuXG4gICAgICAgIC8vIFJlY29uc3RydWN0IHRoZSBmaW5hbCBvdXRwdXQgYmFzZWQgb24gdGhlIGRlc2lyZWQgYWxpZ25tZW50LlxuICAgICAgICBzd2l0Y2ggKGFsaWduKSB7XG4gICAgICAgICAgY2FzZSBcIjxcIjpcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWVQcmVmaXggKyB2YWx1ZSArIHZhbHVlU3VmZml4ICsgcGFkZGluZzticmVhaztcbiAgICAgICAgICBjYXNlIFwiPVwiOlxuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZVByZWZpeCArIHBhZGRpbmcgKyB2YWx1ZSArIHZhbHVlU3VmZml4O2JyZWFrO1xuICAgICAgICAgIGNhc2UgXCJeXCI6XG4gICAgICAgICAgICB2YWx1ZSA9IHBhZGRpbmcuc2xpY2UoMCwgbGVuZ3RoID0gcGFkZGluZy5sZW5ndGggPj4gMSkgKyB2YWx1ZVByZWZpeCArIHZhbHVlICsgdmFsdWVTdWZmaXggKyBwYWRkaW5nLnNsaWNlKGxlbmd0aCk7YnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHZhbHVlID0gcGFkZGluZyArIHZhbHVlUHJlZml4ICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeDticmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudW1lcmFscyh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGZvcm1hdC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHNwZWNpZmllciArIFwiXCI7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gZm9ybWF0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZvcm1hdFByZWZpeChzcGVjaWZpZXIsIHZhbHVlKSB7XG4gICAgICB2YXIgZiA9IG5ld0Zvcm1hdCgoc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllciksIHNwZWNpZmllci50eXBlID0gXCJmXCIsIHNwZWNpZmllcikpLFxuICAgICAgICAgIGUgPSBNYXRoLm1heCgtOCwgTWF0aC5taW4oOCwgTWF0aC5mbG9vcihleHBvbmVudCQxKHZhbHVlKSAvIDMpKSkgKiAzLFxuICAgICAgICAgIGsgPSBNYXRoLnBvdygxMCwgLWUpLFxuICAgICAgICAgIHByZWZpeCA9IHByZWZpeGVzWzggKyBlIC8gM107XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBmKGsgKiB2YWx1ZSkgKyBwcmVmaXg7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBmb3JtYXQ6IG5ld0Zvcm1hdCxcbiAgICAgIGZvcm1hdFByZWZpeDogZm9ybWF0UHJlZml4XG4gICAgfTtcbiAgfTtcblxuICB2YXIgbG9jYWxlJDE7XG5cbiAgZGVmYXVsdExvY2FsZSh7XG4gICAgZGVjaW1hbDogXCIuXCIsXG4gICAgdGhvdXNhbmRzOiBcIixcIixcbiAgICBncm91cGluZzogWzNdLFxuICAgIGN1cnJlbmN5OiBbXCIkXCIsIFwiXCJdXG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGRlZmF1bHRMb2NhbGUoZGVmaW5pdGlvbikge1xuICAgIGxvY2FsZSQxID0gZm9ybWF0TG9jYWxlKGRlZmluaXRpb24pO1xuICAgIGV4cG9ydHMuZm9ybWF0ID0gbG9jYWxlJDEuZm9ybWF0O1xuICAgIGV4cG9ydHMuZm9ybWF0UHJlZml4ID0gbG9jYWxlJDEuZm9ybWF0UHJlZml4O1xuICAgIHJldHVybiBsb2NhbGUkMTtcbiAgfVxuXG4gIHZhciBwcmVjaXNpb25GaXhlZCA9IGZ1bmN0aW9uIHByZWNpc2lvbkZpeGVkKHN0ZXApIHtcbiAgICByZXR1cm4gTWF0aC5tYXgoMCwgLWV4cG9uZW50JDEoTWF0aC5hYnMoc3RlcCkpKTtcbiAgfTtcblxuICB2YXIgcHJlY2lzaW9uUHJlZml4ID0gZnVuY3Rpb24gcHJlY2lzaW9uUHJlZml4KHN0ZXAsIHZhbHVlKSB7XG4gICAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50JDEodmFsdWUpIC8gMykpKSAqIDMgLSBleHBvbmVudCQxKE1hdGguYWJzKHN0ZXApKSk7XG4gIH07XG5cbiAgdmFyIHByZWNpc2lvblJvdW5kID0gZnVuY3Rpb24gcHJlY2lzaW9uUm91bmQoc3RlcCwgbWF4KSB7XG4gICAgc3RlcCA9IE1hdGguYWJzKHN0ZXApLCBtYXggPSBNYXRoLmFicyhtYXgpIC0gc3RlcDtcbiAgICByZXR1cm4gTWF0aC5tYXgoMCwgZXhwb25lbnQkMShtYXgpIC0gZXhwb25lbnQkMShzdGVwKSkgKyAxO1xuICB9O1xuXG4gIC8vIEFkZHMgZmxvYXRpbmcgcG9pbnQgbnVtYmVycyB3aXRoIHR3aWNlIHRoZSBub3JtYWwgcHJlY2lzaW9uLlxuICAvLyBSZWZlcmVuY2U6IEouIFIuIFNoZXdjaHVrLCBBZGFwdGl2ZSBQcmVjaXNpb24gRmxvYXRpbmctUG9pbnQgQXJpdGhtZXRpYyBhbmRcbiAgLy8gRmFzdCBSb2J1c3QgR2VvbWV0cmljIFByZWRpY2F0ZXMsIERpc2NyZXRlICYgQ29tcHV0YXRpb25hbCBHZW9tZXRyeSAxOCgzKVxuICAvLyAzMDXigJMzNjMgKDE5OTcpLlxuICAvLyBDb2RlIGFkYXB0ZWQgZnJvbSBHZW9ncmFwaGljTGliIGJ5IENoYXJsZXMgRi4gRi4gS2FybmV5LFxuICAvLyBodHRwOi8vZ2VvZ3JhcGhpY2xpYi5zb3VyY2Vmb3JnZS5uZXQvXG5cbiAgdmFyIGFkZGVyID0gZnVuY3Rpb24gYWRkZXIoKSB7XG4gICAgcmV0dXJuIG5ldyBBZGRlcigpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFkZGVyKCkge1xuICAgIHRoaXMucmVzZXQoKTtcbiAgfVxuXG4gIEFkZGVyLnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQWRkZXIsXG4gICAgcmVzZXQ6IGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgdGhpcy5zID0gLy8gcm91bmRlZCB2YWx1ZVxuICAgICAgdGhpcy50ID0gMDsgLy8gZXhhY3QgZXJyb3JcbiAgICB9LFxuICAgIGFkZDogZnVuY3Rpb24gYWRkKHkpIHtcbiAgICAgIGFkZCQxKHRlbXAsIHksIHRoaXMudCk7XG4gICAgICBhZGQkMSh0aGlzLCB0ZW1wLnMsIHRoaXMucyk7XG4gICAgICBpZiAodGhpcy5zKSB0aGlzLnQgKz0gdGVtcC50O2Vsc2UgdGhpcy5zID0gdGVtcC50O1xuICAgIH0sXG4gICAgdmFsdWVPZjogZnVuY3Rpb24gdmFsdWVPZigpIHtcbiAgICAgIHJldHVybiB0aGlzLnM7XG4gICAgfVxuICB9O1xuXG4gIHZhciB0ZW1wID0gbmV3IEFkZGVyKCk7XG5cbiAgZnVuY3Rpb24gYWRkJDEoYWRkZXIsIGEsIGIpIHtcbiAgICB2YXIgeCA9IGFkZGVyLnMgPSBhICsgYixcbiAgICAgICAgYnYgPSB4IC0gYSxcbiAgICAgICAgYXYgPSB4IC0gYnY7XG4gICAgYWRkZXIudCA9IGEgLSBhdiArIChiIC0gYnYpO1xuICB9XG5cbiAgdmFyIGVwc2lsb24kMiA9IDFlLTY7XG4gIHZhciBlcHNpbG9uMiQxID0gMWUtMTI7XG4gIHZhciBwaSQzID0gTWF0aC5QSTtcbiAgdmFyIGhhbGZQaSQyID0gcGkkMyAvIDI7XG4gIHZhciBxdWFydGVyUGkgPSBwaSQzIC8gNDtcbiAgdmFyIHRhdSQzID0gcGkkMyAqIDI7XG5cbiAgdmFyIGRlZ3JlZXMkMSA9IDE4MCAvIHBpJDM7XG4gIHZhciByYWRpYW5zID0gcGkkMyAvIDE4MDtcblxuICB2YXIgYWJzID0gTWF0aC5hYnM7XG4gIHZhciBhdGFuID0gTWF0aC5hdGFuO1xuICB2YXIgYXRhbjIgPSBNYXRoLmF0YW4yO1xuICB2YXIgY29zJDEgPSBNYXRoLmNvcztcbiAgdmFyIGNlaWwgPSBNYXRoLmNlaWw7XG4gIHZhciBleHAgPSBNYXRoLmV4cDtcblxuICB2YXIgbG9nID0gTWF0aC5sb2c7XG4gIHZhciBwb3cgPSBNYXRoLnBvdztcbiAgdmFyIHNpbiQxID0gTWF0aC5zaW47XG4gIHZhciBzaWduID0gTWF0aC5zaWduIHx8IGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIHggPiAwID8gMSA6IHggPCAwID8gLTEgOiAwO1xuICB9O1xuICB2YXIgc3FydCA9IE1hdGguc3FydDtcbiAgdmFyIHRhbiA9IE1hdGgudGFuO1xuXG4gIGZ1bmN0aW9uIGFjb3MoeCkge1xuICAgIHJldHVybiB4ID4gMSA/IDAgOiB4IDwgLTEgPyBwaSQzIDogTWF0aC5hY29zKHgpO1xuICB9XG5cbiAgZnVuY3Rpb24gYXNpbih4KSB7XG4gICAgcmV0dXJuIHggPiAxID8gaGFsZlBpJDIgOiB4IDwgLTEgPyAtaGFsZlBpJDIgOiBNYXRoLmFzaW4oeCk7XG4gIH1cblxuICBmdW5jdGlvbiBoYXZlcnNpbih4KSB7XG4gICAgcmV0dXJuICh4ID0gc2luJDEoeCAvIDIpKSAqIHg7XG4gIH1cblxuICBmdW5jdGlvbiBub29wJDEoKSB7fVxuXG4gIGZ1bmN0aW9uIHN0cmVhbUdlb21ldHJ5KGdlb21ldHJ5LCBzdHJlYW0pIHtcbiAgICBpZiAoZ2VvbWV0cnkgJiYgc3RyZWFtR2VvbWV0cnlUeXBlLmhhc093blByb3BlcnR5KGdlb21ldHJ5LnR5cGUpKSB7XG4gICAgICBzdHJlYW1HZW9tZXRyeVR5cGVbZ2VvbWV0cnkudHlwZV0oZ2VvbWV0cnksIHN0cmVhbSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHN0cmVhbU9iamVjdFR5cGUgPSB7XG4gICAgRmVhdHVyZTogZnVuY3Rpb24gRmVhdHVyZShvYmplY3QsIHN0cmVhbSkge1xuICAgICAgc3RyZWFtR2VvbWV0cnkob2JqZWN0Lmdlb21ldHJ5LCBzdHJlYW0pO1xuICAgIH0sXG4gICAgRmVhdHVyZUNvbGxlY3Rpb246IGZ1bmN0aW9uIEZlYXR1cmVDb2xsZWN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgICB2YXIgZmVhdHVyZXMgPSBvYmplY3QuZmVhdHVyZXMsXG4gICAgICAgICAgaSA9IC0xLFxuICAgICAgICAgIG4gPSBmZWF0dXJlcy5sZW5ndGg7XG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBzdHJlYW1HZW9tZXRyeShmZWF0dXJlc1tpXS5nZW9tZXRyeSwgc3RyZWFtKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIHN0cmVhbUdlb21ldHJ5VHlwZSA9IHtcbiAgICBTcGhlcmU6IGZ1bmN0aW9uIFNwaGVyZShvYmplY3QsIHN0cmVhbSkge1xuICAgICAgc3RyZWFtLnNwaGVyZSgpO1xuICAgIH0sXG4gICAgUG9pbnQ6IGZ1bmN0aW9uIFBvaW50KG9iamVjdCwgc3RyZWFtKSB7XG4gICAgICBvYmplY3QgPSBvYmplY3QuY29vcmRpbmF0ZXM7XG4gICAgICBzdHJlYW0ucG9pbnQob2JqZWN0WzBdLCBvYmplY3RbMV0sIG9iamVjdFsyXSk7XG4gICAgfSxcbiAgICBNdWx0aVBvaW50OiBmdW5jdGlvbiBNdWx0aVBvaW50KG9iamVjdCwgc3RyZWFtKSB7XG4gICAgICB2YXIgY29vcmRpbmF0ZXMgPSBvYmplY3QuY29vcmRpbmF0ZXMsXG4gICAgICAgICAgaSA9IC0xLFxuICAgICAgICAgIG4gPSBjb29yZGluYXRlcy5sZW5ndGg7XG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBvYmplY3QgPSBjb29yZGluYXRlc1tpXSwgc3RyZWFtLnBvaW50KG9iamVjdFswXSwgb2JqZWN0WzFdLCBvYmplY3RbMl0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgTGluZVN0cmluZzogZnVuY3Rpb24gTGluZVN0cmluZyhvYmplY3QsIHN0cmVhbSkge1xuICAgICAgc3RyZWFtTGluZShvYmplY3QuY29vcmRpbmF0ZXMsIHN0cmVhbSwgMCk7XG4gICAgfSxcbiAgICBNdWx0aUxpbmVTdHJpbmc6IGZ1bmN0aW9uIE11bHRpTGluZVN0cmluZyhvYmplY3QsIHN0cmVhbSkge1xuICAgICAgdmFyIGNvb3JkaW5hdGVzID0gb2JqZWN0LmNvb3JkaW5hdGVzLFxuICAgICAgICAgIGkgPSAtMSxcbiAgICAgICAgICBuID0gY29vcmRpbmF0ZXMubGVuZ3RoO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgc3RyZWFtTGluZShjb29yZGluYXRlc1tpXSwgc3RyZWFtLCAwKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFBvbHlnb246IGZ1bmN0aW9uIFBvbHlnb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICAgIHN0cmVhbVBvbHlnb24ob2JqZWN0LmNvb3JkaW5hdGVzLCBzdHJlYW0pO1xuICAgIH0sXG4gICAgTXVsdGlQb2x5Z29uOiBmdW5jdGlvbiBNdWx0aVBvbHlnb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICAgIHZhciBjb29yZGluYXRlcyA9IG9iamVjdC5jb29yZGluYXRlcyxcbiAgICAgICAgICBpID0gLTEsXG4gICAgICAgICAgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aDtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIHN0cmVhbVBvbHlnb24oY29vcmRpbmF0ZXNbaV0sIHN0cmVhbSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBHZW9tZXRyeUNvbGxlY3Rpb246IGZ1bmN0aW9uIEdlb21ldHJ5Q29sbGVjdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICAgICAgdmFyIGdlb21ldHJpZXMgPSBvYmplY3QuZ2VvbWV0cmllcyxcbiAgICAgICAgICBpID0gLTEsXG4gICAgICAgICAgbiA9IGdlb21ldHJpZXMubGVuZ3RoO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgc3RyZWFtR2VvbWV0cnkoZ2VvbWV0cmllc1tpXSwgc3RyZWFtKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gc3RyZWFtTGluZShjb29yZGluYXRlcywgc3RyZWFtLCBjbG9zZWQpIHtcbiAgICB2YXIgaSA9IC0xLFxuICAgICAgICBuID0gY29vcmRpbmF0ZXMubGVuZ3RoIC0gY2xvc2VkLFxuICAgICAgICBjb29yZGluYXRlO1xuICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgY29vcmRpbmF0ZSA9IGNvb3JkaW5hdGVzW2ldLCBzdHJlYW0ucG9pbnQoY29vcmRpbmF0ZVswXSwgY29vcmRpbmF0ZVsxXSwgY29vcmRpbmF0ZVsyXSk7XG4gICAgfXN0cmVhbS5saW5lRW5kKCk7XG4gIH1cblxuICBmdW5jdGlvbiBzdHJlYW1Qb2x5Z29uKGNvb3JkaW5hdGVzLCBzdHJlYW0pIHtcbiAgICB2YXIgaSA9IC0xLFxuICAgICAgICBuID0gY29vcmRpbmF0ZXMubGVuZ3RoO1xuICAgIHN0cmVhbS5wb2x5Z29uU3RhcnQoKTtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgc3RyZWFtTGluZShjb29yZGluYXRlc1tpXSwgc3RyZWFtLCAxKTtcbiAgICB9c3RyZWFtLnBvbHlnb25FbmQoKTtcbiAgfVxuXG4gIHZhciBnZW9TdHJlYW0gPSBmdW5jdGlvbiBnZW9TdHJlYW0ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICBpZiAob2JqZWN0ICYmIHN0cmVhbU9iamVjdFR5cGUuaGFzT3duUHJvcGVydHkob2JqZWN0LnR5cGUpKSB7XG4gICAgICBzdHJlYW1PYmplY3RUeXBlW29iamVjdC50eXBlXShvYmplY3QsIHN0cmVhbSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0cmVhbUdlb21ldHJ5KG9iamVjdCwgc3RyZWFtKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGFyZWFSaW5nU3VtID0gYWRkZXIoKTtcblxuICB2YXIgYXJlYVN1bSA9IGFkZGVyKCk7XG4gIHZhciBsYW1iZGEwMDtcbiAgdmFyIHBoaTAwO1xuICB2YXIgbGFtYmRhMDtcbiAgdmFyIGNvc1BoaTA7XG4gIHZhciBzaW5QaGkwO1xuXG4gIHZhciBhcmVhU3RyZWFtID0ge1xuICAgIHBvaW50OiBub29wJDEsXG4gICAgbGluZVN0YXJ0OiBub29wJDEsXG4gICAgbGluZUVuZDogbm9vcCQxLFxuICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24gcG9seWdvblN0YXJ0KCkge1xuICAgICAgYXJlYVJpbmdTdW0ucmVzZXQoKTtcbiAgICAgIGFyZWFTdHJlYW0ubGluZVN0YXJ0ID0gYXJlYVJpbmdTdGFydDtcbiAgICAgIGFyZWFTdHJlYW0ubGluZUVuZCA9IGFyZWFSaW5nRW5kO1xuICAgIH0sXG4gICAgcG9seWdvbkVuZDogZnVuY3Rpb24gcG9seWdvbkVuZCgpIHtcbiAgICAgIHZhciBhcmVhUmluZyA9ICthcmVhUmluZ1N1bTtcbiAgICAgIGFyZWFTdW0uYWRkKGFyZWFSaW5nIDwgMCA/IHRhdSQzICsgYXJlYVJpbmcgOiBhcmVhUmluZyk7XG4gICAgICB0aGlzLmxpbmVTdGFydCA9IHRoaXMubGluZUVuZCA9IHRoaXMucG9pbnQgPSBub29wJDE7XG4gICAgfSxcbiAgICBzcGhlcmU6IGZ1bmN0aW9uIHNwaGVyZSgpIHtcbiAgICAgIGFyZWFTdW0uYWRkKHRhdSQzKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gYXJlYVJpbmdTdGFydCgpIHtcbiAgICBhcmVhU3RyZWFtLnBvaW50ID0gYXJlYVBvaW50Rmlyc3Q7XG4gIH1cblxuICBmdW5jdGlvbiBhcmVhUmluZ0VuZCgpIHtcbiAgICBhcmVhUG9pbnQobGFtYmRhMDAsIHBoaTAwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFyZWFQb2ludEZpcnN0KGxhbWJkYSwgcGhpKSB7XG4gICAgYXJlYVN0cmVhbS5wb2ludCA9IGFyZWFQb2ludDtcbiAgICBsYW1iZGEwMCA9IGxhbWJkYSwgcGhpMDAgPSBwaGk7XG4gICAgbGFtYmRhICo9IHJhZGlhbnMsIHBoaSAqPSByYWRpYW5zO1xuICAgIGxhbWJkYTAgPSBsYW1iZGEsIGNvc1BoaTAgPSBjb3MkMShwaGkgPSBwaGkgLyAyICsgcXVhcnRlclBpKSwgc2luUGhpMCA9IHNpbiQxKHBoaSk7XG4gIH1cblxuICBmdW5jdGlvbiBhcmVhUG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgICBsYW1iZGEgKj0gcmFkaWFucywgcGhpICo9IHJhZGlhbnM7XG4gICAgcGhpID0gcGhpIC8gMiArIHF1YXJ0ZXJQaTsgLy8gaGFsZiB0aGUgYW5ndWxhciBkaXN0YW5jZSBmcm9tIHNvdXRoIHBvbGVcblxuICAgIC8vIFNwaGVyaWNhbCBleGNlc3MgRSBmb3IgYSBzcGhlcmljYWwgdHJpYW5nbGUgd2l0aCB2ZXJ0aWNlczogc291dGggcG9sZSxcbiAgICAvLyBwcmV2aW91cyBwb2ludCwgY3VycmVudCBwb2ludC4gIFVzZXMgYSBmb3JtdWxhIGRlcml2ZWQgZnJvbSBDYWdub2xp4oCZc1xuICAgIC8vIHRoZW9yZW0uICBTZWUgVG9kaHVudGVyLCBTcGhlcmljYWwgVHJpZy4gKDE4NzEpLCBTZWMuIDEwMywgRXEuICgyKS5cbiAgICB2YXIgZExhbWJkYSA9IGxhbWJkYSAtIGxhbWJkYTAsXG4gICAgICAgIHNkTGFtYmRhID0gZExhbWJkYSA+PSAwID8gMSA6IC0xLFxuICAgICAgICBhZExhbWJkYSA9IHNkTGFtYmRhICogZExhbWJkYSxcbiAgICAgICAgY29zUGhpID0gY29zJDEocGhpKSxcbiAgICAgICAgc2luUGhpID0gc2luJDEocGhpKSxcbiAgICAgICAgayA9IHNpblBoaTAgKiBzaW5QaGksXG4gICAgICAgIHUgPSBjb3NQaGkwICogY29zUGhpICsgayAqIGNvcyQxKGFkTGFtYmRhKSxcbiAgICAgICAgdiA9IGsgKiBzZExhbWJkYSAqIHNpbiQxKGFkTGFtYmRhKTtcbiAgICBhcmVhUmluZ1N1bS5hZGQoYXRhbjIodiwgdSkpO1xuXG4gICAgLy8gQWR2YW5jZSB0aGUgcHJldmlvdXMgcG9pbnRzLlxuICAgIGxhbWJkYTAgPSBsYW1iZGEsIGNvc1BoaTAgPSBjb3NQaGksIHNpblBoaTAgPSBzaW5QaGk7XG4gIH1cblxuICB2YXIgYXJlYSA9IGZ1bmN0aW9uIGFyZWEob2JqZWN0KSB7XG4gICAgYXJlYVN1bS5yZXNldCgpO1xuICAgIGdlb1N0cmVhbShvYmplY3QsIGFyZWFTdHJlYW0pO1xuICAgIHJldHVybiBhcmVhU3VtICogMjtcbiAgfTtcblxuICBmdW5jdGlvbiBzcGhlcmljYWwoY2FydGVzaWFuKSB7XG4gICAgcmV0dXJuIFthdGFuMihjYXJ0ZXNpYW5bMV0sIGNhcnRlc2lhblswXSksIGFzaW4oY2FydGVzaWFuWzJdKV07XG4gIH1cblxuICBmdW5jdGlvbiBjYXJ0ZXNpYW4oc3BoZXJpY2FsKSB7XG4gICAgdmFyIGxhbWJkYSA9IHNwaGVyaWNhbFswXSxcbiAgICAgICAgcGhpID0gc3BoZXJpY2FsWzFdLFxuICAgICAgICBjb3NQaGkgPSBjb3MkMShwaGkpO1xuICAgIHJldHVybiBbY29zUGhpICogY29zJDEobGFtYmRhKSwgY29zUGhpICogc2luJDEobGFtYmRhKSwgc2luJDEocGhpKV07XG4gIH1cblxuICBmdW5jdGlvbiBjYXJ0ZXNpYW5Eb3QoYSwgYikge1xuICAgIHJldHVybiBhWzBdICogYlswXSArIGFbMV0gKiBiWzFdICsgYVsyXSAqIGJbMl07XG4gIH1cblxuICBmdW5jdGlvbiBjYXJ0ZXNpYW5Dcm9zcyhhLCBiKSB7XG4gICAgcmV0dXJuIFthWzFdICogYlsyXSAtIGFbMl0gKiBiWzFdLCBhWzJdICogYlswXSAtIGFbMF0gKiBiWzJdLCBhWzBdICogYlsxXSAtIGFbMV0gKiBiWzBdXTtcbiAgfVxuXG4gIC8vIFRPRE8gcmV0dXJuIGFcbiAgZnVuY3Rpb24gY2FydGVzaWFuQWRkSW5QbGFjZShhLCBiKSB7XG4gICAgYVswXSArPSBiWzBdLCBhWzFdICs9IGJbMV0sIGFbMl0gKz0gYlsyXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhcnRlc2lhblNjYWxlKHZlY3Rvciwgaykge1xuICAgIHJldHVybiBbdmVjdG9yWzBdICogaywgdmVjdG9yWzFdICogaywgdmVjdG9yWzJdICoga107XG4gIH1cblxuICAvLyBUT0RPIHJldHVybiBkXG4gIGZ1bmN0aW9uIGNhcnRlc2lhbk5vcm1hbGl6ZUluUGxhY2UoZCkge1xuICAgIHZhciBsID0gc3FydChkWzBdICogZFswXSArIGRbMV0gKiBkWzFdICsgZFsyXSAqIGRbMl0pO1xuICAgIGRbMF0gLz0gbCwgZFsxXSAvPSBsLCBkWzJdIC89IGw7XG4gIH1cblxuICB2YXIgbGFtYmRhMCQxO1xuICB2YXIgcGhpMDtcbiAgdmFyIGxhbWJkYTE7XG4gIHZhciBwaGkxO1xuICB2YXIgbGFtYmRhMjtcbiAgdmFyIGxhbWJkYTAwJDE7XG4gIHZhciBwaGkwMCQxO1xuICB2YXIgcDA7XG4gIHZhciBkZWx0YVN1bSA9IGFkZGVyKCk7XG4gIHZhciByYW5nZXM7XG4gIHZhciByYW5nZTtcblxuICB2YXIgYm91bmRzU3RyZWFtID0ge1xuICAgIHBvaW50OiBib3VuZHNQb2ludCxcbiAgICBsaW5lU3RhcnQ6IGJvdW5kc0xpbmVTdGFydCxcbiAgICBsaW5lRW5kOiBib3VuZHNMaW5lRW5kLFxuICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24gcG9seWdvblN0YXJ0KCkge1xuICAgICAgYm91bmRzU3RyZWFtLnBvaW50ID0gYm91bmRzUmluZ1BvaW50O1xuICAgICAgYm91bmRzU3RyZWFtLmxpbmVTdGFydCA9IGJvdW5kc1JpbmdTdGFydDtcbiAgICAgIGJvdW5kc1N0cmVhbS5saW5lRW5kID0gYm91bmRzUmluZ0VuZDtcbiAgICAgIGRlbHRhU3VtLnJlc2V0KCk7XG4gICAgICBhcmVhU3RyZWFtLnBvbHlnb25TdGFydCgpO1xuICAgIH0sXG4gICAgcG9seWdvbkVuZDogZnVuY3Rpb24gcG9seWdvbkVuZCgpIHtcbiAgICAgIGFyZWFTdHJlYW0ucG9seWdvbkVuZCgpO1xuICAgICAgYm91bmRzU3RyZWFtLnBvaW50ID0gYm91bmRzUG9pbnQ7XG4gICAgICBib3VuZHNTdHJlYW0ubGluZVN0YXJ0ID0gYm91bmRzTGluZVN0YXJ0O1xuICAgICAgYm91bmRzU3RyZWFtLmxpbmVFbmQgPSBib3VuZHNMaW5lRW5kO1xuICAgICAgaWYgKGFyZWFSaW5nU3VtIDwgMCkgbGFtYmRhMCQxID0gLShsYW1iZGExID0gMTgwKSwgcGhpMCA9IC0ocGhpMSA9IDkwKTtlbHNlIGlmIChkZWx0YVN1bSA+IGVwc2lsb24kMikgcGhpMSA9IDkwO2Vsc2UgaWYgKGRlbHRhU3VtIDwgLWVwc2lsb24kMikgcGhpMCA9IC05MDtcbiAgICAgIHJhbmdlWzBdID0gbGFtYmRhMCQxLCByYW5nZVsxXSA9IGxhbWJkYTE7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGJvdW5kc1BvaW50KGxhbWJkYSwgcGhpKSB7XG4gICAgcmFuZ2VzLnB1c2gocmFuZ2UgPSBbbGFtYmRhMCQxID0gbGFtYmRhLCBsYW1iZGExID0gbGFtYmRhXSk7XG4gICAgaWYgKHBoaSA8IHBoaTApIHBoaTAgPSBwaGk7XG4gICAgaWYgKHBoaSA+IHBoaTEpIHBoaTEgPSBwaGk7XG4gIH1cblxuICBmdW5jdGlvbiBsaW5lUG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgICB2YXIgcCA9IGNhcnRlc2lhbihbbGFtYmRhICogcmFkaWFucywgcGhpICogcmFkaWFuc10pO1xuICAgIGlmIChwMCkge1xuICAgICAgdmFyIG5vcm1hbCA9IGNhcnRlc2lhbkNyb3NzKHAwLCBwKSxcbiAgICAgICAgICBlcXVhdG9yaWFsID0gW25vcm1hbFsxXSwgLW5vcm1hbFswXSwgMF0sXG4gICAgICAgICAgaW5mbGVjdGlvbiA9IGNhcnRlc2lhbkNyb3NzKGVxdWF0b3JpYWwsIG5vcm1hbCk7XG4gICAgICBjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlKGluZmxlY3Rpb24pO1xuICAgICAgaW5mbGVjdGlvbiA9IHNwaGVyaWNhbChpbmZsZWN0aW9uKTtcbiAgICAgIHZhciBkZWx0YSA9IGxhbWJkYSAtIGxhbWJkYTIsXG4gICAgICAgICAgc2lnbiQkMSA9IGRlbHRhID4gMCA/IDEgOiAtMSxcbiAgICAgICAgICBsYW1iZGFpID0gaW5mbGVjdGlvblswXSAqIGRlZ3JlZXMkMSAqIHNpZ24kJDEsXG4gICAgICAgICAgcGhpaSxcbiAgICAgICAgICBhbnRpbWVyaWRpYW4gPSBhYnMoZGVsdGEpID4gMTgwO1xuICAgICAgaWYgKGFudGltZXJpZGlhbiBeIChzaWduJCQxICogbGFtYmRhMiA8IGxhbWJkYWkgJiYgbGFtYmRhaSA8IHNpZ24kJDEgKiBsYW1iZGEpKSB7XG4gICAgICAgIHBoaWkgPSBpbmZsZWN0aW9uWzFdICogZGVncmVlcyQxO1xuICAgICAgICBpZiAocGhpaSA+IHBoaTEpIHBoaTEgPSBwaGlpO1xuICAgICAgfSBlbHNlIGlmIChsYW1iZGFpID0gKGxhbWJkYWkgKyAzNjApICUgMzYwIC0gMTgwLCBhbnRpbWVyaWRpYW4gXiAoc2lnbiQkMSAqIGxhbWJkYTIgPCBsYW1iZGFpICYmIGxhbWJkYWkgPCBzaWduJCQxICogbGFtYmRhKSkge1xuICAgICAgICBwaGlpID0gLWluZmxlY3Rpb25bMV0gKiBkZWdyZWVzJDE7XG4gICAgICAgIGlmIChwaGlpIDwgcGhpMCkgcGhpMCA9IHBoaWk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocGhpIDwgcGhpMCkgcGhpMCA9IHBoaTtcbiAgICAgICAgaWYgKHBoaSA+IHBoaTEpIHBoaTEgPSBwaGk7XG4gICAgICB9XG4gICAgICBpZiAoYW50aW1lcmlkaWFuKSB7XG4gICAgICAgIGlmIChsYW1iZGEgPCBsYW1iZGEyKSB7XG4gICAgICAgICAgaWYgKGFuZ2xlKGxhbWJkYTAkMSwgbGFtYmRhKSA+IGFuZ2xlKGxhbWJkYTAkMSwgbGFtYmRhMSkpIGxhbWJkYTEgPSBsYW1iZGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGFuZ2xlKGxhbWJkYSwgbGFtYmRhMSkgPiBhbmdsZShsYW1iZGEwJDEsIGxhbWJkYTEpKSBsYW1iZGEwJDEgPSBsYW1iZGE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChsYW1iZGExID49IGxhbWJkYTAkMSkge1xuICAgICAgICAgIGlmIChsYW1iZGEgPCBsYW1iZGEwJDEpIGxhbWJkYTAkMSA9IGxhbWJkYTtcbiAgICAgICAgICBpZiAobGFtYmRhID4gbGFtYmRhMSkgbGFtYmRhMSA9IGxhbWJkYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAobGFtYmRhID4gbGFtYmRhMikge1xuICAgICAgICAgICAgaWYgKGFuZ2xlKGxhbWJkYTAkMSwgbGFtYmRhKSA+IGFuZ2xlKGxhbWJkYTAkMSwgbGFtYmRhMSkpIGxhbWJkYTEgPSBsYW1iZGE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChhbmdsZShsYW1iZGEsIGxhbWJkYTEpID4gYW5nbGUobGFtYmRhMCQxLCBsYW1iZGExKSkgbGFtYmRhMCQxID0gbGFtYmRhO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByYW5nZXMucHVzaChyYW5nZSA9IFtsYW1iZGEwJDEgPSBsYW1iZGEsIGxhbWJkYTEgPSBsYW1iZGFdKTtcbiAgICB9XG4gICAgaWYgKHBoaSA8IHBoaTApIHBoaTAgPSBwaGk7XG4gICAgaWYgKHBoaSA+IHBoaTEpIHBoaTEgPSBwaGk7XG4gICAgcDAgPSBwLCBsYW1iZGEyID0gbGFtYmRhO1xuICB9XG5cbiAgZnVuY3Rpb24gYm91bmRzTGluZVN0YXJ0KCkge1xuICAgIGJvdW5kc1N0cmVhbS5wb2ludCA9IGxpbmVQb2ludDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJvdW5kc0xpbmVFbmQoKSB7XG4gICAgcmFuZ2VbMF0gPSBsYW1iZGEwJDEsIHJhbmdlWzFdID0gbGFtYmRhMTtcbiAgICBib3VuZHNTdHJlYW0ucG9pbnQgPSBib3VuZHNQb2ludDtcbiAgICBwMCA9IG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBib3VuZHNSaW5nUG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgICBpZiAocDApIHtcbiAgICAgIHZhciBkZWx0YSA9IGxhbWJkYSAtIGxhbWJkYTI7XG4gICAgICBkZWx0YVN1bS5hZGQoYWJzKGRlbHRhKSA+IDE4MCA/IGRlbHRhICsgKGRlbHRhID4gMCA/IDM2MCA6IC0zNjApIDogZGVsdGEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsYW1iZGEwMCQxID0gbGFtYmRhLCBwaGkwMCQxID0gcGhpO1xuICAgIH1cbiAgICBhcmVhU3RyZWFtLnBvaW50KGxhbWJkYSwgcGhpKTtcbiAgICBsaW5lUG9pbnQobGFtYmRhLCBwaGkpO1xuICB9XG5cbiAgZnVuY3Rpb24gYm91bmRzUmluZ1N0YXJ0KCkge1xuICAgIGFyZWFTdHJlYW0ubGluZVN0YXJ0KCk7XG4gIH1cblxuICBmdW5jdGlvbiBib3VuZHNSaW5nRW5kKCkge1xuICAgIGJvdW5kc1JpbmdQb2ludChsYW1iZGEwMCQxLCBwaGkwMCQxKTtcbiAgICBhcmVhU3RyZWFtLmxpbmVFbmQoKTtcbiAgICBpZiAoYWJzKGRlbHRhU3VtKSA+IGVwc2lsb24kMikgbGFtYmRhMCQxID0gLShsYW1iZGExID0gMTgwKTtcbiAgICByYW5nZVswXSA9IGxhbWJkYTAkMSwgcmFuZ2VbMV0gPSBsYW1iZGExO1xuICAgIHAwID0gbnVsbDtcbiAgfVxuXG4gIC8vIEZpbmRzIHRoZSBsZWZ0LXJpZ2h0IGRpc3RhbmNlIGJldHdlZW4gdHdvIGxvbmdpdHVkZXMuXG4gIC8vIFRoaXMgaXMgYWxtb3N0IHRoZSBzYW1lIGFzIChsYW1iZGExIC0gbGFtYmRhMCArIDM2MMKwKSAlIDM2MMKwLCBleGNlcHQgdGhhdCB3ZSB3YW50XG4gIC8vIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIMKxMTgwwrAgdG8gYmUgMzYwwrAuXG4gIGZ1bmN0aW9uIGFuZ2xlKGxhbWJkYTAsIGxhbWJkYTEpIHtcbiAgICByZXR1cm4gKGxhbWJkYTEgLT0gbGFtYmRhMCkgPCAwID8gbGFtYmRhMSArIDM2MCA6IGxhbWJkYTE7XG4gIH1cblxuICBmdW5jdGlvbiByYW5nZUNvbXBhcmUoYSwgYikge1xuICAgIHJldHVybiBhWzBdIC0gYlswXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJhbmdlQ29udGFpbnMocmFuZ2UsIHgpIHtcbiAgICByZXR1cm4gcmFuZ2VbMF0gPD0gcmFuZ2VbMV0gPyByYW5nZVswXSA8PSB4ICYmIHggPD0gcmFuZ2VbMV0gOiB4IDwgcmFuZ2VbMF0gfHwgcmFuZ2VbMV0gPCB4O1xuICB9XG5cbiAgdmFyIGJvdW5kcyA9IGZ1bmN0aW9uIGJvdW5kcyhmZWF0dXJlKSB7XG4gICAgdmFyIGksIG4sIGEsIGIsIG1lcmdlZCwgZGVsdGFNYXgsIGRlbHRhO1xuXG4gICAgcGhpMSA9IGxhbWJkYTEgPSAtKGxhbWJkYTAkMSA9IHBoaTAgPSBJbmZpbml0eSk7XG4gICAgcmFuZ2VzID0gW107XG4gICAgZ2VvU3RyZWFtKGZlYXR1cmUsIGJvdW5kc1N0cmVhbSk7XG5cbiAgICAvLyBGaXJzdCwgc29ydCByYW5nZXMgYnkgdGhlaXIgbWluaW11bSBsb25naXR1ZGVzLlxuICAgIGlmIChuID0gcmFuZ2VzLmxlbmd0aCkge1xuICAgICAgcmFuZ2VzLnNvcnQocmFuZ2VDb21wYXJlKTtcblxuICAgICAgLy8gVGhlbiwgbWVyZ2UgYW55IHJhbmdlcyB0aGF0IG92ZXJsYXAuXG4gICAgICBmb3IgKGkgPSAxLCBhID0gcmFuZ2VzWzBdLCBtZXJnZWQgPSBbYV07IGkgPCBuOyArK2kpIHtcbiAgICAgICAgYiA9IHJhbmdlc1tpXTtcbiAgICAgICAgaWYgKHJhbmdlQ29udGFpbnMoYSwgYlswXSkgfHwgcmFuZ2VDb250YWlucyhhLCBiWzFdKSkge1xuICAgICAgICAgIGlmIChhbmdsZShhWzBdLCBiWzFdKSA+IGFuZ2xlKGFbMF0sIGFbMV0pKSBhWzFdID0gYlsxXTtcbiAgICAgICAgICBpZiAoYW5nbGUoYlswXSwgYVsxXSkgPiBhbmdsZShhWzBdLCBhWzFdKSkgYVswXSA9IGJbMF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbWVyZ2VkLnB1c2goYSA9IGIpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEZpbmFsbHksIGZpbmQgdGhlIGxhcmdlc3QgZ2FwIGJldHdlZW4gdGhlIG1lcmdlZCByYW5nZXMuXG4gICAgICAvLyBUaGUgZmluYWwgYm91bmRpbmcgYm94IHdpbGwgYmUgdGhlIGludmVyc2Ugb2YgdGhpcyBnYXAuXG4gICAgICBmb3IgKGRlbHRhTWF4ID0gLUluZmluaXR5LCBuID0gbWVyZ2VkLmxlbmd0aCAtIDEsIGkgPSAwLCBhID0gbWVyZ2VkW25dOyBpIDw9IG47IGEgPSBiLCArK2kpIHtcbiAgICAgICAgYiA9IG1lcmdlZFtpXTtcbiAgICAgICAgaWYgKChkZWx0YSA9IGFuZ2xlKGFbMV0sIGJbMF0pKSA+IGRlbHRhTWF4KSBkZWx0YU1heCA9IGRlbHRhLCBsYW1iZGEwJDEgPSBiWzBdLCBsYW1iZGExID0gYVsxXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByYW5nZXMgPSByYW5nZSA9IG51bGw7XG5cbiAgICByZXR1cm4gbGFtYmRhMCQxID09PSBJbmZpbml0eSB8fCBwaGkwID09PSBJbmZpbml0eSA/IFtbTmFOLCBOYU5dLCBbTmFOLCBOYU5dXSA6IFtbbGFtYmRhMCQxLCBwaGkwXSwgW2xhbWJkYTEsIHBoaTFdXTtcbiAgfTtcblxuICB2YXIgVzA7XG4gIHZhciBXMTtcbiAgdmFyIFgwO1xuICB2YXIgWTA7XG4gIHZhciBaMDtcbiAgdmFyIFgxO1xuICB2YXIgWTE7XG4gIHZhciBaMTtcbiAgdmFyIFgyO1xuICB2YXIgWTI7XG4gIHZhciBaMjtcbiAgdmFyIGxhbWJkYTAwJDI7XG4gIHZhciBwaGkwMCQyO1xuICB2YXIgeDA7XG4gIHZhciB5MDtcbiAgdmFyIHowOyAvLyBwcmV2aW91cyBwb2ludFxuXG4gIHZhciBjZW50cm9pZFN0cmVhbSA9IHtcbiAgICBzcGhlcmU6IG5vb3AkMSxcbiAgICBwb2ludDogY2VudHJvaWRQb2ludCxcbiAgICBsaW5lU3RhcnQ6IGNlbnRyb2lkTGluZVN0YXJ0LFxuICAgIGxpbmVFbmQ6IGNlbnRyb2lkTGluZUVuZCxcbiAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uIHBvbHlnb25TdGFydCgpIHtcbiAgICAgIGNlbnRyb2lkU3RyZWFtLmxpbmVTdGFydCA9IGNlbnRyb2lkUmluZ1N0YXJ0O1xuICAgICAgY2VudHJvaWRTdHJlYW0ubGluZUVuZCA9IGNlbnRyb2lkUmluZ0VuZDtcbiAgICB9LFxuICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uIHBvbHlnb25FbmQoKSB7XG4gICAgICBjZW50cm9pZFN0cmVhbS5saW5lU3RhcnQgPSBjZW50cm9pZExpbmVTdGFydDtcbiAgICAgIGNlbnRyb2lkU3RyZWFtLmxpbmVFbmQgPSBjZW50cm9pZExpbmVFbmQ7XG4gICAgfVxuICB9O1xuXG4gIC8vIEFyaXRobWV0aWMgbWVhbiBvZiBDYXJ0ZXNpYW4gdmVjdG9ycy5cbiAgZnVuY3Rpb24gY2VudHJvaWRQb2ludChsYW1iZGEsIHBoaSkge1xuICAgIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcbiAgICB2YXIgY29zUGhpID0gY29zJDEocGhpKTtcbiAgICBjZW50cm9pZFBvaW50Q2FydGVzaWFuKGNvc1BoaSAqIGNvcyQxKGxhbWJkYSksIGNvc1BoaSAqIHNpbiQxKGxhbWJkYSksIHNpbiQxKHBoaSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2VudHJvaWRQb2ludENhcnRlc2lhbih4LCB5LCB6KSB7XG4gICAgKytXMDtcbiAgICBYMCArPSAoeCAtIFgwKSAvIFcwO1xuICAgIFkwICs9ICh5IC0gWTApIC8gVzA7XG4gICAgWjAgKz0gKHogLSBaMCkgLyBXMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNlbnRyb2lkTGluZVN0YXJ0KCkge1xuICAgIGNlbnRyb2lkU3RyZWFtLnBvaW50ID0gY2VudHJvaWRMaW5lUG9pbnRGaXJzdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNlbnRyb2lkTGluZVBvaW50Rmlyc3QobGFtYmRhLCBwaGkpIHtcbiAgICBsYW1iZGEgKj0gcmFkaWFucywgcGhpICo9IHJhZGlhbnM7XG4gICAgdmFyIGNvc1BoaSA9IGNvcyQxKHBoaSk7XG4gICAgeDAgPSBjb3NQaGkgKiBjb3MkMShsYW1iZGEpO1xuICAgIHkwID0gY29zUGhpICogc2luJDEobGFtYmRhKTtcbiAgICB6MCA9IHNpbiQxKHBoaSk7XG4gICAgY2VudHJvaWRTdHJlYW0ucG9pbnQgPSBjZW50cm9pZExpbmVQb2ludDtcbiAgICBjZW50cm9pZFBvaW50Q2FydGVzaWFuKHgwLCB5MCwgejApO1xuICB9XG5cbiAgZnVuY3Rpb24gY2VudHJvaWRMaW5lUG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgICBsYW1iZGEgKj0gcmFkaWFucywgcGhpICo9IHJhZGlhbnM7XG4gICAgdmFyIGNvc1BoaSA9IGNvcyQxKHBoaSksXG4gICAgICAgIHggPSBjb3NQaGkgKiBjb3MkMShsYW1iZGEpLFxuICAgICAgICB5ID0gY29zUGhpICogc2luJDEobGFtYmRhKSxcbiAgICAgICAgeiA9IHNpbiQxKHBoaSksXG4gICAgICAgIHcgPSBhdGFuMihzcXJ0KCh3ID0geTAgKiB6IC0gejAgKiB5KSAqIHcgKyAodyA9IHowICogeCAtIHgwICogeikgKiB3ICsgKHcgPSB4MCAqIHkgLSB5MCAqIHgpICogdyksIHgwICogeCArIHkwICogeSArIHowICogeik7XG4gICAgVzEgKz0gdztcbiAgICBYMSArPSB3ICogKHgwICsgKHgwID0geCkpO1xuICAgIFkxICs9IHcgKiAoeTAgKyAoeTAgPSB5KSk7XG4gICAgWjEgKz0gdyAqICh6MCArICh6MCA9IHopKTtcbiAgICBjZW50cm9pZFBvaW50Q2FydGVzaWFuKHgwLCB5MCwgejApO1xuICB9XG5cbiAgZnVuY3Rpb24gY2VudHJvaWRMaW5lRW5kKCkge1xuICAgIGNlbnRyb2lkU3RyZWFtLnBvaW50ID0gY2VudHJvaWRQb2ludDtcbiAgfVxuXG4gIC8vIFNlZSBKLiBFLiBCcm9jaywgVGhlIEluZXJ0aWEgVGVuc29yIGZvciBhIFNwaGVyaWNhbCBUcmlhbmdsZSxcbiAgLy8gSi4gQXBwbGllZCBNZWNoYW5pY3MgNDIsIDIzOSAoMTk3NSkuXG4gIGZ1bmN0aW9uIGNlbnRyb2lkUmluZ1N0YXJ0KCkge1xuICAgIGNlbnRyb2lkU3RyZWFtLnBvaW50ID0gY2VudHJvaWRSaW5nUG9pbnRGaXJzdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNlbnRyb2lkUmluZ0VuZCgpIHtcbiAgICBjZW50cm9pZFJpbmdQb2ludChsYW1iZGEwMCQyLCBwaGkwMCQyKTtcbiAgICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkUG9pbnQ7XG4gIH1cblxuICBmdW5jdGlvbiBjZW50cm9pZFJpbmdQb2ludEZpcnN0KGxhbWJkYSwgcGhpKSB7XG4gICAgbGFtYmRhMDAkMiA9IGxhbWJkYSwgcGhpMDAkMiA9IHBoaTtcbiAgICBsYW1iZGEgKj0gcmFkaWFucywgcGhpICo9IHJhZGlhbnM7XG4gICAgY2VudHJvaWRTdHJlYW0ucG9pbnQgPSBjZW50cm9pZFJpbmdQb2ludDtcbiAgICB2YXIgY29zUGhpID0gY29zJDEocGhpKTtcbiAgICB4MCA9IGNvc1BoaSAqIGNvcyQxKGxhbWJkYSk7XG4gICAgeTAgPSBjb3NQaGkgKiBzaW4kMShsYW1iZGEpO1xuICAgIHowID0gc2luJDEocGhpKTtcbiAgICBjZW50cm9pZFBvaW50Q2FydGVzaWFuKHgwLCB5MCwgejApO1xuICB9XG5cbiAgZnVuY3Rpb24gY2VudHJvaWRSaW5nUG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgICBsYW1iZGEgKj0gcmFkaWFucywgcGhpICo9IHJhZGlhbnM7XG4gICAgdmFyIGNvc1BoaSA9IGNvcyQxKHBoaSksXG4gICAgICAgIHggPSBjb3NQaGkgKiBjb3MkMShsYW1iZGEpLFxuICAgICAgICB5ID0gY29zUGhpICogc2luJDEobGFtYmRhKSxcbiAgICAgICAgeiA9IHNpbiQxKHBoaSksXG4gICAgICAgIGN4ID0geTAgKiB6IC0gejAgKiB5LFxuICAgICAgICBjeSA9IHowICogeCAtIHgwICogeixcbiAgICAgICAgY3ogPSB4MCAqIHkgLSB5MCAqIHgsXG4gICAgICAgIG0gPSBzcXJ0KGN4ICogY3ggKyBjeSAqIGN5ICsgY3ogKiBjeiksXG4gICAgICAgIHcgPSBhc2luKG0pLFxuICAgICAgICAvLyBsaW5lIHdlaWdodCA9IGFuZ2xlXG4gICAgdiA9IG0gJiYgLXcgLyBtOyAvLyBhcmVhIHdlaWdodCBtdWx0aXBsaWVyXG4gICAgWDIgKz0gdiAqIGN4O1xuICAgIFkyICs9IHYgKiBjeTtcbiAgICBaMiArPSB2ICogY3o7XG4gICAgVzEgKz0gdztcbiAgICBYMSArPSB3ICogKHgwICsgKHgwID0geCkpO1xuICAgIFkxICs9IHcgKiAoeTAgKyAoeTAgPSB5KSk7XG4gICAgWjEgKz0gdyAqICh6MCArICh6MCA9IHopKTtcbiAgICBjZW50cm9pZFBvaW50Q2FydGVzaWFuKHgwLCB5MCwgejApO1xuICB9XG5cbiAgdmFyIGNlbnRyb2lkID0gZnVuY3Rpb24gY2VudHJvaWQob2JqZWN0KSB7XG4gICAgVzAgPSBXMSA9IFgwID0gWTAgPSBaMCA9IFgxID0gWTEgPSBaMSA9IFgyID0gWTIgPSBaMiA9IDA7XG4gICAgZ2VvU3RyZWFtKG9iamVjdCwgY2VudHJvaWRTdHJlYW0pO1xuXG4gICAgdmFyIHggPSBYMixcbiAgICAgICAgeSA9IFkyLFxuICAgICAgICB6ID0gWjIsXG4gICAgICAgIG0gPSB4ICogeCArIHkgKiB5ICsgeiAqIHo7XG5cbiAgICAvLyBJZiB0aGUgYXJlYS13ZWlnaHRlZCBjY2VudHJvaWQgaXMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbGVuZ3RoLXdlaWdodGVkIGNjZW50cm9pZC5cbiAgICBpZiAobSA8IGVwc2lsb24yJDEpIHtcbiAgICAgIHggPSBYMSwgeSA9IFkxLCB6ID0gWjE7XG4gICAgICAvLyBJZiB0aGUgZmVhdHVyZSBoYXMgemVybyBsZW5ndGgsIGZhbGwgYmFjayB0byBhcml0aG1ldGljIG1lYW4gb2YgcG9pbnQgdmVjdG9ycy5cbiAgICAgIGlmIChXMSA8IGVwc2lsb24kMikgeCA9IFgwLCB5ID0gWTAsIHogPSBaMDtcbiAgICAgIG0gPSB4ICogeCArIHkgKiB5ICsgeiAqIHo7XG4gICAgICAvLyBJZiB0aGUgZmVhdHVyZSBzdGlsbCBoYXMgYW4gdW5kZWZpbmVkIGNjZW50cm9pZCwgdGhlbiByZXR1cm4uXG4gICAgICBpZiAobSA8IGVwc2lsb24yJDEpIHJldHVybiBbTmFOLCBOYU5dO1xuICAgIH1cblxuICAgIHJldHVybiBbYXRhbjIoeSwgeCkgKiBkZWdyZWVzJDEsIGFzaW4oeiAvIHNxcnQobSkpICogZGVncmVlcyQxXTtcbiAgfTtcblxuICB2YXIgY29uc3RhbnQkNyA9IGZ1bmN0aW9uIGNvbnN0YW50JDcoeCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4geDtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBjb21wb3NlID0gZnVuY3Rpb24gY29tcG9zZShhLCBiKSB7XG5cbiAgICBmdW5jdGlvbiBjb21wb3NlKHgsIHkpIHtcbiAgICAgIHJldHVybiB4ID0gYSh4LCB5KSwgYih4WzBdLCB4WzFdKTtcbiAgICB9XG5cbiAgICBpZiAoYS5pbnZlcnQgJiYgYi5pbnZlcnQpIGNvbXBvc2UuaW52ZXJ0ID0gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICAgIHJldHVybiB4ID0gYi5pbnZlcnQoeCwgeSksIHggJiYgYS5pbnZlcnQoeFswXSwgeFsxXSk7XG4gICAgfTtcblxuICAgIHJldHVybiBjb21wb3NlO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHJvdGF0aW9uSWRlbnRpdHkobGFtYmRhLCBwaGkpIHtcbiAgICByZXR1cm4gW2xhbWJkYSA+IHBpJDMgPyBsYW1iZGEgLSB0YXUkMyA6IGxhbWJkYSA8IC1waSQzID8gbGFtYmRhICsgdGF1JDMgOiBsYW1iZGEsIHBoaV07XG4gIH1cblxuICByb3RhdGlvbklkZW50aXR5LmludmVydCA9IHJvdGF0aW9uSWRlbnRpdHk7XG5cbiAgZnVuY3Rpb24gcm90YXRlUmFkaWFucyhkZWx0YUxhbWJkYSwgZGVsdGFQaGksIGRlbHRhR2FtbWEpIHtcbiAgICByZXR1cm4gKGRlbHRhTGFtYmRhICU9IHRhdSQzKSA/IGRlbHRhUGhpIHx8IGRlbHRhR2FtbWEgPyBjb21wb3NlKHJvdGF0aW9uTGFtYmRhKGRlbHRhTGFtYmRhKSwgcm90YXRpb25QaGlHYW1tYShkZWx0YVBoaSwgZGVsdGFHYW1tYSkpIDogcm90YXRpb25MYW1iZGEoZGVsdGFMYW1iZGEpIDogZGVsdGFQaGkgfHwgZGVsdGFHYW1tYSA/IHJvdGF0aW9uUGhpR2FtbWEoZGVsdGFQaGksIGRlbHRhR2FtbWEpIDogcm90YXRpb25JZGVudGl0eTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcndhcmRSb3RhdGlvbkxhbWJkYShkZWx0YUxhbWJkYSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAobGFtYmRhLCBwaGkpIHtcbiAgICAgIHJldHVybiBsYW1iZGEgKz0gZGVsdGFMYW1iZGEsIFtsYW1iZGEgPiBwaSQzID8gbGFtYmRhIC0gdGF1JDMgOiBsYW1iZGEgPCAtcGkkMyA/IGxhbWJkYSArIHRhdSQzIDogbGFtYmRhLCBwaGldO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiByb3RhdGlvbkxhbWJkYShkZWx0YUxhbWJkYSkge1xuICAgIHZhciByb3RhdGlvbiA9IGZvcndhcmRSb3RhdGlvbkxhbWJkYShkZWx0YUxhbWJkYSk7XG4gICAgcm90YXRpb24uaW52ZXJ0ID0gZm9yd2FyZFJvdGF0aW9uTGFtYmRhKC1kZWx0YUxhbWJkYSk7XG4gICAgcmV0dXJuIHJvdGF0aW9uO1xuICB9XG5cbiAgZnVuY3Rpb24gcm90YXRpb25QaGlHYW1tYShkZWx0YVBoaSwgZGVsdGFHYW1tYSkge1xuICAgIHZhciBjb3NEZWx0YVBoaSA9IGNvcyQxKGRlbHRhUGhpKSxcbiAgICAgICAgc2luRGVsdGFQaGkgPSBzaW4kMShkZWx0YVBoaSksXG4gICAgICAgIGNvc0RlbHRhR2FtbWEgPSBjb3MkMShkZWx0YUdhbW1hKSxcbiAgICAgICAgc2luRGVsdGFHYW1tYSA9IHNpbiQxKGRlbHRhR2FtbWEpO1xuXG4gICAgZnVuY3Rpb24gcm90YXRpb24obGFtYmRhLCBwaGkpIHtcbiAgICAgIHZhciBjb3NQaGkgPSBjb3MkMShwaGkpLFxuICAgICAgICAgIHggPSBjb3MkMShsYW1iZGEpICogY29zUGhpLFxuICAgICAgICAgIHkgPSBzaW4kMShsYW1iZGEpICogY29zUGhpLFxuICAgICAgICAgIHogPSBzaW4kMShwaGkpLFxuICAgICAgICAgIGsgPSB6ICogY29zRGVsdGFQaGkgKyB4ICogc2luRGVsdGFQaGk7XG4gICAgICByZXR1cm4gW2F0YW4yKHkgKiBjb3NEZWx0YUdhbW1hIC0gayAqIHNpbkRlbHRhR2FtbWEsIHggKiBjb3NEZWx0YVBoaSAtIHogKiBzaW5EZWx0YVBoaSksIGFzaW4oayAqIGNvc0RlbHRhR2FtbWEgKyB5ICogc2luRGVsdGFHYW1tYSldO1xuICAgIH1cblxuICAgIHJvdGF0aW9uLmludmVydCA9IGZ1bmN0aW9uIChsYW1iZGEsIHBoaSkge1xuICAgICAgdmFyIGNvc1BoaSA9IGNvcyQxKHBoaSksXG4gICAgICAgICAgeCA9IGNvcyQxKGxhbWJkYSkgKiBjb3NQaGksXG4gICAgICAgICAgeSA9IHNpbiQxKGxhbWJkYSkgKiBjb3NQaGksXG4gICAgICAgICAgeiA9IHNpbiQxKHBoaSksXG4gICAgICAgICAgayA9IHogKiBjb3NEZWx0YUdhbW1hIC0geSAqIHNpbkRlbHRhR2FtbWE7XG4gICAgICByZXR1cm4gW2F0YW4yKHkgKiBjb3NEZWx0YUdhbW1hICsgeiAqIHNpbkRlbHRhR2FtbWEsIHggKiBjb3NEZWx0YVBoaSArIGsgKiBzaW5EZWx0YVBoaSksIGFzaW4oayAqIGNvc0RlbHRhUGhpIC0geCAqIHNpbkRlbHRhUGhpKV07XG4gICAgfTtcblxuICAgIHJldHVybiByb3RhdGlvbjtcbiAgfVxuXG4gIHZhciByb3RhdGlvbiA9IGZ1bmN0aW9uIHJvdGF0aW9uKHJvdGF0ZSkge1xuICAgIHJvdGF0ZSA9IHJvdGF0ZVJhZGlhbnMocm90YXRlWzBdICogcmFkaWFucywgcm90YXRlWzFdICogcmFkaWFucywgcm90YXRlLmxlbmd0aCA+IDIgPyByb3RhdGVbMl0gKiByYWRpYW5zIDogMCk7XG5cbiAgICBmdW5jdGlvbiBmb3J3YXJkKGNvb3JkaW5hdGVzKSB7XG4gICAgICBjb29yZGluYXRlcyA9IHJvdGF0ZShjb29yZGluYXRlc1swXSAqIHJhZGlhbnMsIGNvb3JkaW5hdGVzWzFdICogcmFkaWFucyk7XG4gICAgICByZXR1cm4gY29vcmRpbmF0ZXNbMF0gKj0gZGVncmVlcyQxLCBjb29yZGluYXRlc1sxXSAqPSBkZWdyZWVzJDEsIGNvb3JkaW5hdGVzO1xuICAgIH1cblxuICAgIGZvcndhcmQuaW52ZXJ0ID0gZnVuY3Rpb24gKGNvb3JkaW5hdGVzKSB7XG4gICAgICBjb29yZGluYXRlcyA9IHJvdGF0ZS5pbnZlcnQoY29vcmRpbmF0ZXNbMF0gKiByYWRpYW5zLCBjb29yZGluYXRlc1sxXSAqIHJhZGlhbnMpO1xuICAgICAgcmV0dXJuIGNvb3JkaW5hdGVzWzBdICo9IGRlZ3JlZXMkMSwgY29vcmRpbmF0ZXNbMV0gKj0gZGVncmVlcyQxLCBjb29yZGluYXRlcztcbiAgICB9O1xuXG4gICAgcmV0dXJuIGZvcndhcmQ7XG4gIH07XG5cbiAgLy8gR2VuZXJhdGVzIGEgY2lyY2xlIGNlbnRlcmVkIGF0IFswwrAsIDDCsF0sIHdpdGggYSBnaXZlbiByYWRpdXMgYW5kIHByZWNpc2lvbi5cbiAgZnVuY3Rpb24gY2lyY2xlU3RyZWFtKHN0cmVhbSwgcmFkaXVzLCBkZWx0YSwgZGlyZWN0aW9uLCB0MCwgdDEpIHtcbiAgICBpZiAoIWRlbHRhKSByZXR1cm47XG4gICAgdmFyIGNvc1JhZGl1cyA9IGNvcyQxKHJhZGl1cyksXG4gICAgICAgIHNpblJhZGl1cyA9IHNpbiQxKHJhZGl1cyksXG4gICAgICAgIHN0ZXAgPSBkaXJlY3Rpb24gKiBkZWx0YTtcbiAgICBpZiAodDAgPT0gbnVsbCkge1xuICAgICAgdDAgPSByYWRpdXMgKyBkaXJlY3Rpb24gKiB0YXUkMztcbiAgICAgIHQxID0gcmFkaXVzIC0gc3RlcCAvIDI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHQwID0gY2lyY2xlUmFkaXVzKGNvc1JhZGl1cywgdDApO1xuICAgICAgdDEgPSBjaXJjbGVSYWRpdXMoY29zUmFkaXVzLCB0MSk7XG4gICAgICBpZiAoZGlyZWN0aW9uID4gMCA/IHQwIDwgdDEgOiB0MCA+IHQxKSB0MCArPSBkaXJlY3Rpb24gKiB0YXUkMztcbiAgICB9XG4gICAgZm9yICh2YXIgcG9pbnQsIHQgPSB0MDsgZGlyZWN0aW9uID4gMCA/IHQgPiB0MSA6IHQgPCB0MTsgdCAtPSBzdGVwKSB7XG4gICAgICBwb2ludCA9IHNwaGVyaWNhbChbY29zUmFkaXVzLCAtc2luUmFkaXVzICogY29zJDEodCksIC1zaW5SYWRpdXMgKiBzaW4kMSh0KV0pO1xuICAgICAgc3RyZWFtLnBvaW50KHBvaW50WzBdLCBwb2ludFsxXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gUmV0dXJucyB0aGUgc2lnbmVkIGFuZ2xlIG9mIGEgY2FydGVzaWFuIHBvaW50IHJlbGF0aXZlIHRvIFtjb3NSYWRpdXMsIDAsIDBdLlxuICBmdW5jdGlvbiBjaXJjbGVSYWRpdXMoY29zUmFkaXVzLCBwb2ludCkge1xuICAgIHBvaW50ID0gY2FydGVzaWFuKHBvaW50KSwgcG9pbnRbMF0gLT0gY29zUmFkaXVzO1xuICAgIGNhcnRlc2lhbk5vcm1hbGl6ZUluUGxhY2UocG9pbnQpO1xuICAgIHZhciByYWRpdXMgPSBhY29zKC1wb2ludFsxXSk7XG4gICAgcmV0dXJuICgoLXBvaW50WzJdIDwgMCA/IC1yYWRpdXMgOiByYWRpdXMpICsgdGF1JDMgLSBlcHNpbG9uJDIpICUgdGF1JDM7XG4gIH1cblxuICB2YXIgY2lyY2xlID0gZnVuY3Rpb24gY2lyY2xlKCkge1xuICAgIHZhciBjZW50ZXIgPSBjb25zdGFudCQ3KFswLCAwXSksXG4gICAgICAgIHJhZGl1cyA9IGNvbnN0YW50JDcoOTApLFxuICAgICAgICBwcmVjaXNpb24gPSBjb25zdGFudCQ3KDYpLFxuICAgICAgICByaW5nLFxuICAgICAgICByb3RhdGUsXG4gICAgICAgIHN0cmVhbSA9IHsgcG9pbnQ6IHBvaW50IH07XG5cbiAgICBmdW5jdGlvbiBwb2ludCh4LCB5KSB7XG4gICAgICByaW5nLnB1c2goeCA9IHJvdGF0ZSh4LCB5KSk7XG4gICAgICB4WzBdICo9IGRlZ3JlZXMkMSwgeFsxXSAqPSBkZWdyZWVzJDE7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2lyY2xlKCkge1xuICAgICAgdmFyIGMgPSBjZW50ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgICByID0gcmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgKiByYWRpYW5zLFxuICAgICAgICAgIHAgPSBwcmVjaXNpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKSAqIHJhZGlhbnM7XG4gICAgICByaW5nID0gW107XG4gICAgICByb3RhdGUgPSByb3RhdGVSYWRpYW5zKC1jWzBdICogcmFkaWFucywgLWNbMV0gKiByYWRpYW5zLCAwKS5pbnZlcnQ7XG4gICAgICBjaXJjbGVTdHJlYW0oc3RyZWFtLCByLCBwLCAxKTtcbiAgICAgIGMgPSB7IHR5cGU6IFwiUG9seWdvblwiLCBjb29yZGluYXRlczogW3JpbmddIH07XG4gICAgICByaW5nID0gcm90YXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBjO1xuICAgIH1cblxuICAgIGNpcmNsZS5jZW50ZXIgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2VudGVyID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQ3KFsrX1swXSwgK19bMV1dKSwgY2lyY2xlKSA6IGNlbnRlcjtcbiAgICB9O1xuXG4gICAgY2lyY2xlLnJhZGl1cyA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDcoK18pLCBjaXJjbGUpIDogcmFkaXVzO1xuICAgIH07XG5cbiAgICBjaXJjbGUucHJlY2lzaW9uID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHByZWNpc2lvbiA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkNygrXyksIGNpcmNsZSkgOiBwcmVjaXNpb247XG4gICAgfTtcblxuICAgIHJldHVybiBjaXJjbGU7XG4gIH07XG5cbiAgdmFyIGNsaXBCdWZmZXIgPSBmdW5jdGlvbiBjbGlwQnVmZmVyKCkge1xuICAgIHZhciBsaW5lcyA9IFtdLFxuICAgICAgICBsaW5lO1xuICAgIHJldHVybiB7XG4gICAgICBwb2ludDogZnVuY3Rpb24gcG9pbnQoeCwgeSkge1xuICAgICAgICBsaW5lLnB1c2goW3gsIHldKTtcbiAgICAgIH0sXG4gICAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uIGxpbmVTdGFydCgpIHtcbiAgICAgICAgbGluZXMucHVzaChsaW5lID0gW10pO1xuICAgICAgfSxcbiAgICAgIGxpbmVFbmQ6IG5vb3AkMSxcbiAgICAgIHJlam9pbjogZnVuY3Rpb24gcmVqb2luKCkge1xuICAgICAgICBpZiAobGluZXMubGVuZ3RoID4gMSkgbGluZXMucHVzaChsaW5lcy5wb3AoKS5jb25jYXQobGluZXMuc2hpZnQoKSkpO1xuICAgICAgfSxcbiAgICAgIHJlc3VsdDogZnVuY3Rpb24gcmVzdWx0KCkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbGluZXM7XG4gICAgICAgIGxpbmVzID0gW107XG4gICAgICAgIGxpbmUgPSBudWxsO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgdmFyIGNsaXBMaW5lID0gZnVuY3Rpb24gY2xpcExpbmUoYSwgYiwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgICB2YXIgYXggPSBhWzBdLFxuICAgICAgICBheSA9IGFbMV0sXG4gICAgICAgIGJ4ID0gYlswXSxcbiAgICAgICAgYnkgPSBiWzFdLFxuICAgICAgICB0MCA9IDAsXG4gICAgICAgIHQxID0gMSxcbiAgICAgICAgZHggPSBieCAtIGF4LFxuICAgICAgICBkeSA9IGJ5IC0gYXksXG4gICAgICAgIHI7XG5cbiAgICByID0geDAgLSBheDtcbiAgICBpZiAoIWR4ICYmIHIgPiAwKSByZXR1cm47XG4gICAgciAvPSBkeDtcbiAgICBpZiAoZHggPCAwKSB7XG4gICAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gICAgfSBlbHNlIGlmIChkeCA+IDApIHtcbiAgICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgICB9XG5cbiAgICByID0geDEgLSBheDtcbiAgICBpZiAoIWR4ICYmIHIgPCAwKSByZXR1cm47XG4gICAgciAvPSBkeDtcbiAgICBpZiAoZHggPCAwKSB7XG4gICAgICBpZiAociA+IHQxKSByZXR1cm47XG4gICAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gICAgfSBlbHNlIGlmIChkeCA+IDApIHtcbiAgICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICAgIGlmIChyIDwgdDEpIHQxID0gcjtcbiAgICB9XG5cbiAgICByID0geTAgLSBheTtcbiAgICBpZiAoIWR5ICYmIHIgPiAwKSByZXR1cm47XG4gICAgciAvPSBkeTtcbiAgICBpZiAoZHkgPCAwKSB7XG4gICAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gICAgfSBlbHNlIGlmIChkeSA+IDApIHtcbiAgICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgICB9XG5cbiAgICByID0geTEgLSBheTtcbiAgICBpZiAoIWR5ICYmIHIgPCAwKSByZXR1cm47XG4gICAgciAvPSBkeTtcbiAgICBpZiAoZHkgPCAwKSB7XG4gICAgICBpZiAociA+IHQxKSByZXR1cm47XG4gICAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gICAgfSBlbHNlIGlmIChkeSA+IDApIHtcbiAgICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICAgIGlmIChyIDwgdDEpIHQxID0gcjtcbiAgICB9XG5cbiAgICBpZiAodDAgPiAwKSBhWzBdID0gYXggKyB0MCAqIGR4LCBhWzFdID0gYXkgKyB0MCAqIGR5O1xuICAgIGlmICh0MSA8IDEpIGJbMF0gPSBheCArIHQxICogZHgsIGJbMV0gPSBheSArIHQxICogZHk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgdmFyIHBvaW50RXF1YWwgPSBmdW5jdGlvbiBwb2ludEVxdWFsKGEsIGIpIHtcbiAgICByZXR1cm4gYWJzKGFbMF0gLSBiWzBdKSA8IGVwc2lsb24kMiAmJiBhYnMoYVsxXSAtIGJbMV0pIDwgZXBzaWxvbiQyO1xuICB9O1xuXG4gIGZ1bmN0aW9uIEludGVyc2VjdGlvbihwb2ludCwgcG9pbnRzLCBvdGhlciwgZW50cnkpIHtcbiAgICB0aGlzLnggPSBwb2ludDtcbiAgICB0aGlzLnogPSBwb2ludHM7XG4gICAgdGhpcy5vID0gb3RoZXI7IC8vIGFub3RoZXIgaW50ZXJzZWN0aW9uXG4gICAgdGhpcy5lID0gZW50cnk7IC8vIGlzIGFuIGVudHJ5P1xuICAgIHRoaXMudiA9IGZhbHNlOyAvLyB2aXNpdGVkXG4gICAgdGhpcy5uID0gdGhpcy5wID0gbnVsbDsgLy8gbmV4dCAmIHByZXZpb3VzXG4gIH1cblxuICAvLyBBIGdlbmVyYWxpemVkIHBvbHlnb24gY2xpcHBpbmcgYWxnb3JpdGhtOiBnaXZlbiBhIHBvbHlnb24gdGhhdCBoYXMgYmVlbiBjdXRcbiAgLy8gaW50byBpdHMgdmlzaWJsZSBsaW5lIHNlZ21lbnRzLCBhbmQgcmVqb2lucyB0aGUgc2VnbWVudHMgYnkgaW50ZXJwb2xhdGluZ1xuICAvLyBhbG9uZyB0aGUgY2xpcCBlZGdlLlxuICB2YXIgY2xpcFBvbHlnb24gPSBmdW5jdGlvbiBjbGlwUG9seWdvbihzZWdtZW50cywgY29tcGFyZUludGVyc2VjdGlvbiwgc3RhcnRJbnNpZGUsIGludGVycG9sYXRlLCBzdHJlYW0pIHtcbiAgICB2YXIgc3ViamVjdCA9IFtdLFxuICAgICAgICBjbGlwID0gW10sXG4gICAgICAgIGksXG4gICAgICAgIG47XG5cbiAgICBzZWdtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChzZWdtZW50KSB7XG4gICAgICBpZiAoKG4gPSBzZWdtZW50Lmxlbmd0aCAtIDEpIDw9IDApIHJldHVybjtcbiAgICAgIHZhciBuLFxuICAgICAgICAgIHAwID0gc2VnbWVudFswXSxcbiAgICAgICAgICBwMSA9IHNlZ21lbnRbbl0sXG4gICAgICAgICAgeDtcblxuICAgICAgLy8gSWYgdGhlIGZpcnN0IGFuZCBsYXN0IHBvaW50cyBvZiBhIHNlZ21lbnQgYXJlIGNvaW5jaWRlbnQsIHRoZW4gdHJlYXQgYXMgYVxuICAgICAgLy8gY2xvc2VkIHJpbmcuIFRPRE8gaWYgYWxsIHJpbmdzIGFyZSBjbG9zZWQsIHRoZW4gdGhlIHdpbmRpbmcgb3JkZXIgb2YgdGhlXG4gICAgICAvLyBleHRlcmlvciByaW5nIHNob3VsZCBiZSBjaGVja2VkLlxuICAgICAgaWYgKHBvaW50RXF1YWwocDAsIHAxKSkge1xuICAgICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgICBzdHJlYW0ucG9pbnQoKHAwID0gc2VnbWVudFtpXSlbMF0sIHAwWzFdKTtcbiAgICAgICAgfXN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc3ViamVjdC5wdXNoKHggPSBuZXcgSW50ZXJzZWN0aW9uKHAwLCBzZWdtZW50LCBudWxsLCB0cnVlKSk7XG4gICAgICBjbGlwLnB1c2goeC5vID0gbmV3IEludGVyc2VjdGlvbihwMCwgbnVsbCwgeCwgZmFsc2UpKTtcbiAgICAgIHN1YmplY3QucHVzaCh4ID0gbmV3IEludGVyc2VjdGlvbihwMSwgc2VnbWVudCwgbnVsbCwgZmFsc2UpKTtcbiAgICAgIGNsaXAucHVzaCh4Lm8gPSBuZXcgSW50ZXJzZWN0aW9uKHAxLCBudWxsLCB4LCB0cnVlKSk7XG4gICAgfSk7XG5cbiAgICBpZiAoIXN1YmplY3QubGVuZ3RoKSByZXR1cm47XG5cbiAgICBjbGlwLnNvcnQoY29tcGFyZUludGVyc2VjdGlvbik7XG4gICAgbGluayQxKHN1YmplY3QpO1xuICAgIGxpbmskMShjbGlwKTtcblxuICAgIGZvciAoaSA9IDAsIG4gPSBjbGlwLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgY2xpcFtpXS5lID0gc3RhcnRJbnNpZGUgPSAhc3RhcnRJbnNpZGU7XG4gICAgfVxuXG4gICAgdmFyIHN0YXJ0ID0gc3ViamVjdFswXSxcbiAgICAgICAgcG9pbnRzLFxuICAgICAgICBwb2ludDtcblxuICAgIHdoaWxlICgxKSB7XG4gICAgICAvLyBGaW5kIGZpcnN0IHVudmlzaXRlZCBpbnRlcnNlY3Rpb24uXG4gICAgICB2YXIgY3VycmVudCA9IHN0YXJ0LFxuICAgICAgICAgIGlzU3ViamVjdCA9IHRydWU7XG4gICAgICB3aGlsZSAoY3VycmVudC52KSB7XG4gICAgICAgIGlmICgoY3VycmVudCA9IGN1cnJlbnQubikgPT09IHN0YXJ0KSByZXR1cm47XG4gICAgICB9cG9pbnRzID0gY3VycmVudC56O1xuICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgZG8ge1xuICAgICAgICBjdXJyZW50LnYgPSBjdXJyZW50Lm8udiA9IHRydWU7XG4gICAgICAgIGlmIChjdXJyZW50LmUpIHtcbiAgICAgICAgICBpZiAoaXNTdWJqZWN0KSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAwLCBuID0gcG9pbnRzLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICAgICAgICBzdHJlYW0ucG9pbnQoKHBvaW50ID0gcG9pbnRzW2ldKVswXSwgcG9pbnRbMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbnRlcnBvbGF0ZShjdXJyZW50LngsIGN1cnJlbnQubi54LCAxLCBzdHJlYW0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5uO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChpc1N1YmplY3QpIHtcbiAgICAgICAgICAgIHBvaW50cyA9IGN1cnJlbnQucC56O1xuICAgICAgICAgICAgZm9yIChpID0gcG9pbnRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgICAgICAgIHN0cmVhbS5wb2ludCgocG9pbnQgPSBwb2ludHNbaV0pWzBdLCBwb2ludFsxXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGludGVycG9sYXRlKGN1cnJlbnQueCwgY3VycmVudC5wLngsIC0xLCBzdHJlYW0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5wO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm87XG4gICAgICAgIHBvaW50cyA9IGN1cnJlbnQuejtcbiAgICAgICAgaXNTdWJqZWN0ID0gIWlzU3ViamVjdDtcbiAgICAgIH0gd2hpbGUgKCFjdXJyZW50LnYpO1xuICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gbGluayQxKGFycmF5KSB7XG4gICAgaWYgKCEobiA9IGFycmF5Lmxlbmd0aCkpIHJldHVybjtcbiAgICB2YXIgbixcbiAgICAgICAgaSA9IDAsXG4gICAgICAgIGEgPSBhcnJheVswXSxcbiAgICAgICAgYjtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgYS5uID0gYiA9IGFycmF5W2ldO1xuICAgICAgYi5wID0gYTtcbiAgICAgIGEgPSBiO1xuICAgIH1cbiAgICBhLm4gPSBiID0gYXJyYXlbMF07XG4gICAgYi5wID0gYTtcbiAgfVxuXG4gIHZhciBjbGlwTWF4ID0gMWU5O1xuICB2YXIgY2xpcE1pbiA9IC1jbGlwTWF4O1xuXG4gIC8vIFRPRE8gVXNlIGQzLXBvbHlnb27igJlzIHBvbHlnb25Db250YWlucyBoZXJlIGZvciB0aGUgcmluZyBjaGVjaz9cbiAgLy8gVE9ETyBFbGltaW5hdGUgZHVwbGljYXRlIGJ1ZmZlcmluZyBpbiBjbGlwQnVmZmVyIGFuZCBwb2x5Z29uLnB1c2g/XG5cbiAgZnVuY3Rpb24gX2NsaXBFeHRlbnQoeDAsIHkwLCB4MSwgeTEpIHtcblxuICAgIGZ1bmN0aW9uIHZpc2libGUoeCwgeSkge1xuICAgICAgcmV0dXJuIHgwIDw9IHggJiYgeCA8PSB4MSAmJiB5MCA8PSB5ICYmIHkgPD0geTE7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW50ZXJwb2xhdGUoZnJvbSwgdG8sIGRpcmVjdGlvbiwgc3RyZWFtKSB7XG4gICAgICB2YXIgYSA9IDAsXG4gICAgICAgICAgYTEgPSAwO1xuICAgICAgaWYgKGZyb20gPT0gbnVsbCB8fCAoYSA9IGNvcm5lcihmcm9tLCBkaXJlY3Rpb24pKSAhPT0gKGExID0gY29ybmVyKHRvLCBkaXJlY3Rpb24pKSB8fCBjb21wYXJlUG9pbnQoZnJvbSwgdG8pIDwgMCBeIGRpcmVjdGlvbiA+IDApIHtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIHN0cmVhbS5wb2ludChhID09PSAwIHx8IGEgPT09IDMgPyB4MCA6IHgxLCBhID4gMSA/IHkxIDogeTApO1xuICAgICAgICB9IHdoaWxlICgoYSA9IChhICsgZGlyZWN0aW9uICsgNCkgJSA0KSAhPT0gYTEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RyZWFtLnBvaW50KHRvWzBdLCB0b1sxXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29ybmVyKHAsIGRpcmVjdGlvbikge1xuICAgICAgcmV0dXJuIGFicyhwWzBdIC0geDApIDwgZXBzaWxvbiQyID8gZGlyZWN0aW9uID4gMCA/IDAgOiAzIDogYWJzKHBbMF0gLSB4MSkgPCBlcHNpbG9uJDIgPyBkaXJlY3Rpb24gPiAwID8gMiA6IDEgOiBhYnMocFsxXSAtIHkwKSA8IGVwc2lsb24kMiA/IGRpcmVjdGlvbiA+IDAgPyAxIDogMCA6IGRpcmVjdGlvbiA+IDAgPyAzIDogMjsgLy8gYWJzKHBbMV0gLSB5MSkgPCBlcHNpbG9uXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29tcGFyZUludGVyc2VjdGlvbihhLCBiKSB7XG4gICAgICByZXR1cm4gY29tcGFyZVBvaW50KGEueCwgYi54KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb21wYXJlUG9pbnQoYSwgYikge1xuICAgICAgdmFyIGNhID0gY29ybmVyKGEsIDEpLFxuICAgICAgICAgIGNiID0gY29ybmVyKGIsIDEpO1xuICAgICAgcmV0dXJuIGNhICE9PSBjYiA/IGNhIC0gY2IgOiBjYSA9PT0gMCA/IGJbMV0gLSBhWzFdIDogY2EgPT09IDEgPyBhWzBdIC0gYlswXSA6IGNhID09PSAyID8gYVsxXSAtIGJbMV0gOiBiWzBdIC0gYVswXTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKHN0cmVhbSkge1xuICAgICAgdmFyIGFjdGl2ZVN0cmVhbSA9IHN0cmVhbSxcbiAgICAgICAgICBidWZmZXJTdHJlYW0gPSBjbGlwQnVmZmVyKCksXG4gICAgICAgICAgc2VnbWVudHMsXG4gICAgICAgICAgcG9seWdvbixcbiAgICAgICAgICByaW5nLFxuICAgICAgICAgIHhfXyxcbiAgICAgICAgICB5X18sXG4gICAgICAgICAgdl9fLFxuICAgICAgICAgIC8vIGZpcnN0IHBvaW50XG4gICAgICB4XyxcbiAgICAgICAgICB5XyxcbiAgICAgICAgICB2XyxcbiAgICAgICAgICAvLyBwcmV2aW91cyBwb2ludFxuICAgICAgZmlyc3QsXG4gICAgICAgICAgY2xlYW47XG5cbiAgICAgIHZhciBjbGlwU3RyZWFtID0ge1xuICAgICAgICBwb2ludDogcG9pbnQsXG4gICAgICAgIGxpbmVTdGFydDogbGluZVN0YXJ0LFxuICAgICAgICBsaW5lRW5kOiBsaW5lRW5kLFxuICAgICAgICBwb2x5Z29uU3RhcnQ6IHBvbHlnb25TdGFydCxcbiAgICAgICAgcG9seWdvbkVuZDogcG9seWdvbkVuZFxuICAgICAgfTtcblxuICAgICAgZnVuY3Rpb24gcG9pbnQoeCwgeSkge1xuICAgICAgICBpZiAodmlzaWJsZSh4LCB5KSkgYWN0aXZlU3RyZWFtLnBvaW50KHgsIHkpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBwb2x5Z29uSW5zaWRlKCkge1xuICAgICAgICB2YXIgd2luZGluZyA9IDA7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBwb2x5Z29uLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICAgIGZvciAodmFyIHJpbmcgPSBwb2x5Z29uW2ldLCBqID0gMSwgbSA9IHJpbmcubGVuZ3RoLCBwb2ludCA9IHJpbmdbMF0sIGEwLCBhMSwgYjAgPSBwb2ludFswXSwgYjEgPSBwb2ludFsxXTsgaiA8IG07ICsraikge1xuICAgICAgICAgICAgYTAgPSBiMCwgYTEgPSBiMSwgcG9pbnQgPSByaW5nW2pdLCBiMCA9IHBvaW50WzBdLCBiMSA9IHBvaW50WzFdO1xuICAgICAgICAgICAgaWYgKGExIDw9IHkxKSB7XG4gICAgICAgICAgICAgIGlmIChiMSA+IHkxICYmIChiMCAtIGEwKSAqICh5MSAtIGExKSA+IChiMSAtIGExKSAqICh4MCAtIGEwKSkgKyt3aW5kaW5nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKGIxIDw9IHkxICYmIChiMCAtIGEwKSAqICh5MSAtIGExKSA8IChiMSAtIGExKSAqICh4MCAtIGEwKSkgLS13aW5kaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB3aW5kaW5nO1xuICAgICAgfVxuXG4gICAgICAvLyBCdWZmZXIgZ2VvbWV0cnkgd2l0aGluIGEgcG9seWdvbiBhbmQgdGhlbiBjbGlwIGl0IGVuIG1hc3NlLlxuICAgICAgZnVuY3Rpb24gcG9seWdvblN0YXJ0KCkge1xuICAgICAgICBhY3RpdmVTdHJlYW0gPSBidWZmZXJTdHJlYW0sIHNlZ21lbnRzID0gW10sIHBvbHlnb24gPSBbXSwgY2xlYW4gPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBwb2x5Z29uRW5kKCkge1xuICAgICAgICB2YXIgc3RhcnRJbnNpZGUgPSBwb2x5Z29uSW5zaWRlKCksXG4gICAgICAgICAgICBjbGVhbkluc2lkZSA9IGNsZWFuICYmIHN0YXJ0SW5zaWRlLFxuICAgICAgICAgICAgdmlzaWJsZSA9IChzZWdtZW50cyA9IG1lcmdlKHNlZ21lbnRzKSkubGVuZ3RoO1xuICAgICAgICBpZiAoY2xlYW5JbnNpZGUgfHwgdmlzaWJsZSkge1xuICAgICAgICAgIHN0cmVhbS5wb2x5Z29uU3RhcnQoKTtcbiAgICAgICAgICBpZiAoY2xlYW5JbnNpZGUpIHtcbiAgICAgICAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgICAgIGludGVycG9sYXRlKG51bGwsIG51bGwsIDEsIHN0cmVhbSk7XG4gICAgICAgICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodmlzaWJsZSkge1xuICAgICAgICAgICAgY2xpcFBvbHlnb24oc2VnbWVudHMsIGNvbXBhcmVJbnRlcnNlY3Rpb24sIHN0YXJ0SW5zaWRlLCBpbnRlcnBvbGF0ZSwgc3RyZWFtKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3RyZWFtLnBvbHlnb25FbmQoKTtcbiAgICAgICAgfVxuICAgICAgICBhY3RpdmVTdHJlYW0gPSBzdHJlYW0sIHNlZ21lbnRzID0gcG9seWdvbiA9IHJpbmcgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBsaW5lU3RhcnQoKSB7XG4gICAgICAgIGNsaXBTdHJlYW0ucG9pbnQgPSBsaW5lUG9pbnQ7XG4gICAgICAgIGlmIChwb2x5Z29uKSBwb2x5Z29uLnB1c2gocmluZyA9IFtdKTtcbiAgICAgICAgZmlyc3QgPSB0cnVlO1xuICAgICAgICB2XyA9IGZhbHNlO1xuICAgICAgICB4XyA9IHlfID0gTmFOO1xuICAgICAgfVxuXG4gICAgICAvLyBUT0RPIHJhdGhlciB0aGFuIHNwZWNpYWwtY2FzZSBwb2x5Z29ucywgc2ltcGx5IGhhbmRsZSB0aGVtIHNlcGFyYXRlbHkuXG4gICAgICAvLyBJZGVhbGx5LCBjb2luY2lkZW50IGludGVyc2VjdGlvbiBwb2ludHMgc2hvdWxkIGJlIGppdHRlcmVkIHRvIGF2b2lkXG4gICAgICAvLyBjbGlwcGluZyBpc3N1ZXMuXG4gICAgICBmdW5jdGlvbiBsaW5lRW5kKCkge1xuICAgICAgICBpZiAoc2VnbWVudHMpIHtcbiAgICAgICAgICBsaW5lUG9pbnQoeF9fLCB5X18pO1xuICAgICAgICAgIGlmICh2X18gJiYgdl8pIGJ1ZmZlclN0cmVhbS5yZWpvaW4oKTtcbiAgICAgICAgICBzZWdtZW50cy5wdXNoKGJ1ZmZlclN0cmVhbS5yZXN1bHQoKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2xpcFN0cmVhbS5wb2ludCA9IHBvaW50O1xuICAgICAgICBpZiAodl8pIGFjdGl2ZVN0cmVhbS5saW5lRW5kKCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGxpbmVQb2ludCh4LCB5KSB7XG4gICAgICAgIHZhciB2ID0gdmlzaWJsZSh4LCB5KTtcbiAgICAgICAgaWYgKHBvbHlnb24pIHJpbmcucHVzaChbeCwgeV0pO1xuICAgICAgICBpZiAoZmlyc3QpIHtcbiAgICAgICAgICB4X18gPSB4LCB5X18gPSB5LCB2X18gPSB2O1xuICAgICAgICAgIGZpcnN0ID0gZmFsc2U7XG4gICAgICAgICAgaWYgKHYpIHtcbiAgICAgICAgICAgIGFjdGl2ZVN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgICAgIGFjdGl2ZVN0cmVhbS5wb2ludCh4LCB5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHYgJiYgdl8pIGFjdGl2ZVN0cmVhbS5wb2ludCh4LCB5KTtlbHNlIHtcbiAgICAgICAgICAgIHZhciBhID0gW3hfID0gTWF0aC5tYXgoY2xpcE1pbiwgTWF0aC5taW4oY2xpcE1heCwgeF8pKSwgeV8gPSBNYXRoLm1heChjbGlwTWluLCBNYXRoLm1pbihjbGlwTWF4LCB5XykpXSxcbiAgICAgICAgICAgICAgICBiID0gW3ggPSBNYXRoLm1heChjbGlwTWluLCBNYXRoLm1pbihjbGlwTWF4LCB4KSksIHkgPSBNYXRoLm1heChjbGlwTWluLCBNYXRoLm1pbihjbGlwTWF4LCB5KSldO1xuICAgICAgICAgICAgaWYgKGNsaXBMaW5lKGEsIGIsIHgwLCB5MCwgeDEsIHkxKSkge1xuICAgICAgICAgICAgICBpZiAoIXZfKSB7XG4gICAgICAgICAgICAgICAgYWN0aXZlU3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgICAgIGFjdGl2ZVN0cmVhbS5wb2ludChhWzBdLCBhWzFdKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBhY3RpdmVTdHJlYW0ucG9pbnQoYlswXSwgYlsxXSk7XG4gICAgICAgICAgICAgIGlmICghdikgYWN0aXZlU3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgICAgICAgY2xlYW4gPSBmYWxzZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodikge1xuICAgICAgICAgICAgICBhY3RpdmVTdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICAgIGFjdGl2ZVN0cmVhbS5wb2ludCh4LCB5KTtcbiAgICAgICAgICAgICAgY2xlYW4gPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgeF8gPSB4LCB5XyA9IHksIHZfID0gdjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNsaXBTdHJlYW07XG4gICAgfTtcbiAgfVxuXG4gIHZhciBleHRlbnQkMSA9IGZ1bmN0aW9uIGV4dGVudCQxKCkge1xuICAgIHZhciB4MCA9IDAsXG4gICAgICAgIHkwID0gMCxcbiAgICAgICAgeDEgPSA5NjAsXG4gICAgICAgIHkxID0gNTAwLFxuICAgICAgICBjYWNoZSxcbiAgICAgICAgY2FjaGVTdHJlYW0sXG4gICAgICAgIGNsaXA7XG5cbiAgICByZXR1cm4gY2xpcCA9IHtcbiAgICAgIHN0cmVhbTogZnVuY3Rpb24gc3RyZWFtKF9zdHJlYW0pIHtcbiAgICAgICAgcmV0dXJuIGNhY2hlICYmIGNhY2hlU3RyZWFtID09PSBfc3RyZWFtID8gY2FjaGUgOiBjYWNoZSA9IF9jbGlwRXh0ZW50KHgwLCB5MCwgeDEsIHkxKShjYWNoZVN0cmVhbSA9IF9zdHJlYW0pO1xuICAgICAgfSxcbiAgICAgIGV4dGVudDogZnVuY3Rpb24gZXh0ZW50KF8pIHtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeDAgPSArX1swXVswXSwgeTAgPSArX1swXVsxXSwgeDEgPSArX1sxXVswXSwgeTEgPSArX1sxXVsxXSwgY2FjaGUgPSBjYWNoZVN0cmVhbSA9IG51bGwsIGNsaXApIDogW1t4MCwgeTBdLCBbeDEsIHkxXV07XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICB2YXIgc3VtJDEgPSBhZGRlcigpO1xuXG4gIHZhciBwb2x5Z29uQ29udGFpbnMgPSBmdW5jdGlvbiBwb2x5Z29uQ29udGFpbnMocG9seWdvbiwgcG9pbnQpIHtcbiAgICB2YXIgbGFtYmRhID0gcG9pbnRbMF0sXG4gICAgICAgIHBoaSA9IHBvaW50WzFdLFxuICAgICAgICBub3JtYWwgPSBbc2luJDEobGFtYmRhKSwgLWNvcyQxKGxhbWJkYSksIDBdLFxuICAgICAgICBhbmdsZSA9IDAsXG4gICAgICAgIHdpbmRpbmcgPSAwO1xuXG4gICAgc3VtJDEucmVzZXQoKTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBuID0gcG9seWdvbi5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICghKG0gPSAocmluZyA9IHBvbHlnb25baV0pLmxlbmd0aCkpIGNvbnRpbnVlO1xuICAgICAgdmFyIHJpbmcsXG4gICAgICAgICAgbSxcbiAgICAgICAgICBwb2ludDAgPSByaW5nW20gLSAxXSxcbiAgICAgICAgICBsYW1iZGEwID0gcG9pbnQwWzBdLFxuICAgICAgICAgIHBoaTAgPSBwb2ludDBbMV0gLyAyICsgcXVhcnRlclBpLFxuICAgICAgICAgIHNpblBoaTAgPSBzaW4kMShwaGkwKSxcbiAgICAgICAgICBjb3NQaGkwID0gY29zJDEocGhpMCk7XG5cbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbTsgKytqLCBsYW1iZGEwID0gbGFtYmRhMSwgc2luUGhpMCA9IHNpblBoaTEsIGNvc1BoaTAgPSBjb3NQaGkxLCBwb2ludDAgPSBwb2ludDEpIHtcbiAgICAgICAgdmFyIHBvaW50MSA9IHJpbmdbal0sXG4gICAgICAgICAgICBsYW1iZGExID0gcG9pbnQxWzBdLFxuICAgICAgICAgICAgcGhpMSA9IHBvaW50MVsxXSAvIDIgKyBxdWFydGVyUGksXG4gICAgICAgICAgICBzaW5QaGkxID0gc2luJDEocGhpMSksXG4gICAgICAgICAgICBjb3NQaGkxID0gY29zJDEocGhpMSksXG4gICAgICAgICAgICBkZWx0YSA9IGxhbWJkYTEgLSBsYW1iZGEwLFxuICAgICAgICAgICAgc2lnbiQkMSA9IGRlbHRhID49IDAgPyAxIDogLTEsXG4gICAgICAgICAgICBhYnNEZWx0YSA9IHNpZ24kJDEgKiBkZWx0YSxcbiAgICAgICAgICAgIGFudGltZXJpZGlhbiA9IGFic0RlbHRhID4gcGkkMyxcbiAgICAgICAgICAgIGsgPSBzaW5QaGkwICogc2luUGhpMTtcblxuICAgICAgICBzdW0kMS5hZGQoYXRhbjIoayAqIHNpZ24kJDEgKiBzaW4kMShhYnNEZWx0YSksIGNvc1BoaTAgKiBjb3NQaGkxICsgayAqIGNvcyQxKGFic0RlbHRhKSkpO1xuICAgICAgICBhbmdsZSArPSBhbnRpbWVyaWRpYW4gPyBkZWx0YSArIHNpZ24kJDEgKiB0YXUkMyA6IGRlbHRhO1xuXG4gICAgICAgIC8vIEFyZSB0aGUgbG9uZ2l0dWRlcyBlaXRoZXIgc2lkZSBvZiB0aGUgcG9pbnTigJlzIG1lcmlkaWFuIChsYW1iZGEpLFxuICAgICAgICAvLyBhbmQgYXJlIHRoZSBsYXRpdHVkZXMgc21hbGxlciB0aGFuIHRoZSBwYXJhbGxlbCAocGhpKT9cbiAgICAgICAgaWYgKGFudGltZXJpZGlhbiBeIGxhbWJkYTAgPj0gbGFtYmRhIF4gbGFtYmRhMSA+PSBsYW1iZGEpIHtcbiAgICAgICAgICB2YXIgYXJjID0gY2FydGVzaWFuQ3Jvc3MoY2FydGVzaWFuKHBvaW50MCksIGNhcnRlc2lhbihwb2ludDEpKTtcbiAgICAgICAgICBjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlKGFyYyk7XG4gICAgICAgICAgdmFyIGludGVyc2VjdGlvbiA9IGNhcnRlc2lhbkNyb3NzKG5vcm1hbCwgYXJjKTtcbiAgICAgICAgICBjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlKGludGVyc2VjdGlvbik7XG4gICAgICAgICAgdmFyIHBoaUFyYyA9IChhbnRpbWVyaWRpYW4gXiBkZWx0YSA+PSAwID8gLTEgOiAxKSAqIGFzaW4oaW50ZXJzZWN0aW9uWzJdKTtcbiAgICAgICAgICBpZiAocGhpID4gcGhpQXJjIHx8IHBoaSA9PT0gcGhpQXJjICYmIChhcmNbMF0gfHwgYXJjWzFdKSkge1xuICAgICAgICAgICAgd2luZGluZyArPSBhbnRpbWVyaWRpYW4gXiBkZWx0YSA+PSAwID8gMSA6IC0xO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZpcnN0LCBkZXRlcm1pbmUgd2hldGhlciB0aGUgU291dGggcG9sZSBpcyBpbnNpZGUgb3Igb3V0c2lkZTpcbiAgICAvL1xuICAgIC8vIEl0IGlzIGluc2lkZSBpZjpcbiAgICAvLyAqIHRoZSBwb2x5Z29uIHdpbmRzIGFyb3VuZCBpdCBpbiBhIGNsb2Nrd2lzZSBkaXJlY3Rpb24uXG4gICAgLy8gKiB0aGUgcG9seWdvbiBkb2VzIG5vdCAoY3VtdWxhdGl2ZWx5KSB3aW5kIGFyb3VuZCBpdCwgYnV0IGhhcyBhIG5lZ2F0aXZlXG4gICAgLy8gICAoY291bnRlci1jbG9ja3dpc2UpIGFyZWEuXG4gICAgLy9cbiAgICAvLyBTZWNvbmQsIGNvdW50IHRoZSAoc2lnbmVkKSBudW1iZXIgb2YgdGltZXMgYSBzZWdtZW50IGNyb3NzZXMgYSBsYW1iZGFcbiAgICAvLyBmcm9tIHRoZSBwb2ludCB0byB0aGUgU291dGggcG9sZS4gIElmIGl0IGlzIHplcm8sIHRoZW4gdGhlIHBvaW50IGlzIHRoZVxuICAgIC8vIHNhbWUgc2lkZSBhcyB0aGUgU291dGggcG9sZS5cblxuICAgIHJldHVybiAoYW5nbGUgPCAtZXBzaWxvbiQyIHx8IGFuZ2xlIDwgZXBzaWxvbiQyICYmIHN1bSQxIDwgLWVwc2lsb24kMikgXiB3aW5kaW5nICYgMTtcbiAgfTtcblxuICB2YXIgbGVuZ3RoU3VtID0gYWRkZXIoKTtcbiAgdmFyIGxhbWJkYTAkMjtcbiAgdmFyIHNpblBoaTAkMTtcbiAgdmFyIGNvc1BoaTAkMTtcblxuICB2YXIgbGVuZ3RoU3RyZWFtID0ge1xuICAgIHNwaGVyZTogbm9vcCQxLFxuICAgIHBvaW50OiBub29wJDEsXG4gICAgbGluZVN0YXJ0OiBsZW5ndGhMaW5lU3RhcnQsXG4gICAgbGluZUVuZDogbm9vcCQxLFxuICAgIHBvbHlnb25TdGFydDogbm9vcCQxLFxuICAgIHBvbHlnb25FbmQ6IG5vb3AkMVxuICB9O1xuXG4gIGZ1bmN0aW9uIGxlbmd0aExpbmVTdGFydCgpIHtcbiAgICBsZW5ndGhTdHJlYW0ucG9pbnQgPSBsZW5ndGhQb2ludEZpcnN0O1xuICAgIGxlbmd0aFN0cmVhbS5saW5lRW5kID0gbGVuZ3RoTGluZUVuZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxlbmd0aExpbmVFbmQoKSB7XG4gICAgbGVuZ3RoU3RyZWFtLnBvaW50ID0gbGVuZ3RoU3RyZWFtLmxpbmVFbmQgPSBub29wJDE7XG4gIH1cblxuICBmdW5jdGlvbiBsZW5ndGhQb2ludEZpcnN0KGxhbWJkYSwgcGhpKSB7XG4gICAgbGFtYmRhICo9IHJhZGlhbnMsIHBoaSAqPSByYWRpYW5zO1xuICAgIGxhbWJkYTAkMiA9IGxhbWJkYSwgc2luUGhpMCQxID0gc2luJDEocGhpKSwgY29zUGhpMCQxID0gY29zJDEocGhpKTtcbiAgICBsZW5ndGhTdHJlYW0ucG9pbnQgPSBsZW5ndGhQb2ludDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxlbmd0aFBvaW50KGxhbWJkYSwgcGhpKSB7XG4gICAgbGFtYmRhICo9IHJhZGlhbnMsIHBoaSAqPSByYWRpYW5zO1xuICAgIHZhciBzaW5QaGkgPSBzaW4kMShwaGkpLFxuICAgICAgICBjb3NQaGkgPSBjb3MkMShwaGkpLFxuICAgICAgICBkZWx0YSA9IGFicyhsYW1iZGEgLSBsYW1iZGEwJDIpLFxuICAgICAgICBjb3NEZWx0YSA9IGNvcyQxKGRlbHRhKSxcbiAgICAgICAgc2luRGVsdGEgPSBzaW4kMShkZWx0YSksXG4gICAgICAgIHggPSBjb3NQaGkgKiBzaW5EZWx0YSxcbiAgICAgICAgeSA9IGNvc1BoaTAkMSAqIHNpblBoaSAtIHNpblBoaTAkMSAqIGNvc1BoaSAqIGNvc0RlbHRhLFxuICAgICAgICB6ID0gc2luUGhpMCQxICogc2luUGhpICsgY29zUGhpMCQxICogY29zUGhpICogY29zRGVsdGE7XG4gICAgbGVuZ3RoU3VtLmFkZChhdGFuMihzcXJ0KHggKiB4ICsgeSAqIHkpLCB6KSk7XG4gICAgbGFtYmRhMCQyID0gbGFtYmRhLCBzaW5QaGkwJDEgPSBzaW5QaGksIGNvc1BoaTAkMSA9IGNvc1BoaTtcbiAgfVxuXG4gIHZhciBsZW5ndGgkMSA9IGZ1bmN0aW9uIGxlbmd0aCQxKG9iamVjdCkge1xuICAgIGxlbmd0aFN1bS5yZXNldCgpO1xuICAgIGdlb1N0cmVhbShvYmplY3QsIGxlbmd0aFN0cmVhbSk7XG4gICAgcmV0dXJuICtsZW5ndGhTdW07XG4gIH07XG5cbiAgdmFyIGNvb3JkaW5hdGVzID0gW251bGwsIG51bGxdO1xuICB2YXIgb2JqZWN0JDEgPSB7IHR5cGU6IFwiTGluZVN0cmluZ1wiLCBjb29yZGluYXRlczogY29vcmRpbmF0ZXMgfTtcblxuICB2YXIgZGlzdGFuY2UgPSBmdW5jdGlvbiBkaXN0YW5jZShhLCBiKSB7XG4gICAgY29vcmRpbmF0ZXNbMF0gPSBhO1xuICAgIGNvb3JkaW5hdGVzWzFdID0gYjtcbiAgICByZXR1cm4gbGVuZ3RoJDEob2JqZWN0JDEpO1xuICB9O1xuXG4gIHZhciBjb250YWluc09iamVjdFR5cGUgPSB7XG4gICAgRmVhdHVyZTogZnVuY3Rpb24gRmVhdHVyZShvYmplY3QsIHBvaW50KSB7XG4gICAgICByZXR1cm4gY29udGFpbnNHZW9tZXRyeShvYmplY3QuZ2VvbWV0cnksIHBvaW50KTtcbiAgICB9LFxuICAgIEZlYXR1cmVDb2xsZWN0aW9uOiBmdW5jdGlvbiBGZWF0dXJlQ29sbGVjdGlvbihvYmplY3QsIHBvaW50KSB7XG4gICAgICB2YXIgZmVhdHVyZXMgPSBvYmplY3QuZmVhdHVyZXMsXG4gICAgICAgICAgaSA9IC0xLFxuICAgICAgICAgIG4gPSBmZWF0dXJlcy5sZW5ndGg7XG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBpZiAoY29udGFpbnNHZW9tZXRyeShmZWF0dXJlc1tpXS5nZW9tZXRyeSwgcG9pbnQpKSByZXR1cm4gdHJ1ZTtcbiAgICAgIH1yZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIHZhciBjb250YWluc0dlb21ldHJ5VHlwZSA9IHtcbiAgICBTcGhlcmU6IGZ1bmN0aW9uIFNwaGVyZSgpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gICAgUG9pbnQ6IGZ1bmN0aW9uIFBvaW50KG9iamVjdCwgcG9pbnQpIHtcbiAgICAgIHJldHVybiBjb250YWluc1BvaW50KG9iamVjdC5jb29yZGluYXRlcywgcG9pbnQpO1xuICAgIH0sXG4gICAgTXVsdGlQb2ludDogZnVuY3Rpb24gTXVsdGlQb2ludChvYmplY3QsIHBvaW50KSB7XG4gICAgICB2YXIgY29vcmRpbmF0ZXMgPSBvYmplY3QuY29vcmRpbmF0ZXMsXG4gICAgICAgICAgaSA9IC0xLFxuICAgICAgICAgIG4gPSBjb29yZGluYXRlcy5sZW5ndGg7XG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBpZiAoY29udGFpbnNQb2ludChjb29yZGluYXRlc1tpXSwgcG9pbnQpKSByZXR1cm4gdHJ1ZTtcbiAgICAgIH1yZXR1cm4gZmFsc2U7XG4gICAgfSxcbiAgICBMaW5lU3RyaW5nOiBmdW5jdGlvbiBMaW5lU3RyaW5nKG9iamVjdCwgcG9pbnQpIHtcbiAgICAgIHJldHVybiBjb250YWluc0xpbmUob2JqZWN0LmNvb3JkaW5hdGVzLCBwb2ludCk7XG4gICAgfSxcbiAgICBNdWx0aUxpbmVTdHJpbmc6IGZ1bmN0aW9uIE11bHRpTGluZVN0cmluZyhvYmplY3QsIHBvaW50KSB7XG4gICAgICB2YXIgY29vcmRpbmF0ZXMgPSBvYmplY3QuY29vcmRpbmF0ZXMsXG4gICAgICAgICAgaSA9IC0xLFxuICAgICAgICAgIG4gPSBjb29yZGluYXRlcy5sZW5ndGg7XG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBpZiAoY29udGFpbnNMaW5lKGNvb3JkaW5hdGVzW2ldLCBwb2ludCkpIHJldHVybiB0cnVlO1xuICAgICAgfXJldHVybiBmYWxzZTtcbiAgICB9LFxuICAgIFBvbHlnb246IGZ1bmN0aW9uIFBvbHlnb24ob2JqZWN0LCBwb2ludCkge1xuICAgICAgcmV0dXJuIGNvbnRhaW5zUG9seWdvbihvYmplY3QuY29vcmRpbmF0ZXMsIHBvaW50KTtcbiAgICB9LFxuICAgIE11bHRpUG9seWdvbjogZnVuY3Rpb24gTXVsdGlQb2x5Z29uKG9iamVjdCwgcG9pbnQpIHtcbiAgICAgIHZhciBjb29yZGluYXRlcyA9IG9iamVjdC5jb29yZGluYXRlcyxcbiAgICAgICAgICBpID0gLTEsXG4gICAgICAgICAgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aDtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIGlmIChjb250YWluc1BvbHlnb24oY29vcmRpbmF0ZXNbaV0sIHBvaW50KSkgcmV0dXJuIHRydWU7XG4gICAgICB9cmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gICAgR2VvbWV0cnlDb2xsZWN0aW9uOiBmdW5jdGlvbiBHZW9tZXRyeUNvbGxlY3Rpb24ob2JqZWN0LCBwb2ludCkge1xuICAgICAgdmFyIGdlb21ldHJpZXMgPSBvYmplY3QuZ2VvbWV0cmllcyxcbiAgICAgICAgICBpID0gLTEsXG4gICAgICAgICAgbiA9IGdlb21ldHJpZXMubGVuZ3RoO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgaWYgKGNvbnRhaW5zR2VvbWV0cnkoZ2VvbWV0cmllc1tpXSwgcG9pbnQpKSByZXR1cm4gdHJ1ZTtcbiAgICAgIH1yZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGNvbnRhaW5zR2VvbWV0cnkoZ2VvbWV0cnksIHBvaW50KSB7XG4gICAgcmV0dXJuIGdlb21ldHJ5ICYmIGNvbnRhaW5zR2VvbWV0cnlUeXBlLmhhc093blByb3BlcnR5KGdlb21ldHJ5LnR5cGUpID8gY29udGFpbnNHZW9tZXRyeVR5cGVbZ2VvbWV0cnkudHlwZV0oZ2VvbWV0cnksIHBvaW50KSA6IGZhbHNlO1xuICB9XG5cbiAgZnVuY3Rpb24gY29udGFpbnNQb2ludChjb29yZGluYXRlcywgcG9pbnQpIHtcbiAgICByZXR1cm4gZGlzdGFuY2UoY29vcmRpbmF0ZXMsIHBvaW50KSA9PT0gMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnRhaW5zTGluZShjb29yZGluYXRlcywgcG9pbnQpIHtcbiAgICB2YXIgYWIgPSBkaXN0YW5jZShjb29yZGluYXRlc1swXSwgY29vcmRpbmF0ZXNbMV0pLFxuICAgICAgICBhbyA9IGRpc3RhbmNlKGNvb3JkaW5hdGVzWzBdLCBwb2ludCksXG4gICAgICAgIG9iID0gZGlzdGFuY2UocG9pbnQsIGNvb3JkaW5hdGVzWzFdKTtcbiAgICByZXR1cm4gYW8gKyBvYiA8PSBhYiArIGVwc2lsb24kMjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnRhaW5zUG9seWdvbihjb29yZGluYXRlcywgcG9pbnQpIHtcbiAgICByZXR1cm4gISFwb2x5Z29uQ29udGFpbnMoY29vcmRpbmF0ZXMubWFwKHJpbmdSYWRpYW5zKSwgcG9pbnRSYWRpYW5zKHBvaW50KSk7XG4gIH1cblxuICBmdW5jdGlvbiByaW5nUmFkaWFucyhyaW5nKSB7XG4gICAgcmV0dXJuIHJpbmcgPSByaW5nLm1hcChwb2ludFJhZGlhbnMpLCByaW5nLnBvcCgpLCByaW5nO1xuICB9XG5cbiAgZnVuY3Rpb24gcG9pbnRSYWRpYW5zKHBvaW50KSB7XG4gICAgcmV0dXJuIFtwb2ludFswXSAqIHJhZGlhbnMsIHBvaW50WzFdICogcmFkaWFuc107XG4gIH1cblxuICB2YXIgY29udGFpbnMgPSBmdW5jdGlvbiBjb250YWlucyhvYmplY3QsIHBvaW50KSB7XG4gICAgcmV0dXJuIChvYmplY3QgJiYgY29udGFpbnNPYmplY3RUeXBlLmhhc093blByb3BlcnR5KG9iamVjdC50eXBlKSA/IGNvbnRhaW5zT2JqZWN0VHlwZVtvYmplY3QudHlwZV0gOiBjb250YWluc0dlb21ldHJ5KShvYmplY3QsIHBvaW50KTtcbiAgfTtcblxuICBmdW5jdGlvbiBncmF0aWN1bGVYKHkwLCB5MSwgZHkpIHtcbiAgICB2YXIgeSA9IHNlcXVlbmNlKHkwLCB5MSAtIGVwc2lsb24kMiwgZHkpLmNvbmNhdCh5MSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4geS5tYXAoZnVuY3Rpb24gKHkpIHtcbiAgICAgICAgcmV0dXJuIFt4LCB5XTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBncmF0aWN1bGVZKHgwLCB4MSwgZHgpIHtcbiAgICB2YXIgeCA9IHNlcXVlbmNlKHgwLCB4MSAtIGVwc2lsb24kMiwgZHgpLmNvbmNhdCh4MSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh5KSB7XG4gICAgICByZXR1cm4geC5tYXAoZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgcmV0dXJuIFt4LCB5XTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBncmF0aWN1bGUoKSB7XG4gICAgdmFyIHgxLFxuICAgICAgICB4MCxcbiAgICAgICAgWDEsXG4gICAgICAgIFgwLFxuICAgICAgICB5MSxcbiAgICAgICAgeTAsXG4gICAgICAgIFkxLFxuICAgICAgICBZMCxcbiAgICAgICAgZHggPSAxMCxcbiAgICAgICAgZHkgPSBkeCxcbiAgICAgICAgRFggPSA5MCxcbiAgICAgICAgRFkgPSAzNjAsXG4gICAgICAgIHgsXG4gICAgICAgIHksXG4gICAgICAgIFgsXG4gICAgICAgIFksXG4gICAgICAgIHByZWNpc2lvbiA9IDIuNTtcblxuICAgIGZ1bmN0aW9uIGdyYXRpY3VsZSgpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwiTXVsdGlMaW5lU3RyaW5nXCIsIGNvb3JkaW5hdGVzOiBsaW5lcygpIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGluZXMoKSB7XG4gICAgICByZXR1cm4gc2VxdWVuY2UoY2VpbChYMCAvIERYKSAqIERYLCBYMSwgRFgpLm1hcChYKS5jb25jYXQoc2VxdWVuY2UoY2VpbChZMCAvIERZKSAqIERZLCBZMSwgRFkpLm1hcChZKSkuY29uY2F0KHNlcXVlbmNlKGNlaWwoeDAgLyBkeCkgKiBkeCwgeDEsIGR4KS5maWx0ZXIoZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgcmV0dXJuIGFicyh4ICUgRFgpID4gZXBzaWxvbiQyO1xuICAgICAgfSkubWFwKHgpKS5jb25jYXQoc2VxdWVuY2UoY2VpbCh5MCAvIGR5KSAqIGR5LCB5MSwgZHkpLmZpbHRlcihmdW5jdGlvbiAoeSkge1xuICAgICAgICByZXR1cm4gYWJzKHkgJSBEWSkgPiBlcHNpbG9uJDI7XG4gICAgICB9KS5tYXAoeSkpO1xuICAgIH1cblxuICAgIGdyYXRpY3VsZS5saW5lcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBsaW5lcygpLm1hcChmdW5jdGlvbiAoY29vcmRpbmF0ZXMpIHtcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogXCJMaW5lU3RyaW5nXCIsIGNvb3JkaW5hdGVzOiBjb29yZGluYXRlcyB9O1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGdyYXRpY3VsZS5vdXRsaW5lID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogXCJQb2x5Z29uXCIsXG4gICAgICAgIGNvb3JkaW5hdGVzOiBbWChYMCkuY29uY2F0KFkoWTEpLnNsaWNlKDEpLCBYKFgxKS5yZXZlcnNlKCkuc2xpY2UoMSksIFkoWTApLnJldmVyc2UoKS5zbGljZSgxKSldXG4gICAgICB9O1xuICAgIH07XG5cbiAgICBncmF0aWN1bGUuZXh0ZW50ID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGdyYXRpY3VsZS5leHRlbnRNaW5vcigpO1xuICAgICAgcmV0dXJuIGdyYXRpY3VsZS5leHRlbnRNYWpvcihfKS5leHRlbnRNaW5vcihfKTtcbiAgICB9O1xuXG4gICAgZ3JhdGljdWxlLmV4dGVudE1ham9yID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFtbWDAsIFkwXSwgW1gxLCBZMV1dO1xuICAgICAgWDAgPSArX1swXVswXSwgWDEgPSArX1sxXVswXTtcbiAgICAgIFkwID0gK19bMF1bMV0sIFkxID0gK19bMV1bMV07XG4gICAgICBpZiAoWDAgPiBYMSkgXyA9IFgwLCBYMCA9IFgxLCBYMSA9IF87XG4gICAgICBpZiAoWTAgPiBZMSkgXyA9IFkwLCBZMCA9IFkxLCBZMSA9IF87XG4gICAgICByZXR1cm4gZ3JhdGljdWxlLnByZWNpc2lvbihwcmVjaXNpb24pO1xuICAgIH07XG5cbiAgICBncmF0aWN1bGUuZXh0ZW50TWlub3IgPSBmdW5jdGlvbiAoXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gW1t4MCwgeTBdLCBbeDEsIHkxXV07XG4gICAgICB4MCA9ICtfWzBdWzBdLCB4MSA9ICtfWzFdWzBdO1xuICAgICAgeTAgPSArX1swXVsxXSwgeTEgPSArX1sxXVsxXTtcbiAgICAgIGlmICh4MCA+IHgxKSBfID0geDAsIHgwID0geDEsIHgxID0gXztcbiAgICAgIGlmICh5MCA+IHkxKSBfID0geTAsIHkwID0geTEsIHkxID0gXztcbiAgICAgIHJldHVybiBncmF0aWN1bGUucHJlY2lzaW9uKHByZWNpc2lvbik7XG4gICAgfTtcblxuICAgIGdyYXRpY3VsZS5zdGVwID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGdyYXRpY3VsZS5zdGVwTWlub3IoKTtcbiAgICAgIHJldHVybiBncmF0aWN1bGUuc3RlcE1ham9yKF8pLnN0ZXBNaW5vcihfKTtcbiAgICB9O1xuXG4gICAgZ3JhdGljdWxlLnN0ZXBNYWpvciA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBbRFgsIERZXTtcbiAgICAgIERYID0gK19bMF0sIERZID0gK19bMV07XG4gICAgICByZXR1cm4gZ3JhdGljdWxlO1xuICAgIH07XG5cbiAgICBncmF0aWN1bGUuc3RlcE1pbm9yID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFtkeCwgZHldO1xuICAgICAgZHggPSArX1swXSwgZHkgPSArX1sxXTtcbiAgICAgIHJldHVybiBncmF0aWN1bGU7XG4gICAgfTtcblxuICAgIGdyYXRpY3VsZS5wcmVjaXNpb24gPSBmdW5jdGlvbiAoXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcHJlY2lzaW9uO1xuICAgICAgcHJlY2lzaW9uID0gK187XG4gICAgICB4ID0gZ3JhdGljdWxlWCh5MCwgeTEsIDkwKTtcbiAgICAgIHkgPSBncmF0aWN1bGVZKHgwLCB4MSwgcHJlY2lzaW9uKTtcbiAgICAgIFggPSBncmF0aWN1bGVYKFkwLCBZMSwgOTApO1xuICAgICAgWSA9IGdyYXRpY3VsZVkoWDAsIFgxLCBwcmVjaXNpb24pO1xuICAgICAgcmV0dXJuIGdyYXRpY3VsZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGdyYXRpY3VsZS5leHRlbnRNYWpvcihbWy0xODAsIC05MCArIGVwc2lsb24kMl0sIFsxODAsIDkwIC0gZXBzaWxvbiQyXV0pLmV4dGVudE1pbm9yKFtbLTE4MCwgLTgwIC0gZXBzaWxvbiQyXSwgWzE4MCwgODAgKyBlcHNpbG9uJDJdXSk7XG4gIH1cblxuICBmdW5jdGlvbiBncmF0aWN1bGUxMCgpIHtcbiAgICByZXR1cm4gZ3JhdGljdWxlKCkoKTtcbiAgfVxuXG4gIHZhciBpbnRlcnBvbGF0ZSQxID0gZnVuY3Rpb24gaW50ZXJwb2xhdGUkMShhLCBiKSB7XG4gICAgdmFyIHgwID0gYVswXSAqIHJhZGlhbnMsXG4gICAgICAgIHkwID0gYVsxXSAqIHJhZGlhbnMsXG4gICAgICAgIHgxID0gYlswXSAqIHJhZGlhbnMsXG4gICAgICAgIHkxID0gYlsxXSAqIHJhZGlhbnMsXG4gICAgICAgIGN5MCA9IGNvcyQxKHkwKSxcbiAgICAgICAgc3kwID0gc2luJDEoeTApLFxuICAgICAgICBjeTEgPSBjb3MkMSh5MSksXG4gICAgICAgIHN5MSA9IHNpbiQxKHkxKSxcbiAgICAgICAga3gwID0gY3kwICogY29zJDEoeDApLFxuICAgICAgICBreTAgPSBjeTAgKiBzaW4kMSh4MCksXG4gICAgICAgIGt4MSA9IGN5MSAqIGNvcyQxKHgxKSxcbiAgICAgICAga3kxID0gY3kxICogc2luJDEoeDEpLFxuICAgICAgICBkID0gMiAqIGFzaW4oc3FydChoYXZlcnNpbih5MSAtIHkwKSArIGN5MCAqIGN5MSAqIGhhdmVyc2luKHgxIC0geDApKSksXG4gICAgICAgIGsgPSBzaW4kMShkKTtcblxuICAgIHZhciBpbnRlcnBvbGF0ZSA9IGQgPyBmdW5jdGlvbiAodCkge1xuICAgICAgdmFyIEIgPSBzaW4kMSh0ICo9IGQpIC8gayxcbiAgICAgICAgICBBID0gc2luJDEoZCAtIHQpIC8gayxcbiAgICAgICAgICB4ID0gQSAqIGt4MCArIEIgKiBreDEsXG4gICAgICAgICAgeSA9IEEgKiBreTAgKyBCICoga3kxLFxuICAgICAgICAgIHogPSBBICogc3kwICsgQiAqIHN5MTtcbiAgICAgIHJldHVybiBbYXRhbjIoeSwgeCkgKiBkZWdyZWVzJDEsIGF0YW4yKHosIHNxcnQoeCAqIHggKyB5ICogeSkpICogZGVncmVlcyQxXTtcbiAgICB9IDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFt4MCAqIGRlZ3JlZXMkMSwgeTAgKiBkZWdyZWVzJDFdO1xuICAgIH07XG5cbiAgICBpbnRlcnBvbGF0ZS5kaXN0YW5jZSA9IGQ7XG5cbiAgICByZXR1cm4gaW50ZXJwb2xhdGU7XG4gIH07XG5cbiAgdmFyIGlkZW50aXR5JDQgPSBmdW5jdGlvbiBpZGVudGl0eSQ0KHgpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcblxuICB2YXIgYXJlYVN1bSQxID0gYWRkZXIoKTtcbiAgdmFyIGFyZWFSaW5nU3VtJDEgPSBhZGRlcigpO1xuICB2YXIgeDAwO1xuICB2YXIgeTAwO1xuICB2YXIgeDAkMTtcbiAgdmFyIHkwJDE7XG5cbiAgdmFyIGFyZWFTdHJlYW0kMSA9IHtcbiAgICBwb2ludDogbm9vcCQxLFxuICAgIGxpbmVTdGFydDogbm9vcCQxLFxuICAgIGxpbmVFbmQ6IG5vb3AkMSxcbiAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uIHBvbHlnb25TdGFydCgpIHtcbiAgICAgIGFyZWFTdHJlYW0kMS5saW5lU3RhcnQgPSBhcmVhUmluZ1N0YXJ0JDE7XG4gICAgICBhcmVhU3RyZWFtJDEubGluZUVuZCA9IGFyZWFSaW5nRW5kJDE7XG4gICAgfSxcbiAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbiBwb2x5Z29uRW5kKCkge1xuICAgICAgYXJlYVN0cmVhbSQxLmxpbmVTdGFydCA9IGFyZWFTdHJlYW0kMS5saW5lRW5kID0gYXJlYVN0cmVhbSQxLnBvaW50ID0gbm9vcCQxO1xuICAgICAgYXJlYVN1bSQxLmFkZChhYnMoYXJlYVJpbmdTdW0kMSkpO1xuICAgICAgYXJlYVJpbmdTdW0kMS5yZXNldCgpO1xuICAgIH0sXG4gICAgcmVzdWx0OiBmdW5jdGlvbiByZXN1bHQoKSB7XG4gICAgICB2YXIgYXJlYSA9IGFyZWFTdW0kMSAvIDI7XG4gICAgICBhcmVhU3VtJDEucmVzZXQoKTtcbiAgICAgIHJldHVybiBhcmVhO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBhcmVhUmluZ1N0YXJ0JDEoKSB7XG4gICAgYXJlYVN0cmVhbSQxLnBvaW50ID0gYXJlYVBvaW50Rmlyc3QkMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFyZWFQb2ludEZpcnN0JDEoeCwgeSkge1xuICAgIGFyZWFTdHJlYW0kMS5wb2ludCA9IGFyZWFQb2ludCQxO1xuICAgIHgwMCA9IHgwJDEgPSB4LCB5MDAgPSB5MCQxID0geTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFyZWFQb2ludCQxKHgsIHkpIHtcbiAgICBhcmVhUmluZ1N1bSQxLmFkZCh5MCQxICogeCAtIHgwJDEgKiB5KTtcbiAgICB4MCQxID0geCwgeTAkMSA9IHk7XG4gIH1cblxuICBmdW5jdGlvbiBhcmVhUmluZ0VuZCQxKCkge1xuICAgIGFyZWFQb2ludCQxKHgwMCwgeTAwKTtcbiAgfVxuXG4gIHZhciB4MCQyID0gSW5maW5pdHk7XG4gIHZhciB5MCQyID0geDAkMjtcbiAgdmFyIHgxID0gLXgwJDI7XG4gIHZhciB5MSA9IHgxO1xuXG4gIHZhciBib3VuZHNTdHJlYW0kMSA9IHtcbiAgICBwb2ludDogYm91bmRzUG9pbnQkMSxcbiAgICBsaW5lU3RhcnQ6IG5vb3AkMSxcbiAgICBsaW5lRW5kOiBub29wJDEsXG4gICAgcG9seWdvblN0YXJ0OiBub29wJDEsXG4gICAgcG9seWdvbkVuZDogbm9vcCQxLFxuICAgIHJlc3VsdDogZnVuY3Rpb24gcmVzdWx0KCkge1xuICAgICAgdmFyIGJvdW5kcyA9IFtbeDAkMiwgeTAkMl0sIFt4MSwgeTFdXTtcbiAgICAgIHgxID0geTEgPSAtKHkwJDIgPSB4MCQyID0gSW5maW5pdHkpO1xuICAgICAgcmV0dXJuIGJvdW5kcztcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gYm91bmRzUG9pbnQkMSh4LCB5KSB7XG4gICAgaWYgKHggPCB4MCQyKSB4MCQyID0geDtcbiAgICBpZiAoeCA+IHgxKSB4MSA9IHg7XG4gICAgaWYgKHkgPCB5MCQyKSB5MCQyID0geTtcbiAgICBpZiAoeSA+IHkxKSB5MSA9IHk7XG4gIH1cblxuICAvLyBUT0RPIEVuZm9yY2UgcG9zaXRpdmUgYXJlYSBmb3IgZXh0ZXJpb3IsIG5lZ2F0aXZlIGFyZWEgZm9yIGludGVyaW9yP1xuXG4gIHZhciBYMCQxID0gMDtcbiAgdmFyIFkwJDEgPSAwO1xuICB2YXIgWjAkMSA9IDA7XG4gIHZhciBYMSQxID0gMDtcbiAgdmFyIFkxJDEgPSAwO1xuICB2YXIgWjEkMSA9IDA7XG4gIHZhciBYMiQxID0gMDtcbiAgdmFyIFkyJDEgPSAwO1xuICB2YXIgWjIkMSA9IDA7XG4gIHZhciB4MDAkMTtcbiAgdmFyIHkwMCQxO1xuICB2YXIgeDAkMztcbiAgdmFyIHkwJDM7XG5cbiAgdmFyIGNlbnRyb2lkU3RyZWFtJDEgPSB7XG4gICAgcG9pbnQ6IGNlbnRyb2lkUG9pbnQkMSxcbiAgICBsaW5lU3RhcnQ6IGNlbnRyb2lkTGluZVN0YXJ0JDEsXG4gICAgbGluZUVuZDogY2VudHJvaWRMaW5lRW5kJDEsXG4gICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbiBwb2x5Z29uU3RhcnQoKSB7XG4gICAgICBjZW50cm9pZFN0cmVhbSQxLmxpbmVTdGFydCA9IGNlbnRyb2lkUmluZ1N0YXJ0JDE7XG4gICAgICBjZW50cm9pZFN0cmVhbSQxLmxpbmVFbmQgPSBjZW50cm9pZFJpbmdFbmQkMTtcbiAgICB9LFxuICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uIHBvbHlnb25FbmQoKSB7XG4gICAgICBjZW50cm9pZFN0cmVhbSQxLnBvaW50ID0gY2VudHJvaWRQb2ludCQxO1xuICAgICAgY2VudHJvaWRTdHJlYW0kMS5saW5lU3RhcnQgPSBjZW50cm9pZExpbmVTdGFydCQxO1xuICAgICAgY2VudHJvaWRTdHJlYW0kMS5saW5lRW5kID0gY2VudHJvaWRMaW5lRW5kJDE7XG4gICAgfSxcbiAgICByZXN1bHQ6IGZ1bmN0aW9uIHJlc3VsdCgpIHtcbiAgICAgIHZhciBjZW50cm9pZCA9IFoyJDEgPyBbWDIkMSAvIFoyJDEsIFkyJDEgLyBaMiQxXSA6IFoxJDEgPyBbWDEkMSAvIFoxJDEsIFkxJDEgLyBaMSQxXSA6IFowJDEgPyBbWDAkMSAvIFowJDEsIFkwJDEgLyBaMCQxXSA6IFtOYU4sIE5hTl07XG4gICAgICBYMCQxID0gWTAkMSA9IFowJDEgPSBYMSQxID0gWTEkMSA9IFoxJDEgPSBYMiQxID0gWTIkMSA9IFoyJDEgPSAwO1xuICAgICAgcmV0dXJuIGNlbnRyb2lkO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBjZW50cm9pZFBvaW50JDEoeCwgeSkge1xuICAgIFgwJDEgKz0geDtcbiAgICBZMCQxICs9IHk7XG4gICAgKytaMCQxO1xuICB9XG5cbiAgZnVuY3Rpb24gY2VudHJvaWRMaW5lU3RhcnQkMSgpIHtcbiAgICBjZW50cm9pZFN0cmVhbSQxLnBvaW50ID0gY2VudHJvaWRQb2ludEZpcnN0TGluZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNlbnRyb2lkUG9pbnRGaXJzdExpbmUoeCwgeSkge1xuICAgIGNlbnRyb2lkU3RyZWFtJDEucG9pbnQgPSBjZW50cm9pZFBvaW50TGluZTtcbiAgICBjZW50cm9pZFBvaW50JDEoeDAkMyA9IHgsIHkwJDMgPSB5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNlbnRyb2lkUG9pbnRMaW5lKHgsIHkpIHtcbiAgICB2YXIgZHggPSB4IC0geDAkMyxcbiAgICAgICAgZHkgPSB5IC0geTAkMyxcbiAgICAgICAgeiA9IHNxcnQoZHggKiBkeCArIGR5ICogZHkpO1xuICAgIFgxJDEgKz0geiAqICh4MCQzICsgeCkgLyAyO1xuICAgIFkxJDEgKz0geiAqICh5MCQzICsgeSkgLyAyO1xuICAgIFoxJDEgKz0gejtcbiAgICBjZW50cm9pZFBvaW50JDEoeDAkMyA9IHgsIHkwJDMgPSB5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNlbnRyb2lkTGluZUVuZCQxKCkge1xuICAgIGNlbnRyb2lkU3RyZWFtJDEucG9pbnQgPSBjZW50cm9pZFBvaW50JDE7XG4gIH1cblxuICBmdW5jdGlvbiBjZW50cm9pZFJpbmdTdGFydCQxKCkge1xuICAgIGNlbnRyb2lkU3RyZWFtJDEucG9pbnQgPSBjZW50cm9pZFBvaW50Rmlyc3RSaW5nO1xuICB9XG5cbiAgZnVuY3Rpb24gY2VudHJvaWRSaW5nRW5kJDEoKSB7XG4gICAgY2VudHJvaWRQb2ludFJpbmcoeDAwJDEsIHkwMCQxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNlbnRyb2lkUG9pbnRGaXJzdFJpbmcoeCwgeSkge1xuICAgIGNlbnRyb2lkU3RyZWFtJDEucG9pbnQgPSBjZW50cm9pZFBvaW50UmluZztcbiAgICBjZW50cm9pZFBvaW50JDEoeDAwJDEgPSB4MCQzID0geCwgeTAwJDEgPSB5MCQzID0geSk7XG4gIH1cblxuICBmdW5jdGlvbiBjZW50cm9pZFBvaW50UmluZyh4LCB5KSB7XG4gICAgdmFyIGR4ID0geCAtIHgwJDMsXG4gICAgICAgIGR5ID0geSAtIHkwJDMsXG4gICAgICAgIHogPSBzcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcblxuICAgIFgxJDEgKz0geiAqICh4MCQzICsgeCkgLyAyO1xuICAgIFkxJDEgKz0geiAqICh5MCQzICsgeSkgLyAyO1xuICAgIFoxJDEgKz0gejtcblxuICAgIHogPSB5MCQzICogeCAtIHgwJDMgKiB5O1xuICAgIFgyJDEgKz0geiAqICh4MCQzICsgeCk7XG4gICAgWTIkMSArPSB6ICogKHkwJDMgKyB5KTtcbiAgICBaMiQxICs9IHogKiAzO1xuICAgIGNlbnRyb2lkUG9pbnQkMSh4MCQzID0geCwgeTAkMyA9IHkpO1xuICB9XG5cbiAgZnVuY3Rpb24gUGF0aENvbnRleHQoY29udGV4dCkge1xuICAgIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB9XG5cbiAgUGF0aENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIF9yYWRpdXM6IDQuNSxcbiAgICBwb2ludFJhZGl1czogZnVuY3Rpb24gcG9pbnRSYWRpdXMoXykge1xuICAgICAgcmV0dXJuIHRoaXMuX3JhZGl1cyA9IF8sIHRoaXM7XG4gICAgfSxcbiAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uIHBvbHlnb25TdGFydCgpIHtcbiAgICAgIHRoaXMuX2xpbmUgPSAwO1xuICAgIH0sXG4gICAgcG9seWdvbkVuZDogZnVuY3Rpb24gcG9seWdvbkVuZCgpIHtcbiAgICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gICAgfSxcbiAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uIGxpbmVTdGFydCgpIHtcbiAgICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgICB9LFxuICAgIGxpbmVFbmQ6IGZ1bmN0aW9uIGxpbmVFbmQoKSB7XG4gICAgICBpZiAodGhpcy5fbGluZSA9PT0gMCkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgIHRoaXMuX3BvaW50ID0gTmFOO1xuICAgIH0sXG4gICAgcG9pbnQ6IGZ1bmN0aW9uIHBvaW50KHgsIHkpIHtcbiAgICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpO1xuICAgICAgICAgICAgdGhpcy5fcG9pbnQgPSAxO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5tb3ZlVG8oeCArIHRoaXMuX3JhZGl1cywgeSk7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LmFyYyh4LCB5LCB0aGlzLl9yYWRpdXMsIDAsIHRhdSQzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHJlc3VsdDogbm9vcCQxXG4gIH07XG5cbiAgdmFyIGxlbmd0aFN1bSQxID0gYWRkZXIoKTtcbiAgdmFyIGxlbmd0aFJpbmc7XG4gIHZhciB4MDAkMjtcbiAgdmFyIHkwMCQyO1xuICB2YXIgeDAkNDtcbiAgdmFyIHkwJDQ7XG5cbiAgdmFyIGxlbmd0aFN0cmVhbSQxID0ge1xuICAgIHBvaW50OiBub29wJDEsXG4gICAgbGluZVN0YXJ0OiBmdW5jdGlvbiBsaW5lU3RhcnQoKSB7XG4gICAgICBsZW5ndGhTdHJlYW0kMS5wb2ludCA9IGxlbmd0aFBvaW50Rmlyc3QkMTtcbiAgICB9LFxuICAgIGxpbmVFbmQ6IGZ1bmN0aW9uIGxpbmVFbmQoKSB7XG4gICAgICBpZiAobGVuZ3RoUmluZykgbGVuZ3RoUG9pbnQkMSh4MDAkMiwgeTAwJDIpO1xuICAgICAgbGVuZ3RoU3RyZWFtJDEucG9pbnQgPSBub29wJDE7XG4gICAgfSxcbiAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uIHBvbHlnb25TdGFydCgpIHtcbiAgICAgIGxlbmd0aFJpbmcgPSB0cnVlO1xuICAgIH0sXG4gICAgcG9seWdvbkVuZDogZnVuY3Rpb24gcG9seWdvbkVuZCgpIHtcbiAgICAgIGxlbmd0aFJpbmcgPSBudWxsO1xuICAgIH0sXG4gICAgcmVzdWx0OiBmdW5jdGlvbiByZXN1bHQoKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gK2xlbmd0aFN1bSQxO1xuICAgICAgbGVuZ3RoU3VtJDEucmVzZXQoKTtcbiAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGxlbmd0aFBvaW50Rmlyc3QkMSh4LCB5KSB7XG4gICAgbGVuZ3RoU3RyZWFtJDEucG9pbnQgPSBsZW5ndGhQb2ludCQxO1xuICAgIHgwMCQyID0geDAkNCA9IHgsIHkwMCQyID0geTAkNCA9IHk7XG4gIH1cblxuICBmdW5jdGlvbiBsZW5ndGhQb2ludCQxKHgsIHkpIHtcbiAgICB4MCQ0IC09IHgsIHkwJDQgLT0geTtcbiAgICBsZW5ndGhTdW0kMS5hZGQoc3FydCh4MCQ0ICogeDAkNCArIHkwJDQgKiB5MCQ0KSk7XG4gICAgeDAkNCA9IHgsIHkwJDQgPSB5O1xuICB9XG5cbiAgZnVuY3Rpb24gUGF0aFN0cmluZygpIHtcbiAgICB0aGlzLl9zdHJpbmcgPSBbXTtcbiAgfVxuXG4gIFBhdGhTdHJpbmcucHJvdG90eXBlID0ge1xuICAgIF9yYWRpdXM6IDQuNSxcbiAgICBfY2lyY2xlOiBjaXJjbGUkMSg0LjUpLFxuICAgIHBvaW50UmFkaXVzOiBmdW5jdGlvbiBwb2ludFJhZGl1cyhfKSB7XG4gICAgICBpZiAoKF8gPSArXykgIT09IHRoaXMuX3JhZGl1cykgdGhpcy5fcmFkaXVzID0gXywgdGhpcy5fY2lyY2xlID0gbnVsbDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbiBwb2x5Z29uU3RhcnQoKSB7XG4gICAgICB0aGlzLl9saW5lID0gMDtcbiAgICB9LFxuICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uIHBvbHlnb25FbmQoKSB7XG4gICAgICB0aGlzLl9saW5lID0gTmFOO1xuICAgIH0sXG4gICAgbGluZVN0YXJ0OiBmdW5jdGlvbiBsaW5lU3RhcnQoKSB7XG4gICAgICB0aGlzLl9wb2ludCA9IDA7XG4gICAgfSxcbiAgICBsaW5lRW5kOiBmdW5jdGlvbiBsaW5lRW5kKCkge1xuICAgICAgaWYgKHRoaXMuX2xpbmUgPT09IDApIHRoaXMuX3N0cmluZy5wdXNoKFwiWlwiKTtcbiAgICAgIHRoaXMuX3BvaW50ID0gTmFOO1xuICAgIH0sXG4gICAgcG9pbnQ6IGZ1bmN0aW9uIHBvaW50KHgsIHkpIHtcbiAgICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX3N0cmluZy5wdXNoKFwiTVwiLCB4LCBcIixcIiwgeSk7XG4gICAgICAgICAgICB0aGlzLl9wb2ludCA9IDE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLl9zdHJpbmcucHVzaChcIkxcIiwgeCwgXCIsXCIsIHkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jaXJjbGUgPT0gbnVsbCkgdGhpcy5fY2lyY2xlID0gY2lyY2xlJDEodGhpcy5fcmFkaXVzKTtcbiAgICAgICAgICAgIHRoaXMuX3N0cmluZy5wdXNoKFwiTVwiLCB4LCBcIixcIiwgeSwgdGhpcy5fY2lyY2xlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHJlc3VsdDogZnVuY3Rpb24gcmVzdWx0KCkge1xuICAgICAgaWYgKHRoaXMuX3N0cmluZy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX3N0cmluZy5qb2luKFwiXCIpO1xuICAgICAgICB0aGlzLl9zdHJpbmcgPSBbXTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBjaXJjbGUkMShyYWRpdXMpIHtcbiAgICByZXR1cm4gXCJtMCxcIiArIHJhZGl1cyArIFwiYVwiICsgcmFkaXVzICsgXCIsXCIgKyByYWRpdXMgKyBcIiAwIDEsMSAwLFwiICsgLTIgKiByYWRpdXMgKyBcImFcIiArIHJhZGl1cyArIFwiLFwiICsgcmFkaXVzICsgXCIgMCAxLDEgMCxcIiArIDIgKiByYWRpdXMgKyBcInpcIjtcbiAgfVxuXG4gIHZhciBpbmRleCQxID0gZnVuY3Rpb24gaW5kZXgkMShwcm9qZWN0aW9uLCBjb250ZXh0KSB7XG4gICAgdmFyIHBvaW50UmFkaXVzID0gNC41LFxuICAgICAgICBwcm9qZWN0aW9uU3RyZWFtLFxuICAgICAgICBjb250ZXh0U3RyZWFtO1xuXG4gICAgZnVuY3Rpb24gcGF0aChvYmplY3QpIHtcbiAgICAgIGlmIChvYmplY3QpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwb2ludFJhZGl1cyA9PT0gXCJmdW5jdGlvblwiKSBjb250ZXh0U3RyZWFtLnBvaW50UmFkaXVzKCtwb2ludFJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICAgICAgZ2VvU3RyZWFtKG9iamVjdCwgcHJvamVjdGlvblN0cmVhbShjb250ZXh0U3RyZWFtKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGV4dFN0cmVhbS5yZXN1bHQoKTtcbiAgICB9XG5cbiAgICBwYXRoLmFyZWEgPSBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgICBnZW9TdHJlYW0ob2JqZWN0LCBwcm9qZWN0aW9uU3RyZWFtKGFyZWFTdHJlYW0kMSkpO1xuICAgICAgcmV0dXJuIGFyZWFTdHJlYW0kMS5yZXN1bHQoKTtcbiAgICB9O1xuXG4gICAgcGF0aC5tZWFzdXJlID0gZnVuY3Rpb24gKG9iamVjdCkge1xuICAgICAgZ2VvU3RyZWFtKG9iamVjdCwgcHJvamVjdGlvblN0cmVhbShsZW5ndGhTdHJlYW0kMSkpO1xuICAgICAgcmV0dXJuIGxlbmd0aFN0cmVhbSQxLnJlc3VsdCgpO1xuICAgIH07XG5cbiAgICBwYXRoLmJvdW5kcyA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICAgIGdlb1N0cmVhbShvYmplY3QsIHByb2plY3Rpb25TdHJlYW0oYm91bmRzU3RyZWFtJDEpKTtcbiAgICAgIHJldHVybiBib3VuZHNTdHJlYW0kMS5yZXN1bHQoKTtcbiAgICB9O1xuXG4gICAgcGF0aC5jZW50cm9pZCA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICAgIGdlb1N0cmVhbShvYmplY3QsIHByb2plY3Rpb25TdHJlYW0oY2VudHJvaWRTdHJlYW0kMSkpO1xuICAgICAgcmV0dXJuIGNlbnRyb2lkU3RyZWFtJDEucmVzdWx0KCk7XG4gICAgfTtcblxuICAgIHBhdGgucHJvamVjdGlvbiA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwcm9qZWN0aW9uU3RyZWFtID0gXyA9PSBudWxsID8gKHByb2plY3Rpb24gPSBudWxsLCBpZGVudGl0eSQ0KSA6IChwcm9qZWN0aW9uID0gXykuc3RyZWFtLCBwYXRoKSA6IHByb2plY3Rpb247XG4gICAgfTtcblxuICAgIHBhdGguY29udGV4dCA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBjb250ZXh0O1xuICAgICAgY29udGV4dFN0cmVhbSA9IF8gPT0gbnVsbCA/IChjb250ZXh0ID0gbnVsbCwgbmV3IFBhdGhTdHJpbmcoKSkgOiBuZXcgUGF0aENvbnRleHQoY29udGV4dCA9IF8pO1xuICAgICAgaWYgKHR5cGVvZiBwb2ludFJhZGl1cyAhPT0gXCJmdW5jdGlvblwiKSBjb250ZXh0U3RyZWFtLnBvaW50UmFkaXVzKHBvaW50UmFkaXVzKTtcbiAgICAgIHJldHVybiBwYXRoO1xuICAgIH07XG5cbiAgICBwYXRoLnBvaW50UmFkaXVzID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHBvaW50UmFkaXVzO1xuICAgICAgcG9pbnRSYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IChjb250ZXh0U3RyZWFtLnBvaW50UmFkaXVzKCtfKSwgK18pO1xuICAgICAgcmV0dXJuIHBhdGg7XG4gICAgfTtcblxuICAgIHJldHVybiBwYXRoLnByb2plY3Rpb24ocHJvamVjdGlvbikuY29udGV4dChjb250ZXh0KTtcbiAgfTtcblxuICB2YXIgY2xpcCA9IGZ1bmN0aW9uIGNsaXAocG9pbnRWaXNpYmxlLCBjbGlwTGluZSwgaW50ZXJwb2xhdGUsIHN0YXJ0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChyb3RhdGUsIHNpbmspIHtcbiAgICAgIHZhciBsaW5lID0gY2xpcExpbmUoc2luayksXG4gICAgICAgICAgcm90YXRlZFN0YXJ0ID0gcm90YXRlLmludmVydChzdGFydFswXSwgc3RhcnRbMV0pLFxuICAgICAgICAgIHJpbmdCdWZmZXIgPSBjbGlwQnVmZmVyKCksXG4gICAgICAgICAgcmluZ1NpbmsgPSBjbGlwTGluZShyaW5nQnVmZmVyKSxcbiAgICAgICAgICBwb2x5Z29uU3RhcnRlZCA9IGZhbHNlLFxuICAgICAgICAgIHBvbHlnb24sXG4gICAgICAgICAgc2VnbWVudHMsXG4gICAgICAgICAgcmluZztcblxuICAgICAgdmFyIGNsaXAgPSB7XG4gICAgICAgIHBvaW50OiBwb2ludCxcbiAgICAgICAgbGluZVN0YXJ0OiBsaW5lU3RhcnQsXG4gICAgICAgIGxpbmVFbmQ6IGxpbmVFbmQsXG4gICAgICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24gcG9seWdvblN0YXJ0KCkge1xuICAgICAgICAgIGNsaXAucG9pbnQgPSBwb2ludFJpbmc7XG4gICAgICAgICAgY2xpcC5saW5lU3RhcnQgPSByaW5nU3RhcnQ7XG4gICAgICAgICAgY2xpcC5saW5lRW5kID0gcmluZ0VuZDtcbiAgICAgICAgICBzZWdtZW50cyA9IFtdO1xuICAgICAgICAgIHBvbHlnb24gPSBbXTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9seWdvbkVuZDogZnVuY3Rpb24gcG9seWdvbkVuZCgpIHtcbiAgICAgICAgICBjbGlwLnBvaW50ID0gcG9pbnQ7XG4gICAgICAgICAgY2xpcC5saW5lU3RhcnQgPSBsaW5lU3RhcnQ7XG4gICAgICAgICAgY2xpcC5saW5lRW5kID0gbGluZUVuZDtcbiAgICAgICAgICBzZWdtZW50cyA9IG1lcmdlKHNlZ21lbnRzKTtcbiAgICAgICAgICB2YXIgc3RhcnRJbnNpZGUgPSBwb2x5Z29uQ29udGFpbnMocG9seWdvbiwgcm90YXRlZFN0YXJ0KTtcbiAgICAgICAgICBpZiAoc2VnbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoIXBvbHlnb25TdGFydGVkKSBzaW5rLnBvbHlnb25TdGFydCgpLCBwb2x5Z29uU3RhcnRlZCA9IHRydWU7XG4gICAgICAgICAgICBjbGlwUG9seWdvbihzZWdtZW50cywgY29tcGFyZUludGVyc2VjdGlvbiwgc3RhcnRJbnNpZGUsIGludGVycG9sYXRlLCBzaW5rKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHN0YXJ0SW5zaWRlKSB7XG4gICAgICAgICAgICBpZiAoIXBvbHlnb25TdGFydGVkKSBzaW5rLnBvbHlnb25TdGFydCgpLCBwb2x5Z29uU3RhcnRlZCA9IHRydWU7XG4gICAgICAgICAgICBzaW5rLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgaW50ZXJwb2xhdGUobnVsbCwgbnVsbCwgMSwgc2luayk7XG4gICAgICAgICAgICBzaW5rLmxpbmVFbmQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHBvbHlnb25TdGFydGVkKSBzaW5rLnBvbHlnb25FbmQoKSwgcG9seWdvblN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgICAgICBzZWdtZW50cyA9IHBvbHlnb24gPSBudWxsO1xuICAgICAgICB9LFxuICAgICAgICBzcGhlcmU6IGZ1bmN0aW9uIHNwaGVyZSgpIHtcbiAgICAgICAgICBzaW5rLnBvbHlnb25TdGFydCgpO1xuICAgICAgICAgIHNpbmsubGluZVN0YXJ0KCk7XG4gICAgICAgICAgaW50ZXJwb2xhdGUobnVsbCwgbnVsbCwgMSwgc2luayk7XG4gICAgICAgICAgc2luay5saW5lRW5kKCk7XG4gICAgICAgICAgc2luay5wb2x5Z29uRW5kKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGZ1bmN0aW9uIHBvaW50KGxhbWJkYSwgcGhpKSB7XG4gICAgICAgIHZhciBwb2ludCA9IHJvdGF0ZShsYW1iZGEsIHBoaSk7XG4gICAgICAgIGlmIChwb2ludFZpc2libGUobGFtYmRhID0gcG9pbnRbMF0sIHBoaSA9IHBvaW50WzFdKSkgc2luay5wb2ludChsYW1iZGEsIHBoaSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHBvaW50TGluZShsYW1iZGEsIHBoaSkge1xuICAgICAgICB2YXIgcG9pbnQgPSByb3RhdGUobGFtYmRhLCBwaGkpO1xuICAgICAgICBsaW5lLnBvaW50KHBvaW50WzBdLCBwb2ludFsxXSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGxpbmVTdGFydCgpIHtcbiAgICAgICAgY2xpcC5wb2ludCA9IHBvaW50TGluZTtcbiAgICAgICAgbGluZS5saW5lU3RhcnQoKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbGluZUVuZCgpIHtcbiAgICAgICAgY2xpcC5wb2ludCA9IHBvaW50O1xuICAgICAgICBsaW5lLmxpbmVFbmQoKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcG9pbnRSaW5nKGxhbWJkYSwgcGhpKSB7XG4gICAgICAgIHJpbmcucHVzaChbbGFtYmRhLCBwaGldKTtcbiAgICAgICAgdmFyIHBvaW50ID0gcm90YXRlKGxhbWJkYSwgcGhpKTtcbiAgICAgICAgcmluZ1NpbmsucG9pbnQocG9pbnRbMF0sIHBvaW50WzFdKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcmluZ1N0YXJ0KCkge1xuICAgICAgICByaW5nU2luay5saW5lU3RhcnQoKTtcbiAgICAgICAgcmluZyA9IFtdO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByaW5nRW5kKCkge1xuICAgICAgICBwb2ludFJpbmcocmluZ1swXVswXSwgcmluZ1swXVsxXSk7XG4gICAgICAgIHJpbmdTaW5rLmxpbmVFbmQoKTtcblxuICAgICAgICB2YXIgY2xlYW4gPSByaW5nU2luay5jbGVhbigpLFxuICAgICAgICAgICAgcmluZ1NlZ21lbnRzID0gcmluZ0J1ZmZlci5yZXN1bHQoKSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBuID0gcmluZ1NlZ21lbnRzLmxlbmd0aCxcbiAgICAgICAgICAgIG0sXG4gICAgICAgICAgICBzZWdtZW50LFxuICAgICAgICAgICAgcG9pbnQ7XG5cbiAgICAgICAgcmluZy5wb3AoKTtcbiAgICAgICAgcG9seWdvbi5wdXNoKHJpbmcpO1xuICAgICAgICByaW5nID0gbnVsbDtcblxuICAgICAgICBpZiAoIW4pIHJldHVybjtcblxuICAgICAgICAvLyBObyBpbnRlcnNlY3Rpb25zLlxuICAgICAgICBpZiAoY2xlYW4gJiAxKSB7XG4gICAgICAgICAgc2VnbWVudCA9IHJpbmdTZWdtZW50c1swXTtcbiAgICAgICAgICBpZiAoKG0gPSBzZWdtZW50Lmxlbmd0aCAtIDEpID4gMCkge1xuICAgICAgICAgICAgaWYgKCFwb2x5Z29uU3RhcnRlZCkgc2luay5wb2x5Z29uU3RhcnQoKSwgcG9seWdvblN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgc2luay5saW5lU3RhcnQoKTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBtOyArK2kpIHtcbiAgICAgICAgICAgICAgc2luay5wb2ludCgocG9pbnQgPSBzZWdtZW50W2ldKVswXSwgcG9pbnRbMV0pO1xuICAgICAgICAgICAgfXNpbmsubGluZUVuZCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZWpvaW4gY29ubmVjdGVkIHNlZ21lbnRzLlxuICAgICAgICAvLyBUT0RPIHJldXNlIHJpbmdCdWZmZXIucmVqb2luKCk/XG4gICAgICAgIGlmIChuID4gMSAmJiBjbGVhbiAmIDIpIHJpbmdTZWdtZW50cy5wdXNoKHJpbmdTZWdtZW50cy5wb3AoKS5jb25jYXQocmluZ1NlZ21lbnRzLnNoaWZ0KCkpKTtcblxuICAgICAgICBzZWdtZW50cy5wdXNoKHJpbmdTZWdtZW50cy5maWx0ZXIodmFsaWRTZWdtZW50KSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjbGlwO1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsaWRTZWdtZW50KHNlZ21lbnQpIHtcbiAgICByZXR1cm4gc2VnbWVudC5sZW5ndGggPiAxO1xuICB9XG5cbiAgLy8gSW50ZXJzZWN0aW9ucyBhcmUgc29ydGVkIGFsb25nIHRoZSBjbGlwIGVkZ2UuIEZvciBib3RoIGFudGltZXJpZGlhbiBjdXR0aW5nXG4gIC8vIGFuZCBjaXJjbGUgY2xpcHBpbmcsIHRoZSBzYW1lIGNvbXBhcmlzb24gaXMgdXNlZC5cbiAgZnVuY3Rpb24gY29tcGFyZUludGVyc2VjdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuICgoYSA9IGEueClbMF0gPCAwID8gYVsxXSAtIGhhbGZQaSQyIC0gZXBzaWxvbiQyIDogaGFsZlBpJDIgLSBhWzFdKSAtICgoYiA9IGIueClbMF0gPCAwID8gYlsxXSAtIGhhbGZQaSQyIC0gZXBzaWxvbiQyIDogaGFsZlBpJDIgLSBiWzFdKTtcbiAgfVxuXG4gIHZhciBjbGlwQW50aW1lcmlkaWFuID0gY2xpcChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sIGNsaXBBbnRpbWVyaWRpYW5MaW5lLCBjbGlwQW50aW1lcmlkaWFuSW50ZXJwb2xhdGUsIFstcGkkMywgLWhhbGZQaSQyXSk7XG5cbiAgLy8gVGFrZXMgYSBsaW5lIGFuZCBjdXRzIGludG8gdmlzaWJsZSBzZWdtZW50cy4gUmV0dXJuIHZhbHVlczogMCAtIHRoZXJlIHdlcmVcbiAgLy8gaW50ZXJzZWN0aW9ucyBvciB0aGUgbGluZSB3YXMgZW1wdHk7IDEgLSBubyBpbnRlcnNlY3Rpb25zOyAyIC0gdGhlcmUgd2VyZVxuICAvLyBpbnRlcnNlY3Rpb25zLCBhbmQgdGhlIGZpcnN0IGFuZCBsYXN0IHNlZ21lbnRzIHNob3VsZCBiZSByZWpvaW5lZC5cbiAgZnVuY3Rpb24gY2xpcEFudGltZXJpZGlhbkxpbmUoc3RyZWFtKSB7XG4gICAgdmFyIGxhbWJkYTAgPSBOYU4sXG4gICAgICAgIHBoaTAgPSBOYU4sXG4gICAgICAgIHNpZ24wID0gTmFOLFxuICAgICAgICBfY2xlYW47IC8vIG5vIGludGVyc2VjdGlvbnNcblxuICAgIHJldHVybiB7XG4gICAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uIGxpbmVTdGFydCgpIHtcbiAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICBfY2xlYW4gPSAxO1xuICAgICAgfSxcbiAgICAgIHBvaW50OiBmdW5jdGlvbiBwb2ludChsYW1iZGExLCBwaGkxKSB7XG4gICAgICAgIHZhciBzaWduMSA9IGxhbWJkYTEgPiAwID8gcGkkMyA6IC1waSQzLFxuICAgICAgICAgICAgZGVsdGEgPSBhYnMobGFtYmRhMSAtIGxhbWJkYTApO1xuICAgICAgICBpZiAoYWJzKGRlbHRhIC0gcGkkMykgPCBlcHNpbG9uJDIpIHtcbiAgICAgICAgICAvLyBsaW5lIGNyb3NzZXMgYSBwb2xlXG4gICAgICAgICAgc3RyZWFtLnBvaW50KGxhbWJkYTAsIHBoaTAgPSAocGhpMCArIHBoaTEpIC8gMiA+IDAgPyBoYWxmUGkkMiA6IC1oYWxmUGkkMik7XG4gICAgICAgICAgc3RyZWFtLnBvaW50KHNpZ24wLCBwaGkwKTtcbiAgICAgICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgICBzdHJlYW0ucG9pbnQoc2lnbjEsIHBoaTApO1xuICAgICAgICAgIHN0cmVhbS5wb2ludChsYW1iZGExLCBwaGkwKTtcbiAgICAgICAgICBfY2xlYW4gPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKHNpZ24wICE9PSBzaWduMSAmJiBkZWx0YSA+PSBwaSQzKSB7XG4gICAgICAgICAgLy8gbGluZSBjcm9zc2VzIGFudGltZXJpZGlhblxuICAgICAgICAgIGlmIChhYnMobGFtYmRhMCAtIHNpZ24wKSA8IGVwc2lsb24kMikgbGFtYmRhMCAtPSBzaWduMCAqIGVwc2lsb24kMjsgLy8gaGFuZGxlIGRlZ2VuZXJhY2llc1xuICAgICAgICAgIGlmIChhYnMobGFtYmRhMSAtIHNpZ24xKSA8IGVwc2lsb24kMikgbGFtYmRhMSAtPSBzaWduMSAqIGVwc2lsb24kMjtcbiAgICAgICAgICBwaGkwID0gY2xpcEFudGltZXJpZGlhbkludGVyc2VjdChsYW1iZGEwLCBwaGkwLCBsYW1iZGExLCBwaGkxKTtcbiAgICAgICAgICBzdHJlYW0ucG9pbnQoc2lnbjAsIHBoaTApO1xuICAgICAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgIHN0cmVhbS5wb2ludChzaWduMSwgcGhpMCk7XG4gICAgICAgICAgX2NsZWFuID0gMDtcbiAgICAgICAgfVxuICAgICAgICBzdHJlYW0ucG9pbnQobGFtYmRhMCA9IGxhbWJkYTEsIHBoaTAgPSBwaGkxKTtcbiAgICAgICAgc2lnbjAgPSBzaWduMTtcbiAgICAgIH0sXG4gICAgICBsaW5lRW5kOiBmdW5jdGlvbiBsaW5lRW5kKCkge1xuICAgICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICBsYW1iZGEwID0gcGhpMCA9IE5hTjtcbiAgICAgIH0sXG4gICAgICBjbGVhbjogZnVuY3Rpb24gY2xlYW4oKSB7XG4gICAgICAgIHJldHVybiAyIC0gX2NsZWFuOyAvLyBpZiBpbnRlcnNlY3Rpb25zLCByZWpvaW4gZmlyc3QgYW5kIGxhc3Qgc2VnbWVudHNcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY2xpcEFudGltZXJpZGlhbkludGVyc2VjdChsYW1iZGEwLCBwaGkwLCBsYW1iZGExLCBwaGkxKSB7XG4gICAgdmFyIGNvc1BoaTAsXG4gICAgICAgIGNvc1BoaTEsXG4gICAgICAgIHNpbkxhbWJkYTBMYW1iZGExID0gc2luJDEobGFtYmRhMCAtIGxhbWJkYTEpO1xuICAgIHJldHVybiBhYnMoc2luTGFtYmRhMExhbWJkYTEpID4gZXBzaWxvbiQyID8gYXRhbigoc2luJDEocGhpMCkgKiAoY29zUGhpMSA9IGNvcyQxKHBoaTEpKSAqIHNpbiQxKGxhbWJkYTEpIC0gc2luJDEocGhpMSkgKiAoY29zUGhpMCA9IGNvcyQxKHBoaTApKSAqIHNpbiQxKGxhbWJkYTApKSAvIChjb3NQaGkwICogY29zUGhpMSAqIHNpbkxhbWJkYTBMYW1iZGExKSkgOiAocGhpMCArIHBoaTEpIC8gMjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsaXBBbnRpbWVyaWRpYW5JbnRlcnBvbGF0ZShmcm9tLCB0bywgZGlyZWN0aW9uLCBzdHJlYW0pIHtcbiAgICB2YXIgcGhpO1xuICAgIGlmIChmcm9tID09IG51bGwpIHtcbiAgICAgIHBoaSA9IGRpcmVjdGlvbiAqIGhhbGZQaSQyO1xuICAgICAgc3RyZWFtLnBvaW50KC1waSQzLCBwaGkpO1xuICAgICAgc3RyZWFtLnBvaW50KDAsIHBoaSk7XG4gICAgICBzdHJlYW0ucG9pbnQocGkkMywgcGhpKTtcbiAgICAgIHN0cmVhbS5wb2ludChwaSQzLCAwKTtcbiAgICAgIHN0cmVhbS5wb2ludChwaSQzLCAtcGhpKTtcbiAgICAgIHN0cmVhbS5wb2ludCgwLCAtcGhpKTtcbiAgICAgIHN0cmVhbS5wb2ludCgtcGkkMywgLXBoaSk7XG4gICAgICBzdHJlYW0ucG9pbnQoLXBpJDMsIDApO1xuICAgICAgc3RyZWFtLnBvaW50KC1waSQzLCBwaGkpO1xuICAgIH0gZWxzZSBpZiAoYWJzKGZyb21bMF0gLSB0b1swXSkgPiBlcHNpbG9uJDIpIHtcbiAgICAgIHZhciBsYW1iZGEgPSBmcm9tWzBdIDwgdG9bMF0gPyBwaSQzIDogLXBpJDM7XG4gICAgICBwaGkgPSBkaXJlY3Rpb24gKiBsYW1iZGEgLyAyO1xuICAgICAgc3RyZWFtLnBvaW50KC1sYW1iZGEsIHBoaSk7XG4gICAgICBzdHJlYW0ucG9pbnQoMCwgcGhpKTtcbiAgICAgIHN0cmVhbS5wb2ludChsYW1iZGEsIHBoaSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0cmVhbS5wb2ludCh0b1swXSwgdG9bMV0pO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjbGlwQ2lyY2xlID0gZnVuY3Rpb24gY2xpcENpcmNsZShyYWRpdXMsIGRlbHRhKSB7XG4gICAgdmFyIGNyID0gY29zJDEocmFkaXVzKSxcbiAgICAgICAgc21hbGxSYWRpdXMgPSBjciA+IDAsXG4gICAgICAgIG5vdEhlbWlzcGhlcmUgPSBhYnMoY3IpID4gZXBzaWxvbiQyOyAvLyBUT0RPIG9wdGltaXNlIGZvciB0aGlzIGNvbW1vbiBjYXNlXG5cbiAgICBmdW5jdGlvbiBpbnRlcnBvbGF0ZShmcm9tLCB0bywgZGlyZWN0aW9uLCBzdHJlYW0pIHtcbiAgICAgIGNpcmNsZVN0cmVhbShzdHJlYW0sIHJhZGl1cywgZGVsdGEsIGRpcmVjdGlvbiwgZnJvbSwgdG8pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZpc2libGUobGFtYmRhLCBwaGkpIHtcbiAgICAgIHJldHVybiBjb3MkMShsYW1iZGEpICogY29zJDEocGhpKSA+IGNyO1xuICAgIH1cblxuICAgIC8vIFRha2VzIGEgbGluZSBhbmQgY3V0cyBpbnRvIHZpc2libGUgc2VnbWVudHMuIFJldHVybiB2YWx1ZXMgdXNlZCBmb3IgcG9seWdvblxuICAgIC8vIGNsaXBwaW5nOiAwIC0gdGhlcmUgd2VyZSBpbnRlcnNlY3Rpb25zIG9yIHRoZSBsaW5lIHdhcyBlbXB0eTsgMSAtIG5vXG4gICAgLy8gaW50ZXJzZWN0aW9ucyAyIC0gdGhlcmUgd2VyZSBpbnRlcnNlY3Rpb25zLCBhbmQgdGhlIGZpcnN0IGFuZCBsYXN0IHNlZ21lbnRzXG4gICAgLy8gc2hvdWxkIGJlIHJlam9pbmVkLlxuICAgIGZ1bmN0aW9uIGNsaXBMaW5lKHN0cmVhbSkge1xuICAgICAgdmFyIHBvaW50MCwgLy8gcHJldmlvdXMgcG9pbnRcbiAgICAgIGMwLCAvLyBjb2RlIGZvciBwcmV2aW91cyBwb2ludFxuICAgICAgdjAsIC8vIHZpc2liaWxpdHkgb2YgcHJldmlvdXMgcG9pbnRcbiAgICAgIHYwMCwgLy8gdmlzaWJpbGl0eSBvZiBmaXJzdCBwb2ludFxuICAgICAgX2NsZWFuMjsgLy8gbm8gaW50ZXJzZWN0aW9uc1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGluZVN0YXJ0OiBmdW5jdGlvbiBsaW5lU3RhcnQoKSB7XG4gICAgICAgICAgdjAwID0gdjAgPSBmYWxzZTtcbiAgICAgICAgICBfY2xlYW4yID0gMTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9pbnQ6IGZ1bmN0aW9uIHBvaW50KGxhbWJkYSwgcGhpKSB7XG4gICAgICAgICAgdmFyIHBvaW50MSA9IFtsYW1iZGEsIHBoaV0sXG4gICAgICAgICAgICAgIHBvaW50MixcbiAgICAgICAgICAgICAgdiA9IHZpc2libGUobGFtYmRhLCBwaGkpLFxuICAgICAgICAgICAgICBjID0gc21hbGxSYWRpdXMgPyB2ID8gMCA6IGNvZGUobGFtYmRhLCBwaGkpIDogdiA/IGNvZGUobGFtYmRhICsgKGxhbWJkYSA8IDAgPyBwaSQzIDogLXBpJDMpLCBwaGkpIDogMDtcbiAgICAgICAgICBpZiAoIXBvaW50MCAmJiAodjAwID0gdjAgPSB2KSkgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgIC8vIEhhbmRsZSBkZWdlbmVyYWNpZXMuXG4gICAgICAgICAgLy8gVE9ETyBpZ25vcmUgaWYgbm90IGNsaXBwaW5nIHBvbHlnb25zLlxuICAgICAgICAgIGlmICh2ICE9PSB2MCkge1xuICAgICAgICAgICAgcG9pbnQyID0gaW50ZXJzZWN0KHBvaW50MCwgcG9pbnQxKTtcbiAgICAgICAgICAgIGlmICghcG9pbnQyIHx8IHBvaW50RXF1YWwocG9pbnQwLCBwb2ludDIpIHx8IHBvaW50RXF1YWwocG9pbnQxLCBwb2ludDIpKSB7XG4gICAgICAgICAgICAgIHBvaW50MVswXSArPSBlcHNpbG9uJDI7XG4gICAgICAgICAgICAgIHBvaW50MVsxXSArPSBlcHNpbG9uJDI7XG4gICAgICAgICAgICAgIHYgPSB2aXNpYmxlKHBvaW50MVswXSwgcG9pbnQxWzFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHYgIT09IHYwKSB7XG4gICAgICAgICAgICBfY2xlYW4yID0gMDtcbiAgICAgICAgICAgIGlmICh2KSB7XG4gICAgICAgICAgICAgIC8vIG91dHNpZGUgZ29pbmcgaW5cbiAgICAgICAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgICBwb2ludDIgPSBpbnRlcnNlY3QocG9pbnQxLCBwb2ludDApO1xuICAgICAgICAgICAgICBzdHJlYW0ucG9pbnQocG9pbnQyWzBdLCBwb2ludDJbMV0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gaW5zaWRlIGdvaW5nIG91dFxuICAgICAgICAgICAgICBwb2ludDIgPSBpbnRlcnNlY3QocG9pbnQwLCBwb2ludDEpO1xuICAgICAgICAgICAgICBzdHJlYW0ucG9pbnQocG9pbnQyWzBdLCBwb2ludDJbMV0pO1xuICAgICAgICAgICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcG9pbnQwID0gcG9pbnQyO1xuICAgICAgICAgIH0gZWxzZSBpZiAobm90SGVtaXNwaGVyZSAmJiBwb2ludDAgJiYgc21hbGxSYWRpdXMgXiB2KSB7XG4gICAgICAgICAgICB2YXIgdDtcbiAgICAgICAgICAgIC8vIElmIHRoZSBjb2RlcyBmb3IgdHdvIHBvaW50cyBhcmUgZGlmZmVyZW50LCBvciBhcmUgYm90aCB6ZXJvLFxuICAgICAgICAgICAgLy8gYW5kIHRoZXJlIHRoaXMgc2VnbWVudCBpbnRlcnNlY3RzIHdpdGggdGhlIHNtYWxsIGNpcmNsZS5cbiAgICAgICAgICAgIGlmICghKGMgJiBjMCkgJiYgKHQgPSBpbnRlcnNlY3QocG9pbnQxLCBwb2ludDAsIHRydWUpKSkge1xuICAgICAgICAgICAgICBfY2xlYW4yID0gMDtcbiAgICAgICAgICAgICAgaWYgKHNtYWxsUmFkaXVzKSB7XG4gICAgICAgICAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgICAgIHN0cmVhbS5wb2ludCh0WzBdWzBdLCB0WzBdWzFdKTtcbiAgICAgICAgICAgICAgICBzdHJlYW0ucG9pbnQodFsxXVswXSwgdFsxXVsxXSk7XG4gICAgICAgICAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdHJlYW0ucG9pbnQodFsxXVswXSwgdFsxXVsxXSk7XG4gICAgICAgICAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgICAgICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICAgICAgc3RyZWFtLnBvaW50KHRbMF1bMF0sIHRbMF1bMV0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh2ICYmICghcG9pbnQwIHx8ICFwb2ludEVxdWFsKHBvaW50MCwgcG9pbnQxKSkpIHtcbiAgICAgICAgICAgIHN0cmVhbS5wb2ludChwb2ludDFbMF0sIHBvaW50MVsxXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBvaW50MCA9IHBvaW50MSwgdjAgPSB2LCBjMCA9IGM7XG4gICAgICAgIH0sXG4gICAgICAgIGxpbmVFbmQ6IGZ1bmN0aW9uIGxpbmVFbmQoKSB7XG4gICAgICAgICAgaWYgKHYwKSBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICAgIHBvaW50MCA9IG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIFJlam9pbiBmaXJzdCBhbmQgbGFzdCBzZWdtZW50cyBpZiB0aGVyZSB3ZXJlIGludGVyc2VjdGlvbnMgYW5kIHRoZSBmaXJzdFxuICAgICAgICAvLyBhbmQgbGFzdCBwb2ludHMgd2VyZSB2aXNpYmxlLlxuICAgICAgICBjbGVhbjogZnVuY3Rpb24gY2xlYW4oKSB7XG4gICAgICAgICAgcmV0dXJuIF9jbGVhbjIgfCAodjAwICYmIHYwKSA8PCAxO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIEludGVyc2VjdHMgdGhlIGdyZWF0IGNpcmNsZSBiZXR3ZWVuIGEgYW5kIGIgd2l0aCB0aGUgY2xpcCBjaXJjbGUuXG4gICAgZnVuY3Rpb24gaW50ZXJzZWN0KGEsIGIsIHR3bykge1xuICAgICAgdmFyIHBhID0gY2FydGVzaWFuKGEpLFxuICAgICAgICAgIHBiID0gY2FydGVzaWFuKGIpO1xuXG4gICAgICAvLyBXZSBoYXZlIHR3byBwbGFuZXMsIG4xLnAgPSBkMSBhbmQgbjIucCA9IGQyLlxuICAgICAgLy8gRmluZCBpbnRlcnNlY3Rpb24gbGluZSBwKHQpID0gYzEgbjEgKyBjMiBuMiArIHQgKG4xIOKoryBuMikuXG4gICAgICB2YXIgbjEgPSBbMSwgMCwgMF0sXG4gICAgICAgICAgLy8gbm9ybWFsXG4gICAgICBuMiA9IGNhcnRlc2lhbkNyb3NzKHBhLCBwYiksXG4gICAgICAgICAgbjJuMiA9IGNhcnRlc2lhbkRvdChuMiwgbjIpLFxuICAgICAgICAgIG4xbjIgPSBuMlswXSxcbiAgICAgICAgICAvLyBjYXJ0ZXNpYW5Eb3QobjEsIG4yKSxcbiAgICAgIGRldGVybWluYW50ID0gbjJuMiAtIG4xbjIgKiBuMW4yO1xuXG4gICAgICAvLyBUd28gcG9sYXIgcG9pbnRzLlxuICAgICAgaWYgKCFkZXRlcm1pbmFudCkgcmV0dXJuICF0d28gJiYgYTtcblxuICAgICAgdmFyIGMxID0gY3IgKiBuMm4yIC8gZGV0ZXJtaW5hbnQsXG4gICAgICAgICAgYzIgPSAtY3IgKiBuMW4yIC8gZGV0ZXJtaW5hbnQsXG4gICAgICAgICAgbjF4bjIgPSBjYXJ0ZXNpYW5Dcm9zcyhuMSwgbjIpLFxuICAgICAgICAgIEEgPSBjYXJ0ZXNpYW5TY2FsZShuMSwgYzEpLFxuICAgICAgICAgIEIgPSBjYXJ0ZXNpYW5TY2FsZShuMiwgYzIpO1xuICAgICAgY2FydGVzaWFuQWRkSW5QbGFjZShBLCBCKTtcblxuICAgICAgLy8gU29sdmUgfHAodCl8XjIgPSAxLlxuICAgICAgdmFyIHUgPSBuMXhuMixcbiAgICAgICAgICB3ID0gY2FydGVzaWFuRG90KEEsIHUpLFxuICAgICAgICAgIHV1ID0gY2FydGVzaWFuRG90KHUsIHUpLFxuICAgICAgICAgIHQyID0gdyAqIHcgLSB1dSAqIChjYXJ0ZXNpYW5Eb3QoQSwgQSkgLSAxKTtcblxuICAgICAgaWYgKHQyIDwgMCkgcmV0dXJuO1xuXG4gICAgICB2YXIgdCA9IHNxcnQodDIpLFxuICAgICAgICAgIHEgPSBjYXJ0ZXNpYW5TY2FsZSh1LCAoLXcgLSB0KSAvIHV1KTtcbiAgICAgIGNhcnRlc2lhbkFkZEluUGxhY2UocSwgQSk7XG4gICAgICBxID0gc3BoZXJpY2FsKHEpO1xuXG4gICAgICBpZiAoIXR3bykgcmV0dXJuIHE7XG5cbiAgICAgIC8vIFR3byBpbnRlcnNlY3Rpb24gcG9pbnRzLlxuICAgICAgdmFyIGxhbWJkYTAgPSBhWzBdLFxuICAgICAgICAgIGxhbWJkYTEgPSBiWzBdLFxuICAgICAgICAgIHBoaTAgPSBhWzFdLFxuICAgICAgICAgIHBoaTEgPSBiWzFdLFxuICAgICAgICAgIHo7XG5cbiAgICAgIGlmIChsYW1iZGExIDwgbGFtYmRhMCkgeiA9IGxhbWJkYTAsIGxhbWJkYTAgPSBsYW1iZGExLCBsYW1iZGExID0gejtcblxuICAgICAgdmFyIGRlbHRhID0gbGFtYmRhMSAtIGxhbWJkYTAsXG4gICAgICAgICAgcG9sYXIgPSBhYnMoZGVsdGEgLSBwaSQzKSA8IGVwc2lsb24kMixcbiAgICAgICAgICBtZXJpZGlhbiA9IHBvbGFyIHx8IGRlbHRhIDwgZXBzaWxvbiQyO1xuXG4gICAgICBpZiAoIXBvbGFyICYmIHBoaTEgPCBwaGkwKSB6ID0gcGhpMCwgcGhpMCA9IHBoaTEsIHBoaTEgPSB6O1xuXG4gICAgICAvLyBDaGVjayB0aGF0IHRoZSBmaXJzdCBwb2ludCBpcyBiZXR3ZWVuIGEgYW5kIGIuXG4gICAgICBpZiAobWVyaWRpYW4gPyBwb2xhciA/IHBoaTAgKyBwaGkxID4gMCBeIHFbMV0gPCAoYWJzKHFbMF0gLSBsYW1iZGEwKSA8IGVwc2lsb24kMiA/IHBoaTAgOiBwaGkxKSA6IHBoaTAgPD0gcVsxXSAmJiBxWzFdIDw9IHBoaTEgOiBkZWx0YSA+IHBpJDMgXiAobGFtYmRhMCA8PSBxWzBdICYmIHFbMF0gPD0gbGFtYmRhMSkpIHtcbiAgICAgICAgdmFyIHExID0gY2FydGVzaWFuU2NhbGUodSwgKC13ICsgdCkgLyB1dSk7XG4gICAgICAgIGNhcnRlc2lhbkFkZEluUGxhY2UocTEsIEEpO1xuICAgICAgICByZXR1cm4gW3EsIHNwaGVyaWNhbChxMSldO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEdlbmVyYXRlcyBhIDQtYml0IHZlY3RvciByZXByZXNlbnRpbmcgdGhlIGxvY2F0aW9uIG9mIGEgcG9pbnQgcmVsYXRpdmUgdG9cbiAgICAvLyB0aGUgc21hbGwgY2lyY2xlJ3MgYm91bmRpbmcgYm94LlxuICAgIGZ1bmN0aW9uIGNvZGUobGFtYmRhLCBwaGkpIHtcbiAgICAgIHZhciByID0gc21hbGxSYWRpdXMgPyByYWRpdXMgOiBwaSQzIC0gcmFkaXVzLFxuICAgICAgICAgIGNvZGUgPSAwO1xuICAgICAgaWYgKGxhbWJkYSA8IC1yKSBjb2RlIHw9IDE7IC8vIGxlZnRcbiAgICAgIGVsc2UgaWYgKGxhbWJkYSA+IHIpIGNvZGUgfD0gMjsgLy8gcmlnaHRcbiAgICAgIGlmIChwaGkgPCAtcikgY29kZSB8PSA0OyAvLyBiZWxvd1xuICAgICAgZWxzZSBpZiAocGhpID4gcikgY29kZSB8PSA4OyAvLyBhYm92ZVxuICAgICAgcmV0dXJuIGNvZGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsaXAodmlzaWJsZSwgY2xpcExpbmUsIGludGVycG9sYXRlLCBzbWFsbFJhZGl1cyA/IFswLCAtcmFkaXVzXSA6IFstcGkkMywgcmFkaXVzIC0gcGkkM10pO1xuICB9O1xuXG4gIHZhciB0cmFuc2Zvcm0gPSBmdW5jdGlvbiB0cmFuc2Zvcm0obWV0aG9kcykge1xuICAgIHJldHVybiB7XG4gICAgICBzdHJlYW06IHRyYW5zZm9ybWVyKG1ldGhvZHMpXG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB0cmFuc2Zvcm1lcihtZXRob2RzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzdHJlYW0pIHtcbiAgICAgIHZhciBzID0gbmV3IFRyYW5zZm9ybVN0cmVhbSgpO1xuICAgICAgZm9yICh2YXIga2V5IGluIG1ldGhvZHMpIHtcbiAgICAgICAgc1trZXldID0gbWV0aG9kc1trZXldO1xuICAgICAgfXMuc3RyZWFtID0gc3RyZWFtO1xuICAgICAgcmV0dXJuIHM7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIFRyYW5zZm9ybVN0cmVhbSgpIHt9XG5cbiAgVHJhbnNmb3JtU3RyZWFtLnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogVHJhbnNmb3JtU3RyZWFtLFxuICAgIHBvaW50OiBmdW5jdGlvbiBwb2ludCh4LCB5KSB7XG4gICAgICB0aGlzLnN0cmVhbS5wb2ludCh4LCB5KTtcbiAgICB9LFxuICAgIHNwaGVyZTogZnVuY3Rpb24gc3BoZXJlKCkge1xuICAgICAgdGhpcy5zdHJlYW0uc3BoZXJlKCk7XG4gICAgfSxcbiAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uIGxpbmVTdGFydCgpIHtcbiAgICAgIHRoaXMuc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgIH0sXG4gICAgbGluZUVuZDogZnVuY3Rpb24gbGluZUVuZCgpIHtcbiAgICAgIHRoaXMuc3RyZWFtLmxpbmVFbmQoKTtcbiAgICB9LFxuICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24gcG9seWdvblN0YXJ0KCkge1xuICAgICAgdGhpcy5zdHJlYW0ucG9seWdvblN0YXJ0KCk7XG4gICAgfSxcbiAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbiBwb2x5Z29uRW5kKCkge1xuICAgICAgdGhpcy5zdHJlYW0ucG9seWdvbkVuZCgpO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBfZml0RXh0ZW50KHByb2plY3Rpb24sIGV4dGVudCwgb2JqZWN0KSB7XG4gICAgdmFyIHcgPSBleHRlbnRbMV1bMF0gLSBleHRlbnRbMF1bMF0sXG4gICAgICAgIGggPSBleHRlbnRbMV1bMV0gLSBleHRlbnRbMF1bMV0sXG4gICAgICAgIGNsaXAgPSBwcm9qZWN0aW9uLmNsaXBFeHRlbnQgJiYgcHJvamVjdGlvbi5jbGlwRXh0ZW50KCk7XG5cbiAgICBwcm9qZWN0aW9uLnNjYWxlKDE1MCkudHJhbnNsYXRlKFswLCAwXSk7XG5cbiAgICBpZiAoY2xpcCAhPSBudWxsKSBwcm9qZWN0aW9uLmNsaXBFeHRlbnQobnVsbCk7XG5cbiAgICBnZW9TdHJlYW0ob2JqZWN0LCBwcm9qZWN0aW9uLnN0cmVhbShib3VuZHNTdHJlYW0kMSkpO1xuXG4gICAgdmFyIGIgPSBib3VuZHNTdHJlYW0kMS5yZXN1bHQoKSxcbiAgICAgICAgayA9IE1hdGgubWluKHcgLyAoYlsxXVswXSAtIGJbMF1bMF0pLCBoIC8gKGJbMV1bMV0gLSBiWzBdWzFdKSksXG4gICAgICAgIHggPSArZXh0ZW50WzBdWzBdICsgKHcgLSBrICogKGJbMV1bMF0gKyBiWzBdWzBdKSkgLyAyLFxuICAgICAgICB5ID0gK2V4dGVudFswXVsxXSArIChoIC0gayAqIChiWzFdWzFdICsgYlswXVsxXSkpIC8gMjtcblxuICAgIGlmIChjbGlwICE9IG51bGwpIHByb2plY3Rpb24uY2xpcEV4dGVudChjbGlwKTtcblxuICAgIHJldHVybiBwcm9qZWN0aW9uLnNjYWxlKGsgKiAxNTApLnRyYW5zbGF0ZShbeCwgeV0pO1xuICB9XG5cbiAgZnVuY3Rpb24gX2ZpdFNpemUocHJvamVjdGlvbiwgc2l6ZSwgb2JqZWN0KSB7XG4gICAgcmV0dXJuIF9maXRFeHRlbnQocHJvamVjdGlvbiwgW1swLCAwXSwgc2l6ZV0sIG9iamVjdCk7XG4gIH1cblxuICB2YXIgbWF4RGVwdGggPSAxNjtcbiAgdmFyIGNvc01pbkRpc3RhbmNlID0gY29zJDEoMzAgKiByYWRpYW5zKTsgLy8gY29zKG1pbmltdW0gYW5ndWxhciBkaXN0YW5jZSlcblxuICB2YXIgcmVzYW1wbGUgPSBmdW5jdGlvbiByZXNhbXBsZShwcm9qZWN0LCBkZWx0YTIpIHtcbiAgICByZXR1cm4gK2RlbHRhMiA/IHJlc2FtcGxlJDEocHJvamVjdCwgZGVsdGEyKSA6IHJlc2FtcGxlTm9uZShwcm9qZWN0KTtcbiAgfTtcblxuICBmdW5jdGlvbiByZXNhbXBsZU5vbmUocHJvamVjdCkge1xuICAgIHJldHVybiB0cmFuc2Zvcm1lcih7XG4gICAgICBwb2ludDogZnVuY3Rpb24gcG9pbnQoeCwgeSkge1xuICAgICAgICB4ID0gcHJvamVjdCh4LCB5KTtcbiAgICAgICAgdGhpcy5zdHJlYW0ucG9pbnQoeFswXSwgeFsxXSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNhbXBsZSQxKHByb2plY3QsIGRlbHRhMikge1xuXG4gICAgZnVuY3Rpb24gcmVzYW1wbGVMaW5lVG8oeDAsIHkwLCBsYW1iZGEwLCBhMCwgYjAsIGMwLCB4MSwgeTEsIGxhbWJkYTEsIGExLCBiMSwgYzEsIGRlcHRoLCBzdHJlYW0pIHtcbiAgICAgIHZhciBkeCA9IHgxIC0geDAsXG4gICAgICAgICAgZHkgPSB5MSAtIHkwLFxuICAgICAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICBpZiAoZDIgPiA0ICogZGVsdGEyICYmIGRlcHRoLS0pIHtcbiAgICAgICAgdmFyIGEgPSBhMCArIGExLFxuICAgICAgICAgICAgYiA9IGIwICsgYjEsXG4gICAgICAgICAgICBjID0gYzAgKyBjMSxcbiAgICAgICAgICAgIG0gPSBzcXJ0KGEgKiBhICsgYiAqIGIgKyBjICogYyksXG4gICAgICAgICAgICBwaGkyID0gYXNpbihjIC89IG0pLFxuICAgICAgICAgICAgbGFtYmRhMiA9IGFicyhhYnMoYykgLSAxKSA8IGVwc2lsb24kMiB8fCBhYnMobGFtYmRhMCAtIGxhbWJkYTEpIDwgZXBzaWxvbiQyID8gKGxhbWJkYTAgKyBsYW1iZGExKSAvIDIgOiBhdGFuMihiLCBhKSxcbiAgICAgICAgICAgIHAgPSBwcm9qZWN0KGxhbWJkYTIsIHBoaTIpLFxuICAgICAgICAgICAgeDIgPSBwWzBdLFxuICAgICAgICAgICAgeTIgPSBwWzFdLFxuICAgICAgICAgICAgZHgyID0geDIgLSB4MCxcbiAgICAgICAgICAgIGR5MiA9IHkyIC0geTAsXG4gICAgICAgICAgICBkeiA9IGR5ICogZHgyIC0gZHggKiBkeTI7XG4gICAgICAgIGlmIChkeiAqIGR6IC8gZDIgPiBkZWx0YTIgLy8gcGVycGVuZGljdWxhciBwcm9qZWN0ZWQgZGlzdGFuY2VcbiAgICAgICAgfHwgYWJzKChkeCAqIGR4MiArIGR5ICogZHkyKSAvIGQyIC0gMC41KSA+IDAuMyAvLyBtaWRwb2ludCBjbG9zZSB0byBhbiBlbmRcbiAgICAgICAgfHwgYTAgKiBhMSArIGIwICogYjEgKyBjMCAqIGMxIDwgY29zTWluRGlzdGFuY2UpIHtcbiAgICAgICAgICAvLyBhbmd1bGFyIGRpc3RhbmNlXG4gICAgICAgICAgcmVzYW1wbGVMaW5lVG8oeDAsIHkwLCBsYW1iZGEwLCBhMCwgYjAsIGMwLCB4MiwgeTIsIGxhbWJkYTIsIGEgLz0gbSwgYiAvPSBtLCBjLCBkZXB0aCwgc3RyZWFtKTtcbiAgICAgICAgICBzdHJlYW0ucG9pbnQoeDIsIHkyKTtcbiAgICAgICAgICByZXNhbXBsZUxpbmVUbyh4MiwgeTIsIGxhbWJkYTIsIGEsIGIsIGMsIHgxLCB5MSwgbGFtYmRhMSwgYTEsIGIxLCBjMSwgZGVwdGgsIHN0cmVhbSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzdHJlYW0pIHtcbiAgICAgIHZhciBsYW1iZGEwMCwgeDAwLCB5MDAsIGEwMCwgYjAwLCBjMDAsIC8vIGZpcnN0IHBvaW50XG4gICAgICBsYW1iZGEwLCB4MCwgeTAsIGEwLCBiMCwgYzA7IC8vIHByZXZpb3VzIHBvaW50XG5cbiAgICAgIHZhciByZXNhbXBsZVN0cmVhbSA9IHtcbiAgICAgICAgcG9pbnQ6IHBvaW50LFxuICAgICAgICBsaW5lU3RhcnQ6IGxpbmVTdGFydCxcbiAgICAgICAgbGluZUVuZDogbGluZUVuZCxcbiAgICAgICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbiBwb2x5Z29uU3RhcnQoKSB7XG4gICAgICAgICAgc3RyZWFtLnBvbHlnb25TdGFydCgpO3Jlc2FtcGxlU3RyZWFtLmxpbmVTdGFydCA9IHJpbmdTdGFydDtcbiAgICAgICAgfSxcbiAgICAgICAgcG9seWdvbkVuZDogZnVuY3Rpb24gcG9seWdvbkVuZCgpIHtcbiAgICAgICAgICBzdHJlYW0ucG9seWdvbkVuZCgpO3Jlc2FtcGxlU3RyZWFtLmxpbmVTdGFydCA9IGxpbmVTdGFydDtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZnVuY3Rpb24gcG9pbnQoeCwgeSkge1xuICAgICAgICB4ID0gcHJvamVjdCh4LCB5KTtcbiAgICAgICAgc3RyZWFtLnBvaW50KHhbMF0sIHhbMV0pO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBsaW5lU3RhcnQoKSB7XG4gICAgICAgIHgwID0gTmFOO1xuICAgICAgICByZXNhbXBsZVN0cmVhbS5wb2ludCA9IGxpbmVQb2ludDtcbiAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBsaW5lUG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgICAgICAgdmFyIGMgPSBjYXJ0ZXNpYW4oW2xhbWJkYSwgcGhpXSksXG4gICAgICAgICAgICBwID0gcHJvamVjdChsYW1iZGEsIHBoaSk7XG4gICAgICAgIHJlc2FtcGxlTGluZVRvKHgwLCB5MCwgbGFtYmRhMCwgYTAsIGIwLCBjMCwgeDAgPSBwWzBdLCB5MCA9IHBbMV0sIGxhbWJkYTAgPSBsYW1iZGEsIGEwID0gY1swXSwgYjAgPSBjWzFdLCBjMCA9IGNbMl0sIG1heERlcHRoLCBzdHJlYW0pO1xuICAgICAgICBzdHJlYW0ucG9pbnQoeDAsIHkwKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbGluZUVuZCgpIHtcbiAgICAgICAgcmVzYW1wbGVTdHJlYW0ucG9pbnQgPSBwb2ludDtcbiAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcmluZ1N0YXJ0KCkge1xuICAgICAgICBsaW5lU3RhcnQoKTtcbiAgICAgICAgcmVzYW1wbGVTdHJlYW0ucG9pbnQgPSByaW5nUG9pbnQ7XG4gICAgICAgIHJlc2FtcGxlU3RyZWFtLmxpbmVFbmQgPSByaW5nRW5kO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByaW5nUG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgICAgICAgbGluZVBvaW50KGxhbWJkYTAwID0gbGFtYmRhLCBwaGkpLCB4MDAgPSB4MCwgeTAwID0geTAsIGEwMCA9IGEwLCBiMDAgPSBiMCwgYzAwID0gYzA7XG4gICAgICAgIHJlc2FtcGxlU3RyZWFtLnBvaW50ID0gbGluZVBvaW50O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByaW5nRW5kKCkge1xuICAgICAgICByZXNhbXBsZUxpbmVUbyh4MCwgeTAsIGxhbWJkYTAsIGEwLCBiMCwgYzAsIHgwMCwgeTAwLCBsYW1iZGEwMCwgYTAwLCBiMDAsIGMwMCwgbWF4RGVwdGgsIHN0cmVhbSk7XG4gICAgICAgIHJlc2FtcGxlU3RyZWFtLmxpbmVFbmQgPSBsaW5lRW5kO1xuICAgICAgICBsaW5lRW5kKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXNhbXBsZVN0cmVhbTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIHRyYW5zZm9ybVJhZGlhbnMgPSB0cmFuc2Zvcm1lcih7XG4gICAgcG9pbnQ6IGZ1bmN0aW9uIHBvaW50KHgsIHkpIHtcbiAgICAgIHRoaXMuc3RyZWFtLnBvaW50KHggKiByYWRpYW5zLCB5ICogcmFkaWFucyk7XG4gICAgfVxuICB9KTtcblxuICBmdW5jdGlvbiBwcm9qZWN0aW9uKHByb2plY3QpIHtcbiAgICByZXR1cm4gcHJvamVjdGlvbk11dGF0b3IoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHByb2plY3Q7XG4gICAgfSkoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByb2plY3Rpb25NdXRhdG9yKHByb2plY3RBdCkge1xuICAgIHZhciBwcm9qZWN0LFxuICAgICAgICBrID0gMTUwLFxuICAgICAgICAvLyBzY2FsZVxuICAgIHggPSA0ODAsXG4gICAgICAgIHkgPSAyNTAsXG4gICAgICAgIC8vIHRyYW5zbGF0ZVxuICAgIGR4LFxuICAgICAgICBkeSxcbiAgICAgICAgbGFtYmRhID0gMCxcbiAgICAgICAgcGhpID0gMCxcbiAgICAgICAgLy8gY2VudGVyXG4gICAgZGVsdGFMYW1iZGEgPSAwLFxuICAgICAgICBkZWx0YVBoaSA9IDAsXG4gICAgICAgIGRlbHRhR2FtbWEgPSAwLFxuICAgICAgICByb3RhdGUsXG4gICAgICAgIHByb2plY3RSb3RhdGUsXG4gICAgICAgIC8vIHJvdGF0ZVxuICAgIHRoZXRhID0gbnVsbCxcbiAgICAgICAgcHJlY2xpcCA9IGNsaXBBbnRpbWVyaWRpYW4sXG4gICAgICAgIC8vIGNsaXAgYW5nbGVcbiAgICB4MCA9IG51bGwsXG4gICAgICAgIHkwLFxuICAgICAgICB4MSxcbiAgICAgICAgeTEsXG4gICAgICAgIHBvc3RjbGlwID0gaWRlbnRpdHkkNCxcbiAgICAgICAgLy8gY2xpcCBleHRlbnRcbiAgICBkZWx0YTIgPSAwLjUsXG4gICAgICAgIHByb2plY3RSZXNhbXBsZSA9IHJlc2FtcGxlKHByb2plY3RUcmFuc2Zvcm0sIGRlbHRhMiksXG4gICAgICAgIC8vIHByZWNpc2lvblxuICAgIGNhY2hlLFxuICAgICAgICBjYWNoZVN0cmVhbTtcblxuICAgIGZ1bmN0aW9uIHByb2plY3Rpb24ocG9pbnQpIHtcbiAgICAgIHBvaW50ID0gcHJvamVjdFJvdGF0ZShwb2ludFswXSAqIHJhZGlhbnMsIHBvaW50WzFdICogcmFkaWFucyk7XG4gICAgICByZXR1cm4gW3BvaW50WzBdICogayArIGR4LCBkeSAtIHBvaW50WzFdICoga107XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW52ZXJ0KHBvaW50KSB7XG4gICAgICBwb2ludCA9IHByb2plY3RSb3RhdGUuaW52ZXJ0KChwb2ludFswXSAtIGR4KSAvIGssIChkeSAtIHBvaW50WzFdKSAvIGspO1xuICAgICAgcmV0dXJuIHBvaW50ICYmIFtwb2ludFswXSAqIGRlZ3JlZXMkMSwgcG9pbnRbMV0gKiBkZWdyZWVzJDFdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByb2plY3RUcmFuc2Zvcm0oeCwgeSkge1xuICAgICAgcmV0dXJuIHggPSBwcm9qZWN0KHgsIHkpLCBbeFswXSAqIGsgKyBkeCwgZHkgLSB4WzFdICoga107XG4gICAgfVxuXG4gICAgcHJvamVjdGlvbi5zdHJlYW0gPSBmdW5jdGlvbiAoc3RyZWFtKSB7XG4gICAgICByZXR1cm4gY2FjaGUgJiYgY2FjaGVTdHJlYW0gPT09IHN0cmVhbSA/IGNhY2hlIDogY2FjaGUgPSB0cmFuc2Zvcm1SYWRpYW5zKHByZWNsaXAocm90YXRlLCBwcm9qZWN0UmVzYW1wbGUocG9zdGNsaXAoY2FjaGVTdHJlYW0gPSBzdHJlYW0pKSkpO1xuICAgIH07XG5cbiAgICBwcm9qZWN0aW9uLmNsaXBBbmdsZSA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwcmVjbGlwID0gK18gPyBjbGlwQ2lyY2xlKHRoZXRhID0gXyAqIHJhZGlhbnMsIDYgKiByYWRpYW5zKSA6ICh0aGV0YSA9IG51bGwsIGNsaXBBbnRpbWVyaWRpYW4pLCByZXNldCgpKSA6IHRoZXRhICogZGVncmVlcyQxO1xuICAgIH07XG5cbiAgICBwcm9qZWN0aW9uLmNsaXBFeHRlbnQgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocG9zdGNsaXAgPSBfID09IG51bGwgPyAoeDAgPSB5MCA9IHgxID0geTEgPSBudWxsLCBpZGVudGl0eSQ0KSA6IF9jbGlwRXh0ZW50KHgwID0gK19bMF1bMF0sIHkwID0gK19bMF1bMV0sIHgxID0gK19bMV1bMF0sIHkxID0gK19bMV1bMV0pLCByZXNldCgpKSA6IHgwID09IG51bGwgPyBudWxsIDogW1t4MCwgeTBdLCBbeDEsIHkxXV07XG4gICAgfTtcblxuICAgIHByb2plY3Rpb24uc2NhbGUgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoayA9ICtfLCByZWNlbnRlcigpKSA6IGs7XG4gICAgfTtcblxuICAgIHByb2plY3Rpb24udHJhbnNsYXRlID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHggPSArX1swXSwgeSA9ICtfWzFdLCByZWNlbnRlcigpKSA6IFt4LCB5XTtcbiAgICB9O1xuXG4gICAgcHJvamVjdGlvbi5jZW50ZXIgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAobGFtYmRhID0gX1swXSAlIDM2MCAqIHJhZGlhbnMsIHBoaSA9IF9bMV0gJSAzNjAgKiByYWRpYW5zLCByZWNlbnRlcigpKSA6IFtsYW1iZGEgKiBkZWdyZWVzJDEsIHBoaSAqIGRlZ3JlZXMkMV07XG4gICAgfTtcblxuICAgIHByb2plY3Rpb24ucm90YXRlID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRlbHRhTGFtYmRhID0gX1swXSAlIDM2MCAqIHJhZGlhbnMsIGRlbHRhUGhpID0gX1sxXSAlIDM2MCAqIHJhZGlhbnMsIGRlbHRhR2FtbWEgPSBfLmxlbmd0aCA+IDIgPyBfWzJdICUgMzYwICogcmFkaWFucyA6IDAsIHJlY2VudGVyKCkpIDogW2RlbHRhTGFtYmRhICogZGVncmVlcyQxLCBkZWx0YVBoaSAqIGRlZ3JlZXMkMSwgZGVsdGFHYW1tYSAqIGRlZ3JlZXMkMV07XG4gICAgfTtcblxuICAgIHByb2plY3Rpb24ucHJlY2lzaW9uID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHByb2plY3RSZXNhbXBsZSA9IHJlc2FtcGxlKHByb2plY3RUcmFuc2Zvcm0sIGRlbHRhMiA9IF8gKiBfKSwgcmVzZXQoKSkgOiBzcXJ0KGRlbHRhMik7XG4gICAgfTtcblxuICAgIHByb2plY3Rpb24uZml0RXh0ZW50ID0gZnVuY3Rpb24gKGV4dGVudCwgb2JqZWN0KSB7XG4gICAgICByZXR1cm4gX2ZpdEV4dGVudChwcm9qZWN0aW9uLCBleHRlbnQsIG9iamVjdCk7XG4gICAgfTtcblxuICAgIHByb2plY3Rpb24uZml0U2l6ZSA9IGZ1bmN0aW9uIChzaXplLCBvYmplY3QpIHtcbiAgICAgIHJldHVybiBfZml0U2l6ZShwcm9qZWN0aW9uLCBzaXplLCBvYmplY3QpO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiByZWNlbnRlcigpIHtcbiAgICAgIHByb2plY3RSb3RhdGUgPSBjb21wb3NlKHJvdGF0ZSA9IHJvdGF0ZVJhZGlhbnMoZGVsdGFMYW1iZGEsIGRlbHRhUGhpLCBkZWx0YUdhbW1hKSwgcHJvamVjdCk7XG4gICAgICB2YXIgY2VudGVyID0gcHJvamVjdChsYW1iZGEsIHBoaSk7XG4gICAgICBkeCA9IHggLSBjZW50ZXJbMF0gKiBrO1xuICAgICAgZHkgPSB5ICsgY2VudGVyWzFdICogaztcbiAgICAgIHJldHVybiByZXNldCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgY2FjaGUgPSBjYWNoZVN0cmVhbSA9IG51bGw7XG4gICAgICByZXR1cm4gcHJvamVjdGlvbjtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvamVjdCA9IHByb2plY3RBdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgcHJvamVjdGlvbi5pbnZlcnQgPSBwcm9qZWN0LmludmVydCAmJiBpbnZlcnQ7XG4gICAgICByZXR1cm4gcmVjZW50ZXIoKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY29uaWNQcm9qZWN0aW9uKHByb2plY3RBdCkge1xuICAgIHZhciBwaGkwID0gMCxcbiAgICAgICAgcGhpMSA9IHBpJDMgLyAzLFxuICAgICAgICBtID0gcHJvamVjdGlvbk11dGF0b3IocHJvamVjdEF0KSxcbiAgICAgICAgcCA9IG0ocGhpMCwgcGhpMSk7XG5cbiAgICBwLnBhcmFsbGVscyA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IG0ocGhpMCA9IF9bMF0gKiByYWRpYW5zLCBwaGkxID0gX1sxXSAqIHJhZGlhbnMpIDogW3BoaTAgKiBkZWdyZWVzJDEsIHBoaTEgKiBkZWdyZWVzJDFdO1xuICAgIH07XG5cbiAgICByZXR1cm4gcDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGN5bGluZHJpY2FsRXF1YWxBcmVhUmF3KHBoaTApIHtcbiAgICB2YXIgY29zUGhpMCA9IGNvcyQxKHBoaTApO1xuXG4gICAgZnVuY3Rpb24gZm9yd2FyZChsYW1iZGEsIHBoaSkge1xuICAgICAgcmV0dXJuIFtsYW1iZGEgKiBjb3NQaGkwLCBzaW4kMShwaGkpIC8gY29zUGhpMF07XG4gICAgfVxuXG4gICAgZm9yd2FyZC5pbnZlcnQgPSBmdW5jdGlvbiAoeCwgeSkge1xuICAgICAgcmV0dXJuIFt4IC8gY29zUGhpMCwgYXNpbih5ICogY29zUGhpMCldO1xuICAgIH07XG5cbiAgICByZXR1cm4gZm9yd2FyZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbmljRXF1YWxBcmVhUmF3KHkwLCB5MSkge1xuICAgIHZhciBzeTAgPSBzaW4kMSh5MCksXG4gICAgICAgIG4gPSAoc3kwICsgc2luJDEoeTEpKSAvIDI7XG5cbiAgICAvLyBBcmUgdGhlIHBhcmFsbGVscyBzeW1tZXRyaWNhbCBhcm91bmQgdGhlIEVxdWF0b3I/XG4gICAgaWYgKGFicyhuKSA8IGVwc2lsb24kMikgcmV0dXJuIGN5bGluZHJpY2FsRXF1YWxBcmVhUmF3KHkwKTtcblxuICAgIHZhciBjID0gMSArIHN5MCAqICgyICogbiAtIHN5MCksXG4gICAgICAgIHIwID0gc3FydChjKSAvIG47XG5cbiAgICBmdW5jdGlvbiBwcm9qZWN0KHgsIHkpIHtcbiAgICAgIHZhciByID0gc3FydChjIC0gMiAqIG4gKiBzaW4kMSh5KSkgLyBuO1xuICAgICAgcmV0dXJuIFtyICogc2luJDEoeCAqPSBuKSwgcjAgLSByICogY29zJDEoeCldO1xuICAgIH1cblxuICAgIHByb2plY3QuaW52ZXJ0ID0gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICAgIHZhciByMHkgPSByMCAtIHk7XG4gICAgICByZXR1cm4gW2F0YW4yKHgsIGFicyhyMHkpKSAvIG4gKiBzaWduKHIweSksIGFzaW4oKGMgLSAoeCAqIHggKyByMHkgKiByMHkpICogbiAqIG4pIC8gKDIgKiBuKSldO1xuICAgIH07XG5cbiAgICByZXR1cm4gcHJvamVjdDtcbiAgfVxuXG4gIHZhciBjb25pY0VxdWFsQXJlYSA9IGZ1bmN0aW9uIGNvbmljRXF1YWxBcmVhKCkge1xuICAgIHJldHVybiBjb25pY1Byb2plY3Rpb24oY29uaWNFcXVhbEFyZWFSYXcpLnNjYWxlKDE1NS40MjQpLmNlbnRlcihbMCwgMzMuNjQ0Ml0pO1xuICB9O1xuXG4gIHZhciBhbGJlcnMgPSBmdW5jdGlvbiBhbGJlcnMoKSB7XG4gICAgcmV0dXJuIGNvbmljRXF1YWxBcmVhKCkucGFyYWxsZWxzKFsyOS41LCA0NS41XSkuc2NhbGUoMTA3MCkudHJhbnNsYXRlKFs0ODAsIDI1MF0pLnJvdGF0ZShbOTYsIDBdKS5jZW50ZXIoWy0wLjYsIDM4LjddKTtcbiAgfTtcblxuICAvLyBUaGUgcHJvamVjdGlvbnMgbXVzdCBoYXZlIG11dHVhbGx5IGV4Y2x1c2l2ZSBjbGlwIHJlZ2lvbnMgb24gdGhlIHNwaGVyZSxcbiAgLy8gYXMgdGhpcyB3aWxsIGF2b2lkIGVtaXR0aW5nIGludGVybGVhdmluZyBsaW5lcyBhbmQgcG9seWdvbnMuXG4gIGZ1bmN0aW9uIG11bHRpcGxleChzdHJlYW1zKSB7XG4gICAgdmFyIG4gPSBzdHJlYW1zLmxlbmd0aDtcbiAgICByZXR1cm4ge1xuICAgICAgcG9pbnQ6IGZ1bmN0aW9uIHBvaW50KHgsIHkpIHtcbiAgICAgICAgdmFyIGkgPSAtMTt3aGlsZSAoKytpIDwgbikge1xuICAgICAgICAgIHN0cmVhbXNbaV0ucG9pbnQoeCwgeSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBzcGhlcmU6IGZ1bmN0aW9uIHNwaGVyZSgpIHtcbiAgICAgICAgdmFyIGkgPSAtMTt3aGlsZSAoKytpIDwgbikge1xuICAgICAgICAgIHN0cmVhbXNbaV0uc3BoZXJlKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uIGxpbmVTdGFydCgpIHtcbiAgICAgICAgdmFyIGkgPSAtMTt3aGlsZSAoKytpIDwgbikge1xuICAgICAgICAgIHN0cmVhbXNbaV0ubGluZVN0YXJ0KCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBsaW5lRW5kOiBmdW5jdGlvbiBsaW5lRW5kKCkge1xuICAgICAgICB2YXIgaSA9IC0xO3doaWxlICgrK2kgPCBuKSB7XG4gICAgICAgICAgc3RyZWFtc1tpXS5saW5lRW5kKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uIHBvbHlnb25TdGFydCgpIHtcbiAgICAgICAgdmFyIGkgPSAtMTt3aGlsZSAoKytpIDwgbikge1xuICAgICAgICAgIHN0cmVhbXNbaV0ucG9seWdvblN0YXJ0KCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbiBwb2x5Z29uRW5kKCkge1xuICAgICAgICB2YXIgaSA9IC0xO3doaWxlICgrK2kgPCBuKSB7XG4gICAgICAgICAgc3RyZWFtc1tpXS5wb2x5Z29uRW5kKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQSBjb21wb3NpdGUgcHJvamVjdGlvbiBmb3IgdGhlIFVuaXRlZCBTdGF0ZXMsIGNvbmZpZ3VyZWQgYnkgZGVmYXVsdCBmb3JcbiAgLy8gOTYww5c1MDAuIFRoZSBwcm9qZWN0aW9uIGFsc28gd29ya3MgcXVpdGUgd2VsbCBhdCA5NjDDlzYwMCBpZiB5b3UgY2hhbmdlIHRoZVxuICAvLyBzY2FsZSB0byAxMjg1IGFuZCBhZGp1c3QgdGhlIHRyYW5zbGF0ZSBhY2NvcmRpbmdseS4gVGhlIHNldCBvZiBzdGFuZGFyZFxuICAvLyBwYXJhbGxlbHMgZm9yIGVhY2ggcmVnaW9uIGNvbWVzIGZyb20gVVNHUywgd2hpY2ggaXMgcHVibGlzaGVkIGhlcmU6XG4gIC8vIGh0dHA6Ly9lZ3NjLnVzZ3MuZ292L2lzYi9wdWJzL01hcFByb2plY3Rpb25zL3Byb2plY3Rpb25zLmh0bWwjYWxiZXJzXG4gIHZhciBhbGJlcnNVc2EgPSBmdW5jdGlvbiBhbGJlcnNVc2EoKSB7XG4gICAgdmFyIGNhY2hlLFxuICAgICAgICBjYWNoZVN0cmVhbSxcbiAgICAgICAgbG93ZXI0OCA9IGFsYmVycygpLFxuICAgICAgICBsb3dlcjQ4UG9pbnQsXG4gICAgICAgIGFsYXNrYSA9IGNvbmljRXF1YWxBcmVhKCkucm90YXRlKFsxNTQsIDBdKS5jZW50ZXIoWy0yLCA1OC41XSkucGFyYWxsZWxzKFs1NSwgNjVdKSxcbiAgICAgICAgYWxhc2thUG9pbnQsXG4gICAgICAgIC8vIEVQU0c6MzMzOFxuICAgIGhhd2FpaSA9IGNvbmljRXF1YWxBcmVhKCkucm90YXRlKFsxNTcsIDBdKS5jZW50ZXIoWy0zLCAxOS45XSkucGFyYWxsZWxzKFs4LCAxOF0pLFxuICAgICAgICBoYXdhaWlQb2ludCxcbiAgICAgICAgLy8gRVNSSToxMDIwMDdcbiAgICBfcG9pbnQsXG4gICAgICAgIHBvaW50U3RyZWFtID0geyBwb2ludDogZnVuY3Rpb24gcG9pbnQoeCwgeSkge1xuICAgICAgICBfcG9pbnQgPSBbeCwgeV07XG4gICAgICB9IH07XG5cbiAgICBmdW5jdGlvbiBhbGJlcnNVc2EoY29vcmRpbmF0ZXMpIHtcbiAgICAgIHZhciB4ID0gY29vcmRpbmF0ZXNbMF0sXG4gICAgICAgICAgeSA9IGNvb3JkaW5hdGVzWzFdO1xuICAgICAgcmV0dXJuIF9wb2ludCA9IG51bGwsIChsb3dlcjQ4UG9pbnQucG9pbnQoeCwgeSksIF9wb2ludCkgfHwgKGFsYXNrYVBvaW50LnBvaW50KHgsIHkpLCBfcG9pbnQpIHx8IChoYXdhaWlQb2ludC5wb2ludCh4LCB5KSwgX3BvaW50KTtcbiAgICB9XG5cbiAgICBhbGJlcnNVc2EuaW52ZXJ0ID0gZnVuY3Rpb24gKGNvb3JkaW5hdGVzKSB7XG4gICAgICB2YXIgayA9IGxvd2VyNDguc2NhbGUoKSxcbiAgICAgICAgICB0ID0gbG93ZXI0OC50cmFuc2xhdGUoKSxcbiAgICAgICAgICB4ID0gKGNvb3JkaW5hdGVzWzBdIC0gdFswXSkgLyBrLFxuICAgICAgICAgIHkgPSAoY29vcmRpbmF0ZXNbMV0gLSB0WzFdKSAvIGs7XG4gICAgICByZXR1cm4gKHkgPj0gMC4xMjAgJiYgeSA8IDAuMjM0ICYmIHggPj0gLTAuNDI1ICYmIHggPCAtMC4yMTQgPyBhbGFza2EgOiB5ID49IDAuMTY2ICYmIHkgPCAwLjIzNCAmJiB4ID49IC0wLjIxNCAmJiB4IDwgLTAuMTE1ID8gaGF3YWlpIDogbG93ZXI0OCkuaW52ZXJ0KGNvb3JkaW5hdGVzKTtcbiAgICB9O1xuXG4gICAgYWxiZXJzVXNhLnN0cmVhbSA9IGZ1bmN0aW9uIChzdHJlYW0pIHtcbiAgICAgIHJldHVybiBjYWNoZSAmJiBjYWNoZVN0cmVhbSA9PT0gc3RyZWFtID8gY2FjaGUgOiBjYWNoZSA9IG11bHRpcGxleChbbG93ZXI0OC5zdHJlYW0oY2FjaGVTdHJlYW0gPSBzdHJlYW0pLCBhbGFza2Euc3RyZWFtKHN0cmVhbSksIGhhd2FpaS5zdHJlYW0oc3RyZWFtKV0pO1xuICAgIH07XG5cbiAgICBhbGJlcnNVc2EucHJlY2lzaW9uID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGxvd2VyNDgucHJlY2lzaW9uKCk7XG4gICAgICBsb3dlcjQ4LnByZWNpc2lvbihfKSwgYWxhc2thLnByZWNpc2lvbihfKSwgaGF3YWlpLnByZWNpc2lvbihfKTtcbiAgICAgIHJldHVybiByZXNldCgpO1xuICAgIH07XG5cbiAgICBhbGJlcnNVc2Euc2NhbGUgPSBmdW5jdGlvbiAoXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbG93ZXI0OC5zY2FsZSgpO1xuICAgICAgbG93ZXI0OC5zY2FsZShfKSwgYWxhc2thLnNjYWxlKF8gKiAwLjM1KSwgaGF3YWlpLnNjYWxlKF8pO1xuICAgICAgcmV0dXJuIGFsYmVyc1VzYS50cmFuc2xhdGUobG93ZXI0OC50cmFuc2xhdGUoKSk7XG4gICAgfTtcblxuICAgIGFsYmVyc1VzYS50cmFuc2xhdGUgPSBmdW5jdGlvbiAoXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbG93ZXI0OC50cmFuc2xhdGUoKTtcbiAgICAgIHZhciBrID0gbG93ZXI0OC5zY2FsZSgpLFxuICAgICAgICAgIHggPSArX1swXSxcbiAgICAgICAgICB5ID0gK19bMV07XG5cbiAgICAgIGxvd2VyNDhQb2ludCA9IGxvd2VyNDgudHJhbnNsYXRlKF8pLmNsaXBFeHRlbnQoW1t4IC0gMC40NTUgKiBrLCB5IC0gMC4yMzggKiBrXSwgW3ggKyAwLjQ1NSAqIGssIHkgKyAwLjIzOCAqIGtdXSkuc3RyZWFtKHBvaW50U3RyZWFtKTtcblxuICAgICAgYWxhc2thUG9pbnQgPSBhbGFza2EudHJhbnNsYXRlKFt4IC0gMC4zMDcgKiBrLCB5ICsgMC4yMDEgKiBrXSkuY2xpcEV4dGVudChbW3ggLSAwLjQyNSAqIGsgKyBlcHNpbG9uJDIsIHkgKyAwLjEyMCAqIGsgKyBlcHNpbG9uJDJdLCBbeCAtIDAuMjE0ICogayAtIGVwc2lsb24kMiwgeSArIDAuMjM0ICogayAtIGVwc2lsb24kMl1dKS5zdHJlYW0ocG9pbnRTdHJlYW0pO1xuXG4gICAgICBoYXdhaWlQb2ludCA9IGhhd2FpaS50cmFuc2xhdGUoW3ggLSAwLjIwNSAqIGssIHkgKyAwLjIxMiAqIGtdKS5jbGlwRXh0ZW50KFtbeCAtIDAuMjE0ICogayArIGVwc2lsb24kMiwgeSArIDAuMTY2ICogayArIGVwc2lsb24kMl0sIFt4IC0gMC4xMTUgKiBrIC0gZXBzaWxvbiQyLCB5ICsgMC4yMzQgKiBrIC0gZXBzaWxvbiQyXV0pLnN0cmVhbShwb2ludFN0cmVhbSk7XG5cbiAgICAgIHJldHVybiByZXNldCgpO1xuICAgIH07XG5cbiAgICBhbGJlcnNVc2EuZml0RXh0ZW50ID0gZnVuY3Rpb24gKGV4dGVudCwgb2JqZWN0KSB7XG4gICAgICByZXR1cm4gX2ZpdEV4dGVudChhbGJlcnNVc2EsIGV4dGVudCwgb2JqZWN0KTtcbiAgICB9O1xuXG4gICAgYWxiZXJzVXNhLmZpdFNpemUgPSBmdW5jdGlvbiAoc2l6ZSwgb2JqZWN0KSB7XG4gICAgICByZXR1cm4gX2ZpdFNpemUoYWxiZXJzVXNhLCBzaXplLCBvYmplY3QpO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiByZXNldCgpIHtcbiAgICAgIGNhY2hlID0gY2FjaGVTdHJlYW0gPSBudWxsO1xuICAgICAgcmV0dXJuIGFsYmVyc1VzYTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWxiZXJzVXNhLnNjYWxlKDEwNzApO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGF6aW11dGhhbFJhdyhzY2FsZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoeCwgeSkge1xuICAgICAgdmFyIGN4ID0gY29zJDEoeCksXG4gICAgICAgICAgY3kgPSBjb3MkMSh5KSxcbiAgICAgICAgICBrID0gc2NhbGUoY3ggKiBjeSk7XG4gICAgICByZXR1cm4gW2sgKiBjeSAqIHNpbiQxKHgpLCBrICogc2luJDEoeSldO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBhemltdXRoYWxJbnZlcnQoYW5nbGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICAgIHZhciB6ID0gc3FydCh4ICogeCArIHkgKiB5KSxcbiAgICAgICAgICBjID0gYW5nbGUoeiksXG4gICAgICAgICAgc2MgPSBzaW4kMShjKSxcbiAgICAgICAgICBjYyA9IGNvcyQxKGMpO1xuICAgICAgcmV0dXJuIFthdGFuMih4ICogc2MsIHogKiBjYyksIGFzaW4oeiAmJiB5ICogc2MgLyB6KV07XG4gICAgfTtcbiAgfVxuXG4gIHZhciBhemltdXRoYWxFcXVhbEFyZWFSYXcgPSBhemltdXRoYWxSYXcoZnVuY3Rpb24gKGN4Y3kpIHtcbiAgICByZXR1cm4gc3FydCgyIC8gKDEgKyBjeGN5KSk7XG4gIH0pO1xuXG4gIGF6aW11dGhhbEVxdWFsQXJlYVJhdy5pbnZlcnQgPSBhemltdXRoYWxJbnZlcnQoZnVuY3Rpb24gKHopIHtcbiAgICByZXR1cm4gMiAqIGFzaW4oeiAvIDIpO1xuICB9KTtcblxuICB2YXIgYXppbXV0aGFsRXF1YWxBcmVhID0gZnVuY3Rpb24gYXppbXV0aGFsRXF1YWxBcmVhKCkge1xuICAgIHJldHVybiBwcm9qZWN0aW9uKGF6aW11dGhhbEVxdWFsQXJlYVJhdykuc2NhbGUoMTI0Ljc1KS5jbGlwQW5nbGUoMTgwIC0gMWUtMyk7XG4gIH07XG5cbiAgdmFyIGF6aW11dGhhbEVxdWlkaXN0YW50UmF3ID0gYXppbXV0aGFsUmF3KGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuIChjID0gYWNvcyhjKSkgJiYgYyAvIHNpbiQxKGMpO1xuICB9KTtcblxuICBhemltdXRoYWxFcXVpZGlzdGFudFJhdy5pbnZlcnQgPSBhemltdXRoYWxJbnZlcnQoZnVuY3Rpb24gKHopIHtcbiAgICByZXR1cm4gejtcbiAgfSk7XG5cbiAgdmFyIGF6aW11dGhhbEVxdWlkaXN0YW50ID0gZnVuY3Rpb24gYXppbXV0aGFsRXF1aWRpc3RhbnQoKSB7XG4gICAgcmV0dXJuIHByb2plY3Rpb24oYXppbXV0aGFsRXF1aWRpc3RhbnRSYXcpLnNjYWxlKDc5LjQxODgpLmNsaXBBbmdsZSgxODAgLSAxZS0zKTtcbiAgfTtcblxuICBmdW5jdGlvbiBtZXJjYXRvclJhdyhsYW1iZGEsIHBoaSkge1xuICAgIHJldHVybiBbbGFtYmRhLCBsb2codGFuKChoYWxmUGkkMiArIHBoaSkgLyAyKSldO1xuICB9XG5cbiAgbWVyY2F0b3JSYXcuaW52ZXJ0ID0gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICByZXR1cm4gW3gsIDIgKiBhdGFuKGV4cCh5KSkgLSBoYWxmUGkkMl07XG4gIH07XG5cbiAgdmFyIG1lcmNhdG9yID0gZnVuY3Rpb24gbWVyY2F0b3IoKSB7XG4gICAgcmV0dXJuIG1lcmNhdG9yUHJvamVjdGlvbihtZXJjYXRvclJhdykuc2NhbGUoOTYxIC8gdGF1JDMpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1lcmNhdG9yUHJvamVjdGlvbihwcm9qZWN0KSB7XG4gICAgdmFyIG0gPSBwcm9qZWN0aW9uKHByb2plY3QpLFxuICAgICAgICBjZW50ZXIgPSBtLmNlbnRlcixcbiAgICAgICAgc2NhbGUgPSBtLnNjYWxlLFxuICAgICAgICB0cmFuc2xhdGUgPSBtLnRyYW5zbGF0ZSxcbiAgICAgICAgY2xpcEV4dGVudCA9IG0uY2xpcEV4dGVudCxcbiAgICAgICAgeDAgPSBudWxsLFxuICAgICAgICB5MCxcbiAgICAgICAgeDEsXG4gICAgICAgIHkxOyAvLyBjbGlwIGV4dGVudFxuXG4gICAgbS5zY2FsZSA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzY2FsZShfKSwgcmVjbGlwKCkpIDogc2NhbGUoKTtcbiAgICB9O1xuXG4gICAgbS50cmFuc2xhdGUgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodHJhbnNsYXRlKF8pLCByZWNsaXAoKSkgOiB0cmFuc2xhdGUoKTtcbiAgICB9O1xuXG4gICAgbS5jZW50ZXIgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2VudGVyKF8pLCByZWNsaXAoKSkgOiBjZW50ZXIoKTtcbiAgICB9O1xuXG4gICAgbS5jbGlwRXh0ZW50ID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKF8gPT0gbnVsbCA/IHgwID0geTAgPSB4MSA9IHkxID0gbnVsbCA6ICh4MCA9ICtfWzBdWzBdLCB5MCA9ICtfWzBdWzFdLCB4MSA9ICtfWzFdWzBdLCB5MSA9ICtfWzFdWzFdKSwgcmVjbGlwKCkpIDogeDAgPT0gbnVsbCA/IG51bGwgOiBbW3gwLCB5MF0sIFt4MSwgeTFdXTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gcmVjbGlwKCkge1xuICAgICAgdmFyIGsgPSBwaSQzICogc2NhbGUoKSxcbiAgICAgICAgICB0ID0gbShyb3RhdGlvbihtLnJvdGF0ZSgpKS5pbnZlcnQoWzAsIDBdKSk7XG4gICAgICByZXR1cm4gY2xpcEV4dGVudCh4MCA9PSBudWxsID8gW1t0WzBdIC0gaywgdFsxXSAtIGtdLCBbdFswXSArIGssIHRbMV0gKyBrXV0gOiBwcm9qZWN0ID09PSBtZXJjYXRvclJhdyA/IFtbTWF0aC5tYXgodFswXSAtIGssIHgwKSwgeTBdLCBbTWF0aC5taW4odFswXSArIGssIHgxKSwgeTFdXSA6IFtbeDAsIE1hdGgubWF4KHRbMV0gLSBrLCB5MCldLCBbeDEsIE1hdGgubWluKHRbMV0gKyBrLCB5MSldXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlY2xpcCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gdGFueSh5KSB7XG4gICAgcmV0dXJuIHRhbigoaGFsZlBpJDIgKyB5KSAvIDIpO1xuICB9XG5cbiAgZnVuY3Rpb24gY29uaWNDb25mb3JtYWxSYXcoeTAsIHkxKSB7XG4gICAgdmFyIGN5MCA9IGNvcyQxKHkwKSxcbiAgICAgICAgbiA9IHkwID09PSB5MSA/IHNpbiQxKHkwKSA6IGxvZyhjeTAgLyBjb3MkMSh5MSkpIC8gbG9nKHRhbnkoeTEpIC8gdGFueSh5MCkpLFxuICAgICAgICBmID0gY3kwICogcG93KHRhbnkoeTApLCBuKSAvIG47XG5cbiAgICBpZiAoIW4pIHJldHVybiBtZXJjYXRvclJhdztcblxuICAgIGZ1bmN0aW9uIHByb2plY3QoeCwgeSkge1xuICAgICAgaWYgKGYgPiAwKSB7XG4gICAgICAgIGlmICh5IDwgLWhhbGZQaSQyICsgZXBzaWxvbiQyKSB5ID0gLWhhbGZQaSQyICsgZXBzaWxvbiQyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHkgPiBoYWxmUGkkMiAtIGVwc2lsb24kMikgeSA9IGhhbGZQaSQyIC0gZXBzaWxvbiQyO1xuICAgICAgfVxuICAgICAgdmFyIHIgPSBmIC8gcG93KHRhbnkoeSksIG4pO1xuICAgICAgcmV0dXJuIFtyICogc2luJDEobiAqIHgpLCBmIC0gciAqIGNvcyQxKG4gKiB4KV07XG4gICAgfVxuXG4gICAgcHJvamVjdC5pbnZlcnQgPSBmdW5jdGlvbiAoeCwgeSkge1xuICAgICAgdmFyIGZ5ID0gZiAtIHksXG4gICAgICAgICAgciA9IHNpZ24obikgKiBzcXJ0KHggKiB4ICsgZnkgKiBmeSk7XG4gICAgICByZXR1cm4gW2F0YW4yKHgsIGFicyhmeSkpIC8gbiAqIHNpZ24oZnkpLCAyICogYXRhbihwb3coZiAvIHIsIDEgLyBuKSkgLSBoYWxmUGkkMl07XG4gICAgfTtcblxuICAgIHJldHVybiBwcm9qZWN0O1xuICB9XG5cbiAgdmFyIGNvbmljQ29uZm9ybWFsID0gZnVuY3Rpb24gY29uaWNDb25mb3JtYWwoKSB7XG4gICAgcmV0dXJuIGNvbmljUHJvamVjdGlvbihjb25pY0NvbmZvcm1hbFJhdykuc2NhbGUoMTA5LjUpLnBhcmFsbGVscyhbMzAsIDMwXSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gZXF1aXJlY3Rhbmd1bGFyUmF3KGxhbWJkYSwgcGhpKSB7XG4gICAgcmV0dXJuIFtsYW1iZGEsIHBoaV07XG4gIH1cblxuICBlcXVpcmVjdGFuZ3VsYXJSYXcuaW52ZXJ0ID0gZXF1aXJlY3Rhbmd1bGFyUmF3O1xuXG4gIHZhciBlcXVpcmVjdGFuZ3VsYXIgPSBmdW5jdGlvbiBlcXVpcmVjdGFuZ3VsYXIoKSB7XG4gICAgcmV0dXJuIHByb2plY3Rpb24oZXF1aXJlY3Rhbmd1bGFyUmF3KS5zY2FsZSgxNTIuNjMpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGNvbmljRXF1aWRpc3RhbnRSYXcoeTAsIHkxKSB7XG4gICAgdmFyIGN5MCA9IGNvcyQxKHkwKSxcbiAgICAgICAgbiA9IHkwID09PSB5MSA/IHNpbiQxKHkwKSA6IChjeTAgLSBjb3MkMSh5MSkpIC8gKHkxIC0geTApLFxuICAgICAgICBnID0gY3kwIC8gbiArIHkwO1xuXG4gICAgaWYgKGFicyhuKSA8IGVwc2lsb24kMikgcmV0dXJuIGVxdWlyZWN0YW5ndWxhclJhdztcblxuICAgIGZ1bmN0aW9uIHByb2plY3QoeCwgeSkge1xuICAgICAgdmFyIGd5ID0gZyAtIHksXG4gICAgICAgICAgbnggPSBuICogeDtcbiAgICAgIHJldHVybiBbZ3kgKiBzaW4kMShueCksIGcgLSBneSAqIGNvcyQxKG54KV07XG4gICAgfVxuXG4gICAgcHJvamVjdC5pbnZlcnQgPSBmdW5jdGlvbiAoeCwgeSkge1xuICAgICAgdmFyIGd5ID0gZyAtIHk7XG4gICAgICByZXR1cm4gW2F0YW4yKHgsIGFicyhneSkpIC8gbiAqIHNpZ24oZ3kpLCBnIC0gc2lnbihuKSAqIHNxcnQoeCAqIHggKyBneSAqIGd5KV07XG4gICAgfTtcblxuICAgIHJldHVybiBwcm9qZWN0O1xuICB9XG5cbiAgdmFyIGNvbmljRXF1aWRpc3RhbnQgPSBmdW5jdGlvbiBjb25pY0VxdWlkaXN0YW50KCkge1xuICAgIHJldHVybiBjb25pY1Byb2plY3Rpb24oY29uaWNFcXVpZGlzdGFudFJhdykuc2NhbGUoMTMxLjE1NCkuY2VudGVyKFswLCAxMy45Mzg5XSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gZ25vbW9uaWNSYXcoeCwgeSkge1xuICAgIHZhciBjeSA9IGNvcyQxKHkpLFxuICAgICAgICBrID0gY29zJDEoeCkgKiBjeTtcbiAgICByZXR1cm4gW2N5ICogc2luJDEoeCkgLyBrLCBzaW4kMSh5KSAvIGtdO1xuICB9XG5cbiAgZ25vbW9uaWNSYXcuaW52ZXJ0ID0gYXppbXV0aGFsSW52ZXJ0KGF0YW4pO1xuXG4gIHZhciBnbm9tb25pYyA9IGZ1bmN0aW9uIGdub21vbmljKCkge1xuICAgIHJldHVybiBwcm9qZWN0aW9uKGdub21vbmljUmF3KS5zY2FsZSgxNDQuMDQ5KS5jbGlwQW5nbGUoNjApO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHNjYWxlVHJhbnNsYXRlKGt4LCBreSwgdHgsIHR5KSB7XG4gICAgcmV0dXJuIGt4ID09PSAxICYmIGt5ID09PSAxICYmIHR4ID09PSAwICYmIHR5ID09PSAwID8gaWRlbnRpdHkkNCA6IHRyYW5zZm9ybWVyKHtcbiAgICAgIHBvaW50OiBmdW5jdGlvbiBwb2ludCh4LCB5KSB7XG4gICAgICAgIHRoaXMuc3RyZWFtLnBvaW50KHggKiBreCArIHR4LCB5ICoga3kgKyB0eSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICB2YXIgaWRlbnRpdHkkNSA9IGZ1bmN0aW9uIGlkZW50aXR5JDUoKSB7XG4gICAgdmFyIGsgPSAxLFxuICAgICAgICB0eCA9IDAsXG4gICAgICAgIHR5ID0gMCxcbiAgICAgICAgc3ggPSAxLFxuICAgICAgICBzeSA9IDEsXG4gICAgICAgIHRyYW5zZm9ybSQkMSA9IGlkZW50aXR5JDQsXG4gICAgICAgIC8vIHNjYWxlLCB0cmFuc2xhdGUgYW5kIHJlZmxlY3RcbiAgICB4MCA9IG51bGwsXG4gICAgICAgIHkwLFxuICAgICAgICB4MSxcbiAgICAgICAgeTEsXG4gICAgICAgIGNsaXAgPSBpZGVudGl0eSQ0LFxuICAgICAgICAvLyBjbGlwIGV4dGVudFxuICAgIGNhY2hlLFxuICAgICAgICBjYWNoZVN0cmVhbSxcbiAgICAgICAgcHJvamVjdGlvbjtcblxuICAgIGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgY2FjaGUgPSBjYWNoZVN0cmVhbSA9IG51bGw7XG4gICAgICByZXR1cm4gcHJvamVjdGlvbjtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvamVjdGlvbiA9IHtcbiAgICAgIHN0cmVhbTogZnVuY3Rpb24gc3RyZWFtKF9zdHJlYW0yKSB7XG4gICAgICAgIHJldHVybiBjYWNoZSAmJiBjYWNoZVN0cmVhbSA9PT0gX3N0cmVhbTIgPyBjYWNoZSA6IGNhY2hlID0gdHJhbnNmb3JtJCQxKGNsaXAoY2FjaGVTdHJlYW0gPSBfc3RyZWFtMikpO1xuICAgICAgfSxcbiAgICAgIGNsaXBFeHRlbnQ6IGZ1bmN0aW9uIGNsaXBFeHRlbnQoXykge1xuICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjbGlwID0gXyA9PSBudWxsID8gKHgwID0geTAgPSB4MSA9IHkxID0gbnVsbCwgaWRlbnRpdHkkNCkgOiBfY2xpcEV4dGVudCh4MCA9ICtfWzBdWzBdLCB5MCA9ICtfWzBdWzFdLCB4MSA9ICtfWzFdWzBdLCB5MSA9ICtfWzFdWzFdKSwgcmVzZXQoKSkgOiB4MCA9PSBudWxsID8gbnVsbCA6IFtbeDAsIHkwXSwgW3gxLCB5MV1dO1xuICAgICAgfSxcbiAgICAgIHNjYWxlOiBmdW5jdGlvbiBzY2FsZShfKSB7XG4gICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRyYW5zZm9ybSQkMSA9IHNjYWxlVHJhbnNsYXRlKChrID0gK18pICogc3gsIGsgKiBzeSwgdHgsIHR5KSwgcmVzZXQoKSkgOiBrO1xuICAgICAgfSxcbiAgICAgIHRyYW5zbGF0ZTogZnVuY3Rpb24gdHJhbnNsYXRlKF8pIHtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodHJhbnNmb3JtJCQxID0gc2NhbGVUcmFuc2xhdGUoayAqIHN4LCBrICogc3ksIHR4ID0gK19bMF0sIHR5ID0gK19bMV0pLCByZXNldCgpKSA6IFt0eCwgdHldO1xuICAgICAgfSxcbiAgICAgIHJlZmxlY3RYOiBmdW5jdGlvbiByZWZsZWN0WChfKSB7XG4gICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRyYW5zZm9ybSQkMSA9IHNjYWxlVHJhbnNsYXRlKGsgKiAoc3ggPSBfID8gLTEgOiAxKSwgayAqIHN5LCB0eCwgdHkpLCByZXNldCgpKSA6IHN4IDwgMDtcbiAgICAgIH0sXG4gICAgICByZWZsZWN0WTogZnVuY3Rpb24gcmVmbGVjdFkoXykge1xuICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0cmFuc2Zvcm0kJDEgPSBzY2FsZVRyYW5zbGF0ZShrICogc3gsIGsgKiAoc3kgPSBfID8gLTEgOiAxKSwgdHgsIHR5KSwgcmVzZXQoKSkgOiBzeSA8IDA7XG4gICAgICB9LFxuICAgICAgZml0RXh0ZW50OiBmdW5jdGlvbiBmaXRFeHRlbnQoZXh0ZW50LCBvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIF9maXRFeHRlbnQocHJvamVjdGlvbiwgZXh0ZW50LCBvYmplY3QpO1xuICAgICAgfSxcbiAgICAgIGZpdFNpemU6IGZ1bmN0aW9uIGZpdFNpemUoc2l6ZSwgb2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBfZml0U2l6ZShwcm9qZWN0aW9uLCBzaXplLCBvYmplY3QpO1xuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gb3J0aG9ncmFwaGljUmF3KHgsIHkpIHtcbiAgICByZXR1cm4gW2NvcyQxKHkpICogc2luJDEoeCksIHNpbiQxKHkpXTtcbiAgfVxuXG4gIG9ydGhvZ3JhcGhpY1Jhdy5pbnZlcnQgPSBhemltdXRoYWxJbnZlcnQoYXNpbik7XG5cbiAgdmFyIG9ydGhvZ3JhcGhpYyA9IGZ1bmN0aW9uIG9ydGhvZ3JhcGhpYygpIHtcbiAgICByZXR1cm4gcHJvamVjdGlvbihvcnRob2dyYXBoaWNSYXcpLnNjYWxlKDI0OS41KS5jbGlwQW5nbGUoOTAgKyBlcHNpbG9uJDIpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHN0ZXJlb2dyYXBoaWNSYXcoeCwgeSkge1xuICAgIHZhciBjeSA9IGNvcyQxKHkpLFxuICAgICAgICBrID0gMSArIGNvcyQxKHgpICogY3k7XG4gICAgcmV0dXJuIFtjeSAqIHNpbiQxKHgpIC8gaywgc2luJDEoeSkgLyBrXTtcbiAgfVxuXG4gIHN0ZXJlb2dyYXBoaWNSYXcuaW52ZXJ0ID0gYXppbXV0aGFsSW52ZXJ0KGZ1bmN0aW9uICh6KSB7XG4gICAgcmV0dXJuIDIgKiBhdGFuKHopO1xuICB9KTtcblxuICB2YXIgc3RlcmVvZ3JhcGhpYyA9IGZ1bmN0aW9uIHN0ZXJlb2dyYXBoaWMoKSB7XG4gICAgcmV0dXJuIHByb2plY3Rpb24oc3RlcmVvZ3JhcGhpY1Jhdykuc2NhbGUoMjUwKS5jbGlwQW5nbGUoMTQyKTtcbiAgfTtcblxuICBmdW5jdGlvbiB0cmFuc3ZlcnNlTWVyY2F0b3JSYXcobGFtYmRhLCBwaGkpIHtcbiAgICByZXR1cm4gW2xvZyh0YW4oKGhhbGZQaSQyICsgcGhpKSAvIDIpKSwgLWxhbWJkYV07XG4gIH1cblxuICB0cmFuc3ZlcnNlTWVyY2F0b3JSYXcuaW52ZXJ0ID0gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICByZXR1cm4gWy15LCAyICogYXRhbihleHAoeCkpIC0gaGFsZlBpJDJdO1xuICB9O1xuXG4gIHZhciB0cmFuc3ZlcnNlTWVyY2F0b3IgPSBmdW5jdGlvbiB0cmFuc3ZlcnNlTWVyY2F0b3IoKSB7XG4gICAgdmFyIG0gPSBtZXJjYXRvclByb2plY3Rpb24odHJhbnN2ZXJzZU1lcmNhdG9yUmF3KSxcbiAgICAgICAgY2VudGVyID0gbS5jZW50ZXIsXG4gICAgICAgIHJvdGF0ZSA9IG0ucm90YXRlO1xuXG4gICAgbS5jZW50ZXIgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBjZW50ZXIoWy1fWzFdLCBfWzBdXSkgOiAoXyA9IGNlbnRlcigpLCBbX1sxXSwgLV9bMF1dKTtcbiAgICB9O1xuXG4gICAgbS5yb3RhdGUgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyByb3RhdGUoW19bMF0sIF9bMV0sIF8ubGVuZ3RoID4gMiA/IF9bMl0gKyA5MCA6IDkwXSkgOiAoXyA9IHJvdGF0ZSgpLCBbX1swXSwgX1sxXSwgX1syXSAtIDkwXSk7XG4gICAgfTtcblxuICAgIHJldHVybiByb3RhdGUoWzAsIDAsIDkwXSkuc2NhbGUoMTU5LjE1NSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gZGVmYXVsdFNlcGFyYXRpb24oYSwgYikge1xuICAgIHJldHVybiBhLnBhcmVudCA9PT0gYi5wYXJlbnQgPyAxIDogMjtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1lYW5YKGNoaWxkcmVuKSB7XG4gICAgcmV0dXJuIGNoaWxkcmVuLnJlZHVjZShtZWFuWFJlZHVjZSwgMCkgLyBjaGlsZHJlbi5sZW5ndGg7XG4gIH1cblxuICBmdW5jdGlvbiBtZWFuWFJlZHVjZSh4LCBjKSB7XG4gICAgcmV0dXJuIHggKyBjLng7XG4gIH1cblxuICBmdW5jdGlvbiBtYXhZKGNoaWxkcmVuKSB7XG4gICAgcmV0dXJuIDEgKyBjaGlsZHJlbi5yZWR1Y2UobWF4WVJlZHVjZSwgMCk7XG4gIH1cblxuICBmdW5jdGlvbiBtYXhZUmVkdWNlKHksIGMpIHtcbiAgICByZXR1cm4gTWF0aC5tYXgoeSwgYy55KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxlYWZMZWZ0KG5vZGUpIHtcbiAgICB2YXIgY2hpbGRyZW47XG4gICAgd2hpbGUgKGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbikge1xuICAgICAgbm9kZSA9IGNoaWxkcmVuWzBdO1xuICAgIH1yZXR1cm4gbm9kZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxlYWZSaWdodChub2RlKSB7XG4gICAgdmFyIGNoaWxkcmVuO1xuICAgIHdoaWxlIChjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIG5vZGUgPSBjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGggLSAxXTtcbiAgICB9cmV0dXJuIG5vZGU7XG4gIH1cblxuICB2YXIgY2x1c3RlciA9IGZ1bmN0aW9uIGNsdXN0ZXIoKSB7XG4gICAgdmFyIHNlcGFyYXRpb24gPSBkZWZhdWx0U2VwYXJhdGlvbixcbiAgICAgICAgZHggPSAxLFxuICAgICAgICBkeSA9IDEsXG4gICAgICAgIG5vZGVTaXplID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiBjbHVzdGVyKHJvb3QpIHtcbiAgICAgIHZhciBwcmV2aW91c05vZGUsXG4gICAgICAgICAgeCA9IDA7XG5cbiAgICAgIC8vIEZpcnN0IHdhbGssIGNvbXB1dGluZyB0aGUgaW5pdGlhbCB4ICYgeSB2YWx1ZXMuXG4gICAgICByb290LmVhY2hBZnRlcihmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICB2YXIgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuICAgICAgICBpZiAoY2hpbGRyZW4pIHtcbiAgICAgICAgICBub2RlLnggPSBtZWFuWChjaGlsZHJlbik7XG4gICAgICAgICAgbm9kZS55ID0gbWF4WShjaGlsZHJlbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbm9kZS54ID0gcHJldmlvdXNOb2RlID8geCArPSBzZXBhcmF0aW9uKG5vZGUsIHByZXZpb3VzTm9kZSkgOiAwO1xuICAgICAgICAgIG5vZGUueSA9IDA7XG4gICAgICAgICAgcHJldmlvdXNOb2RlID0gbm9kZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHZhciBsZWZ0ID0gbGVhZkxlZnQocm9vdCksXG4gICAgICAgICAgcmlnaHQgPSBsZWFmUmlnaHQocm9vdCksXG4gICAgICAgICAgeDAgPSBsZWZ0LnggLSBzZXBhcmF0aW9uKGxlZnQsIHJpZ2h0KSAvIDIsXG4gICAgICAgICAgeDEgPSByaWdodC54ICsgc2VwYXJhdGlvbihyaWdodCwgbGVmdCkgLyAyO1xuXG4gICAgICAvLyBTZWNvbmQgd2Fsaywgbm9ybWFsaXppbmcgeCAmIHkgdG8gdGhlIGRlc2lyZWQgc2l6ZS5cbiAgICAgIHJldHVybiByb290LmVhY2hBZnRlcihub2RlU2l6ZSA/IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIG5vZGUueCA9IChub2RlLnggLSByb290LngpICogZHg7XG4gICAgICAgIG5vZGUueSA9IChyb290LnkgLSBub2RlLnkpICogZHk7XG4gICAgICB9IDogZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgbm9kZS54ID0gKG5vZGUueCAtIHgwKSAvICh4MSAtIHgwKSAqIGR4O1xuICAgICAgICBub2RlLnkgPSAoMSAtIChyb290LnkgPyBub2RlLnkgLyByb290LnkgOiAxKSkgKiBkeTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNsdXN0ZXIuc2VwYXJhdGlvbiA9IGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzZXBhcmF0aW9uID0geCwgY2x1c3RlcikgOiBzZXBhcmF0aW9uO1xuICAgIH07XG5cbiAgICBjbHVzdGVyLnNpemUgPSBmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAobm9kZVNpemUgPSBmYWxzZSwgZHggPSAreFswXSwgZHkgPSAreFsxXSwgY2x1c3RlcikgOiBub2RlU2l6ZSA/IG51bGwgOiBbZHgsIGR5XTtcbiAgICB9O1xuXG4gICAgY2x1c3Rlci5ub2RlU2l6ZSA9IGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChub2RlU2l6ZSA9IHRydWUsIGR4ID0gK3hbMF0sIGR5ID0gK3hbMV0sIGNsdXN0ZXIpIDogbm9kZVNpemUgPyBbZHgsIGR5XSA6IG51bGw7XG4gICAgfTtcblxuICAgIHJldHVybiBjbHVzdGVyO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGNvdW50KG5vZGUpIHtcbiAgICB2YXIgc3VtID0gMCxcbiAgICAgICAgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuLFxuICAgICAgICBpID0gY2hpbGRyZW4gJiYgY2hpbGRyZW4ubGVuZ3RoO1xuICAgIGlmICghaSkgc3VtID0gMTtlbHNlIHdoaWxlICgtLWkgPj0gMCkge1xuICAgICAgc3VtICs9IGNoaWxkcmVuW2ldLnZhbHVlO1xuICAgIH1ub2RlLnZhbHVlID0gc3VtO1xuICB9XG5cbiAgdmFyIG5vZGVfY291bnQgPSBmdW5jdGlvbiBub2RlX2NvdW50KCkge1xuICAgIHJldHVybiB0aGlzLmVhY2hBZnRlcihjb3VudCk7XG4gIH07XG5cbiAgdmFyIG5vZGVfZWFjaCA9IGZ1bmN0aW9uIG5vZGVfZWFjaChjYWxsYmFjaykge1xuICAgIHZhciBub2RlID0gdGhpcyxcbiAgICAgICAgY3VycmVudCxcbiAgICAgICAgbmV4dCA9IFtub2RlXSxcbiAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgIGksXG4gICAgICAgIG47XG4gICAgZG8ge1xuICAgICAgY3VycmVudCA9IG5leHQucmV2ZXJzZSgpLCBuZXh0ID0gW107XG4gICAgICB3aGlsZSAobm9kZSA9IGN1cnJlbnQucG9wKCkpIHtcbiAgICAgICAgY2FsbGJhY2sobm9kZSksIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcbiAgICAgICAgaWYgKGNoaWxkcmVuKSBmb3IgKGkgPSAwLCBuID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgICAgbmV4dC5wdXNoKGNoaWxkcmVuW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gd2hpbGUgKG5leHQubGVuZ3RoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB2YXIgbm9kZV9lYWNoQmVmb3JlID0gZnVuY3Rpb24gbm9kZV9lYWNoQmVmb3JlKGNhbGxiYWNrKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLFxuICAgICAgICBub2RlcyA9IFtub2RlXSxcbiAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgIGk7XG4gICAgd2hpbGUgKG5vZGUgPSBub2Rlcy5wb3AoKSkge1xuICAgICAgY2FsbGJhY2sobm9kZSksIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcbiAgICAgIGlmIChjaGlsZHJlbikgZm9yIChpID0gY2hpbGRyZW4ubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgbm9kZXMucHVzaChjaGlsZHJlbltpXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciBub2RlX2VhY2hBZnRlciA9IGZ1bmN0aW9uIG5vZGVfZWFjaEFmdGVyKGNhbGxiYWNrKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLFxuICAgICAgICBub2RlcyA9IFtub2RlXSxcbiAgICAgICAgbmV4dCA9IFtdLFxuICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgaSxcbiAgICAgICAgbjtcbiAgICB3aGlsZSAobm9kZSA9IG5vZGVzLnBvcCgpKSB7XG4gICAgICBuZXh0LnB1c2gobm9kZSksIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcbiAgICAgIGlmIChjaGlsZHJlbikgZm9yIChpID0gMCwgbiA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICBub2Rlcy5wdXNoKGNoaWxkcmVuW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgd2hpbGUgKG5vZGUgPSBuZXh0LnBvcCgpKSB7XG4gICAgICBjYWxsYmFjayhub2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIG5vZGVfc3VtID0gZnVuY3Rpb24gbm9kZV9zdW0odmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoQWZ0ZXIoZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHZhciBzdW0gPSArdmFsdWUobm9kZS5kYXRhKSB8fCAwLFxuICAgICAgICAgIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbixcbiAgICAgICAgICBpID0gY2hpbGRyZW4gJiYgY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgICAgIHN1bSArPSBjaGlsZHJlbltpXS52YWx1ZTtcbiAgICAgIH1ub2RlLnZhbHVlID0gc3VtO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBub2RlX3NvcnQgPSBmdW5jdGlvbiBub2RlX3NvcnQoY29tcGFyZSkge1xuICAgIHJldHVybiB0aGlzLmVhY2hCZWZvcmUoZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIGlmIChub2RlLmNoaWxkcmVuKSB7XG4gICAgICAgIG5vZGUuY2hpbGRyZW4uc29ydChjb21wYXJlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgbm9kZV9wYXRoID0gZnVuY3Rpb24gbm9kZV9wYXRoKGVuZCkge1xuICAgIHZhciBzdGFydCA9IHRoaXMsXG4gICAgICAgIGFuY2VzdG9yID0gbGVhc3RDb21tb25BbmNlc3RvcihzdGFydCwgZW5kKSxcbiAgICAgICAgbm9kZXMgPSBbc3RhcnRdO1xuICAgIHdoaWxlIChzdGFydCAhPT0gYW5jZXN0b3IpIHtcbiAgICAgIHN0YXJ0ID0gc3RhcnQucGFyZW50O1xuICAgICAgbm9kZXMucHVzaChzdGFydCk7XG4gICAgfVxuICAgIHZhciBrID0gbm9kZXMubGVuZ3RoO1xuICAgIHdoaWxlIChlbmQgIT09IGFuY2VzdG9yKSB7XG4gICAgICBub2Rlcy5zcGxpY2UoaywgMCwgZW5kKTtcbiAgICAgIGVuZCA9IGVuZC5wYXJlbnQ7XG4gICAgfVxuICAgIHJldHVybiBub2RlcztcbiAgfTtcblxuICBmdW5jdGlvbiBsZWFzdENvbW1vbkFuY2VzdG9yKGEsIGIpIHtcbiAgICBpZiAoYSA9PT0gYikgcmV0dXJuIGE7XG4gICAgdmFyIGFOb2RlcyA9IGEuYW5jZXN0b3JzKCksXG4gICAgICAgIGJOb2RlcyA9IGIuYW5jZXN0b3JzKCksXG4gICAgICAgIGMgPSBudWxsO1xuICAgIGEgPSBhTm9kZXMucG9wKCk7XG4gICAgYiA9IGJOb2Rlcy5wb3AoKTtcbiAgICB3aGlsZSAoYSA9PT0gYikge1xuICAgICAgYyA9IGE7XG4gICAgICBhID0gYU5vZGVzLnBvcCgpO1xuICAgICAgYiA9IGJOb2Rlcy5wb3AoKTtcbiAgICB9XG4gICAgcmV0dXJuIGM7XG4gIH1cblxuICB2YXIgbm9kZV9hbmNlc3RvcnMgPSBmdW5jdGlvbiBub2RlX2FuY2VzdG9ycygpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMsXG4gICAgICAgIG5vZGVzID0gW25vZGVdO1xuICAgIHdoaWxlIChub2RlID0gbm9kZS5wYXJlbnQpIHtcbiAgICAgIG5vZGVzLnB1c2gobm9kZSk7XG4gICAgfVxuICAgIHJldHVybiBub2RlcztcbiAgfTtcblxuICB2YXIgbm9kZV9kZXNjZW5kYW50cyA9IGZ1bmN0aW9uIG5vZGVfZGVzY2VuZGFudHMoKSB7XG4gICAgdmFyIG5vZGVzID0gW107XG4gICAgdGhpcy5lYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICBub2Rlcy5wdXNoKG5vZGUpO1xuICAgIH0pO1xuICAgIHJldHVybiBub2RlcztcbiAgfTtcblxuICB2YXIgbm9kZV9sZWF2ZXMgPSBmdW5jdGlvbiBub2RlX2xlYXZlcygpIHtcbiAgICB2YXIgbGVhdmVzID0gW107XG4gICAgdGhpcy5lYWNoQmVmb3JlKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICBpZiAoIW5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgbGVhdmVzLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGxlYXZlcztcbiAgfTtcblxuICB2YXIgbm9kZV9saW5rcyA9IGZ1bmN0aW9uIG5vZGVfbGlua3MoKSB7XG4gICAgdmFyIHJvb3QgPSB0aGlzLFxuICAgICAgICBsaW5rcyA9IFtdO1xuICAgIHJvb3QuZWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgaWYgKG5vZGUgIT09IHJvb3QpIHtcbiAgICAgICAgLy8gRG9u4oCZdCBpbmNsdWRlIHRoZSByb2904oCZcyBwYXJlbnQsIGlmIGFueS5cbiAgICAgICAgbGlua3MucHVzaCh7IHNvdXJjZTogbm9kZS5wYXJlbnQsIHRhcmdldDogbm9kZSB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gbGlua3M7XG4gIH07XG5cbiAgZnVuY3Rpb24gaGllcmFyY2h5KGRhdGEsIGNoaWxkcmVuKSB7XG4gICAgdmFyIHJvb3QgPSBuZXcgTm9kZShkYXRhKSxcbiAgICAgICAgdmFsdWVkID0gK2RhdGEudmFsdWUgJiYgKHJvb3QudmFsdWUgPSBkYXRhLnZhbHVlKSxcbiAgICAgICAgbm9kZSxcbiAgICAgICAgbm9kZXMgPSBbcm9vdF0sXG4gICAgICAgIGNoaWxkLFxuICAgICAgICBjaGlsZHMsXG4gICAgICAgIGksXG4gICAgICAgIG47XG5cbiAgICBpZiAoY2hpbGRyZW4gPT0gbnVsbCkgY2hpbGRyZW4gPSBkZWZhdWx0Q2hpbGRyZW47XG5cbiAgICB3aGlsZSAobm9kZSA9IG5vZGVzLnBvcCgpKSB7XG4gICAgICBpZiAodmFsdWVkKSBub2RlLnZhbHVlID0gK25vZGUuZGF0YS52YWx1ZTtcbiAgICAgIGlmICgoY2hpbGRzID0gY2hpbGRyZW4obm9kZS5kYXRhKSkgJiYgKG4gPSBjaGlsZHMubGVuZ3RoKSkge1xuICAgICAgICBub2RlLmNoaWxkcmVuID0gbmV3IEFycmF5KG4pO1xuICAgICAgICBmb3IgKGkgPSBuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgICBub2Rlcy5wdXNoKGNoaWxkID0gbm9kZS5jaGlsZHJlbltpXSA9IG5ldyBOb2RlKGNoaWxkc1tpXSkpO1xuICAgICAgICAgIGNoaWxkLnBhcmVudCA9IG5vZGU7XG4gICAgICAgICAgY2hpbGQuZGVwdGggPSBub2RlLmRlcHRoICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByb290LmVhY2hCZWZvcmUoY29tcHV0ZUhlaWdodCk7XG4gIH1cblxuICBmdW5jdGlvbiBub2RlX2NvcHkoKSB7XG4gICAgcmV0dXJuIGhpZXJhcmNoeSh0aGlzKS5lYWNoQmVmb3JlKGNvcHlEYXRhKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlZmF1bHRDaGlsZHJlbihkKSB7XG4gICAgcmV0dXJuIGQuY2hpbGRyZW47XG4gIH1cblxuICBmdW5jdGlvbiBjb3B5RGF0YShub2RlKSB7XG4gICAgbm9kZS5kYXRhID0gbm9kZS5kYXRhLmRhdGE7XG4gIH1cblxuICBmdW5jdGlvbiBjb21wdXRlSGVpZ2h0KG5vZGUpIHtcbiAgICB2YXIgaGVpZ2h0ID0gMDtcbiAgICBkbyB7XG4gICAgICBub2RlLmhlaWdodCA9IGhlaWdodDtcbiAgICB9IHdoaWxlICgobm9kZSA9IG5vZGUucGFyZW50KSAmJiBub2RlLmhlaWdodCA8ICsraGVpZ2h0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIE5vZGUoZGF0YSkge1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgdGhpcy5kZXB0aCA9IHRoaXMuaGVpZ2h0ID0gMDtcbiAgICB0aGlzLnBhcmVudCA9IG51bGw7XG4gIH1cblxuICBOb2RlLnByb3RvdHlwZSA9IGhpZXJhcmNoeS5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IE5vZGUsXG4gICAgY291bnQ6IG5vZGVfY291bnQsXG4gICAgZWFjaDogbm9kZV9lYWNoLFxuICAgIGVhY2hBZnRlcjogbm9kZV9lYWNoQWZ0ZXIsXG4gICAgZWFjaEJlZm9yZTogbm9kZV9lYWNoQmVmb3JlLFxuICAgIHN1bTogbm9kZV9zdW0sXG4gICAgc29ydDogbm9kZV9zb3J0LFxuICAgIHBhdGg6IG5vZGVfcGF0aCxcbiAgICBhbmNlc3RvcnM6IG5vZGVfYW5jZXN0b3JzLFxuICAgIGRlc2NlbmRhbnRzOiBub2RlX2Rlc2NlbmRhbnRzLFxuICAgIGxlYXZlczogbm9kZV9sZWF2ZXMsXG4gICAgbGlua3M6IG5vZGVfbGlua3MsXG4gICAgY29weTogbm9kZV9jb3B5XG4gIH07XG5cbiAgdmFyIHNsaWNlJDMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG5cbiAgZnVuY3Rpb24gc2h1ZmZsZSQxKGFycmF5KSB7XG4gICAgdmFyIG0gPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIHQsXG4gICAgICAgIGk7XG5cbiAgICB3aGlsZSAobSkge1xuICAgICAgaSA9IE1hdGgucmFuZG9tKCkgKiBtLS0gfCAwO1xuICAgICAgdCA9IGFycmF5W21dO1xuICAgICAgYXJyYXlbbV0gPSBhcnJheVtpXTtcbiAgICAgIGFycmF5W2ldID0gdDtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICB2YXIgZW5jbG9zZSA9IGZ1bmN0aW9uIGVuY2xvc2UoY2lyY2xlcykge1xuICAgIHZhciBpID0gMCxcbiAgICAgICAgbiA9IChjaXJjbGVzID0gc2h1ZmZsZSQxKHNsaWNlJDMuY2FsbChjaXJjbGVzKSkpLmxlbmd0aCxcbiAgICAgICAgQiA9IFtdLFxuICAgICAgICBwLFxuICAgICAgICBlO1xuXG4gICAgd2hpbGUgKGkgPCBuKSB7XG4gICAgICBwID0gY2lyY2xlc1tpXTtcbiAgICAgIGlmIChlICYmIGVuY2xvc2VzV2VhayhlLCBwKSkgKytpO2Vsc2UgZSA9IGVuY2xvc2VCYXNpcyhCID0gZXh0ZW5kQmFzaXMoQiwgcCkpLCBpID0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gZTtcbiAgfTtcblxuICBmdW5jdGlvbiBleHRlbmRCYXNpcyhCLCBwKSB7XG4gICAgdmFyIGksIGo7XG5cbiAgICBpZiAoZW5jbG9zZXNXZWFrQWxsKHAsIEIpKSByZXR1cm4gW3BdO1xuXG4gICAgLy8gSWYgd2UgZ2V0IGhlcmUgdGhlbiBCIG11c3QgaGF2ZSBhdCBsZWFzdCBvbmUgZWxlbWVudC5cbiAgICBmb3IgKGkgPSAwOyBpIDwgQi5sZW5ndGg7ICsraSkge1xuICAgICAgaWYgKGVuY2xvc2VzTm90KHAsIEJbaV0pICYmIGVuY2xvc2VzV2Vha0FsbChlbmNsb3NlQmFzaXMyKEJbaV0sIHApLCBCKSkge1xuICAgICAgICByZXR1cm4gW0JbaV0sIHBdO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIElmIHdlIGdldCBoZXJlIHRoZW4gQiBtdXN0IGhhdmUgYXQgbGVhc3QgdHdvIGVsZW1lbnRzLlxuICAgIGZvciAoaSA9IDA7IGkgPCBCLmxlbmd0aCAtIDE7ICsraSkge1xuICAgICAgZm9yIChqID0gaSArIDE7IGogPCBCLmxlbmd0aDsgKytqKSB7XG4gICAgICAgIGlmIChlbmNsb3Nlc05vdChlbmNsb3NlQmFzaXMyKEJbaV0sIEJbal0pLCBwKSAmJiBlbmNsb3Nlc05vdChlbmNsb3NlQmFzaXMyKEJbaV0sIHApLCBCW2pdKSAmJiBlbmNsb3Nlc05vdChlbmNsb3NlQmFzaXMyKEJbal0sIHApLCBCW2ldKSAmJiBlbmNsb3Nlc1dlYWtBbGwoZW5jbG9zZUJhc2lzMyhCW2ldLCBCW2pdLCBwKSwgQikpIHtcbiAgICAgICAgICByZXR1cm4gW0JbaV0sIEJbal0sIHBdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSWYgd2UgZ2V0IGhlcmUgdGhlbiBzb21ldGhpbmcgaXMgdmVyeSB3cm9uZy5cbiAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVuY2xvc2VzTm90KGEsIGIpIHtcbiAgICB2YXIgZHIgPSBhLnIgLSBiLnIsXG4gICAgICAgIGR4ID0gYi54IC0gYS54LFxuICAgICAgICBkeSA9IGIueSAtIGEueTtcbiAgICByZXR1cm4gZHIgPCAwIHx8IGRyICogZHIgPCBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVuY2xvc2VzV2VhayhhLCBiKSB7XG4gICAgdmFyIGRyID0gYS5yIC0gYi5yICsgMWUtNixcbiAgICAgICAgZHggPSBiLnggLSBhLngsXG4gICAgICAgIGR5ID0gYi55IC0gYS55O1xuICAgIHJldHVybiBkciA+IDAgJiYgZHIgKiBkciA+IGR4ICogZHggKyBkeSAqIGR5O1xuICB9XG5cbiAgZnVuY3Rpb24gZW5jbG9zZXNXZWFrQWxsKGEsIEIpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IEIubGVuZ3RoOyArK2kpIHtcbiAgICAgIGlmICghZW5jbG9zZXNXZWFrKGEsIEJbaV0pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBmdW5jdGlvbiBlbmNsb3NlQmFzaXMoQikge1xuICAgIHN3aXRjaCAoQi5sZW5ndGgpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuIGVuY2xvc2VCYXNpczEoQlswXSk7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIHJldHVybiBlbmNsb3NlQmFzaXMyKEJbMF0sIEJbMV0pO1xuICAgICAgY2FzZSAzOlxuICAgICAgICByZXR1cm4gZW5jbG9zZUJhc2lzMyhCWzBdLCBCWzFdLCBCWzJdKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBlbmNsb3NlQmFzaXMxKGEpIHtcbiAgICByZXR1cm4ge1xuICAgICAgeDogYS54LFxuICAgICAgeTogYS55LFxuICAgICAgcjogYS5yXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVuY2xvc2VCYXNpczIoYSwgYikge1xuICAgIHZhciB4MSA9IGEueCxcbiAgICAgICAgeTEgPSBhLnksXG4gICAgICAgIHIxID0gYS5yLFxuICAgICAgICB4MiA9IGIueCxcbiAgICAgICAgeTIgPSBiLnksXG4gICAgICAgIHIyID0gYi5yLFxuICAgICAgICB4MjEgPSB4MiAtIHgxLFxuICAgICAgICB5MjEgPSB5MiAtIHkxLFxuICAgICAgICByMjEgPSByMiAtIHIxLFxuICAgICAgICBsID0gTWF0aC5zcXJ0KHgyMSAqIHgyMSArIHkyMSAqIHkyMSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6ICh4MSArIHgyICsgeDIxIC8gbCAqIHIyMSkgLyAyLFxuICAgICAgeTogKHkxICsgeTIgKyB5MjEgLyBsICogcjIxKSAvIDIsXG4gICAgICByOiAobCArIHIxICsgcjIpIC8gMlxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBlbmNsb3NlQmFzaXMzKGEsIGIsIGMpIHtcbiAgICB2YXIgeDEgPSBhLngsXG4gICAgICAgIHkxID0gYS55LFxuICAgICAgICByMSA9IGEucixcbiAgICAgICAgeDIgPSBiLngsXG4gICAgICAgIHkyID0gYi55LFxuICAgICAgICByMiA9IGIucixcbiAgICAgICAgeDMgPSBjLngsXG4gICAgICAgIHkzID0gYy55LFxuICAgICAgICByMyA9IGMucixcbiAgICAgICAgYTIgPSB4MSAtIHgyLFxuICAgICAgICBhMyA9IHgxIC0geDMsXG4gICAgICAgIGIyID0geTEgLSB5MixcbiAgICAgICAgYjMgPSB5MSAtIHkzLFxuICAgICAgICBjMiA9IHIyIC0gcjEsXG4gICAgICAgIGMzID0gcjMgLSByMSxcbiAgICAgICAgZDEgPSB4MSAqIHgxICsgeTEgKiB5MSAtIHIxICogcjEsXG4gICAgICAgIGQyID0gZDEgLSB4MiAqIHgyIC0geTIgKiB5MiArIHIyICogcjIsXG4gICAgICAgIGQzID0gZDEgLSB4MyAqIHgzIC0geTMgKiB5MyArIHIzICogcjMsXG4gICAgICAgIGFiID0gYTMgKiBiMiAtIGEyICogYjMsXG4gICAgICAgIHhhID0gKGIyICogZDMgLSBiMyAqIGQyKSAvIChhYiAqIDIpIC0geDEsXG4gICAgICAgIHhiID0gKGIzICogYzIgLSBiMiAqIGMzKSAvIGFiLFxuICAgICAgICB5YSA9IChhMyAqIGQyIC0gYTIgKiBkMykgLyAoYWIgKiAyKSAtIHkxLFxuICAgICAgICB5YiA9IChhMiAqIGMzIC0gYTMgKiBjMikgLyBhYixcbiAgICAgICAgQSA9IHhiICogeGIgKyB5YiAqIHliIC0gMSxcbiAgICAgICAgQiA9IDIgKiAocjEgKyB4YSAqIHhiICsgeWEgKiB5YiksXG4gICAgICAgIEMgPSB4YSAqIHhhICsgeWEgKiB5YSAtIHIxICogcjEsXG4gICAgICAgIHIgPSAtKEEgPyAoQiArIE1hdGguc3FydChCICogQiAtIDQgKiBBICogQykpIC8gKDIgKiBBKSA6IEMgLyBCKTtcbiAgICByZXR1cm4ge1xuICAgICAgeDogeDEgKyB4YSArIHhiICogcixcbiAgICAgIHk6IHkxICsgeWEgKyB5YiAqIHIsXG4gICAgICByOiByXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBsYWNlKGEsIGIsIGMpIHtcbiAgICB2YXIgYXggPSBhLngsXG4gICAgICAgIGF5ID0gYS55LFxuICAgICAgICBkYSA9IGIuciArIGMucixcbiAgICAgICAgZGIgPSBhLnIgKyBjLnIsXG4gICAgICAgIGR4ID0gYi54IC0gYXgsXG4gICAgICAgIGR5ID0gYi55IC0gYXksXG4gICAgICAgIGRjID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgaWYgKGRjKSB7XG4gICAgICB2YXIgeCA9IDAuNSArICgoZGIgKj0gZGIpIC0gKGRhICo9IGRhKSkgLyAoMiAqIGRjKSxcbiAgICAgICAgICB5ID0gTWF0aC5zcXJ0KE1hdGgubWF4KDAsIDIgKiBkYSAqIChkYiArIGRjKSAtIChkYiAtPSBkYykgKiBkYiAtIGRhICogZGEpKSAvICgyICogZGMpO1xuICAgICAgYy54ID0gYXggKyB4ICogZHggKyB5ICogZHk7XG4gICAgICBjLnkgPSBheSArIHggKiBkeSAtIHkgKiBkeDtcbiAgICB9IGVsc2Uge1xuICAgICAgYy54ID0gYXggKyBkYjtcbiAgICAgIGMueSA9IGF5O1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGludGVyc2VjdHMoYSwgYikge1xuICAgIHZhciBkeCA9IGIueCAtIGEueCxcbiAgICAgICAgZHkgPSBiLnkgLSBhLnksXG4gICAgICAgIGRyID0gYS5yICsgYi5yO1xuICAgIHJldHVybiBkciAqIGRyIC0gMWUtNiA+IGR4ICogZHggKyBkeSAqIGR5O1xuICB9XG5cbiAgZnVuY3Rpb24gc2NvcmUobm9kZSkge1xuICAgIHZhciBhID0gbm9kZS5fLFxuICAgICAgICBiID0gbm9kZS5uZXh0Ll8sXG4gICAgICAgIGFiID0gYS5yICsgYi5yLFxuICAgICAgICBkeCA9IChhLnggKiBiLnIgKyBiLnggKiBhLnIpIC8gYWIsXG4gICAgICAgIGR5ID0gKGEueSAqIGIuciArIGIueSAqIGEucikgLyBhYjtcbiAgICByZXR1cm4gZHggKiBkeCArIGR5ICogZHk7XG4gIH1cblxuICBmdW5jdGlvbiBOb2RlJDEoY2lyY2xlKSB7XG4gICAgdGhpcy5fID0gY2lyY2xlO1xuICAgIHRoaXMubmV4dCA9IG51bGw7XG4gICAgdGhpcy5wcmV2aW91cyA9IG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBwYWNrRW5jbG9zZShjaXJjbGVzKSB7XG4gICAgaWYgKCEobiA9IGNpcmNsZXMubGVuZ3RoKSkgcmV0dXJuIDA7XG5cbiAgICB2YXIgYSwgYiwgYywgbiwgYWEsIGNhLCBpLCBqLCBrLCBzaiwgc2s7XG5cbiAgICAvLyBQbGFjZSB0aGUgZmlyc3QgY2lyY2xlLlxuICAgIGEgPSBjaXJjbGVzWzBdLCBhLnggPSAwLCBhLnkgPSAwO1xuICAgIGlmICghKG4gPiAxKSkgcmV0dXJuIGEucjtcblxuICAgIC8vIFBsYWNlIHRoZSBzZWNvbmQgY2lyY2xlLlxuICAgIGIgPSBjaXJjbGVzWzFdLCBhLnggPSAtYi5yLCBiLnggPSBhLnIsIGIueSA9IDA7XG4gICAgaWYgKCEobiA+IDIpKSByZXR1cm4gYS5yICsgYi5yO1xuXG4gICAgLy8gUGxhY2UgdGhlIHRoaXJkIGNpcmNsZS5cbiAgICBwbGFjZShiLCBhLCBjID0gY2lyY2xlc1syXSk7XG5cbiAgICAvLyBJbml0aWFsaXplIHRoZSBmcm9udC1jaGFpbiB1c2luZyB0aGUgZmlyc3QgdGhyZWUgY2lyY2xlcyBhLCBiIGFuZCBjLlxuICAgIGEgPSBuZXcgTm9kZSQxKGEpLCBiID0gbmV3IE5vZGUkMShiKSwgYyA9IG5ldyBOb2RlJDEoYyk7XG4gICAgYS5uZXh0ID0gYy5wcmV2aW91cyA9IGI7XG4gICAgYi5uZXh0ID0gYS5wcmV2aW91cyA9IGM7XG4gICAgYy5uZXh0ID0gYi5wcmV2aW91cyA9IGE7XG5cbiAgICAvLyBBdHRlbXB0IHRvIHBsYWNlIGVhY2ggcmVtYWluaW5nIGNpcmNsZeKAplxuICAgIHBhY2s6IGZvciAoaSA9IDM7IGkgPCBuOyArK2kpIHtcbiAgICAgIHBsYWNlKGEuXywgYi5fLCBjID0gY2lyY2xlc1tpXSksIGMgPSBuZXcgTm9kZSQxKGMpO1xuXG4gICAgICAvLyBGaW5kIHRoZSBjbG9zZXN0IGludGVyc2VjdGluZyBjaXJjbGUgb24gdGhlIGZyb250LWNoYWluLCBpZiBhbnkuXG4gICAgICAvLyDigJxDbG9zZW5lc3PigJ0gaXMgZGV0ZXJtaW5lZCBieSBsaW5lYXIgZGlzdGFuY2UgYWxvbmcgdGhlIGZyb250LWNoYWluLlxuICAgICAgLy8g4oCcQWhlYWTigJ0gb3Ig4oCcYmVoaW5k4oCdIGlzIGxpa2V3aXNlIGRldGVybWluZWQgYnkgbGluZWFyIGRpc3RhbmNlLlxuICAgICAgaiA9IGIubmV4dCwgayA9IGEucHJldmlvdXMsIHNqID0gYi5fLnIsIHNrID0gYS5fLnI7XG4gICAgICBkbyB7XG4gICAgICAgIGlmIChzaiA8PSBzaykge1xuICAgICAgICAgIGlmIChpbnRlcnNlY3RzKGouXywgYy5fKSkge1xuICAgICAgICAgICAgYiA9IGosIGEubmV4dCA9IGIsIGIucHJldmlvdXMgPSBhLCAtLWk7XG4gICAgICAgICAgICBjb250aW51ZSBwYWNrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzaiArPSBqLl8uciwgaiA9IGoubmV4dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoaW50ZXJzZWN0cyhrLl8sIGMuXykpIHtcbiAgICAgICAgICAgIGEgPSBrLCBhLm5leHQgPSBiLCBiLnByZXZpb3VzID0gYSwgLS1pO1xuICAgICAgICAgICAgY29udGludWUgcGFjaztcbiAgICAgICAgICB9XG4gICAgICAgICAgc2sgKz0gay5fLnIsIGsgPSBrLnByZXZpb3VzO1xuICAgICAgICB9XG4gICAgICB9IHdoaWxlIChqICE9PSBrLm5leHQpO1xuXG4gICAgICAvLyBTdWNjZXNzISBJbnNlcnQgdGhlIG5ldyBjaXJjbGUgYyBiZXR3ZWVuIGEgYW5kIGIuXG4gICAgICBjLnByZXZpb3VzID0gYSwgYy5uZXh0ID0gYiwgYS5uZXh0ID0gYi5wcmV2aW91cyA9IGIgPSBjO1xuXG4gICAgICAvLyBDb21wdXRlIHRoZSBuZXcgY2xvc2VzdCBjaXJjbGUgcGFpciB0byB0aGUgY2VudHJvaWQuXG4gICAgICBhYSA9IHNjb3JlKGEpO1xuICAgICAgd2hpbGUgKChjID0gYy5uZXh0KSAhPT0gYikge1xuICAgICAgICBpZiAoKGNhID0gc2NvcmUoYykpIDwgYWEpIHtcbiAgICAgICAgICBhID0gYywgYWEgPSBjYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYiA9IGEubmV4dDtcbiAgICB9XG5cbiAgICAvLyBDb21wdXRlIHRoZSBlbmNsb3NpbmcgY2lyY2xlIG9mIHRoZSBmcm9udCBjaGFpbi5cbiAgICBhID0gW2IuX10sIGMgPSBiO3doaWxlICgoYyA9IGMubmV4dCkgIT09IGIpIHtcbiAgICAgIGEucHVzaChjLl8pO1xuICAgIH1jID0gZW5jbG9zZShhKTtcblxuICAgIC8vIFRyYW5zbGF0ZSB0aGUgY2lyY2xlcyB0byBwdXQgdGhlIGVuY2xvc2luZyBjaXJjbGUgYXJvdW5kIHRoZSBvcmlnaW4uXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgYSA9IGNpcmNsZXNbaV0sIGEueCAtPSBjLngsIGEueSAtPSBjLnk7XG4gICAgfXJldHVybiBjLnI7XG4gIH1cblxuICB2YXIgc2libGluZ3MgPSBmdW5jdGlvbiBzaWJsaW5ncyhjaXJjbGVzKSB7XG4gICAgcGFja0VuY2xvc2UoY2lyY2xlcyk7XG4gICAgcmV0dXJuIGNpcmNsZXM7XG4gIH07XG5cbiAgZnVuY3Rpb24gb3B0aW9uYWwoZikge1xuICAgIHJldHVybiBmID09IG51bGwgPyBudWxsIDogcmVxdWlyZWQoZik7XG4gIH1cblxuICBmdW5jdGlvbiByZXF1aXJlZChmKSB7XG4gICAgaWYgKHR5cGVvZiBmICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcigpO1xuICAgIHJldHVybiBmO1xuICB9XG5cbiAgZnVuY3Rpb24gY29uc3RhbnRaZXJvKCkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgdmFyIGNvbnN0YW50JDggPSBmdW5jdGlvbiBjb25zdGFudCQ4KHgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHg7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBkZWZhdWx0UmFkaXVzJDEoZCkge1xuICAgIHJldHVybiBNYXRoLnNxcnQoZC52YWx1ZSk7XG4gIH1cblxuICB2YXIgaW5kZXgkMiA9IGZ1bmN0aW9uIGluZGV4JDIoKSB7XG4gICAgdmFyIHJhZGl1cyA9IG51bGwsXG4gICAgICAgIGR4ID0gMSxcbiAgICAgICAgZHkgPSAxLFxuICAgICAgICBwYWRkaW5nID0gY29uc3RhbnRaZXJvO1xuXG4gICAgZnVuY3Rpb24gcGFjayhyb290KSB7XG4gICAgICByb290LnggPSBkeCAvIDIsIHJvb3QueSA9IGR5IC8gMjtcbiAgICAgIGlmIChyYWRpdXMpIHtcbiAgICAgICAgcm9vdC5lYWNoQmVmb3JlKHJhZGl1c0xlYWYocmFkaXVzKSkuZWFjaEFmdGVyKHBhY2tDaGlsZHJlbihwYWRkaW5nLCAwLjUpKS5lYWNoQmVmb3JlKHRyYW5zbGF0ZUNoaWxkKDEpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJvb3QuZWFjaEJlZm9yZShyYWRpdXNMZWFmKGRlZmF1bHRSYWRpdXMkMSkpLmVhY2hBZnRlcihwYWNrQ2hpbGRyZW4oY29uc3RhbnRaZXJvLCAxKSkuZWFjaEFmdGVyKHBhY2tDaGlsZHJlbihwYWRkaW5nLCByb290LnIgLyBNYXRoLm1pbihkeCwgZHkpKSkuZWFjaEJlZm9yZSh0cmFuc2xhdGVDaGlsZChNYXRoLm1pbihkeCwgZHkpIC8gKDIgKiByb290LnIpKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcm9vdDtcbiAgICB9XG5cbiAgICBwYWNrLnJhZGl1cyA9IGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYWRpdXMgPSBvcHRpb25hbCh4KSwgcGFjaykgOiByYWRpdXM7XG4gICAgfTtcblxuICAgIHBhY2suc2l6ZSA9IGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkeCA9ICt4WzBdLCBkeSA9ICt4WzFdLCBwYWNrKSA6IFtkeCwgZHldO1xuICAgIH07XG5cbiAgICBwYWNrLnBhZGRpbmcgPSBmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZyA9IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4IDogY29uc3RhbnQkOCgreCksIHBhY2spIDogcGFkZGluZztcbiAgICB9O1xuXG4gICAgcmV0dXJuIHBhY2s7XG4gIH07XG5cbiAgZnVuY3Rpb24gcmFkaXVzTGVhZihyYWRpdXMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIGlmICghbm9kZS5jaGlsZHJlbikge1xuICAgICAgICBub2RlLnIgPSBNYXRoLm1heCgwLCArcmFkaXVzKG5vZGUpIHx8IDApO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBwYWNrQ2hpbGRyZW4ocGFkZGluZywgaykge1xuICAgIHJldHVybiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgaWYgKGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbikge1xuICAgICAgICB2YXIgY2hpbGRyZW4sXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgbiA9IGNoaWxkcmVuLmxlbmd0aCxcbiAgICAgICAgICAgIHIgPSBwYWRkaW5nKG5vZGUpICogayB8fCAwLFxuICAgICAgICAgICAgZTtcblxuICAgICAgICBpZiAocikgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICAgIGNoaWxkcmVuW2ldLnIgKz0gcjtcbiAgICAgICAgfWUgPSBwYWNrRW5jbG9zZShjaGlsZHJlbik7XG4gICAgICAgIGlmIChyKSBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgICAgY2hpbGRyZW5baV0uciAtPSByO1xuICAgICAgICB9bm9kZS5yID0gZSArIHI7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zbGF0ZUNoaWxkKGspIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudDtcbiAgICAgIG5vZGUuciAqPSBrO1xuICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICBub2RlLnggPSBwYXJlbnQueCArIGsgKiBub2RlLng7XG4gICAgICAgIG5vZGUueSA9IHBhcmVudC55ICsgayAqIG5vZGUueTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgdmFyIHJvdW5kTm9kZSA9IGZ1bmN0aW9uIHJvdW5kTm9kZShub2RlKSB7XG4gICAgbm9kZS54MCA9IE1hdGgucm91bmQobm9kZS54MCk7XG4gICAgbm9kZS55MCA9IE1hdGgucm91bmQobm9kZS55MCk7XG4gICAgbm9kZS54MSA9IE1hdGgucm91bmQobm9kZS54MSk7XG4gICAgbm9kZS55MSA9IE1hdGgucm91bmQobm9kZS55MSk7XG4gIH07XG5cbiAgdmFyIHRyZWVtYXBEaWNlID0gZnVuY3Rpb24gdHJlZW1hcERpY2UocGFyZW50LCB4MCwgeTAsIHgxLCB5MSkge1xuICAgIHZhciBub2RlcyA9IHBhcmVudC5jaGlsZHJlbixcbiAgICAgICAgbm9kZSxcbiAgICAgICAgaSA9IC0xLFxuICAgICAgICBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgICBrID0gcGFyZW50LnZhbHVlICYmICh4MSAtIHgwKSAvIHBhcmVudC52YWx1ZTtcblxuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBub2RlID0gbm9kZXNbaV0sIG5vZGUueTAgPSB5MCwgbm9kZS55MSA9IHkxO1xuICAgICAgbm9kZS54MCA9IHgwLCBub2RlLngxID0geDAgKz0gbm9kZS52YWx1ZSAqIGs7XG4gICAgfVxuICB9O1xuXG4gIHZhciBwYXJ0aXRpb24gPSBmdW5jdGlvbiBwYXJ0aXRpb24oKSB7XG4gICAgdmFyIGR4ID0gMSxcbiAgICAgICAgZHkgPSAxLFxuICAgICAgICBwYWRkaW5nID0gMCxcbiAgICAgICAgcm91bmQgPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIHBhcnRpdGlvbihyb290KSB7XG4gICAgICB2YXIgbiA9IHJvb3QuaGVpZ2h0ICsgMTtcbiAgICAgIHJvb3QueDAgPSByb290LnkwID0gcGFkZGluZztcbiAgICAgIHJvb3QueDEgPSBkeDtcbiAgICAgIHJvb3QueTEgPSBkeSAvIG47XG4gICAgICByb290LmVhY2hCZWZvcmUocG9zaXRpb25Ob2RlKGR5LCBuKSk7XG4gICAgICBpZiAocm91bmQpIHJvb3QuZWFjaEJlZm9yZShyb3VuZE5vZGUpO1xuICAgICAgcmV0dXJuIHJvb3Q7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcG9zaXRpb25Ob2RlKGR5LCBuKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgICB0cmVlbWFwRGljZShub2RlLCBub2RlLngwLCBkeSAqIChub2RlLmRlcHRoICsgMSkgLyBuLCBub2RlLngxLCBkeSAqIChub2RlLmRlcHRoICsgMikgLyBuKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgeDAgPSBub2RlLngwLFxuICAgICAgICAgICAgeTAgPSBub2RlLnkwLFxuICAgICAgICAgICAgeDEgPSBub2RlLngxIC0gcGFkZGluZyxcbiAgICAgICAgICAgIHkxID0gbm9kZS55MSAtIHBhZGRpbmc7XG4gICAgICAgIGlmICh4MSA8IHgwKSB4MCA9IHgxID0gKHgwICsgeDEpIC8gMjtcbiAgICAgICAgaWYgKHkxIDwgeTApIHkwID0geTEgPSAoeTAgKyB5MSkgLyAyO1xuICAgICAgICBub2RlLngwID0geDA7XG4gICAgICAgIG5vZGUueTAgPSB5MDtcbiAgICAgICAgbm9kZS54MSA9IHgxO1xuICAgICAgICBub2RlLnkxID0geTE7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHBhcnRpdGlvbi5yb3VuZCA9IGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyb3VuZCA9ICEheCwgcGFydGl0aW9uKSA6IHJvdW5kO1xuICAgIH07XG5cbiAgICBwYXJ0aXRpb24uc2l6ZSA9IGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkeCA9ICt4WzBdLCBkeSA9ICt4WzFdLCBwYXJ0aXRpb24pIDogW2R4LCBkeV07XG4gICAgfTtcblxuICAgIHBhcnRpdGlvbi5wYWRkaW5nID0gZnVuY3Rpb24gKHgpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmcgPSAreCwgcGFydGl0aW9uKSA6IHBhZGRpbmc7XG4gICAgfTtcblxuICAgIHJldHVybiBwYXJ0aXRpb247XG4gIH07XG5cbiAgdmFyIGtleVByZWZpeCQxID0gXCIkXCI7XG4gIHZhciBwcmVyb290ID0geyBkZXB0aDogLTEgfTtcbiAgdmFyIGFtYmlndW91cyA9IHt9O1xuXG4gIGZ1bmN0aW9uIGRlZmF1bHRJZChkKSB7XG4gICAgcmV0dXJuIGQuaWQ7XG4gIH1cblxuICBmdW5jdGlvbiBkZWZhdWx0UGFyZW50SWQoZCkge1xuICAgIHJldHVybiBkLnBhcmVudElkO1xuICB9XG5cbiAgdmFyIHN0cmF0aWZ5ID0gZnVuY3Rpb24gc3RyYXRpZnkoKSB7XG4gICAgdmFyIGlkID0gZGVmYXVsdElkLFxuICAgICAgICBwYXJlbnRJZCA9IGRlZmF1bHRQYXJlbnRJZDtcblxuICAgIGZ1bmN0aW9uIHN0cmF0aWZ5KGRhdGEpIHtcbiAgICAgIHZhciBkLFxuICAgICAgICAgIGksXG4gICAgICAgICAgbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICAgIHJvb3QsXG4gICAgICAgICAgcGFyZW50LFxuICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgbm9kZXMgPSBuZXcgQXJyYXkobiksXG4gICAgICAgICAgbm9kZUlkLFxuICAgICAgICAgIG5vZGVLZXksXG4gICAgICAgICAgbm9kZUJ5S2V5ID0ge307XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgZCA9IGRhdGFbaV0sIG5vZGUgPSBub2Rlc1tpXSA9IG5ldyBOb2RlKGQpO1xuICAgICAgICBpZiAoKG5vZGVJZCA9IGlkKGQsIGksIGRhdGEpKSAhPSBudWxsICYmIChub2RlSWQgKz0gXCJcIikpIHtcbiAgICAgICAgICBub2RlS2V5ID0ga2V5UHJlZml4JDEgKyAobm9kZS5pZCA9IG5vZGVJZCk7XG4gICAgICAgICAgbm9kZUJ5S2V5W25vZGVLZXldID0gbm9kZUtleSBpbiBub2RlQnlLZXkgPyBhbWJpZ3VvdXMgOiBub2RlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgbm9kZSA9IG5vZGVzW2ldLCBub2RlSWQgPSBwYXJlbnRJZChkYXRhW2ldLCBpLCBkYXRhKTtcbiAgICAgICAgaWYgKG5vZGVJZCA9PSBudWxsIHx8ICEobm9kZUlkICs9IFwiXCIpKSB7XG4gICAgICAgICAgaWYgKHJvb3QpIHRocm93IG5ldyBFcnJvcihcIm11bHRpcGxlIHJvb3RzXCIpO1xuICAgICAgICAgIHJvb3QgPSBub2RlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhcmVudCA9IG5vZGVCeUtleVtrZXlQcmVmaXgkMSArIG5vZGVJZF07XG4gICAgICAgICAgaWYgKCFwYXJlbnQpIHRocm93IG5ldyBFcnJvcihcIm1pc3Npbmc6IFwiICsgbm9kZUlkKTtcbiAgICAgICAgICBpZiAocGFyZW50ID09PSBhbWJpZ3VvdXMpIHRocm93IG5ldyBFcnJvcihcImFtYmlndW91czogXCIgKyBub2RlSWQpO1xuICAgICAgICAgIGlmIChwYXJlbnQuY2hpbGRyZW4pIHBhcmVudC5jaGlsZHJlbi5wdXNoKG5vZGUpO2Vsc2UgcGFyZW50LmNoaWxkcmVuID0gW25vZGVdO1xuICAgICAgICAgIG5vZGUucGFyZW50ID0gcGFyZW50O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghcm9vdCkgdGhyb3cgbmV3IEVycm9yKFwibm8gcm9vdFwiKTtcbiAgICAgIHJvb3QucGFyZW50ID0gcHJlcm9vdDtcbiAgICAgIHJvb3QuZWFjaEJlZm9yZShmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICBub2RlLmRlcHRoID0gbm9kZS5wYXJlbnQuZGVwdGggKyAxOy0tbjtcbiAgICAgIH0pLmVhY2hCZWZvcmUoY29tcHV0ZUhlaWdodCk7XG4gICAgICByb290LnBhcmVudCA9IG51bGw7XG4gICAgICBpZiAobiA+IDApIHRocm93IG5ldyBFcnJvcihcImN5Y2xlXCIpO1xuXG4gICAgICByZXR1cm4gcm9vdDtcbiAgICB9XG5cbiAgICBzdHJhdGlmeS5pZCA9IGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpZCA9IHJlcXVpcmVkKHgpLCBzdHJhdGlmeSkgOiBpZDtcbiAgICB9O1xuXG4gICAgc3RyYXRpZnkucGFyZW50SWQgPSBmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFyZW50SWQgPSByZXF1aXJlZCh4KSwgc3RyYXRpZnkpIDogcGFyZW50SWQ7XG4gICAgfTtcblxuICAgIHJldHVybiBzdHJhdGlmeTtcbiAgfTtcblxuICBmdW5jdGlvbiBkZWZhdWx0U2VwYXJhdGlvbiQxKGEsIGIpIHtcbiAgICByZXR1cm4gYS5wYXJlbnQgPT09IGIucGFyZW50ID8gMSA6IDI7XG4gIH1cblxuICAvLyBmdW5jdGlvbiByYWRpYWxTZXBhcmF0aW9uKGEsIGIpIHtcbiAgLy8gICByZXR1cm4gKGEucGFyZW50ID09PSBiLnBhcmVudCA/IDEgOiAyKSAvIGEuZGVwdGg7XG4gIC8vIH1cblxuICAvLyBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gdHJhdmVyc2UgdGhlIGxlZnQgY29udG91ciBvZiBhIHN1YnRyZWUgKG9yXG4gIC8vIHN1YmZvcmVzdCkuIEl0IHJldHVybnMgdGhlIHN1Y2Nlc3NvciBvZiB2IG9uIHRoaXMgY29udG91ci4gVGhpcyBzdWNjZXNzb3IgaXNcbiAgLy8gZWl0aGVyIGdpdmVuIGJ5IHRoZSBsZWZ0bW9zdCBjaGlsZCBvZiB2IG9yIGJ5IHRoZSB0aHJlYWQgb2Ygdi4gVGhlIGZ1bmN0aW9uXG4gIC8vIHJldHVybnMgbnVsbCBpZiBhbmQgb25seSBpZiB2IGlzIG9uIHRoZSBoaWdoZXN0IGxldmVsIG9mIGl0cyBzdWJ0cmVlLlxuICBmdW5jdGlvbiBuZXh0TGVmdCh2KSB7XG4gICAgdmFyIGNoaWxkcmVuID0gdi5jaGlsZHJlbjtcbiAgICByZXR1cm4gY2hpbGRyZW4gPyBjaGlsZHJlblswXSA6IHYudDtcbiAgfVxuXG4gIC8vIFRoaXMgZnVuY3Rpb24gd29ya3MgYW5hbG9nb3VzbHkgdG8gbmV4dExlZnQuXG4gIGZ1bmN0aW9uIG5leHRSaWdodCh2KSB7XG4gICAgdmFyIGNoaWxkcmVuID0gdi5jaGlsZHJlbjtcbiAgICByZXR1cm4gY2hpbGRyZW4gPyBjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGggLSAxXSA6IHYudDtcbiAgfVxuXG4gIC8vIFNoaWZ0cyB0aGUgY3VycmVudCBzdWJ0cmVlIHJvb3RlZCBhdCB3Ky4gVGhpcyBpcyBkb25lIGJ5IGluY3JlYXNpbmdcbiAgLy8gcHJlbGltKHcrKSBhbmQgbW9kKHcrKSBieSBzaGlmdC5cbiAgZnVuY3Rpb24gbW92ZVN1YnRyZWUod20sIHdwLCBzaGlmdCkge1xuICAgIHZhciBjaGFuZ2UgPSBzaGlmdCAvICh3cC5pIC0gd20uaSk7XG4gICAgd3AuYyAtPSBjaGFuZ2U7XG4gICAgd3AucyArPSBzaGlmdDtcbiAgICB3bS5jICs9IGNoYW5nZTtcbiAgICB3cC56ICs9IHNoaWZ0O1xuICAgIHdwLm0gKz0gc2hpZnQ7XG4gIH1cblxuICAvLyBBbGwgb3RoZXIgc2hpZnRzLCBhcHBsaWVkIHRvIHRoZSBzbWFsbGVyIHN1YnRyZWVzIGJldHdlZW4gdy0gYW5kIHcrLCBhcmVcbiAgLy8gcGVyZm9ybWVkIGJ5IHRoaXMgZnVuY3Rpb24uIFRvIHByZXBhcmUgdGhlIHNoaWZ0cywgd2UgaGF2ZSB0byBhZGp1c3RcbiAgLy8gY2hhbmdlKHcrKSwgc2hpZnQodyspLCBhbmQgY2hhbmdlKHctKS5cbiAgZnVuY3Rpb24gZXhlY3V0ZVNoaWZ0cyh2KSB7XG4gICAgdmFyIHNoaWZ0ID0gMCxcbiAgICAgICAgY2hhbmdlID0gMCxcbiAgICAgICAgY2hpbGRyZW4gPSB2LmNoaWxkcmVuLFxuICAgICAgICBpID0gY2hpbGRyZW4ubGVuZ3RoLFxuICAgICAgICB3O1xuICAgIHdoaWxlICgtLWkgPj0gMCkge1xuICAgICAgdyA9IGNoaWxkcmVuW2ldO1xuICAgICAgdy56ICs9IHNoaWZ0O1xuICAgICAgdy5tICs9IHNoaWZ0O1xuICAgICAgc2hpZnQgKz0gdy5zICsgKGNoYW5nZSArPSB3LmMpO1xuICAgIH1cbiAgfVxuXG4gIC8vIElmIHZpLeKAmXMgYW5jZXN0b3IgaXMgYSBzaWJsaW5nIG9mIHYsIHJldHVybnMgdmkt4oCZcyBhbmNlc3Rvci4gT3RoZXJ3aXNlLFxuICAvLyByZXR1cm5zIHRoZSBzcGVjaWZpZWQgKGRlZmF1bHQpIGFuY2VzdG9yLlxuICBmdW5jdGlvbiBuZXh0QW5jZXN0b3IodmltLCB2LCBhbmNlc3Rvcikge1xuICAgIHJldHVybiB2aW0uYS5wYXJlbnQgPT09IHYucGFyZW50ID8gdmltLmEgOiBhbmNlc3RvcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIFRyZWVOb2RlKG5vZGUsIGkpIHtcbiAgICB0aGlzLl8gPSBub2RlO1xuICAgIHRoaXMucGFyZW50ID0gbnVsbDtcbiAgICB0aGlzLmNoaWxkcmVuID0gbnVsbDtcbiAgICB0aGlzLkEgPSBudWxsOyAvLyBkZWZhdWx0IGFuY2VzdG9yXG4gICAgdGhpcy5hID0gdGhpczsgLy8gYW5jZXN0b3JcbiAgICB0aGlzLnogPSAwOyAvLyBwcmVsaW1cbiAgICB0aGlzLm0gPSAwOyAvLyBtb2RcbiAgICB0aGlzLmMgPSAwOyAvLyBjaGFuZ2VcbiAgICB0aGlzLnMgPSAwOyAvLyBzaGlmdFxuICAgIHRoaXMudCA9IG51bGw7IC8vIHRocmVhZFxuICAgIHRoaXMuaSA9IGk7IC8vIG51bWJlclxuICB9XG5cbiAgVHJlZU5vZGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShOb2RlLnByb3RvdHlwZSk7XG5cbiAgZnVuY3Rpb24gdHJlZVJvb3Qocm9vdCkge1xuICAgIHZhciB0cmVlID0gbmV3IFRyZWVOb2RlKHJvb3QsIDApLFxuICAgICAgICBub2RlLFxuICAgICAgICBub2RlcyA9IFt0cmVlXSxcbiAgICAgICAgY2hpbGQsXG4gICAgICAgIGNoaWxkcmVuLFxuICAgICAgICBpLFxuICAgICAgICBuO1xuXG4gICAgd2hpbGUgKG5vZGUgPSBub2Rlcy5wb3AoKSkge1xuICAgICAgaWYgKGNoaWxkcmVuID0gbm9kZS5fLmNoaWxkcmVuKSB7XG4gICAgICAgIG5vZGUuY2hpbGRyZW4gPSBuZXcgQXJyYXkobiA9IGNoaWxkcmVuLmxlbmd0aCk7XG4gICAgICAgIGZvciAoaSA9IG4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICAgIG5vZGVzLnB1c2goY2hpbGQgPSBub2RlLmNoaWxkcmVuW2ldID0gbmV3IFRyZWVOb2RlKGNoaWxkcmVuW2ldLCBpKSk7XG4gICAgICAgICAgY2hpbGQucGFyZW50ID0gbm9kZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgICh0cmVlLnBhcmVudCA9IG5ldyBUcmVlTm9kZShudWxsLCAwKSkuY2hpbGRyZW4gPSBbdHJlZV07XG4gICAgcmV0dXJuIHRyZWU7XG4gIH1cblxuICAvLyBOb2RlLWxpbmsgdHJlZSBkaWFncmFtIHVzaW5nIHRoZSBSZWluZ29sZC1UaWxmb3JkIFwidGlkeVwiIGFsZ29yaXRobVxuICB2YXIgdHJlZSA9IGZ1bmN0aW9uIHRyZWUoKSB7XG4gICAgdmFyIHNlcGFyYXRpb24gPSBkZWZhdWx0U2VwYXJhdGlvbiQxLFxuICAgICAgICBkeCA9IDEsXG4gICAgICAgIGR5ID0gMSxcbiAgICAgICAgbm9kZVNpemUgPSBudWxsO1xuXG4gICAgZnVuY3Rpb24gdHJlZShyb290KSB7XG4gICAgICB2YXIgdCA9IHRyZWVSb290KHJvb3QpO1xuXG4gICAgICAvLyBDb21wdXRlIHRoZSBsYXlvdXQgdXNpbmcgQnVjaGhlaW0gZXQgYWwu4oCZcyBhbGdvcml0aG0uXG4gICAgICB0LmVhY2hBZnRlcihmaXJzdFdhbGspLCB0LnBhcmVudC5tID0gLXQuejtcbiAgICAgIHQuZWFjaEJlZm9yZShzZWNvbmRXYWxrKTtcblxuICAgICAgLy8gSWYgYSBmaXhlZCBub2RlIHNpemUgaXMgc3BlY2lmaWVkLCBzY2FsZSB4IGFuZCB5LlxuICAgICAgaWYgKG5vZGVTaXplKSByb290LmVhY2hCZWZvcmUoc2l6ZU5vZGUpO1xuXG4gICAgICAvLyBJZiBhIGZpeGVkIHRyZWUgc2l6ZSBpcyBzcGVjaWZpZWQsIHNjYWxlIHggYW5kIHkgYmFzZWQgb24gdGhlIGV4dGVudC5cbiAgICAgIC8vIENvbXB1dGUgdGhlIGxlZnQtbW9zdCwgcmlnaHQtbW9zdCwgYW5kIGRlcHRoLW1vc3Qgbm9kZXMgZm9yIGV4dGVudHMuXG4gICAgICBlbHNlIHtcbiAgICAgICAgICB2YXIgbGVmdCA9IHJvb3QsXG4gICAgICAgICAgICAgIHJpZ2h0ID0gcm9vdCxcbiAgICAgICAgICAgICAgYm90dG9tID0gcm9vdDtcbiAgICAgICAgICByb290LmVhY2hCZWZvcmUoZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgIGlmIChub2RlLnggPCBsZWZ0LngpIGxlZnQgPSBub2RlO1xuICAgICAgICAgICAgaWYgKG5vZGUueCA+IHJpZ2h0LngpIHJpZ2h0ID0gbm9kZTtcbiAgICAgICAgICAgIGlmIChub2RlLmRlcHRoID4gYm90dG9tLmRlcHRoKSBib3R0b20gPSBub2RlO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHZhciBzID0gbGVmdCA9PT0gcmlnaHQgPyAxIDogc2VwYXJhdGlvbihsZWZ0LCByaWdodCkgLyAyLFxuICAgICAgICAgICAgICB0eCA9IHMgLSBsZWZ0LngsXG4gICAgICAgICAgICAgIGt4ID0gZHggLyAocmlnaHQueCArIHMgKyB0eCksXG4gICAgICAgICAgICAgIGt5ID0gZHkgLyAoYm90dG9tLmRlcHRoIHx8IDEpO1xuICAgICAgICAgIHJvb3QuZWFjaEJlZm9yZShmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgbm9kZS54ID0gKG5vZGUueCArIHR4KSAqIGt4O1xuICAgICAgICAgICAgbm9kZS55ID0gbm9kZS5kZXB0aCAqIGt5O1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgIHJldHVybiByb290O1xuICAgIH1cblxuICAgIC8vIENvbXB1dGVzIGEgcHJlbGltaW5hcnkgeC1jb29yZGluYXRlIGZvciB2LiBCZWZvcmUgdGhhdCwgRklSU1QgV0FMSyBpc1xuICAgIC8vIGFwcGxpZWQgcmVjdXJzaXZlbHkgdG8gdGhlIGNoaWxkcmVuIG9mIHYsIGFzIHdlbGwgYXMgdGhlIGZ1bmN0aW9uXG4gICAgLy8gQVBQT1JUSU9OLiBBZnRlciBzcGFjaW5nIG91dCB0aGUgY2hpbGRyZW4gYnkgY2FsbGluZyBFWEVDVVRFIFNISUZUUywgdGhlXG4gICAgLy8gbm9kZSB2IGlzIHBsYWNlZCB0byB0aGUgbWlkcG9pbnQgb2YgaXRzIG91dGVybW9zdCBjaGlsZHJlbi5cbiAgICBmdW5jdGlvbiBmaXJzdFdhbGsodikge1xuICAgICAgdmFyIGNoaWxkcmVuID0gdi5jaGlsZHJlbixcbiAgICAgICAgICBzaWJsaW5ncyA9IHYucGFyZW50LmNoaWxkcmVuLFxuICAgICAgICAgIHcgPSB2LmkgPyBzaWJsaW5nc1t2LmkgLSAxXSA6IG51bGw7XG4gICAgICBpZiAoY2hpbGRyZW4pIHtcbiAgICAgICAgZXhlY3V0ZVNoaWZ0cyh2KTtcbiAgICAgICAgdmFyIG1pZHBvaW50ID0gKGNoaWxkcmVuWzBdLnogKyBjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGggLSAxXS56KSAvIDI7XG4gICAgICAgIGlmICh3KSB7XG4gICAgICAgICAgdi56ID0gdy56ICsgc2VwYXJhdGlvbih2Ll8sIHcuXyk7XG4gICAgICAgICAgdi5tID0gdi56IC0gbWlkcG9pbnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdi56ID0gbWlkcG9pbnQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodykge1xuICAgICAgICB2LnogPSB3LnogKyBzZXBhcmF0aW9uKHYuXywgdy5fKTtcbiAgICAgIH1cbiAgICAgIHYucGFyZW50LkEgPSBhcHBvcnRpb24odiwgdywgdi5wYXJlbnQuQSB8fCBzaWJsaW5nc1swXSk7XG4gICAgfVxuXG4gICAgLy8gQ29tcHV0ZXMgYWxsIHJlYWwgeC1jb29yZGluYXRlcyBieSBzdW1taW5nIHVwIHRoZSBtb2RpZmllcnMgcmVjdXJzaXZlbHkuXG4gICAgZnVuY3Rpb24gc2Vjb25kV2Fsayh2KSB7XG4gICAgICB2Ll8ueCA9IHYueiArIHYucGFyZW50Lm07XG4gICAgICB2Lm0gKz0gdi5wYXJlbnQubTtcbiAgICB9XG5cbiAgICAvLyBUaGUgY29yZSBvZiB0aGUgYWxnb3JpdGhtLiBIZXJlLCBhIG5ldyBzdWJ0cmVlIGlzIGNvbWJpbmVkIHdpdGggdGhlXG4gICAgLy8gcHJldmlvdXMgc3VidHJlZXMuIFRocmVhZHMgYXJlIHVzZWQgdG8gdHJhdmVyc2UgdGhlIGluc2lkZSBhbmQgb3V0c2lkZVxuICAgIC8vIGNvbnRvdXJzIG9mIHRoZSBsZWZ0IGFuZCByaWdodCBzdWJ0cmVlIHVwIHRvIHRoZSBoaWdoZXN0IGNvbW1vbiBsZXZlbC4gVGhlXG4gICAgLy8gdmVydGljZXMgdXNlZCBmb3IgdGhlIHRyYXZlcnNhbHMgYXJlIHZpKywgdmktLCB2by0sIGFuZCB2byssIHdoZXJlIHRoZVxuICAgIC8vIHN1cGVyc2NyaXB0IG8gbWVhbnMgb3V0c2lkZSBhbmQgaSBtZWFucyBpbnNpZGUsIHRoZSBzdWJzY3JpcHQgLSBtZWFucyBsZWZ0XG4gICAgLy8gc3VidHJlZSBhbmQgKyBtZWFucyByaWdodCBzdWJ0cmVlLiBGb3Igc3VtbWluZyB1cCB0aGUgbW9kaWZpZXJzIGFsb25nIHRoZVxuICAgIC8vIGNvbnRvdXIsIHdlIHVzZSByZXNwZWN0aXZlIHZhcmlhYmxlcyBzaSssIHNpLSwgc28tLCBhbmQgc28rLiBXaGVuZXZlciB0d29cbiAgICAvLyBub2RlcyBvZiB0aGUgaW5zaWRlIGNvbnRvdXJzIGNvbmZsaWN0LCB3ZSBjb21wdXRlIHRoZSBsZWZ0IG9uZSBvZiB0aGVcbiAgICAvLyBncmVhdGVzdCB1bmNvbW1vbiBhbmNlc3RvcnMgdXNpbmcgdGhlIGZ1bmN0aW9uIEFOQ0VTVE9SIGFuZCBjYWxsIE1PVkVcbiAgICAvLyBTVUJUUkVFIHRvIHNoaWZ0IHRoZSBzdWJ0cmVlIGFuZCBwcmVwYXJlIHRoZSBzaGlmdHMgb2Ygc21hbGxlciBzdWJ0cmVlcy5cbiAgICAvLyBGaW5hbGx5LCB3ZSBhZGQgYSBuZXcgdGhyZWFkIChpZiBuZWNlc3NhcnkpLlxuICAgIGZ1bmN0aW9uIGFwcG9ydGlvbih2LCB3LCBhbmNlc3Rvcikge1xuICAgICAgaWYgKHcpIHtcbiAgICAgICAgdmFyIHZpcCA9IHYsXG4gICAgICAgICAgICB2b3AgPSB2LFxuICAgICAgICAgICAgdmltID0gdyxcbiAgICAgICAgICAgIHZvbSA9IHZpcC5wYXJlbnQuY2hpbGRyZW5bMF0sXG4gICAgICAgICAgICBzaXAgPSB2aXAubSxcbiAgICAgICAgICAgIHNvcCA9IHZvcC5tLFxuICAgICAgICAgICAgc2ltID0gdmltLm0sXG4gICAgICAgICAgICBzb20gPSB2b20ubSxcbiAgICAgICAgICAgIHNoaWZ0O1xuICAgICAgICB3aGlsZSAodmltID0gbmV4dFJpZ2h0KHZpbSksIHZpcCA9IG5leHRMZWZ0KHZpcCksIHZpbSAmJiB2aXApIHtcbiAgICAgICAgICB2b20gPSBuZXh0TGVmdCh2b20pO1xuICAgICAgICAgIHZvcCA9IG5leHRSaWdodCh2b3ApO1xuICAgICAgICAgIHZvcC5hID0gdjtcbiAgICAgICAgICBzaGlmdCA9IHZpbS56ICsgc2ltIC0gdmlwLnogLSBzaXAgKyBzZXBhcmF0aW9uKHZpbS5fLCB2aXAuXyk7XG4gICAgICAgICAgaWYgKHNoaWZ0ID4gMCkge1xuICAgICAgICAgICAgbW92ZVN1YnRyZWUobmV4dEFuY2VzdG9yKHZpbSwgdiwgYW5jZXN0b3IpLCB2LCBzaGlmdCk7XG4gICAgICAgICAgICBzaXAgKz0gc2hpZnQ7XG4gICAgICAgICAgICBzb3AgKz0gc2hpZnQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNpbSArPSB2aW0ubTtcbiAgICAgICAgICBzaXAgKz0gdmlwLm07XG4gICAgICAgICAgc29tICs9IHZvbS5tO1xuICAgICAgICAgIHNvcCArPSB2b3AubTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmltICYmICFuZXh0UmlnaHQodm9wKSkge1xuICAgICAgICAgIHZvcC50ID0gdmltO1xuICAgICAgICAgIHZvcC5tICs9IHNpbSAtIHNvcDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmlwICYmICFuZXh0TGVmdCh2b20pKSB7XG4gICAgICAgICAgdm9tLnQgPSB2aXA7XG4gICAgICAgICAgdm9tLm0gKz0gc2lwIC0gc29tO1xuICAgICAgICAgIGFuY2VzdG9yID0gdjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFuY2VzdG9yO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNpemVOb2RlKG5vZGUpIHtcbiAgICAgIG5vZGUueCAqPSBkeDtcbiAgICAgIG5vZGUueSA9IG5vZGUuZGVwdGggKiBkeTtcbiAgICB9XG5cbiAgICB0cmVlLnNlcGFyYXRpb24gPSBmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc2VwYXJhdGlvbiA9IHgsIHRyZWUpIDogc2VwYXJhdGlvbjtcbiAgICB9O1xuXG4gICAgdHJlZS5zaXplID0gZnVuY3Rpb24gKHgpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG5vZGVTaXplID0gZmFsc2UsIGR4ID0gK3hbMF0sIGR5ID0gK3hbMV0sIHRyZWUpIDogbm9kZVNpemUgPyBudWxsIDogW2R4LCBkeV07XG4gICAgfTtcblxuICAgIHRyZWUubm9kZVNpemUgPSBmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAobm9kZVNpemUgPSB0cnVlLCBkeCA9ICt4WzBdLCBkeSA9ICt4WzFdLCB0cmVlKSA6IG5vZGVTaXplID8gW2R4LCBkeV0gOiBudWxsO1xuICAgIH07XG5cbiAgICByZXR1cm4gdHJlZTtcbiAgfTtcblxuICB2YXIgdHJlZW1hcFNsaWNlID0gZnVuY3Rpb24gdHJlZW1hcFNsaWNlKHBhcmVudCwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgICB2YXIgbm9kZXMgPSBwYXJlbnQuY2hpbGRyZW4sXG4gICAgICAgIG5vZGUsXG4gICAgICAgIGkgPSAtMSxcbiAgICAgICAgbiA9IG5vZGVzLmxlbmd0aCxcbiAgICAgICAgayA9IHBhcmVudC52YWx1ZSAmJiAoeTEgLSB5MCkgLyBwYXJlbnQudmFsdWU7XG5cbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgbm9kZSA9IG5vZGVzW2ldLCBub2RlLngwID0geDAsIG5vZGUueDEgPSB4MTtcbiAgICAgIG5vZGUueTAgPSB5MCwgbm9kZS55MSA9IHkwICs9IG5vZGUudmFsdWUgKiBrO1xuICAgIH1cbiAgfTtcblxuICB2YXIgcGhpID0gKDEgKyBNYXRoLnNxcnQoNSkpIC8gMjtcblxuICBmdW5jdGlvbiBzcXVhcmlmeVJhdGlvKHJhdGlvLCBwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gICAgdmFyIHJvd3MgPSBbXSxcbiAgICAgICAgbm9kZXMgPSBwYXJlbnQuY2hpbGRyZW4sXG4gICAgICAgIHJvdyxcbiAgICAgICAgbm9kZVZhbHVlLFxuICAgICAgICBpMCA9IDAsXG4gICAgICAgIGkxID0gMCxcbiAgICAgICAgbiA9IG5vZGVzLmxlbmd0aCxcbiAgICAgICAgZHgsXG4gICAgICAgIGR5LFxuICAgICAgICB2YWx1ZSA9IHBhcmVudC52YWx1ZSxcbiAgICAgICAgc3VtVmFsdWUsXG4gICAgICAgIG1pblZhbHVlLFxuICAgICAgICBtYXhWYWx1ZSxcbiAgICAgICAgbmV3UmF0aW8sXG4gICAgICAgIG1pblJhdGlvLFxuICAgICAgICBhbHBoYSxcbiAgICAgICAgYmV0YTtcblxuICAgIHdoaWxlIChpMCA8IG4pIHtcbiAgICAgIGR4ID0geDEgLSB4MCwgZHkgPSB5MSAtIHkwO1xuXG4gICAgICAvLyBGaW5kIHRoZSBuZXh0IG5vbi1lbXB0eSBub2RlLlxuICAgICAgZG8ge1xuICAgICAgICBzdW1WYWx1ZSA9IG5vZGVzW2kxKytdLnZhbHVlO1xuICAgICAgfSB3aGlsZSAoIXN1bVZhbHVlICYmIGkxIDwgbik7XG4gICAgICBtaW5WYWx1ZSA9IG1heFZhbHVlID0gc3VtVmFsdWU7XG4gICAgICBhbHBoYSA9IE1hdGgubWF4KGR5IC8gZHgsIGR4IC8gZHkpIC8gKHZhbHVlICogcmF0aW8pO1xuICAgICAgYmV0YSA9IHN1bVZhbHVlICogc3VtVmFsdWUgKiBhbHBoYTtcbiAgICAgIG1pblJhdGlvID0gTWF0aC5tYXgobWF4VmFsdWUgLyBiZXRhLCBiZXRhIC8gbWluVmFsdWUpO1xuXG4gICAgICAvLyBLZWVwIGFkZGluZyBub2RlcyB3aGlsZSB0aGUgYXNwZWN0IHJhdGlvIG1haW50YWlucyBvciBpbXByb3Zlcy5cbiAgICAgIGZvciAoOyBpMSA8IG47ICsraTEpIHtcbiAgICAgICAgc3VtVmFsdWUgKz0gbm9kZVZhbHVlID0gbm9kZXNbaTFdLnZhbHVlO1xuICAgICAgICBpZiAobm9kZVZhbHVlIDwgbWluVmFsdWUpIG1pblZhbHVlID0gbm9kZVZhbHVlO1xuICAgICAgICBpZiAobm9kZVZhbHVlID4gbWF4VmFsdWUpIG1heFZhbHVlID0gbm9kZVZhbHVlO1xuICAgICAgICBiZXRhID0gc3VtVmFsdWUgKiBzdW1WYWx1ZSAqIGFscGhhO1xuICAgICAgICBuZXdSYXRpbyA9IE1hdGgubWF4KG1heFZhbHVlIC8gYmV0YSwgYmV0YSAvIG1pblZhbHVlKTtcbiAgICAgICAgaWYgKG5ld1JhdGlvID4gbWluUmF0aW8pIHtcbiAgICAgICAgICBzdW1WYWx1ZSAtPSBub2RlVmFsdWU7YnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgbWluUmF0aW8gPSBuZXdSYXRpbztcbiAgICAgIH1cblxuICAgICAgLy8gUG9zaXRpb24gYW5kIHJlY29yZCB0aGUgcm93IG9yaWVudGF0aW9uLlxuICAgICAgcm93cy5wdXNoKHJvdyA9IHsgdmFsdWU6IHN1bVZhbHVlLCBkaWNlOiBkeCA8IGR5LCBjaGlsZHJlbjogbm9kZXMuc2xpY2UoaTAsIGkxKSB9KTtcbiAgICAgIGlmIChyb3cuZGljZSkgdHJlZW1hcERpY2Uocm93LCB4MCwgeTAsIHgxLCB2YWx1ZSA/IHkwICs9IGR5ICogc3VtVmFsdWUgLyB2YWx1ZSA6IHkxKTtlbHNlIHRyZWVtYXBTbGljZShyb3csIHgwLCB5MCwgdmFsdWUgPyB4MCArPSBkeCAqIHN1bVZhbHVlIC8gdmFsdWUgOiB4MSwgeTEpO1xuICAgICAgdmFsdWUgLT0gc3VtVmFsdWUsIGkwID0gaTE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJvd3M7XG4gIH1cblxuICB2YXIgc3F1YXJpZnkgPSBmdW5jdGlvbiBjdXN0b20ocmF0aW8pIHtcblxuICAgIGZ1bmN0aW9uIHNxdWFyaWZ5KHBhcmVudCwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgICAgIHNxdWFyaWZ5UmF0aW8ocmF0aW8sIHBhcmVudCwgeDAsIHkwLCB4MSwgeTEpO1xuICAgIH1cblxuICAgIHNxdWFyaWZ5LnJhdGlvID0gZnVuY3Rpb24gKHgpIHtcbiAgICAgIHJldHVybiBjdXN0b20oKHggPSAreCkgPiAxID8geCA6IDEpO1xuICAgIH07XG5cbiAgICByZXR1cm4gc3F1YXJpZnk7XG4gIH0ocGhpKTtcblxuICB2YXIgaW5kZXgkMyA9IGZ1bmN0aW9uIGluZGV4JDMoKSB7XG4gICAgdmFyIHRpbGUgPSBzcXVhcmlmeSxcbiAgICAgICAgcm91bmQgPSBmYWxzZSxcbiAgICAgICAgZHggPSAxLFxuICAgICAgICBkeSA9IDEsXG4gICAgICAgIHBhZGRpbmdTdGFjayA9IFswXSxcbiAgICAgICAgcGFkZGluZ0lubmVyID0gY29uc3RhbnRaZXJvLFxuICAgICAgICBwYWRkaW5nVG9wID0gY29uc3RhbnRaZXJvLFxuICAgICAgICBwYWRkaW5nUmlnaHQgPSBjb25zdGFudFplcm8sXG4gICAgICAgIHBhZGRpbmdCb3R0b20gPSBjb25zdGFudFplcm8sXG4gICAgICAgIHBhZGRpbmdMZWZ0ID0gY29uc3RhbnRaZXJvO1xuXG4gICAgZnVuY3Rpb24gdHJlZW1hcChyb290KSB7XG4gICAgICByb290LngwID0gcm9vdC55MCA9IDA7XG4gICAgICByb290LngxID0gZHg7XG4gICAgICByb290LnkxID0gZHk7XG4gICAgICByb290LmVhY2hCZWZvcmUocG9zaXRpb25Ob2RlKTtcbiAgICAgIHBhZGRpbmdTdGFjayA9IFswXTtcbiAgICAgIGlmIChyb3VuZCkgcm9vdC5lYWNoQmVmb3JlKHJvdW5kTm9kZSk7XG4gICAgICByZXR1cm4gcm9vdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwb3NpdGlvbk5vZGUobm9kZSkge1xuICAgICAgdmFyIHAgPSBwYWRkaW5nU3RhY2tbbm9kZS5kZXB0aF0sXG4gICAgICAgICAgeDAgPSBub2RlLngwICsgcCxcbiAgICAgICAgICB5MCA9IG5vZGUueTAgKyBwLFxuICAgICAgICAgIHgxID0gbm9kZS54MSAtIHAsXG4gICAgICAgICAgeTEgPSBub2RlLnkxIC0gcDtcbiAgICAgIGlmICh4MSA8IHgwKSB4MCA9IHgxID0gKHgwICsgeDEpIC8gMjtcbiAgICAgIGlmICh5MSA8IHkwKSB5MCA9IHkxID0gKHkwICsgeTEpIC8gMjtcbiAgICAgIG5vZGUueDAgPSB4MDtcbiAgICAgIG5vZGUueTAgPSB5MDtcbiAgICAgIG5vZGUueDEgPSB4MTtcbiAgICAgIG5vZGUueTEgPSB5MTtcbiAgICAgIGlmIChub2RlLmNoaWxkcmVuKSB7XG4gICAgICAgIHAgPSBwYWRkaW5nU3RhY2tbbm9kZS5kZXB0aCArIDFdID0gcGFkZGluZ0lubmVyKG5vZGUpIC8gMjtcbiAgICAgICAgeDAgKz0gcGFkZGluZ0xlZnQobm9kZSkgLSBwO1xuICAgICAgICB5MCArPSBwYWRkaW5nVG9wKG5vZGUpIC0gcDtcbiAgICAgICAgeDEgLT0gcGFkZGluZ1JpZ2h0KG5vZGUpIC0gcDtcbiAgICAgICAgeTEgLT0gcGFkZGluZ0JvdHRvbShub2RlKSAtIHA7XG4gICAgICAgIGlmICh4MSA8IHgwKSB4MCA9IHgxID0gKHgwICsgeDEpIC8gMjtcbiAgICAgICAgaWYgKHkxIDwgeTApIHkwID0geTEgPSAoeTAgKyB5MSkgLyAyO1xuICAgICAgICB0aWxlKG5vZGUsIHgwLCB5MCwgeDEsIHkxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0cmVlbWFwLnJvdW5kID0gZnVuY3Rpb24gKHgpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJvdW5kID0gISF4LCB0cmVlbWFwKSA6IHJvdW5kO1xuICAgIH07XG5cbiAgICB0cmVlbWFwLnNpemUgPSBmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZHggPSAreFswXSwgZHkgPSAreFsxXSwgdHJlZW1hcCkgOiBbZHgsIGR5XTtcbiAgICB9O1xuXG4gICAgdHJlZW1hcC50aWxlID0gZnVuY3Rpb24gKHgpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpbGUgPSByZXF1aXJlZCh4KSwgdHJlZW1hcCkgOiB0aWxlO1xuICAgIH07XG5cbiAgICB0cmVlbWFwLnBhZGRpbmcgPSBmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0cmVlbWFwLnBhZGRpbmdJbm5lcih4KS5wYWRkaW5nT3V0ZXIoeCkgOiB0cmVlbWFwLnBhZGRpbmdJbm5lcigpO1xuICAgIH07XG5cbiAgICB0cmVlbWFwLnBhZGRpbmdJbm5lciA9IGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nSW5uZXIgPSB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geCA6IGNvbnN0YW50JDgoK3gpLCB0cmVlbWFwKSA6IHBhZGRpbmdJbm5lcjtcbiAgICB9O1xuXG4gICAgdHJlZW1hcC5wYWRkaW5nT3V0ZXIgPSBmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0cmVlbWFwLnBhZGRpbmdUb3AoeCkucGFkZGluZ1JpZ2h0KHgpLnBhZGRpbmdCb3R0b20oeCkucGFkZGluZ0xlZnQoeCkgOiB0cmVlbWFwLnBhZGRpbmdUb3AoKTtcbiAgICB9O1xuXG4gICAgdHJlZW1hcC5wYWRkaW5nVG9wID0gZnVuY3Rpb24gKHgpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdUb3AgPSB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geCA6IGNvbnN0YW50JDgoK3gpLCB0cmVlbWFwKSA6IHBhZGRpbmdUb3A7XG4gICAgfTtcblxuICAgIHRyZWVtYXAucGFkZGluZ1JpZ2h0ID0gZnVuY3Rpb24gKHgpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdSaWdodCA9IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4IDogY29uc3RhbnQkOCgreCksIHRyZWVtYXApIDogcGFkZGluZ1JpZ2h0O1xuICAgIH07XG5cbiAgICB0cmVlbWFwLnBhZGRpbmdCb3R0b20gPSBmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ0JvdHRvbSA9IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4IDogY29uc3RhbnQkOCgreCksIHRyZWVtYXApIDogcGFkZGluZ0JvdHRvbTtcbiAgICB9O1xuXG4gICAgdHJlZW1hcC5wYWRkaW5nTGVmdCA9IGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nTGVmdCA9IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4IDogY29uc3RhbnQkOCgreCksIHRyZWVtYXApIDogcGFkZGluZ0xlZnQ7XG4gICAgfTtcblxuICAgIHJldHVybiB0cmVlbWFwO1xuICB9O1xuXG4gIHZhciBiaW5hcnkgPSBmdW5jdGlvbiBiaW5hcnkocGFyZW50LCB4MCwgeTAsIHgxLCB5MSkge1xuICAgIHZhciBub2RlcyA9IHBhcmVudC5jaGlsZHJlbixcbiAgICAgICAgaSxcbiAgICAgICAgbiA9IG5vZGVzLmxlbmd0aCxcbiAgICAgICAgc3VtLFxuICAgICAgICBzdW1zID0gbmV3IEFycmF5KG4gKyAxKTtcblxuICAgIGZvciAoc3Vtc1swXSA9IHN1bSA9IGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBzdW1zW2kgKyAxXSA9IHN1bSArPSBub2Rlc1tpXS52YWx1ZTtcbiAgICB9XG5cbiAgICBwYXJ0aXRpb24oMCwgbiwgcGFyZW50LnZhbHVlLCB4MCwgeTAsIHgxLCB5MSk7XG5cbiAgICBmdW5jdGlvbiBwYXJ0aXRpb24oaSwgaiwgdmFsdWUsIHgwLCB5MCwgeDEsIHkxKSB7XG4gICAgICBpZiAoaSA+PSBqIC0gMSkge1xuICAgICAgICB2YXIgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICBub2RlLngwID0geDAsIG5vZGUueTAgPSB5MDtcbiAgICAgICAgbm9kZS54MSA9IHgxLCBub2RlLnkxID0geTE7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlT2Zmc2V0ID0gc3Vtc1tpXSxcbiAgICAgICAgICB2YWx1ZVRhcmdldCA9IHZhbHVlIC8gMiArIHZhbHVlT2Zmc2V0LFxuICAgICAgICAgIGsgPSBpICsgMSxcbiAgICAgICAgICBoaSA9IGogLSAxO1xuXG4gICAgICB3aGlsZSAoayA8IGhpKSB7XG4gICAgICAgIHZhciBtaWQgPSBrICsgaGkgPj4+IDE7XG4gICAgICAgIGlmIChzdW1zW21pZF0gPCB2YWx1ZVRhcmdldCkgayA9IG1pZCArIDE7ZWxzZSBoaSA9IG1pZDtcbiAgICAgIH1cblxuICAgICAgaWYgKHZhbHVlVGFyZ2V0IC0gc3Vtc1trIC0gMV0gPCBzdW1zW2tdIC0gdmFsdWVUYXJnZXQgJiYgaSArIDEgPCBrKSAtLWs7XG5cbiAgICAgIHZhciB2YWx1ZUxlZnQgPSBzdW1zW2tdIC0gdmFsdWVPZmZzZXQsXG4gICAgICAgICAgdmFsdWVSaWdodCA9IHZhbHVlIC0gdmFsdWVMZWZ0O1xuXG4gICAgICBpZiAoeDEgLSB4MCA+IHkxIC0geTApIHtcbiAgICAgICAgdmFyIHhrID0gKHgwICogdmFsdWVSaWdodCArIHgxICogdmFsdWVMZWZ0KSAvIHZhbHVlO1xuICAgICAgICBwYXJ0aXRpb24oaSwgaywgdmFsdWVMZWZ0LCB4MCwgeTAsIHhrLCB5MSk7XG4gICAgICAgIHBhcnRpdGlvbihrLCBqLCB2YWx1ZVJpZ2h0LCB4aywgeTAsIHgxLCB5MSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgeWsgPSAoeTAgKiB2YWx1ZVJpZ2h0ICsgeTEgKiB2YWx1ZUxlZnQpIC8gdmFsdWU7XG4gICAgICAgIHBhcnRpdGlvbihpLCBrLCB2YWx1ZUxlZnQsIHgwLCB5MCwgeDEsIHlrKTtcbiAgICAgICAgcGFydGl0aW9uKGssIGosIHZhbHVlUmlnaHQsIHgwLCB5aywgeDEsIHkxKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIHNsaWNlRGljZSA9IGZ1bmN0aW9uIHNsaWNlRGljZShwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gICAgKHBhcmVudC5kZXB0aCAmIDEgPyB0cmVlbWFwU2xpY2UgOiB0cmVlbWFwRGljZSkocGFyZW50LCB4MCwgeTAsIHgxLCB5MSk7XG4gIH07XG5cbiAgdmFyIHJlc3F1YXJpZnkgPSBmdW5jdGlvbiBjdXN0b20ocmF0aW8pIHtcblxuICAgIGZ1bmN0aW9uIHJlc3F1YXJpZnkocGFyZW50LCB4MCwgeTAsIHgxLCB5MSkge1xuICAgICAgaWYgKChyb3dzID0gcGFyZW50Ll9zcXVhcmlmeSkgJiYgcm93cy5yYXRpbyA9PT0gcmF0aW8pIHtcbiAgICAgICAgdmFyIHJvd3MsXG4gICAgICAgICAgICByb3csXG4gICAgICAgICAgICBub2RlcyxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBqID0gLTEsXG4gICAgICAgICAgICBuLFxuICAgICAgICAgICAgbSA9IHJvd3MubGVuZ3RoLFxuICAgICAgICAgICAgdmFsdWUgPSBwYXJlbnQudmFsdWU7XG5cbiAgICAgICAgd2hpbGUgKCsraiA8IG0pIHtcbiAgICAgICAgICByb3cgPSByb3dzW2pdLCBub2RlcyA9IHJvdy5jaGlsZHJlbjtcbiAgICAgICAgICBmb3IgKGkgPSByb3cudmFsdWUgPSAwLCBuID0gbm9kZXMubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgICAgICByb3cudmFsdWUgKz0gbm9kZXNbaV0udmFsdWU7XG4gICAgICAgICAgfWlmIChyb3cuZGljZSkgdHJlZW1hcERpY2Uocm93LCB4MCwgeTAsIHgxLCB5MCArPSAoeTEgLSB5MCkgKiByb3cudmFsdWUgLyB2YWx1ZSk7ZWxzZSB0cmVlbWFwU2xpY2Uocm93LCB4MCwgeTAsIHgwICs9ICh4MSAtIHgwKSAqIHJvdy52YWx1ZSAvIHZhbHVlLCB5MSk7XG4gICAgICAgICAgdmFsdWUgLT0gcm93LnZhbHVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJlbnQuX3NxdWFyaWZ5ID0gcm93cyA9IHNxdWFyaWZ5UmF0aW8ocmF0aW8sIHBhcmVudCwgeDAsIHkwLCB4MSwgeTEpO1xuICAgICAgICByb3dzLnJhdGlvID0gcmF0aW87XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmVzcXVhcmlmeS5yYXRpbyA9IGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gY3VzdG9tKCh4ID0gK3gpID4gMSA/IHggOiAxKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHJlc3F1YXJpZnk7XG4gIH0ocGhpKTtcblxuICB2YXIgYXJlYSQxID0gZnVuY3Rpb24gYXJlYSQxKHBvbHlnb24pIHtcbiAgICB2YXIgaSA9IC0xLFxuICAgICAgICBuID0gcG9seWdvbi5sZW5ndGgsXG4gICAgICAgIGEsXG4gICAgICAgIGIgPSBwb2x5Z29uW24gLSAxXSxcbiAgICAgICAgYXJlYSA9IDA7XG5cbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgYSA9IGI7XG4gICAgICBiID0gcG9seWdvbltpXTtcbiAgICAgIGFyZWEgKz0gYVsxXSAqIGJbMF0gLSBhWzBdICogYlsxXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJlYSAvIDI7XG4gIH07XG5cbiAgdmFyIGNlbnRyb2lkJDEgPSBmdW5jdGlvbiBjZW50cm9pZCQxKHBvbHlnb24pIHtcbiAgICB2YXIgaSA9IC0xLFxuICAgICAgICBuID0gcG9seWdvbi5sZW5ndGgsXG4gICAgICAgIHggPSAwLFxuICAgICAgICB5ID0gMCxcbiAgICAgICAgYSxcbiAgICAgICAgYiA9IHBvbHlnb25bbiAtIDFdLFxuICAgICAgICBjLFxuICAgICAgICBrID0gMDtcblxuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBhID0gYjtcbiAgICAgIGIgPSBwb2x5Z29uW2ldO1xuICAgICAgayArPSBjID0gYVswXSAqIGJbMV0gLSBiWzBdICogYVsxXTtcbiAgICAgIHggKz0gKGFbMF0gKyBiWzBdKSAqIGM7XG4gICAgICB5ICs9IChhWzFdICsgYlsxXSkgKiBjO1xuICAgIH1cblxuICAgIHJldHVybiBrICo9IDMsIFt4IC8gaywgeSAvIGtdO1xuICB9O1xuXG4gIC8vIFJldHVybnMgdGhlIDJEIGNyb3NzIHByb2R1Y3Qgb2YgQUIgYW5kIEFDIHZlY3RvcnMsIGkuZS4sIHRoZSB6LWNvbXBvbmVudCBvZlxuICAvLyB0aGUgM0QgY3Jvc3MgcHJvZHVjdCBpbiBhIHF1YWRyYW50IEkgQ2FydGVzaWFuIGNvb3JkaW5hdGUgc3lzdGVtICgreCBpc1xuICAvLyByaWdodCwgK3kgaXMgdXApLiBSZXR1cm5zIGEgcG9zaXRpdmUgdmFsdWUgaWYgQUJDIGlzIGNvdW50ZXItY2xvY2t3aXNlLFxuICAvLyBuZWdhdGl2ZSBpZiBjbG9ja3dpc2UsIGFuZCB6ZXJvIGlmIHRoZSBwb2ludHMgYXJlIGNvbGxpbmVhci5cbiAgdmFyIGNyb3NzJDEgPSBmdW5jdGlvbiBjcm9zcyQxKGEsIGIsIGMpIHtcbiAgICByZXR1cm4gKGJbMF0gLSBhWzBdKSAqIChjWzFdIC0gYVsxXSkgLSAoYlsxXSAtIGFbMV0pICogKGNbMF0gLSBhWzBdKTtcbiAgfTtcblxuICBmdW5jdGlvbiBsZXhpY29ncmFwaGljT3JkZXIoYSwgYikge1xuICAgIHJldHVybiBhWzBdIC0gYlswXSB8fCBhWzFdIC0gYlsxXTtcbiAgfVxuXG4gIC8vIENvbXB1dGVzIHRoZSB1cHBlciBjb252ZXggaHVsbCBwZXIgdGhlIG1vbm90b25lIGNoYWluIGFsZ29yaXRobS5cbiAgLy8gQXNzdW1lcyBwb2ludHMubGVuZ3RoID49IDMsIGlzIHNvcnRlZCBieSB4LCB1bmlxdWUgaW4geS5cbiAgLy8gUmV0dXJucyBhbiBhcnJheSBvZiBpbmRpY2VzIGludG8gcG9pbnRzIGluIGxlZnQtdG8tcmlnaHQgb3JkZXIuXG4gIGZ1bmN0aW9uIGNvbXB1dGVVcHBlckh1bGxJbmRleGVzKHBvaW50cykge1xuICAgIHZhciBuID0gcG9pbnRzLmxlbmd0aCxcbiAgICAgICAgaW5kZXhlcyA9IFswLCAxXSxcbiAgICAgICAgc2l6ZSA9IDI7XG5cbiAgICBmb3IgKHZhciBpID0gMjsgaSA8IG47ICsraSkge1xuICAgICAgd2hpbGUgKHNpemUgPiAxICYmIGNyb3NzJDEocG9pbnRzW2luZGV4ZXNbc2l6ZSAtIDJdXSwgcG9pbnRzW2luZGV4ZXNbc2l6ZSAtIDFdXSwgcG9pbnRzW2ldKSA8PSAwKSB7XG4gICAgICAgIC0tc2l6ZTtcbiAgICAgIH1pbmRleGVzW3NpemUrK10gPSBpO1xuICAgIH1cblxuICAgIHJldHVybiBpbmRleGVzLnNsaWNlKDAsIHNpemUpOyAvLyByZW1vdmUgcG9wcGVkIHBvaW50c1xuICB9XG5cbiAgdmFyIGh1bGwgPSBmdW5jdGlvbiBodWxsKHBvaW50cykge1xuICAgIGlmICgobiA9IHBvaW50cy5sZW5ndGgpIDwgMykgcmV0dXJuIG51bGw7XG5cbiAgICB2YXIgaSxcbiAgICAgICAgbixcbiAgICAgICAgc29ydGVkUG9pbnRzID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBmbGlwcGVkUG9pbnRzID0gbmV3IEFycmF5KG4pO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgc29ydGVkUG9pbnRzW2ldID0gWytwb2ludHNbaV1bMF0sICtwb2ludHNbaV1bMV0sIGldO1xuICAgIH1zb3J0ZWRQb2ludHMuc29ydChsZXhpY29ncmFwaGljT3JkZXIpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGZsaXBwZWRQb2ludHNbaV0gPSBbc29ydGVkUG9pbnRzW2ldWzBdLCAtc29ydGVkUG9pbnRzW2ldWzFdXTtcbiAgICB9dmFyIHVwcGVySW5kZXhlcyA9IGNvbXB1dGVVcHBlckh1bGxJbmRleGVzKHNvcnRlZFBvaW50cyksXG4gICAgICAgIGxvd2VySW5kZXhlcyA9IGNvbXB1dGVVcHBlckh1bGxJbmRleGVzKGZsaXBwZWRQb2ludHMpO1xuXG4gICAgLy8gQ29uc3RydWN0IHRoZSBodWxsIHBvbHlnb24sIHJlbW92aW5nIHBvc3NpYmxlIGR1cGxpY2F0ZSBlbmRwb2ludHMuXG4gICAgdmFyIHNraXBMZWZ0ID0gbG93ZXJJbmRleGVzWzBdID09PSB1cHBlckluZGV4ZXNbMF0sXG4gICAgICAgIHNraXBSaWdodCA9IGxvd2VySW5kZXhlc1tsb3dlckluZGV4ZXMubGVuZ3RoIC0gMV0gPT09IHVwcGVySW5kZXhlc1t1cHBlckluZGV4ZXMubGVuZ3RoIC0gMV0sXG4gICAgICAgIGh1bGwgPSBbXTtcblxuICAgIC8vIEFkZCB1cHBlciBodWxsIGluIHJpZ2h0LXRvLWwgb3JkZXIuXG4gICAgLy8gVGhlbiBhZGQgbG93ZXIgaHVsbCBpbiBsZWZ0LXRvLXJpZ2h0IG9yZGVyLlxuICAgIGZvciAoaSA9IHVwcGVySW5kZXhlcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgaHVsbC5wdXNoKHBvaW50c1tzb3J0ZWRQb2ludHNbdXBwZXJJbmRleGVzW2ldXVsyXV0pO1xuICAgIH1mb3IgKGkgPSArc2tpcExlZnQ7IGkgPCBsb3dlckluZGV4ZXMubGVuZ3RoIC0gc2tpcFJpZ2h0OyArK2kpIHtcbiAgICAgIGh1bGwucHVzaChwb2ludHNbc29ydGVkUG9pbnRzW2xvd2VySW5kZXhlc1tpXV1bMl1dKTtcbiAgICB9cmV0dXJuIGh1bGw7XG4gIH07XG5cbiAgdmFyIGNvbnRhaW5zJDEgPSBmdW5jdGlvbiBjb250YWlucyQxKHBvbHlnb24sIHBvaW50KSB7XG4gICAgdmFyIG4gPSBwb2x5Z29uLmxlbmd0aCxcbiAgICAgICAgcCA9IHBvbHlnb25bbiAtIDFdLFxuICAgICAgICB4ID0gcG9pbnRbMF0sXG4gICAgICAgIHkgPSBwb2ludFsxXSxcbiAgICAgICAgeDAgPSBwWzBdLFxuICAgICAgICB5MCA9IHBbMV0sXG4gICAgICAgIHgxLFxuICAgICAgICB5MSxcbiAgICAgICAgaW5zaWRlID0gZmFsc2U7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgcCA9IHBvbHlnb25baV0sIHgxID0gcFswXSwgeTEgPSBwWzFdO1xuICAgICAgaWYgKHkxID4geSAhPT0geTAgPiB5ICYmIHggPCAoeDAgLSB4MSkgKiAoeSAtIHkxKSAvICh5MCAtIHkxKSArIHgxKSBpbnNpZGUgPSAhaW5zaWRlO1xuICAgICAgeDAgPSB4MSwgeTAgPSB5MTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW5zaWRlO1xuICB9O1xuXG4gIHZhciBsZW5ndGgkMiA9IGZ1bmN0aW9uIGxlbmd0aCQyKHBvbHlnb24pIHtcbiAgICB2YXIgaSA9IC0xLFxuICAgICAgICBuID0gcG9seWdvbi5sZW5ndGgsXG4gICAgICAgIGIgPSBwb2x5Z29uW24gLSAxXSxcbiAgICAgICAgeGEsXG4gICAgICAgIHlhLFxuICAgICAgICB4YiA9IGJbMF0sXG4gICAgICAgIHliID0gYlsxXSxcbiAgICAgICAgcGVyaW1ldGVyID0gMDtcblxuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICB4YSA9IHhiO1xuICAgICAgeWEgPSB5YjtcbiAgICAgIGIgPSBwb2x5Z29uW2ldO1xuICAgICAgeGIgPSBiWzBdO1xuICAgICAgeWIgPSBiWzFdO1xuICAgICAgeGEgLT0geGI7XG4gICAgICB5YSAtPSB5YjtcbiAgICAgIHBlcmltZXRlciArPSBNYXRoLnNxcnQoeGEgKiB4YSArIHlhICogeWEpO1xuICAgIH1cblxuICAgIHJldHVybiBwZXJpbWV0ZXI7XG4gIH07XG5cbiAgdmFyIHNsaWNlJDQgPSBbXS5zbGljZTtcblxuICB2YXIgbm9hYm9ydCA9IHt9O1xuXG4gIGZ1bmN0aW9uIFF1ZXVlKHNpemUpIHtcbiAgICB0aGlzLl9zaXplID0gc2l6ZTtcbiAgICB0aGlzLl9jYWxsID0gdGhpcy5fZXJyb3IgPSBudWxsO1xuICAgIHRoaXMuX3Rhc2tzID0gW107XG4gICAgdGhpcy5fZGF0YSA9IFtdO1xuICAgIHRoaXMuX3dhaXRpbmcgPSB0aGlzLl9hY3RpdmUgPSB0aGlzLl9lbmRlZCA9IHRoaXMuX3N0YXJ0ID0gMDsgLy8gaW5zaWRlIGEgc3luY2hyb25vdXMgdGFzayBjYWxsYmFjaz9cbiAgfVxuXG4gIFF1ZXVlLnByb3RvdHlwZSA9IHF1ZXVlLnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogUXVldWUsXG4gICAgZGVmZXI6IGZ1bmN0aW9uIGRlZmVyKGNhbGxiYWNrKSB7XG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgY2FsbGJhY2tcIik7XG4gICAgICBpZiAodGhpcy5fY2FsbCkgdGhyb3cgbmV3IEVycm9yKFwiZGVmZXIgYWZ0ZXIgYXdhaXRcIik7XG4gICAgICBpZiAodGhpcy5fZXJyb3IgIT0gbnVsbCkgcmV0dXJuIHRoaXM7XG4gICAgICB2YXIgdCA9IHNsaWNlJDQuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgICAgdC5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICsrdGhpcy5fd2FpdGluZywgdGhpcy5fdGFza3MucHVzaCh0KTtcbiAgICAgIHBva2UkMSh0aGlzKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgYWJvcnQ6IGZ1bmN0aW9uIGFib3J0KCkge1xuICAgICAgaWYgKHRoaXMuX2Vycm9yID09IG51bGwpIF9hYm9ydCh0aGlzLCBuZXcgRXJyb3IoXCJhYm9ydFwiKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGF3YWl0OiBmdW5jdGlvbiBfYXdhaXQoY2FsbGJhY2spIHtcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBjYWxsYmFja1wiKTtcbiAgICAgIGlmICh0aGlzLl9jYWxsKSB0aHJvdyBuZXcgRXJyb3IoXCJtdWx0aXBsZSBhd2FpdFwiKTtcbiAgICAgIHRoaXMuX2NhbGwgPSBmdW5jdGlvbiAoZXJyb3IsIHJlc3VsdHMpIHtcbiAgICAgICAgY2FsbGJhY2suYXBwbHkobnVsbCwgW2Vycm9yXS5jb25jYXQocmVzdWx0cykpO1xuICAgICAgfTtcbiAgICAgIG1heWJlTm90aWZ5KHRoaXMpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBhd2FpdEFsbDogZnVuY3Rpb24gYXdhaXRBbGwoY2FsbGJhY2spIHtcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBjYWxsYmFja1wiKTtcbiAgICAgIGlmICh0aGlzLl9jYWxsKSB0aHJvdyBuZXcgRXJyb3IoXCJtdWx0aXBsZSBhd2FpdFwiKTtcbiAgICAgIHRoaXMuX2NhbGwgPSBjYWxsYmFjaztcbiAgICAgIG1heWJlTm90aWZ5KHRoaXMpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHBva2UkMShxKSB7XG4gICAgaWYgKCFxLl9zdGFydCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc3RhcnQkMShxKTtcbiAgICAgIH0gLy8gbGV0IHRoZSBjdXJyZW50IHRhc2sgY29tcGxldGVcbiAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChxLl90YXNrc1txLl9lbmRlZCArIHEuX2FjdGl2ZSAtIDFdKSBfYWJvcnQocSwgZSk7IC8vIHRhc2sgZXJyb3JlZCBzeW5jaHJvbm91c2x5XG4gICAgICAgIGVsc2UgaWYgKCFxLl9kYXRhKSB0aHJvdyBlOyAvLyBhd2FpdCBjYWxsYmFjayBlcnJvcmVkIHN5bmNocm9ub3VzbHlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzdGFydCQxKHEpIHtcbiAgICB3aGlsZSAocS5fc3RhcnQgPSBxLl93YWl0aW5nICYmIHEuX2FjdGl2ZSA8IHEuX3NpemUpIHtcbiAgICAgIHZhciBpID0gcS5fZW5kZWQgKyBxLl9hY3RpdmUsXG4gICAgICAgICAgdCA9IHEuX3Rhc2tzW2ldLFxuICAgICAgICAgIGogPSB0Lmxlbmd0aCAtIDEsXG4gICAgICAgICAgYyA9IHRbal07XG4gICAgICB0W2pdID0gZW5kKHEsIGkpO1xuICAgICAgLS1xLl93YWl0aW5nLCArK3EuX2FjdGl2ZTtcbiAgICAgIHQgPSBjLmFwcGx5KG51bGwsIHQpO1xuICAgICAgaWYgKCFxLl90YXNrc1tpXSkgY29udGludWU7IC8vIHRhc2sgZmluaXNoZWQgc3luY2hyb25vdXNseVxuICAgICAgcS5fdGFza3NbaV0gPSB0IHx8IG5vYWJvcnQ7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZW5kKHEsIGkpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGUsIHIpIHtcbiAgICAgIGlmICghcS5fdGFza3NbaV0pIHJldHVybjsgLy8gaWdub3JlIG11bHRpcGxlIGNhbGxiYWNrc1xuICAgICAgLS1xLl9hY3RpdmUsICsrcS5fZW5kZWQ7XG4gICAgICBxLl90YXNrc1tpXSA9IG51bGw7XG4gICAgICBpZiAocS5fZXJyb3IgIT0gbnVsbCkgcmV0dXJuOyAvLyBpZ25vcmUgc2Vjb25kYXJ5IGVycm9yc1xuICAgICAgaWYgKGUgIT0gbnVsbCkge1xuICAgICAgICBfYWJvcnQocSwgZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBxLl9kYXRhW2ldID0gcjtcbiAgICAgICAgaWYgKHEuX3dhaXRpbmcpIHBva2UkMShxKTtlbHNlIG1heWJlTm90aWZ5KHEpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBfYWJvcnQocSwgZSkge1xuICAgIHZhciBpID0gcS5fdGFza3MubGVuZ3RoLFxuICAgICAgICB0O1xuICAgIHEuX2Vycm9yID0gZTsgLy8gaWdub3JlIGFjdGl2ZSBjYWxsYmFja3NcbiAgICBxLl9kYXRhID0gdW5kZWZpbmVkOyAvLyBhbGxvdyBnY1xuICAgIHEuX3dhaXRpbmcgPSBOYU47IC8vIHByZXZlbnQgc3RhcnRpbmdcblxuICAgIHdoaWxlICgtLWkgPj0gMCkge1xuICAgICAgaWYgKHQgPSBxLl90YXNrc1tpXSkge1xuICAgICAgICBxLl90YXNrc1tpXSA9IG51bGw7XG4gICAgICAgIGlmICh0LmFib3J0KSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHQuYWJvcnQoKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7LyogaWdub3JlICovfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcS5fYWN0aXZlID0gTmFOOyAvLyBhbGxvdyBub3RpZmljYXRpb25cbiAgICBtYXliZU5vdGlmeShxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1heWJlTm90aWZ5KHEpIHtcbiAgICBpZiAoIXEuX2FjdGl2ZSAmJiBxLl9jYWxsKSB7XG4gICAgICB2YXIgZCA9IHEuX2RhdGE7XG4gICAgICBxLl9kYXRhID0gdW5kZWZpbmVkOyAvLyBhbGxvdyBnY1xuICAgICAgcS5fY2FsbChxLl9lcnJvciwgZCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcXVldWUoY29uY3VycmVuY3kpIHtcbiAgICBpZiAoY29uY3VycmVuY3kgPT0gbnVsbCkgY29uY3VycmVuY3kgPSBJbmZpbml0eTtlbHNlIGlmICghKChjb25jdXJyZW5jeSA9ICtjb25jdXJyZW5jeSkgPj0gMSkpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgY29uY3VycmVuY3lcIik7XG4gICAgcmV0dXJuIG5ldyBRdWV1ZShjb25jdXJyZW5jeSk7XG4gIH1cblxuICB2YXIgZGVmYXVsdFNvdXJjZSQxID0gZnVuY3Rpb24gZGVmYXVsdFNvdXJjZSQxKCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpO1xuICB9O1xuXG4gIHZhciB1bmlmb3JtID0gZnVuY3Rpb24gc291cmNlUmFuZG9tVW5pZm9ybShzb3VyY2UpIHtcbiAgICBmdW5jdGlvbiByYW5kb21Vbmlmb3JtKG1pbiwgbWF4KSB7XG4gICAgICBtaW4gPSBtaW4gPT0gbnVsbCA/IDAgOiArbWluO1xuICAgICAgbWF4ID0gbWF4ID09IG51bGwgPyAxIDogK21heDtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSBtYXggPSBtaW4sIG1pbiA9IDA7ZWxzZSBtYXggLT0gbWluO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZSgpICogbWF4ICsgbWluO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByYW5kb21Vbmlmb3JtLnNvdXJjZSA9IHNvdXJjZVJhbmRvbVVuaWZvcm07XG5cbiAgICByZXR1cm4gcmFuZG9tVW5pZm9ybTtcbiAgfShkZWZhdWx0U291cmNlJDEpO1xuXG4gIHZhciBub3JtYWwgPSBmdW5jdGlvbiBzb3VyY2VSYW5kb21Ob3JtYWwoc291cmNlKSB7XG4gICAgZnVuY3Rpb24gcmFuZG9tTm9ybWFsKG11LCBzaWdtYSkge1xuICAgICAgdmFyIHgsIHI7XG4gICAgICBtdSA9IG11ID09IG51bGwgPyAwIDogK211O1xuICAgICAgc2lnbWEgPSBzaWdtYSA9PSBudWxsID8gMSA6ICtzaWdtYTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB5O1xuXG4gICAgICAgIC8vIElmIGF2YWlsYWJsZSwgdXNlIHRoZSBzZWNvbmQgcHJldmlvdXNseS1nZW5lcmF0ZWQgdW5pZm9ybSByYW5kb20uXG4gICAgICAgIGlmICh4ICE9IG51bGwpIHkgPSB4LCB4ID0gbnVsbDtcblxuICAgICAgICAvLyBPdGhlcndpc2UsIGdlbmVyYXRlIGEgbmV3IHggYW5kIHkuXG4gICAgICAgIGVsc2UgZG8ge1xuICAgICAgICAgICAgeCA9IHNvdXJjZSgpICogMiAtIDE7XG4gICAgICAgICAgICB5ID0gc291cmNlKCkgKiAyIC0gMTtcbiAgICAgICAgICAgIHIgPSB4ICogeCArIHkgKiB5O1xuICAgICAgICAgIH0gd2hpbGUgKCFyIHx8IHIgPiAxKTtcblxuICAgICAgICByZXR1cm4gbXUgKyBzaWdtYSAqIHkgKiBNYXRoLnNxcnQoLTIgKiBNYXRoLmxvZyhyKSAvIHIpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByYW5kb21Ob3JtYWwuc291cmNlID0gc291cmNlUmFuZG9tTm9ybWFsO1xuXG4gICAgcmV0dXJuIHJhbmRvbU5vcm1hbDtcbiAgfShkZWZhdWx0U291cmNlJDEpO1xuXG4gIHZhciBsb2dOb3JtYWwgPSBmdW5jdGlvbiBzb3VyY2VSYW5kb21Mb2dOb3JtYWwoc291cmNlKSB7XG4gICAgZnVuY3Rpb24gcmFuZG9tTG9nTm9ybWFsKCkge1xuICAgICAgdmFyIHJhbmRvbU5vcm1hbCA9IG5vcm1hbC5zb3VyY2Uoc291cmNlKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguZXhwKHJhbmRvbU5vcm1hbCgpKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmFuZG9tTG9nTm9ybWFsLnNvdXJjZSA9IHNvdXJjZVJhbmRvbUxvZ05vcm1hbDtcblxuICAgIHJldHVybiByYW5kb21Mb2dOb3JtYWw7XG4gIH0oZGVmYXVsdFNvdXJjZSQxKTtcblxuICB2YXIgaXJ3aW5IYWxsID0gZnVuY3Rpb24gc291cmNlUmFuZG9tSXJ3aW5IYWxsKHNvdXJjZSkge1xuICAgIGZ1bmN0aW9uIHJhbmRvbUlyd2luSGFsbChuKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKHZhciBzdW0gPSAwLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICAgIHN1bSArPSBzb3VyY2UoKTtcbiAgICAgICAgfXJldHVybiBzdW07XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJhbmRvbUlyd2luSGFsbC5zb3VyY2UgPSBzb3VyY2VSYW5kb21JcndpbkhhbGw7XG5cbiAgICByZXR1cm4gcmFuZG9tSXJ3aW5IYWxsO1xuICB9KGRlZmF1bHRTb3VyY2UkMSk7XG5cbiAgdmFyIGJhdGVzID0gZnVuY3Rpb24gc291cmNlUmFuZG9tQmF0ZXMoc291cmNlKSB7XG4gICAgZnVuY3Rpb24gcmFuZG9tQmF0ZXMobikge1xuICAgICAgdmFyIHJhbmRvbUlyd2luSGFsbCA9IGlyd2luSGFsbC5zb3VyY2Uoc291cmNlKShuKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiByYW5kb21JcndpbkhhbGwoKSAvIG47XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJhbmRvbUJhdGVzLnNvdXJjZSA9IHNvdXJjZVJhbmRvbUJhdGVzO1xuXG4gICAgcmV0dXJuIHJhbmRvbUJhdGVzO1xuICB9KGRlZmF1bHRTb3VyY2UkMSk7XG5cbiAgdmFyIGV4cG9uZW50aWFsJDEgPSBmdW5jdGlvbiBzb3VyY2VSYW5kb21FeHBvbmVudGlhbChzb3VyY2UpIHtcbiAgICBmdW5jdGlvbiByYW5kb21FeHBvbmVudGlhbChsYW1iZGEpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAtTWF0aC5sb2coMSAtIHNvdXJjZSgpKSAvIGxhbWJkYTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmFuZG9tRXhwb25lbnRpYWwuc291cmNlID0gc291cmNlUmFuZG9tRXhwb25lbnRpYWw7XG5cbiAgICByZXR1cm4gcmFuZG9tRXhwb25lbnRpYWw7XG4gIH0oZGVmYXVsdFNvdXJjZSQxKTtcblxuICB2YXIgcmVxdWVzdCA9IGZ1bmN0aW9uIHJlcXVlc3QodXJsLCBjYWxsYmFjaykge1xuICAgIHZhciByZXF1ZXN0LFxuICAgICAgICBldmVudCA9IGRpc3BhdGNoKFwiYmVmb3Jlc2VuZFwiLCBcInByb2dyZXNzXCIsIFwibG9hZFwiLCBcImVycm9yXCIpLFxuICAgICAgICBfbWltZVR5cGUsXG4gICAgICAgIGhlYWRlcnMgPSBtYXAkMSgpLFxuICAgICAgICB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKSxcbiAgICAgICAgX3VzZXIgPSBudWxsLFxuICAgICAgICBfcGFzc3dvcmQgPSBudWxsLFxuICAgICAgICBfcmVzcG9uc2UsXG4gICAgICAgIF9yZXNwb25zZVR5cGUsXG4gICAgICAgIF90aW1lb3V0ID0gMDtcblxuICAgIC8vIElmIElFIGRvZXMgbm90IHN1cHBvcnQgQ09SUywgdXNlIFhEb21haW5SZXF1ZXN0LlxuICAgIGlmICh0eXBlb2YgWERvbWFpblJlcXVlc3QgIT09IFwidW5kZWZpbmVkXCIgJiYgIShcIndpdGhDcmVkZW50aWFsc1wiIGluIHhocikgJiYgL14oaHR0cChzKT86KT9cXC9cXC8vLnRlc3QodXJsKSkgeGhyID0gbmV3IFhEb21haW5SZXF1ZXN0KCk7XG5cbiAgICBcIm9ubG9hZFwiIGluIHhociA/IHhoci5vbmxvYWQgPSB4aHIub25lcnJvciA9IHhoci5vbnRpbWVvdXQgPSByZXNwb25kIDogeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIChvKSB7XG4gICAgICB4aHIucmVhZHlTdGF0ZSA+IDMgJiYgcmVzcG9uZChvKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gcmVzcG9uZChvKSB7XG4gICAgICB2YXIgc3RhdHVzID0geGhyLnN0YXR1cyxcbiAgICAgICAgICByZXN1bHQ7XG4gICAgICBpZiAoIXN0YXR1cyAmJiBoYXNSZXNwb25zZSh4aHIpIHx8IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0KSB7XG4gICAgICAgIGlmIChfcmVzcG9uc2UpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gX3Jlc3BvbnNlLmNhbGwocmVxdWVzdCwgeGhyKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBldmVudC5jYWxsKFwiZXJyb3JcIiwgcmVxdWVzdCwgZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdCA9IHhocjtcbiAgICAgICAgfVxuICAgICAgICBldmVudC5jYWxsKFwibG9hZFwiLCByZXF1ZXN0LCByZXN1bHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXZlbnQuY2FsbChcImVycm9yXCIsIHJlcXVlc3QsIG8pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHhoci5vbnByb2dyZXNzID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGV2ZW50LmNhbGwoXCJwcm9ncmVzc1wiLCByZXF1ZXN0LCBlKTtcbiAgICB9O1xuXG4gICAgcmVxdWVzdCA9IHtcbiAgICAgIGhlYWRlcjogZnVuY3Rpb24gaGVhZGVyKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIG5hbWUgPSAobmFtZSArIFwiXCIpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcmV0dXJuIGhlYWRlcnMuZ2V0KG5hbWUpO1xuICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCkgaGVhZGVycy5yZW1vdmUobmFtZSk7ZWxzZSBoZWFkZXJzLnNldChuYW1lLCB2YWx1ZSArIFwiXCIpO1xuICAgICAgICByZXR1cm4gcmVxdWVzdDtcbiAgICAgIH0sXG5cbiAgICAgIC8vIElmIG1pbWVUeXBlIGlzIG5vbi1udWxsIGFuZCBubyBBY2NlcHQgaGVhZGVyIGlzIHNldCwgYSBkZWZhdWx0IGlzIHVzZWQuXG4gICAgICBtaW1lVHlwZTogZnVuY3Rpb24gbWltZVR5cGUodmFsdWUpIHtcbiAgICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gX21pbWVUeXBlO1xuICAgICAgICBfbWltZVR5cGUgPSB2YWx1ZSA9PSBudWxsID8gbnVsbCA6IHZhbHVlICsgXCJcIjtcbiAgICAgICAgcmV0dXJuIHJlcXVlc3Q7XG4gICAgICB9LFxuXG4gICAgICAvLyBTcGVjaWZpZXMgd2hhdCB0eXBlIHRoZSByZXNwb25zZSB2YWx1ZSBzaG91bGQgdGFrZTtcbiAgICAgIC8vIGZvciBpbnN0YW5jZSwgYXJyYXlidWZmZXIsIGJsb2IsIGRvY3VtZW50LCBvciB0ZXh0LlxuICAgICAgcmVzcG9uc2VUeXBlOiBmdW5jdGlvbiByZXNwb25zZVR5cGUodmFsdWUpIHtcbiAgICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gX3Jlc3BvbnNlVHlwZTtcbiAgICAgICAgX3Jlc3BvbnNlVHlwZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gcmVxdWVzdDtcbiAgICAgIH0sXG5cbiAgICAgIHRpbWVvdXQ6IGZ1bmN0aW9uIHRpbWVvdXQodmFsdWUpIHtcbiAgICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gX3RpbWVvdXQ7XG4gICAgICAgIF90aW1lb3V0ID0gK3ZhbHVlO1xuICAgICAgICByZXR1cm4gcmVxdWVzdDtcbiAgICAgIH0sXG5cbiAgICAgIHVzZXI6IGZ1bmN0aW9uIHVzZXIodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAxID8gX3VzZXIgOiAoX3VzZXIgPSB2YWx1ZSA9PSBudWxsID8gbnVsbCA6IHZhbHVlICsgXCJcIiwgcmVxdWVzdCk7XG4gICAgICB9LFxuXG4gICAgICBwYXNzd29yZDogZnVuY3Rpb24gcGFzc3dvcmQodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAxID8gX3Bhc3N3b3JkIDogKF9wYXNzd29yZCA9IHZhbHVlID09IG51bGwgPyBudWxsIDogdmFsdWUgKyBcIlwiLCByZXF1ZXN0KTtcbiAgICAgIH0sXG5cbiAgICAgIC8vIFNwZWNpZnkgaG93IHRvIGNvbnZlcnQgdGhlIHJlc3BvbnNlIGNvbnRlbnQgdG8gYSBzcGVjaWZpYyB0eXBlO1xuICAgICAgLy8gY2hhbmdlcyB0aGUgY2FsbGJhY2sgdmFsdWUgb24gXCJsb2FkXCIgZXZlbnRzLlxuICAgICAgcmVzcG9uc2U6IGZ1bmN0aW9uIHJlc3BvbnNlKHZhbHVlKSB7XG4gICAgICAgIF9yZXNwb25zZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gcmVxdWVzdDtcbiAgICAgIH0sXG5cbiAgICAgIC8vIEFsaWFzIGZvciBzZW5kKFwiR0VUXCIsIOKApikuXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldChkYXRhLCBjYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gcmVxdWVzdC5zZW5kKFwiR0VUXCIsIGRhdGEsIGNhbGxiYWNrKTtcbiAgICAgIH0sXG5cbiAgICAgIC8vIEFsaWFzIGZvciBzZW5kKFwiUE9TVFwiLCDigKYpLlxuICAgICAgcG9zdDogZnVuY3Rpb24gcG9zdChkYXRhLCBjYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gcmVxdWVzdC5zZW5kKFwiUE9TVFwiLCBkYXRhLCBjYWxsYmFjayk7XG4gICAgICB9LFxuXG4gICAgICAvLyBJZiBjYWxsYmFjayBpcyBub24tbnVsbCwgaXQgd2lsbCBiZSB1c2VkIGZvciBlcnJvciBhbmQgbG9hZCBldmVudHMuXG4gICAgICBzZW5kOiBmdW5jdGlvbiBzZW5kKG1ldGhvZCwgZGF0YSwgY2FsbGJhY2spIHtcbiAgICAgICAgeGhyLm9wZW4obWV0aG9kLCB1cmwsIHRydWUsIF91c2VyLCBfcGFzc3dvcmQpO1xuICAgICAgICBpZiAoX21pbWVUeXBlICE9IG51bGwgJiYgIWhlYWRlcnMuaGFzKFwiYWNjZXB0XCIpKSBoZWFkZXJzLnNldChcImFjY2VwdFwiLCBfbWltZVR5cGUgKyBcIiwqLypcIik7XG4gICAgICAgIGlmICh4aHIuc2V0UmVxdWVzdEhlYWRlcikgaGVhZGVycy5lYWNoKGZ1bmN0aW9uICh2YWx1ZSwgbmFtZSkge1xuICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChfbWltZVR5cGUgIT0gbnVsbCAmJiB4aHIub3ZlcnJpZGVNaW1lVHlwZSkgeGhyLm92ZXJyaWRlTWltZVR5cGUoX21pbWVUeXBlKTtcbiAgICAgICAgaWYgKF9yZXNwb25zZVR5cGUgIT0gbnVsbCkgeGhyLnJlc3BvbnNlVHlwZSA9IF9yZXNwb25zZVR5cGU7XG4gICAgICAgIGlmIChfdGltZW91dCA+IDApIHhoci50aW1lb3V0ID0gX3RpbWVvdXQ7XG4gICAgICAgIGlmIChjYWxsYmFjayA9PSBudWxsICYmIHR5cGVvZiBkYXRhID09PSBcImZ1bmN0aW9uXCIpIGNhbGxiYWNrID0gZGF0YSwgZGF0YSA9IG51bGw7XG4gICAgICAgIGlmIChjYWxsYmFjayAhPSBudWxsICYmIGNhbGxiYWNrLmxlbmd0aCA9PT0gMSkgY2FsbGJhY2sgPSBmaXhDYWxsYmFjayhjYWxsYmFjayk7XG4gICAgICAgIGlmIChjYWxsYmFjayAhPSBudWxsKSByZXF1ZXN0Lm9uKFwiZXJyb3JcIiwgY2FsbGJhY2spLm9uKFwibG9hZFwiLCBmdW5jdGlvbiAoeGhyKSB7XG4gICAgICAgICAgY2FsbGJhY2sobnVsbCwgeGhyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGV2ZW50LmNhbGwoXCJiZWZvcmVzZW5kXCIsIHJlcXVlc3QsIHhocik7XG4gICAgICAgIHhoci5zZW5kKGRhdGEgPT0gbnVsbCA/IG51bGwgOiBkYXRhKTtcbiAgICAgICAgcmV0dXJuIHJlcXVlc3Q7XG4gICAgICB9LFxuXG4gICAgICBhYm9ydDogZnVuY3Rpb24gYWJvcnQoKSB7XG4gICAgICAgIHhoci5hYm9ydCgpO1xuICAgICAgICByZXR1cm4gcmVxdWVzdDtcbiAgICAgIH0sXG5cbiAgICAgIG9uOiBmdW5jdGlvbiBvbigpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gZXZlbnQub24uYXBwbHkoZXZlbnQsIGFyZ3VtZW50cyk7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gZXZlbnQgPyByZXF1ZXN0IDogdmFsdWU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmIChjYWxsYmFjayAhPSBudWxsKSB7XG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgY2FsbGJhY2s6IFwiICsgY2FsbGJhY2spO1xuICAgICAgcmV0dXJuIHJlcXVlc3QuZ2V0KGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVxdWVzdDtcbiAgfTtcblxuICBmdW5jdGlvbiBmaXhDYWxsYmFjayhjYWxsYmFjaykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZXJyb3IsIHhocikge1xuICAgICAgY2FsbGJhY2soZXJyb3IgPT0gbnVsbCA/IHhociA6IG51bGwpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBoYXNSZXNwb25zZSh4aHIpIHtcbiAgICB2YXIgdHlwZSA9IHhoci5yZXNwb25zZVR5cGU7XG4gICAgcmV0dXJuIHR5cGUgJiYgdHlwZSAhPT0gXCJ0ZXh0XCIgPyB4aHIucmVzcG9uc2UgLy8gbnVsbCBvbiBlcnJvclxuICAgIDogeGhyLnJlc3BvbnNlVGV4dDsgLy8gXCJcIiBvbiBlcnJvclxuICB9XG5cbiAgdmFyIHR5cGUkMSA9IGZ1bmN0aW9uIHR5cGUkMShkZWZhdWx0TWltZVR5cGUsIHJlc3BvbnNlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh1cmwsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgciA9IHJlcXVlc3QodXJsKS5taW1lVHlwZShkZWZhdWx0TWltZVR5cGUpLnJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgICAgIGlmIChjYWxsYmFjayAhPSBudWxsKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBjYWxsYmFjazogXCIgKyBjYWxsYmFjayk7XG4gICAgICAgIHJldHVybiByLmdldChjYWxsYmFjayk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcjtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBodG1sID0gdHlwZSQxKFwidGV4dC9odG1sXCIsIGZ1bmN0aW9uICh4aHIpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKS5jcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQoeGhyLnJlc3BvbnNlVGV4dCk7XG4gIH0pO1xuXG4gIHZhciBqc29uID0gdHlwZSQxKFwiYXBwbGljYXRpb24vanNvblwiLCBmdW5jdGlvbiAoeGhyKSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCk7XG4gIH0pO1xuXG4gIHZhciB0ZXh0ID0gdHlwZSQxKFwidGV4dC9wbGFpblwiLCBmdW5jdGlvbiAoeGhyKSB7XG4gICAgcmV0dXJuIHhoci5yZXNwb25zZVRleHQ7XG4gIH0pO1xuXG4gIHZhciB4bWwgPSB0eXBlJDEoXCJhcHBsaWNhdGlvbi94bWxcIiwgZnVuY3Rpb24gKHhocikge1xuICAgIHZhciB4bWwgPSB4aHIucmVzcG9uc2VYTUw7XG4gICAgaWYgKCF4bWwpIHRocm93IG5ldyBFcnJvcihcInBhcnNlIGVycm9yXCIpO1xuICAgIHJldHVybiB4bWw7XG4gIH0pO1xuXG4gIHZhciBkc3YkMSA9IGZ1bmN0aW9uIGRzdiQxKGRlZmF1bHRNaW1lVHlwZSwgcGFyc2UpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHVybCwgcm93LCBjYWxsYmFjaykge1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAzKSBjYWxsYmFjayA9IHJvdywgcm93ID0gbnVsbDtcbiAgICAgIHZhciByID0gcmVxdWVzdCh1cmwpLm1pbWVUeXBlKGRlZmF1bHRNaW1lVHlwZSk7XG4gICAgICByLnJvdyA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gci5yZXNwb25zZShyZXNwb25zZU9mKHBhcnNlLCByb3cgPSBfKSkgOiByb3c7XG4gICAgICB9O1xuICAgICAgci5yb3cocm93KTtcbiAgICAgIHJldHVybiBjYWxsYmFjayA/IHIuZ2V0KGNhbGxiYWNrKSA6IHI7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiByZXNwb25zZU9mKHBhcnNlLCByb3cpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHJlcXVlc3QkJDEpIHtcbiAgICAgIHJldHVybiBwYXJzZShyZXF1ZXN0JCQxLnJlc3BvbnNlVGV4dCwgcm93KTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGNzdiQxID0gZHN2JDEoXCJ0ZXh0L2NzdlwiLCBjc3ZQYXJzZSk7XG5cbiAgdmFyIHRzdiQxID0gZHN2JDEoXCJ0ZXh0L3RhYi1zZXBhcmF0ZWQtdmFsdWVzXCIsIHRzdlBhcnNlKTtcblxuICB2YXIgYXJyYXkkMiA9IEFycmF5LnByb3RvdHlwZTtcblxuICB2YXIgbWFwJDMgPSBhcnJheSQyLm1hcDtcbiAgdmFyIHNsaWNlJDUgPSBhcnJheSQyLnNsaWNlO1xuXG4gIHZhciBpbXBsaWNpdCA9IHsgbmFtZTogXCJpbXBsaWNpdFwiIH07XG5cbiAgZnVuY3Rpb24gb3JkaW5hbChyYW5nZSkge1xuICAgIHZhciBpbmRleCA9IG1hcCQxKCksXG4gICAgICAgIGRvbWFpbiA9IFtdLFxuICAgICAgICB1bmtub3duID0gaW1wbGljaXQ7XG5cbiAgICByYW5nZSA9IHJhbmdlID09IG51bGwgPyBbXSA6IHNsaWNlJDUuY2FsbChyYW5nZSk7XG5cbiAgICBmdW5jdGlvbiBzY2FsZShkKSB7XG4gICAgICB2YXIga2V5ID0gZCArIFwiXCIsXG4gICAgICAgICAgaSA9IGluZGV4LmdldChrZXkpO1xuICAgICAgaWYgKCFpKSB7XG4gICAgICAgIGlmICh1bmtub3duICE9PSBpbXBsaWNpdCkgcmV0dXJuIHVua25vd247XG4gICAgICAgIGluZGV4LnNldChrZXksIGkgPSBkb21haW4ucHVzaChkKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmFuZ2VbKGkgLSAxKSAlIHJhbmdlLmxlbmd0aF07XG4gICAgfVxuXG4gICAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGRvbWFpbi5zbGljZSgpO1xuICAgICAgZG9tYWluID0gW10sIGluZGV4ID0gbWFwJDEoKTtcbiAgICAgIHZhciBpID0gLTEsXG4gICAgICAgICAgbiA9IF8ubGVuZ3RoLFxuICAgICAgICAgIGQsXG4gICAgICAgICAga2V5O1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgaWYgKCFpbmRleC5oYXMoa2V5ID0gKGQgPSBfW2ldKSArIFwiXCIpKSBpbmRleC5zZXQoa2V5LCBkb21haW4ucHVzaChkKSk7XG4gICAgICB9cmV0dXJuIHNjYWxlO1xuICAgIH07XG5cbiAgICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IHNsaWNlJDUuY2FsbChfKSwgc2NhbGUpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgICB9O1xuXG4gICAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogdW5rbm93bjtcbiAgICB9O1xuXG4gICAgc2NhbGUuY29weSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBvcmRpbmFsKCkuZG9tYWluKGRvbWFpbikucmFuZ2UocmFuZ2UpLnVua25vd24odW5rbm93bik7XG4gICAgfTtcblxuICAgIHJldHVybiBzY2FsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJhbmQoKSB7XG4gICAgdmFyIHNjYWxlID0gb3JkaW5hbCgpLnVua25vd24odW5kZWZpbmVkKSxcbiAgICAgICAgZG9tYWluID0gc2NhbGUuZG9tYWluLFxuICAgICAgICBvcmRpbmFsUmFuZ2UgPSBzY2FsZS5yYW5nZSxcbiAgICAgICAgcmFuZ2UgPSBbMCwgMV0sXG4gICAgICAgIHN0ZXAsXG4gICAgICAgIGJhbmR3aWR0aCxcbiAgICAgICAgcm91bmQgPSBmYWxzZSxcbiAgICAgICAgcGFkZGluZ0lubmVyID0gMCxcbiAgICAgICAgcGFkZGluZ091dGVyID0gMCxcbiAgICAgICAgYWxpZ24gPSAwLjU7XG5cbiAgICBkZWxldGUgc2NhbGUudW5rbm93bjtcblxuICAgIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgICB2YXIgbiA9IGRvbWFpbigpLmxlbmd0aCxcbiAgICAgICAgICByZXZlcnNlID0gcmFuZ2VbMV0gPCByYW5nZVswXSxcbiAgICAgICAgICBzdGFydCA9IHJhbmdlW3JldmVyc2UgLSAwXSxcbiAgICAgICAgICBzdG9wID0gcmFuZ2VbMSAtIHJldmVyc2VdO1xuICAgICAgc3RlcCA9IChzdG9wIC0gc3RhcnQpIC8gTWF0aC5tYXgoMSwgbiAtIHBhZGRpbmdJbm5lciArIHBhZGRpbmdPdXRlciAqIDIpO1xuICAgICAgaWYgKHJvdW5kKSBzdGVwID0gTWF0aC5mbG9vcihzdGVwKTtcbiAgICAgIHN0YXJ0ICs9IChzdG9wIC0gc3RhcnQgLSBzdGVwICogKG4gLSBwYWRkaW5nSW5uZXIpKSAqIGFsaWduO1xuICAgICAgYmFuZHdpZHRoID0gc3RlcCAqICgxIC0gcGFkZGluZ0lubmVyKTtcbiAgICAgIGlmIChyb3VuZCkgc3RhcnQgPSBNYXRoLnJvdW5kKHN0YXJ0KSwgYmFuZHdpZHRoID0gTWF0aC5yb3VuZChiYW5kd2lkdGgpO1xuICAgICAgdmFyIHZhbHVlcyA9IHNlcXVlbmNlKG4pLm1hcChmdW5jdGlvbiAoaSkge1xuICAgICAgICByZXR1cm4gc3RhcnQgKyBzdGVwICogaTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG9yZGluYWxSYW5nZShyZXZlcnNlID8gdmFsdWVzLnJldmVyc2UoKSA6IHZhbHVlcyk7XG4gICAgfVxuXG4gICAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRvbWFpbihfKSwgcmVzY2FsZSgpKSA6IGRvbWFpbigpO1xuICAgIH07XG5cbiAgICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IFsrX1swXSwgK19bMV1dLCByZXNjYWxlKCkpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgICB9O1xuXG4gICAgc2NhbGUucmFuZ2VSb3VuZCA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gcmFuZ2UgPSBbK19bMF0sICtfWzFdXSwgcm91bmQgPSB0cnVlLCByZXNjYWxlKCk7XG4gICAgfTtcblxuICAgIHNjYWxlLmJhbmR3aWR0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBiYW5kd2lkdGg7XG4gICAgfTtcblxuICAgIHNjYWxlLnN0ZXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gc3RlcDtcbiAgICB9O1xuXG4gICAgc2NhbGUucm91bmQgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocm91bmQgPSAhIV8sIHJlc2NhbGUoKSkgOiByb3VuZDtcbiAgICB9O1xuXG4gICAgc2NhbGUucGFkZGluZyA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nSW5uZXIgPSBwYWRkaW5nT3V0ZXIgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBfKSksIHJlc2NhbGUoKSkgOiBwYWRkaW5nSW5uZXI7XG4gICAgfTtcblxuICAgIHNjYWxlLnBhZGRpbmdJbm5lciA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nSW5uZXIgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBfKSksIHJlc2NhbGUoKSkgOiBwYWRkaW5nSW5uZXI7XG4gICAgfTtcblxuICAgIHNjYWxlLnBhZGRpbmdPdXRlciA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nT3V0ZXIgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBfKSksIHJlc2NhbGUoKSkgOiBwYWRkaW5nT3V0ZXI7XG4gICAgfTtcblxuICAgIHNjYWxlLmFsaWduID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGFsaWduID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgXykpLCByZXNjYWxlKCkpIDogYWxpZ247XG4gICAgfTtcblxuICAgIHNjYWxlLmNvcHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gYmFuZCgpLmRvbWFpbihkb21haW4oKSkucmFuZ2UocmFuZ2UpLnJvdW5kKHJvdW5kKS5wYWRkaW5nSW5uZXIocGFkZGluZ0lubmVyKS5wYWRkaW5nT3V0ZXIocGFkZGluZ091dGVyKS5hbGlnbihhbGlnbik7XG4gICAgfTtcblxuICAgIHJldHVybiByZXNjYWxlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBwb2ludGlzaChzY2FsZSkge1xuICAgIHZhciBjb3B5ID0gc2NhbGUuY29weTtcblxuICAgIHNjYWxlLnBhZGRpbmcgPSBzY2FsZS5wYWRkaW5nT3V0ZXI7XG4gICAgZGVsZXRlIHNjYWxlLnBhZGRpbmdJbm5lcjtcbiAgICBkZWxldGUgc2NhbGUucGFkZGluZ091dGVyO1xuXG4gICAgc2NhbGUuY29weSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBwb2ludGlzaChjb3B5KCkpO1xuICAgIH07XG5cbiAgICByZXR1cm4gc2NhbGU7XG4gIH1cblxuICBmdW5jdGlvbiBwb2ludCQxKCkge1xuICAgIHJldHVybiBwb2ludGlzaChiYW5kKCkucGFkZGluZ0lubmVyKDEpKTtcbiAgfVxuXG4gIHZhciBjb25zdGFudCQ5ID0gZnVuY3Rpb24gY29uc3RhbnQkOSh4KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB4O1xuICAgIH07XG4gIH07XG5cbiAgdmFyIG51bWJlciQyID0gZnVuY3Rpb24gbnVtYmVyJDIoeCkge1xuICAgIHJldHVybiAreDtcbiAgfTtcblxuICB2YXIgdW5pdCA9IFswLCAxXTtcblxuICBmdW5jdGlvbiBkZWludGVycG9sYXRlTGluZWFyKGEsIGIpIHtcbiAgICByZXR1cm4gKGIgLT0gYSA9ICthKSA/IGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gKHggLSBhKSAvIGI7XG4gICAgfSA6IGNvbnN0YW50JDkoYik7XG4gIH1cblxuICBmdW5jdGlvbiBkZWludGVycG9sYXRlQ2xhbXAoZGVpbnRlcnBvbGF0ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgdmFyIGQgPSBkZWludGVycG9sYXRlKGEgPSArYSwgYiA9ICtiKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4geCA8PSBhID8gMCA6IHggPj0gYiA/IDEgOiBkKHgpO1xuICAgICAgfTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcmVpbnRlcnBvbGF0ZUNsYW1wKHJlaW50ZXJwb2xhdGUkJDEpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHZhciByID0gcmVpbnRlcnBvbGF0ZSQkMShhID0gK2EsIGIgPSArYik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgcmV0dXJuIHQgPD0gMCA/IGEgOiB0ID49IDEgPyBiIDogcih0KTtcbiAgICAgIH07XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJpbWFwKGRvbWFpbiwgcmFuZ2UsIGRlaW50ZXJwb2xhdGUsIHJlaW50ZXJwb2xhdGUkJDEpIHtcbiAgICB2YXIgZDAgPSBkb21haW5bMF0sXG4gICAgICAgIGQxID0gZG9tYWluWzFdLFxuICAgICAgICByMCA9IHJhbmdlWzBdLFxuICAgICAgICByMSA9IHJhbmdlWzFdO1xuICAgIGlmIChkMSA8IGQwKSBkMCA9IGRlaW50ZXJwb2xhdGUoZDEsIGQwKSwgcjAgPSByZWludGVycG9sYXRlJCQxKHIxLCByMCk7ZWxzZSBkMCA9IGRlaW50ZXJwb2xhdGUoZDAsIGQxKSwgcjAgPSByZWludGVycG9sYXRlJCQxKHIwLCByMSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gcjAoZDAoeCkpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBwb2x5bWFwKGRvbWFpbiwgcmFuZ2UsIGRlaW50ZXJwb2xhdGUsIHJlaW50ZXJwb2xhdGUkJDEpIHtcbiAgICB2YXIgaiA9IE1hdGgubWluKGRvbWFpbi5sZW5ndGgsIHJhbmdlLmxlbmd0aCkgLSAxLFxuICAgICAgICBkID0gbmV3IEFycmF5KGopLFxuICAgICAgICByID0gbmV3IEFycmF5KGopLFxuICAgICAgICBpID0gLTE7XG5cbiAgICAvLyBSZXZlcnNlIGRlc2NlbmRpbmcgZG9tYWlucy5cbiAgICBpZiAoZG9tYWluW2pdIDwgZG9tYWluWzBdKSB7XG4gICAgICBkb21haW4gPSBkb21haW4uc2xpY2UoKS5yZXZlcnNlKCk7XG4gICAgICByYW5nZSA9IHJhbmdlLnNsaWNlKCkucmV2ZXJzZSgpO1xuICAgIH1cblxuICAgIHdoaWxlICgrK2kgPCBqKSB7XG4gICAgICBkW2ldID0gZGVpbnRlcnBvbGF0ZShkb21haW5baV0sIGRvbWFpbltpICsgMV0pO1xuICAgICAgcltpXSA9IHJlaW50ZXJwb2xhdGUkJDEocmFuZ2VbaV0sIHJhbmdlW2kgKyAxXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh4KSB7XG4gICAgICB2YXIgaSA9IGJpc2VjdFJpZ2h0KGRvbWFpbiwgeCwgMSwgaikgLSAxO1xuICAgICAgcmV0dXJuIHJbaV0oZFtpXSh4KSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvcHkoc291cmNlLCB0YXJnZXQpIHtcbiAgICByZXR1cm4gdGFyZ2V0LmRvbWFpbihzb3VyY2UuZG9tYWluKCkpLnJhbmdlKHNvdXJjZS5yYW5nZSgpKS5pbnRlcnBvbGF0ZShzb3VyY2UuaW50ZXJwb2xhdGUoKSkuY2xhbXAoc291cmNlLmNsYW1wKCkpO1xuICB9XG5cbiAgLy8gZGVpbnRlcnBvbGF0ZShhLCBiKSh4KSB0YWtlcyBhIGRvbWFpbiB2YWx1ZSB4IGluIFthLGJdIGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHBhcmFtZXRlciB0IGluIFswLDFdLlxuICAvLyByZWludGVycG9sYXRlKGEsIGIpKHQpIHRha2VzIGEgcGFyYW1ldGVyIHQgaW4gWzAsMV0gYW5kIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgZG9tYWluIHZhbHVlIHggaW4gW2EsYl0uXG4gIGZ1bmN0aW9uIGNvbnRpbnVvdXMoZGVpbnRlcnBvbGF0ZSwgcmVpbnRlcnBvbGF0ZSQkMSkge1xuICAgIHZhciBkb21haW4gPSB1bml0LFxuICAgICAgICByYW5nZSA9IHVuaXQsXG4gICAgICAgIGludGVycG9sYXRlID0gaW50ZXJwb2xhdGVWYWx1ZSxcbiAgICAgICAgY2xhbXAgPSBmYWxzZSxcbiAgICAgICAgcGllY2V3aXNlLFxuICAgICAgICBvdXRwdXQsXG4gICAgICAgIGlucHV0O1xuXG4gICAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICAgIHBpZWNld2lzZSA9IE1hdGgubWluKGRvbWFpbi5sZW5ndGgsIHJhbmdlLmxlbmd0aCkgPiAyID8gcG9seW1hcCA6IGJpbWFwO1xuICAgICAgb3V0cHV0ID0gaW5wdXQgPSBudWxsO1xuICAgICAgcmV0dXJuIHNjYWxlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICAgIHJldHVybiAob3V0cHV0IHx8IChvdXRwdXQgPSBwaWVjZXdpc2UoZG9tYWluLCByYW5nZSwgY2xhbXAgPyBkZWludGVycG9sYXRlQ2xhbXAoZGVpbnRlcnBvbGF0ZSkgOiBkZWludGVycG9sYXRlLCBpbnRlcnBvbGF0ZSkpKSgreCk7XG4gICAgfVxuXG4gICAgc2NhbGUuaW52ZXJ0ID0gZnVuY3Rpb24gKHkpIHtcbiAgICAgIHJldHVybiAoaW5wdXQgfHwgKGlucHV0ID0gcGllY2V3aXNlKHJhbmdlLCBkb21haW4sIGRlaW50ZXJwb2xhdGVMaW5lYXIsIGNsYW1wID8gcmVpbnRlcnBvbGF0ZUNsYW1wKHJlaW50ZXJwb2xhdGUkJDEpIDogcmVpbnRlcnBvbGF0ZSQkMSkpKSgreSk7XG4gICAgfTtcblxuICAgIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4gPSBtYXAkMy5jYWxsKF8sIG51bWJlciQyKSwgcmVzY2FsZSgpKSA6IGRvbWFpbi5zbGljZSgpO1xuICAgIH07XG5cbiAgICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IHNsaWNlJDUuY2FsbChfKSwgcmVzY2FsZSgpKSA6IHJhbmdlLnNsaWNlKCk7XG4gICAgfTtcblxuICAgIHNjYWxlLnJhbmdlUm91bmQgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIHJhbmdlID0gc2xpY2UkNS5jYWxsKF8pLCBpbnRlcnBvbGF0ZSA9IGludGVycG9sYXRlUm91bmQsIHJlc2NhbGUoKTtcbiAgICB9O1xuXG4gICAgc2NhbGUuY2xhbXAgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2xhbXAgPSAhIV8sIHJlc2NhbGUoKSkgOiBjbGFtcDtcbiAgICB9O1xuXG4gICAgc2NhbGUuaW50ZXJwb2xhdGUgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaW50ZXJwb2xhdGUgPSBfLCByZXNjYWxlKCkpIDogaW50ZXJwb2xhdGU7XG4gICAgfTtcblxuICAgIHJldHVybiByZXNjYWxlKCk7XG4gIH1cblxuICB2YXIgdGlja0Zvcm1hdCA9IGZ1bmN0aW9uIHRpY2tGb3JtYXQoZG9tYWluLCBjb3VudCwgc3BlY2lmaWVyKSB7XG4gICAgdmFyIHN0YXJ0ID0gZG9tYWluWzBdLFxuICAgICAgICBzdG9wID0gZG9tYWluW2RvbWFpbi5sZW5ndGggLSAxXSxcbiAgICAgICAgc3RlcCA9IHRpY2tTdGVwKHN0YXJ0LCBzdG9wLCBjb3VudCA9PSBudWxsID8gMTAgOiBjb3VudCksXG4gICAgICAgIHByZWNpc2lvbjtcbiAgICBzcGVjaWZpZXIgPSBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyID09IG51bGwgPyBcIixmXCIgOiBzcGVjaWZpZXIpO1xuICAgIHN3aXRjaCAoc3BlY2lmaWVyLnR5cGUpIHtcbiAgICAgIGNhc2UgXCJzXCI6XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBNYXRoLm1heChNYXRoLmFicyhzdGFydCksIE1hdGguYWJzKHN0b3ApKTtcbiAgICAgICAgICBpZiAoc3BlY2lmaWVyLnByZWNpc2lvbiA9PSBudWxsICYmICFpc05hTihwcmVjaXNpb24gPSBwcmVjaXNpb25QcmVmaXgoc3RlcCwgdmFsdWUpKSkgc3BlY2lmaWVyLnByZWNpc2lvbiA9IHByZWNpc2lvbjtcbiAgICAgICAgICByZXR1cm4gZXhwb3J0cy5mb3JtYXRQcmVmaXgoc3BlY2lmaWVyLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgXCJcIjpcbiAgICAgIGNhc2UgXCJlXCI6XG4gICAgICBjYXNlIFwiZ1wiOlxuICAgICAgY2FzZSBcInBcIjpcbiAgICAgIGNhc2UgXCJyXCI6XG4gICAgICAgIHtcbiAgICAgICAgICBpZiAoc3BlY2lmaWVyLnByZWNpc2lvbiA9PSBudWxsICYmICFpc05hTihwcmVjaXNpb24gPSBwcmVjaXNpb25Sb3VuZChzdGVwLCBNYXRoLm1heChNYXRoLmFicyhzdGFydCksIE1hdGguYWJzKHN0b3ApKSkpKSBzcGVjaWZpZXIucHJlY2lzaW9uID0gcHJlY2lzaW9uIC0gKHNwZWNpZmllci50eXBlID09PSBcImVcIik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgXCJmXCI6XG4gICAgICBjYXNlIFwiJVwiOlxuICAgICAgICB7XG4gICAgICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uRml4ZWQoc3RlcCkpKSBzcGVjaWZpZXIucHJlY2lzaW9uID0gcHJlY2lzaW9uIC0gKHNwZWNpZmllci50eXBlID09PSBcIiVcIikgKiAyO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBleHBvcnRzLmZvcm1hdChzcGVjaWZpZXIpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGxpbmVhcmlzaChzY2FsZSkge1xuICAgIHZhciBkb21haW4gPSBzY2FsZS5kb21haW47XG5cbiAgICBzY2FsZS50aWNrcyA9IGZ1bmN0aW9uIChjb3VudCkge1xuICAgICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICAgIHJldHVybiB0aWNrcyhkWzBdLCBkW2QubGVuZ3RoIC0gMV0sIGNvdW50ID09IG51bGwgPyAxMCA6IGNvdW50KTtcbiAgICB9O1xuXG4gICAgc2NhbGUudGlja0Zvcm1hdCA9IGZ1bmN0aW9uIChjb3VudCwgc3BlY2lmaWVyKSB7XG4gICAgICByZXR1cm4gdGlja0Zvcm1hdChkb21haW4oKSwgY291bnQsIHNwZWNpZmllcik7XG4gICAgfTtcblxuICAgIHNjYWxlLm5pY2UgPSBmdW5jdGlvbiAoY291bnQpIHtcbiAgICAgIGlmIChjb3VudCA9PSBudWxsKSBjb3VudCA9IDEwO1xuXG4gICAgICB2YXIgZCA9IGRvbWFpbigpLFxuICAgICAgICAgIGkwID0gMCxcbiAgICAgICAgICBpMSA9IGQubGVuZ3RoIC0gMSxcbiAgICAgICAgICBzdGFydCA9IGRbaTBdLFxuICAgICAgICAgIHN0b3AgPSBkW2kxXSxcbiAgICAgICAgICBzdGVwO1xuXG4gICAgICBpZiAoc3RvcCA8IHN0YXJ0KSB7XG4gICAgICAgIHN0ZXAgPSBzdGFydCwgc3RhcnQgPSBzdG9wLCBzdG9wID0gc3RlcDtcbiAgICAgICAgc3RlcCA9IGkwLCBpMCA9IGkxLCBpMSA9IHN0ZXA7XG4gICAgICB9XG5cbiAgICAgIHN0ZXAgPSB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCk7XG5cbiAgICAgIGlmIChzdGVwID4gMCkge1xuICAgICAgICBzdGFydCA9IE1hdGguZmxvb3Ioc3RhcnQgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICAgIHN0b3AgPSBNYXRoLmNlaWwoc3RvcCAvIHN0ZXApICogc3RlcDtcbiAgICAgICAgc3RlcCA9IHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KTtcbiAgICAgIH0gZWxzZSBpZiAoc3RlcCA8IDApIHtcbiAgICAgICAgc3RhcnQgPSBNYXRoLmNlaWwoc3RhcnQgKiBzdGVwKSAvIHN0ZXA7XG4gICAgICAgIHN0b3AgPSBNYXRoLmZsb29yKHN0b3AgKiBzdGVwKSAvIHN0ZXA7XG4gICAgICAgIHN0ZXAgPSB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGVwID4gMCkge1xuICAgICAgICBkW2kwXSA9IE1hdGguZmxvb3Ioc3RhcnQgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICAgIGRbaTFdID0gTWF0aC5jZWlsKHN0b3AgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICAgIGRvbWFpbihkKTtcbiAgICAgIH0gZWxzZSBpZiAoc3RlcCA8IDApIHtcbiAgICAgICAgZFtpMF0gPSBNYXRoLmNlaWwoc3RhcnQgKiBzdGVwKSAvIHN0ZXA7XG4gICAgICAgIGRbaTFdID0gTWF0aC5mbG9vcihzdG9wICogc3RlcCkgLyBzdGVwO1xuICAgICAgICBkb21haW4oZCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzY2FsZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHNjYWxlO1xuICB9XG5cbiAgZnVuY3Rpb24gbGluZWFyJDIoKSB7XG4gICAgdmFyIHNjYWxlID0gY29udGludW91cyhkZWludGVycG9sYXRlTGluZWFyLCByZWludGVycG9sYXRlKTtcblxuICAgIHNjYWxlLmNvcHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gY29weShzY2FsZSwgbGluZWFyJDIoKSk7XG4gICAgfTtcblxuICAgIHJldHVybiBsaW5lYXJpc2goc2NhbGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gaWRlbnRpdHkkNigpIHtcbiAgICB2YXIgZG9tYWluID0gWzAsIDFdO1xuXG4gICAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgICAgcmV0dXJuICt4O1xuICAgIH1cblxuICAgIHNjYWxlLmludmVydCA9IHNjYWxlO1xuXG4gICAgc2NhbGUuZG9tYWluID0gc2NhbGUucmFuZ2UgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZG9tYWluID0gbWFwJDMuY2FsbChfLCBudW1iZXIkMiksIHNjYWxlKSA6IGRvbWFpbi5zbGljZSgpO1xuICAgIH07XG5cbiAgICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGlkZW50aXR5JDYoKS5kb21haW4oZG9tYWluKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGxpbmVhcmlzaChzY2FsZSk7XG4gIH1cblxuICB2YXIgbmljZSA9IGZ1bmN0aW9uIG5pY2UoZG9tYWluLCBpbnRlcnZhbCkge1xuICAgIGRvbWFpbiA9IGRvbWFpbi5zbGljZSgpO1xuXG4gICAgdmFyIGkwID0gMCxcbiAgICAgICAgaTEgPSBkb21haW4ubGVuZ3RoIC0gMSxcbiAgICAgICAgeDAgPSBkb21haW5baTBdLFxuICAgICAgICB4MSA9IGRvbWFpbltpMV0sXG4gICAgICAgIHQ7XG5cbiAgICBpZiAoeDEgPCB4MCkge1xuICAgICAgdCA9IGkwLCBpMCA9IGkxLCBpMSA9IHQ7XG4gICAgICB0ID0geDAsIHgwID0geDEsIHgxID0gdDtcbiAgICB9XG5cbiAgICBkb21haW5baTBdID0gaW50ZXJ2YWwuZmxvb3IoeDApO1xuICAgIGRvbWFpbltpMV0gPSBpbnRlcnZhbC5jZWlsKHgxKTtcbiAgICByZXR1cm4gZG9tYWluO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGRlaW50ZXJwb2xhdGUoYSwgYikge1xuICAgIHJldHVybiAoYiA9IE1hdGgubG9nKGIgLyBhKSkgPyBmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIE1hdGgubG9nKHggLyBhKSAvIGI7XG4gICAgfSA6IGNvbnN0YW50JDkoYik7XG4gIH1cblxuICBmdW5jdGlvbiByZWludGVycG9sYXRlJDEoYSwgYikge1xuICAgIHJldHVybiBhIDwgMCA/IGZ1bmN0aW9uICh0KSB7XG4gICAgICByZXR1cm4gLU1hdGgucG93KC1iLCB0KSAqIE1hdGgucG93KC1hLCAxIC0gdCk7XG4gICAgfSA6IGZ1bmN0aW9uICh0KSB7XG4gICAgICByZXR1cm4gTWF0aC5wb3coYiwgdCkgKiBNYXRoLnBvdyhhLCAxIC0gdCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvdzEwKHgpIHtcbiAgICByZXR1cm4gaXNGaW5pdGUoeCkgPyArKFwiMWVcIiArIHgpIDogeCA8IDAgPyAwIDogeDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvd3AoYmFzZSkge1xuICAgIHJldHVybiBiYXNlID09PSAxMCA/IHBvdzEwIDogYmFzZSA9PT0gTWF0aC5FID8gTWF0aC5leHAgOiBmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIE1hdGgucG93KGJhc2UsIHgpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBsb2dwKGJhc2UpIHtcbiAgICByZXR1cm4gYmFzZSA9PT0gTWF0aC5FID8gTWF0aC5sb2cgOiBiYXNlID09PSAxMCAmJiBNYXRoLmxvZzEwIHx8IGJhc2UgPT09IDIgJiYgTWF0aC5sb2cyIHx8IChiYXNlID0gTWF0aC5sb2coYmFzZSksIGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gTWF0aC5sb2coeCkgLyBiYXNlO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVmbGVjdChmKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gLWYoLXgpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBsb2ckMSgpIHtcbiAgICB2YXIgc2NhbGUgPSBjb250aW51b3VzKGRlaW50ZXJwb2xhdGUsIHJlaW50ZXJwb2xhdGUkMSkuZG9tYWluKFsxLCAxMF0pLFxuICAgICAgICBkb21haW4gPSBzY2FsZS5kb21haW4sXG4gICAgICAgIGJhc2UgPSAxMCxcbiAgICAgICAgbG9ncyA9IGxvZ3AoMTApLFxuICAgICAgICBwb3dzID0gcG93cCgxMCk7XG5cbiAgICBmdW5jdGlvbiByZXNjYWxlKCkge1xuICAgICAgbG9ncyA9IGxvZ3AoYmFzZSksIHBvd3MgPSBwb3dwKGJhc2UpO1xuICAgICAgaWYgKGRvbWFpbigpWzBdIDwgMCkgbG9ncyA9IHJlZmxlY3QobG9ncyksIHBvd3MgPSByZWZsZWN0KHBvd3MpO1xuICAgICAgcmV0dXJuIHNjYWxlO1xuICAgIH1cblxuICAgIHNjYWxlLmJhc2UgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYmFzZSA9ICtfLCByZXNjYWxlKCkpIDogYmFzZTtcbiAgICB9O1xuXG4gICAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRvbWFpbihfKSwgcmVzY2FsZSgpKSA6IGRvbWFpbigpO1xuICAgIH07XG5cbiAgICBzY2FsZS50aWNrcyA9IGZ1bmN0aW9uIChjb3VudCkge1xuICAgICAgdmFyIGQgPSBkb21haW4oKSxcbiAgICAgICAgICB1ID0gZFswXSxcbiAgICAgICAgICB2ID0gZFtkLmxlbmd0aCAtIDFdLFxuICAgICAgICAgIHI7XG5cbiAgICAgIGlmIChyID0gdiA8IHUpIGkgPSB1LCB1ID0gdiwgdiA9IGk7XG5cbiAgICAgIHZhciBpID0gbG9ncyh1KSxcbiAgICAgICAgICBqID0gbG9ncyh2KSxcbiAgICAgICAgICBwLFxuICAgICAgICAgIGssXG4gICAgICAgICAgdCxcbiAgICAgICAgICBuID0gY291bnQgPT0gbnVsbCA/IDEwIDogK2NvdW50LFxuICAgICAgICAgIHogPSBbXTtcblxuICAgICAgaWYgKCEoYmFzZSAlIDEpICYmIGogLSBpIDwgbikge1xuICAgICAgICBpID0gTWF0aC5yb3VuZChpKSAtIDEsIGogPSBNYXRoLnJvdW5kKGopICsgMTtcbiAgICAgICAgaWYgKHUgPiAwKSBmb3IgKDsgaSA8IGo7ICsraSkge1xuICAgICAgICAgIGZvciAoayA9IDEsIHAgPSBwb3dzKGkpOyBrIDwgYmFzZTsgKytrKSB7XG4gICAgICAgICAgICB0ID0gcCAqIGs7XG4gICAgICAgICAgICBpZiAodCA8IHUpIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKHQgPiB2KSBicmVhaztcbiAgICAgICAgICAgIHoucHVzaCh0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBmb3IgKDsgaSA8IGo7ICsraSkge1xuICAgICAgICAgIGZvciAoayA9IGJhc2UgLSAxLCBwID0gcG93cyhpKTsgayA+PSAxOyAtLWspIHtcbiAgICAgICAgICAgIHQgPSBwICogaztcbiAgICAgICAgICAgIGlmICh0IDwgdSkgY29udGludWU7XG4gICAgICAgICAgICBpZiAodCA+IHYpIGJyZWFrO1xuICAgICAgICAgICAgei5wdXNoKHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeiA9IHRpY2tzKGksIGosIE1hdGgubWluKGogLSBpLCBuKSkubWFwKHBvd3MpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gciA/IHoucmV2ZXJzZSgpIDogejtcbiAgICB9O1xuXG4gICAgc2NhbGUudGlja0Zvcm1hdCA9IGZ1bmN0aW9uIChjb3VudCwgc3BlY2lmaWVyKSB7XG4gICAgICBpZiAoc3BlY2lmaWVyID09IG51bGwpIHNwZWNpZmllciA9IGJhc2UgPT09IDEwID8gXCIuMGVcIiA6IFwiLFwiO1xuICAgICAgaWYgKHR5cGVvZiBzcGVjaWZpZXIgIT09IFwiZnVuY3Rpb25cIikgc3BlY2lmaWVyID0gZXhwb3J0cy5mb3JtYXQoc3BlY2lmaWVyKTtcbiAgICAgIGlmIChjb3VudCA9PT0gSW5maW5pdHkpIHJldHVybiBzcGVjaWZpZXI7XG4gICAgICBpZiAoY291bnQgPT0gbnVsbCkgY291bnQgPSAxMDtcbiAgICAgIHZhciBrID0gTWF0aC5tYXgoMSwgYmFzZSAqIGNvdW50IC8gc2NhbGUudGlja3MoKS5sZW5ndGgpOyAvLyBUT0RPIGZhc3QgZXN0aW1hdGU/XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgdmFyIGkgPSBkIC8gcG93cyhNYXRoLnJvdW5kKGxvZ3MoZCkpKTtcbiAgICAgICAgaWYgKGkgKiBiYXNlIDwgYmFzZSAtIDAuNSkgaSAqPSBiYXNlO1xuICAgICAgICByZXR1cm4gaSA8PSBrID8gc3BlY2lmaWVyKGQpIDogXCJcIjtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIHNjYWxlLm5pY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZG9tYWluKG5pY2UoZG9tYWluKCksIHtcbiAgICAgICAgZmxvb3I6IGZ1bmN0aW9uIGZsb29yKHgpIHtcbiAgICAgICAgICByZXR1cm4gcG93cyhNYXRoLmZsb29yKGxvZ3MoeCkpKTtcbiAgICAgICAgfSxcbiAgICAgICAgY2VpbDogZnVuY3Rpb24gY2VpbCh4KSB7XG4gICAgICAgICAgcmV0dXJuIHBvd3MoTWF0aC5jZWlsKGxvZ3MoeCkpKTtcbiAgICAgICAgfVxuICAgICAgfSkpO1xuICAgIH07XG5cbiAgICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGNvcHkoc2NhbGUsIGxvZyQxKCkuYmFzZShiYXNlKSk7XG4gICAgfTtcblxuICAgIHJldHVybiBzY2FsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJhaXNlJDEoeCwgZXhwb25lbnQpIHtcbiAgICByZXR1cm4geCA8IDAgPyAtTWF0aC5wb3coLXgsIGV4cG9uZW50KSA6IE1hdGgucG93KHgsIGV4cG9uZW50KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvdyQxKCkge1xuICAgIHZhciBleHBvbmVudCA9IDEsXG4gICAgICAgIHNjYWxlID0gY29udGludW91cyhkZWludGVycG9sYXRlLCByZWludGVycG9sYXRlKSxcbiAgICAgICAgZG9tYWluID0gc2NhbGUuZG9tYWluO1xuXG4gICAgZnVuY3Rpb24gZGVpbnRlcnBvbGF0ZShhLCBiKSB7XG4gICAgICByZXR1cm4gKGIgPSByYWlzZSQxKGIsIGV4cG9uZW50KSAtIChhID0gcmFpc2UkMShhLCBleHBvbmVudCkpKSA/IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIHJldHVybiAocmFpc2UkMSh4LCBleHBvbmVudCkgLSBhKSAvIGI7XG4gICAgICB9IDogY29uc3RhbnQkOShiKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWludGVycG9sYXRlKGEsIGIpIHtcbiAgICAgIGIgPSByYWlzZSQxKGIsIGV4cG9uZW50KSAtIChhID0gcmFpc2UkMShhLCBleHBvbmVudCkpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHJldHVybiByYWlzZSQxKGEgKyBiICogdCwgMSAvIGV4cG9uZW50KTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgc2NhbGUuZXhwb25lbnQgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZXhwb25lbnQgPSArXywgZG9tYWluKGRvbWFpbigpKSkgOiBleHBvbmVudDtcbiAgICB9O1xuXG4gICAgc2NhbGUuY29weSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBjb3B5KHNjYWxlLCBwb3ckMSgpLmV4cG9uZW50KGV4cG9uZW50KSk7XG4gICAgfTtcblxuICAgIHJldHVybiBsaW5lYXJpc2goc2NhbGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3FydCQxKCkge1xuICAgIHJldHVybiBwb3ckMSgpLmV4cG9uZW50KDAuNSk7XG4gIH1cblxuICBmdW5jdGlvbiBxdWFudGlsZSgpIHtcbiAgICB2YXIgZG9tYWluID0gW10sXG4gICAgICAgIHJhbmdlID0gW10sXG4gICAgICAgIHRocmVzaG9sZHMgPSBbXTtcblxuICAgIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgICB2YXIgaSA9IDAsXG4gICAgICAgICAgbiA9IE1hdGgubWF4KDEsIHJhbmdlLmxlbmd0aCk7XG4gICAgICB0aHJlc2hvbGRzID0gbmV3IEFycmF5KG4gLSAxKTtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIHRocmVzaG9sZHNbaSAtIDFdID0gdGhyZXNob2xkKGRvbWFpbiwgaSAvIG4pO1xuICAgICAgfXJldHVybiBzY2FsZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgICBpZiAoIWlzTmFOKHggPSAreCkpIHJldHVybiByYW5nZVtiaXNlY3RSaWdodCh0aHJlc2hvbGRzLCB4KV07XG4gICAgfVxuXG4gICAgc2NhbGUuaW52ZXJ0RXh0ZW50ID0gZnVuY3Rpb24gKHkpIHtcbiAgICAgIHZhciBpID0gcmFuZ2UuaW5kZXhPZih5KTtcbiAgICAgIHJldHVybiBpIDwgMCA/IFtOYU4sIE5hTl0gOiBbaSA+IDAgPyB0aHJlc2hvbGRzW2kgLSAxXSA6IGRvbWFpblswXSwgaSA8IHRocmVzaG9sZHMubGVuZ3RoID8gdGhyZXNob2xkc1tpXSA6IGRvbWFpbltkb21haW4ubGVuZ3RoIC0gMV1dO1xuICAgIH07XG5cbiAgICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbiAoXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluLnNsaWNlKCk7XG4gICAgICBkb21haW4gPSBbXTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gXy5sZW5ndGgsIGQ7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKGQgPSBfW2ldLCBkICE9IG51bGwgJiYgIWlzTmFOKGQgPSArZCkpIGRvbWFpbi5wdXNoKGQpO1xuICAgICAgfWRvbWFpbi5zb3J0KGFzY2VuZGluZyk7XG4gICAgICByZXR1cm4gcmVzY2FsZSgpO1xuICAgIH07XG5cbiAgICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IHNsaWNlJDUuY2FsbChfKSwgcmVzY2FsZSgpKSA6IHJhbmdlLnNsaWNlKCk7XG4gICAgfTtcblxuICAgIHNjYWxlLnF1YW50aWxlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aHJlc2hvbGRzLnNsaWNlKCk7XG4gICAgfTtcblxuICAgIHNjYWxlLmNvcHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcXVhbnRpbGUoKS5kb21haW4oZG9tYWluKS5yYW5nZShyYW5nZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBzY2FsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHF1YW50aXplJDEoKSB7XG4gICAgdmFyIHgwID0gMCxcbiAgICAgICAgeDEgPSAxLFxuICAgICAgICBuID0gMSxcbiAgICAgICAgZG9tYWluID0gWzAuNV0sXG4gICAgICAgIHJhbmdlID0gWzAsIDFdO1xuXG4gICAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgICAgaWYgKHggPD0geCkgcmV0dXJuIHJhbmdlW2Jpc2VjdFJpZ2h0KGRvbWFpbiwgeCwgMCwgbildO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgICB2YXIgaSA9IC0xO1xuICAgICAgZG9tYWluID0gbmV3IEFycmF5KG4pO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgZG9tYWluW2ldID0gKChpICsgMSkgKiB4MSAtIChpIC0gbikgKiB4MCkgLyAobiArIDEpO1xuICAgICAgfXJldHVybiBzY2FsZTtcbiAgICB9XG5cbiAgICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeDAgPSArX1swXSwgeDEgPSArX1sxXSwgcmVzY2FsZSgpKSA6IFt4MCwgeDFdO1xuICAgIH07XG5cbiAgICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChuID0gKHJhbmdlID0gc2xpY2UkNS5jYWxsKF8pKS5sZW5ndGggLSAxLCByZXNjYWxlKCkpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgICB9O1xuXG4gICAgc2NhbGUuaW52ZXJ0RXh0ZW50ID0gZnVuY3Rpb24gKHkpIHtcbiAgICAgIHZhciBpID0gcmFuZ2UuaW5kZXhPZih5KTtcbiAgICAgIHJldHVybiBpIDwgMCA/IFtOYU4sIE5hTl0gOiBpIDwgMSA/IFt4MCwgZG9tYWluWzBdXSA6IGkgPj0gbiA/IFtkb21haW5bbiAtIDFdLCB4MV0gOiBbZG9tYWluW2kgLSAxXSwgZG9tYWluW2ldXTtcbiAgICB9O1xuXG4gICAgc2NhbGUuY29weSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBxdWFudGl6ZSQxKCkuZG9tYWluKFt4MCwgeDFdKS5yYW5nZShyYW5nZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBsaW5lYXJpc2goc2NhbGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gdGhyZXNob2xkJDEoKSB7XG4gICAgdmFyIGRvbWFpbiA9IFswLjVdLFxuICAgICAgICByYW5nZSA9IFswLCAxXSxcbiAgICAgICAgbiA9IDE7XG5cbiAgICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgICBpZiAoeCA8PSB4KSByZXR1cm4gcmFuZ2VbYmlzZWN0UmlnaHQoZG9tYWluLCB4LCAwLCBuKV07XG4gICAgfVxuXG4gICAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRvbWFpbiA9IHNsaWNlJDUuY2FsbChfKSwgbiA9IE1hdGgubWluKGRvbWFpbi5sZW5ndGgsIHJhbmdlLmxlbmd0aCAtIDEpLCBzY2FsZSkgOiBkb21haW4uc2xpY2UoKTtcbiAgICB9O1xuXG4gICAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFuZ2UgPSBzbGljZSQ1LmNhbGwoXyksIG4gPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGggLSAxKSwgc2NhbGUpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgICB9O1xuXG4gICAgc2NhbGUuaW52ZXJ0RXh0ZW50ID0gZnVuY3Rpb24gKHkpIHtcbiAgICAgIHZhciBpID0gcmFuZ2UuaW5kZXhPZih5KTtcbiAgICAgIHJldHVybiBbZG9tYWluW2kgLSAxXSwgZG9tYWluW2ldXTtcbiAgICB9O1xuXG4gICAgc2NhbGUuY29weSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aHJlc2hvbGQkMSgpLmRvbWFpbihkb21haW4pLnJhbmdlKHJhbmdlKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHNjYWxlO1xuICB9XG5cbiAgdmFyIHQwJDEgPSBuZXcgRGF0ZSgpO1xuICB2YXIgdDEkMSA9IG5ldyBEYXRlKCk7XG5cbiAgZnVuY3Rpb24gbmV3SW50ZXJ2YWwoZmxvb3JpLCBvZmZzZXRpLCBjb3VudCwgZmllbGQpIHtcblxuICAgIGZ1bmN0aW9uIGludGVydmFsKGRhdGUpIHtcbiAgICAgIHJldHVybiBmbG9vcmkoZGF0ZSA9IG5ldyBEYXRlKCtkYXRlKSksIGRhdGU7XG4gICAgfVxuXG4gICAgaW50ZXJ2YWwuZmxvb3IgPSBpbnRlcnZhbDtcblxuICAgIGludGVydmFsLmNlaWwgPSBmdW5jdGlvbiAoZGF0ZSkge1xuICAgICAgcmV0dXJuIGZsb29yaShkYXRlID0gbmV3IERhdGUoZGF0ZSAtIDEpKSwgb2Zmc2V0aShkYXRlLCAxKSwgZmxvb3JpKGRhdGUpLCBkYXRlO1xuICAgIH07XG5cbiAgICBpbnRlcnZhbC5yb3VuZCA9IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgICB2YXIgZDAgPSBpbnRlcnZhbChkYXRlKSxcbiAgICAgICAgICBkMSA9IGludGVydmFsLmNlaWwoZGF0ZSk7XG4gICAgICByZXR1cm4gZGF0ZSAtIGQwIDwgZDEgLSBkYXRlID8gZDAgOiBkMTtcbiAgICB9O1xuXG4gICAgaW50ZXJ2YWwub2Zmc2V0ID0gZnVuY3Rpb24gKGRhdGUsIHN0ZXApIHtcbiAgICAgIHJldHVybiBvZmZzZXRpKGRhdGUgPSBuZXcgRGF0ZSgrZGF0ZSksIHN0ZXAgPT0gbnVsbCA/IDEgOiBNYXRoLmZsb29yKHN0ZXApKSwgZGF0ZTtcbiAgICB9O1xuXG4gICAgaW50ZXJ2YWwucmFuZ2UgPSBmdW5jdGlvbiAoc3RhcnQsIHN0b3AsIHN0ZXApIHtcbiAgICAgIHZhciByYW5nZSA9IFtdO1xuICAgICAgc3RhcnQgPSBpbnRlcnZhbC5jZWlsKHN0YXJ0KTtcbiAgICAgIHN0ZXAgPSBzdGVwID09IG51bGwgPyAxIDogTWF0aC5mbG9vcihzdGVwKTtcbiAgICAgIGlmICghKHN0YXJ0IDwgc3RvcCkgfHwgIShzdGVwID4gMCkpIHJldHVybiByYW5nZTsgLy8gYWxzbyBoYW5kbGVzIEludmFsaWQgRGF0ZVxuICAgICAgZG8ge1xuICAgICAgICByYW5nZS5wdXNoKG5ldyBEYXRlKCtzdGFydCkpO1xuICAgICAgfSB3aGlsZSAoKG9mZnNldGkoc3RhcnQsIHN0ZXApLCBmbG9vcmkoc3RhcnQpLCBzdGFydCA8IHN0b3ApKTtcbiAgICAgIHJldHVybiByYW5nZTtcbiAgICB9O1xuXG4gICAgaW50ZXJ2YWwuZmlsdGVyID0gZnVuY3Rpb24gKHRlc3QpIHtcbiAgICAgIHJldHVybiBuZXdJbnRlcnZhbChmdW5jdGlvbiAoZGF0ZSkge1xuICAgICAgICBpZiAoZGF0ZSA+PSBkYXRlKSB3aGlsZSAoZmxvb3JpKGRhdGUpLCAhdGVzdChkYXRlKSkge1xuICAgICAgICAgIGRhdGUuc2V0VGltZShkYXRlIC0gMSk7XG4gICAgICAgIH1cbiAgICAgIH0sIGZ1bmN0aW9uIChkYXRlLCBzdGVwKSB7XG4gICAgICAgIGlmIChkYXRlID49IGRhdGUpIHtcbiAgICAgICAgICBpZiAoc3RlcCA8IDApIHdoaWxlICgrK3N0ZXAgPD0gMCkge1xuICAgICAgICAgICAgd2hpbGUgKG9mZnNldGkoZGF0ZSwgLTEpLCAhdGVzdChkYXRlKSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxuICAgICAgICAgIH0gZWxzZSB3aGlsZSAoLS1zdGVwID49IDApIHtcbiAgICAgICAgICAgIHdoaWxlIChvZmZzZXRpKGRhdGUsICsxKSwgIXRlc3QoZGF0ZSkpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBpZiAoY291bnQpIHtcbiAgICAgIGludGVydmFsLmNvdW50ID0gZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgdDAkMS5zZXRUaW1lKCtzdGFydCksIHQxJDEuc2V0VGltZSgrZW5kKTtcbiAgICAgICAgZmxvb3JpKHQwJDEpLCBmbG9vcmkodDEkMSk7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKGNvdW50KHQwJDEsIHQxJDEpKTtcbiAgICAgIH07XG5cbiAgICAgIGludGVydmFsLmV2ZXJ5ID0gZnVuY3Rpb24gKHN0ZXApIHtcbiAgICAgICAgc3RlcCA9IE1hdGguZmxvb3Ioc3RlcCk7XG4gICAgICAgIHJldHVybiAhaXNGaW5pdGUoc3RlcCkgfHwgIShzdGVwID4gMCkgPyBudWxsIDogIShzdGVwID4gMSkgPyBpbnRlcnZhbCA6IGludGVydmFsLmZpbHRlcihmaWVsZCA/IGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgcmV0dXJuIGZpZWxkKGQpICUgc3RlcCA9PT0gMDtcbiAgICAgICAgfSA6IGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVydmFsLmNvdW50KDAsIGQpICUgc3RlcCA9PT0gMDtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBpbnRlcnZhbDtcbiAgfVxuXG4gIHZhciBtaWxsaXNlY29uZCA9IG5ld0ludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBub29wXG4gIH0sIGZ1bmN0aW9uIChkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCk7XG4gIH0sIGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIGVuZCAtIHN0YXJ0O1xuICB9KTtcblxuICAvLyBBbiBvcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24gZm9yIHRoaXMgc2ltcGxlIGNhc2UuXG4gIG1pbGxpc2Vjb25kLmV2ZXJ5ID0gZnVuY3Rpb24gKGspIHtcbiAgICBrID0gTWF0aC5mbG9vcihrKTtcbiAgICBpZiAoIWlzRmluaXRlKGspIHx8ICEoayA+IDApKSByZXR1cm4gbnVsbDtcbiAgICBpZiAoIShrID4gMSkpIHJldHVybiBtaWxsaXNlY29uZDtcbiAgICByZXR1cm4gbmV3SW50ZXJ2YWwoZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgIGRhdGUuc2V0VGltZShNYXRoLmZsb29yKGRhdGUgLyBrKSAqIGspO1xuICAgIH0sIGZ1bmN0aW9uIChkYXRlLCBzdGVwKSB7XG4gICAgICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogayk7XG4gICAgfSwgZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgICAgIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gaztcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgbWlsbGlzZWNvbmRzID0gbWlsbGlzZWNvbmQucmFuZ2U7XG5cbiAgdmFyIGR1cmF0aW9uU2Vjb25kJDEgPSAxZTM7XG4gIHZhciBkdXJhdGlvbk1pbnV0ZSQxID0gNmU0O1xuICB2YXIgZHVyYXRpb25Ib3VyJDEgPSAzNmU1O1xuICB2YXIgZHVyYXRpb25EYXkkMSA9IDg2NGU1O1xuICB2YXIgZHVyYXRpb25XZWVrJDEgPSA2MDQ4ZTU7XG5cbiAgdmFyIHNlY29uZCA9IG5ld0ludGVydmFsKGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgZGF0ZS5zZXRUaW1lKE1hdGguZmxvb3IoZGF0ZSAvIGR1cmF0aW9uU2Vjb25kJDEpICogZHVyYXRpb25TZWNvbmQkMSk7XG4gIH0sIGZ1bmN0aW9uIChkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uU2Vjb25kJDEpO1xuICB9LCBmdW5jdGlvbiAoc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25TZWNvbmQkMTtcbiAgfSwgZnVuY3Rpb24gKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS5nZXRVVENTZWNvbmRzKCk7XG4gIH0pO1xuXG4gIHZhciBzZWNvbmRzID0gc2Vjb25kLnJhbmdlO1xuXG4gIHZhciBtaW51dGUgPSBuZXdJbnRlcnZhbChmdW5jdGlvbiAoZGF0ZSkge1xuICAgIGRhdGUuc2V0VGltZShNYXRoLmZsb29yKGRhdGUgLyBkdXJhdGlvbk1pbnV0ZSQxKSAqIGR1cmF0aW9uTWludXRlJDEpO1xuICB9LCBmdW5jdGlvbiAoZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvbk1pbnV0ZSQxKTtcbiAgfSwgZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uTWludXRlJDE7XG4gIH0sIGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0TWludXRlcygpO1xuICB9KTtcblxuICB2YXIgbWludXRlcyA9IG1pbnV0ZS5yYW5nZTtcblxuICB2YXIgaG91ciA9IG5ld0ludGVydmFsKGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgdmFyIG9mZnNldCA9IGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKSAqIGR1cmF0aW9uTWludXRlJDEgJSBkdXJhdGlvbkhvdXIkMTtcbiAgICBpZiAob2Zmc2V0IDwgMCkgb2Zmc2V0ICs9IGR1cmF0aW9uSG91ciQxO1xuICAgIGRhdGUuc2V0VGltZShNYXRoLmZsb29yKCgrZGF0ZSAtIG9mZnNldCkgLyBkdXJhdGlvbkhvdXIkMSkgKiBkdXJhdGlvbkhvdXIkMSArIG9mZnNldCk7XG4gIH0sIGZ1bmN0aW9uIChkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uSG91ciQxKTtcbiAgfSwgZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uSG91ciQxO1xuICB9LCBmdW5jdGlvbiAoZGF0ZSkge1xuICAgIHJldHVybiBkYXRlLmdldEhvdXJzKCk7XG4gIH0pO1xuXG4gIHZhciBob3VycyA9IGhvdXIucmFuZ2U7XG5cbiAgdmFyIGRheSA9IG5ld0ludGVydmFsKGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24gKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyBzdGVwKTtcbiAgfSwgZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gKGVuZCAtIHN0YXJ0IC0gKGVuZC5nZXRUaW1lem9uZU9mZnNldCgpIC0gc3RhcnQuZ2V0VGltZXpvbmVPZmZzZXQoKSkgKiBkdXJhdGlvbk1pbnV0ZSQxKSAvIGR1cmF0aW9uRGF5JDE7XG4gIH0sIGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0RGF0ZSgpIC0gMTtcbiAgfSk7XG5cbiAgdmFyIGRheXMgPSBkYXkucmFuZ2U7XG5cbiAgZnVuY3Rpb24gd2Vla2RheShpKSB7XG4gICAgcmV0dXJuIG5ld0ludGVydmFsKGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgLSAoZGF0ZS5nZXREYXkoKSArIDcgLSBpKSAlIDcpO1xuICAgICAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgICB9LCBmdW5jdGlvbiAoZGF0ZSwgc3RlcCkge1xuICAgICAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpICsgc3RlcCAqIDcpO1xuICAgIH0sIGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG4gICAgICByZXR1cm4gKGVuZCAtIHN0YXJ0IC0gKGVuZC5nZXRUaW1lem9uZU9mZnNldCgpIC0gc3RhcnQuZ2V0VGltZXpvbmVPZmZzZXQoKSkgKiBkdXJhdGlvbk1pbnV0ZSQxKSAvIGR1cmF0aW9uV2VlayQxO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIHN1bmRheSA9IHdlZWtkYXkoMCk7XG4gIHZhciBtb25kYXkgPSB3ZWVrZGF5KDEpO1xuICB2YXIgdHVlc2RheSA9IHdlZWtkYXkoMik7XG4gIHZhciB3ZWRuZXNkYXkgPSB3ZWVrZGF5KDMpO1xuICB2YXIgdGh1cnNkYXkgPSB3ZWVrZGF5KDQpO1xuICB2YXIgZnJpZGF5ID0gd2Vla2RheSg1KTtcbiAgdmFyIHNhdHVyZGF5ID0gd2Vla2RheSg2KTtcblxuICB2YXIgc3VuZGF5cyA9IHN1bmRheS5yYW5nZTtcbiAgdmFyIG1vbmRheXMgPSBtb25kYXkucmFuZ2U7XG4gIHZhciB0dWVzZGF5cyA9IHR1ZXNkYXkucmFuZ2U7XG4gIHZhciB3ZWRuZXNkYXlzID0gd2VkbmVzZGF5LnJhbmdlO1xuICB2YXIgdGh1cnNkYXlzID0gdGh1cnNkYXkucmFuZ2U7XG4gIHZhciBmcmlkYXlzID0gZnJpZGF5LnJhbmdlO1xuICB2YXIgc2F0dXJkYXlzID0gc2F0dXJkYXkucmFuZ2U7XG5cbiAgdmFyIG1vbnRoID0gbmV3SW50ZXJ2YWwoZnVuY3Rpb24gKGRhdGUpIHtcbiAgICBkYXRlLnNldERhdGUoMSk7XG4gICAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24gKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldE1vbnRoKGRhdGUuZ2V0TW9udGgoKSArIHN0ZXApO1xuICB9LCBmdW5jdGlvbiAoc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBlbmQuZ2V0TW9udGgoKSAtIHN0YXJ0LmdldE1vbnRoKCkgKyAoZW5kLmdldEZ1bGxZZWFyKCkgLSBzdGFydC5nZXRGdWxsWWVhcigpKSAqIDEyO1xuICB9LCBmdW5jdGlvbiAoZGF0ZSkge1xuICAgIHJldHVybiBkYXRlLmdldE1vbnRoKCk7XG4gIH0pO1xuXG4gIHZhciBtb250aHMgPSBtb250aC5yYW5nZTtcblxuICB2YXIgeWVhciA9IG5ld0ludGVydmFsKGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgZGF0ZS5zZXRNb250aCgwLCAxKTtcbiAgICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbiAoZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0RnVsbFllYXIoZGF0ZS5nZXRGdWxsWWVhcigpICsgc3RlcCk7XG4gIH0sIGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIGVuZC5nZXRGdWxsWWVhcigpIC0gc3RhcnQuZ2V0RnVsbFllYXIoKTtcbiAgfSwgZnVuY3Rpb24gKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS5nZXRGdWxsWWVhcigpO1xuICB9KTtcblxuICAvLyBBbiBvcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24gZm9yIHRoaXMgc2ltcGxlIGNhc2UuXG4gIHllYXIuZXZlcnkgPSBmdW5jdGlvbiAoaykge1xuICAgIHJldHVybiAhaXNGaW5pdGUoayA9IE1hdGguZmxvb3IoaykpIHx8ICEoayA+IDApID8gbnVsbCA6IG5ld0ludGVydmFsKGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgICBkYXRlLnNldEZ1bGxZZWFyKE1hdGguZmxvb3IoZGF0ZS5nZXRGdWxsWWVhcigpIC8gaykgKiBrKTtcbiAgICAgIGRhdGUuc2V0TW9udGgoMCwgMSk7XG4gICAgICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICAgIH0sIGZ1bmN0aW9uIChkYXRlLCBzdGVwKSB7XG4gICAgICBkYXRlLnNldEZ1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSArIHN0ZXAgKiBrKTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgeWVhcnMgPSB5ZWFyLnJhbmdlO1xuXG4gIHZhciB1dGNNaW51dGUgPSBuZXdJbnRlcnZhbChmdW5jdGlvbiAoZGF0ZSkge1xuICAgIGRhdGUuc2V0VVRDU2Vjb25kcygwLCAwKTtcbiAgfSwgZnVuY3Rpb24gKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25NaW51dGUkMSk7XG4gIH0sIGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbk1pbnV0ZSQxO1xuICB9LCBmdW5jdGlvbiAoZGF0ZSkge1xuICAgIHJldHVybiBkYXRlLmdldFVUQ01pbnV0ZXMoKTtcbiAgfSk7XG5cbiAgdmFyIHV0Y01pbnV0ZXMgPSB1dGNNaW51dGUucmFuZ2U7XG5cbiAgdmFyIHV0Y0hvdXIgPSBuZXdJbnRlcnZhbChmdW5jdGlvbiAoZGF0ZSkge1xuICAgIGRhdGUuc2V0VVRDTWludXRlcygwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24gKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25Ib3VyJDEpO1xuICB9LCBmdW5jdGlvbiAoc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25Ib3VyJDE7XG4gIH0sIGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgfSk7XG5cbiAgdmFyIHV0Y0hvdXJzID0gdXRjSG91ci5yYW5nZTtcblxuICB2YXIgdXRjRGF5ID0gbmV3SW50ZXJ2YWwoZnVuY3Rpb24gKGRhdGUpIHtcbiAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbiAoZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSArIHN0ZXApO1xuICB9LCBmdW5jdGlvbiAoc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25EYXkkMTtcbiAgfSwgZnVuY3Rpb24gKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS5nZXRVVENEYXRlKCkgLSAxO1xuICB9KTtcblxuICB2YXIgdXRjRGF5cyA9IHV0Y0RheS5yYW5nZTtcblxuICBmdW5jdGlvbiB1dGNXZWVrZGF5KGkpIHtcbiAgICByZXR1cm4gbmV3SW50ZXJ2YWwoZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSAtIChkYXRlLmdldFVUQ0RheSgpICsgNyAtIGkpICUgNyk7XG4gICAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICAgIH0sIGZ1bmN0aW9uIChkYXRlLCBzdGVwKSB7XG4gICAgICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgKyBzdGVwICogNyk7XG4gICAgfSwgZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgICAgIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25XZWVrJDE7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgdXRjU3VuZGF5ID0gdXRjV2Vla2RheSgwKTtcbiAgdmFyIHV0Y01vbmRheSA9IHV0Y1dlZWtkYXkoMSk7XG4gIHZhciB1dGNUdWVzZGF5ID0gdXRjV2Vla2RheSgyKTtcbiAgdmFyIHV0Y1dlZG5lc2RheSA9IHV0Y1dlZWtkYXkoMyk7XG4gIHZhciB1dGNUaHVyc2RheSA9IHV0Y1dlZWtkYXkoNCk7XG4gIHZhciB1dGNGcmlkYXkgPSB1dGNXZWVrZGF5KDUpO1xuICB2YXIgdXRjU2F0dXJkYXkgPSB1dGNXZWVrZGF5KDYpO1xuXG4gIHZhciB1dGNTdW5kYXlzID0gdXRjU3VuZGF5LnJhbmdlO1xuICB2YXIgdXRjTW9uZGF5cyA9IHV0Y01vbmRheS5yYW5nZTtcbiAgdmFyIHV0Y1R1ZXNkYXlzID0gdXRjVHVlc2RheS5yYW5nZTtcbiAgdmFyIHV0Y1dlZG5lc2RheXMgPSB1dGNXZWRuZXNkYXkucmFuZ2U7XG4gIHZhciB1dGNUaHVyc2RheXMgPSB1dGNUaHVyc2RheS5yYW5nZTtcbiAgdmFyIHV0Y0ZyaWRheXMgPSB1dGNGcmlkYXkucmFuZ2U7XG4gIHZhciB1dGNTYXR1cmRheXMgPSB1dGNTYXR1cmRheS5yYW5nZTtcblxuICB2YXIgdXRjTW9udGggPSBuZXdJbnRlcnZhbChmdW5jdGlvbiAoZGF0ZSkge1xuICAgIGRhdGUuc2V0VVRDRGF0ZSgxKTtcbiAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbiAoZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0VVRDTW9udGgoZGF0ZS5nZXRVVENNb250aCgpICsgc3RlcCk7XG4gIH0sIGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIGVuZC5nZXRVVENNb250aCgpIC0gc3RhcnQuZ2V0VVRDTW9udGgoKSArIChlbmQuZ2V0VVRDRnVsbFllYXIoKSAtIHN0YXJ0LmdldFVUQ0Z1bGxZZWFyKCkpICogMTI7XG4gIH0sIGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0VVRDTW9udGgoKTtcbiAgfSk7XG5cbiAgdmFyIHV0Y01vbnRocyA9IHV0Y01vbnRoLnJhbmdlO1xuXG4gIHZhciB1dGNZZWFyID0gbmV3SW50ZXJ2YWwoZnVuY3Rpb24gKGRhdGUpIHtcbiAgICBkYXRlLnNldFVUQ01vbnRoKDAsIDEpO1xuICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uIChkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRVVENGdWxsWWVhcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgKyBzdGVwKTtcbiAgfSwgZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gZW5kLmdldFVUQ0Z1bGxZZWFyKCkgLSBzdGFydC5nZXRVVENGdWxsWWVhcigpO1xuICB9LCBmdW5jdGlvbiAoZGF0ZSkge1xuICAgIHJldHVybiBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gIH0pO1xuXG4gIC8vIEFuIG9wdGltaXplZCBpbXBsZW1lbnRhdGlvbiBmb3IgdGhpcyBzaW1wbGUgY2FzZS5cbiAgdXRjWWVhci5ldmVyeSA9IGZ1bmN0aW9uIChrKSB7XG4gICAgcmV0dXJuICFpc0Zpbml0ZShrID0gTWF0aC5mbG9vcihrKSkgfHwgIShrID4gMCkgPyBudWxsIDogbmV3SW50ZXJ2YWwoZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoTWF0aC5mbG9vcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgLyBrKSAqIGspO1xuICAgICAgZGF0ZS5zZXRVVENNb250aCgwLCAxKTtcbiAgICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gICAgfSwgZnVuY3Rpb24gKGRhdGUsIHN0ZXApIHtcbiAgICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpICsgc3RlcCAqIGspO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciB1dGNZZWFycyA9IHV0Y1llYXIucmFuZ2U7XG5cbiAgZnVuY3Rpb24gbG9jYWxEYXRlKGQpIHtcbiAgICBpZiAoMCA8PSBkLnkgJiYgZC55IDwgMTAwKSB7XG4gICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKC0xLCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKTtcbiAgICAgIGRhdGUuc2V0RnVsbFllYXIoZC55KTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IERhdGUoZC55LCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHV0Y0RhdGUoZCkge1xuICAgIGlmICgwIDw9IGQueSAmJiBkLnkgPCAxMDApIHtcbiAgICAgIHZhciBkYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMoLTEsIGQubSwgZC5kLCBkLkgsIGQuTSwgZC5TLCBkLkwpKTtcbiAgICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoZC55KTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMoZC55LCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKSk7XG4gIH1cblxuICBmdW5jdGlvbiBuZXdZZWFyKHkpIHtcbiAgICByZXR1cm4geyB5OiB5LCBtOiAwLCBkOiAxLCBIOiAwLCBNOiAwLCBTOiAwLCBMOiAwIH07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRMb2NhbGUkMShsb2NhbGUpIHtcbiAgICB2YXIgbG9jYWxlX2RhdGVUaW1lID0gbG9jYWxlLmRhdGVUaW1lLFxuICAgICAgICBsb2NhbGVfZGF0ZSA9IGxvY2FsZS5kYXRlLFxuICAgICAgICBsb2NhbGVfdGltZSA9IGxvY2FsZS50aW1lLFxuICAgICAgICBsb2NhbGVfcGVyaW9kcyA9IGxvY2FsZS5wZXJpb2RzLFxuICAgICAgICBsb2NhbGVfd2Vla2RheXMgPSBsb2NhbGUuZGF5cyxcbiAgICAgICAgbG9jYWxlX3Nob3J0V2Vla2RheXMgPSBsb2NhbGUuc2hvcnREYXlzLFxuICAgICAgICBsb2NhbGVfbW9udGhzID0gbG9jYWxlLm1vbnRocyxcbiAgICAgICAgbG9jYWxlX3Nob3J0TW9udGhzID0gbG9jYWxlLnNob3J0TW9udGhzO1xuXG4gICAgdmFyIHBlcmlvZFJlID0gZm9ybWF0UmUobG9jYWxlX3BlcmlvZHMpLFxuICAgICAgICBwZXJpb2RMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3BlcmlvZHMpLFxuICAgICAgICB3ZWVrZGF5UmUgPSBmb3JtYXRSZShsb2NhbGVfd2Vla2RheXMpLFxuICAgICAgICB3ZWVrZGF5TG9va3VwID0gZm9ybWF0TG9va3VwKGxvY2FsZV93ZWVrZGF5cyksXG4gICAgICAgIHNob3J0V2Vla2RheVJlID0gZm9ybWF0UmUobG9jYWxlX3Nob3J0V2Vla2RheXMpLFxuICAgICAgICBzaG9ydFdlZWtkYXlMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3Nob3J0V2Vla2RheXMpLFxuICAgICAgICBtb250aFJlID0gZm9ybWF0UmUobG9jYWxlX21vbnRocyksXG4gICAgICAgIG1vbnRoTG9va3VwID0gZm9ybWF0TG9va3VwKGxvY2FsZV9tb250aHMpLFxuICAgICAgICBzaG9ydE1vbnRoUmUgPSBmb3JtYXRSZShsb2NhbGVfc2hvcnRNb250aHMpLFxuICAgICAgICBzaG9ydE1vbnRoTG9va3VwID0gZm9ybWF0TG9va3VwKGxvY2FsZV9zaG9ydE1vbnRocyk7XG5cbiAgICB2YXIgZm9ybWF0cyA9IHtcbiAgICAgIFwiYVwiOiBmb3JtYXRTaG9ydFdlZWtkYXksXG4gICAgICBcIkFcIjogZm9ybWF0V2Vla2RheSxcbiAgICAgIFwiYlwiOiBmb3JtYXRTaG9ydE1vbnRoLFxuICAgICAgXCJCXCI6IGZvcm1hdE1vbnRoLFxuICAgICAgXCJjXCI6IG51bGwsXG4gICAgICBcImRcIjogZm9ybWF0RGF5T2ZNb250aCxcbiAgICAgIFwiZVwiOiBmb3JtYXREYXlPZk1vbnRoLFxuICAgICAgXCJIXCI6IGZvcm1hdEhvdXIyNCxcbiAgICAgIFwiSVwiOiBmb3JtYXRIb3VyMTIsXG4gICAgICBcImpcIjogZm9ybWF0RGF5T2ZZZWFyLFxuICAgICAgXCJMXCI6IGZvcm1hdE1pbGxpc2Vjb25kcyxcbiAgICAgIFwibVwiOiBmb3JtYXRNb250aE51bWJlcixcbiAgICAgIFwiTVwiOiBmb3JtYXRNaW51dGVzLFxuICAgICAgXCJwXCI6IGZvcm1hdFBlcmlvZCxcbiAgICAgIFwiU1wiOiBmb3JtYXRTZWNvbmRzLFxuICAgICAgXCJVXCI6IGZvcm1hdFdlZWtOdW1iZXJTdW5kYXksXG4gICAgICBcIndcIjogZm9ybWF0V2Vla2RheU51bWJlcixcbiAgICAgIFwiV1wiOiBmb3JtYXRXZWVrTnVtYmVyTW9uZGF5LFxuICAgICAgXCJ4XCI6IG51bGwsXG4gICAgICBcIlhcIjogbnVsbCxcbiAgICAgIFwieVwiOiBmb3JtYXRZZWFyLFxuICAgICAgXCJZXCI6IGZvcm1hdEZ1bGxZZWFyLFxuICAgICAgXCJaXCI6IGZvcm1hdFpvbmUsXG4gICAgICBcIiVcIjogZm9ybWF0TGl0ZXJhbFBlcmNlbnRcbiAgICB9O1xuXG4gICAgdmFyIHV0Y0Zvcm1hdHMgPSB7XG4gICAgICBcImFcIjogZm9ybWF0VVRDU2hvcnRXZWVrZGF5LFxuICAgICAgXCJBXCI6IGZvcm1hdFVUQ1dlZWtkYXksXG4gICAgICBcImJcIjogZm9ybWF0VVRDU2hvcnRNb250aCxcbiAgICAgIFwiQlwiOiBmb3JtYXRVVENNb250aCxcbiAgICAgIFwiY1wiOiBudWxsLFxuICAgICAgXCJkXCI6IGZvcm1hdFVUQ0RheU9mTW9udGgsXG4gICAgICBcImVcIjogZm9ybWF0VVRDRGF5T2ZNb250aCxcbiAgICAgIFwiSFwiOiBmb3JtYXRVVENIb3VyMjQsXG4gICAgICBcIklcIjogZm9ybWF0VVRDSG91cjEyLFxuICAgICAgXCJqXCI6IGZvcm1hdFVUQ0RheU9mWWVhcixcbiAgICAgIFwiTFwiOiBmb3JtYXRVVENNaWxsaXNlY29uZHMsXG4gICAgICBcIm1cIjogZm9ybWF0VVRDTW9udGhOdW1iZXIsXG4gICAgICBcIk1cIjogZm9ybWF0VVRDTWludXRlcyxcbiAgICAgIFwicFwiOiBmb3JtYXRVVENQZXJpb2QsXG4gICAgICBcIlNcIjogZm9ybWF0VVRDU2Vjb25kcyxcbiAgICAgIFwiVVwiOiBmb3JtYXRVVENXZWVrTnVtYmVyU3VuZGF5LFxuICAgICAgXCJ3XCI6IGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXIsXG4gICAgICBcIldcIjogZm9ybWF0VVRDV2Vla051bWJlck1vbmRheSxcbiAgICAgIFwieFwiOiBudWxsLFxuICAgICAgXCJYXCI6IG51bGwsXG4gICAgICBcInlcIjogZm9ybWF0VVRDWWVhcixcbiAgICAgIFwiWVwiOiBmb3JtYXRVVENGdWxsWWVhcixcbiAgICAgIFwiWlwiOiBmb3JtYXRVVENab25lLFxuICAgICAgXCIlXCI6IGZvcm1hdExpdGVyYWxQZXJjZW50XG4gICAgfTtcblxuICAgIHZhciBwYXJzZXMgPSB7XG4gICAgICBcImFcIjogcGFyc2VTaG9ydFdlZWtkYXksXG4gICAgICBcIkFcIjogcGFyc2VXZWVrZGF5LFxuICAgICAgXCJiXCI6IHBhcnNlU2hvcnRNb250aCxcbiAgICAgIFwiQlwiOiBwYXJzZU1vbnRoLFxuICAgICAgXCJjXCI6IHBhcnNlTG9jYWxlRGF0ZVRpbWUsXG4gICAgICBcImRcIjogcGFyc2VEYXlPZk1vbnRoLFxuICAgICAgXCJlXCI6IHBhcnNlRGF5T2ZNb250aCxcbiAgICAgIFwiSFwiOiBwYXJzZUhvdXIyNCxcbiAgICAgIFwiSVwiOiBwYXJzZUhvdXIyNCxcbiAgICAgIFwialwiOiBwYXJzZURheU9mWWVhcixcbiAgICAgIFwiTFwiOiBwYXJzZU1pbGxpc2Vjb25kcyxcbiAgICAgIFwibVwiOiBwYXJzZU1vbnRoTnVtYmVyLFxuICAgICAgXCJNXCI6IHBhcnNlTWludXRlcyxcbiAgICAgIFwicFwiOiBwYXJzZVBlcmlvZCxcbiAgICAgIFwiU1wiOiBwYXJzZVNlY29uZHMsXG4gICAgICBcIlVcIjogcGFyc2VXZWVrTnVtYmVyU3VuZGF5LFxuICAgICAgXCJ3XCI6IHBhcnNlV2Vla2RheU51bWJlcixcbiAgICAgIFwiV1wiOiBwYXJzZVdlZWtOdW1iZXJNb25kYXksXG4gICAgICBcInhcIjogcGFyc2VMb2NhbGVEYXRlLFxuICAgICAgXCJYXCI6IHBhcnNlTG9jYWxlVGltZSxcbiAgICAgIFwieVwiOiBwYXJzZVllYXIsXG4gICAgICBcIllcIjogcGFyc2VGdWxsWWVhcixcbiAgICAgIFwiWlwiOiBwYXJzZVpvbmUsXG4gICAgICBcIiVcIjogcGFyc2VMaXRlcmFsUGVyY2VudFxuICAgIH07XG5cbiAgICAvLyBUaGVzZSByZWN1cnNpdmUgZGlyZWN0aXZlIGRlZmluaXRpb25zIG11c3QgYmUgZGVmZXJyZWQuXG4gICAgZm9ybWF0cy54ID0gbmV3Rm9ybWF0KGxvY2FsZV9kYXRlLCBmb3JtYXRzKTtcbiAgICBmb3JtYXRzLlggPSBuZXdGb3JtYXQobG9jYWxlX3RpbWUsIGZvcm1hdHMpO1xuICAgIGZvcm1hdHMuYyA9IG5ld0Zvcm1hdChsb2NhbGVfZGF0ZVRpbWUsIGZvcm1hdHMpO1xuICAgIHV0Y0Zvcm1hdHMueCA9IG5ld0Zvcm1hdChsb2NhbGVfZGF0ZSwgdXRjRm9ybWF0cyk7XG4gICAgdXRjRm9ybWF0cy5YID0gbmV3Rm9ybWF0KGxvY2FsZV90aW1lLCB1dGNGb3JtYXRzKTtcbiAgICB1dGNGb3JtYXRzLmMgPSBuZXdGb3JtYXQobG9jYWxlX2RhdGVUaW1lLCB1dGNGb3JtYXRzKTtcblxuICAgIGZ1bmN0aW9uIG5ld0Zvcm1hdChzcGVjaWZpZXIsIGZvcm1hdHMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgICAgICB2YXIgc3RyaW5nID0gW10sXG4gICAgICAgICAgICBpID0gLTEsXG4gICAgICAgICAgICBqID0gMCxcbiAgICAgICAgICAgIG4gPSBzcGVjaWZpZXIubGVuZ3RoLFxuICAgICAgICAgICAgYyxcbiAgICAgICAgICAgIHBhZCxcbiAgICAgICAgICAgIGZvcm1hdDtcblxuICAgICAgICBpZiAoIShkYXRlIGluc3RhbmNlb2YgRGF0ZSkpIGRhdGUgPSBuZXcgRGF0ZSgrZGF0ZSk7XG5cbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgICBpZiAoc3BlY2lmaWVyLmNoYXJDb2RlQXQoaSkgPT09IDM3KSB7XG4gICAgICAgICAgICBzdHJpbmcucHVzaChzcGVjaWZpZXIuc2xpY2UoaiwgaSkpO1xuICAgICAgICAgICAgaWYgKChwYWQgPSBwYWRzW2MgPSBzcGVjaWZpZXIuY2hhckF0KCsraSldKSAhPSBudWxsKSBjID0gc3BlY2lmaWVyLmNoYXJBdCgrK2kpO2Vsc2UgcGFkID0gYyA9PT0gXCJlXCIgPyBcIiBcIiA6IFwiMFwiO1xuICAgICAgICAgICAgaWYgKGZvcm1hdCA9IGZvcm1hdHNbY10pIGMgPSBmb3JtYXQoZGF0ZSwgcGFkKTtcbiAgICAgICAgICAgIHN0cmluZy5wdXNoKGMpO1xuICAgICAgICAgICAgaiA9IGkgKyAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHN0cmluZy5wdXNoKHNwZWNpZmllci5zbGljZShqLCBpKSk7XG4gICAgICAgIHJldHVybiBzdHJpbmcuam9pbihcIlwiKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbmV3UGFyc2Uoc3BlY2lmaWVyLCBuZXdEYXRlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICB2YXIgZCA9IG5ld1llYXIoMTkwMCksXG4gICAgICAgICAgICBpID0gcGFyc2VTcGVjaWZpZXIoZCwgc3BlY2lmaWVyLCBzdHJpbmcgKz0gXCJcIiwgMCk7XG4gICAgICAgIGlmIChpICE9IHN0cmluZy5sZW5ndGgpIHJldHVybiBudWxsO1xuXG4gICAgICAgIC8vIFRoZSBhbS1wbSBmbGFnIGlzIDAgZm9yIEFNLCBhbmQgMSBmb3IgUE0uXG4gICAgICAgIGlmIChcInBcIiBpbiBkKSBkLkggPSBkLkggJSAxMiArIGQucCAqIDEyO1xuXG4gICAgICAgIC8vIENvbnZlcnQgZGF5LW9mLXdlZWsgYW5kIHdlZWstb2YteWVhciB0byBkYXktb2YteWVhci5cbiAgICAgICAgaWYgKFwiV1wiIGluIGQgfHwgXCJVXCIgaW4gZCkge1xuICAgICAgICAgIGlmICghKFwid1wiIGluIGQpKSBkLncgPSBcIldcIiBpbiBkID8gMSA6IDA7XG4gICAgICAgICAgdmFyIGRheSQkMSA9IFwiWlwiIGluIGQgPyB1dGNEYXRlKG5ld1llYXIoZC55KSkuZ2V0VVRDRGF5KCkgOiBuZXdEYXRlKG5ld1llYXIoZC55KSkuZ2V0RGF5KCk7XG4gICAgICAgICAgZC5tID0gMDtcbiAgICAgICAgICBkLmQgPSBcIldcIiBpbiBkID8gKGQudyArIDYpICUgNyArIGQuVyAqIDcgLSAoZGF5JCQxICsgNSkgJSA3IDogZC53ICsgZC5VICogNyAtIChkYXkkJDEgKyA2KSAlIDc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBhIHRpbWUgem9uZSBpcyBzcGVjaWZpZWQsIGFsbCBmaWVsZHMgYXJlIGludGVycHJldGVkIGFzIFVUQyBhbmQgdGhlblxuICAgICAgICAvLyBvZmZzZXQgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpZWQgdGltZSB6b25lLlxuICAgICAgICBpZiAoXCJaXCIgaW4gZCkge1xuICAgICAgICAgIGQuSCArPSBkLlogLyAxMDAgfCAwO1xuICAgICAgICAgIGQuTSArPSBkLlogJSAxMDA7XG4gICAgICAgICAgcmV0dXJuIHV0Y0RhdGUoZCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBPdGhlcndpc2UsIGFsbCBmaWVsZHMgYXJlIGluIGxvY2FsIHRpbWUuXG4gICAgICAgIHJldHVybiBuZXdEYXRlKGQpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZVNwZWNpZmllcihkLCBzcGVjaWZpZXIsIHN0cmluZywgaikge1xuICAgICAgdmFyIGkgPSAwLFxuICAgICAgICAgIG4gPSBzcGVjaWZpZXIubGVuZ3RoLFxuICAgICAgICAgIG0gPSBzdHJpbmcubGVuZ3RoLFxuICAgICAgICAgIGMsXG4gICAgICAgICAgcGFyc2U7XG5cbiAgICAgIHdoaWxlIChpIDwgbikge1xuICAgICAgICBpZiAoaiA+PSBtKSByZXR1cm4gLTE7XG4gICAgICAgIGMgPSBzcGVjaWZpZXIuY2hhckNvZGVBdChpKyspO1xuICAgICAgICBpZiAoYyA9PT0gMzcpIHtcbiAgICAgICAgICBjID0gc3BlY2lmaWVyLmNoYXJBdChpKyspO1xuICAgICAgICAgIHBhcnNlID0gcGFyc2VzW2MgaW4gcGFkcyA/IHNwZWNpZmllci5jaGFyQXQoaSsrKSA6IGNdO1xuICAgICAgICAgIGlmICghcGFyc2UgfHwgKGogPSBwYXJzZShkLCBzdHJpbmcsIGopKSA8IDApIHJldHVybiAtMTtcbiAgICAgICAgfSBlbHNlIGlmIChjICE9IHN0cmluZy5jaGFyQ29kZUF0KGorKykpIHtcbiAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGo7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VQZXJpb2QoZCwgc3RyaW5nLCBpKSB7XG4gICAgICB2YXIgbiA9IHBlcmlvZFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICAgIHJldHVybiBuID8gKGQucCA9IHBlcmlvZExvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VTaG9ydFdlZWtkYXkoZCwgc3RyaW5nLCBpKSB7XG4gICAgICB2YXIgbiA9IHNob3J0V2Vla2RheVJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICAgIHJldHVybiBuID8gKGQudyA9IHNob3J0V2Vla2RheUxvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VXZWVrZGF5KGQsIHN0cmluZywgaSkge1xuICAgICAgdmFyIG4gPSB3ZWVrZGF5UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgICAgcmV0dXJuIG4gPyAoZC53ID0gd2Vla2RheUxvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VTaG9ydE1vbnRoKGQsIHN0cmluZywgaSkge1xuICAgICAgdmFyIG4gPSBzaG9ydE1vbnRoUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgICAgcmV0dXJuIG4gPyAoZC5tID0gc2hvcnRNb250aExvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VNb250aChkLCBzdHJpbmcsIGkpIHtcbiAgICAgIHZhciBuID0gbW9udGhSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgICByZXR1cm4gbiA/IChkLm0gPSBtb250aExvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VMb2NhbGVEYXRlVGltZShkLCBzdHJpbmcsIGkpIHtcbiAgICAgIHJldHVybiBwYXJzZVNwZWNpZmllcihkLCBsb2NhbGVfZGF0ZVRpbWUsIHN0cmluZywgaSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VMb2NhbGVEYXRlKGQsIHN0cmluZywgaSkge1xuICAgICAgcmV0dXJuIHBhcnNlU3BlY2lmaWVyKGQsIGxvY2FsZV9kYXRlLCBzdHJpbmcsIGkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlTG9jYWxlVGltZShkLCBzdHJpbmcsIGkpIHtcbiAgICAgIHJldHVybiBwYXJzZVNwZWNpZmllcihkLCBsb2NhbGVfdGltZSwgc3RyaW5nLCBpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmb3JtYXRTaG9ydFdlZWtkYXkoZCkge1xuICAgICAgcmV0dXJuIGxvY2FsZV9zaG9ydFdlZWtkYXlzW2QuZ2V0RGF5KCldO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZvcm1hdFdlZWtkYXkoZCkge1xuICAgICAgcmV0dXJuIGxvY2FsZV93ZWVrZGF5c1tkLmdldERheSgpXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmb3JtYXRTaG9ydE1vbnRoKGQpIHtcbiAgICAgIHJldHVybiBsb2NhbGVfc2hvcnRNb250aHNbZC5nZXRNb250aCgpXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmb3JtYXRNb250aChkKSB7XG4gICAgICByZXR1cm4gbG9jYWxlX21vbnRoc1tkLmdldE1vbnRoKCldO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZvcm1hdFBlcmlvZChkKSB7XG4gICAgICByZXR1cm4gbG9jYWxlX3BlcmlvZHNbKyhkLmdldEhvdXJzKCkgPj0gMTIpXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmb3JtYXRVVENTaG9ydFdlZWtkYXkoZCkge1xuICAgICAgcmV0dXJuIGxvY2FsZV9zaG9ydFdlZWtkYXlzW2QuZ2V0VVRDRGF5KCldO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtkYXkoZCkge1xuICAgICAgcmV0dXJuIGxvY2FsZV93ZWVrZGF5c1tkLmdldFVUQ0RheSgpXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmb3JtYXRVVENTaG9ydE1vbnRoKGQpIHtcbiAgICAgIHJldHVybiBsb2NhbGVfc2hvcnRNb250aHNbZC5nZXRVVENNb250aCgpXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmb3JtYXRVVENNb250aChkKSB7XG4gICAgICByZXR1cm4gbG9jYWxlX21vbnRoc1tkLmdldFVUQ01vbnRoKCldO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZvcm1hdFVUQ1BlcmlvZChkKSB7XG4gICAgICByZXR1cm4gbG9jYWxlX3BlcmlvZHNbKyhkLmdldFVUQ0hvdXJzKCkgPj0gMTIpXTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZm9ybWF0OiBmdW5jdGlvbiBmb3JtYXQoc3BlY2lmaWVyKSB7XG4gICAgICAgIHZhciBmID0gbmV3Rm9ybWF0KHNwZWNpZmllciArPSBcIlwiLCBmb3JtYXRzKTtcbiAgICAgICAgZi50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gc3BlY2lmaWVyO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gZjtcbiAgICAgIH0sXG4gICAgICBwYXJzZTogZnVuY3Rpb24gcGFyc2Uoc3BlY2lmaWVyKSB7XG4gICAgICAgIHZhciBwID0gbmV3UGFyc2Uoc3BlY2lmaWVyICs9IFwiXCIsIGxvY2FsRGF0ZSk7XG4gICAgICAgIHAudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHNwZWNpZmllcjtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHA7XG4gICAgICB9LFxuICAgICAgdXRjRm9ybWF0OiBmdW5jdGlvbiB1dGNGb3JtYXQoc3BlY2lmaWVyKSB7XG4gICAgICAgIHZhciBmID0gbmV3Rm9ybWF0KHNwZWNpZmllciArPSBcIlwiLCB1dGNGb3JtYXRzKTtcbiAgICAgICAgZi50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gc3BlY2lmaWVyO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gZjtcbiAgICAgIH0sXG4gICAgICB1dGNQYXJzZTogZnVuY3Rpb24gdXRjUGFyc2Uoc3BlY2lmaWVyKSB7XG4gICAgICAgIHZhciBwID0gbmV3UGFyc2Uoc3BlY2lmaWVyLCB1dGNEYXRlKTtcbiAgICAgICAgcC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gc3BlY2lmaWVyO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gcDtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgdmFyIHBhZHMgPSB7IFwiLVwiOiBcIlwiLCBcIl9cIjogXCIgXCIsIFwiMFwiOiBcIjBcIiB9O1xuICB2YXIgbnVtYmVyUmUgPSAvXlxccypcXGQrLztcbiAgdmFyIHBlcmNlbnRSZSA9IC9eJS87XG4gIHZhciByZXF1b3RlUmUgPSAvW1xcXFxcXF5cXCRcXCpcXCtcXD9cXHxcXFtcXF1cXChcXClcXC5cXHtcXH1dL2c7XG5cbiAgZnVuY3Rpb24gcGFkKHZhbHVlLCBmaWxsLCB3aWR0aCkge1xuICAgIHZhciBzaWduID0gdmFsdWUgPCAwID8gXCItXCIgOiBcIlwiLFxuICAgICAgICBzdHJpbmcgPSAoc2lnbiA/IC12YWx1ZSA6IHZhbHVlKSArIFwiXCIsXG4gICAgICAgIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gICAgcmV0dXJuIHNpZ24gKyAobGVuZ3RoIDwgd2lkdGggPyBuZXcgQXJyYXkod2lkdGggLSBsZW5ndGggKyAxKS5qb2luKGZpbGwpICsgc3RyaW5nIDogc3RyaW5nKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcXVvdGUocykge1xuICAgIHJldHVybiBzLnJlcGxhY2UocmVxdW90ZVJlLCBcIlxcXFwkJlwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFJlKG5hbWVzKSB7XG4gICAgcmV0dXJuIG5ldyBSZWdFeHAoXCJeKD86XCIgKyBuYW1lcy5tYXAocmVxdW90ZSkuam9pbihcInxcIikgKyBcIilcIiwgXCJpXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0TG9va3VwKG5hbWVzKSB7XG4gICAgdmFyIG1hcCA9IHt9LFxuICAgICAgICBpID0gLTEsXG4gICAgICAgIG4gPSBuYW1lcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIG1hcFtuYW1lc1tpXS50b0xvd2VyQ2FzZSgpXSA9IGk7XG4gICAgfXJldHVybiBtYXA7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVdlZWtkYXlOdW1iZXIoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMSkpO1xuICAgIHJldHVybiBuID8gKGQudyA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVdlZWtOdW1iZXJTdW5kYXkoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC5VID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlV2Vla051bWJlck1vbmRheShkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLlcgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VGdWxsWWVhcihkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA0KSk7XG4gICAgcmV0dXJuIG4gPyAoZC55ID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlWWVhcihkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gICAgcmV0dXJuIG4gPyAoZC55ID0gK25bMF0gKyAoK25bMF0gPiA2OCA/IDE5MDAgOiAyMDAwKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2Vab25lKGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gL14oWil8KFsrLV1cXGRcXGQpKD86XFw6PyhcXGRcXGQpKT8vLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA2KSk7XG4gICAgcmV0dXJuIG4gPyAoZC5aID0gblsxXSA/IDAgOiAtKG5bMl0gKyAoblszXSB8fCBcIjAwXCIpKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VNb250aE51bWJlcihkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gICAgcmV0dXJuIG4gPyAoZC5tID0gblswXSAtIDEsIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlRGF5T2ZNb250aChkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gICAgcmV0dXJuIG4gPyAoZC5kID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlRGF5T2ZZZWFyKGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDMpKTtcbiAgICByZXR1cm4gbiA/IChkLm0gPSAwLCBkLmQgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VIb3VyMjQoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICAgIHJldHVybiBuID8gKGQuSCA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZU1pbnV0ZXMoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICAgIHJldHVybiBuID8gKGQuTSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVNlY29uZHMoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICAgIHJldHVybiBuID8gKGQuUyA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZU1pbGxpc2Vjb25kcyhkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAzKSk7XG4gICAgcmV0dXJuIG4gPyAoZC5MID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlTGl0ZXJhbFBlcmNlbnQoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBwZXJjZW50UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDEpKTtcbiAgICByZXR1cm4gbiA/IGkgKyBuWzBdLmxlbmd0aCA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0RGF5T2ZNb250aChkLCBwKSB7XG4gICAgcmV0dXJuIHBhZChkLmdldERhdGUoKSwgcCwgMik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRIb3VyMjQoZCwgcCkge1xuICAgIHJldHVybiBwYWQoZC5nZXRIb3VycygpLCBwLCAyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdEhvdXIxMihkLCBwKSB7XG4gICAgcmV0dXJuIHBhZChkLmdldEhvdXJzKCkgJSAxMiB8fCAxMiwgcCwgMik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXREYXlPZlllYXIoZCwgcCkge1xuICAgIHJldHVybiBwYWQoMSArIGRheS5jb3VudCh5ZWFyKGQpLCBkKSwgcCwgMyk7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRNaWxsaXNlY29uZHMoZCwgcCkge1xuICAgIHJldHVybiBwYWQoZC5nZXRNaWxsaXNlY29uZHMoKSwgcCwgMyk7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRNb250aE51bWJlcihkLCBwKSB7XG4gICAgcmV0dXJuIHBhZChkLmdldE1vbnRoKCkgKyAxLCBwLCAyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdE1pbnV0ZXMoZCwgcCkge1xuICAgIHJldHVybiBwYWQoZC5nZXRNaW51dGVzKCksIHAsIDIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0U2Vjb25kcyhkLCBwKSB7XG4gICAgcmV0dXJuIHBhZChkLmdldFNlY29uZHMoKSwgcCwgMik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRXZWVrTnVtYmVyU3VuZGF5KGQsIHApIHtcbiAgICByZXR1cm4gcGFkKHN1bmRheS5jb3VudCh5ZWFyKGQpLCBkKSwgcCwgMik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRXZWVrZGF5TnVtYmVyKGQpIHtcbiAgICByZXR1cm4gZC5nZXREYXkoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFdlZWtOdW1iZXJNb25kYXkoZCwgcCkge1xuICAgIHJldHVybiBwYWQobW9uZGF5LmNvdW50KHllYXIoZCksIGQpLCBwLCAyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFllYXIoZCwgcCkge1xuICAgIHJldHVybiBwYWQoZC5nZXRGdWxsWWVhcigpICUgMTAwLCBwLCAyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdEZ1bGxZZWFyKGQsIHApIHtcbiAgICByZXR1cm4gcGFkKGQuZ2V0RnVsbFllYXIoKSAlIDEwMDAwLCBwLCA0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFpvbmUoZCkge1xuICAgIHZhciB6ID0gZC5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgIHJldHVybiAoeiA+IDAgPyBcIi1cIiA6ICh6ICo9IC0xLCBcIitcIikpICsgcGFkKHogLyA2MCB8IDAsIFwiMFwiLCAyKSArIHBhZCh6ICUgNjAsIFwiMFwiLCAyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ0RheU9mTW9udGgoZCwgcCkge1xuICAgIHJldHVybiBwYWQoZC5nZXRVVENEYXRlKCksIHAsIDIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDSG91cjI0KGQsIHApIHtcbiAgICByZXR1cm4gcGFkKGQuZ2V0VVRDSG91cnMoKSwgcCwgMik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENIb3VyMTIoZCwgcCkge1xuICAgIHJldHVybiBwYWQoZC5nZXRVVENIb3VycygpICUgMTIgfHwgMTIsIHAsIDIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDRGF5T2ZZZWFyKGQsIHApIHtcbiAgICByZXR1cm4gcGFkKDEgKyB1dGNEYXkuY291bnQodXRjWWVhcihkKSwgZCksIHAsIDMpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDTWlsbGlzZWNvbmRzKGQsIHApIHtcbiAgICByZXR1cm4gcGFkKGQuZ2V0VVRDTWlsbGlzZWNvbmRzKCksIHAsIDMpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDTW9udGhOdW1iZXIoZCwgcCkge1xuICAgIHJldHVybiBwYWQoZC5nZXRVVENNb250aCgpICsgMSwgcCwgMik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENNaW51dGVzKGQsIHApIHtcbiAgICByZXR1cm4gcGFkKGQuZ2V0VVRDTWludXRlcygpLCBwLCAyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1NlY29uZHMoZCwgcCkge1xuICAgIHJldHVybiBwYWQoZC5nZXRVVENTZWNvbmRzKCksIHAsIDIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDV2Vla051bWJlclN1bmRheShkLCBwKSB7XG4gICAgcmV0dXJuIHBhZCh1dGNTdW5kYXkuY291bnQodXRjWWVhcihkKSwgZCksIHAsIDIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDV2Vla2RheU51bWJlcihkKSB7XG4gICAgcmV0dXJuIGQuZ2V0VVRDRGF5KCk7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENXZWVrTnVtYmVyTW9uZGF5KGQsIHApIHtcbiAgICByZXR1cm4gcGFkKHV0Y01vbmRheS5jb3VudCh1dGNZZWFyKGQpLCBkKSwgcCwgMik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENZZWFyKGQsIHApIHtcbiAgICByZXR1cm4gcGFkKGQuZ2V0VVRDRnVsbFllYXIoKSAlIDEwMCwgcCwgMik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENGdWxsWWVhcihkLCBwKSB7XG4gICAgcmV0dXJuIHBhZChkLmdldFVUQ0Z1bGxZZWFyKCkgJSAxMDAwMCwgcCwgNCk7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENab25lKCkge1xuICAgIHJldHVybiBcIiswMDAwXCI7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRMaXRlcmFsUGVyY2VudCgpIHtcbiAgICByZXR1cm4gXCIlXCI7XG4gIH1cblxuICB2YXIgbG9jYWxlJDI7XG5cbiAgZGVmYXVsdExvY2FsZSQxKHtcbiAgICBkYXRlVGltZTogXCIleCwgJVhcIixcbiAgICBkYXRlOiBcIiUtbS8lLWQvJVlcIixcbiAgICB0aW1lOiBcIiUtSTolTTolUyAlcFwiLFxuICAgIHBlcmlvZHM6IFtcIkFNXCIsIFwiUE1cIl0sXG4gICAgZGF5czogW1wiU3VuZGF5XCIsIFwiTW9uZGF5XCIsIFwiVHVlc2RheVwiLCBcIldlZG5lc2RheVwiLCBcIlRodXJzZGF5XCIsIFwiRnJpZGF5XCIsIFwiU2F0dXJkYXlcIl0sXG4gICAgc2hvcnREYXlzOiBbXCJTdW5cIiwgXCJNb25cIiwgXCJUdWVcIiwgXCJXZWRcIiwgXCJUaHVcIiwgXCJGcmlcIiwgXCJTYXRcIl0sXG4gICAgbW9udGhzOiBbXCJKYW51YXJ5XCIsIFwiRmVicnVhcnlcIiwgXCJNYXJjaFwiLCBcIkFwcmlsXCIsIFwiTWF5XCIsIFwiSnVuZVwiLCBcIkp1bHlcIiwgXCJBdWd1c3RcIiwgXCJTZXB0ZW1iZXJcIiwgXCJPY3RvYmVyXCIsIFwiTm92ZW1iZXJcIiwgXCJEZWNlbWJlclwiXSxcbiAgICBzaG9ydE1vbnRoczogW1wiSmFuXCIsIFwiRmViXCIsIFwiTWFyXCIsIFwiQXByXCIsIFwiTWF5XCIsIFwiSnVuXCIsIFwiSnVsXCIsIFwiQXVnXCIsIFwiU2VwXCIsIFwiT2N0XCIsIFwiTm92XCIsIFwiRGVjXCJdXG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGRlZmF1bHRMb2NhbGUkMShkZWZpbml0aW9uKSB7XG4gICAgbG9jYWxlJDIgPSBmb3JtYXRMb2NhbGUkMShkZWZpbml0aW9uKTtcbiAgICBleHBvcnRzLnRpbWVGb3JtYXQgPSBsb2NhbGUkMi5mb3JtYXQ7XG4gICAgZXhwb3J0cy50aW1lUGFyc2UgPSBsb2NhbGUkMi5wYXJzZTtcbiAgICBleHBvcnRzLnV0Y0Zvcm1hdCA9IGxvY2FsZSQyLnV0Y0Zvcm1hdDtcbiAgICBleHBvcnRzLnV0Y1BhcnNlID0gbG9jYWxlJDIudXRjUGFyc2U7XG4gICAgcmV0dXJuIGxvY2FsZSQyO1xuICB9XG5cbiAgdmFyIGlzb1NwZWNpZmllciA9IFwiJVktJW0tJWRUJUg6JU06JVMuJUxaXCI7XG5cbiAgZnVuY3Rpb24gZm9ybWF0SXNvTmF0aXZlKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS50b0lTT1N0cmluZygpO1xuICB9XG5cbiAgdmFyIGZvcm1hdElzbyA9IERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nID8gZm9ybWF0SXNvTmF0aXZlIDogZXhwb3J0cy51dGNGb3JtYXQoaXNvU3BlY2lmaWVyKTtcblxuICBmdW5jdGlvbiBwYXJzZUlzb05hdGl2ZShzdHJpbmcpIHtcbiAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKHN0cmluZyk7XG4gICAgcmV0dXJuIGlzTmFOKGRhdGUpID8gbnVsbCA6IGRhdGU7XG4gIH1cblxuICB2YXIgcGFyc2VJc28gPSArbmV3IERhdGUoXCIyMDAwLTAxLTAxVDAwOjAwOjAwLjAwMFpcIikgPyBwYXJzZUlzb05hdGl2ZSA6IGV4cG9ydHMudXRjUGFyc2UoaXNvU3BlY2lmaWVyKTtcblxuICB2YXIgZHVyYXRpb25TZWNvbmQgPSAxMDAwO1xuICB2YXIgZHVyYXRpb25NaW51dGUgPSBkdXJhdGlvblNlY29uZCAqIDYwO1xuICB2YXIgZHVyYXRpb25Ib3VyID0gZHVyYXRpb25NaW51dGUgKiA2MDtcbiAgdmFyIGR1cmF0aW9uRGF5ID0gZHVyYXRpb25Ib3VyICogMjQ7XG4gIHZhciBkdXJhdGlvbldlZWsgPSBkdXJhdGlvbkRheSAqIDc7XG4gIHZhciBkdXJhdGlvbk1vbnRoID0gZHVyYXRpb25EYXkgKiAzMDtcbiAgdmFyIGR1cmF0aW9uWWVhciA9IGR1cmF0aW9uRGF5ICogMzY1O1xuXG4gIGZ1bmN0aW9uIGRhdGUkMSh0KSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gbnVtYmVyJDModCkge1xuICAgIHJldHVybiB0IGluc3RhbmNlb2YgRGF0ZSA/ICt0IDogK25ldyBEYXRlKCt0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbGVuZGFyKHllYXIkJDEsIG1vbnRoJCQxLCB3ZWVrLCBkYXkkJDEsIGhvdXIkJDEsIG1pbnV0ZSQkMSwgc2Vjb25kJCQxLCBtaWxsaXNlY29uZCQkMSwgZm9ybWF0KSB7XG4gICAgdmFyIHNjYWxlID0gY29udGludW91cyhkZWludGVycG9sYXRlTGluZWFyLCByZWludGVycG9sYXRlKSxcbiAgICAgICAgaW52ZXJ0ID0gc2NhbGUuaW52ZXJ0LFxuICAgICAgICBkb21haW4gPSBzY2FsZS5kb21haW47XG5cbiAgICB2YXIgZm9ybWF0TWlsbGlzZWNvbmQgPSBmb3JtYXQoXCIuJUxcIiksXG4gICAgICAgIGZvcm1hdFNlY29uZCA9IGZvcm1hdChcIjolU1wiKSxcbiAgICAgICAgZm9ybWF0TWludXRlID0gZm9ybWF0KFwiJUk6JU1cIiksXG4gICAgICAgIGZvcm1hdEhvdXIgPSBmb3JtYXQoXCIlSSAlcFwiKSxcbiAgICAgICAgZm9ybWF0RGF5ID0gZm9ybWF0KFwiJWEgJWRcIiksXG4gICAgICAgIGZvcm1hdFdlZWsgPSBmb3JtYXQoXCIlYiAlZFwiKSxcbiAgICAgICAgZm9ybWF0TW9udGggPSBmb3JtYXQoXCIlQlwiKSxcbiAgICAgICAgZm9ybWF0WWVhciA9IGZvcm1hdChcIiVZXCIpO1xuXG4gICAgdmFyIHRpY2tJbnRlcnZhbHMgPSBbW3NlY29uZCQkMSwgMSwgZHVyYXRpb25TZWNvbmRdLCBbc2Vjb25kJCQxLCA1LCA1ICogZHVyYXRpb25TZWNvbmRdLCBbc2Vjb25kJCQxLCAxNSwgMTUgKiBkdXJhdGlvblNlY29uZF0sIFtzZWNvbmQkJDEsIDMwLCAzMCAqIGR1cmF0aW9uU2Vjb25kXSwgW21pbnV0ZSQkMSwgMSwgZHVyYXRpb25NaW51dGVdLCBbbWludXRlJCQxLCA1LCA1ICogZHVyYXRpb25NaW51dGVdLCBbbWludXRlJCQxLCAxNSwgMTUgKiBkdXJhdGlvbk1pbnV0ZV0sIFttaW51dGUkJDEsIDMwLCAzMCAqIGR1cmF0aW9uTWludXRlXSwgW2hvdXIkJDEsIDEsIGR1cmF0aW9uSG91cl0sIFtob3VyJCQxLCAzLCAzICogZHVyYXRpb25Ib3VyXSwgW2hvdXIkJDEsIDYsIDYgKiBkdXJhdGlvbkhvdXJdLCBbaG91ciQkMSwgMTIsIDEyICogZHVyYXRpb25Ib3VyXSwgW2RheSQkMSwgMSwgZHVyYXRpb25EYXldLCBbZGF5JCQxLCAyLCAyICogZHVyYXRpb25EYXldLCBbd2VlaywgMSwgZHVyYXRpb25XZWVrXSwgW21vbnRoJCQxLCAxLCBkdXJhdGlvbk1vbnRoXSwgW21vbnRoJCQxLCAzLCAzICogZHVyYXRpb25Nb250aF0sIFt5ZWFyJCQxLCAxLCBkdXJhdGlvblllYXJdXTtcblxuICAgIGZ1bmN0aW9uIHRpY2tGb3JtYXQoZGF0ZSQkMSkge1xuICAgICAgcmV0dXJuIChzZWNvbmQkJDEoZGF0ZSQkMSkgPCBkYXRlJCQxID8gZm9ybWF0TWlsbGlzZWNvbmQgOiBtaW51dGUkJDEoZGF0ZSQkMSkgPCBkYXRlJCQxID8gZm9ybWF0U2Vjb25kIDogaG91ciQkMShkYXRlJCQxKSA8IGRhdGUkJDEgPyBmb3JtYXRNaW51dGUgOiBkYXkkJDEoZGF0ZSQkMSkgPCBkYXRlJCQxID8gZm9ybWF0SG91ciA6IG1vbnRoJCQxKGRhdGUkJDEpIDwgZGF0ZSQkMSA/IHdlZWsoZGF0ZSQkMSkgPCBkYXRlJCQxID8gZm9ybWF0RGF5IDogZm9ybWF0V2VlayA6IHllYXIkJDEoZGF0ZSQkMSkgPCBkYXRlJCQxID8gZm9ybWF0TW9udGggOiBmb3JtYXRZZWFyKShkYXRlJCQxKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0aWNrSW50ZXJ2YWwoaW50ZXJ2YWwkJDEsIHN0YXJ0LCBzdG9wLCBzdGVwKSB7XG4gICAgICBpZiAoaW50ZXJ2YWwkJDEgPT0gbnVsbCkgaW50ZXJ2YWwkJDEgPSAxMDtcblxuICAgICAgLy8gSWYgYSBkZXNpcmVkIHRpY2sgY291bnQgaXMgc3BlY2lmaWVkLCBwaWNrIGEgcmVhc29uYWJsZSB0aWNrIGludGVydmFsXG4gICAgICAvLyBiYXNlZCBvbiB0aGUgZXh0ZW50IG9mIHRoZSBkb21haW4gYW5kIGEgcm91Z2ggZXN0aW1hdGUgb2YgdGljayBzaXplLlxuICAgICAgLy8gT3RoZXJ3aXNlLCBhc3N1bWUgaW50ZXJ2YWwgaXMgYWxyZWFkeSBhIHRpbWUgaW50ZXJ2YWwgYW5kIHVzZSBpdC5cbiAgICAgIGlmICh0eXBlb2YgaW50ZXJ2YWwkJDEgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgdmFyIHRhcmdldCA9IE1hdGguYWJzKHN0b3AgLSBzdGFydCkgLyBpbnRlcnZhbCQkMSxcbiAgICAgICAgICAgIGkgPSBiaXNlY3RvcihmdW5jdGlvbiAoaSkge1xuICAgICAgICAgIHJldHVybiBpWzJdO1xuICAgICAgICB9KS5yaWdodCh0aWNrSW50ZXJ2YWxzLCB0YXJnZXQpO1xuICAgICAgICBpZiAoaSA9PT0gdGlja0ludGVydmFscy5sZW5ndGgpIHtcbiAgICAgICAgICBzdGVwID0gdGlja1N0ZXAoc3RhcnQgLyBkdXJhdGlvblllYXIsIHN0b3AgLyBkdXJhdGlvblllYXIsIGludGVydmFsJCQxKTtcbiAgICAgICAgICBpbnRlcnZhbCQkMSA9IHllYXIkJDE7XG4gICAgICAgIH0gZWxzZSBpZiAoaSkge1xuICAgICAgICAgIGkgPSB0aWNrSW50ZXJ2YWxzW3RhcmdldCAvIHRpY2tJbnRlcnZhbHNbaSAtIDFdWzJdIDwgdGlja0ludGVydmFsc1tpXVsyXSAvIHRhcmdldCA/IGkgLSAxIDogaV07XG4gICAgICAgICAgc3RlcCA9IGlbMV07XG4gICAgICAgICAgaW50ZXJ2YWwkJDEgPSBpWzBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0ZXAgPSB0aWNrU3RlcChzdGFydCwgc3RvcCwgaW50ZXJ2YWwkJDEpO1xuICAgICAgICAgIGludGVydmFsJCQxID0gbWlsbGlzZWNvbmQkJDE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0ZXAgPT0gbnVsbCA/IGludGVydmFsJCQxIDogaW50ZXJ2YWwkJDEuZXZlcnkoc3RlcCk7XG4gICAgfVxuXG4gICAgc2NhbGUuaW52ZXJ0ID0gZnVuY3Rpb24gKHkpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZShpbnZlcnQoeSkpO1xuICAgIH07XG5cbiAgICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBkb21haW4obWFwJDMuY2FsbChfLCBudW1iZXIkMykpIDogZG9tYWluKCkubWFwKGRhdGUkMSk7XG4gICAgfTtcblxuICAgIHNjYWxlLnRpY2tzID0gZnVuY3Rpb24gKGludGVydmFsJCQxLCBzdGVwKSB7XG4gICAgICB2YXIgZCA9IGRvbWFpbigpLFxuICAgICAgICAgIHQwID0gZFswXSxcbiAgICAgICAgICB0MSA9IGRbZC5sZW5ndGggLSAxXSxcbiAgICAgICAgICByID0gdDEgPCB0MCxcbiAgICAgICAgICB0O1xuICAgICAgaWYgKHIpIHQgPSB0MCwgdDAgPSB0MSwgdDEgPSB0O1xuICAgICAgdCA9IHRpY2tJbnRlcnZhbChpbnRlcnZhbCQkMSwgdDAsIHQxLCBzdGVwKTtcbiAgICAgIHQgPSB0ID8gdC5yYW5nZSh0MCwgdDEgKyAxKSA6IFtdOyAvLyBpbmNsdXNpdmUgc3RvcFxuICAgICAgcmV0dXJuIHIgPyB0LnJldmVyc2UoKSA6IHQ7XG4gICAgfTtcblxuICAgIHNjYWxlLnRpY2tGb3JtYXQgPSBmdW5jdGlvbiAoY291bnQsIHNwZWNpZmllcikge1xuICAgICAgcmV0dXJuIHNwZWNpZmllciA9PSBudWxsID8gdGlja0Zvcm1hdCA6IGZvcm1hdChzcGVjaWZpZXIpO1xuICAgIH07XG5cbiAgICBzY2FsZS5uaWNlID0gZnVuY3Rpb24gKGludGVydmFsJCQxLCBzdGVwKSB7XG4gICAgICB2YXIgZCA9IGRvbWFpbigpO1xuICAgICAgcmV0dXJuIChpbnRlcnZhbCQkMSA9IHRpY2tJbnRlcnZhbChpbnRlcnZhbCQkMSwgZFswXSwgZFtkLmxlbmd0aCAtIDFdLCBzdGVwKSkgPyBkb21haW4obmljZShkLCBpbnRlcnZhbCQkMSkpIDogc2NhbGU7XG4gICAgfTtcblxuICAgIHNjYWxlLmNvcHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gY29weShzY2FsZSwgY2FsZW5kYXIoeWVhciQkMSwgbW9udGgkJDEsIHdlZWssIGRheSQkMSwgaG91ciQkMSwgbWludXRlJCQxLCBzZWNvbmQkJDEsIG1pbGxpc2Vjb25kJCQxLCBmb3JtYXQpKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHNjYWxlO1xuICB9XG5cbiAgdmFyIHRpbWUgPSBmdW5jdGlvbiB0aW1lKCkge1xuICAgIHJldHVybiBjYWxlbmRhcih5ZWFyLCBtb250aCwgc3VuZGF5LCBkYXksIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBtaWxsaXNlY29uZCwgZXhwb3J0cy50aW1lRm9ybWF0KS5kb21haW4oW25ldyBEYXRlKDIwMDAsIDAsIDEpLCBuZXcgRGF0ZSgyMDAwLCAwLCAyKV0pO1xuICB9O1xuXG4gIHZhciB1dGNUaW1lID0gZnVuY3Rpb24gdXRjVGltZSgpIHtcbiAgICByZXR1cm4gY2FsZW5kYXIodXRjWWVhciwgdXRjTW9udGgsIHV0Y1N1bmRheSwgdXRjRGF5LCB1dGNIb3VyLCB1dGNNaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmQsIGV4cG9ydHMudXRjRm9ybWF0KS5kb21haW4oW0RhdGUuVVRDKDIwMDAsIDAsIDEpLCBEYXRlLlVUQygyMDAwLCAwLCAyKV0pO1xuICB9O1xuXG4gIHZhciBjb2xvcnMgPSBmdW5jdGlvbiBjb2xvcnMocykge1xuICAgIHJldHVybiBzLm1hdGNoKC8uezZ9L2cpLm1hcChmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIFwiI1wiICsgeDtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgY2F0ZWdvcnkxMCA9IGNvbG9ycyhcIjFmNzdiNGZmN2YwZTJjYTAyY2Q2MjcyODk0NjdiZDhjNTY0YmUzNzdjMjdmN2Y3ZmJjYmQyMjE3YmVjZlwiKTtcblxuICB2YXIgY2F0ZWdvcnkyMGIgPSBjb2xvcnMoXCIzOTNiNzk1MjU0YTM2YjZlY2Y5YzllZGU2Mzc5Mzk4Y2EyNTJiNWNmNmJjZWRiOWM4YzZkMzFiZDllMzllN2JhNTJlN2NiOTQ4NDNjMzlhZDQ5NGFkNjYxNmJlNzk2OWM3YjQxNzNhNTUxOTRjZTZkYmRkZTllZDZcIik7XG5cbiAgdmFyIGNhdGVnb3J5MjBjID0gY29sb3JzKFwiMzE4MmJkNmJhZWQ2OWVjYWUxYzZkYmVmZTY1NTBkZmQ4ZDNjZmRhZTZiZmRkMGEyMzFhMzU0NzRjNDc2YTFkOTliYzdlOWMwNzU2YmIxOWU5YWM4YmNiZGRjZGFkYWViNjM2MzYzOTY5Njk2YmRiZGJkZDlkOWQ5XCIpO1xuXG4gIHZhciBjYXRlZ29yeTIwID0gY29sb3JzKFwiMWY3N2I0YWVjN2U4ZmY3ZjBlZmZiYjc4MmNhMDJjOThkZjhhZDYyNzI4ZmY5ODk2OTQ2N2JkYzViMGQ1OGM1NjRiYzQ5Yzk0ZTM3N2MyZjdiNmQyN2Y3ZjdmYzdjN2M3YmNiZDIyZGJkYjhkMTdiZWNmOWVkYWU1XCIpO1xuXG4gIHZhciBjdWJlaGVsaXgkMyA9IGN1YmVoZWxpeExvbmcoY3ViZWhlbGl4KDMwMCwgMC41LCAwLjApLCBjdWJlaGVsaXgoLTI0MCwgMC41LCAxLjApKTtcblxuICB2YXIgd2FybSA9IGN1YmVoZWxpeExvbmcoY3ViZWhlbGl4KC0xMDAsIDAuNzUsIDAuMzUpLCBjdWJlaGVsaXgoODAsIDEuNTAsIDAuOCkpO1xuXG4gIHZhciBjb29sID0gY3ViZWhlbGl4TG9uZyhjdWJlaGVsaXgoMjYwLCAwLjc1LCAwLjM1KSwgY3ViZWhlbGl4KDgwLCAxLjUwLCAwLjgpKTtcblxuICB2YXIgcmFpbmJvdyA9IGN1YmVoZWxpeCgpO1xuXG4gIHZhciByYWluYm93JDEgPSBmdW5jdGlvbiByYWluYm93JDEodCkge1xuICAgIGlmICh0IDwgMCB8fCB0ID4gMSkgdCAtPSBNYXRoLmZsb29yKHQpO1xuICAgIHZhciB0cyA9IE1hdGguYWJzKHQgLSAwLjUpO1xuICAgIHJhaW5ib3cuaCA9IDM2MCAqIHQgLSAxMDA7XG4gICAgcmFpbmJvdy5zID0gMS41IC0gMS41ICogdHM7XG4gICAgcmFpbmJvdy5sID0gMC44IC0gMC45ICogdHM7XG4gICAgcmV0dXJuIHJhaW5ib3cgKyBcIlwiO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHJhbXAocmFuZ2UpIHtcbiAgICB2YXIgbiA9IHJhbmdlLmxlbmd0aDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHQpIHtcbiAgICAgIHJldHVybiByYW5nZVtNYXRoLm1heCgwLCBNYXRoLm1pbihuIC0gMSwgTWF0aC5mbG9vcih0ICogbikpKV07XG4gICAgfTtcbiAgfVxuXG4gIHZhciB2aXJpZGlzID0gcmFtcChjb2xvcnMoXCI0NDAxNTQ0NDAyNTY0NTA0NTc0NTA1NTk0NjA3NWE0NjA4NWM0NjBhNWQ0NjBiNWU0NzBkNjA0NzBlNjE0NzEwNjM0NzExNjQ0NzEzNjU0ODE0Njc0ODE2Njg0ODE3Njk0ODE4NmE0ODFhNmM0ODFiNmQ0ODFjNmU0ODFkNmY0ODFmNzA0ODIwNzE0ODIxNzM0ODIzNzQ0ODI0NzU0ODI1NzY0ODI2Nzc0ODI4Nzg0ODI5Nzk0NzJhN2E0NzJjN2E0NzJkN2I0NzJlN2M0NzJmN2Q0NjMwN2U0NjMyN2U0NjMzN2Y0NjM0ODA0NTM1ODE0NTM3ODE0NTM4ODI0NDM5ODM0NDNhODM0NDNiODQ0MzNkODQ0MzNlODU0MjNmODU0MjQwODY0MjQxODY0MTQyODc0MTQ0ODc0MDQ1ODg0MDQ2ODgzZjQ3ODgzZjQ4ODkzZTQ5ODkzZTRhODkzZTRjOGEzZDRkOGEzZDRlOGEzYzRmOGEzYzUwOGIzYjUxOGIzYjUyOGIzYTUzOGIzYTU0OGMzOTU1OGMzOTU2OGMzODU4OGMzODU5OGMzNzVhOGMzNzViOGQzNjVjOGQzNjVkOGQzNTVlOGQzNTVmOGQzNDYwOGQzNDYxOGQzMzYyOGQzMzYzOGQzMjY0OGUzMjY1OGUzMTY2OGUzMTY3OGUzMTY4OGUzMDY5OGUzMDZhOGUyZjZiOGUyZjZjOGUyZTZkOGUyZTZlOGUyZTZmOGUyZDcwOGUyZDcxOGUyYzcxOGUyYzcyOGUyYzczOGUyYjc0OGUyYjc1OGUyYTc2OGUyYTc3OGUyYTc4OGUyOTc5OGUyOTdhOGUyOTdiOGUyODdjOGUyODdkOGUyNzdlOGUyNzdmOGUyNzgwOGUyNjgxOGUyNjgyOGUyNjgyOGUyNTgzOGUyNTg0OGUyNTg1OGUyNDg2OGUyNDg3OGUyMzg4OGUyMzg5OGUyMzhhOGQyMjhiOGQyMjhjOGQyMjhkOGQyMThlOGQyMThmOGQyMTkwOGQyMTkxOGMyMDkyOGMyMDkyOGMyMDkzOGMxZjk0OGMxZjk1OGIxZjk2OGIxZjk3OGIxZjk4OGIxZjk5OGExZjlhOGExZTliOGExZTljODkxZTlkODkxZjllODkxZjlmODgxZmEwODgxZmExODgxZmExODcxZmEyODcyMGEzODYyMGE0ODYyMWE1ODUyMWE2ODUyMmE3ODUyMmE4ODQyM2E5ODMyNGFhODMyNWFiODIyNWFjODIyNmFkODEyN2FkODEyOGFlODAyOWFmN2YyYWIwN2YyY2IxN2UyZGIyN2QyZWIzN2MyZmI0N2MzMWI1N2IzMmI2N2EzNGI2NzkzNWI3NzkzN2I4NzgzOGI5NzczYWJhNzYzYmJiNzUzZGJjNzQzZmJjNzM0MGJkNzI0MmJlNzE0NGJmNzA0NmMwNmY0OGMxNmU0YWMxNmQ0Y2MyNmM0ZWMzNmI1MGM0NmE1MmM1Njk1NGM1Njg1NmM2Njc1OGM3NjU1YWM4NjQ1Y2M4NjM1ZWM5NjI2MGNhNjA2M2NiNWY2NWNiNWU2N2NjNWM2OWNkNWI2Y2NkNWE2ZWNlNTg3MGNmNTc3M2QwNTY3NWQwNTQ3N2QxNTM3YWQxNTE3Y2QyNTA3ZmQzNGU4MWQzNGQ4NGQ0NGI4NmQ1NDk4OWQ1NDg4YmQ2NDY4ZWQ2NDU5MGQ3NDM5M2Q3NDE5NWQ4NDA5OGQ4M2U5YmQ5M2M5ZGQ5M2JhMGRhMzlhMmRhMzdhNWRiMzZhOGRiMzRhYWRjMzJhZGRjMzBiMGRkMmZiMmRkMmRiNWRlMmJiOGRlMjliYWRlMjhiZGRmMjZjMGRmMjVjMmRmMjNjNWUwMjFjOGUwMjBjYWUxMWZjZGUxMWRkMGUxMWNkMmUyMWJkNWUyMWFkOGUyMTlkYWUzMTlkZGUzMThkZmUzMThlMmU0MThlNWU0MTllN2U0MTllYWU1MWFlY2U1MWJlZmU1MWNmMWU1MWRmNGU2MWVmNmU2MjBmOGU2MjFmYmU3MjNmZGU3MjVcIikpO1xuXG4gIHZhciBtYWdtYSA9IHJhbXAoY29sb3JzKFwiMDAwMDA0MDEwMDA1MDEwMTA2MDEwMTA4MDIwMTA5MDIwMjBiMDIwMjBkMDMwMzBmMDMwMzEyMDQwNDE0MDUwNDE2MDYwNTE4MDYwNTFhMDcwNjFjMDgwNzFlMDkwNzIwMGEwODIyMGIwOTI0MGMwOTI2MGQwYTI5MGUwYjJiMTAwYjJkMTEwYzJmMTIwZDMxMTMwZDM0MTQwZTM2MTUwZTM4MTYwZjNiMTgwZjNkMTkxMDNmMWExMDQyMWMxMDQ0MWQxMTQ3MWUxMTQ5MjAxMTRiMjExMTRlMjIxMTUwMjQxMjUzMjUxMjU1MjcxMjU4MjkxMTVhMmExMTVjMmMxMTVmMmQxMTYxMmYxMTYzMzExMTY1MzMxMDY3MzQxMDY5MzYxMDZiMzgxMDZjMzkwZjZlM2IwZjcwM2QwZjcxM2YwZjcyNDAwZjc0NDIwZjc1NDQwZjc2NDUxMDc3NDcxMDc4NDkxMDc4NGExMDc5NGMxMTdhNGUxMTdiNGYxMjdiNTExMjdjNTIxMzdjNTQxMzdkNTYxNDdkNTcxNTdlNTkxNTdlNWExNjdlNWMxNjdmNWQxNzdmNWYxODdmNjAxODgwNjIxOTgwNjQxYTgwNjUxYTgwNjcxYjgwNjgxYzgxNmExYzgxNmIxZDgxNmQxZDgxNmUxZTgxNzAxZjgxNzIxZjgxNzMyMDgxNzUyMTgxNzYyMTgxNzgyMjgxNzkyMjgyN2IyMzgyN2MyMzgyN2UyNDgyODAyNTgyODEyNTgxODMyNjgxODQyNjgxODYyNzgxODgyNzgxODkyODgxOGIyOTgxOGMyOTgxOGUyYTgxOTAyYTgxOTEyYjgxOTMyYjgwOTQyYzgwOTYyYzgwOTgyZDgwOTkyZDgwOWIyZTdmOWMyZTdmOWUyZjdmYTAyZjdmYTEzMDdlYTMzMDdlYTUzMTdlYTYzMTdkYTgzMjdkYWEzMzdkYWIzMzdjYWQzNDdjYWUzNDdiYjAzNTdiYjIzNTdiYjMzNjdhYjUzNjdhYjczNzc5YjgzNzc5YmEzODc4YmMzOTc4YmQzOTc3YmYzYTc3YzAzYTc2YzIzYjc1YzQzYzc1YzUzYzc0YzczZDczYzgzZTczY2EzZTcyY2MzZjcxY2Q0MDcxY2Y0MDcwZDA0MTZmZDI0MjZmZDM0MzZlZDU0NDZkZDY0NTZjZDg0NTZjZDk0NjZiZGI0NzZhZGM0ODY5ZGU0OTY4ZGY0YTY4ZTA0YzY3ZTI0ZDY2ZTM0ZTY1ZTQ0ZjY0ZTU1MDY0ZTc1MjYzZTg1MzYyZTk1NDYyZWE1NjYxZWI1NzYwZWM1ODYwZWQ1YTVmZWU1YjVlZWY1ZDVlZjA1ZjVlZjE2MDVkZjI2MjVkZjI2NDVjZjM2NTVjZjQ2NzVjZjQ2OTVjZjU2YjVjZjY2YzVjZjY2ZTVjZjc3MDVjZjc3MjVjZjg3NDVjZjg3NjVjZjk3ODVkZjk3OTVkZjk3YjVkZmE3ZDVlZmE3ZjVlZmE4MTVmZmI4MzVmZmI4NTYwZmI4NzYxZmM4OTYxZmM4YTYyZmM4YzYzZmM4ZTY0ZmM5MDY1ZmQ5MjY2ZmQ5NDY3ZmQ5NjY4ZmQ5ODY5ZmQ5YTZhZmQ5YjZiZmU5ZDZjZmU5ZjZkZmVhMTZlZmVhMzZmZmVhNTcxZmVhNzcyZmVhOTczZmVhYTc0ZmVhYzc2ZmVhZTc3ZmViMDc4ZmViMjdhZmViNDdiZmViNjdjZmViNzdlZmViOTdmZmViYjgxZmViZDgyZmViZjg0ZmVjMTg1ZmVjMjg3ZmVjNDg4ZmVjNjhhZmVjODhjZmVjYThkZmVjYzhmZmVjZDkwZmVjZjkyZmVkMTk0ZmVkMzk1ZmVkNTk3ZmVkNzk5ZmVkODlhZmRkYTljZmRkYzllZmRkZWEwZmRlMGExZmRlMmEzZmRlM2E1ZmRlNWE3ZmRlN2E5ZmRlOWFhZmRlYmFjZmNlY2FlZmNlZWIwZmNmMGIyZmNmMmI0ZmNmNGI2ZmNmNmI4ZmNmN2I5ZmNmOWJiZmNmYmJkZmNmZGJmXCIpKTtcblxuICB2YXIgaW5mZXJubyA9IHJhbXAoY29sb3JzKFwiMDAwMDA0MDEwMDA1MDEwMTA2MDEwMTA4MDIwMTBhMDIwMjBjMDIwMjBlMDMwMjEwMDQwMzEyMDQwMzE0MDUwNDE3MDYwNDE5MDcwNTFiMDgwNTFkMDkwNjFmMGEwNzIyMGIwNzI0MGMwODI2MGQwODI5MGUwOTJiMTAwOTJkMTEwYTMwMTIwYTMyMTQwYjM0MTUwYjM3MTYwYjM5MTgwYzNjMTkwYzNlMWIwYzQxMWMwYzQzMWUwYzQ1MWYwYzQ4MjEwYzRhMjMwYzRjMjQwYzRmMjYwYzUxMjgwYjUzMjkwYjU1MmIwYjU3MmQwYjU5MmYwYTViMzEwYTVjMzIwYTVlMzQwYTVmMzYwOTYxMzgwOTYyMzkwOTYzM2IwOTY0M2QwOTY1M2UwOTY2NDAwYTY3NDIwYTY4NDQwYTY4NDUwYTY5NDcwYjZhNDkwYjZhNGEwYzZiNGMwYzZiNGQwZDZjNGYwZDZjNTEwZTZjNTIwZTZkNTQwZjZkNTUwZjZkNTcxMDZlNTkxMDZlNWExMTZlNWMxMjZlNWQxMjZlNWYxMzZlNjExMzZlNjIxNDZlNjQxNTZlNjUxNTZlNjcxNjZlNjkxNjZlNmExNzZlNmMxODZlNmQxODZlNmYxOTZlNzExOTZlNzIxYTZlNzQxYTZlNzUxYjZlNzcxYzZkNzgxYzZkN2ExZDZkN2MxZDZkN2QxZTZkN2YxZTZjODAxZjZjODIyMDZjODQyMDZiODUyMTZiODcyMTZiODgyMjZhOGEyMjZhOGMyMzY5OGQyMzY5OGYyNDY5OTAyNTY4OTIyNTY4OTMyNjY3OTUyNjY3OTcyNzY2OTgyNzY2OWEyODY1OWIyOTY0OWQyOTY0OWYyYTYzYTAyYTYzYTIyYjYyYTMyYzYxYTUyYzYwYTYyZDYwYTgyZTVmYTkyZTVlYWIyZjVlYWQzMDVkYWUzMDVjYjAzMTViYjEzMjVhYjMzMjVhYjQzMzU5YjYzNDU4YjczNTU3YjkzNTU2YmEzNjU1YmMzNzU0YmQzODUzYmYzOTUyYzAzYTUxYzEzYTUwYzMzYjRmYzQzYzRlYzYzZDRkYzczZTRjYzgzZjRiY2E0MDRhY2I0MTQ5Y2M0MjQ4Y2U0MzQ3Y2Y0NDQ2ZDA0NTQ1ZDI0NjQ0ZDM0NzQzZDQ0ODQyZDU0YTQxZDc0YjNmZDg0YzNlZDk0ZDNkZGE0ZTNjZGI1MDNiZGQ1MTNhZGU1MjM4ZGY1MzM3ZTA1NTM2ZTE1NjM1ZTI1NzM0ZTM1OTMzZTQ1YTMxZTU1YzMwZTY1ZDJmZTc1ZTJlZTg2MDJkZTk2MTJiZWE2MzJhZWI2NDI5ZWI2NjI4ZWM2NzI2ZWQ2OTI1ZWU2YTI0ZWY2YzIzZWY2ZTIxZjA2ZjIwZjE3MTFmZjE3MzFkZjI3NDFjZjM3NjFiZjM3ODE5ZjQ3OTE4ZjU3YjE3ZjU3ZDE1ZjY3ZTE0ZjY4MDEzZjc4MjEyZjc4NDEwZjg4NTBmZjg4NzBlZjg4OTBjZjk4YjBiZjk4YzBhZjk4ZTA5ZmE5MDA4ZmE5MjA3ZmE5NDA3ZmI5NjA2ZmI5NzA2ZmI5OTA2ZmI5YjA2ZmI5ZDA3ZmM5ZjA3ZmNhMTA4ZmNhMzA5ZmNhNTBhZmNhNjBjZmNhODBkZmNhYTBmZmNhYzExZmNhZTEyZmNiMDE0ZmNiMjE2ZmNiNDE4ZmJiNjFhZmJiODFkZmJiYTFmZmJiYzIxZmJiZTIzZmFjMDI2ZmFjMjI4ZmFjNDJhZmFjNjJkZjljNzJmZjljOTMyZjljYjM1ZjhjZDM3ZjhjZjNhZjdkMTNkZjdkMzQwZjZkNTQzZjZkNzQ2ZjVkOTQ5ZjVkYjRjZjRkZDRmZjRkZjUzZjRlMTU2ZjNlMzVhZjNlNTVkZjJlNjYxZjJlODY1ZjJlYTY5ZjFlYzZkZjFlZDcxZjFlZjc1ZjFmMTc5ZjJmMjdkZjJmNDgyZjNmNTg2ZjNmNjhhZjRmODhlZjVmOTkyZjZmYTk2ZjhmYjlhZjlmYzlkZmFmZGExZmNmZmE0XCIpKTtcblxuICB2YXIgcGxhc21hID0gcmFtcChjb2xvcnMoXCIwZDA4ODcxMDA3ODgxMzA3ODkxNjA3OGExOTA2OGMxYjA2OGQxZDA2OGUyMDA2OGYyMjA2OTAyNDA2OTEyNjA1OTEyODA1OTIyYTA1OTMyYzA1OTQyZTA1OTUyZjA1OTYzMTA1OTczMzA1OTczNTA0OTgzNzA0OTkzODA0OWEzYTA0OWEzYzA0OWIzZTA0OWMzZjA0OWM0MTA0OWQ0MzAzOWU0NDAzOWU0NjAzOWY0ODAzOWY0OTAzYTA0YjAzYTE0YzAyYTE0ZTAyYTI1MDAyYTI1MTAyYTM1MzAyYTM1NTAyYTQ1NjAxYTQ1ODAxYTQ1OTAxYTU1YjAxYTU1YzAxYTY1ZTAxYTY2MDAxYTY2MTAwYTc2MzAwYTc2NDAwYTc2NjAwYTc2NzAwYTg2OTAwYTg2YTAwYTg2YzAwYTg2ZTAwYTg2ZjAwYTg3MTAwYTg3MjAxYTg3NDAxYTg3NTAxYTg3NzAxYTg3ODAxYTg3YTAyYTg3YjAyYTg3ZDAzYTg3ZTAzYTg4MDA0YTg4MTA0YTc4MzA1YTc4NDA1YTc4NjA2YTY4NzA3YTY4ODA4YTY4YTA5YTU4YjBhYTU4ZDBiYTU4ZTBjYTQ4ZjBkYTQ5MTBlYTM5MjBmYTM5NDEwYTI5NTExYTE5NjEzYTE5ODE0YTA5OTE1OWY5YTE2OWY5YzE3OWU5ZDE4OWQ5ZTE5OWRhMDFhOWNhMTFiOWJhMjFkOWFhMzFlOWFhNTFmOTlhNjIwOThhNzIxOTdhODIyOTZhYTIzOTVhYjI0OTRhYzI2OTRhZDI3OTNhZTI4OTJiMDI5OTFiMTJhOTBiMjJiOGZiMzJjOGViNDJlOGRiNTJmOGNiNjMwOGJiNzMxOGFiODMyODliYTMzODhiYjM0ODhiYzM1ODdiZDM3ODZiZTM4ODViZjM5ODRjMDNhODNjMTNiODJjMjNjODFjMzNkODBjNDNlN2ZjNTQwN2VjNjQxN2RjNzQyN2NjODQzN2JjOTQ0N2FjYTQ1N2FjYjQ2NzljYzQ3NzhjYzQ5NzdjZDRhNzZjZTRiNzVjZjRjNzRkMDRkNzNkMTRlNzJkMjRmNzFkMzUxNzFkNDUyNzBkNTUzNmZkNTU0NmVkNjU1NmRkNzU2NmNkODU3NmJkOTU4NmFkYTVhNmFkYTViNjlkYjVjNjhkYzVkNjdkZDVlNjZkZTVmNjVkZTYxNjRkZjYyNjNlMDYzNjNlMTY0NjJlMjY1NjFlMjY2NjBlMzY4NWZlNDY5NWVlNTZhNWRlNTZiNWRlNjZjNWNlNzZlNWJlNzZmNWFlODcwNTllOTcxNThlOTcyNTdlYTc0NTdlYjc1NTZlYjc2NTVlYzc3NTRlZDc5NTNlZDdhNTJlZTdiNTFlZjdjNTFlZjdlNTBmMDdmNGZmMDgwNGVmMTgxNGRmMTgzNGNmMjg0NGJmMzg1NGJmMzg3NGFmNDg4NDlmNDg5NDhmNThiNDdmNThjNDZmNjhkNDVmNjhmNDRmNzkwNDRmNzkxNDNmNzkzNDJmODk0NDFmODk1NDBmOTk3M2ZmOTk4M2VmOTlhM2VmYTliM2RmYTljM2NmYTllM2JmYjlmM2FmYmExMzlmYmEyMzhmY2EzMzhmY2E1MzdmY2E2MzZmY2E4MzVmY2E5MzRmZGFiMzNmZGFjMzNmZGFlMzJmZGFmMzFmZGIxMzBmZGIyMmZmZGI0MmZmZGI1MmVmZWI3MmRmZWI4MmNmZWJhMmNmZWJiMmJmZWJkMmFmZWJlMmFmZWMwMjlmZGMyMjlmZGMzMjhmZGM1MjdmZGM2MjdmZGM4MjdmZGNhMjZmZGNiMjZmY2NkMjVmY2NlMjVmY2QwMjVmY2QyMjVmYmQzMjRmYmQ1MjRmYmQ3MjRmYWQ4MjRmYWRhMjRmOWRjMjRmOWRkMjVmOGRmMjVmOGUxMjVmN2UyMjVmN2U0MjVmNmU2MjZmNmU4MjZmNWU5MjZmNWViMjdmNGVkMjdmM2VlMjdmM2YwMjdmMmYyMjdmMWY0MjZmMWY1MjVmMGY3MjRmMGY5MjFcIikpO1xuXG4gIGZ1bmN0aW9uIHNlcXVlbnRpYWwoaW50ZXJwb2xhdG9yKSB7XG4gICAgdmFyIHgwID0gMCxcbiAgICAgICAgeDEgPSAxLFxuICAgICAgICBjbGFtcCA9IGZhbHNlO1xuXG4gICAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgICAgdmFyIHQgPSAoeCAtIHgwKSAvICh4MSAtIHgwKTtcbiAgICAgIHJldHVybiBpbnRlcnBvbGF0b3IoY2xhbXAgPyBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCB0KSkgOiB0KTtcbiAgICB9XG5cbiAgICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeDAgPSArX1swXSwgeDEgPSArX1sxXSwgc2NhbGUpIDogW3gwLCB4MV07XG4gICAgfTtcblxuICAgIHNjYWxlLmNsYW1wID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNsYW1wID0gISFfLCBzY2FsZSkgOiBjbGFtcDtcbiAgICB9O1xuXG4gICAgc2NhbGUuaW50ZXJwb2xhdG9yID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGludGVycG9sYXRvciA9IF8sIHNjYWxlKSA6IGludGVycG9sYXRvcjtcbiAgICB9O1xuXG4gICAgc2NhbGUuY29weSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBzZXF1ZW50aWFsKGludGVycG9sYXRvcikuZG9tYWluKFt4MCwgeDFdKS5jbGFtcChjbGFtcCk7XG4gICAgfTtcblxuICAgIHJldHVybiBsaW5lYXJpc2goc2NhbGUpO1xuICB9XG5cbiAgdmFyIGNvbnN0YW50JDEwID0gZnVuY3Rpb24gY29uc3RhbnQkMTAoeCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBjb25zdGFudCgpIHtcbiAgICAgIHJldHVybiB4O1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGFicyQxID0gTWF0aC5hYnM7XG4gIHZhciBhdGFuMiQxID0gTWF0aC5hdGFuMjtcbiAgdmFyIGNvcyQyID0gTWF0aC5jb3M7XG4gIHZhciBtYXgkMiA9IE1hdGgubWF4O1xuICB2YXIgbWluJDEgPSBNYXRoLm1pbjtcbiAgdmFyIHNpbiQyID0gTWF0aC5zaW47XG4gIHZhciBzcXJ0JDIgPSBNYXRoLnNxcnQ7XG5cbiAgdmFyIGVwc2lsb24kMyA9IDFlLTEyO1xuICB2YXIgcGkkNCA9IE1hdGguUEk7XG4gIHZhciBoYWxmUGkkMyA9IHBpJDQgLyAyO1xuICB2YXIgdGF1JDQgPSAyICogcGkkNDtcblxuICBmdW5jdGlvbiBhY29zJDEoeCkge1xuICAgIHJldHVybiB4ID4gMSA/IDAgOiB4IDwgLTEgPyBwaSQ0IDogTWF0aC5hY29zKHgpO1xuICB9XG5cbiAgZnVuY3Rpb24gYXNpbiQxKHgpIHtcbiAgICByZXR1cm4geCA+PSAxID8gaGFsZlBpJDMgOiB4IDw9IC0xID8gLWhhbGZQaSQzIDogTWF0aC5hc2luKHgpO1xuICB9XG5cbiAgZnVuY3Rpb24gYXJjSW5uZXJSYWRpdXMoZCkge1xuICAgIHJldHVybiBkLmlubmVyUmFkaXVzO1xuICB9XG5cbiAgZnVuY3Rpb24gYXJjT3V0ZXJSYWRpdXMoZCkge1xuICAgIHJldHVybiBkLm91dGVyUmFkaXVzO1xuICB9XG5cbiAgZnVuY3Rpb24gYXJjU3RhcnRBbmdsZShkKSB7XG4gICAgcmV0dXJuIGQuc3RhcnRBbmdsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFyY0VuZEFuZ2xlKGQpIHtcbiAgICByZXR1cm4gZC5lbmRBbmdsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFyY1BhZEFuZ2xlKGQpIHtcbiAgICByZXR1cm4gZCAmJiBkLnBhZEFuZ2xlOyAvLyBOb3RlOiBvcHRpb25hbCFcbiAgfVxuXG4gIGZ1bmN0aW9uIGludGVyc2VjdCh4MCwgeTAsIHgxLCB5MSwgeDIsIHkyLCB4MywgeTMpIHtcbiAgICB2YXIgeDEwID0geDEgLSB4MCxcbiAgICAgICAgeTEwID0geTEgLSB5MCxcbiAgICAgICAgeDMyID0geDMgLSB4MixcbiAgICAgICAgeTMyID0geTMgLSB5MixcbiAgICAgICAgdCA9ICh4MzIgKiAoeTAgLSB5MikgLSB5MzIgKiAoeDAgLSB4MikpIC8gKHkzMiAqIHgxMCAtIHgzMiAqIHkxMCk7XG4gICAgcmV0dXJuIFt4MCArIHQgKiB4MTAsIHkwICsgdCAqIHkxMF07XG4gIH1cblxuICAvLyBDb21wdXRlIHBlcnBlbmRpY3VsYXIgb2Zmc2V0IGxpbmUgb2YgbGVuZ3RoIHJjLlxuICAvLyBodHRwOi8vbWF0aHdvcmxkLndvbGZyYW0uY29tL0NpcmNsZS1MaW5lSW50ZXJzZWN0aW9uLmh0bWxcbiAgZnVuY3Rpb24gY29ybmVyVGFuZ2VudHMoeDAsIHkwLCB4MSwgeTEsIHIxLCByYywgY3cpIHtcbiAgICB2YXIgeDAxID0geDAgLSB4MSxcbiAgICAgICAgeTAxID0geTAgLSB5MSxcbiAgICAgICAgbG8gPSAoY3cgPyByYyA6IC1yYykgLyBzcXJ0JDIoeDAxICogeDAxICsgeTAxICogeTAxKSxcbiAgICAgICAgb3ggPSBsbyAqIHkwMSxcbiAgICAgICAgb3kgPSAtbG8gKiB4MDEsXG4gICAgICAgIHgxMSA9IHgwICsgb3gsXG4gICAgICAgIHkxMSA9IHkwICsgb3ksXG4gICAgICAgIHgxMCA9IHgxICsgb3gsXG4gICAgICAgIHkxMCA9IHkxICsgb3ksXG4gICAgICAgIHgwMCA9ICh4MTEgKyB4MTApIC8gMixcbiAgICAgICAgeTAwID0gKHkxMSArIHkxMCkgLyAyLFxuICAgICAgICBkeCA9IHgxMCAtIHgxMSxcbiAgICAgICAgZHkgPSB5MTAgLSB5MTEsXG4gICAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHksXG4gICAgICAgIHIgPSByMSAtIHJjLFxuICAgICAgICBEID0geDExICogeTEwIC0geDEwICogeTExLFxuICAgICAgICBkID0gKGR5IDwgMCA/IC0xIDogMSkgKiBzcXJ0JDIobWF4JDIoMCwgciAqIHIgKiBkMiAtIEQgKiBEKSksXG4gICAgICAgIGN4MCA9IChEICogZHkgLSBkeCAqIGQpIC8gZDIsXG4gICAgICAgIGN5MCA9ICgtRCAqIGR4IC0gZHkgKiBkKSAvIGQyLFxuICAgICAgICBjeDEgPSAoRCAqIGR5ICsgZHggKiBkKSAvIGQyLFxuICAgICAgICBjeTEgPSAoLUQgKiBkeCArIGR5ICogZCkgLyBkMixcbiAgICAgICAgZHgwID0gY3gwIC0geDAwLFxuICAgICAgICBkeTAgPSBjeTAgLSB5MDAsXG4gICAgICAgIGR4MSA9IGN4MSAtIHgwMCxcbiAgICAgICAgZHkxID0gY3kxIC0geTAwO1xuXG4gICAgLy8gUGljayB0aGUgY2xvc2VyIG9mIHRoZSB0d28gaW50ZXJzZWN0aW9uIHBvaW50cy5cbiAgICAvLyBUT0RPIElzIHRoZXJlIGEgZmFzdGVyIHdheSB0byBkZXRlcm1pbmUgd2hpY2ggaW50ZXJzZWN0aW9uIHRvIHVzZT9cbiAgICBpZiAoZHgwICogZHgwICsgZHkwICogZHkwID4gZHgxICogZHgxICsgZHkxICogZHkxKSBjeDAgPSBjeDEsIGN5MCA9IGN5MTtcblxuICAgIHJldHVybiB7XG4gICAgICBjeDogY3gwLFxuICAgICAgY3k6IGN5MCxcbiAgICAgIHgwMTogLW94LFxuICAgICAgeTAxOiAtb3ksXG4gICAgICB4MTE6IGN4MCAqIChyMSAvIHIgLSAxKSxcbiAgICAgIHkxMTogY3kwICogKHIxIC8gciAtIDEpXG4gICAgfTtcbiAgfVxuXG4gIHZhciBhcmMgPSBmdW5jdGlvbiBhcmMoKSB7XG4gICAgdmFyIGlubmVyUmFkaXVzID0gYXJjSW5uZXJSYWRpdXMsXG4gICAgICAgIG91dGVyUmFkaXVzID0gYXJjT3V0ZXJSYWRpdXMsXG4gICAgICAgIGNvcm5lclJhZGl1cyA9IGNvbnN0YW50JDEwKDApLFxuICAgICAgICBwYWRSYWRpdXMgPSBudWxsLFxuICAgICAgICBzdGFydEFuZ2xlID0gYXJjU3RhcnRBbmdsZSxcbiAgICAgICAgZW5kQW5nbGUgPSBhcmNFbmRBbmdsZSxcbiAgICAgICAgcGFkQW5nbGUgPSBhcmNQYWRBbmdsZSxcbiAgICAgICAgY29udGV4dCA9IG51bGw7XG5cbiAgICBmdW5jdGlvbiBhcmMoKSB7XG4gICAgICB2YXIgYnVmZmVyLFxuICAgICAgICAgIHIsXG4gICAgICAgICAgcjAgPSAraW5uZXJSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgICByMSA9ICtvdXRlclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICAgIGEwID0gc3RhcnRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIC0gaGFsZlBpJDMsXG4gICAgICAgICAgYTEgPSBlbmRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIC0gaGFsZlBpJDMsXG4gICAgICAgICAgZGEgPSBhYnMkMShhMSAtIGEwKSxcbiAgICAgICAgICBjdyA9IGExID4gYTA7XG5cbiAgICAgIGlmICghY29udGV4dCkgY29udGV4dCA9IGJ1ZmZlciA9IHBhdGgoKTtcblxuICAgICAgLy8gRW5zdXJlIHRoYXQgdGhlIG91dGVyIHJhZGl1cyBpcyBhbHdheXMgbGFyZ2VyIHRoYW4gdGhlIGlubmVyIHJhZGl1cy5cbiAgICAgIGlmIChyMSA8IHIwKSByID0gcjEsIHIxID0gcjAsIHIwID0gcjtcblxuICAgICAgLy8gSXMgaXQgYSBwb2ludD9cbiAgICAgIGlmICghKHIxID4gZXBzaWxvbiQzKSkgY29udGV4dC5tb3ZlVG8oMCwgMCk7XG5cbiAgICAgIC8vIE9yIGlzIGl0IGEgY2lyY2xlIG9yIGFubnVsdXM/XG4gICAgICBlbHNlIGlmIChkYSA+IHRhdSQ0IC0gZXBzaWxvbiQzKSB7XG4gICAgICAgICAgY29udGV4dC5tb3ZlVG8ocjEgKiBjb3MkMihhMCksIHIxICogc2luJDIoYTApKTtcbiAgICAgICAgICBjb250ZXh0LmFyYygwLCAwLCByMSwgYTAsIGExLCAhY3cpO1xuICAgICAgICAgIGlmIChyMCA+IGVwc2lsb24kMykge1xuICAgICAgICAgICAgY29udGV4dC5tb3ZlVG8ocjAgKiBjb3MkMihhMSksIHIwICogc2luJDIoYTEpKTtcbiAgICAgICAgICAgIGNvbnRleHQuYXJjKDAsIDAsIHIwLCBhMSwgYTAsIGN3KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBPciBpcyBpdCBhIGNpcmN1bGFyIG9yIGFubnVsYXIgc2VjdG9yP1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBhMDEgPSBhMCxcbiAgICAgICAgICAgICAgICBhMTEgPSBhMSxcbiAgICAgICAgICAgICAgICBhMDAgPSBhMCxcbiAgICAgICAgICAgICAgICBhMTAgPSBhMSxcbiAgICAgICAgICAgICAgICBkYTAgPSBkYSxcbiAgICAgICAgICAgICAgICBkYTEgPSBkYSxcbiAgICAgICAgICAgICAgICBhcCA9IHBhZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgLyAyLFxuICAgICAgICAgICAgICAgIHJwID0gYXAgPiBlcHNpbG9uJDMgJiYgKHBhZFJhZGl1cyA/ICtwYWRSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHNxcnQkMihyMCAqIHIwICsgcjEgKiByMSkpLFxuICAgICAgICAgICAgICAgIHJjID0gbWluJDEoYWJzJDEocjEgLSByMCkgLyAyLCArY29ybmVyUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpLFxuICAgICAgICAgICAgICAgIHJjMCA9IHJjLFxuICAgICAgICAgICAgICAgIHJjMSA9IHJjLFxuICAgICAgICAgICAgICAgIHQwLFxuICAgICAgICAgICAgICAgIHQxO1xuXG4gICAgICAgICAgICAvLyBBcHBseSBwYWRkaW5nPyBOb3RlIHRoYXQgc2luY2UgcjEg4omlIHIwLCBkYTEg4omlIGRhMC5cbiAgICAgICAgICAgIGlmIChycCA+IGVwc2lsb24kMykge1xuICAgICAgICAgICAgICB2YXIgcDAgPSBhc2luJDEocnAgLyByMCAqIHNpbiQyKGFwKSksXG4gICAgICAgICAgICAgICAgICBwMSA9IGFzaW4kMShycCAvIHIxICogc2luJDIoYXApKTtcbiAgICAgICAgICAgICAgaWYgKChkYTAgLT0gcDAgKiAyKSA+IGVwc2lsb24kMykgcDAgKj0gY3cgPyAxIDogLTEsIGEwMCArPSBwMCwgYTEwIC09IHAwO2Vsc2UgZGEwID0gMCwgYTAwID0gYTEwID0gKGEwICsgYTEpIC8gMjtcbiAgICAgICAgICAgICAgaWYgKChkYTEgLT0gcDEgKiAyKSA+IGVwc2lsb24kMykgcDEgKj0gY3cgPyAxIDogLTEsIGEwMSArPSBwMSwgYTExIC09IHAxO2Vsc2UgZGExID0gMCwgYTAxID0gYTExID0gKGEwICsgYTEpIC8gMjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHgwMSA9IHIxICogY29zJDIoYTAxKSxcbiAgICAgICAgICAgICAgICB5MDEgPSByMSAqIHNpbiQyKGEwMSksXG4gICAgICAgICAgICAgICAgeDEwID0gcjAgKiBjb3MkMihhMTApLFxuICAgICAgICAgICAgICAgIHkxMCA9IHIwICogc2luJDIoYTEwKTtcblxuICAgICAgICAgICAgLy8gQXBwbHkgcm91bmRlZCBjb3JuZXJzP1xuICAgICAgICAgICAgaWYgKHJjID4gZXBzaWxvbiQzKSB7XG4gICAgICAgICAgICAgIHZhciB4MTEgPSByMSAqIGNvcyQyKGExMSksXG4gICAgICAgICAgICAgICAgICB5MTEgPSByMSAqIHNpbiQyKGExMSksXG4gICAgICAgICAgICAgICAgICB4MDAgPSByMCAqIGNvcyQyKGEwMCksXG4gICAgICAgICAgICAgICAgICB5MDAgPSByMCAqIHNpbiQyKGEwMCk7XG5cbiAgICAgICAgICAgICAgLy8gUmVzdHJpY3QgdGhlIGNvcm5lciByYWRpdXMgYWNjb3JkaW5nIHRvIHRoZSBzZWN0b3IgYW5nbGUuXG4gICAgICAgICAgICAgIGlmIChkYSA8IHBpJDQpIHtcbiAgICAgICAgICAgICAgICB2YXIgb2MgPSBkYTAgPiBlcHNpbG9uJDMgPyBpbnRlcnNlY3QoeDAxLCB5MDEsIHgwMCwgeTAwLCB4MTEsIHkxMSwgeDEwLCB5MTApIDogW3gxMCwgeTEwXSxcbiAgICAgICAgICAgICAgICAgICAgYXggPSB4MDEgLSBvY1swXSxcbiAgICAgICAgICAgICAgICAgICAgYXkgPSB5MDEgLSBvY1sxXSxcbiAgICAgICAgICAgICAgICAgICAgYnggPSB4MTEgLSBvY1swXSxcbiAgICAgICAgICAgICAgICAgICAgYnkgPSB5MTEgLSBvY1sxXSxcbiAgICAgICAgICAgICAgICAgICAga2MgPSAxIC8gc2luJDIoYWNvcyQxKChheCAqIGJ4ICsgYXkgKiBieSkgLyAoc3FydCQyKGF4ICogYXggKyBheSAqIGF5KSAqIHNxcnQkMihieCAqIGJ4ICsgYnkgKiBieSkpKSAvIDIpLFxuICAgICAgICAgICAgICAgICAgICBsYyA9IHNxcnQkMihvY1swXSAqIG9jWzBdICsgb2NbMV0gKiBvY1sxXSk7XG4gICAgICAgICAgICAgICAgcmMwID0gbWluJDEocmMsIChyMCAtIGxjKSAvIChrYyAtIDEpKTtcbiAgICAgICAgICAgICAgICByYzEgPSBtaW4kMShyYywgKHIxIC0gbGMpIC8gKGtjICsgMSkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElzIHRoZSBzZWN0b3IgY29sbGFwc2VkIHRvIGEgbGluZT9cbiAgICAgICAgICAgIGlmICghKGRhMSA+IGVwc2lsb24kMykpIGNvbnRleHQubW92ZVRvKHgwMSwgeTAxKTtcblxuICAgICAgICAgICAgLy8gRG9lcyB0aGUgc2VjdG9y4oCZcyBvdXRlciByaW5nIGhhdmUgcm91bmRlZCBjb3JuZXJzP1xuICAgICAgICAgICAgZWxzZSBpZiAocmMxID4gZXBzaWxvbiQzKSB7XG4gICAgICAgICAgICAgICAgdDAgPSBjb3JuZXJUYW5nZW50cyh4MDAsIHkwMCwgeDAxLCB5MDEsIHIxLCByYzEsIGN3KTtcbiAgICAgICAgICAgICAgICB0MSA9IGNvcm5lclRhbmdlbnRzKHgxMSwgeTExLCB4MTAsIHkxMCwgcjEsIHJjMSwgY3cpO1xuXG4gICAgICAgICAgICAgICAgY29udGV4dC5tb3ZlVG8odDAuY3ggKyB0MC54MDEsIHQwLmN5ICsgdDAueTAxKTtcblxuICAgICAgICAgICAgICAgIC8vIEhhdmUgdGhlIGNvcm5lcnMgbWVyZ2VkP1xuICAgICAgICAgICAgICAgIGlmIChyYzEgPCByYykgY29udGV4dC5hcmModDAuY3gsIHQwLmN5LCByYzEsIGF0YW4yJDEodDAueTAxLCB0MC54MDEpLCBhdGFuMiQxKHQxLnkwMSwgdDEueDAxKSwgIWN3KTtcblxuICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgZHJhdyB0aGUgdHdvIGNvcm5lcnMgYW5kIHRoZSByaW5nLlxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmFyYyh0MC5jeCwgdDAuY3ksIHJjMSwgYXRhbjIkMSh0MC55MDEsIHQwLngwMSksIGF0YW4yJDEodDAueTExLCB0MC54MTEpLCAhY3cpO1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmFyYygwLCAwLCByMSwgYXRhbjIkMSh0MC5jeSArIHQwLnkxMSwgdDAuY3ggKyB0MC54MTEpLCBhdGFuMiQxKHQxLmN5ICsgdDEueTExLCB0MS5jeCArIHQxLngxMSksICFjdyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuYXJjKHQxLmN4LCB0MS5jeSwgcmMxLCBhdGFuMiQxKHQxLnkxMSwgdDEueDExKSwgYXRhbjIkMSh0MS55MDEsIHQxLngwMSksICFjdyk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvLyBPciBpcyB0aGUgb3V0ZXIgcmluZyBqdXN0IGEgY2lyY3VsYXIgYXJjP1xuICAgICAgICAgICAgICBlbHNlIGNvbnRleHQubW92ZVRvKHgwMSwgeTAxKSwgY29udGV4dC5hcmMoMCwgMCwgcjEsIGEwMSwgYTExLCAhY3cpO1xuXG4gICAgICAgICAgICAvLyBJcyB0aGVyZSBubyBpbm5lciByaW5nLCBhbmQgaXTigJlzIGEgY2lyY3VsYXIgc2VjdG9yP1xuICAgICAgICAgICAgLy8gT3IgcGVyaGFwcyBpdOKAmXMgYW4gYW5udWxhciBzZWN0b3IgY29sbGFwc2VkIGR1ZSB0byBwYWRkaW5nP1xuICAgICAgICAgICAgaWYgKCEocjAgPiBlcHNpbG9uJDMpIHx8ICEoZGEwID4gZXBzaWxvbiQzKSkgY29udGV4dC5saW5lVG8oeDEwLCB5MTApO1xuXG4gICAgICAgICAgICAvLyBEb2VzIHRoZSBzZWN0b3LigJlzIGlubmVyIHJpbmcgKG9yIHBvaW50KSBoYXZlIHJvdW5kZWQgY29ybmVycz9cbiAgICAgICAgICAgIGVsc2UgaWYgKHJjMCA+IGVwc2lsb24kMykge1xuICAgICAgICAgICAgICAgIHQwID0gY29ybmVyVGFuZ2VudHMoeDEwLCB5MTAsIHgxMSwgeTExLCByMCwgLXJjMCwgY3cpO1xuICAgICAgICAgICAgICAgIHQxID0gY29ybmVyVGFuZ2VudHMoeDAxLCB5MDEsIHgwMCwgeTAwLCByMCwgLXJjMCwgY3cpO1xuXG4gICAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8odDAuY3ggKyB0MC54MDEsIHQwLmN5ICsgdDAueTAxKTtcblxuICAgICAgICAgICAgICAgIC8vIEhhdmUgdGhlIGNvcm5lcnMgbWVyZ2VkP1xuICAgICAgICAgICAgICAgIGlmIChyYzAgPCByYykgY29udGV4dC5hcmModDAuY3gsIHQwLmN5LCByYzAsIGF0YW4yJDEodDAueTAxLCB0MC54MDEpLCBhdGFuMiQxKHQxLnkwMSwgdDEueDAxKSwgIWN3KTtcblxuICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgZHJhdyB0aGUgdHdvIGNvcm5lcnMgYW5kIHRoZSByaW5nLlxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmFyYyh0MC5jeCwgdDAuY3ksIHJjMCwgYXRhbjIkMSh0MC55MDEsIHQwLngwMSksIGF0YW4yJDEodDAueTExLCB0MC54MTEpLCAhY3cpO1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmFyYygwLCAwLCByMCwgYXRhbjIkMSh0MC5jeSArIHQwLnkxMSwgdDAuY3ggKyB0MC54MTEpLCBhdGFuMiQxKHQxLmN5ICsgdDEueTExLCB0MS5jeCArIHQxLngxMSksIGN3KTtcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5hcmModDEuY3gsIHQxLmN5LCByYzAsIGF0YW4yJDEodDEueTExLCB0MS54MTEpLCBhdGFuMiQxKHQxLnkwMSwgdDEueDAxKSwgIWN3KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8vIE9yIGlzIHRoZSBpbm5lciByaW5nIGp1c3QgYSBjaXJjdWxhciBhcmM/XG4gICAgICAgICAgICAgIGVsc2UgY29udGV4dC5hcmMoMCwgMCwgcjAsIGExMCwgYTAwLCBjdyk7XG4gICAgICAgICAgfVxuXG4gICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuXG4gICAgICBpZiAoYnVmZmVyKSByZXR1cm4gY29udGV4dCA9IG51bGwsIGJ1ZmZlciArIFwiXCIgfHwgbnVsbDtcbiAgICB9XG5cbiAgICBhcmMuY2VudHJvaWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgciA9ICgraW5uZXJSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSArICtvdXRlclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSAvIDIsXG4gICAgICAgICAgYSA9ICgrc3RhcnRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpICsgK2VuZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIC8gMiAtIHBpJDQgLyAyO1xuICAgICAgcmV0dXJuIFtjb3MkMihhKSAqIHIsIHNpbiQyKGEpICogcl07XG4gICAgfTtcblxuICAgIGFyYy5pbm5lclJhZGl1cyA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpbm5lclJhZGl1cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMTAoK18pLCBhcmMpIDogaW5uZXJSYWRpdXM7XG4gICAgfTtcblxuICAgIGFyYy5vdXRlclJhZGl1cyA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChvdXRlclJhZGl1cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMTAoK18pLCBhcmMpIDogb3V0ZXJSYWRpdXM7XG4gICAgfTtcblxuICAgIGFyYy5jb3JuZXJSYWRpdXMgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY29ybmVyUmFkaXVzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxMCgrXyksIGFyYykgOiBjb3JuZXJSYWRpdXM7XG4gICAgfTtcblxuICAgIGFyYy5wYWRSYWRpdXMgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkUmFkaXVzID0gXyA9PSBudWxsID8gbnVsbCA6IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMTAoK18pLCBhcmMpIDogcGFkUmFkaXVzO1xuICAgIH07XG5cbiAgICBhcmMuc3RhcnRBbmdsZSA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdGFydEFuZ2xlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxMCgrXyksIGFyYykgOiBzdGFydEFuZ2xlO1xuICAgIH07XG5cbiAgICBhcmMuZW5kQW5nbGUgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZW5kQW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEwKCtfKSwgYXJjKSA6IGVuZEFuZ2xlO1xuICAgIH07XG5cbiAgICBhcmMucGFkQW5nbGUgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkQW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEwKCtfKSwgYXJjKSA6IHBhZEFuZ2xlO1xuICAgIH07XG5cbiAgICBhcmMuY29udGV4dCA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjb250ZXh0ID0gXyA9PSBudWxsID8gbnVsbCA6IF8sIGFyYykgOiBjb250ZXh0O1xuICAgIH07XG5cbiAgICByZXR1cm4gYXJjO1xuICB9O1xuXG4gIGZ1bmN0aW9uIExpbmVhcihjb250ZXh0KSB7XG4gICAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gIH1cblxuICBMaW5lYXIucHJvdG90eXBlID0ge1xuICAgIGFyZWFTdGFydDogZnVuY3Rpb24gYXJlYVN0YXJ0KCkge1xuICAgICAgdGhpcy5fbGluZSA9IDA7XG4gICAgfSxcbiAgICBhcmVhRW5kOiBmdW5jdGlvbiBhcmVhRW5kKCkge1xuICAgICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgICB9LFxuICAgIGxpbmVTdGFydDogZnVuY3Rpb24gbGluZVN0YXJ0KCkge1xuICAgICAgdGhpcy5fcG9pbnQgPSAwO1xuICAgIH0sXG4gICAgbGluZUVuZDogZnVuY3Rpb24gbGluZUVuZCgpIHtcbiAgICAgIGlmICh0aGlzLl9saW5lIHx8IHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDEpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gICAgfSxcbiAgICBwb2ludDogZnVuY3Rpb24gcG9pbnQoeCwgeSkge1xuICAgICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICB0aGlzLl9wb2ludCA9IDE7dGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7YnJlYWs7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICB0aGlzLl9wb2ludCA9IDI7IC8vIHByb2NlZWRcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KTticmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIGN1cnZlTGluZWFyID0gZnVuY3Rpb24gY3VydmVMaW5lYXIoY29udGV4dCkge1xuICAgIHJldHVybiBuZXcgTGluZWFyKGNvbnRleHQpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHgkMyhwKSB7XG4gICAgcmV0dXJuIHBbMF07XG4gIH1cblxuICBmdW5jdGlvbiB5JDMocCkge1xuICAgIHJldHVybiBwWzFdO1xuICB9XG5cbiAgdmFyIGxpbmUgPSBmdW5jdGlvbiBsaW5lKCkge1xuICAgIHZhciB4ID0geCQzLFxuICAgICAgICB5ID0geSQzLFxuICAgICAgICBkZWZpbmVkID0gY29uc3RhbnQkMTAodHJ1ZSksXG4gICAgICAgIGNvbnRleHQgPSBudWxsLFxuICAgICAgICBjdXJ2ZSA9IGN1cnZlTGluZWFyLFxuICAgICAgICBvdXRwdXQgPSBudWxsO1xuXG4gICAgZnVuY3Rpb24gbGluZShkYXRhKSB7XG4gICAgICB2YXIgaSxcbiAgICAgICAgICBuID0gZGF0YS5sZW5ndGgsXG4gICAgICAgICAgZCxcbiAgICAgICAgICBkZWZpbmVkMCA9IGZhbHNlLFxuICAgICAgICAgIGJ1ZmZlcjtcblxuICAgICAgaWYgKGNvbnRleHQgPT0gbnVsbCkgb3V0cHV0ID0gY3VydmUoYnVmZmVyID0gcGF0aCgpKTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8PSBuOyArK2kpIHtcbiAgICAgICAgaWYgKCEoaSA8IG4gJiYgZGVmaW5lZChkID0gZGF0YVtpXSwgaSwgZGF0YSkpID09PSBkZWZpbmVkMCkge1xuICAgICAgICAgIGlmIChkZWZpbmVkMCA9ICFkZWZpbmVkMCkgb3V0cHV0LmxpbmVTdGFydCgpO2Vsc2Ugb3V0cHV0LmxpbmVFbmQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVmaW5lZDApIG91dHB1dC5wb2ludCgreChkLCBpLCBkYXRhKSwgK3koZCwgaSwgZGF0YSkpO1xuICAgICAgfVxuXG4gICAgICBpZiAoYnVmZmVyKSByZXR1cm4gb3V0cHV0ID0gbnVsbCwgYnVmZmVyICsgXCJcIiB8fCBudWxsO1xuICAgIH1cblxuICAgIGxpbmUueCA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxMCgrXyksIGxpbmUpIDogeDtcbiAgICB9O1xuXG4gICAgbGluZS55ID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEwKCtfKSwgbGluZSkgOiB5O1xuICAgIH07XG5cbiAgICBsaW5lLmRlZmluZWQgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZGVmaW5lZCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMTAoISFfKSwgbGluZSkgOiBkZWZpbmVkO1xuICAgIH07XG5cbiAgICBsaW5lLmN1cnZlID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGN1cnZlID0gXywgY29udGV4dCAhPSBudWxsICYmIChvdXRwdXQgPSBjdXJ2ZShjb250ZXh0KSksIGxpbmUpIDogY3VydmU7XG4gICAgfTtcblxuICAgIGxpbmUuY29udGV4dCA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChfID09IG51bGwgPyBjb250ZXh0ID0gb3V0cHV0ID0gbnVsbCA6IG91dHB1dCA9IGN1cnZlKGNvbnRleHQgPSBfKSwgbGluZSkgOiBjb250ZXh0O1xuICAgIH07XG5cbiAgICByZXR1cm4gbGluZTtcbiAgfTtcblxuICB2YXIgYXJlYSQyID0gZnVuY3Rpb24gYXJlYSQyKCkge1xuICAgIHZhciB4MCA9IHgkMyxcbiAgICAgICAgeDEgPSBudWxsLFxuICAgICAgICB5MCA9IGNvbnN0YW50JDEwKDApLFxuICAgICAgICB5MSA9IHkkMyxcbiAgICAgICAgZGVmaW5lZCA9IGNvbnN0YW50JDEwKHRydWUpLFxuICAgICAgICBjb250ZXh0ID0gbnVsbCxcbiAgICAgICAgY3VydmUgPSBjdXJ2ZUxpbmVhcixcbiAgICAgICAgb3V0cHV0ID0gbnVsbDtcblxuICAgIGZ1bmN0aW9uIGFyZWEoZGF0YSkge1xuICAgICAgdmFyIGksXG4gICAgICAgICAgaixcbiAgICAgICAgICBrLFxuICAgICAgICAgIG4gPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgICBkLFxuICAgICAgICAgIGRlZmluZWQwID0gZmFsc2UsXG4gICAgICAgICAgYnVmZmVyLFxuICAgICAgICAgIHgweiA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgICB5MHogPSBuZXcgQXJyYXkobik7XG5cbiAgICAgIGlmIChjb250ZXh0ID09IG51bGwpIG91dHB1dCA9IGN1cnZlKGJ1ZmZlciA9IHBhdGgoKSk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPD0gbjsgKytpKSB7XG4gICAgICAgIGlmICghKGkgPCBuICYmIGRlZmluZWQoZCA9IGRhdGFbaV0sIGksIGRhdGEpKSA9PT0gZGVmaW5lZDApIHtcbiAgICAgICAgICBpZiAoZGVmaW5lZDAgPSAhZGVmaW5lZDApIHtcbiAgICAgICAgICAgIGogPSBpO1xuICAgICAgICAgICAgb3V0cHV0LmFyZWFTdGFydCgpO1xuICAgICAgICAgICAgb3V0cHV0LmxpbmVTdGFydCgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvdXRwdXQubGluZUVuZCgpO1xuICAgICAgICAgICAgb3V0cHV0LmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgZm9yIChrID0gaSAtIDE7IGsgPj0gajsgLS1rKSB7XG4gICAgICAgICAgICAgIG91dHB1dC5wb2ludCh4MHpba10sIHkweltrXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvdXRwdXQubGluZUVuZCgpO1xuICAgICAgICAgICAgb3V0cHV0LmFyZWFFbmQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlZmluZWQwKSB7XG4gICAgICAgICAgeDB6W2ldID0gK3gwKGQsIGksIGRhdGEpLCB5MHpbaV0gPSAreTAoZCwgaSwgZGF0YSk7XG4gICAgICAgICAgb3V0cHV0LnBvaW50KHgxID8gK3gxKGQsIGksIGRhdGEpIDogeDB6W2ldLCB5MSA/ICt5MShkLCBpLCBkYXRhKSA6IHkweltpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGJ1ZmZlcikgcmV0dXJuIG91dHB1dCA9IG51bGwsIGJ1ZmZlciArIFwiXCIgfHwgbnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhcmVhbGluZSgpIHtcbiAgICAgIHJldHVybiBsaW5lKCkuZGVmaW5lZChkZWZpbmVkKS5jdXJ2ZShjdXJ2ZSkuY29udGV4dChjb250ZXh0KTtcbiAgICB9XG5cbiAgICBhcmVhLnggPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeDAgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEwKCtfKSwgeDEgPSBudWxsLCBhcmVhKSA6IHgwO1xuICAgIH07XG5cbiAgICBhcmVhLngwID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHgwID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxMCgrXyksIGFyZWEpIDogeDA7XG4gICAgfTtcblxuICAgIGFyZWEueDEgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeDEgPSBfID09IG51bGwgPyBudWxsIDogdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxMCgrXyksIGFyZWEpIDogeDE7XG4gICAgfTtcblxuICAgIGFyZWEueSA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5MCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMTAoK18pLCB5MSA9IG51bGwsIGFyZWEpIDogeTA7XG4gICAgfTtcblxuICAgIGFyZWEueTAgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeTAgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEwKCtfKSwgYXJlYSkgOiB5MDtcbiAgICB9O1xuXG4gICAgYXJlYS55MSA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5MSA9IF8gPT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEwKCtfKSwgYXJlYSkgOiB5MTtcbiAgICB9O1xuXG4gICAgYXJlYS5saW5lWDAgPSBhcmVhLmxpbmVZMCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhcmVhbGluZSgpLngoeDApLnkoeTApO1xuICAgIH07XG5cbiAgICBhcmVhLmxpbmVZMSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhcmVhbGluZSgpLngoeDApLnkoeTEpO1xuICAgIH07XG5cbiAgICBhcmVhLmxpbmVYMSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhcmVhbGluZSgpLngoeDEpLnkoeTApO1xuICAgIH07XG5cbiAgICBhcmVhLmRlZmluZWQgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZGVmaW5lZCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMTAoISFfKSwgYXJlYSkgOiBkZWZpbmVkO1xuICAgIH07XG5cbiAgICBhcmVhLmN1cnZlID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGN1cnZlID0gXywgY29udGV4dCAhPSBudWxsICYmIChvdXRwdXQgPSBjdXJ2ZShjb250ZXh0KSksIGFyZWEpIDogY3VydmU7XG4gICAgfTtcblxuICAgIGFyZWEuY29udGV4dCA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChfID09IG51bGwgPyBjb250ZXh0ID0gb3V0cHV0ID0gbnVsbCA6IG91dHB1dCA9IGN1cnZlKGNvbnRleHQgPSBfKSwgYXJlYSkgOiBjb250ZXh0O1xuICAgIH07XG5cbiAgICByZXR1cm4gYXJlYTtcbiAgfTtcblxuICB2YXIgZGVzY2VuZGluZyQxID0gZnVuY3Rpb24gZGVzY2VuZGluZyQxKGEsIGIpIHtcbiAgICByZXR1cm4gYiA8IGEgPyAtMSA6IGIgPiBhID8gMSA6IGIgPj0gYSA/IDAgOiBOYU47XG4gIH07XG5cbiAgdmFyIGlkZW50aXR5JDcgPSBmdW5jdGlvbiBpZGVudGl0eSQ3KGQpIHtcbiAgICByZXR1cm4gZDtcbiAgfTtcblxuICB2YXIgcGllID0gZnVuY3Rpb24gcGllKCkge1xuICAgIHZhciB2YWx1ZSA9IGlkZW50aXR5JDcsXG4gICAgICAgIHNvcnRWYWx1ZXMgPSBkZXNjZW5kaW5nJDEsXG4gICAgICAgIHNvcnQgPSBudWxsLFxuICAgICAgICBzdGFydEFuZ2xlID0gY29uc3RhbnQkMTAoMCksXG4gICAgICAgIGVuZEFuZ2xlID0gY29uc3RhbnQkMTAodGF1JDQpLFxuICAgICAgICBwYWRBbmdsZSA9IGNvbnN0YW50JDEwKDApO1xuXG4gICAgZnVuY3Rpb24gcGllKGRhdGEpIHtcbiAgICAgIHZhciBpLFxuICAgICAgICAgIG4gPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgICBqLFxuICAgICAgICAgIGssXG4gICAgICAgICAgc3VtID0gMCxcbiAgICAgICAgICBpbmRleCA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgICBhcmNzID0gbmV3IEFycmF5KG4pLFxuICAgICAgICAgIGEwID0gK3N0YXJ0QW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgICBkYSA9IE1hdGgubWluKHRhdSQ0LCBNYXRoLm1heCgtdGF1JDQsIGVuZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgLSBhMCkpLFxuICAgICAgICAgIGExLFxuICAgICAgICAgIHAgPSBNYXRoLm1pbihNYXRoLmFicyhkYSkgLyBuLCBwYWRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSxcbiAgICAgICAgICBwYSA9IHAgKiAoZGEgPCAwID8gLTEgOiAxKSxcbiAgICAgICAgICB2O1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICgodiA9IGFyY3NbaW5kZXhbaV0gPSBpXSA9ICt2YWx1ZShkYXRhW2ldLCBpLCBkYXRhKSkgPiAwKSB7XG4gICAgICAgICAgc3VtICs9IHY7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gT3B0aW9uYWxseSBzb3J0IHRoZSBhcmNzIGJ5IHByZXZpb3VzbHktY29tcHV0ZWQgdmFsdWVzIG9yIGJ5IGRhdGEuXG4gICAgICBpZiAoc29ydFZhbHVlcyAhPSBudWxsKSBpbmRleC5zb3J0KGZ1bmN0aW9uIChpLCBqKSB7XG4gICAgICAgIHJldHVybiBzb3J0VmFsdWVzKGFyY3NbaV0sIGFyY3Nbal0pO1xuICAgICAgfSk7ZWxzZSBpZiAoc29ydCAhPSBudWxsKSBpbmRleC5zb3J0KGZ1bmN0aW9uIChpLCBqKSB7XG4gICAgICAgIHJldHVybiBzb3J0KGRhdGFbaV0sIGRhdGFbal0pO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIENvbXB1dGUgdGhlIGFyY3MhIFRoZXkgYXJlIHN0b3JlZCBpbiB0aGUgb3JpZ2luYWwgZGF0YSdzIG9yZGVyLlxuICAgICAgZm9yIChpID0gMCwgayA9IHN1bSA/IChkYSAtIG4gKiBwYSkgLyBzdW0gOiAwOyBpIDwgbjsgKytpLCBhMCA9IGExKSB7XG4gICAgICAgIGogPSBpbmRleFtpXSwgdiA9IGFyY3Nbal0sIGExID0gYTAgKyAodiA+IDAgPyB2ICogayA6IDApICsgcGEsIGFyY3Nbal0gPSB7XG4gICAgICAgICAgZGF0YTogZGF0YVtqXSxcbiAgICAgICAgICBpbmRleDogaSxcbiAgICAgICAgICB2YWx1ZTogdixcbiAgICAgICAgICBzdGFydEFuZ2xlOiBhMCxcbiAgICAgICAgICBlbmRBbmdsZTogYTEsXG4gICAgICAgICAgcGFkQW5nbGU6IHBcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFyY3M7XG4gICAgfVxuXG4gICAgcGllLnZhbHVlID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHZhbHVlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxMCgrXyksIHBpZSkgOiB2YWx1ZTtcbiAgICB9O1xuXG4gICAgcGllLnNvcnRWYWx1ZXMgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc29ydFZhbHVlcyA9IF8sIHNvcnQgPSBudWxsLCBwaWUpIDogc29ydFZhbHVlcztcbiAgICB9O1xuXG4gICAgcGllLnNvcnQgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc29ydCA9IF8sIHNvcnRWYWx1ZXMgPSBudWxsLCBwaWUpIDogc29ydDtcbiAgICB9O1xuXG4gICAgcGllLnN0YXJ0QW5nbGUgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3RhcnRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMTAoK18pLCBwaWUpIDogc3RhcnRBbmdsZTtcbiAgICB9O1xuXG4gICAgcGllLmVuZEFuZ2xlID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGVuZEFuZ2xlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxMCgrXyksIHBpZSkgOiBlbmRBbmdsZTtcbiAgICB9O1xuXG4gICAgcGllLnBhZEFuZ2xlID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZEFuZ2xlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxMCgrXyksIHBpZSkgOiBwYWRBbmdsZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHBpZTtcbiAgfTtcblxuICB2YXIgY3VydmVSYWRpYWxMaW5lYXIgPSBjdXJ2ZVJhZGlhbChjdXJ2ZUxpbmVhcik7XG5cbiAgZnVuY3Rpb24gUmFkaWFsKGN1cnZlKSB7XG4gICAgdGhpcy5fY3VydmUgPSBjdXJ2ZTtcbiAgfVxuXG4gIFJhZGlhbC5wcm90b3R5cGUgPSB7XG4gICAgYXJlYVN0YXJ0OiBmdW5jdGlvbiBhcmVhU3RhcnQoKSB7XG4gICAgICB0aGlzLl9jdXJ2ZS5hcmVhU3RhcnQoKTtcbiAgICB9LFxuICAgIGFyZWFFbmQ6IGZ1bmN0aW9uIGFyZWFFbmQoKSB7XG4gICAgICB0aGlzLl9jdXJ2ZS5hcmVhRW5kKCk7XG4gICAgfSxcbiAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uIGxpbmVTdGFydCgpIHtcbiAgICAgIHRoaXMuX2N1cnZlLmxpbmVTdGFydCgpO1xuICAgIH0sXG4gICAgbGluZUVuZDogZnVuY3Rpb24gbGluZUVuZCgpIHtcbiAgICAgIHRoaXMuX2N1cnZlLmxpbmVFbmQoKTtcbiAgICB9LFxuICAgIHBvaW50OiBmdW5jdGlvbiBwb2ludChhLCByKSB7XG4gICAgICB0aGlzLl9jdXJ2ZS5wb2ludChyICogTWF0aC5zaW4oYSksIHIgKiAtTWF0aC5jb3MoYSkpO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBjdXJ2ZVJhZGlhbChjdXJ2ZSkge1xuXG4gICAgZnVuY3Rpb24gcmFkaWFsKGNvbnRleHQpIHtcbiAgICAgIHJldHVybiBuZXcgUmFkaWFsKGN1cnZlKGNvbnRleHQpKTtcbiAgICB9XG5cbiAgICByYWRpYWwuX2N1cnZlID0gY3VydmU7XG5cbiAgICByZXR1cm4gcmFkaWFsO1xuICB9XG5cbiAgZnVuY3Rpb24gbGluZVJhZGlhbChsKSB7XG4gICAgdmFyIGMgPSBsLmN1cnZlO1xuXG4gICAgbC5hbmdsZSA9IGwueCwgZGVsZXRlIGwueDtcbiAgICBsLnJhZGl1cyA9IGwueSwgZGVsZXRlIGwueTtcblxuICAgIGwuY3VydmUgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBjKGN1cnZlUmFkaWFsKF8pKSA6IGMoKS5fY3VydmU7XG4gICAgfTtcblxuICAgIHJldHVybiBsO1xuICB9XG5cbiAgdmFyIGxpbmVSYWRpYWwkMSA9IGZ1bmN0aW9uIGxpbmVSYWRpYWwkMSgpIHtcbiAgICByZXR1cm4gbGluZVJhZGlhbChsaW5lKCkuY3VydmUoY3VydmVSYWRpYWxMaW5lYXIpKTtcbiAgfTtcblxuICB2YXIgYXJlYVJhZGlhbCA9IGZ1bmN0aW9uIGFyZWFSYWRpYWwoKSB7XG4gICAgdmFyIGEgPSBhcmVhJDIoKS5jdXJ2ZShjdXJ2ZVJhZGlhbExpbmVhciksXG4gICAgICAgIGMgPSBhLmN1cnZlLFxuICAgICAgICB4MCA9IGEubGluZVgwLFxuICAgICAgICB4MSA9IGEubGluZVgxLFxuICAgICAgICB5MCA9IGEubGluZVkwLFxuICAgICAgICB5MSA9IGEubGluZVkxO1xuXG4gICAgYS5hbmdsZSA9IGEueCwgZGVsZXRlIGEueDtcbiAgICBhLnN0YXJ0QW5nbGUgPSBhLngwLCBkZWxldGUgYS54MDtcbiAgICBhLmVuZEFuZ2xlID0gYS54MSwgZGVsZXRlIGEueDE7XG4gICAgYS5yYWRpdXMgPSBhLnksIGRlbGV0ZSBhLnk7XG4gICAgYS5pbm5lclJhZGl1cyA9IGEueTAsIGRlbGV0ZSBhLnkwO1xuICAgIGEub3V0ZXJSYWRpdXMgPSBhLnkxLCBkZWxldGUgYS55MTtcbiAgICBhLmxpbmVTdGFydEFuZ2xlID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGxpbmVSYWRpYWwoeDAoKSk7XG4gICAgfSwgZGVsZXRlIGEubGluZVgwO1xuICAgIGEubGluZUVuZEFuZ2xlID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGxpbmVSYWRpYWwoeDEoKSk7XG4gICAgfSwgZGVsZXRlIGEubGluZVgxO1xuICAgIGEubGluZUlubmVyUmFkaXVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGxpbmVSYWRpYWwoeTAoKSk7XG4gICAgfSwgZGVsZXRlIGEubGluZVkwO1xuICAgIGEubGluZU91dGVyUmFkaXVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGxpbmVSYWRpYWwoeTEoKSk7XG4gICAgfSwgZGVsZXRlIGEubGluZVkxO1xuXG4gICAgYS5jdXJ2ZSA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IGMoY3VydmVSYWRpYWwoXykpIDogYygpLl9jdXJ2ZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGE7XG4gIH07XG5cbiAgdmFyIHBvaW50UmFkaWFsID0gZnVuY3Rpb24gcG9pbnRSYWRpYWwoeCwgeSkge1xuICAgIHJldHVybiBbKHkgPSAreSkgKiBNYXRoLmNvcyh4IC09IE1hdGguUEkgLyAyKSwgeSAqIE1hdGguc2luKHgpXTtcbiAgfTtcblxuICB2YXIgc2xpY2UkNiA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcblxuICBmdW5jdGlvbiBsaW5rU291cmNlKGQpIHtcbiAgICByZXR1cm4gZC5zb3VyY2U7XG4gIH1cblxuICBmdW5jdGlvbiBsaW5rVGFyZ2V0KGQpIHtcbiAgICByZXR1cm4gZC50YXJnZXQ7XG4gIH1cblxuICBmdW5jdGlvbiBsaW5rJDIoY3VydmUpIHtcbiAgICB2YXIgc291cmNlID0gbGlua1NvdXJjZSxcbiAgICAgICAgdGFyZ2V0ID0gbGlua1RhcmdldCxcbiAgICAgICAgeCA9IHgkMyxcbiAgICAgICAgeSA9IHkkMyxcbiAgICAgICAgY29udGV4dCA9IG51bGw7XG5cbiAgICBmdW5jdGlvbiBsaW5rKCkge1xuICAgICAgdmFyIGJ1ZmZlcixcbiAgICAgICAgICBhcmd2ID0gc2xpY2UkNi5jYWxsKGFyZ3VtZW50cyksXG4gICAgICAgICAgcyA9IHNvdXJjZS5hcHBseSh0aGlzLCBhcmd2KSxcbiAgICAgICAgICB0ID0gdGFyZ2V0LmFwcGx5KHRoaXMsIGFyZ3YpO1xuICAgICAgaWYgKCFjb250ZXh0KSBjb250ZXh0ID0gYnVmZmVyID0gcGF0aCgpO1xuICAgICAgY3VydmUoY29udGV4dCwgK3guYXBwbHkodGhpcywgKGFyZ3ZbMF0gPSBzLCBhcmd2KSksICt5LmFwcGx5KHRoaXMsIGFyZ3YpLCAreC5hcHBseSh0aGlzLCAoYXJndlswXSA9IHQsIGFyZ3YpKSwgK3kuYXBwbHkodGhpcywgYXJndikpO1xuICAgICAgaWYgKGJ1ZmZlcikgcmV0dXJuIGNvbnRleHQgPSBudWxsLCBidWZmZXIgKyBcIlwiIHx8IG51bGw7XG4gICAgfVxuXG4gICAgbGluay5zb3VyY2UgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc291cmNlID0gXywgbGluaykgOiBzb3VyY2U7XG4gICAgfTtcblxuICAgIGxpbmsudGFyZ2V0ID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRhcmdldCA9IF8sIGxpbmspIDogdGFyZ2V0O1xuICAgIH07XG5cbiAgICBsaW5rLnggPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMTAoK18pLCBsaW5rKSA6IHg7XG4gICAgfTtcblxuICAgIGxpbmsueSA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxMCgrXyksIGxpbmspIDogeTtcbiAgICB9O1xuXG4gICAgbGluay5jb250ZXh0ID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNvbnRleHQgPSBfID09IG51bGwgPyBudWxsIDogXywgbGluaykgOiBjb250ZXh0O1xuICAgIH07XG5cbiAgICByZXR1cm4gbGluaztcbiAgfVxuXG4gIGZ1bmN0aW9uIGN1cnZlSG9yaXpvbnRhbChjb250ZXh0LCB4MCwgeTAsIHgxLCB5MSkge1xuICAgIGNvbnRleHQubW92ZVRvKHgwLCB5MCk7XG4gICAgY29udGV4dC5iZXppZXJDdXJ2ZVRvKHgwID0gKHgwICsgeDEpIC8gMiwgeTAsIHgwLCB5MSwgeDEsIHkxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGN1cnZlVmVydGljYWwoY29udGV4dCwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgICBjb250ZXh0Lm1vdmVUbyh4MCwgeTApO1xuICAgIGNvbnRleHQuYmV6aWVyQ3VydmVUbyh4MCwgeTAgPSAoeTAgKyB5MSkgLyAyLCB4MSwgeTAsIHgxLCB5MSk7XG4gIH1cblxuICBmdW5jdGlvbiBjdXJ2ZVJhZGlhbCQxKGNvbnRleHQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gICAgdmFyIHAwID0gcG9pbnRSYWRpYWwoeDAsIHkwKSxcbiAgICAgICAgcDEgPSBwb2ludFJhZGlhbCh4MCwgeTAgPSAoeTAgKyB5MSkgLyAyKSxcbiAgICAgICAgcDIgPSBwb2ludFJhZGlhbCh4MSwgeTApLFxuICAgICAgICBwMyA9IHBvaW50UmFkaWFsKHgxLCB5MSk7XG4gICAgY29udGV4dC5tb3ZlVG8ocDBbMF0sIHAwWzFdKTtcbiAgICBjb250ZXh0LmJlemllckN1cnZlVG8ocDFbMF0sIHAxWzFdLCBwMlswXSwgcDJbMV0sIHAzWzBdLCBwM1sxXSk7XG4gIH1cblxuICBmdW5jdGlvbiBsaW5rSG9yaXpvbnRhbCgpIHtcbiAgICByZXR1cm4gbGluayQyKGN1cnZlSG9yaXpvbnRhbCk7XG4gIH1cblxuICBmdW5jdGlvbiBsaW5rVmVydGljYWwoKSB7XG4gICAgcmV0dXJuIGxpbmskMihjdXJ2ZVZlcnRpY2FsKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpbmtSYWRpYWwoKSB7XG4gICAgdmFyIGwgPSBsaW5rJDIoY3VydmVSYWRpYWwkMSk7XG4gICAgbC5hbmdsZSA9IGwueCwgZGVsZXRlIGwueDtcbiAgICBsLnJhZGl1cyA9IGwueSwgZGVsZXRlIGwueTtcbiAgICByZXR1cm4gbDtcbiAgfVxuXG4gIHZhciBjaXJjbGUkMiA9IHtcbiAgICBkcmF3OiBmdW5jdGlvbiBkcmF3KGNvbnRleHQsIHNpemUpIHtcbiAgICAgIHZhciByID0gTWF0aC5zcXJ0KHNpemUgLyBwaSQ0KTtcbiAgICAgIGNvbnRleHQubW92ZVRvKHIsIDApO1xuICAgICAgY29udGV4dC5hcmMoMCwgMCwgciwgMCwgdGF1JDQpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgY3Jvc3MkMiA9IHtcbiAgICBkcmF3OiBmdW5jdGlvbiBkcmF3KGNvbnRleHQsIHNpemUpIHtcbiAgICAgIHZhciByID0gTWF0aC5zcXJ0KHNpemUgLyA1KSAvIDI7XG4gICAgICBjb250ZXh0Lm1vdmVUbygtMyAqIHIsIC1yKTtcbiAgICAgIGNvbnRleHQubGluZVRvKC1yLCAtcik7XG4gICAgICBjb250ZXh0LmxpbmVUbygtciwgLTMgKiByKTtcbiAgICAgIGNvbnRleHQubGluZVRvKHIsIC0zICogcik7XG4gICAgICBjb250ZXh0LmxpbmVUbyhyLCAtcik7XG4gICAgICBjb250ZXh0LmxpbmVUbygzICogciwgLXIpO1xuICAgICAgY29udGV4dC5saW5lVG8oMyAqIHIsIHIpO1xuICAgICAgY29udGV4dC5saW5lVG8ociwgcik7XG4gICAgICBjb250ZXh0LmxpbmVUbyhyLCAzICogcik7XG4gICAgICBjb250ZXh0LmxpbmVUbygtciwgMyAqIHIpO1xuICAgICAgY29udGV4dC5saW5lVG8oLXIsIHIpO1xuICAgICAgY29udGV4dC5saW5lVG8oLTMgKiByLCByKTtcbiAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciB0YW4zMCA9IE1hdGguc3FydCgxIC8gMyk7XG4gIHZhciB0YW4zMF8yID0gdGFuMzAgKiAyO1xuXG4gIHZhciBkaWFtb25kID0ge1xuICAgIGRyYXc6IGZ1bmN0aW9uIGRyYXcoY29udGV4dCwgc2l6ZSkge1xuICAgICAgdmFyIHkgPSBNYXRoLnNxcnQoc2l6ZSAvIHRhbjMwXzIpLFxuICAgICAgICAgIHggPSB5ICogdGFuMzA7XG4gICAgICBjb250ZXh0Lm1vdmVUbygwLCAteSk7XG4gICAgICBjb250ZXh0LmxpbmVUbyh4LCAwKTtcbiAgICAgIGNvbnRleHQubGluZVRvKDAsIHkpO1xuICAgICAgY29udGV4dC5saW5lVG8oLXgsIDApO1xuICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGthID0gMC44OTA4MTMwOTE1MjkyODUyMjgxMDtcbiAgdmFyIGtyID0gTWF0aC5zaW4ocGkkNCAvIDEwKSAvIE1hdGguc2luKDcgKiBwaSQ0IC8gMTApO1xuICB2YXIga3ggPSBNYXRoLnNpbih0YXUkNCAvIDEwKSAqIGtyO1xuICB2YXIga3kgPSAtTWF0aC5jb3ModGF1JDQgLyAxMCkgKiBrcjtcblxuICB2YXIgc3RhciA9IHtcbiAgICBkcmF3OiBmdW5jdGlvbiBkcmF3KGNvbnRleHQsIHNpemUpIHtcbiAgICAgIHZhciByID0gTWF0aC5zcXJ0KHNpemUgKiBrYSksXG4gICAgICAgICAgeCA9IGt4ICogcixcbiAgICAgICAgICB5ID0ga3kgKiByO1xuICAgICAgY29udGV4dC5tb3ZlVG8oMCwgLXIpO1xuICAgICAgY29udGV4dC5saW5lVG8oeCwgeSk7XG4gICAgICBmb3IgKHZhciBpID0gMTsgaSA8IDU7ICsraSkge1xuICAgICAgICB2YXIgYSA9IHRhdSQ0ICogaSAvIDUsXG4gICAgICAgICAgICBjID0gTWF0aC5jb3MoYSksXG4gICAgICAgICAgICBzID0gTWF0aC5zaW4oYSk7XG4gICAgICAgIGNvbnRleHQubGluZVRvKHMgKiByLCAtYyAqIHIpO1xuICAgICAgICBjb250ZXh0LmxpbmVUbyhjICogeCAtIHMgKiB5LCBzICogeCArIGMgKiB5KTtcbiAgICAgIH1cbiAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBzcXVhcmUgPSB7XG4gICAgZHJhdzogZnVuY3Rpb24gZHJhdyhjb250ZXh0LCBzaXplKSB7XG4gICAgICB2YXIgdyA9IE1hdGguc3FydChzaXplKSxcbiAgICAgICAgICB4ID0gLXcgLyAyO1xuICAgICAgY29udGV4dC5yZWN0KHgsIHgsIHcsIHcpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgc3FydDMgPSBNYXRoLnNxcnQoMyk7XG5cbiAgdmFyIHRyaWFuZ2xlID0ge1xuICAgIGRyYXc6IGZ1bmN0aW9uIGRyYXcoY29udGV4dCwgc2l6ZSkge1xuICAgICAgdmFyIHkgPSAtTWF0aC5zcXJ0KHNpemUgLyAoc3FydDMgKiAzKSk7XG4gICAgICBjb250ZXh0Lm1vdmVUbygwLCB5ICogMik7XG4gICAgICBjb250ZXh0LmxpbmVUbygtc3FydDMgKiB5LCAteSk7XG4gICAgICBjb250ZXh0LmxpbmVUbyhzcXJ0MyAqIHksIC15KTtcbiAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBjID0gLTAuNTtcbiAgdmFyIHMgPSBNYXRoLnNxcnQoMykgLyAyO1xuICB2YXIgayA9IDEgLyBNYXRoLnNxcnQoMTIpO1xuICB2YXIgYSA9IChrIC8gMiArIDEpICogMztcblxuICB2YXIgd3llID0ge1xuICAgIGRyYXc6IGZ1bmN0aW9uIGRyYXcoY29udGV4dCwgc2l6ZSkge1xuICAgICAgdmFyIHIgPSBNYXRoLnNxcnQoc2l6ZSAvIGEpLFxuICAgICAgICAgIHgwID0gciAvIDIsXG4gICAgICAgICAgeTAgPSByICogayxcbiAgICAgICAgICB4MSA9IHgwLFxuICAgICAgICAgIHkxID0gciAqIGsgKyByLFxuICAgICAgICAgIHgyID0gLXgxLFxuICAgICAgICAgIHkyID0geTE7XG4gICAgICBjb250ZXh0Lm1vdmVUbyh4MCwgeTApO1xuICAgICAgY29udGV4dC5saW5lVG8oeDEsIHkxKTtcbiAgICAgIGNvbnRleHQubGluZVRvKHgyLCB5Mik7XG4gICAgICBjb250ZXh0LmxpbmVUbyhjICogeDAgLSBzICogeTAsIHMgKiB4MCArIGMgKiB5MCk7XG4gICAgICBjb250ZXh0LmxpbmVUbyhjICogeDEgLSBzICogeTEsIHMgKiB4MSArIGMgKiB5MSk7XG4gICAgICBjb250ZXh0LmxpbmVUbyhjICogeDIgLSBzICogeTIsIHMgKiB4MiArIGMgKiB5Mik7XG4gICAgICBjb250ZXh0LmxpbmVUbyhjICogeDAgKyBzICogeTAsIGMgKiB5MCAtIHMgKiB4MCk7XG4gICAgICBjb250ZXh0LmxpbmVUbyhjICogeDEgKyBzICogeTEsIGMgKiB5MSAtIHMgKiB4MSk7XG4gICAgICBjb250ZXh0LmxpbmVUbyhjICogeDIgKyBzICogeTIsIGMgKiB5MiAtIHMgKiB4Mik7XG4gICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgc3ltYm9scyA9IFtjaXJjbGUkMiwgY3Jvc3MkMiwgZGlhbW9uZCwgc3F1YXJlLCBzdGFyLCB0cmlhbmdsZSwgd3llXTtcblxuICB2YXIgc3ltYm9sID0gZnVuY3Rpb24gc3ltYm9sKCkge1xuICAgIHZhciB0eXBlID0gY29uc3RhbnQkMTAoY2lyY2xlJDIpLFxuICAgICAgICBzaXplID0gY29uc3RhbnQkMTAoNjQpLFxuICAgICAgICBjb250ZXh0ID0gbnVsbDtcblxuICAgIGZ1bmN0aW9uIHN5bWJvbCgpIHtcbiAgICAgIHZhciBidWZmZXI7XG4gICAgICBpZiAoIWNvbnRleHQpIGNvbnRleHQgPSBidWZmZXIgPSBwYXRoKCk7XG4gICAgICB0eXBlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykuZHJhdyhjb250ZXh0LCArc2l6ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICAgIGlmIChidWZmZXIpIHJldHVybiBjb250ZXh0ID0gbnVsbCwgYnVmZmVyICsgXCJcIiB8fCBudWxsO1xuICAgIH1cblxuICAgIHN5bWJvbC50eXBlID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHR5cGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEwKF8pLCBzeW1ib2wpIDogdHlwZTtcbiAgICB9O1xuXG4gICAgc3ltYm9sLnNpemUgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc2l6ZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMTAoK18pLCBzeW1ib2wpIDogc2l6ZTtcbiAgICB9O1xuXG4gICAgc3ltYm9sLmNvbnRleHQgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY29udGV4dCA9IF8gPT0gbnVsbCA/IG51bGwgOiBfLCBzeW1ib2wpIDogY29udGV4dDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHN5bWJvbDtcbiAgfTtcblxuICB2YXIgbm9vcCQyID0gZnVuY3Rpb24gbm9vcCQyKCkge307XG5cbiAgZnVuY3Rpb24gcG9pbnQkMih0aGF0LCB4LCB5KSB7XG4gICAgdGhhdC5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKCgyICogdGhhdC5feDAgKyB0aGF0Ll94MSkgLyAzLCAoMiAqIHRoYXQuX3kwICsgdGhhdC5feTEpIC8gMywgKHRoYXQuX3gwICsgMiAqIHRoYXQuX3gxKSAvIDMsICh0aGF0Ll95MCArIDIgKiB0aGF0Ll95MSkgLyAzLCAodGhhdC5feDAgKyA0ICogdGhhdC5feDEgKyB4KSAvIDYsICh0aGF0Ll95MCArIDQgKiB0aGF0Ll95MSArIHkpIC8gNik7XG4gIH1cblxuICBmdW5jdGlvbiBCYXNpcyhjb250ZXh0KSB7XG4gICAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gIH1cblxuICBCYXNpcy5wcm90b3R5cGUgPSB7XG4gICAgYXJlYVN0YXJ0OiBmdW5jdGlvbiBhcmVhU3RhcnQoKSB7XG4gICAgICB0aGlzLl9saW5lID0gMDtcbiAgICB9LFxuICAgIGFyZWFFbmQ6IGZ1bmN0aW9uIGFyZWFFbmQoKSB7XG4gICAgICB0aGlzLl9saW5lID0gTmFOO1xuICAgIH0sXG4gICAgbGluZVN0YXJ0OiBmdW5jdGlvbiBsaW5lU3RhcnQoKSB7XG4gICAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feTAgPSB0aGlzLl95MSA9IE5hTjtcbiAgICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgICB9LFxuICAgIGxpbmVFbmQ6IGZ1bmN0aW9uIGxpbmVFbmQoKSB7XG4gICAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBwb2ludCQyKHRoaXMsIHRoaXMuX3gxLCB0aGlzLl95MSk7IC8vIHByb2NlZWRcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gxLCB0aGlzLl95MSk7YnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fbGluZSB8fCB0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICAgIH0sXG4gICAgcG9pbnQ6IGZ1bmN0aW9uIHBvaW50KHgsIHkpIHtcbiAgICAgIHggPSAreCwgeSA9ICt5O1xuICAgICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgdGhpcy5fcG9pbnQgPSAxO3RoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpO2JyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgdGhpcy5fcG9pbnQgPSAyO2JyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgdGhpcy5fcG9pbnQgPSAzO3RoaXMuX2NvbnRleHQubGluZVRvKCg1ICogdGhpcy5feDAgKyB0aGlzLl94MSkgLyA2LCAoNSAqIHRoaXMuX3kwICsgdGhpcy5feTEpIC8gNik7IC8vIHByb2NlZWRcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBwb2ludCQyKHRoaXMsIHgsIHkpO2JyZWFrO1xuICAgICAgfVxuICAgICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB4O1xuICAgICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB5O1xuICAgIH1cbiAgfTtcblxuICB2YXIgYmFzaXMkMiA9IGZ1bmN0aW9uIGJhc2lzJDIoY29udGV4dCkge1xuICAgIHJldHVybiBuZXcgQmFzaXMoY29udGV4dCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gQmFzaXNDbG9zZWQoY29udGV4dCkge1xuICAgIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB9XG5cbiAgQmFzaXNDbG9zZWQucHJvdG90eXBlID0ge1xuICAgIGFyZWFTdGFydDogbm9vcCQyLFxuICAgIGFyZWFFbmQ6IG5vb3AkMixcbiAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uIGxpbmVTdGFydCgpIHtcbiAgICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPSB0aGlzLl94MiA9IHRoaXMuX3gzID0gdGhpcy5feDQgPSB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSB0aGlzLl95MyA9IHRoaXMuX3k0ID0gTmFOO1xuICAgICAgdGhpcy5fcG9pbnQgPSAwO1xuICAgIH0sXG4gICAgbGluZUVuZDogZnVuY3Rpb24gbGluZUVuZCgpIHtcbiAgICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3gyLCB0aGlzLl95Mik7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5tb3ZlVG8oKHRoaXMuX3gyICsgMiAqIHRoaXMuX3gzKSAvIDMsICh0aGlzLl95MiArIDIgKiB0aGlzLl95MykgLyAzKTtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKCh0aGlzLl94MyArIDIgKiB0aGlzLl94MikgLyAzLCAodGhpcy5feTMgKyAyICogdGhpcy5feTIpIC8gMyk7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94MiwgdGhpcy5feTIpO1xuICAgICAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94NCwgdGhpcy5feTQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgcG9pbnQ6IGZ1bmN0aW9uIHBvaW50KHgsIHkpIHtcbiAgICAgIHggPSAreCwgeSA9ICt5O1xuICAgICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgdGhpcy5fcG9pbnQgPSAxO3RoaXMuX3gyID0geCwgdGhpcy5feTIgPSB5O2JyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgdGhpcy5fcG9pbnQgPSAyO3RoaXMuX3gzID0geCwgdGhpcy5feTMgPSB5O2JyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgdGhpcy5fcG9pbnQgPSAzO3RoaXMuX3g0ID0geCwgdGhpcy5feTQgPSB5O3RoaXMuX2NvbnRleHQubW92ZVRvKCh0aGlzLl94MCArIDQgKiB0aGlzLl94MSArIHgpIC8gNiwgKHRoaXMuX3kwICsgNCAqIHRoaXMuX3kxICsgeSkgLyA2KTticmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBwb2ludCQyKHRoaXMsIHgsIHkpO2JyZWFrO1xuICAgICAgfVxuICAgICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB4O1xuICAgICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB5O1xuICAgIH1cbiAgfTtcblxuICB2YXIgYmFzaXNDbG9zZWQkMSA9IGZ1bmN0aW9uIGJhc2lzQ2xvc2VkJDEoY29udGV4dCkge1xuICAgIHJldHVybiBuZXcgQmFzaXNDbG9zZWQoY29udGV4dCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gQmFzaXNPcGVuKGNvbnRleHQpIHtcbiAgICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgfVxuXG4gIEJhc2lzT3Blbi5wcm90b3R5cGUgPSB7XG4gICAgYXJlYVN0YXJ0OiBmdW5jdGlvbiBhcmVhU3RhcnQoKSB7XG4gICAgICB0aGlzLl9saW5lID0gMDtcbiAgICB9LFxuICAgIGFyZWFFbmQ6IGZ1bmN0aW9uIGFyZWFFbmQoKSB7XG4gICAgICB0aGlzLl9saW5lID0gTmFOO1xuICAgIH0sXG4gICAgbGluZVN0YXJ0OiBmdW5jdGlvbiBsaW5lU3RhcnQoKSB7XG4gICAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feTAgPSB0aGlzLl95MSA9IE5hTjtcbiAgICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgICB9LFxuICAgIGxpbmVFbmQ6IGZ1bmN0aW9uIGxpbmVFbmQoKSB7XG4gICAgICBpZiAodGhpcy5fbGluZSB8fCB0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAzKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICAgIH0sXG4gICAgcG9pbnQ6IGZ1bmN0aW9uIHBvaW50KHgsIHkpIHtcbiAgICAgIHggPSAreCwgeSA9ICt5O1xuICAgICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgdGhpcy5fcG9pbnQgPSAxO2JyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgdGhpcy5fcG9pbnQgPSAyO2JyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgdGhpcy5fcG9pbnQgPSAzO3ZhciB4MCA9ICh0aGlzLl94MCArIDQgKiB0aGlzLl94MSArIHgpIC8gNixcbiAgICAgICAgICAgICAgeTAgPSAodGhpcy5feTAgKyA0ICogdGhpcy5feTEgKyB5KSAvIDY7dGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgwLCB5MCkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4MCwgeTApO2JyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgdGhpcy5fcG9pbnQgPSA0OyAvLyBwcm9jZWVkXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcG9pbnQkMih0aGlzLCB4LCB5KTticmVhaztcbiAgICAgIH1cbiAgICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0geDtcbiAgICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0geTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGJhc2lzT3BlbiA9IGZ1bmN0aW9uIGJhc2lzT3Blbihjb250ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBCYXNpc09wZW4oY29udGV4dCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gQnVuZGxlKGNvbnRleHQsIGJldGEpIHtcbiAgICB0aGlzLl9iYXNpcyA9IG5ldyBCYXNpcyhjb250ZXh0KTtcbiAgICB0aGlzLl9iZXRhID0gYmV0YTtcbiAgfVxuXG4gIEJ1bmRsZS5wcm90b3R5cGUgPSB7XG4gICAgbGluZVN0YXJ0OiBmdW5jdGlvbiBsaW5lU3RhcnQoKSB7XG4gICAgICB0aGlzLl94ID0gW107XG4gICAgICB0aGlzLl95ID0gW107XG4gICAgICB0aGlzLl9iYXNpcy5saW5lU3RhcnQoKTtcbiAgICB9LFxuICAgIGxpbmVFbmQ6IGZ1bmN0aW9uIGxpbmVFbmQoKSB7XG4gICAgICB2YXIgeCA9IHRoaXMuX3gsXG4gICAgICAgICAgeSA9IHRoaXMuX3ksXG4gICAgICAgICAgaiA9IHgubGVuZ3RoIC0gMTtcblxuICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgIHZhciB4MCA9IHhbMF0sXG4gICAgICAgICAgICB5MCA9IHlbMF0sXG4gICAgICAgICAgICBkeCA9IHhbal0gLSB4MCxcbiAgICAgICAgICAgIGR5ID0geVtqXSAtIHkwLFxuICAgICAgICAgICAgaSA9IC0xLFxuICAgICAgICAgICAgdDtcblxuICAgICAgICB3aGlsZSAoKytpIDw9IGopIHtcbiAgICAgICAgICB0ID0gaSAvIGo7XG4gICAgICAgICAgdGhpcy5fYmFzaXMucG9pbnQodGhpcy5fYmV0YSAqIHhbaV0gKyAoMSAtIHRoaXMuX2JldGEpICogKHgwICsgdCAqIGR4KSwgdGhpcy5fYmV0YSAqIHlbaV0gKyAoMSAtIHRoaXMuX2JldGEpICogKHkwICsgdCAqIGR5KSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5feCA9IHRoaXMuX3kgPSBudWxsO1xuICAgICAgdGhpcy5fYmFzaXMubGluZUVuZCgpO1xuICAgIH0sXG4gICAgcG9pbnQ6IGZ1bmN0aW9uIHBvaW50KHgsIHkpIHtcbiAgICAgIHRoaXMuX3gucHVzaCgreCk7XG4gICAgICB0aGlzLl95LnB1c2goK3kpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgYnVuZGxlID0gZnVuY3Rpb24gY3VzdG9tKGJldGEpIHtcblxuICAgIGZ1bmN0aW9uIGJ1bmRsZShjb250ZXh0KSB7XG4gICAgICByZXR1cm4gYmV0YSA9PT0gMSA/IG5ldyBCYXNpcyhjb250ZXh0KSA6IG5ldyBCdW5kbGUoY29udGV4dCwgYmV0YSk7XG4gICAgfVxuXG4gICAgYnVuZGxlLmJldGEgPSBmdW5jdGlvbiAoYmV0YSkge1xuICAgICAgcmV0dXJuIGN1c3RvbSgrYmV0YSk7XG4gICAgfTtcblxuICAgIHJldHVybiBidW5kbGU7XG4gIH0oMC44NSk7XG5cbiAgZnVuY3Rpb24gcG9pbnQkMyh0aGF0LCB4LCB5KSB7XG4gICAgdGhhdC5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKHRoYXQuX3gxICsgdGhhdC5fayAqICh0aGF0Ll94MiAtIHRoYXQuX3gwKSwgdGhhdC5feTEgKyB0aGF0Ll9rICogKHRoYXQuX3kyIC0gdGhhdC5feTApLCB0aGF0Ll94MiArIHRoYXQuX2sgKiAodGhhdC5feDEgLSB4KSwgdGhhdC5feTIgKyB0aGF0Ll9rICogKHRoYXQuX3kxIC0geSksIHRoYXQuX3gyLCB0aGF0Ll95Mik7XG4gIH1cblxuICBmdW5jdGlvbiBDYXJkaW5hbChjb250ZXh0LCB0ZW5zaW9uKSB7XG4gICAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gICAgdGhpcy5fayA9ICgxIC0gdGVuc2lvbikgLyA2O1xuICB9XG5cbiAgQ2FyZGluYWwucHJvdG90eXBlID0ge1xuICAgIGFyZWFTdGFydDogZnVuY3Rpb24gYXJlYVN0YXJ0KCkge1xuICAgICAgdGhpcy5fbGluZSA9IDA7XG4gICAgfSxcbiAgICBhcmVhRW5kOiBmdW5jdGlvbiBhcmVhRW5kKCkge1xuICAgICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgICB9LFxuICAgIGxpbmVTdGFydDogZnVuY3Rpb24gbGluZVN0YXJ0KCkge1xuICAgICAgdGhpcy5feDAgPSB0aGlzLl94MSA9IHRoaXMuX3gyID0gdGhpcy5feTAgPSB0aGlzLl95MSA9IHRoaXMuX3kyID0gTmFOO1xuICAgICAgdGhpcy5fcG9pbnQgPSAwO1xuICAgIH0sXG4gICAgbGluZUVuZDogZnVuY3Rpb24gbGluZUVuZCgpIHtcbiAgICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gyLCB0aGlzLl95Mik7YnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBwb2ludCQzKHRoaXMsIHRoaXMuX3gxLCB0aGlzLl95MSk7YnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fbGluZSB8fCB0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICAgIH0sXG4gICAgcG9pbnQ6IGZ1bmN0aW9uIHBvaW50KHgsIHkpIHtcbiAgICAgIHggPSAreCwgeSA9ICt5O1xuICAgICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgdGhpcy5fcG9pbnQgPSAxO3RoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpO2JyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgdGhpcy5fcG9pbnQgPSAyO3RoaXMuX3gxID0geCwgdGhpcy5feTEgPSB5O2JyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgdGhpcy5fcG9pbnQgPSAzOyAvLyBwcm9jZWVkXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcG9pbnQkMyh0aGlzLCB4LCB5KTticmVhaztcbiAgICAgIH1cbiAgICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0gdGhpcy5feDIsIHRoaXMuX3gyID0geDtcbiAgICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0gdGhpcy5feTIsIHRoaXMuX3kyID0geTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGNhcmRpbmFsID0gZnVuY3Rpb24gY3VzdG9tKHRlbnNpb24pIHtcblxuICAgIGZ1bmN0aW9uIGNhcmRpbmFsKGNvbnRleHQpIHtcbiAgICAgIHJldHVybiBuZXcgQ2FyZGluYWwoY29udGV4dCwgdGVuc2lvbik7XG4gICAgfVxuXG4gICAgY2FyZGluYWwudGVuc2lvbiA9IGZ1bmN0aW9uICh0ZW5zaW9uKSB7XG4gICAgICByZXR1cm4gY3VzdG9tKCt0ZW5zaW9uKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGNhcmRpbmFsO1xuICB9KDApO1xuXG4gIGZ1bmN0aW9uIENhcmRpbmFsQ2xvc2VkKGNvbnRleHQsIHRlbnNpb24pIHtcbiAgICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgICB0aGlzLl9rID0gKDEgLSB0ZW5zaW9uKSAvIDY7XG4gIH1cblxuICBDYXJkaW5hbENsb3NlZC5wcm90b3R5cGUgPSB7XG4gICAgYXJlYVN0YXJ0OiBub29wJDIsXG4gICAgYXJlYUVuZDogbm9vcCQyLFxuICAgIGxpbmVTdGFydDogZnVuY3Rpb24gbGluZVN0YXJ0KCkge1xuICAgICAgdGhpcy5feDAgPSB0aGlzLl94MSA9IHRoaXMuX3gyID0gdGhpcy5feDMgPSB0aGlzLl94NCA9IHRoaXMuX3g1ID0gdGhpcy5feTAgPSB0aGlzLl95MSA9IHRoaXMuX3kyID0gdGhpcy5feTMgPSB0aGlzLl95NCA9IHRoaXMuX3k1ID0gTmFOO1xuICAgICAgdGhpcy5fcG9pbnQgPSAwO1xuICAgIH0sXG4gICAgbGluZUVuZDogZnVuY3Rpb24gbGluZUVuZCgpIHtcbiAgICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3gzLCB0aGlzLl95Myk7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDMsIHRoaXMuX3kzKTtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3gzLCB0aGlzLl95Myk7XG4gICAgICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3g0LCB0aGlzLl95NCk7XG4gICAgICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3g1LCB0aGlzLl95NSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBwb2ludDogZnVuY3Rpb24gcG9pbnQoeCwgeSkge1xuICAgICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICB0aGlzLl9wb2ludCA9IDE7dGhpcy5feDMgPSB4LCB0aGlzLl95MyA9IHk7YnJlYWs7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICB0aGlzLl9wb2ludCA9IDI7dGhpcy5fY29udGV4dC5tb3ZlVG8odGhpcy5feDQgPSB4LCB0aGlzLl95NCA9IHkpO2JyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgdGhpcy5fcG9pbnQgPSAzO3RoaXMuX3g1ID0geCwgdGhpcy5feTUgPSB5O2JyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHBvaW50JDModGhpcywgeCwgeSk7YnJlYWs7XG4gICAgICB9XG4gICAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHRoaXMuX3gyLCB0aGlzLl94MiA9IHg7XG4gICAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHRoaXMuX3kyLCB0aGlzLl95MiA9IHk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBjYXJkaW5hbENsb3NlZCA9IGZ1bmN0aW9uIGN1c3RvbSh0ZW5zaW9uKSB7XG5cbiAgICBmdW5jdGlvbiBjYXJkaW5hbCQkMShjb250ZXh0KSB7XG4gICAgICByZXR1cm4gbmV3IENhcmRpbmFsQ2xvc2VkKGNvbnRleHQsIHRlbnNpb24pO1xuICAgIH1cblxuICAgIGNhcmRpbmFsJCQxLnRlbnNpb24gPSBmdW5jdGlvbiAodGVuc2lvbikge1xuICAgICAgcmV0dXJuIGN1c3RvbSgrdGVuc2lvbik7XG4gICAgfTtcblxuICAgIHJldHVybiBjYXJkaW5hbCQkMTtcbiAgfSgwKTtcblxuICBmdW5jdGlvbiBDYXJkaW5hbE9wZW4oY29udGV4dCwgdGVuc2lvbikge1xuICAgIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICAgIHRoaXMuX2sgPSAoMSAtIHRlbnNpb24pIC8gNjtcbiAgfVxuXG4gIENhcmRpbmFsT3Blbi5wcm90b3R5cGUgPSB7XG4gICAgYXJlYVN0YXJ0OiBmdW5jdGlvbiBhcmVhU3RhcnQoKSB7XG4gICAgICB0aGlzLl9saW5lID0gMDtcbiAgICB9LFxuICAgIGFyZWFFbmQ6IGZ1bmN0aW9uIGFyZWFFbmQoKSB7XG4gICAgICB0aGlzLl9saW5lID0gTmFOO1xuICAgIH0sXG4gICAgbGluZVN0YXJ0OiBmdW5jdGlvbiBsaW5lU3RhcnQoKSB7XG4gICAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPSB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSBOYU47XG4gICAgICB0aGlzLl9wb2ludCA9IDA7XG4gICAgfSxcbiAgICBsaW5lRW5kOiBmdW5jdGlvbiBsaW5lRW5kKCkge1xuICAgICAgaWYgKHRoaXMuX2xpbmUgfHwgdGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMykgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgICB9LFxuICAgIHBvaW50OiBmdW5jdGlvbiBwb2ludCh4LCB5KSB7XG4gICAgICB4ID0gK3gsIHkgPSAreTtcbiAgICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgIHRoaXMuX3BvaW50ID0gMTticmVhaztcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIHRoaXMuX3BvaW50ID0gMjticmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHRoaXMuX3BvaW50ID0gMzt0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDIsIHRoaXMuX3kyKSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3gyLCB0aGlzLl95Mik7YnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICB0aGlzLl9wb2ludCA9IDQ7IC8vIHByb2NlZWRcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBwb2ludCQzKHRoaXMsIHgsIHkpO2JyZWFrO1xuICAgICAgfVxuICAgICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB0aGlzLl94MiwgdGhpcy5feDIgPSB4O1xuICAgICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB0aGlzLl95MiwgdGhpcy5feTIgPSB5O1xuICAgIH1cbiAgfTtcblxuICB2YXIgY2FyZGluYWxPcGVuID0gZnVuY3Rpb24gY3VzdG9tKHRlbnNpb24pIHtcblxuICAgIGZ1bmN0aW9uIGNhcmRpbmFsJCQxKGNvbnRleHQpIHtcbiAgICAgIHJldHVybiBuZXcgQ2FyZGluYWxPcGVuKGNvbnRleHQsIHRlbnNpb24pO1xuICAgIH1cblxuICAgIGNhcmRpbmFsJCQxLnRlbnNpb24gPSBmdW5jdGlvbiAodGVuc2lvbikge1xuICAgICAgcmV0dXJuIGN1c3RvbSgrdGVuc2lvbik7XG4gICAgfTtcblxuICAgIHJldHVybiBjYXJkaW5hbCQkMTtcbiAgfSgwKTtcblxuICBmdW5jdGlvbiBwb2ludCQ0KHRoYXQsIHgsIHkpIHtcbiAgICB2YXIgeDEgPSB0aGF0Ll94MSxcbiAgICAgICAgeTEgPSB0aGF0Ll95MSxcbiAgICAgICAgeDIgPSB0aGF0Ll94MixcbiAgICAgICAgeTIgPSB0aGF0Ll95MjtcblxuICAgIGlmICh0aGF0Ll9sMDFfYSA+IGVwc2lsb24kMykge1xuICAgICAgdmFyIGEgPSAyICogdGhhdC5fbDAxXzJhICsgMyAqIHRoYXQuX2wwMV9hICogdGhhdC5fbDEyX2EgKyB0aGF0Ll9sMTJfMmEsXG4gICAgICAgICAgbiA9IDMgKiB0aGF0Ll9sMDFfYSAqICh0aGF0Ll9sMDFfYSArIHRoYXQuX2wxMl9hKTtcbiAgICAgIHgxID0gKHgxICogYSAtIHRoYXQuX3gwICogdGhhdC5fbDEyXzJhICsgdGhhdC5feDIgKiB0aGF0Ll9sMDFfMmEpIC8gbjtcbiAgICAgIHkxID0gKHkxICogYSAtIHRoYXQuX3kwICogdGhhdC5fbDEyXzJhICsgdGhhdC5feTIgKiB0aGF0Ll9sMDFfMmEpIC8gbjtcbiAgICB9XG5cbiAgICBpZiAodGhhdC5fbDIzX2EgPiBlcHNpbG9uJDMpIHtcbiAgICAgIHZhciBiID0gMiAqIHRoYXQuX2wyM18yYSArIDMgKiB0aGF0Ll9sMjNfYSAqIHRoYXQuX2wxMl9hICsgdGhhdC5fbDEyXzJhLFxuICAgICAgICAgIG0gPSAzICogdGhhdC5fbDIzX2EgKiAodGhhdC5fbDIzX2EgKyB0aGF0Ll9sMTJfYSk7XG4gICAgICB4MiA9ICh4MiAqIGIgKyB0aGF0Ll94MSAqIHRoYXQuX2wyM18yYSAtIHggKiB0aGF0Ll9sMTJfMmEpIC8gbTtcbiAgICAgIHkyID0gKHkyICogYiArIHRoYXQuX3kxICogdGhhdC5fbDIzXzJhIC0geSAqIHRoYXQuX2wxMl8yYSkgLyBtO1xuICAgIH1cblxuICAgIHRoYXQuX2NvbnRleHQuYmV6aWVyQ3VydmVUbyh4MSwgeTEsIHgyLCB5MiwgdGhhdC5feDIsIHRoYXQuX3kyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIENhdG11bGxSb20oY29udGV4dCwgYWxwaGEpIHtcbiAgICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgICB0aGlzLl9hbHBoYSA9IGFscGhhO1xuICB9XG5cbiAgQ2F0bXVsbFJvbS5wcm90b3R5cGUgPSB7XG4gICAgYXJlYVN0YXJ0OiBmdW5jdGlvbiBhcmVhU3RhcnQoKSB7XG4gICAgICB0aGlzLl9saW5lID0gMDtcbiAgICB9LFxuICAgIGFyZWFFbmQ6IGZ1bmN0aW9uIGFyZWFFbmQoKSB7XG4gICAgICB0aGlzLl9saW5lID0gTmFOO1xuICAgIH0sXG4gICAgbGluZVN0YXJ0OiBmdW5jdGlvbiBsaW5lU3RhcnQoKSB7XG4gICAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPSB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSBOYU47XG4gICAgICB0aGlzLl9sMDFfYSA9IHRoaXMuX2wxMl9hID0gdGhpcy5fbDIzX2EgPSB0aGlzLl9sMDFfMmEgPSB0aGlzLl9sMTJfMmEgPSB0aGlzLl9sMjNfMmEgPSB0aGlzLl9wb2ludCA9IDA7XG4gICAgfSxcbiAgICBsaW5lRW5kOiBmdW5jdGlvbiBsaW5lRW5kKCkge1xuICAgICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDIsIHRoaXMuX3kyKTticmVhaztcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHRoaXMucG9pbnQodGhpcy5feDIsIHRoaXMuX3kyKTticmVhaztcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLl9saW5lIHx8IHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDEpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gICAgfSxcbiAgICBwb2ludDogZnVuY3Rpb24gcG9pbnQoeCwgeSkge1xuICAgICAgeCA9ICt4LCB5ID0gK3k7XG5cbiAgICAgIGlmICh0aGlzLl9wb2ludCkge1xuICAgICAgICB2YXIgeDIzID0gdGhpcy5feDIgLSB4LFxuICAgICAgICAgICAgeTIzID0gdGhpcy5feTIgLSB5O1xuICAgICAgICB0aGlzLl9sMjNfYSA9IE1hdGguc3FydCh0aGlzLl9sMjNfMmEgPSBNYXRoLnBvdyh4MjMgKiB4MjMgKyB5MjMgKiB5MjMsIHRoaXMuX2FscGhhKSk7XG4gICAgICB9XG5cbiAgICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgIHRoaXMuX3BvaW50ID0gMTt0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTticmVhaztcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIHRoaXMuX3BvaW50ID0gMjticmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHRoaXMuX3BvaW50ID0gMzsgLy8gcHJvY2VlZFxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHBvaW50JDQodGhpcywgeCwgeSk7YnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2wwMV9hID0gdGhpcy5fbDEyX2EsIHRoaXMuX2wxMl9hID0gdGhpcy5fbDIzX2E7XG4gICAgICB0aGlzLl9sMDFfMmEgPSB0aGlzLl9sMTJfMmEsIHRoaXMuX2wxMl8yYSA9IHRoaXMuX2wyM18yYTtcbiAgICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0gdGhpcy5feDIsIHRoaXMuX3gyID0geDtcbiAgICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0gdGhpcy5feTIsIHRoaXMuX3kyID0geTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGNhdG11bGxSb20gPSBmdW5jdGlvbiBjdXN0b20oYWxwaGEpIHtcblxuICAgIGZ1bmN0aW9uIGNhdG11bGxSb20oY29udGV4dCkge1xuICAgICAgcmV0dXJuIGFscGhhID8gbmV3IENhdG11bGxSb20oY29udGV4dCwgYWxwaGEpIDogbmV3IENhcmRpbmFsKGNvbnRleHQsIDApO1xuICAgIH1cblxuICAgIGNhdG11bGxSb20uYWxwaGEgPSBmdW5jdGlvbiAoYWxwaGEpIHtcbiAgICAgIHJldHVybiBjdXN0b20oK2FscGhhKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGNhdG11bGxSb207XG4gIH0oMC41KTtcblxuICBmdW5jdGlvbiBDYXRtdWxsUm9tQ2xvc2VkKGNvbnRleHQsIGFscGhhKSB7XG4gICAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gICAgdGhpcy5fYWxwaGEgPSBhbHBoYTtcbiAgfVxuXG4gIENhdG11bGxSb21DbG9zZWQucHJvdG90eXBlID0ge1xuICAgIGFyZWFTdGFydDogbm9vcCQyLFxuICAgIGFyZWFFbmQ6IG5vb3AkMixcbiAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uIGxpbmVTdGFydCgpIHtcbiAgICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPSB0aGlzLl94MiA9IHRoaXMuX3gzID0gdGhpcy5feDQgPSB0aGlzLl94NSA9IHRoaXMuX3kwID0gdGhpcy5feTEgPSB0aGlzLl95MiA9IHRoaXMuX3kzID0gdGhpcy5feTQgPSB0aGlzLl95NSA9IE5hTjtcbiAgICAgIHRoaXMuX2wwMV9hID0gdGhpcy5fbDEyX2EgPSB0aGlzLl9sMjNfYSA9IHRoaXMuX2wwMV8yYSA9IHRoaXMuX2wxMl8yYSA9IHRoaXMuX2wyM18yYSA9IHRoaXMuX3BvaW50ID0gMDtcbiAgICB9LFxuICAgIGxpbmVFbmQ6IGZ1bmN0aW9uIGxpbmVFbmQoKSB7XG4gICAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0Lm1vdmVUbyh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gzLCB0aGlzLl95Myk7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94NCwgdGhpcy5feTQpO1xuICAgICAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94NSwgdGhpcy5feTUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgcG9pbnQ6IGZ1bmN0aW9uIHBvaW50KHgsIHkpIHtcbiAgICAgIHggPSAreCwgeSA9ICt5O1xuXG4gICAgICBpZiAodGhpcy5fcG9pbnQpIHtcbiAgICAgICAgdmFyIHgyMyA9IHRoaXMuX3gyIC0geCxcbiAgICAgICAgICAgIHkyMyA9IHRoaXMuX3kyIC0geTtcbiAgICAgICAgdGhpcy5fbDIzX2EgPSBNYXRoLnNxcnQodGhpcy5fbDIzXzJhID0gTWF0aC5wb3coeDIzICogeDIzICsgeTIzICogeTIzLCB0aGlzLl9hbHBoYSkpO1xuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICB0aGlzLl9wb2ludCA9IDE7dGhpcy5feDMgPSB4LCB0aGlzLl95MyA9IHk7YnJlYWs7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICB0aGlzLl9wb2ludCA9IDI7dGhpcy5fY29udGV4dC5tb3ZlVG8odGhpcy5feDQgPSB4LCB0aGlzLl95NCA9IHkpO2JyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgdGhpcy5fcG9pbnQgPSAzO3RoaXMuX3g1ID0geCwgdGhpcy5feTUgPSB5O2JyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHBvaW50JDQodGhpcywgeCwgeSk7YnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2wwMV9hID0gdGhpcy5fbDEyX2EsIHRoaXMuX2wxMl9hID0gdGhpcy5fbDIzX2E7XG4gICAgICB0aGlzLl9sMDFfMmEgPSB0aGlzLl9sMTJfMmEsIHRoaXMuX2wxMl8yYSA9IHRoaXMuX2wyM18yYTtcbiAgICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0gdGhpcy5feDIsIHRoaXMuX3gyID0geDtcbiAgICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0gdGhpcy5feTIsIHRoaXMuX3kyID0geTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGNhdG11bGxSb21DbG9zZWQgPSBmdW5jdGlvbiBjdXN0b20oYWxwaGEpIHtcblxuICAgIGZ1bmN0aW9uIGNhdG11bGxSb20kJDEoY29udGV4dCkge1xuICAgICAgcmV0dXJuIGFscGhhID8gbmV3IENhdG11bGxSb21DbG9zZWQoY29udGV4dCwgYWxwaGEpIDogbmV3IENhcmRpbmFsQ2xvc2VkKGNvbnRleHQsIDApO1xuICAgIH1cblxuICAgIGNhdG11bGxSb20kJDEuYWxwaGEgPSBmdW5jdGlvbiAoYWxwaGEpIHtcbiAgICAgIHJldHVybiBjdXN0b20oK2FscGhhKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGNhdG11bGxSb20kJDE7XG4gIH0oMC41KTtcblxuICBmdW5jdGlvbiBDYXRtdWxsUm9tT3Blbihjb250ZXh0LCBhbHBoYSkge1xuICAgIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICAgIHRoaXMuX2FscGhhID0gYWxwaGE7XG4gIH1cblxuICBDYXRtdWxsUm9tT3Blbi5wcm90b3R5cGUgPSB7XG4gICAgYXJlYVN0YXJ0OiBmdW5jdGlvbiBhcmVhU3RhcnQoKSB7XG4gICAgICB0aGlzLl9saW5lID0gMDtcbiAgICB9LFxuICAgIGFyZWFFbmQ6IGZ1bmN0aW9uIGFyZWFFbmQoKSB7XG4gICAgICB0aGlzLl9saW5lID0gTmFOO1xuICAgIH0sXG4gICAgbGluZVN0YXJ0OiBmdW5jdGlvbiBsaW5lU3RhcnQoKSB7XG4gICAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPSB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSBOYU47XG4gICAgICB0aGlzLl9sMDFfYSA9IHRoaXMuX2wxMl9hID0gdGhpcy5fbDIzX2EgPSB0aGlzLl9sMDFfMmEgPSB0aGlzLl9sMTJfMmEgPSB0aGlzLl9sMjNfMmEgPSB0aGlzLl9wb2ludCA9IDA7XG4gICAgfSxcbiAgICBsaW5lRW5kOiBmdW5jdGlvbiBsaW5lRW5kKCkge1xuICAgICAgaWYgKHRoaXMuX2xpbmUgfHwgdGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMykgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgICB9LFxuICAgIHBvaW50OiBmdW5jdGlvbiBwb2ludCh4LCB5KSB7XG4gICAgICB4ID0gK3gsIHkgPSAreTtcblxuICAgICAgaWYgKHRoaXMuX3BvaW50KSB7XG4gICAgICAgIHZhciB4MjMgPSB0aGlzLl94MiAtIHgsXG4gICAgICAgICAgICB5MjMgPSB0aGlzLl95MiAtIHk7XG4gICAgICAgIHRoaXMuX2wyM19hID0gTWF0aC5zcXJ0KHRoaXMuX2wyM18yYSA9IE1hdGgucG93KHgyMyAqIHgyMyArIHkyMyAqIHkyMywgdGhpcy5fYWxwaGEpKTtcbiAgICAgIH1cblxuICAgICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgdGhpcy5fcG9pbnQgPSAxO2JyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgdGhpcy5fcG9pbnQgPSAyO2JyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgdGhpcy5fcG9pbnQgPSAzO3RoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MiwgdGhpcy5feTIpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8odGhpcy5feDIsIHRoaXMuX3kyKTticmVhaztcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHRoaXMuX3BvaW50ID0gNDsgLy8gcHJvY2VlZFxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHBvaW50JDQodGhpcywgeCwgeSk7YnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2wwMV9hID0gdGhpcy5fbDEyX2EsIHRoaXMuX2wxMl9hID0gdGhpcy5fbDIzX2E7XG4gICAgICB0aGlzLl9sMDFfMmEgPSB0aGlzLl9sMTJfMmEsIHRoaXMuX2wxMl8yYSA9IHRoaXMuX2wyM18yYTtcbiAgICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0gdGhpcy5feDIsIHRoaXMuX3gyID0geDtcbiAgICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0gdGhpcy5feTIsIHRoaXMuX3kyID0geTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGNhdG11bGxSb21PcGVuID0gZnVuY3Rpb24gY3VzdG9tKGFscGhhKSB7XG5cbiAgICBmdW5jdGlvbiBjYXRtdWxsUm9tJCQxKGNvbnRleHQpIHtcbiAgICAgIHJldHVybiBhbHBoYSA/IG5ldyBDYXRtdWxsUm9tT3Blbihjb250ZXh0LCBhbHBoYSkgOiBuZXcgQ2FyZGluYWxPcGVuKGNvbnRleHQsIDApO1xuICAgIH1cblxuICAgIGNhdG11bGxSb20kJDEuYWxwaGEgPSBmdW5jdGlvbiAoYWxwaGEpIHtcbiAgICAgIHJldHVybiBjdXN0b20oK2FscGhhKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGNhdG11bGxSb20kJDE7XG4gIH0oMC41KTtcblxuICBmdW5jdGlvbiBMaW5lYXJDbG9zZWQoY29udGV4dCkge1xuICAgIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB9XG5cbiAgTGluZWFyQ2xvc2VkLnByb3RvdHlwZSA9IHtcbiAgICBhcmVhU3RhcnQ6IG5vb3AkMixcbiAgICBhcmVhRW5kOiBub29wJDIsXG4gICAgbGluZVN0YXJ0OiBmdW5jdGlvbiBsaW5lU3RhcnQoKSB7XG4gICAgICB0aGlzLl9wb2ludCA9IDA7XG4gICAgfSxcbiAgICBsaW5lRW5kOiBmdW5jdGlvbiBsaW5lRW5kKCkge1xuICAgICAgaWYgKHRoaXMuX3BvaW50KSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIH0sXG4gICAgcG9pbnQ6IGZ1bmN0aW9uIHBvaW50KHgsIHkpIHtcbiAgICAgIHggPSAreCwgeSA9ICt5O1xuICAgICAgaWYgKHRoaXMuX3BvaW50KSB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KTtlbHNlIHRoaXMuX3BvaW50ID0gMSwgdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBsaW5lYXJDbG9zZWQgPSBmdW5jdGlvbiBsaW5lYXJDbG9zZWQoY29udGV4dCkge1xuICAgIHJldHVybiBuZXcgTGluZWFyQ2xvc2VkKGNvbnRleHQpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHNpZ24kMSh4KSB7XG4gICAgcmV0dXJuIHggPCAwID8gLTEgOiAxO1xuICB9XG5cbiAgLy8gQ2FsY3VsYXRlIHRoZSBzbG9wZXMgb2YgdGhlIHRhbmdlbnRzIChIZXJtaXRlLXR5cGUgaW50ZXJwb2xhdGlvbikgYmFzZWQgb25cbiAgLy8gdGhlIGZvbGxvd2luZyBwYXBlcjogU3RlZmZlbiwgTS4gMTk5MC4gQSBTaW1wbGUgTWV0aG9kIGZvciBNb25vdG9uaWNcbiAgLy8gSW50ZXJwb2xhdGlvbiBpbiBPbmUgRGltZW5zaW9uLiBBc3Ryb25vbXkgYW5kIEFzdHJvcGh5c2ljcywgVm9sLiAyMzksIE5PLlxuICAvLyBOT1YoSUkpLCBQLiA0NDMsIDE5OTAuXG4gIGZ1bmN0aW9uIHNsb3BlMyh0aGF0LCB4MiwgeTIpIHtcbiAgICB2YXIgaDAgPSB0aGF0Ll94MSAtIHRoYXQuX3gwLFxuICAgICAgICBoMSA9IHgyIC0gdGhhdC5feDEsXG4gICAgICAgIHMwID0gKHRoYXQuX3kxIC0gdGhhdC5feTApIC8gKGgwIHx8IGgxIDwgMCAmJiAtMCksXG4gICAgICAgIHMxID0gKHkyIC0gdGhhdC5feTEpIC8gKGgxIHx8IGgwIDwgMCAmJiAtMCksXG4gICAgICAgIHAgPSAoczAgKiBoMSArIHMxICogaDApIC8gKGgwICsgaDEpO1xuICAgIHJldHVybiAoc2lnbiQxKHMwKSArIHNpZ24kMShzMSkpICogTWF0aC5taW4oTWF0aC5hYnMoczApLCBNYXRoLmFicyhzMSksIDAuNSAqIE1hdGguYWJzKHApKSB8fCAwO1xuICB9XG5cbiAgLy8gQ2FsY3VsYXRlIGEgb25lLXNpZGVkIHNsb3BlLlxuICBmdW5jdGlvbiBzbG9wZTIodGhhdCwgdCkge1xuICAgIHZhciBoID0gdGhhdC5feDEgLSB0aGF0Ll94MDtcbiAgICByZXR1cm4gaCA/ICgzICogKHRoYXQuX3kxIC0gdGhhdC5feTApIC8gaCAtIHQpIC8gMiA6IHQ7XG4gIH1cblxuICAvLyBBY2NvcmRpbmcgdG8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3ViaWNfSGVybWl0ZV9zcGxpbmUjUmVwcmVzZW50YXRpb25zXG4gIC8vIFwieW91IGNhbiBleHByZXNzIGN1YmljIEhlcm1pdGUgaW50ZXJwb2xhdGlvbiBpbiB0ZXJtcyBvZiBjdWJpYyBCw6l6aWVyIGN1cnZlc1xuICAvLyB3aXRoIHJlc3BlY3QgdG8gdGhlIGZvdXIgdmFsdWVzIHAwLCBwMCArIG0wIC8gMywgcDEgLSBtMSAvIDMsIHAxXCIuXG4gIGZ1bmN0aW9uIHBvaW50JDUodGhhdCwgdDAsIHQxKSB7XG4gICAgdmFyIHgwID0gdGhhdC5feDAsXG4gICAgICAgIHkwID0gdGhhdC5feTAsXG4gICAgICAgIHgxID0gdGhhdC5feDEsXG4gICAgICAgIHkxID0gdGhhdC5feTEsXG4gICAgICAgIGR4ID0gKHgxIC0geDApIC8gMztcbiAgICB0aGF0Ll9jb250ZXh0LmJlemllckN1cnZlVG8oeDAgKyBkeCwgeTAgKyBkeCAqIHQwLCB4MSAtIGR4LCB5MSAtIGR4ICogdDEsIHgxLCB5MSk7XG4gIH1cblxuICBmdW5jdGlvbiBNb25vdG9uZVgoY29udGV4dCkge1xuICAgIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB9XG5cbiAgTW9ub3RvbmVYLnByb3RvdHlwZSA9IHtcbiAgICBhcmVhU3RhcnQ6IGZ1bmN0aW9uIGFyZWFTdGFydCgpIHtcbiAgICAgIHRoaXMuX2xpbmUgPSAwO1xuICAgIH0sXG4gICAgYXJlYUVuZDogZnVuY3Rpb24gYXJlYUVuZCgpIHtcbiAgICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gICAgfSxcbiAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uIGxpbmVTdGFydCgpIHtcbiAgICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPSB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5fdDAgPSBOYU47XG4gICAgICB0aGlzLl9wb2ludCA9IDA7XG4gICAgfSxcbiAgICBsaW5lRW5kOiBmdW5jdGlvbiBsaW5lRW5kKCkge1xuICAgICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDEsIHRoaXMuX3kxKTticmVhaztcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHBvaW50JDUodGhpcywgdGhpcy5fdDAsIHNsb3BlMih0aGlzLCB0aGlzLl90MCkpO2JyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuX2xpbmUgfHwgdGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgICB9LFxuICAgIHBvaW50OiBmdW5jdGlvbiBwb2ludCh4LCB5KSB7XG4gICAgICB2YXIgdDEgPSBOYU47XG5cbiAgICAgIHggPSAreCwgeSA9ICt5O1xuICAgICAgaWYgKHggPT09IHRoaXMuX3gxICYmIHkgPT09IHRoaXMuX3kxKSByZXR1cm47IC8vIElnbm9yZSBjb2luY2lkZW50IHBvaW50cy5cbiAgICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgIHRoaXMuX3BvaW50ID0gMTt0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTticmVhaztcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIHRoaXMuX3BvaW50ID0gMjticmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHRoaXMuX3BvaW50ID0gMztwb2ludCQ1KHRoaXMsIHNsb3BlMih0aGlzLCB0MSA9IHNsb3BlMyh0aGlzLCB4LCB5KSksIHQxKTticmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBwb2ludCQ1KHRoaXMsIHRoaXMuX3QwLCB0MSA9IHNsb3BlMyh0aGlzLCB4LCB5KSk7YnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0geDtcbiAgICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0geTtcbiAgICAgIHRoaXMuX3QwID0gdDE7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIE1vbm90b25lWShjb250ZXh0KSB7XG4gICAgdGhpcy5fY29udGV4dCA9IG5ldyBSZWZsZWN0Q29udGV4dChjb250ZXh0KTtcbiAgfVxuXG4gIChNb25vdG9uZVkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShNb25vdG9uZVgucHJvdG90eXBlKSkucG9pbnQgPSBmdW5jdGlvbiAoeCwgeSkge1xuICAgIE1vbm90b25lWC5wcm90b3R5cGUucG9pbnQuY2FsbCh0aGlzLCB5LCB4KTtcbiAgfTtcblxuICBmdW5jdGlvbiBSZWZsZWN0Q29udGV4dChjb250ZXh0KSB7XG4gICAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gIH1cblxuICBSZWZsZWN0Q29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgbW92ZVRvOiBmdW5jdGlvbiBtb3ZlVG8oeCwgeSkge1xuICAgICAgdGhpcy5fY29udGV4dC5tb3ZlVG8oeSwgeCk7XG4gICAgfSxcbiAgICBjbG9zZVBhdGg6IGZ1bmN0aW9uIGNsb3NlUGF0aCgpIHtcbiAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgfSxcbiAgICBsaW5lVG86IGZ1bmN0aW9uIGxpbmVUbyh4LCB5KSB7XG4gICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh5LCB4KTtcbiAgICB9LFxuICAgIGJlemllckN1cnZlVG86IGZ1bmN0aW9uIGJlemllckN1cnZlVG8oeDEsIHkxLCB4MiwgeTIsIHgsIHkpIHtcbiAgICAgIHRoaXMuX2NvbnRleHQuYmV6aWVyQ3VydmVUbyh5MSwgeDEsIHkyLCB4MiwgeSwgeCk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIG1vbm90b25lWChjb250ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBNb25vdG9uZVgoY29udGV4dCk7XG4gIH1cblxuICBmdW5jdGlvbiBtb25vdG9uZVkoY29udGV4dCkge1xuICAgIHJldHVybiBuZXcgTW9ub3RvbmVZKGNvbnRleHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gTmF0dXJhbChjb250ZXh0KSB7XG4gICAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gIH1cblxuICBOYXR1cmFsLnByb3RvdHlwZSA9IHtcbiAgICBhcmVhU3RhcnQ6IGZ1bmN0aW9uIGFyZWFTdGFydCgpIHtcbiAgICAgIHRoaXMuX2xpbmUgPSAwO1xuICAgIH0sXG4gICAgYXJlYUVuZDogZnVuY3Rpb24gYXJlYUVuZCgpIHtcbiAgICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gICAgfSxcbiAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uIGxpbmVTdGFydCgpIHtcbiAgICAgIHRoaXMuX3ggPSBbXTtcbiAgICAgIHRoaXMuX3kgPSBbXTtcbiAgICB9LFxuICAgIGxpbmVFbmQ6IGZ1bmN0aW9uIGxpbmVFbmQoKSB7XG4gICAgICB2YXIgeCA9IHRoaXMuX3gsXG4gICAgICAgICAgeSA9IHRoaXMuX3ksXG4gICAgICAgICAgbiA9IHgubGVuZ3RoO1xuXG4gICAgICBpZiAobikge1xuICAgICAgICB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeFswXSwgeVswXSkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4WzBdLCB5WzBdKTtcbiAgICAgICAgaWYgKG4gPT09IDIpIHtcbiAgICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh4WzFdLCB5WzFdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHggPSBjb250cm9sUG9pbnRzKHgpLFxuICAgICAgICAgICAgICBweSA9IGNvbnRyb2xQb2ludHMoeSk7XG4gICAgICAgICAgZm9yICh2YXIgaTAgPSAwLCBpMSA9IDE7IGkxIDwgbjsgKytpMCwgKytpMSkge1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKHB4WzBdW2kwXSwgcHlbMF1baTBdLCBweFsxXVtpMF0sIHB5WzFdW2kwXSwgeFtpMV0sIHlbaTFdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2xpbmUgfHwgdGhpcy5fbGluZSAhPT0gMCAmJiBuID09PSAxKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICAgICAgdGhpcy5feCA9IHRoaXMuX3kgPSBudWxsO1xuICAgIH0sXG4gICAgcG9pbnQ6IGZ1bmN0aW9uIHBvaW50KHgsIHkpIHtcbiAgICAgIHRoaXMuX3gucHVzaCgreCk7XG4gICAgICB0aGlzLl95LnB1c2goK3kpO1xuICAgIH1cbiAgfTtcblxuICAvLyBTZWUgaHR0cHM6Ly93d3cucGFydGljbGVpbmNlbGwuY29tLzIwMTIvYmV6aWVyLXNwbGluZXMvIGZvciBkZXJpdmF0aW9uLlxuICBmdW5jdGlvbiBjb250cm9sUG9pbnRzKHgpIHtcbiAgICB2YXIgaSxcbiAgICAgICAgbiA9IHgubGVuZ3RoIC0gMSxcbiAgICAgICAgbSxcbiAgICAgICAgYSA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgYiA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgciA9IG5ldyBBcnJheShuKTtcbiAgICBhWzBdID0gMCwgYlswXSA9IDIsIHJbMF0gPSB4WzBdICsgMiAqIHhbMV07XG4gICAgZm9yIChpID0gMTsgaSA8IG4gLSAxOyArK2kpIHtcbiAgICAgIGFbaV0gPSAxLCBiW2ldID0gNCwgcltpXSA9IDQgKiB4W2ldICsgMiAqIHhbaSArIDFdO1xuICAgIH1hW24gLSAxXSA9IDIsIGJbbiAtIDFdID0gNywgcltuIC0gMV0gPSA4ICogeFtuIC0gMV0gKyB4W25dO1xuICAgIGZvciAoaSA9IDE7IGkgPCBuOyArK2kpIHtcbiAgICAgIG0gPSBhW2ldIC8gYltpIC0gMV0sIGJbaV0gLT0gbSwgcltpXSAtPSBtICogcltpIC0gMV07XG4gICAgfWFbbiAtIDFdID0gcltuIC0gMV0gLyBiW24gLSAxXTtcbiAgICBmb3IgKGkgPSBuIC0gMjsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIGFbaV0gPSAocltpXSAtIGFbaSArIDFdKSAvIGJbaV07XG4gICAgfWJbbiAtIDFdID0gKHhbbl0gKyBhW24gLSAxXSkgLyAyO1xuICAgIGZvciAoaSA9IDA7IGkgPCBuIC0gMTsgKytpKSB7XG4gICAgICBiW2ldID0gMiAqIHhbaSArIDFdIC0gYVtpICsgMV07XG4gICAgfXJldHVybiBbYSwgYl07XG4gIH1cblxuICB2YXIgbmF0dXJhbCA9IGZ1bmN0aW9uIG5hdHVyYWwoY29udGV4dCkge1xuICAgIHJldHVybiBuZXcgTmF0dXJhbChjb250ZXh0KTtcbiAgfTtcblxuICBmdW5jdGlvbiBTdGVwKGNvbnRleHQsIHQpIHtcbiAgICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgICB0aGlzLl90ID0gdDtcbiAgfVxuXG4gIFN0ZXAucHJvdG90eXBlID0ge1xuICAgIGFyZWFTdGFydDogZnVuY3Rpb24gYXJlYVN0YXJ0KCkge1xuICAgICAgdGhpcy5fbGluZSA9IDA7XG4gICAgfSxcbiAgICBhcmVhRW5kOiBmdW5jdGlvbiBhcmVhRW5kKCkge1xuICAgICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgICB9LFxuICAgIGxpbmVTdGFydDogZnVuY3Rpb24gbGluZVN0YXJ0KCkge1xuICAgICAgdGhpcy5feCA9IHRoaXMuX3kgPSBOYU47XG4gICAgICB0aGlzLl9wb2ludCA9IDA7XG4gICAgfSxcbiAgICBsaW5lRW5kOiBmdW5jdGlvbiBsaW5lRW5kKCkge1xuICAgICAgaWYgKDAgPCB0aGlzLl90ICYmIHRoaXMuX3QgPCAxICYmIHRoaXMuX3BvaW50ID09PSAyKSB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94LCB0aGlzLl95KTtcbiAgICAgIGlmICh0aGlzLl9saW5lIHx8IHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDEpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICBpZiAodGhpcy5fbGluZSA+PSAwKSB0aGlzLl90ID0gMSAtIHRoaXMuX3QsIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgICB9LFxuICAgIHBvaW50OiBmdW5jdGlvbiBwb2ludCh4LCB5KSB7XG4gICAgICB4ID0gK3gsIHkgPSAreTtcbiAgICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgIHRoaXMuX3BvaW50ID0gMTt0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTticmVhaztcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIHRoaXMuX3BvaW50ID0gMjsgLy8gcHJvY2VlZFxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl90IDw9IDApIHtcbiAgICAgICAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feCwgeSk7XG4gICAgICAgICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdmFyIHgxID0gdGhpcy5feCAqICgxIC0gdGhpcy5fdCkgKyB4ICogdGhpcy5fdDtcbiAgICAgICAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8oeDEsIHRoaXMuX3kpO1xuICAgICAgICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh4MSwgeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLl94ID0geCwgdGhpcy5feSA9IHk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBzdGVwID0gZnVuY3Rpb24gc3RlcChjb250ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBTdGVwKGNvbnRleHQsIDAuNSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gc3RlcEJlZm9yZShjb250ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBTdGVwKGNvbnRleHQsIDApO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RlcEFmdGVyKGNvbnRleHQpIHtcbiAgICByZXR1cm4gbmV3IFN0ZXAoY29udGV4dCwgMSk7XG4gIH1cblxuICB2YXIgbm9uZSQxID0gZnVuY3Rpb24gbm9uZSQxKHNlcmllcywgb3JkZXIpIHtcbiAgICBpZiAoISgobiA9IHNlcmllcy5sZW5ndGgpID4gMSkpIHJldHVybjtcbiAgICBmb3IgKHZhciBpID0gMSwgaiwgczAsIHMxID0gc2VyaWVzW29yZGVyWzBdXSwgbiwgbSA9IHMxLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgczAgPSBzMSwgczEgPSBzZXJpZXNbb3JkZXJbaV1dO1xuICAgICAgZm9yIChqID0gMDsgaiA8IG07ICsraikge1xuICAgICAgICBzMVtqXVsxXSArPSBzMVtqXVswXSA9IGlzTmFOKHMwW2pdWzFdKSA/IHMwW2pdWzBdIDogczBbal1bMV07XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHZhciBub25lJDIgPSBmdW5jdGlvbiBub25lJDIoc2VyaWVzKSB7XG4gICAgdmFyIG4gPSBzZXJpZXMubGVuZ3RoLFxuICAgICAgICBvID0gbmV3IEFycmF5KG4pO1xuICAgIHdoaWxlICgtLW4gPj0gMCkge1xuICAgICAgb1tuXSA9IG47XG4gICAgfXJldHVybiBvO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHN0YWNrVmFsdWUoZCwga2V5KSB7XG4gICAgcmV0dXJuIGRba2V5XTtcbiAgfVxuXG4gIHZhciBzdGFjayA9IGZ1bmN0aW9uIHN0YWNrKCkge1xuICAgIHZhciBrZXlzID0gY29uc3RhbnQkMTAoW10pLFxuICAgICAgICBvcmRlciA9IG5vbmUkMixcbiAgICAgICAgb2Zmc2V0ID0gbm9uZSQxLFxuICAgICAgICB2YWx1ZSA9IHN0YWNrVmFsdWU7XG5cbiAgICBmdW5jdGlvbiBzdGFjayhkYXRhKSB7XG4gICAgICB2YXIga3ogPSBrZXlzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgICAgaSxcbiAgICAgICAgICBtID0gZGF0YS5sZW5ndGgsXG4gICAgICAgICAgbiA9IGt6Lmxlbmd0aCxcbiAgICAgICAgICBzeiA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgICBvejtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBmb3IgKHZhciBraSA9IGt6W2ldLCBzaSA9IHN6W2ldID0gbmV3IEFycmF5KG0pLCBqID0gMCwgc2lqOyBqIDwgbTsgKytqKSB7XG4gICAgICAgICAgc2lbal0gPSBzaWogPSBbMCwgK3ZhbHVlKGRhdGFbal0sIGtpLCBqLCBkYXRhKV07XG4gICAgICAgICAgc2lqLmRhdGEgPSBkYXRhW2pdO1xuICAgICAgICB9XG4gICAgICAgIHNpLmtleSA9IGtpO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwLCBveiA9IG9yZGVyKHN6KTsgaSA8IG47ICsraSkge1xuICAgICAgICBzeltveltpXV0uaW5kZXggPSBpO1xuICAgICAgfVxuXG4gICAgICBvZmZzZXQoc3osIG96KTtcbiAgICAgIHJldHVybiBzejtcbiAgICB9XG5cbiAgICBzdGFjay5rZXlzID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGtleXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEwKHNsaWNlJDYuY2FsbChfKSksIHN0YWNrKSA6IGtleXM7XG4gICAgfTtcblxuICAgIHN0YWNrLnZhbHVlID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHZhbHVlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxMCgrXyksIHN0YWNrKSA6IHZhbHVlO1xuICAgIH07XG5cbiAgICBzdGFjay5vcmRlciA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChvcmRlciA9IF8gPT0gbnVsbCA/IG5vbmUkMiA6IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMTAoc2xpY2UkNi5jYWxsKF8pKSwgc3RhY2spIDogb3JkZXI7XG4gICAgfTtcblxuICAgIHN0YWNrLm9mZnNldCA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChvZmZzZXQgPSBfID09IG51bGwgPyBub25lJDEgOiBfLCBzdGFjaykgOiBvZmZzZXQ7XG4gICAgfTtcblxuICAgIHJldHVybiBzdGFjaztcbiAgfTtcblxuICB2YXIgZXhwYW5kID0gZnVuY3Rpb24gZXhwYW5kKHNlcmllcywgb3JkZXIpIHtcbiAgICBpZiAoISgobiA9IHNlcmllcy5sZW5ndGgpID4gMCkpIHJldHVybjtcbiAgICBmb3IgKHZhciBpLCBuLCBqID0gMCwgbSA9IHNlcmllc1swXS5sZW5ndGgsIHk7IGogPCBtOyArK2opIHtcbiAgICAgIGZvciAoeSA9IGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIHkgKz0gc2VyaWVzW2ldW2pdWzFdIHx8IDA7XG4gICAgICB9aWYgKHkpIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgc2VyaWVzW2ldW2pdWzFdIC89IHk7XG4gICAgICB9XG4gICAgfVxuICAgIG5vbmUkMShzZXJpZXMsIG9yZGVyKTtcbiAgfTtcblxuICB2YXIgZGl2ZXJnaW5nID0gZnVuY3Rpb24gZGl2ZXJnaW5nKHNlcmllcywgb3JkZXIpIHtcbiAgICBpZiAoISgobiA9IHNlcmllcy5sZW5ndGgpID4gMSkpIHJldHVybjtcbiAgICBmb3IgKHZhciBpLCBqID0gMCwgZCwgZHksIHlwLCB5biwgbiwgbSA9IHNlcmllc1tvcmRlclswXV0ubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgICBmb3IgKHlwID0geW4gPSAwLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAoKGR5ID0gKGQgPSBzZXJpZXNbb3JkZXJbaV1dW2pdKVsxXSAtIGRbMF0pID49IDApIHtcbiAgICAgICAgICBkWzBdID0geXAsIGRbMV0gPSB5cCArPSBkeTtcbiAgICAgICAgfSBlbHNlIGlmIChkeSA8IDApIHtcbiAgICAgICAgICBkWzFdID0geW4sIGRbMF0gPSB5biArPSBkeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkWzBdID0geXA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIHNpbGhvdWV0dGUgPSBmdW5jdGlvbiBzaWxob3VldHRlKHNlcmllcywgb3JkZXIpIHtcbiAgICBpZiAoISgobiA9IHNlcmllcy5sZW5ndGgpID4gMCkpIHJldHVybjtcbiAgICBmb3IgKHZhciBqID0gMCwgczAgPSBzZXJpZXNbb3JkZXJbMF1dLCBuLCBtID0gczAubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgeSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgeSArPSBzZXJpZXNbaV1bal1bMV0gfHwgMDtcbiAgICAgIH1zMFtqXVsxXSArPSBzMFtqXVswXSA9IC15IC8gMjtcbiAgICB9XG4gICAgbm9uZSQxKHNlcmllcywgb3JkZXIpO1xuICB9O1xuXG4gIHZhciB3aWdnbGUgPSBmdW5jdGlvbiB3aWdnbGUoc2VyaWVzLCBvcmRlcikge1xuICAgIGlmICghKChuID0gc2VyaWVzLmxlbmd0aCkgPiAwKSB8fCAhKChtID0gKHMwID0gc2VyaWVzW29yZGVyWzBdXSkubGVuZ3RoKSA+IDApKSByZXR1cm47XG4gICAgZm9yICh2YXIgeSA9IDAsIGogPSAxLCBzMCwgbSwgbjsgaiA8IG07ICsraikge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIHMxID0gMCwgczIgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIHZhciBzaSA9IHNlcmllc1tvcmRlcltpXV0sXG4gICAgICAgICAgICBzaWowID0gc2lbal1bMV0gfHwgMCxcbiAgICAgICAgICAgIHNpajEgPSBzaVtqIC0gMV1bMV0gfHwgMCxcbiAgICAgICAgICAgIHMzID0gKHNpajAgLSBzaWoxKSAvIDI7XG4gICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgaTsgKytrKSB7XG4gICAgICAgICAgdmFyIHNrID0gc2VyaWVzW29yZGVyW2tdXSxcbiAgICAgICAgICAgICAgc2tqMCA9IHNrW2pdWzFdIHx8IDAsXG4gICAgICAgICAgICAgIHNrajEgPSBza1tqIC0gMV1bMV0gfHwgMDtcbiAgICAgICAgICBzMyArPSBza2owIC0gc2tqMTtcbiAgICAgICAgfVxuICAgICAgICBzMSArPSBzaWowLCBzMiArPSBzMyAqIHNpajA7XG4gICAgICB9XG4gICAgICBzMFtqIC0gMV1bMV0gKz0gczBbaiAtIDFdWzBdID0geTtcbiAgICAgIGlmIChzMSkgeSAtPSBzMiAvIHMxO1xuICAgIH1cbiAgICBzMFtqIC0gMV1bMV0gKz0gczBbaiAtIDFdWzBdID0geTtcbiAgICBub25lJDEoc2VyaWVzLCBvcmRlcik7XG4gIH07XG5cbiAgdmFyIGFzY2VuZGluZyQyID0gZnVuY3Rpb24gYXNjZW5kaW5nJDIoc2VyaWVzKSB7XG4gICAgdmFyIHN1bXMgPSBzZXJpZXMubWFwKHN1bSQyKTtcbiAgICByZXR1cm4gbm9uZSQyKHNlcmllcykuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIHN1bXNbYV0gLSBzdW1zW2JdO1xuICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHN1bSQyKHNlcmllcykge1xuICAgIHZhciBzID0gMCxcbiAgICAgICAgaSA9IC0xLFxuICAgICAgICBuID0gc2VyaWVzLmxlbmd0aCxcbiAgICAgICAgdjtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKHYgPSArc2VyaWVzW2ldWzFdKSBzICs9IHY7XG4gICAgfXJldHVybiBzO1xuICB9XG5cbiAgdmFyIGRlc2NlbmRpbmckMiA9IGZ1bmN0aW9uIGRlc2NlbmRpbmckMihzZXJpZXMpIHtcbiAgICByZXR1cm4gYXNjZW5kaW5nJDIoc2VyaWVzKS5yZXZlcnNlKCk7XG4gIH07XG5cbiAgdmFyIGluc2lkZU91dCA9IGZ1bmN0aW9uIGluc2lkZU91dChzZXJpZXMpIHtcbiAgICB2YXIgbiA9IHNlcmllcy5sZW5ndGgsXG4gICAgICAgIGksXG4gICAgICAgIGosXG4gICAgICAgIHN1bXMgPSBzZXJpZXMubWFwKHN1bSQyKSxcbiAgICAgICAgb3JkZXIgPSBub25lJDIoc2VyaWVzKS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gc3Vtc1tiXSAtIHN1bXNbYV07XG4gICAgfSksXG4gICAgICAgIHRvcCA9IDAsXG4gICAgICAgIGJvdHRvbSA9IDAsXG4gICAgICAgIHRvcHMgPSBbXSxcbiAgICAgICAgYm90dG9tcyA9IFtdO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaiA9IG9yZGVyW2ldO1xuICAgICAgaWYgKHRvcCA8IGJvdHRvbSkge1xuICAgICAgICB0b3AgKz0gc3Vtc1tqXTtcbiAgICAgICAgdG9wcy5wdXNoKGopO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYm90dG9tICs9IHN1bXNbal07XG4gICAgICAgIGJvdHRvbXMucHVzaChqKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYm90dG9tcy5yZXZlcnNlKCkuY29uY2F0KHRvcHMpO1xuICB9O1xuXG4gIHZhciByZXZlcnNlID0gZnVuY3Rpb24gcmV2ZXJzZShzZXJpZXMpIHtcbiAgICByZXR1cm4gbm9uZSQyKHNlcmllcykucmV2ZXJzZSgpO1xuICB9O1xuXG4gIHZhciBjb25zdGFudCQxMSA9IGZ1bmN0aW9uIGNvbnN0YW50JDExKHgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHg7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB4JDQoZCkge1xuICAgIHJldHVybiBkWzBdO1xuICB9XG5cbiAgZnVuY3Rpb24geSQ0KGQpIHtcbiAgICByZXR1cm4gZFsxXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIFJlZEJsYWNrVHJlZSgpIHtcbiAgICB0aGlzLl8gPSBudWxsOyAvLyByb290IG5vZGVcbiAgfVxuXG4gIGZ1bmN0aW9uIFJlZEJsYWNrTm9kZShub2RlKSB7XG4gICAgbm9kZS5VID0gLy8gcGFyZW50IG5vZGVcbiAgICBub2RlLkMgPSAvLyBjb2xvciAtIHRydWUgZm9yIHJlZCwgZmFsc2UgZm9yIGJsYWNrXG4gICAgbm9kZS5MID0gLy8gbGVmdCBub2RlXG4gICAgbm9kZS5SID0gLy8gcmlnaHQgbm9kZVxuICAgIG5vZGUuUCA9IC8vIHByZXZpb3VzIG5vZGVcbiAgICBub2RlLk4gPSBudWxsOyAvLyBuZXh0IG5vZGVcbiAgfVxuXG4gIFJlZEJsYWNrVHJlZS5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IFJlZEJsYWNrVHJlZSxcblxuICAgIGluc2VydDogZnVuY3Rpb24gaW5zZXJ0KGFmdGVyLCBub2RlKSB7XG4gICAgICB2YXIgcGFyZW50LCBncmFuZHBhLCB1bmNsZTtcblxuICAgICAgaWYgKGFmdGVyKSB7XG4gICAgICAgIG5vZGUuUCA9IGFmdGVyO1xuICAgICAgICBub2RlLk4gPSBhZnRlci5OO1xuICAgICAgICBpZiAoYWZ0ZXIuTikgYWZ0ZXIuTi5QID0gbm9kZTtcbiAgICAgICAgYWZ0ZXIuTiA9IG5vZGU7XG4gICAgICAgIGlmIChhZnRlci5SKSB7XG4gICAgICAgICAgYWZ0ZXIgPSBhZnRlci5SO1xuICAgICAgICAgIHdoaWxlIChhZnRlci5MKSB7XG4gICAgICAgICAgICBhZnRlciA9IGFmdGVyLkw7XG4gICAgICAgICAgfWFmdGVyLkwgPSBub2RlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFmdGVyLlIgPSBub2RlO1xuICAgICAgICB9XG4gICAgICAgIHBhcmVudCA9IGFmdGVyO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLl8pIHtcbiAgICAgICAgYWZ0ZXIgPSBSZWRCbGFja0ZpcnN0KHRoaXMuXyk7XG4gICAgICAgIG5vZGUuUCA9IG51bGw7XG4gICAgICAgIG5vZGUuTiA9IGFmdGVyO1xuICAgICAgICBhZnRlci5QID0gYWZ0ZXIuTCA9IG5vZGU7XG4gICAgICAgIHBhcmVudCA9IGFmdGVyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZS5QID0gbm9kZS5OID0gbnVsbDtcbiAgICAgICAgdGhpcy5fID0gbm9kZTtcbiAgICAgICAgcGFyZW50ID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIG5vZGUuTCA9IG5vZGUuUiA9IG51bGw7XG4gICAgICBub2RlLlUgPSBwYXJlbnQ7XG4gICAgICBub2RlLkMgPSB0cnVlO1xuXG4gICAgICBhZnRlciA9IG5vZGU7XG4gICAgICB3aGlsZSAocGFyZW50ICYmIHBhcmVudC5DKSB7XG4gICAgICAgIGdyYW5kcGEgPSBwYXJlbnQuVTtcbiAgICAgICAgaWYgKHBhcmVudCA9PT0gZ3JhbmRwYS5MKSB7XG4gICAgICAgICAgdW5jbGUgPSBncmFuZHBhLlI7XG4gICAgICAgICAgaWYgKHVuY2xlICYmIHVuY2xlLkMpIHtcbiAgICAgICAgICAgIHBhcmVudC5DID0gdW5jbGUuQyA9IGZhbHNlO1xuICAgICAgICAgICAgZ3JhbmRwYS5DID0gdHJ1ZTtcbiAgICAgICAgICAgIGFmdGVyID0gZ3JhbmRwYTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGFmdGVyID09PSBwYXJlbnQuUikge1xuICAgICAgICAgICAgICBSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgcGFyZW50KTtcbiAgICAgICAgICAgICAgYWZ0ZXIgPSBwYXJlbnQ7XG4gICAgICAgICAgICAgIHBhcmVudCA9IGFmdGVyLlU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXJlbnQuQyA9IGZhbHNlO1xuICAgICAgICAgICAgZ3JhbmRwYS5DID0gdHJ1ZTtcbiAgICAgICAgICAgIFJlZEJsYWNrUm90YXRlUmlnaHQodGhpcywgZ3JhbmRwYSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVuY2xlID0gZ3JhbmRwYS5MO1xuICAgICAgICAgIGlmICh1bmNsZSAmJiB1bmNsZS5DKSB7XG4gICAgICAgICAgICBwYXJlbnQuQyA9IHVuY2xlLkMgPSBmYWxzZTtcbiAgICAgICAgICAgIGdyYW5kcGEuQyA9IHRydWU7XG4gICAgICAgICAgICBhZnRlciA9IGdyYW5kcGE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChhZnRlciA9PT0gcGFyZW50LkwpIHtcbiAgICAgICAgICAgICAgUmVkQmxhY2tSb3RhdGVSaWdodCh0aGlzLCBwYXJlbnQpO1xuICAgICAgICAgICAgICBhZnRlciA9IHBhcmVudDtcbiAgICAgICAgICAgICAgcGFyZW50ID0gYWZ0ZXIuVTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcmVudC5DID0gZmFsc2U7XG4gICAgICAgICAgICBncmFuZHBhLkMgPSB0cnVlO1xuICAgICAgICAgICAgUmVkQmxhY2tSb3RhdGVMZWZ0KHRoaXMsIGdyYW5kcGEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwYXJlbnQgPSBhZnRlci5VO1xuICAgICAgfVxuICAgICAgdGhpcy5fLkMgPSBmYWxzZTtcbiAgICB9LFxuXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobm9kZSkge1xuICAgICAgaWYgKG5vZGUuTikgbm9kZS5OLlAgPSBub2RlLlA7XG4gICAgICBpZiAobm9kZS5QKSBub2RlLlAuTiA9IG5vZGUuTjtcbiAgICAgIG5vZGUuTiA9IG5vZGUuUCA9IG51bGw7XG5cbiAgICAgIHZhciBwYXJlbnQgPSBub2RlLlUsXG4gICAgICAgICAgc2libGluZyxcbiAgICAgICAgICBsZWZ0ID0gbm9kZS5MLFxuICAgICAgICAgIHJpZ2h0ID0gbm9kZS5SLFxuICAgICAgICAgIG5leHQsXG4gICAgICAgICAgcmVkO1xuXG4gICAgICBpZiAoIWxlZnQpIG5leHQgPSByaWdodDtlbHNlIGlmICghcmlnaHQpIG5leHQgPSBsZWZ0O2Vsc2UgbmV4dCA9IFJlZEJsYWNrRmlyc3QocmlnaHQpO1xuXG4gICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgIGlmIChwYXJlbnQuTCA9PT0gbm9kZSkgcGFyZW50LkwgPSBuZXh0O2Vsc2UgcGFyZW50LlIgPSBuZXh0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fID0gbmV4dDtcbiAgICAgIH1cblxuICAgICAgaWYgKGxlZnQgJiYgcmlnaHQpIHtcbiAgICAgICAgcmVkID0gbmV4dC5DO1xuICAgICAgICBuZXh0LkMgPSBub2RlLkM7XG4gICAgICAgIG5leHQuTCA9IGxlZnQ7XG4gICAgICAgIGxlZnQuVSA9IG5leHQ7XG4gICAgICAgIGlmIChuZXh0ICE9PSByaWdodCkge1xuICAgICAgICAgIHBhcmVudCA9IG5leHQuVTtcbiAgICAgICAgICBuZXh0LlUgPSBub2RlLlU7XG4gICAgICAgICAgbm9kZSA9IG5leHQuUjtcbiAgICAgICAgICBwYXJlbnQuTCA9IG5vZGU7XG4gICAgICAgICAgbmV4dC5SID0gcmlnaHQ7XG4gICAgICAgICAgcmlnaHQuVSA9IG5leHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV4dC5VID0gcGFyZW50O1xuICAgICAgICAgIHBhcmVudCA9IG5leHQ7XG4gICAgICAgICAgbm9kZSA9IG5leHQuUjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVkID0gbm9kZS5DO1xuICAgICAgICBub2RlID0gbmV4dDtcbiAgICAgIH1cblxuICAgICAgaWYgKG5vZGUpIG5vZGUuVSA9IHBhcmVudDtcbiAgICAgIGlmIChyZWQpIHJldHVybjtcbiAgICAgIGlmIChub2RlICYmIG5vZGUuQykge1xuICAgICAgICBub2RlLkMgPSBmYWxzZTtyZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKG5vZGUgPT09IHRoaXMuXykgYnJlYWs7XG4gICAgICAgIGlmIChub2RlID09PSBwYXJlbnQuTCkge1xuICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuUjtcbiAgICAgICAgICBpZiAoc2libGluZy5DKSB7XG4gICAgICAgICAgICBzaWJsaW5nLkMgPSBmYWxzZTtcbiAgICAgICAgICAgIHBhcmVudC5DID0gdHJ1ZTtcbiAgICAgICAgICAgIFJlZEJsYWNrUm90YXRlTGVmdCh0aGlzLCBwYXJlbnQpO1xuICAgICAgICAgICAgc2libGluZyA9IHBhcmVudC5SO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc2libGluZy5MICYmIHNpYmxpbmcuTC5DIHx8IHNpYmxpbmcuUiAmJiBzaWJsaW5nLlIuQykge1xuICAgICAgICAgICAgaWYgKCFzaWJsaW5nLlIgfHwgIXNpYmxpbmcuUi5DKSB7XG4gICAgICAgICAgICAgIHNpYmxpbmcuTC5DID0gZmFsc2U7XG4gICAgICAgICAgICAgIHNpYmxpbmcuQyA9IHRydWU7XG4gICAgICAgICAgICAgIFJlZEJsYWNrUm90YXRlUmlnaHQodGhpcywgc2libGluZyk7XG4gICAgICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuUjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNpYmxpbmcuQyA9IHBhcmVudC5DO1xuICAgICAgICAgICAgcGFyZW50LkMgPSBzaWJsaW5nLlIuQyA9IGZhbHNlO1xuICAgICAgICAgICAgUmVkQmxhY2tSb3RhdGVMZWZ0KHRoaXMsIHBhcmVudCk7XG4gICAgICAgICAgICBub2RlID0gdGhpcy5fO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuTDtcbiAgICAgICAgICBpZiAoc2libGluZy5DKSB7XG4gICAgICAgICAgICBzaWJsaW5nLkMgPSBmYWxzZTtcbiAgICAgICAgICAgIHBhcmVudC5DID0gdHJ1ZTtcbiAgICAgICAgICAgIFJlZEJsYWNrUm90YXRlUmlnaHQodGhpcywgcGFyZW50KTtcbiAgICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuTDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNpYmxpbmcuTCAmJiBzaWJsaW5nLkwuQyB8fCBzaWJsaW5nLlIgJiYgc2libGluZy5SLkMpIHtcbiAgICAgICAgICAgIGlmICghc2libGluZy5MIHx8ICFzaWJsaW5nLkwuQykge1xuICAgICAgICAgICAgICBzaWJsaW5nLlIuQyA9IGZhbHNlO1xuICAgICAgICAgICAgICBzaWJsaW5nLkMgPSB0cnVlO1xuICAgICAgICAgICAgICBSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgc2libGluZyk7XG4gICAgICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuTDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNpYmxpbmcuQyA9IHBhcmVudC5DO1xuICAgICAgICAgICAgcGFyZW50LkMgPSBzaWJsaW5nLkwuQyA9IGZhbHNlO1xuICAgICAgICAgICAgUmVkQmxhY2tSb3RhdGVSaWdodCh0aGlzLCBwYXJlbnQpO1xuICAgICAgICAgICAgbm9kZSA9IHRoaXMuXztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzaWJsaW5nLkMgPSB0cnVlO1xuICAgICAgICBub2RlID0gcGFyZW50O1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQuVTtcbiAgICAgIH0gd2hpbGUgKCFub2RlLkMpO1xuXG4gICAgICBpZiAobm9kZSkgbm9kZS5DID0gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIFJlZEJsYWNrUm90YXRlTGVmdCh0cmVlLCBub2RlKSB7XG4gICAgdmFyIHAgPSBub2RlLFxuICAgICAgICBxID0gbm9kZS5SLFxuICAgICAgICBwYXJlbnQgPSBwLlU7XG5cbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBpZiAocGFyZW50LkwgPT09IHApIHBhcmVudC5MID0gcTtlbHNlIHBhcmVudC5SID0gcTtcbiAgICB9IGVsc2Uge1xuICAgICAgdHJlZS5fID0gcTtcbiAgICB9XG5cbiAgICBxLlUgPSBwYXJlbnQ7XG4gICAgcC5VID0gcTtcbiAgICBwLlIgPSBxLkw7XG4gICAgaWYgKHAuUikgcC5SLlUgPSBwO1xuICAgIHEuTCA9IHA7XG4gIH1cblxuICBmdW5jdGlvbiBSZWRCbGFja1JvdGF0ZVJpZ2h0KHRyZWUsIG5vZGUpIHtcbiAgICB2YXIgcCA9IG5vZGUsXG4gICAgICAgIHEgPSBub2RlLkwsXG4gICAgICAgIHBhcmVudCA9IHAuVTtcblxuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIGlmIChwYXJlbnQuTCA9PT0gcCkgcGFyZW50LkwgPSBxO2Vsc2UgcGFyZW50LlIgPSBxO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cmVlLl8gPSBxO1xuICAgIH1cblxuICAgIHEuVSA9IHBhcmVudDtcbiAgICBwLlUgPSBxO1xuICAgIHAuTCA9IHEuUjtcbiAgICBpZiAocC5MKSBwLkwuVSA9IHA7XG4gICAgcS5SID0gcDtcbiAgfVxuXG4gIGZ1bmN0aW9uIFJlZEJsYWNrRmlyc3Qobm9kZSkge1xuICAgIHdoaWxlIChub2RlLkwpIHtcbiAgICAgIG5vZGUgPSBub2RlLkw7XG4gICAgfXJldHVybiBub2RlO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlRWRnZShsZWZ0LCByaWdodCwgdjAsIHYxKSB7XG4gICAgdmFyIGVkZ2UgPSBbbnVsbCwgbnVsbF0sXG4gICAgICAgIGluZGV4ID0gZWRnZXMucHVzaChlZGdlKSAtIDE7XG4gICAgZWRnZS5sZWZ0ID0gbGVmdDtcbiAgICBlZGdlLnJpZ2h0ID0gcmlnaHQ7XG4gICAgaWYgKHYwKSBzZXRFZGdlRW5kKGVkZ2UsIGxlZnQsIHJpZ2h0LCB2MCk7XG4gICAgaWYgKHYxKSBzZXRFZGdlRW5kKGVkZ2UsIHJpZ2h0LCBsZWZ0LCB2MSk7XG4gICAgY2VsbHNbbGVmdC5pbmRleF0uaGFsZmVkZ2VzLnB1c2goaW5kZXgpO1xuICAgIGNlbGxzW3JpZ2h0LmluZGV4XS5oYWxmZWRnZXMucHVzaChpbmRleCk7XG4gICAgcmV0dXJuIGVkZ2U7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVCb3JkZXJFZGdlKGxlZnQsIHYwLCB2MSkge1xuICAgIHZhciBlZGdlID0gW3YwLCB2MV07XG4gICAgZWRnZS5sZWZ0ID0gbGVmdDtcbiAgICByZXR1cm4gZWRnZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldEVkZ2VFbmQoZWRnZSwgbGVmdCwgcmlnaHQsIHZlcnRleCkge1xuICAgIGlmICghZWRnZVswXSAmJiAhZWRnZVsxXSkge1xuICAgICAgZWRnZVswXSA9IHZlcnRleDtcbiAgICAgIGVkZ2UubGVmdCA9IGxlZnQ7XG4gICAgICBlZGdlLnJpZ2h0ID0gcmlnaHQ7XG4gICAgfSBlbHNlIGlmIChlZGdlLmxlZnQgPT09IHJpZ2h0KSB7XG4gICAgICBlZGdlWzFdID0gdmVydGV4O1xuICAgIH0gZWxzZSB7XG4gICAgICBlZGdlWzBdID0gdmVydGV4O1xuICAgIH1cbiAgfVxuXG4gIC8vIExpYW5n4oCTQmFyc2t5IGxpbmUgY2xpcHBpbmcuXG4gIGZ1bmN0aW9uIGNsaXBFZGdlKGVkZ2UsIHgwLCB5MCwgeDEsIHkxKSB7XG4gICAgdmFyIGEgPSBlZGdlWzBdLFxuICAgICAgICBiID0gZWRnZVsxXSxcbiAgICAgICAgYXggPSBhWzBdLFxuICAgICAgICBheSA9IGFbMV0sXG4gICAgICAgIGJ4ID0gYlswXSxcbiAgICAgICAgYnkgPSBiWzFdLFxuICAgICAgICB0MCA9IDAsXG4gICAgICAgIHQxID0gMSxcbiAgICAgICAgZHggPSBieCAtIGF4LFxuICAgICAgICBkeSA9IGJ5IC0gYXksXG4gICAgICAgIHI7XG5cbiAgICByID0geDAgLSBheDtcbiAgICBpZiAoIWR4ICYmIHIgPiAwKSByZXR1cm47XG4gICAgciAvPSBkeDtcbiAgICBpZiAoZHggPCAwKSB7XG4gICAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gICAgfSBlbHNlIGlmIChkeCA+IDApIHtcbiAgICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgICB9XG5cbiAgICByID0geDEgLSBheDtcbiAgICBpZiAoIWR4ICYmIHIgPCAwKSByZXR1cm47XG4gICAgciAvPSBkeDtcbiAgICBpZiAoZHggPCAwKSB7XG4gICAgICBpZiAociA+IHQxKSByZXR1cm47XG4gICAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gICAgfSBlbHNlIGlmIChkeCA+IDApIHtcbiAgICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICAgIGlmIChyIDwgdDEpIHQxID0gcjtcbiAgICB9XG5cbiAgICByID0geTAgLSBheTtcbiAgICBpZiAoIWR5ICYmIHIgPiAwKSByZXR1cm47XG4gICAgciAvPSBkeTtcbiAgICBpZiAoZHkgPCAwKSB7XG4gICAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gICAgfSBlbHNlIGlmIChkeSA+IDApIHtcbiAgICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgICB9XG5cbiAgICByID0geTEgLSBheTtcbiAgICBpZiAoIWR5ICYmIHIgPCAwKSByZXR1cm47XG4gICAgciAvPSBkeTtcbiAgICBpZiAoZHkgPCAwKSB7XG4gICAgICBpZiAociA+IHQxKSByZXR1cm47XG4gICAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gICAgfSBlbHNlIGlmIChkeSA+IDApIHtcbiAgICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICAgIGlmIChyIDwgdDEpIHQxID0gcjtcbiAgICB9XG5cbiAgICBpZiAoISh0MCA+IDApICYmICEodDEgPCAxKSkgcmV0dXJuIHRydWU7IC8vIFRPRE8gQmV0dGVyIGNoZWNrP1xuXG4gICAgaWYgKHQwID4gMCkgZWRnZVswXSA9IFtheCArIHQwICogZHgsIGF5ICsgdDAgKiBkeV07XG4gICAgaWYgKHQxIDwgMSkgZWRnZVsxXSA9IFtheCArIHQxICogZHgsIGF5ICsgdDEgKiBkeV07XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBmdW5jdGlvbiBjb25uZWN0RWRnZShlZGdlLCB4MCwgeTAsIHgxLCB5MSkge1xuICAgIHZhciB2MSA9IGVkZ2VbMV07XG4gICAgaWYgKHYxKSByZXR1cm4gdHJ1ZTtcblxuICAgIHZhciB2MCA9IGVkZ2VbMF0sXG4gICAgICAgIGxlZnQgPSBlZGdlLmxlZnQsXG4gICAgICAgIHJpZ2h0ID0gZWRnZS5yaWdodCxcbiAgICAgICAgbHggPSBsZWZ0WzBdLFxuICAgICAgICBseSA9IGxlZnRbMV0sXG4gICAgICAgIHJ4ID0gcmlnaHRbMF0sXG4gICAgICAgIHJ5ID0gcmlnaHRbMV0sXG4gICAgICAgIGZ4ID0gKGx4ICsgcngpIC8gMixcbiAgICAgICAgZnkgPSAobHkgKyByeSkgLyAyLFxuICAgICAgICBmbSxcbiAgICAgICAgZmI7XG5cbiAgICBpZiAocnkgPT09IGx5KSB7XG4gICAgICBpZiAoZnggPCB4MCB8fCBmeCA+PSB4MSkgcmV0dXJuO1xuICAgICAgaWYgKGx4ID4gcngpIHtcbiAgICAgICAgaWYgKCF2MCkgdjAgPSBbZngsIHkwXTtlbHNlIGlmICh2MFsxXSA+PSB5MSkgcmV0dXJuO1xuICAgICAgICB2MSA9IFtmeCwgeTFdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCF2MCkgdjAgPSBbZngsIHkxXTtlbHNlIGlmICh2MFsxXSA8IHkwKSByZXR1cm47XG4gICAgICAgIHYxID0gW2Z4LCB5MF07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZtID0gKGx4IC0gcngpIC8gKHJ5IC0gbHkpO1xuICAgICAgZmIgPSBmeSAtIGZtICogZng7XG4gICAgICBpZiAoZm0gPCAtMSB8fCBmbSA+IDEpIHtcbiAgICAgICAgaWYgKGx4ID4gcngpIHtcbiAgICAgICAgICBpZiAoIXYwKSB2MCA9IFsoeTAgLSBmYikgLyBmbSwgeTBdO2Vsc2UgaWYgKHYwWzFdID49IHkxKSByZXR1cm47XG4gICAgICAgICAgdjEgPSBbKHkxIC0gZmIpIC8gZm0sIHkxXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoIXYwKSB2MCA9IFsoeTEgLSBmYikgLyBmbSwgeTFdO2Vsc2UgaWYgKHYwWzFdIDwgeTApIHJldHVybjtcbiAgICAgICAgICB2MSA9IFsoeTAgLSBmYikgLyBmbSwgeTBdO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobHkgPCByeSkge1xuICAgICAgICAgIGlmICghdjApIHYwID0gW3gwLCBmbSAqIHgwICsgZmJdO2Vsc2UgaWYgKHYwWzBdID49IHgxKSByZXR1cm47XG4gICAgICAgICAgdjEgPSBbeDEsIGZtICogeDEgKyBmYl07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCF2MCkgdjAgPSBbeDEsIGZtICogeDEgKyBmYl07ZWxzZSBpZiAodjBbMF0gPCB4MCkgcmV0dXJuO1xuICAgICAgICAgIHYxID0gW3gwLCBmbSAqIHgwICsgZmJdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZWRnZVswXSA9IHYwO1xuICAgIGVkZ2VbMV0gPSB2MTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsaXBFZGdlcyh4MCwgeTAsIHgxLCB5MSkge1xuICAgIHZhciBpID0gZWRnZXMubGVuZ3RoLFxuICAgICAgICBlZGdlO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgaWYgKCFjb25uZWN0RWRnZShlZGdlID0gZWRnZXNbaV0sIHgwLCB5MCwgeDEsIHkxKSB8fCAhY2xpcEVkZ2UoZWRnZSwgeDAsIHkwLCB4MSwgeTEpIHx8ICEoTWF0aC5hYnMoZWRnZVswXVswXSAtIGVkZ2VbMV1bMF0pID4gZXBzaWxvbiQ0IHx8IE1hdGguYWJzKGVkZ2VbMF1bMV0gLSBlZGdlWzFdWzFdKSA+IGVwc2lsb24kNCkpIHtcbiAgICAgICAgZGVsZXRlIGVkZ2VzW2ldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNlbGwoc2l0ZSkge1xuICAgIHJldHVybiBjZWxsc1tzaXRlLmluZGV4XSA9IHtcbiAgICAgIHNpdGU6IHNpdGUsXG4gICAgICBoYWxmZWRnZXM6IFtdXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNlbGxIYWxmZWRnZUFuZ2xlKGNlbGwsIGVkZ2UpIHtcbiAgICB2YXIgc2l0ZSA9IGNlbGwuc2l0ZSxcbiAgICAgICAgdmEgPSBlZGdlLmxlZnQsXG4gICAgICAgIHZiID0gZWRnZS5yaWdodDtcbiAgICBpZiAoc2l0ZSA9PT0gdmIpIHZiID0gdmEsIHZhID0gc2l0ZTtcbiAgICBpZiAodmIpIHJldHVybiBNYXRoLmF0YW4yKHZiWzFdIC0gdmFbMV0sIHZiWzBdIC0gdmFbMF0pO1xuICAgIGlmIChzaXRlID09PSB2YSkgdmEgPSBlZGdlWzFdLCB2YiA9IGVkZ2VbMF07ZWxzZSB2YSA9IGVkZ2VbMF0sIHZiID0gZWRnZVsxXTtcbiAgICByZXR1cm4gTWF0aC5hdGFuMih2YVswXSAtIHZiWzBdLCB2YlsxXSAtIHZhWzFdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNlbGxIYWxmZWRnZVN0YXJ0KGNlbGwsIGVkZ2UpIHtcbiAgICByZXR1cm4gZWRnZVsrKGVkZ2UubGVmdCAhPT0gY2VsbC5zaXRlKV07XG4gIH1cblxuICBmdW5jdGlvbiBjZWxsSGFsZmVkZ2VFbmQoY2VsbCwgZWRnZSkge1xuICAgIHJldHVybiBlZGdlWysoZWRnZS5sZWZ0ID09PSBjZWxsLnNpdGUpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNvcnRDZWxsSGFsZmVkZ2VzKCkge1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gY2VsbHMubGVuZ3RoLCBjZWxsLCBoYWxmZWRnZXMsIGosIG07IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgoY2VsbCA9IGNlbGxzW2ldKSAmJiAobSA9IChoYWxmZWRnZXMgPSBjZWxsLmhhbGZlZGdlcykubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaW5kZXggPSBuZXcgQXJyYXkobSksXG4gICAgICAgICAgICBhcnJheSA9IG5ldyBBcnJheShtKTtcbiAgICAgICAgZm9yIChqID0gMDsgaiA8IG07ICsraikge1xuICAgICAgICAgIGluZGV4W2pdID0gaiwgYXJyYXlbal0gPSBjZWxsSGFsZmVkZ2VBbmdsZShjZWxsLCBlZGdlc1toYWxmZWRnZXNbal1dKTtcbiAgICAgICAgfWluZGV4LnNvcnQoZnVuY3Rpb24gKGksIGopIHtcbiAgICAgICAgICByZXR1cm4gYXJyYXlbal0gLSBhcnJheVtpXTtcbiAgICAgICAgfSk7XG4gICAgICAgIGZvciAoaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICAgICAgICBhcnJheVtqXSA9IGhhbGZlZGdlc1tpbmRleFtqXV07XG4gICAgICAgIH1mb3IgKGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgICAgICAgaGFsZmVkZ2VzW2pdID0gYXJyYXlbal07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjbGlwQ2VsbHMoeDAsIHkwLCB4MSwgeTEpIHtcbiAgICB2YXIgbkNlbGxzID0gY2VsbHMubGVuZ3RoLFxuICAgICAgICBpQ2VsbCxcbiAgICAgICAgY2VsbCxcbiAgICAgICAgc2l0ZSxcbiAgICAgICAgaUhhbGZlZGdlLFxuICAgICAgICBoYWxmZWRnZXMsXG4gICAgICAgIG5IYWxmZWRnZXMsXG4gICAgICAgIHN0YXJ0LFxuICAgICAgICBzdGFydFgsXG4gICAgICAgIHN0YXJ0WSxcbiAgICAgICAgZW5kLFxuICAgICAgICBlbmRYLFxuICAgICAgICBlbmRZLFxuICAgICAgICBjb3ZlciA9IHRydWU7XG5cbiAgICBmb3IgKGlDZWxsID0gMDsgaUNlbGwgPCBuQ2VsbHM7ICsraUNlbGwpIHtcbiAgICAgIGlmIChjZWxsID0gY2VsbHNbaUNlbGxdKSB7XG4gICAgICAgIHNpdGUgPSBjZWxsLnNpdGU7XG4gICAgICAgIGhhbGZlZGdlcyA9IGNlbGwuaGFsZmVkZ2VzO1xuICAgICAgICBpSGFsZmVkZ2UgPSBoYWxmZWRnZXMubGVuZ3RoO1xuXG4gICAgICAgIC8vIFJlbW92ZSBhbnkgZGFuZ2xpbmcgY2xpcHBlZCBlZGdlcy5cbiAgICAgICAgd2hpbGUgKGlIYWxmZWRnZS0tKSB7XG4gICAgICAgICAgaWYgKCFlZGdlc1toYWxmZWRnZXNbaUhhbGZlZGdlXV0pIHtcbiAgICAgICAgICAgIGhhbGZlZGdlcy5zcGxpY2UoaUhhbGZlZGdlLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJbnNlcnQgYW55IGJvcmRlciBlZGdlcyBhcyBuZWNlc3NhcnkuXG4gICAgICAgIGlIYWxmZWRnZSA9IDAsIG5IYWxmZWRnZXMgPSBoYWxmZWRnZXMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoaUhhbGZlZGdlIDwgbkhhbGZlZGdlcykge1xuICAgICAgICAgIGVuZCA9IGNlbGxIYWxmZWRnZUVuZChjZWxsLCBlZGdlc1toYWxmZWRnZXNbaUhhbGZlZGdlXV0pLCBlbmRYID0gZW5kWzBdLCBlbmRZID0gZW5kWzFdO1xuICAgICAgICAgIHN0YXJ0ID0gY2VsbEhhbGZlZGdlU3RhcnQoY2VsbCwgZWRnZXNbaGFsZmVkZ2VzWysraUhhbGZlZGdlICUgbkhhbGZlZGdlc11dKSwgc3RhcnRYID0gc3RhcnRbMF0sIHN0YXJ0WSA9IHN0YXJ0WzFdO1xuICAgICAgICAgIGlmIChNYXRoLmFicyhlbmRYIC0gc3RhcnRYKSA+IGVwc2lsb24kNCB8fCBNYXRoLmFicyhlbmRZIC0gc3RhcnRZKSA+IGVwc2lsb24kNCkge1xuICAgICAgICAgICAgaGFsZmVkZ2VzLnNwbGljZShpSGFsZmVkZ2UsIDAsIGVkZ2VzLnB1c2goY3JlYXRlQm9yZGVyRWRnZShzaXRlLCBlbmQsIE1hdGguYWJzKGVuZFggLSB4MCkgPCBlcHNpbG9uJDQgJiYgeTEgLSBlbmRZID4gZXBzaWxvbiQ0ID8gW3gwLCBNYXRoLmFicyhzdGFydFggLSB4MCkgPCBlcHNpbG9uJDQgPyBzdGFydFkgOiB5MV0gOiBNYXRoLmFicyhlbmRZIC0geTEpIDwgZXBzaWxvbiQ0ICYmIHgxIC0gZW5kWCA+IGVwc2lsb24kNCA/IFtNYXRoLmFicyhzdGFydFkgLSB5MSkgPCBlcHNpbG9uJDQgPyBzdGFydFggOiB4MSwgeTFdIDogTWF0aC5hYnMoZW5kWCAtIHgxKSA8IGVwc2lsb24kNCAmJiBlbmRZIC0geTAgPiBlcHNpbG9uJDQgPyBbeDEsIE1hdGguYWJzKHN0YXJ0WCAtIHgxKSA8IGVwc2lsb24kNCA/IHN0YXJ0WSA6IHkwXSA6IE1hdGguYWJzKGVuZFkgLSB5MCkgPCBlcHNpbG9uJDQgJiYgZW5kWCAtIHgwID4gZXBzaWxvbiQ0ID8gW01hdGguYWJzKHN0YXJ0WSAtIHkwKSA8IGVwc2lsb24kNCA/IHN0YXJ0WCA6IHgwLCB5MF0gOiBudWxsKSkgLSAxKTtcbiAgICAgICAgICAgICsrbkhhbGZlZGdlcztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobkhhbGZlZGdlcykgY292ZXIgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiB0aGVyZSB3ZXJlbuKAmXQgYW55IGVkZ2VzLCBoYXZlIHRoZSBjbG9zZXN0IHNpdGUgY292ZXIgdGhlIGV4dGVudC5cbiAgICAvLyBJdCBkb2VzbuKAmXQgbWF0dGVyIHdoaWNoIGNvcm5lciBvZiB0aGUgZXh0ZW50IHdlIG1lYXN1cmUhXG4gICAgaWYgKGNvdmVyKSB7XG4gICAgICB2YXIgZHgsXG4gICAgICAgICAgZHksXG4gICAgICAgICAgZDIsXG4gICAgICAgICAgZGMgPSBJbmZpbml0eTtcblxuICAgICAgZm9yIChpQ2VsbCA9IDAsIGNvdmVyID0gbnVsbDsgaUNlbGwgPCBuQ2VsbHM7ICsraUNlbGwpIHtcbiAgICAgICAgaWYgKGNlbGwgPSBjZWxsc1tpQ2VsbF0pIHtcbiAgICAgICAgICBzaXRlID0gY2VsbC5zaXRlO1xuICAgICAgICAgIGR4ID0gc2l0ZVswXSAtIHgwO1xuICAgICAgICAgIGR5ID0gc2l0ZVsxXSAtIHkwO1xuICAgICAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICAgICAgaWYgKGQyIDwgZGMpIGRjID0gZDIsIGNvdmVyID0gY2VsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoY292ZXIpIHtcbiAgICAgICAgdmFyIHYwMCA9IFt4MCwgeTBdLFxuICAgICAgICAgICAgdjAxID0gW3gwLCB5MV0sXG4gICAgICAgICAgICB2MTEgPSBbeDEsIHkxXSxcbiAgICAgICAgICAgIHYxMCA9IFt4MSwgeTBdO1xuICAgICAgICBjb3Zlci5oYWxmZWRnZXMucHVzaChlZGdlcy5wdXNoKGNyZWF0ZUJvcmRlckVkZ2Uoc2l0ZSA9IGNvdmVyLnNpdGUsIHYwMCwgdjAxKSkgLSAxLCBlZGdlcy5wdXNoKGNyZWF0ZUJvcmRlckVkZ2Uoc2l0ZSwgdjAxLCB2MTEpKSAtIDEsIGVkZ2VzLnB1c2goY3JlYXRlQm9yZGVyRWRnZShzaXRlLCB2MTEsIHYxMCkpIC0gMSwgZWRnZXMucHVzaChjcmVhdGVCb3JkZXJFZGdlKHNpdGUsIHYxMCwgdjAwKSkgLSAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBMYXN0bHkgZGVsZXRlIGFueSBjZWxscyB3aXRoIG5vIGVkZ2VzOyB0aGVzZSB3ZXJlIGVudGlyZWx5IGNsaXBwZWQuXG4gICAgZm9yIChpQ2VsbCA9IDA7IGlDZWxsIDwgbkNlbGxzOyArK2lDZWxsKSB7XG4gICAgICBpZiAoY2VsbCA9IGNlbGxzW2lDZWxsXSkge1xuICAgICAgICBpZiAoIWNlbGwuaGFsZmVkZ2VzLmxlbmd0aCkge1xuICAgICAgICAgIGRlbGV0ZSBjZWxsc1tpQ2VsbF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgY2lyY2xlUG9vbCA9IFtdO1xuXG4gIHZhciBmaXJzdENpcmNsZTtcblxuICBmdW5jdGlvbiBDaXJjbGUoKSB7XG4gICAgUmVkQmxhY2tOb2RlKHRoaXMpO1xuICAgIHRoaXMueCA9IHRoaXMueSA9IHRoaXMuYXJjID0gdGhpcy5zaXRlID0gdGhpcy5jeSA9IG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBhdHRhY2hDaXJjbGUoYXJjKSB7XG4gICAgdmFyIGxBcmMgPSBhcmMuUCxcbiAgICAgICAgckFyYyA9IGFyYy5OO1xuXG4gICAgaWYgKCFsQXJjIHx8ICFyQXJjKSByZXR1cm47XG5cbiAgICB2YXIgbFNpdGUgPSBsQXJjLnNpdGUsXG4gICAgICAgIGNTaXRlID0gYXJjLnNpdGUsXG4gICAgICAgIHJTaXRlID0gckFyYy5zaXRlO1xuXG4gICAgaWYgKGxTaXRlID09PSByU2l0ZSkgcmV0dXJuO1xuXG4gICAgdmFyIGJ4ID0gY1NpdGVbMF0sXG4gICAgICAgIGJ5ID0gY1NpdGVbMV0sXG4gICAgICAgIGF4ID0gbFNpdGVbMF0gLSBieCxcbiAgICAgICAgYXkgPSBsU2l0ZVsxXSAtIGJ5LFxuICAgICAgICBjeCA9IHJTaXRlWzBdIC0gYngsXG4gICAgICAgIGN5ID0gclNpdGVbMV0gLSBieTtcblxuICAgIHZhciBkID0gMiAqIChheCAqIGN5IC0gYXkgKiBjeCk7XG4gICAgaWYgKGQgPj0gLWVwc2lsb24yJDIpIHJldHVybjtcblxuICAgIHZhciBoYSA9IGF4ICogYXggKyBheSAqIGF5LFxuICAgICAgICBoYyA9IGN4ICogY3ggKyBjeSAqIGN5LFxuICAgICAgICB4ID0gKGN5ICogaGEgLSBheSAqIGhjKSAvIGQsXG4gICAgICAgIHkgPSAoYXggKiBoYyAtIGN4ICogaGEpIC8gZDtcblxuICAgIHZhciBjaXJjbGUgPSBjaXJjbGVQb29sLnBvcCgpIHx8IG5ldyBDaXJjbGUoKTtcbiAgICBjaXJjbGUuYXJjID0gYXJjO1xuICAgIGNpcmNsZS5zaXRlID0gY1NpdGU7XG4gICAgY2lyY2xlLnggPSB4ICsgYng7XG4gICAgY2lyY2xlLnkgPSAoY2lyY2xlLmN5ID0geSArIGJ5KSArIE1hdGguc3FydCh4ICogeCArIHkgKiB5KTsgLy8geSBib3R0b21cblxuICAgIGFyYy5jaXJjbGUgPSBjaXJjbGU7XG5cbiAgICB2YXIgYmVmb3JlID0gbnVsbCxcbiAgICAgICAgbm9kZSA9IGNpcmNsZXMuXztcblxuICAgIHdoaWxlIChub2RlKSB7XG4gICAgICBpZiAoY2lyY2xlLnkgPCBub2RlLnkgfHwgY2lyY2xlLnkgPT09IG5vZGUueSAmJiBjaXJjbGUueCA8PSBub2RlLngpIHtcbiAgICAgICAgaWYgKG5vZGUuTCkgbm9kZSA9IG5vZGUuTDtlbHNlIHtcbiAgICAgICAgICBiZWZvcmUgPSBub2RlLlA7YnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChub2RlLlIpIG5vZGUgPSBub2RlLlI7ZWxzZSB7XG4gICAgICAgICAgYmVmb3JlID0gbm9kZTticmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGNpcmNsZXMuaW5zZXJ0KGJlZm9yZSwgY2lyY2xlKTtcbiAgICBpZiAoIWJlZm9yZSkgZmlyc3RDaXJjbGUgPSBjaXJjbGU7XG4gIH1cblxuICBmdW5jdGlvbiBkZXRhY2hDaXJjbGUoYXJjKSB7XG4gICAgdmFyIGNpcmNsZSA9IGFyYy5jaXJjbGU7XG4gICAgaWYgKGNpcmNsZSkge1xuICAgICAgaWYgKCFjaXJjbGUuUCkgZmlyc3RDaXJjbGUgPSBjaXJjbGUuTjtcbiAgICAgIGNpcmNsZXMucmVtb3ZlKGNpcmNsZSk7XG4gICAgICBjaXJjbGVQb29sLnB1c2goY2lyY2xlKTtcbiAgICAgIFJlZEJsYWNrTm9kZShjaXJjbGUpO1xuICAgICAgYXJjLmNpcmNsZSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgdmFyIGJlYWNoUG9vbCA9IFtdO1xuXG4gIGZ1bmN0aW9uIEJlYWNoKCkge1xuICAgIFJlZEJsYWNrTm9kZSh0aGlzKTtcbiAgICB0aGlzLmVkZ2UgPSB0aGlzLnNpdGUgPSB0aGlzLmNpcmNsZSA9IG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVCZWFjaChzaXRlKSB7XG4gICAgdmFyIGJlYWNoID0gYmVhY2hQb29sLnBvcCgpIHx8IG5ldyBCZWFjaCgpO1xuICAgIGJlYWNoLnNpdGUgPSBzaXRlO1xuICAgIHJldHVybiBiZWFjaDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRldGFjaEJlYWNoKGJlYWNoKSB7XG4gICAgZGV0YWNoQ2lyY2xlKGJlYWNoKTtcbiAgICBiZWFjaGVzLnJlbW92ZShiZWFjaCk7XG4gICAgYmVhY2hQb29sLnB1c2goYmVhY2gpO1xuICAgIFJlZEJsYWNrTm9kZShiZWFjaCk7XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVCZWFjaChiZWFjaCkge1xuICAgIHZhciBjaXJjbGUgPSBiZWFjaC5jaXJjbGUsXG4gICAgICAgIHggPSBjaXJjbGUueCxcbiAgICAgICAgeSA9IGNpcmNsZS5jeSxcbiAgICAgICAgdmVydGV4ID0gW3gsIHldLFxuICAgICAgICBwcmV2aW91cyA9IGJlYWNoLlAsXG4gICAgICAgIG5leHQgPSBiZWFjaC5OLFxuICAgICAgICBkaXNhcHBlYXJpbmcgPSBbYmVhY2hdO1xuXG4gICAgZGV0YWNoQmVhY2goYmVhY2gpO1xuXG4gICAgdmFyIGxBcmMgPSBwcmV2aW91cztcbiAgICB3aGlsZSAobEFyYy5jaXJjbGUgJiYgTWF0aC5hYnMoeCAtIGxBcmMuY2lyY2xlLngpIDwgZXBzaWxvbiQ0ICYmIE1hdGguYWJzKHkgLSBsQXJjLmNpcmNsZS5jeSkgPCBlcHNpbG9uJDQpIHtcbiAgICAgIHByZXZpb3VzID0gbEFyYy5QO1xuICAgICAgZGlzYXBwZWFyaW5nLnVuc2hpZnQobEFyYyk7XG4gICAgICBkZXRhY2hCZWFjaChsQXJjKTtcbiAgICAgIGxBcmMgPSBwcmV2aW91cztcbiAgICB9XG5cbiAgICBkaXNhcHBlYXJpbmcudW5zaGlmdChsQXJjKTtcbiAgICBkZXRhY2hDaXJjbGUobEFyYyk7XG5cbiAgICB2YXIgckFyYyA9IG5leHQ7XG4gICAgd2hpbGUgKHJBcmMuY2lyY2xlICYmIE1hdGguYWJzKHggLSByQXJjLmNpcmNsZS54KSA8IGVwc2lsb24kNCAmJiBNYXRoLmFicyh5IC0gckFyYy5jaXJjbGUuY3kpIDwgZXBzaWxvbiQ0KSB7XG4gICAgICBuZXh0ID0gckFyYy5OO1xuICAgICAgZGlzYXBwZWFyaW5nLnB1c2gockFyYyk7XG4gICAgICBkZXRhY2hCZWFjaChyQXJjKTtcbiAgICAgIHJBcmMgPSBuZXh0O1xuICAgIH1cblxuICAgIGRpc2FwcGVhcmluZy5wdXNoKHJBcmMpO1xuICAgIGRldGFjaENpcmNsZShyQXJjKTtcblxuICAgIHZhciBuQXJjcyA9IGRpc2FwcGVhcmluZy5sZW5ndGgsXG4gICAgICAgIGlBcmM7XG4gICAgZm9yIChpQXJjID0gMTsgaUFyYyA8IG5BcmNzOyArK2lBcmMpIHtcbiAgICAgIHJBcmMgPSBkaXNhcHBlYXJpbmdbaUFyY107XG4gICAgICBsQXJjID0gZGlzYXBwZWFyaW5nW2lBcmMgLSAxXTtcbiAgICAgIHNldEVkZ2VFbmQockFyYy5lZGdlLCBsQXJjLnNpdGUsIHJBcmMuc2l0ZSwgdmVydGV4KTtcbiAgICB9XG5cbiAgICBsQXJjID0gZGlzYXBwZWFyaW5nWzBdO1xuICAgIHJBcmMgPSBkaXNhcHBlYXJpbmdbbkFyY3MgLSAxXTtcbiAgICByQXJjLmVkZ2UgPSBjcmVhdGVFZGdlKGxBcmMuc2l0ZSwgckFyYy5zaXRlLCBudWxsLCB2ZXJ0ZXgpO1xuXG4gICAgYXR0YWNoQ2lyY2xlKGxBcmMpO1xuICAgIGF0dGFjaENpcmNsZShyQXJjKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZEJlYWNoKHNpdGUpIHtcbiAgICB2YXIgeCA9IHNpdGVbMF0sXG4gICAgICAgIGRpcmVjdHJpeCA9IHNpdGVbMV0sXG4gICAgICAgIGxBcmMsXG4gICAgICAgIHJBcmMsXG4gICAgICAgIGR4bCxcbiAgICAgICAgZHhyLFxuICAgICAgICBub2RlID0gYmVhY2hlcy5fO1xuXG4gICAgd2hpbGUgKG5vZGUpIHtcbiAgICAgIGR4bCA9IGxlZnRCcmVha1BvaW50KG5vZGUsIGRpcmVjdHJpeCkgLSB4O1xuICAgICAgaWYgKGR4bCA+IGVwc2lsb24kNCkgbm9kZSA9IG5vZGUuTDtlbHNlIHtcbiAgICAgICAgZHhyID0geCAtIHJpZ2h0QnJlYWtQb2ludChub2RlLCBkaXJlY3RyaXgpO1xuICAgICAgICBpZiAoZHhyID4gZXBzaWxvbiQ0KSB7XG4gICAgICAgICAgaWYgKCFub2RlLlIpIHtcbiAgICAgICAgICAgIGxBcmMgPSBub2RlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5vZGUgPSBub2RlLlI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGR4bCA+IC1lcHNpbG9uJDQpIHtcbiAgICAgICAgICAgIGxBcmMgPSBub2RlLlA7XG4gICAgICAgICAgICByQXJjID0gbm9kZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGR4ciA+IC1lcHNpbG9uJDQpIHtcbiAgICAgICAgICAgIGxBcmMgPSBub2RlO1xuICAgICAgICAgICAgckFyYyA9IG5vZGUuTjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbEFyYyA9IHJBcmMgPSBub2RlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGNyZWF0ZUNlbGwoc2l0ZSk7XG4gICAgdmFyIG5ld0FyYyA9IGNyZWF0ZUJlYWNoKHNpdGUpO1xuICAgIGJlYWNoZXMuaW5zZXJ0KGxBcmMsIG5ld0FyYyk7XG5cbiAgICBpZiAoIWxBcmMgJiYgIXJBcmMpIHJldHVybjtcblxuICAgIGlmIChsQXJjID09PSByQXJjKSB7XG4gICAgICBkZXRhY2hDaXJjbGUobEFyYyk7XG4gICAgICByQXJjID0gY3JlYXRlQmVhY2gobEFyYy5zaXRlKTtcbiAgICAgIGJlYWNoZXMuaW5zZXJ0KG5ld0FyYywgckFyYyk7XG4gICAgICBuZXdBcmMuZWRnZSA9IHJBcmMuZWRnZSA9IGNyZWF0ZUVkZ2UobEFyYy5zaXRlLCBuZXdBcmMuc2l0ZSk7XG4gICAgICBhdHRhY2hDaXJjbGUobEFyYyk7XG4gICAgICBhdHRhY2hDaXJjbGUockFyYyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFyQXJjKSB7XG4gICAgICAvLyAmJiBsQXJjXG4gICAgICBuZXdBcmMuZWRnZSA9IGNyZWF0ZUVkZ2UobEFyYy5zaXRlLCBuZXdBcmMuc2l0ZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gZWxzZSBsQXJjICE9PSByQXJjXG4gICAgZGV0YWNoQ2lyY2xlKGxBcmMpO1xuICAgIGRldGFjaENpcmNsZShyQXJjKTtcblxuICAgIHZhciBsU2l0ZSA9IGxBcmMuc2l0ZSxcbiAgICAgICAgYXggPSBsU2l0ZVswXSxcbiAgICAgICAgYXkgPSBsU2l0ZVsxXSxcbiAgICAgICAgYnggPSBzaXRlWzBdIC0gYXgsXG4gICAgICAgIGJ5ID0gc2l0ZVsxXSAtIGF5LFxuICAgICAgICByU2l0ZSA9IHJBcmMuc2l0ZSxcbiAgICAgICAgY3ggPSByU2l0ZVswXSAtIGF4LFxuICAgICAgICBjeSA9IHJTaXRlWzFdIC0gYXksXG4gICAgICAgIGQgPSAyICogKGJ4ICogY3kgLSBieSAqIGN4KSxcbiAgICAgICAgaGIgPSBieCAqIGJ4ICsgYnkgKiBieSxcbiAgICAgICAgaGMgPSBjeCAqIGN4ICsgY3kgKiBjeSxcbiAgICAgICAgdmVydGV4ID0gWyhjeSAqIGhiIC0gYnkgKiBoYykgLyBkICsgYXgsIChieCAqIGhjIC0gY3ggKiBoYikgLyBkICsgYXldO1xuXG4gICAgc2V0RWRnZUVuZChyQXJjLmVkZ2UsIGxTaXRlLCByU2l0ZSwgdmVydGV4KTtcbiAgICBuZXdBcmMuZWRnZSA9IGNyZWF0ZUVkZ2UobFNpdGUsIHNpdGUsIG51bGwsIHZlcnRleCk7XG4gICAgckFyYy5lZGdlID0gY3JlYXRlRWRnZShzaXRlLCByU2l0ZSwgbnVsbCwgdmVydGV4KTtcbiAgICBhdHRhY2hDaXJjbGUobEFyYyk7XG4gICAgYXR0YWNoQ2lyY2xlKHJBcmMpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGVmdEJyZWFrUG9pbnQoYXJjLCBkaXJlY3RyaXgpIHtcbiAgICB2YXIgc2l0ZSA9IGFyYy5zaXRlLFxuICAgICAgICByZm9jeCA9IHNpdGVbMF0sXG4gICAgICAgIHJmb2N5ID0gc2l0ZVsxXSxcbiAgICAgICAgcGJ5MiA9IHJmb2N5IC0gZGlyZWN0cml4O1xuXG4gICAgaWYgKCFwYnkyKSByZXR1cm4gcmZvY3g7XG5cbiAgICB2YXIgbEFyYyA9IGFyYy5QO1xuICAgIGlmICghbEFyYykgcmV0dXJuIC1JbmZpbml0eTtcblxuICAgIHNpdGUgPSBsQXJjLnNpdGU7XG4gICAgdmFyIGxmb2N4ID0gc2l0ZVswXSxcbiAgICAgICAgbGZvY3kgPSBzaXRlWzFdLFxuICAgICAgICBwbGJ5MiA9IGxmb2N5IC0gZGlyZWN0cml4O1xuXG4gICAgaWYgKCFwbGJ5MikgcmV0dXJuIGxmb2N4O1xuXG4gICAgdmFyIGhsID0gbGZvY3ggLSByZm9jeCxcbiAgICAgICAgYWJ5MiA9IDEgLyBwYnkyIC0gMSAvIHBsYnkyLFxuICAgICAgICBiID0gaGwgLyBwbGJ5MjtcblxuICAgIGlmIChhYnkyKSByZXR1cm4gKC1iICsgTWF0aC5zcXJ0KGIgKiBiIC0gMiAqIGFieTIgKiAoaGwgKiBobCAvICgtMiAqIHBsYnkyKSAtIGxmb2N5ICsgcGxieTIgLyAyICsgcmZvY3kgLSBwYnkyIC8gMikpKSAvIGFieTIgKyByZm9jeDtcblxuICAgIHJldHVybiAocmZvY3ggKyBsZm9jeCkgLyAyO1xuICB9XG5cbiAgZnVuY3Rpb24gcmlnaHRCcmVha1BvaW50KGFyYywgZGlyZWN0cml4KSB7XG4gICAgdmFyIHJBcmMgPSBhcmMuTjtcbiAgICBpZiAockFyYykgcmV0dXJuIGxlZnRCcmVha1BvaW50KHJBcmMsIGRpcmVjdHJpeCk7XG4gICAgdmFyIHNpdGUgPSBhcmMuc2l0ZTtcbiAgICByZXR1cm4gc2l0ZVsxXSA9PT0gZGlyZWN0cml4ID8gc2l0ZVswXSA6IEluZmluaXR5O1xuICB9XG5cbiAgdmFyIGVwc2lsb24kNCA9IDFlLTY7XG4gIHZhciBlcHNpbG9uMiQyID0gMWUtMTI7XG4gIHZhciBiZWFjaGVzO1xuICB2YXIgY2VsbHM7XG4gIHZhciBjaXJjbGVzO1xuICB2YXIgZWRnZXM7XG5cbiAgZnVuY3Rpb24gdHJpYW5nbGVBcmVhKGEsIGIsIGMpIHtcbiAgICByZXR1cm4gKGFbMF0gLSBjWzBdKSAqIChiWzFdIC0gYVsxXSkgLSAoYVswXSAtIGJbMF0pICogKGNbMV0gLSBhWzFdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxleGljb2dyYXBoaWMoYSwgYikge1xuICAgIHJldHVybiBiWzFdIC0gYVsxXSB8fCBiWzBdIC0gYVswXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIERpYWdyYW0oc2l0ZXMsIGV4dGVudCkge1xuICAgIHZhciBzaXRlID0gc2l0ZXMuc29ydChsZXhpY29ncmFwaGljKS5wb3AoKSxcbiAgICAgICAgeCxcbiAgICAgICAgeSxcbiAgICAgICAgY2lyY2xlO1xuXG4gICAgZWRnZXMgPSBbXTtcbiAgICBjZWxscyA9IG5ldyBBcnJheShzaXRlcy5sZW5ndGgpO1xuICAgIGJlYWNoZXMgPSBuZXcgUmVkQmxhY2tUcmVlKCk7XG4gICAgY2lyY2xlcyA9IG5ldyBSZWRCbGFja1RyZWUoKTtcblxuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBjaXJjbGUgPSBmaXJzdENpcmNsZTtcbiAgICAgIGlmIChzaXRlICYmICghY2lyY2xlIHx8IHNpdGVbMV0gPCBjaXJjbGUueSB8fCBzaXRlWzFdID09PSBjaXJjbGUueSAmJiBzaXRlWzBdIDwgY2lyY2xlLngpKSB7XG4gICAgICAgIGlmIChzaXRlWzBdICE9PSB4IHx8IHNpdGVbMV0gIT09IHkpIHtcbiAgICAgICAgICBhZGRCZWFjaChzaXRlKTtcbiAgICAgICAgICB4ID0gc2l0ZVswXSwgeSA9IHNpdGVbMV07XG4gICAgICAgIH1cbiAgICAgICAgc2l0ZSA9IHNpdGVzLnBvcCgpO1xuICAgICAgfSBlbHNlIGlmIChjaXJjbGUpIHtcbiAgICAgICAgcmVtb3ZlQmVhY2goY2lyY2xlLmFyYyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzb3J0Q2VsbEhhbGZlZGdlcygpO1xuXG4gICAgaWYgKGV4dGVudCkge1xuICAgICAgdmFyIHgwID0gK2V4dGVudFswXVswXSxcbiAgICAgICAgICB5MCA9ICtleHRlbnRbMF1bMV0sXG4gICAgICAgICAgeDEgPSArZXh0ZW50WzFdWzBdLFxuICAgICAgICAgIHkxID0gK2V4dGVudFsxXVsxXTtcbiAgICAgIGNsaXBFZGdlcyh4MCwgeTAsIHgxLCB5MSk7XG4gICAgICBjbGlwQ2VsbHMoeDAsIHkwLCB4MSwgeTEpO1xuICAgIH1cblxuICAgIHRoaXMuZWRnZXMgPSBlZGdlcztcbiAgICB0aGlzLmNlbGxzID0gY2VsbHM7XG5cbiAgICBiZWFjaGVzID0gY2lyY2xlcyA9IGVkZ2VzID0gY2VsbHMgPSBudWxsO1xuICB9XG5cbiAgRGlhZ3JhbS5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IERpYWdyYW0sXG5cbiAgICBwb2x5Z29uczogZnVuY3Rpb24gcG9seWdvbnMoKSB7XG4gICAgICB2YXIgZWRnZXMgPSB0aGlzLmVkZ2VzO1xuXG4gICAgICByZXR1cm4gdGhpcy5jZWxscy5tYXAoZnVuY3Rpb24gKGNlbGwpIHtcbiAgICAgICAgdmFyIHBvbHlnb24gPSBjZWxsLmhhbGZlZGdlcy5tYXAoZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICByZXR1cm4gY2VsbEhhbGZlZGdlU3RhcnQoY2VsbCwgZWRnZXNbaV0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcG9seWdvbi5kYXRhID0gY2VsbC5zaXRlLmRhdGE7XG4gICAgICAgIHJldHVybiBwb2x5Z29uO1xuICAgICAgfSk7XG4gICAgfSxcblxuICAgIHRyaWFuZ2xlczogZnVuY3Rpb24gdHJpYW5nbGVzKCkge1xuICAgICAgdmFyIHRyaWFuZ2xlcyA9IFtdLFxuICAgICAgICAgIGVkZ2VzID0gdGhpcy5lZGdlcztcblxuICAgICAgdGhpcy5jZWxscy5mb3JFYWNoKGZ1bmN0aW9uIChjZWxsLCBpKSB7XG4gICAgICAgIGlmICghKG0gPSAoaGFsZmVkZ2VzID0gY2VsbC5oYWxmZWRnZXMpLmxlbmd0aCkpIHJldHVybjtcbiAgICAgICAgdmFyIHNpdGUgPSBjZWxsLnNpdGUsXG4gICAgICAgICAgICBoYWxmZWRnZXMsXG4gICAgICAgICAgICBqID0gLTEsXG4gICAgICAgICAgICBtLFxuICAgICAgICAgICAgczAsXG4gICAgICAgICAgICBlMSA9IGVkZ2VzW2hhbGZlZGdlc1ttIC0gMV1dLFxuICAgICAgICAgICAgczEgPSBlMS5sZWZ0ID09PSBzaXRlID8gZTEucmlnaHQgOiBlMS5sZWZ0O1xuXG4gICAgICAgIHdoaWxlICgrK2ogPCBtKSB7XG4gICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICBlMSA9IGVkZ2VzW2hhbGZlZGdlc1tqXV07XG4gICAgICAgICAgczEgPSBlMS5sZWZ0ID09PSBzaXRlID8gZTEucmlnaHQgOiBlMS5sZWZ0O1xuICAgICAgICAgIGlmIChzMCAmJiBzMSAmJiBpIDwgczAuaW5kZXggJiYgaSA8IHMxLmluZGV4ICYmIHRyaWFuZ2xlQXJlYShzaXRlLCBzMCwgczEpIDwgMCkge1xuICAgICAgICAgICAgdHJpYW5nbGVzLnB1c2goW3NpdGUuZGF0YSwgczAuZGF0YSwgczEuZGF0YV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiB0cmlhbmdsZXM7XG4gICAgfSxcblxuICAgIGxpbmtzOiBmdW5jdGlvbiBsaW5rcygpIHtcbiAgICAgIHJldHVybiB0aGlzLmVkZ2VzLmZpbHRlcihmdW5jdGlvbiAoZWRnZSkge1xuICAgICAgICByZXR1cm4gZWRnZS5yaWdodDtcbiAgICAgIH0pLm1hcChmdW5jdGlvbiAoZWRnZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNvdXJjZTogZWRnZS5sZWZ0LmRhdGEsXG4gICAgICAgICAgdGFyZ2V0OiBlZGdlLnJpZ2h0LmRhdGFcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBmaW5kOiBmdW5jdGlvbiBmaW5kKHgsIHksIHJhZGl1cykge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgIGkwLFxuICAgICAgICAgIGkxID0gdGhhdC5fZm91bmQgfHwgMCxcbiAgICAgICAgICBuID0gdGhhdC5jZWxscy5sZW5ndGgsXG4gICAgICAgICAgY2VsbDtcblxuICAgICAgLy8gVXNlIHRoZSBwcmV2aW91c2x5LWZvdW5kIGNlbGwsIG9yIHN0YXJ0IHdpdGggYW4gYXJiaXRyYXJ5IG9uZS5cbiAgICAgIHdoaWxlICghKGNlbGwgPSB0aGF0LmNlbGxzW2kxXSkpIHtcbiAgICAgICAgaWYgKCsraTEgPj0gbikgcmV0dXJuIG51bGw7XG4gICAgICB9dmFyIGR4ID0geCAtIGNlbGwuc2l0ZVswXSxcbiAgICAgICAgICBkeSA9IHkgLSBjZWxsLnNpdGVbMV0sXG4gICAgICAgICAgZDIgPSBkeCAqIGR4ICsgZHkgKiBkeTtcblxuICAgICAgLy8gVHJhdmVyc2UgdGhlIGhhbGYtZWRnZXMgdG8gZmluZCBhIGNsb3NlciBjZWxsLCBpZiBhbnkuXG4gICAgICBkbyB7XG4gICAgICAgIGNlbGwgPSB0aGF0LmNlbGxzW2kwID0gaTFdLCBpMSA9IG51bGw7XG4gICAgICAgIGNlbGwuaGFsZmVkZ2VzLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICB2YXIgZWRnZSA9IHRoYXQuZWRnZXNbZV0sXG4gICAgICAgICAgICAgIHYgPSBlZGdlLmxlZnQ7XG4gICAgICAgICAgaWYgKCh2ID09PSBjZWxsLnNpdGUgfHwgIXYpICYmICEodiA9IGVkZ2UucmlnaHQpKSByZXR1cm47XG4gICAgICAgICAgdmFyIHZ4ID0geCAtIHZbMF0sXG4gICAgICAgICAgICAgIHZ5ID0geSAtIHZbMV0sXG4gICAgICAgICAgICAgIHYyID0gdnggKiB2eCArIHZ5ICogdnk7XG4gICAgICAgICAgaWYgKHYyIDwgZDIpIGQyID0gdjIsIGkxID0gdi5pbmRleDtcbiAgICAgICAgfSk7XG4gICAgICB9IHdoaWxlIChpMSAhPT0gbnVsbCk7XG5cbiAgICAgIHRoYXQuX2ZvdW5kID0gaTA7XG5cbiAgICAgIHJldHVybiByYWRpdXMgPT0gbnVsbCB8fCBkMiA8PSByYWRpdXMgKiByYWRpdXMgPyBjZWxsLnNpdGUgOiBudWxsO1xuICAgIH1cbiAgfTtcblxuICB2YXIgdm9yb25vaSA9IGZ1bmN0aW9uIHZvcm9ub2koKSB7XG4gICAgdmFyIHggPSB4JDQsXG4gICAgICAgIHkgPSB5JDQsXG4gICAgICAgIGV4dGVudCA9IG51bGw7XG5cbiAgICBmdW5jdGlvbiB2b3Jvbm9pKGRhdGEpIHtcbiAgICAgIHJldHVybiBuZXcgRGlhZ3JhbShkYXRhLm1hcChmdW5jdGlvbiAoZCwgaSkge1xuICAgICAgICB2YXIgcyA9IFtNYXRoLnJvdW5kKHgoZCwgaSwgZGF0YSkgLyBlcHNpbG9uJDQpICogZXBzaWxvbiQ0LCBNYXRoLnJvdW5kKHkoZCwgaSwgZGF0YSkgLyBlcHNpbG9uJDQpICogZXBzaWxvbiQ0XTtcbiAgICAgICAgcy5pbmRleCA9IGk7XG4gICAgICAgIHMuZGF0YSA9IGQ7XG4gICAgICAgIHJldHVybiBzO1xuICAgICAgfSksIGV4dGVudCk7XG4gICAgfVxuXG4gICAgdm9yb25vaS5wb2x5Z29ucyA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICByZXR1cm4gdm9yb25vaShkYXRhKS5wb2x5Z29ucygpO1xuICAgIH07XG5cbiAgICB2b3Jvbm9pLmxpbmtzID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIHJldHVybiB2b3Jvbm9pKGRhdGEpLmxpbmtzKCk7XG4gICAgfTtcblxuICAgIHZvcm9ub2kudHJpYW5nbGVzID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIHJldHVybiB2b3Jvbm9pKGRhdGEpLnRyaWFuZ2xlcygpO1xuICAgIH07XG5cbiAgICB2b3Jvbm9pLnggPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMTEoK18pLCB2b3Jvbm9pKSA6IHg7XG4gICAgfTtcblxuICAgIHZvcm9ub2kueSA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxMSgrXyksIHZvcm9ub2kpIDogeTtcbiAgICB9O1xuXG4gICAgdm9yb25vaS5leHRlbnQgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZXh0ZW50ID0gXyA9PSBudWxsID8gbnVsbCA6IFtbK19bMF1bMF0sICtfWzBdWzFdXSwgWytfWzFdWzBdLCArX1sxXVsxXV1dLCB2b3Jvbm9pKSA6IGV4dGVudCAmJiBbW2V4dGVudFswXVswXSwgZXh0ZW50WzBdWzFdXSwgW2V4dGVudFsxXVswXSwgZXh0ZW50WzFdWzFdXV07XG4gICAgfTtcblxuICAgIHZvcm9ub2kuc2l6ZSA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChleHRlbnQgPSBfID09IG51bGwgPyBudWxsIDogW1swLCAwXSwgWytfWzBdLCArX1sxXV1dLCB2b3Jvbm9pKSA6IGV4dGVudCAmJiBbZXh0ZW50WzFdWzBdIC0gZXh0ZW50WzBdWzBdLCBleHRlbnRbMV1bMV0gLSBleHRlbnRbMF1bMV1dO1xuICAgIH07XG5cbiAgICByZXR1cm4gdm9yb25vaTtcbiAgfTtcblxuICB2YXIgY29uc3RhbnQkMTIgPSBmdW5jdGlvbiBjb25zdGFudCQxMih4KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB4O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gWm9vbUV2ZW50KHRhcmdldCwgdHlwZSwgdHJhbnNmb3JtKSB7XG4gICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgfVxuXG4gIGZ1bmN0aW9uIFRyYW5zZm9ybShrLCB4LCB5KSB7XG4gICAgdGhpcy5rID0gaztcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gIH1cblxuICBUcmFuc2Zvcm0ucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBUcmFuc2Zvcm0sXG4gICAgc2NhbGU6IGZ1bmN0aW9uIHNjYWxlKGspIHtcbiAgICAgIHJldHVybiBrID09PSAxID8gdGhpcyA6IG5ldyBUcmFuc2Zvcm0odGhpcy5rICogaywgdGhpcy54LCB0aGlzLnkpO1xuICAgIH0sXG4gICAgdHJhbnNsYXRlOiBmdW5jdGlvbiB0cmFuc2xhdGUoeCwgeSkge1xuICAgICAgcmV0dXJuIHggPT09IDAgJiB5ID09PSAwID8gdGhpcyA6IG5ldyBUcmFuc2Zvcm0odGhpcy5rLCB0aGlzLnggKyB0aGlzLmsgKiB4LCB0aGlzLnkgKyB0aGlzLmsgKiB5KTtcbiAgICB9LFxuICAgIGFwcGx5OiBmdW5jdGlvbiBhcHBseShwb2ludCkge1xuICAgICAgcmV0dXJuIFtwb2ludFswXSAqIHRoaXMuayArIHRoaXMueCwgcG9pbnRbMV0gKiB0aGlzLmsgKyB0aGlzLnldO1xuICAgIH0sXG4gICAgYXBwbHlYOiBmdW5jdGlvbiBhcHBseVgoeCkge1xuICAgICAgcmV0dXJuIHggKiB0aGlzLmsgKyB0aGlzLng7XG4gICAgfSxcbiAgICBhcHBseVk6IGZ1bmN0aW9uIGFwcGx5WSh5KSB7XG4gICAgICByZXR1cm4geSAqIHRoaXMuayArIHRoaXMueTtcbiAgICB9LFxuICAgIGludmVydDogZnVuY3Rpb24gaW52ZXJ0KGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gWyhsb2NhdGlvblswXSAtIHRoaXMueCkgLyB0aGlzLmssIChsb2NhdGlvblsxXSAtIHRoaXMueSkgLyB0aGlzLmtdO1xuICAgIH0sXG4gICAgaW52ZXJ0WDogZnVuY3Rpb24gaW52ZXJ0WCh4KSB7XG4gICAgICByZXR1cm4gKHggLSB0aGlzLngpIC8gdGhpcy5rO1xuICAgIH0sXG4gICAgaW52ZXJ0WTogZnVuY3Rpb24gaW52ZXJ0WSh5KSB7XG4gICAgICByZXR1cm4gKHkgLSB0aGlzLnkpIC8gdGhpcy5rO1xuICAgIH0sXG4gICAgcmVzY2FsZVg6IGZ1bmN0aW9uIHJlc2NhbGVYKHgpIHtcbiAgICAgIHJldHVybiB4LmNvcHkoKS5kb21haW4oeC5yYW5nZSgpLm1hcCh0aGlzLmludmVydFgsIHRoaXMpLm1hcCh4LmludmVydCwgeCkpO1xuICAgIH0sXG4gICAgcmVzY2FsZVk6IGZ1bmN0aW9uIHJlc2NhbGVZKHkpIHtcbiAgICAgIHJldHVybiB5LmNvcHkoKS5kb21haW4oeS5yYW5nZSgpLm1hcCh0aGlzLmludmVydFksIHRoaXMpLm1hcCh5LmludmVydCwgeSkpO1xuICAgIH0sXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgdGhpcy54ICsgXCIsXCIgKyB0aGlzLnkgKyBcIikgc2NhbGUoXCIgKyB0aGlzLmsgKyBcIilcIjtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlkZW50aXR5JDggPSBuZXcgVHJhbnNmb3JtKDEsIDAsIDApO1xuXG4gIHRyYW5zZm9ybSQxLnByb3RvdHlwZSA9IFRyYW5zZm9ybS5wcm90b3R5cGU7XG5cbiAgZnVuY3Rpb24gdHJhbnNmb3JtJDEobm9kZSkge1xuICAgIHJldHVybiBub2RlLl9fem9vbSB8fCBpZGVudGl0eSQ4O1xuICB9XG5cbiAgZnVuY3Rpb24gbm9wcm9wYWdhdGlvbiQyKCkge1xuICAgIGV4cG9ydHMuZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gIH1cblxuICB2YXIgbm9ldmVudCQyID0gZnVuY3Rpb24gbm9ldmVudCQyKCkge1xuICAgIGV4cG9ydHMuZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBleHBvcnRzLmV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICB9O1xuXG4gIC8vIElnbm9yZSByaWdodC1jbGljaywgc2luY2UgdGhhdCBzaG91bGQgb3BlbiB0aGUgY29udGV4dCBtZW51LlxuICBmdW5jdGlvbiBkZWZhdWx0RmlsdGVyJDIoKSB7XG4gICAgcmV0dXJuICFleHBvcnRzLmV2ZW50LmJ1dHRvbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlZmF1bHRFeHRlbnQkMSgpIHtcbiAgICB2YXIgZSA9IHRoaXMsXG4gICAgICAgIHcsXG4gICAgICAgIGg7XG4gICAgaWYgKGUgaW5zdGFuY2VvZiBTVkdFbGVtZW50KSB7XG4gICAgICBlID0gZS5vd25lclNWR0VsZW1lbnQgfHwgZTtcbiAgICAgIHcgPSBlLndpZHRoLmJhc2VWYWwudmFsdWU7XG4gICAgICBoID0gZS5oZWlnaHQuYmFzZVZhbC52YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdyA9IGUuY2xpZW50V2lkdGg7XG4gICAgICBoID0gZS5jbGllbnRIZWlnaHQ7XG4gICAgfVxuICAgIHJldHVybiBbWzAsIDBdLCBbdywgaF1dO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVmYXVsdFRyYW5zZm9ybSgpIHtcbiAgICByZXR1cm4gdGhpcy5fX3pvb20gfHwgaWRlbnRpdHkkODtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlZmF1bHRXaGVlbERlbHRhKCkge1xuICAgIHJldHVybiAtZXhwb3J0cy5ldmVudC5kZWx0YVkgKiAoZXhwb3J0cy5ldmVudC5kZWx0YU1vZGUgPyAxMjAgOiAxKSAvIDUwMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNoYWJsZSQxKCkge1xuICAgIHJldHVybiBcIm9udG91Y2hzdGFydFwiIGluIHRoaXM7XG4gIH1cblxuICB2YXIgem9vbSA9IGZ1bmN0aW9uIHpvb20oKSB7XG4gICAgdmFyIGZpbHRlciA9IGRlZmF1bHRGaWx0ZXIkMixcbiAgICAgICAgZXh0ZW50ID0gZGVmYXVsdEV4dGVudCQxLFxuICAgICAgICB3aGVlbERlbHRhID0gZGVmYXVsdFdoZWVsRGVsdGEsXG4gICAgICAgIGswID0gMCxcbiAgICAgICAgazEgPSBJbmZpbml0eSxcbiAgICAgICAgeDAgPSAtazEsXG4gICAgICAgIHgxID0gazEsXG4gICAgICAgIHkwID0geDAsXG4gICAgICAgIHkxID0geDEsXG4gICAgICAgIGR1cmF0aW9uID0gMjUwLFxuICAgICAgICBpbnRlcnBvbGF0ZSA9IGludGVycG9sYXRlWm9vbSxcbiAgICAgICAgZ2VzdHVyZXMgPSBbXSxcbiAgICAgICAgbGlzdGVuZXJzID0gZGlzcGF0Y2goXCJzdGFydFwiLCBcInpvb21cIiwgXCJlbmRcIiksXG4gICAgICAgIHRvdWNoc3RhcnRpbmcsXG4gICAgICAgIHRvdWNoZW5kaW5nLFxuICAgICAgICB0b3VjaERlbGF5ID0gNTAwLFxuICAgICAgICB3aGVlbERlbGF5ID0gMTUwLFxuICAgICAgICBjbGlja0Rpc3RhbmNlMiA9IDA7XG5cbiAgICBmdW5jdGlvbiB6b29tKHNlbGVjdGlvbiQkMSkge1xuICAgICAgc2VsZWN0aW9uJCQxLnByb3BlcnR5KFwiX196b29tXCIsIGRlZmF1bHRUcmFuc2Zvcm0pLm9uKFwid2hlZWwuem9vbVwiLCB3aGVlbGVkKS5vbihcIm1vdXNlZG93bi56b29tXCIsIG1vdXNlZG93bmVkKS5vbihcImRibGNsaWNrLnpvb21cIiwgZGJsY2xpY2tlZCkuZmlsdGVyKHRvdWNoYWJsZSQxKS5vbihcInRvdWNoc3RhcnQuem9vbVwiLCB0b3VjaHN0YXJ0ZWQpLm9uKFwidG91Y2htb3ZlLnpvb21cIiwgdG91Y2htb3ZlZCkub24oXCJ0b3VjaGVuZC56b29tIHRvdWNoY2FuY2VsLnpvb21cIiwgdG91Y2hlbmRlZCkuc3R5bGUoXCJ0b3VjaC1hY3Rpb25cIiwgXCJub25lXCIpLnN0eWxlKFwiLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yXCIsIFwicmdiYSgwLDAsMCwwKVwiKTtcbiAgICB9XG5cbiAgICB6b29tLnRyYW5zZm9ybSA9IGZ1bmN0aW9uIChjb2xsZWN0aW9uLCB0cmFuc2Zvcm0kJDEpIHtcbiAgICAgIHZhciBzZWxlY3Rpb24kJDEgPSBjb2xsZWN0aW9uLnNlbGVjdGlvbiA/IGNvbGxlY3Rpb24uc2VsZWN0aW9uKCkgOiBjb2xsZWN0aW9uO1xuICAgICAgc2VsZWN0aW9uJCQxLnByb3BlcnR5KFwiX196b29tXCIsIGRlZmF1bHRUcmFuc2Zvcm0pO1xuICAgICAgaWYgKGNvbGxlY3Rpb24gIT09IHNlbGVjdGlvbiQkMSkge1xuICAgICAgICBzY2hlZHVsZShjb2xsZWN0aW9uLCB0cmFuc2Zvcm0kJDEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZWN0aW9uJCQxLmludGVycnVwdCgpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGdlc3R1cmUodGhpcywgYXJndW1lbnRzKS5zdGFydCgpLnpvb20obnVsbCwgdHlwZW9mIHRyYW5zZm9ybSQkMSA9PT0gXCJmdW5jdGlvblwiID8gdHJhbnNmb3JtJCQxLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiB0cmFuc2Zvcm0kJDEpLmVuZCgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgem9vbS5zY2FsZUJ5ID0gZnVuY3Rpb24gKHNlbGVjdGlvbiQkMSwgaykge1xuICAgICAgem9vbS5zY2FsZVRvKHNlbGVjdGlvbiQkMSwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgazAgPSB0aGlzLl9fem9vbS5rLFxuICAgICAgICAgICAgazEgPSB0eXBlb2YgayA9PT0gXCJmdW5jdGlvblwiID8gay5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogaztcbiAgICAgICAgcmV0dXJuIGswICogazE7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgem9vbS5zY2FsZVRvID0gZnVuY3Rpb24gKHNlbGVjdGlvbiQkMSwgaykge1xuICAgICAgem9vbS50cmFuc2Zvcm0oc2VsZWN0aW9uJCQxLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlID0gZXh0ZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgICAgICB0MCA9IHRoaXMuX196b29tLFxuICAgICAgICAgICAgcDAgPSBjZW50cm9pZChlKSxcbiAgICAgICAgICAgIHAxID0gdDAuaW52ZXJ0KHAwKSxcbiAgICAgICAgICAgIGsxID0gdHlwZW9mIGsgPT09IFwiZnVuY3Rpb25cIiA/IGsuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IGs7XG4gICAgICAgIHJldHVybiBjb25zdHJhaW4odHJhbnNsYXRlKHNjYWxlKHQwLCBrMSksIHAwLCBwMSksIGUpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHpvb20udHJhbnNsYXRlQnkgPSBmdW5jdGlvbiAoc2VsZWN0aW9uJCQxLCB4LCB5KSB7XG4gICAgICB6b29tLnRyYW5zZm9ybShzZWxlY3Rpb24kJDEsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGNvbnN0cmFpbih0aGlzLl9fem9vbS50cmFuc2xhdGUodHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHguYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHgsIHR5cGVvZiB5ID09PSBcImZ1bmN0aW9uXCIgPyB5LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiB5KSwgZXh0ZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHpvb20udHJhbnNsYXRlVG8gPSBmdW5jdGlvbiAoc2VsZWN0aW9uJCQxLCB4LCB5KSB7XG4gICAgICB6b29tLnRyYW5zZm9ybShzZWxlY3Rpb24kJDEsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGUgPSBleHRlbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgICAgIHQgPSB0aGlzLl9fem9vbSxcbiAgICAgICAgICAgIHAgPSBjZW50cm9pZChlKTtcbiAgICAgICAgcmV0dXJuIGNvbnN0cmFpbihpZGVudGl0eSQ4LnRyYW5zbGF0ZShwWzBdLCBwWzFdKS5zY2FsZSh0LmspLnRyYW5zbGF0ZSh0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8gLXguYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IC14LCB0eXBlb2YgeSA9PT0gXCJmdW5jdGlvblwiID8gLXkuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IC15KSwgZSk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gc2NhbGUodHJhbnNmb3JtJCQxLCBrKSB7XG4gICAgICBrID0gTWF0aC5tYXgoazAsIE1hdGgubWluKGsxLCBrKSk7XG4gICAgICByZXR1cm4gayA9PT0gdHJhbnNmb3JtJCQxLmsgPyB0cmFuc2Zvcm0kJDEgOiBuZXcgVHJhbnNmb3JtKGssIHRyYW5zZm9ybSQkMS54LCB0cmFuc2Zvcm0kJDEueSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlKHRyYW5zZm9ybSQkMSwgcDAsIHAxKSB7XG4gICAgICB2YXIgeCA9IHAwWzBdIC0gcDFbMF0gKiB0cmFuc2Zvcm0kJDEuayxcbiAgICAgICAgICB5ID0gcDBbMV0gLSBwMVsxXSAqIHRyYW5zZm9ybSQkMS5rO1xuICAgICAgcmV0dXJuIHggPT09IHRyYW5zZm9ybSQkMS54ICYmIHkgPT09IHRyYW5zZm9ybSQkMS55ID8gdHJhbnNmb3JtJCQxIDogbmV3IFRyYW5zZm9ybSh0cmFuc2Zvcm0kJDEuaywgeCwgeSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29uc3RyYWluKHRyYW5zZm9ybSQkMSwgZXh0ZW50KSB7XG4gICAgICB2YXIgZHgwID0gdHJhbnNmb3JtJCQxLmludmVydFgoZXh0ZW50WzBdWzBdKSAtIHgwLFxuICAgICAgICAgIGR4MSA9IHRyYW5zZm9ybSQkMS5pbnZlcnRYKGV4dGVudFsxXVswXSkgLSB4MSxcbiAgICAgICAgICBkeTAgPSB0cmFuc2Zvcm0kJDEuaW52ZXJ0WShleHRlbnRbMF1bMV0pIC0geTAsXG4gICAgICAgICAgZHkxID0gdHJhbnNmb3JtJCQxLmludmVydFkoZXh0ZW50WzFdWzFdKSAtIHkxO1xuICAgICAgcmV0dXJuIHRyYW5zZm9ybSQkMS50cmFuc2xhdGUoZHgxID4gZHgwID8gKGR4MCArIGR4MSkgLyAyIDogTWF0aC5taW4oMCwgZHgwKSB8fCBNYXRoLm1heCgwLCBkeDEpLCBkeTEgPiBkeTAgPyAoZHkwICsgZHkxKSAvIDIgOiBNYXRoLm1pbigwLCBkeTApIHx8IE1hdGgubWF4KDAsIGR5MSkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNlbnRyb2lkKGV4dGVudCkge1xuICAgICAgcmV0dXJuIFsoK2V4dGVudFswXVswXSArICtleHRlbnRbMV1bMF0pIC8gMiwgKCtleHRlbnRbMF1bMV0gKyArZXh0ZW50WzFdWzFdKSAvIDJdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNjaGVkdWxlKHRyYW5zaXRpb24kJDEsIHRyYW5zZm9ybSQkMSwgY2VudGVyKSB7XG4gICAgICB0cmFuc2l0aW9uJCQxLm9uKFwic3RhcnQuem9vbVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGdlc3R1cmUodGhpcywgYXJndW1lbnRzKS5zdGFydCgpO1xuICAgICAgfSkub24oXCJpbnRlcnJ1cHQuem9vbSBlbmQuem9vbVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGdlc3R1cmUodGhpcywgYXJndW1lbnRzKS5lbmQoKTtcbiAgICAgIH0pLnR3ZWVuKFwiem9vbVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICBnID0gZ2VzdHVyZSh0aGF0LCBhcmdzKSxcbiAgICAgICAgICAgIGUgPSBleHRlbnQuYXBwbHkodGhhdCwgYXJncyksXG4gICAgICAgICAgICBwID0gY2VudGVyIHx8IGNlbnRyb2lkKGUpLFxuICAgICAgICAgICAgdyA9IE1hdGgubWF4KGVbMV1bMF0gLSBlWzBdWzBdLCBlWzFdWzFdIC0gZVswXVsxXSksXG4gICAgICAgICAgICBhID0gdGhhdC5fX3pvb20sXG4gICAgICAgICAgICBiID0gdHlwZW9mIHRyYW5zZm9ybSQkMSA9PT0gXCJmdW5jdGlvblwiID8gdHJhbnNmb3JtJCQxLmFwcGx5KHRoYXQsIGFyZ3MpIDogdHJhbnNmb3JtJCQxLFxuICAgICAgICAgICAgaSA9IGludGVycG9sYXRlKGEuaW52ZXJ0KHApLmNvbmNhdCh3IC8gYS5rKSwgYi5pbnZlcnQocCkuY29uY2F0KHcgLyBiLmspKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgaWYgKHQgPT09IDEpIHQgPSBiOyAvLyBBdm9pZCByb3VuZGluZyBlcnJvciBvbiBlbmQuXG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIHZhciBsID0gaSh0KSxcbiAgICAgICAgICAgICAgICAgIGsgPSB3IC8gbFsyXTt0ID0gbmV3IFRyYW5zZm9ybShrLCBwWzBdIC0gbFswXSAqIGssIHBbMV0gLSBsWzFdICogayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgZy56b29tKG51bGwsIHQpO1xuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VzdHVyZSh0aGF0LCBhcmdzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbiA9IGdlc3R1cmVzLmxlbmd0aCwgZzsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAoKGcgPSBnZXN0dXJlc1tpXSkudGhhdCA9PT0gdGhhdCkge1xuICAgICAgICAgIHJldHVybiBnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IEdlc3R1cmUodGhhdCwgYXJncyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gR2VzdHVyZSh0aGF0LCBhcmdzKSB7XG4gICAgICB0aGlzLnRoYXQgPSB0aGF0O1xuICAgICAgdGhpcy5hcmdzID0gYXJncztcbiAgICAgIHRoaXMuaW5kZXggPSAtMTtcbiAgICAgIHRoaXMuYWN0aXZlID0gMDtcbiAgICAgIHRoaXMuZXh0ZW50ID0gZXh0ZW50LmFwcGx5KHRoYXQsIGFyZ3MpO1xuICAgIH1cblxuICAgIEdlc3R1cmUucHJvdG90eXBlID0ge1xuICAgICAgc3RhcnQ6IGZ1bmN0aW9uIHN0YXJ0KCkge1xuICAgICAgICBpZiAoKyt0aGlzLmFjdGl2ZSA9PT0gMSkge1xuICAgICAgICAgIHRoaXMuaW5kZXggPSBnZXN0dXJlcy5wdXNoKHRoaXMpIC0gMTtcbiAgICAgICAgICB0aGlzLmVtaXQoXCJzdGFydFwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0sXG4gICAgICB6b29tOiBmdW5jdGlvbiB6b29tKGtleSwgdHJhbnNmb3JtJCQxKSB7XG4gICAgICAgIGlmICh0aGlzLm1vdXNlICYmIGtleSAhPT0gXCJtb3VzZVwiKSB0aGlzLm1vdXNlWzFdID0gdHJhbnNmb3JtJCQxLmludmVydCh0aGlzLm1vdXNlWzBdKTtcbiAgICAgICAgaWYgKHRoaXMudG91Y2gwICYmIGtleSAhPT0gXCJ0b3VjaFwiKSB0aGlzLnRvdWNoMFsxXSA9IHRyYW5zZm9ybSQkMS5pbnZlcnQodGhpcy50b3VjaDBbMF0pO1xuICAgICAgICBpZiAodGhpcy50b3VjaDEgJiYga2V5ICE9PSBcInRvdWNoXCIpIHRoaXMudG91Y2gxWzFdID0gdHJhbnNmb3JtJCQxLmludmVydCh0aGlzLnRvdWNoMVswXSk7XG4gICAgICAgIHRoaXMudGhhdC5fX3pvb20gPSB0cmFuc2Zvcm0kJDE7XG4gICAgICAgIHRoaXMuZW1pdChcInpvb21cIik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSxcbiAgICAgIGVuZDogZnVuY3Rpb24gZW5kKCkge1xuICAgICAgICBpZiAoLS10aGlzLmFjdGl2ZSA9PT0gMCkge1xuICAgICAgICAgIGdlc3R1cmVzLnNwbGljZSh0aGlzLmluZGV4LCAxKTtcbiAgICAgICAgICB0aGlzLmluZGV4ID0gLTE7XG4gICAgICAgICAgdGhpcy5lbWl0KFwiZW5kXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSxcbiAgICAgIGVtaXQ6IGZ1bmN0aW9uIGVtaXQodHlwZSkge1xuICAgICAgICBjdXN0b21FdmVudChuZXcgWm9vbUV2ZW50KHpvb20sIHR5cGUsIHRoaXMudGhhdC5fX3pvb20pLCBsaXN0ZW5lcnMuYXBwbHksIGxpc3RlbmVycywgW3R5cGUsIHRoaXMudGhhdCwgdGhpcy5hcmdzXSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHdoZWVsZWQoKSB7XG4gICAgICBpZiAoIWZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSByZXR1cm47XG4gICAgICB2YXIgZyA9IGdlc3R1cmUodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgICB0ID0gdGhpcy5fX3pvb20sXG4gICAgICAgICAgayA9IE1hdGgubWF4KGswLCBNYXRoLm1pbihrMSwgdC5rICogTWF0aC5wb3coMiwgd2hlZWxEZWx0YS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSkpLFxuICAgICAgICAgIHAgPSBtb3VzZSh0aGlzKTtcblxuICAgICAgLy8gSWYgdGhlIG1vdXNlIGlzIGluIHRoZSBzYW1lIGxvY2F0aW9uIGFzIGJlZm9yZSwgcmV1c2UgaXQuXG4gICAgICAvLyBJZiB0aGVyZSB3ZXJlIHJlY2VudCB3aGVlbCBldmVudHMsIHJlc2V0IHRoZSB3aGVlbCBpZGxlIHRpbWVvdXQuXG4gICAgICBpZiAoZy53aGVlbCkge1xuICAgICAgICBpZiAoZy5tb3VzZVswXVswXSAhPT0gcFswXSB8fCBnLm1vdXNlWzBdWzFdICE9PSBwWzFdKSB7XG4gICAgICAgICAgZy5tb3VzZVsxXSA9IHQuaW52ZXJ0KGcubW91c2VbMF0gPSBwKTtcbiAgICAgICAgfVxuICAgICAgICBjbGVhclRpbWVvdXQoZy53aGVlbCk7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHRoaXMgd2hlZWwgZXZlbnQgd29u4oCZdCB0cmlnZ2VyIGEgdHJhbnNmb3JtIGNoYW5nZSwgaWdub3JlIGl0LlxuICAgICAgZWxzZSBpZiAodC5rID09PSBrKSByZXR1cm47XG5cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCBjYXB0dXJlIHRoZSBtb3VzZSBwb2ludCBhbmQgbG9jYXRpb24gYXQgdGhlIHN0YXJ0LlxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGcubW91c2UgPSBbcCwgdC5pbnZlcnQocCldO1xuICAgICAgICAgICAgaW50ZXJydXB0KHRoaXMpO1xuICAgICAgICAgICAgZy5zdGFydCgpO1xuICAgICAgICAgIH1cblxuICAgICAgbm9ldmVudCQyKCk7XG4gICAgICBnLndoZWVsID0gc2V0VGltZW91dCh3aGVlbGlkbGVkLCB3aGVlbERlbGF5KTtcbiAgICAgIGcuem9vbShcIm1vdXNlXCIsIGNvbnN0cmFpbih0cmFuc2xhdGUoc2NhbGUodCwgayksIGcubW91c2VbMF0sIGcubW91c2VbMV0pLCBnLmV4dGVudCkpO1xuXG4gICAgICBmdW5jdGlvbiB3aGVlbGlkbGVkKCkge1xuICAgICAgICBnLndoZWVsID0gbnVsbDtcbiAgICAgICAgZy5lbmQoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb3VzZWRvd25lZCgpIHtcbiAgICAgIGlmICh0b3VjaGVuZGluZyB8fCAhZmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHJldHVybjtcbiAgICAgIHZhciBnID0gZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICAgIHYgPSBzZWxlY3QoZXhwb3J0cy5ldmVudC52aWV3KS5vbihcIm1vdXNlbW92ZS56b29tXCIsIG1vdXNlbW92ZWQsIHRydWUpLm9uKFwibW91c2V1cC56b29tXCIsIG1vdXNldXBwZWQsIHRydWUpLFxuICAgICAgICAgIHAgPSBtb3VzZSh0aGlzKSxcbiAgICAgICAgICB4MCA9IGV4cG9ydHMuZXZlbnQuY2xpZW50WCxcbiAgICAgICAgICB5MCA9IGV4cG9ydHMuZXZlbnQuY2xpZW50WTtcblxuICAgICAgZHJhZ0Rpc2FibGUoZXhwb3J0cy5ldmVudC52aWV3KTtcbiAgICAgIG5vcHJvcGFnYXRpb24kMigpO1xuICAgICAgZy5tb3VzZSA9IFtwLCB0aGlzLl9fem9vbS5pbnZlcnQocCldO1xuICAgICAgaW50ZXJydXB0KHRoaXMpO1xuICAgICAgZy5zdGFydCgpO1xuXG4gICAgICBmdW5jdGlvbiBtb3VzZW1vdmVkKCkge1xuICAgICAgICBub2V2ZW50JDIoKTtcbiAgICAgICAgaWYgKCFnLm1vdmVkKSB7XG4gICAgICAgICAgdmFyIGR4ID0gZXhwb3J0cy5ldmVudC5jbGllbnRYIC0geDAsXG4gICAgICAgICAgICAgIGR5ID0gZXhwb3J0cy5ldmVudC5jbGllbnRZIC0geTA7XG4gICAgICAgICAgZy5tb3ZlZCA9IGR4ICogZHggKyBkeSAqIGR5ID4gY2xpY2tEaXN0YW5jZTI7XG4gICAgICAgIH1cbiAgICAgICAgZy56b29tKFwibW91c2VcIiwgY29uc3RyYWluKHRyYW5zbGF0ZShnLnRoYXQuX196b29tLCBnLm1vdXNlWzBdID0gbW91c2UoZy50aGF0KSwgZy5tb3VzZVsxXSksIGcuZXh0ZW50KSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIG1vdXNldXBwZWQoKSB7XG4gICAgICAgIHYub24oXCJtb3VzZW1vdmUuem9vbSBtb3VzZXVwLnpvb21cIiwgbnVsbCk7XG4gICAgICAgIHllc2RyYWcoZXhwb3J0cy5ldmVudC52aWV3LCBnLm1vdmVkKTtcbiAgICAgICAgbm9ldmVudCQyKCk7XG4gICAgICAgIGcuZW5kKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGJsY2xpY2tlZCgpIHtcbiAgICAgIGlmICghZmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHJldHVybjtcbiAgICAgIHZhciB0MCA9IHRoaXMuX196b29tLFxuICAgICAgICAgIHAwID0gbW91c2UodGhpcyksXG4gICAgICAgICAgcDEgPSB0MC5pbnZlcnQocDApLFxuICAgICAgICAgIGsxID0gdDAuayAqIChleHBvcnRzLmV2ZW50LnNoaWZ0S2V5ID8gMC41IDogMiksXG4gICAgICAgICAgdDEgPSBjb25zdHJhaW4odHJhbnNsYXRlKHNjYWxlKHQwLCBrMSksIHAwLCBwMSksIGV4dGVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcblxuICAgICAgbm9ldmVudCQyKCk7XG4gICAgICBpZiAoZHVyYXRpb24gPiAwKSBzZWxlY3QodGhpcykudHJhbnNpdGlvbigpLmR1cmF0aW9uKGR1cmF0aW9uKS5jYWxsKHNjaGVkdWxlLCB0MSwgcDApO2Vsc2Ugc2VsZWN0KHRoaXMpLmNhbGwoem9vbS50cmFuc2Zvcm0sIHQxKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b3VjaHN0YXJ0ZWQoKSB7XG4gICAgICBpZiAoIWZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSByZXR1cm47XG4gICAgICB2YXIgZyA9IGdlc3R1cmUodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgICB0b3VjaGVzJCQxID0gZXhwb3J0cy5ldmVudC5jaGFuZ2VkVG91Y2hlcyxcbiAgICAgICAgICBzdGFydGVkLFxuICAgICAgICAgIG4gPSB0b3VjaGVzJCQxLmxlbmd0aCxcbiAgICAgICAgICBpLFxuICAgICAgICAgIHQsXG4gICAgICAgICAgcDtcblxuICAgICAgbm9wcm9wYWdhdGlvbiQyKCk7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIHQgPSB0b3VjaGVzJCQxW2ldLCBwID0gdG91Y2godGhpcywgdG91Y2hlcyQkMSwgdC5pZGVudGlmaWVyKTtcbiAgICAgICAgcCA9IFtwLCB0aGlzLl9fem9vbS5pbnZlcnQocCksIHQuaWRlbnRpZmllcl07XG4gICAgICAgIGlmICghZy50b3VjaDApIGcudG91Y2gwID0gcCwgc3RhcnRlZCA9IHRydWU7ZWxzZSBpZiAoIWcudG91Y2gxKSBnLnRvdWNoMSA9IHA7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHRoaXMgaXMgYSBkYmx0YXAsIHJlcm91dGUgdG8gdGhlIChvcHRpb25hbCkgZGJsY2xpY2suem9vbSBoYW5kbGVyLlxuICAgICAgaWYgKHRvdWNoc3RhcnRpbmcpIHtcbiAgICAgICAgdG91Y2hzdGFydGluZyA9IGNsZWFyVGltZW91dCh0b3VjaHN0YXJ0aW5nKTtcbiAgICAgICAgaWYgKCFnLnRvdWNoMSkge1xuICAgICAgICAgIGcuZW5kKCk7XG4gICAgICAgICAgcCA9IHNlbGVjdCh0aGlzKS5vbihcImRibGNsaWNrLnpvb21cIik7XG4gICAgICAgICAgaWYgKHApIHAuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXJ0ZWQpIHtcbiAgICAgICAgdG91Y2hzdGFydGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRvdWNoc3RhcnRpbmcgPSBudWxsO1xuICAgICAgICB9LCB0b3VjaERlbGF5KTtcbiAgICAgICAgaW50ZXJydXB0KHRoaXMpO1xuICAgICAgICBnLnN0YXJ0KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG91Y2htb3ZlZCgpIHtcbiAgICAgIHZhciBnID0gZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICAgIHRvdWNoZXMkJDEgPSBleHBvcnRzLmV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICAgIG4gPSB0b3VjaGVzJCQxLmxlbmd0aCxcbiAgICAgICAgICBpLFxuICAgICAgICAgIHQsXG4gICAgICAgICAgcCxcbiAgICAgICAgICBsO1xuXG4gICAgICBub2V2ZW50JDIoKTtcbiAgICAgIGlmICh0b3VjaHN0YXJ0aW5nKSB0b3VjaHN0YXJ0aW5nID0gY2xlYXJUaW1lb3V0KHRvdWNoc3RhcnRpbmcpO1xuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICB0ID0gdG91Y2hlcyQkMVtpXSwgcCA9IHRvdWNoKHRoaXMsIHRvdWNoZXMkJDEsIHQuaWRlbnRpZmllcik7XG4gICAgICAgIGlmIChnLnRvdWNoMCAmJiBnLnRvdWNoMFsyXSA9PT0gdC5pZGVudGlmaWVyKSBnLnRvdWNoMFswXSA9IHA7ZWxzZSBpZiAoZy50b3VjaDEgJiYgZy50b3VjaDFbMl0gPT09IHQuaWRlbnRpZmllcikgZy50b3VjaDFbMF0gPSBwO1xuICAgICAgfVxuICAgICAgdCA9IGcudGhhdC5fX3pvb207XG4gICAgICBpZiAoZy50b3VjaDEpIHtcbiAgICAgICAgdmFyIHAwID0gZy50b3VjaDBbMF0sXG4gICAgICAgICAgICBsMCA9IGcudG91Y2gwWzFdLFxuICAgICAgICAgICAgcDEgPSBnLnRvdWNoMVswXSxcbiAgICAgICAgICAgIGwxID0gZy50b3VjaDFbMV0sXG4gICAgICAgICAgICBkcCA9IChkcCA9IHAxWzBdIC0gcDBbMF0pICogZHAgKyAoZHAgPSBwMVsxXSAtIHAwWzFdKSAqIGRwLFxuICAgICAgICAgICAgZGwgPSAoZGwgPSBsMVswXSAtIGwwWzBdKSAqIGRsICsgKGRsID0gbDFbMV0gLSBsMFsxXSkgKiBkbDtcbiAgICAgICAgdCA9IHNjYWxlKHQsIE1hdGguc3FydChkcCAvIGRsKSk7XG4gICAgICAgIHAgPSBbKHAwWzBdICsgcDFbMF0pIC8gMiwgKHAwWzFdICsgcDFbMV0pIC8gMl07XG4gICAgICAgIGwgPSBbKGwwWzBdICsgbDFbMF0pIC8gMiwgKGwwWzFdICsgbDFbMV0pIC8gMl07XG4gICAgICB9IGVsc2UgaWYgKGcudG91Y2gwKSBwID0gZy50b3VjaDBbMF0sIGwgPSBnLnRvdWNoMFsxXTtlbHNlIHJldHVybjtcbiAgICAgIGcuem9vbShcInRvdWNoXCIsIGNvbnN0cmFpbih0cmFuc2xhdGUodCwgcCwgbCksIGcuZXh0ZW50KSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG91Y2hlbmRlZCgpIHtcbiAgICAgIHZhciBnID0gZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICAgIHRvdWNoZXMkJDEgPSBleHBvcnRzLmV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICAgIG4gPSB0b3VjaGVzJCQxLmxlbmd0aCxcbiAgICAgICAgICBpLFxuICAgICAgICAgIHQ7XG5cbiAgICAgIG5vcHJvcGFnYXRpb24kMigpO1xuICAgICAgaWYgKHRvdWNoZW5kaW5nKSBjbGVhclRpbWVvdXQodG91Y2hlbmRpbmcpO1xuICAgICAgdG91Y2hlbmRpbmcgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdG91Y2hlbmRpbmcgPSBudWxsO1xuICAgICAgfSwgdG91Y2hEZWxheSk7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIHQgPSB0b3VjaGVzJCQxW2ldO1xuICAgICAgICBpZiAoZy50b3VjaDAgJiYgZy50b3VjaDBbMl0gPT09IHQuaWRlbnRpZmllcikgZGVsZXRlIGcudG91Y2gwO2Vsc2UgaWYgKGcudG91Y2gxICYmIGcudG91Y2gxWzJdID09PSB0LmlkZW50aWZpZXIpIGRlbGV0ZSBnLnRvdWNoMTtcbiAgICAgIH1cbiAgICAgIGlmIChnLnRvdWNoMSAmJiAhZy50b3VjaDApIGcudG91Y2gwID0gZy50b3VjaDEsIGRlbGV0ZSBnLnRvdWNoMTtcbiAgICAgIGlmIChnLnRvdWNoMCkgZy50b3VjaDBbMV0gPSB0aGlzLl9fem9vbS5pbnZlcnQoZy50b3VjaDBbMF0pO2Vsc2UgZy5lbmQoKTtcbiAgICB9XG5cbiAgICB6b29tLndoZWVsRGVsdGEgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAod2hlZWxEZWx0YSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMTIoK18pLCB6b29tKSA6IHdoZWVsRGVsdGE7XG4gICAgfTtcblxuICAgIHpvb20uZmlsdGVyID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGZpbHRlciA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMTIoISFfKSwgem9vbSkgOiBmaWx0ZXI7XG4gICAgfTtcblxuICAgIHpvb20uZXh0ZW50ID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGV4dGVudCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMTIoW1srX1swXVswXSwgK19bMF1bMV1dLCBbK19bMV1bMF0sICtfWzFdWzFdXV0pLCB6b29tKSA6IGV4dGVudDtcbiAgICB9O1xuXG4gICAgem9vbS5zY2FsZUV4dGVudCA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChrMCA9ICtfWzBdLCBrMSA9ICtfWzFdLCB6b29tKSA6IFtrMCwgazFdO1xuICAgIH07XG5cbiAgICB6b29tLnRyYW5zbGF0ZUV4dGVudCA9IGZ1bmN0aW9uIChfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4MCA9ICtfWzBdWzBdLCB4MSA9ICtfWzFdWzBdLCB5MCA9ICtfWzBdWzFdLCB5MSA9ICtfWzFdWzFdLCB6b29tKSA6IFtbeDAsIHkwXSwgW3gxLCB5MV1dO1xuICAgIH07XG5cbiAgICB6b29tLmR1cmF0aW9uID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGR1cmF0aW9uID0gK18sIHpvb20pIDogZHVyYXRpb247XG4gICAgfTtcblxuICAgIHpvb20uaW50ZXJwb2xhdGUgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaW50ZXJwb2xhdGUgPSBfLCB6b29tKSA6IGludGVycG9sYXRlO1xuICAgIH07XG5cbiAgICB6b29tLm9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHZhbHVlID0gbGlzdGVuZXJzLm9uLmFwcGx5KGxpc3RlbmVycywgYXJndW1lbnRzKTtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbGlzdGVuZXJzID8gem9vbSA6IHZhbHVlO1xuICAgIH07XG5cbiAgICB6b29tLmNsaWNrRGlzdGFuY2UgPSBmdW5jdGlvbiAoXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2xpY2tEaXN0YW5jZTIgPSAoXyA9ICtfKSAqIF8sIHpvb20pIDogTWF0aC5zcXJ0KGNsaWNrRGlzdGFuY2UyKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHpvb207XG4gIH07XG5cbiAgZXhwb3J0cy52ZXJzaW9uID0gdmVyc2lvbjtcbiAgZXhwb3J0cy5iaXNlY3QgPSBiaXNlY3RSaWdodDtcbiAgZXhwb3J0cy5iaXNlY3RSaWdodCA9IGJpc2VjdFJpZ2h0O1xuICBleHBvcnRzLmJpc2VjdExlZnQgPSBiaXNlY3RMZWZ0O1xuICBleHBvcnRzLmFzY2VuZGluZyA9IGFzY2VuZGluZztcbiAgZXhwb3J0cy5iaXNlY3RvciA9IGJpc2VjdG9yO1xuICBleHBvcnRzLmNyb3NzID0gY3Jvc3M7XG4gIGV4cG9ydHMuZGVzY2VuZGluZyA9IGRlc2NlbmRpbmc7XG4gIGV4cG9ydHMuZGV2aWF0aW9uID0gZGV2aWF0aW9uO1xuICBleHBvcnRzLmV4dGVudCA9IGV4dGVudDtcbiAgZXhwb3J0cy5oaXN0b2dyYW0gPSBoaXN0b2dyYW07XG4gIGV4cG9ydHMudGhyZXNob2xkRnJlZWRtYW5EaWFjb25pcyA9IGZyZWVkbWFuRGlhY29uaXM7XG4gIGV4cG9ydHMudGhyZXNob2xkU2NvdHQgPSBzY290dDtcbiAgZXhwb3J0cy50aHJlc2hvbGRTdHVyZ2VzID0gc3R1cmdlcztcbiAgZXhwb3J0cy5tYXggPSBtYXg7XG4gIGV4cG9ydHMubWVhbiA9IG1lYW47XG4gIGV4cG9ydHMubWVkaWFuID0gbWVkaWFuO1xuICBleHBvcnRzLm1lcmdlID0gbWVyZ2U7XG4gIGV4cG9ydHMubWluID0gbWluO1xuICBleHBvcnRzLnBhaXJzID0gcGFpcnM7XG4gIGV4cG9ydHMucGVybXV0ZSA9IHBlcm11dGU7XG4gIGV4cG9ydHMucXVhbnRpbGUgPSB0aHJlc2hvbGQ7XG4gIGV4cG9ydHMucmFuZ2UgPSBzZXF1ZW5jZTtcbiAgZXhwb3J0cy5zY2FuID0gc2NhbjtcbiAgZXhwb3J0cy5zaHVmZmxlID0gc2h1ZmZsZTtcbiAgZXhwb3J0cy5zdW0gPSBzdW07XG4gIGV4cG9ydHMudGlja3MgPSB0aWNrcztcbiAgZXhwb3J0cy50aWNrSW5jcmVtZW50ID0gdGlja0luY3JlbWVudDtcbiAgZXhwb3J0cy50aWNrU3RlcCA9IHRpY2tTdGVwO1xuICBleHBvcnRzLnRyYW5zcG9zZSA9IHRyYW5zcG9zZTtcbiAgZXhwb3J0cy52YXJpYW5jZSA9IHZhcmlhbmNlO1xuICBleHBvcnRzLnppcCA9IHppcDtcbiAgZXhwb3J0cy5heGlzVG9wID0gYXhpc1RvcDtcbiAgZXhwb3J0cy5heGlzUmlnaHQgPSBheGlzUmlnaHQ7XG4gIGV4cG9ydHMuYXhpc0JvdHRvbSA9IGF4aXNCb3R0b207XG4gIGV4cG9ydHMuYXhpc0xlZnQgPSBheGlzTGVmdDtcbiAgZXhwb3J0cy5icnVzaCA9IGJydXNoO1xuICBleHBvcnRzLmJydXNoWCA9IGJydXNoWDtcbiAgZXhwb3J0cy5icnVzaFkgPSBicnVzaFk7XG4gIGV4cG9ydHMuYnJ1c2hTZWxlY3Rpb24gPSBicnVzaFNlbGVjdGlvbjtcbiAgZXhwb3J0cy5jaG9yZCA9IGNob3JkO1xuICBleHBvcnRzLnJpYmJvbiA9IHJpYmJvbjtcbiAgZXhwb3J0cy5uZXN0ID0gbmVzdDtcbiAgZXhwb3J0cy5zZXQgPSBzZXQkMjtcbiAgZXhwb3J0cy5tYXAgPSBtYXAkMTtcbiAgZXhwb3J0cy5rZXlzID0ga2V5cztcbiAgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG4gIGV4cG9ydHMuZW50cmllcyA9IGVudHJpZXM7XG4gIGV4cG9ydHMuY29sb3IgPSBjb2xvcjtcbiAgZXhwb3J0cy5yZ2IgPSByZ2I7XG4gIGV4cG9ydHMuaHNsID0gaHNsO1xuICBleHBvcnRzLmxhYiA9IGxhYjtcbiAgZXhwb3J0cy5oY2wgPSBoY2w7XG4gIGV4cG9ydHMuY3ViZWhlbGl4ID0gY3ViZWhlbGl4O1xuICBleHBvcnRzLmRpc3BhdGNoID0gZGlzcGF0Y2g7XG4gIGV4cG9ydHMuZHJhZyA9IGRyYWc7XG4gIGV4cG9ydHMuZHJhZ0Rpc2FibGUgPSBkcmFnRGlzYWJsZTtcbiAgZXhwb3J0cy5kcmFnRW5hYmxlID0geWVzZHJhZztcbiAgZXhwb3J0cy5kc3ZGb3JtYXQgPSBkc3Y7XG4gIGV4cG9ydHMuY3N2UGFyc2UgPSBjc3ZQYXJzZTtcbiAgZXhwb3J0cy5jc3ZQYXJzZVJvd3MgPSBjc3ZQYXJzZVJvd3M7XG4gIGV4cG9ydHMuY3N2Rm9ybWF0ID0gY3N2Rm9ybWF0O1xuICBleHBvcnRzLmNzdkZvcm1hdFJvd3MgPSBjc3ZGb3JtYXRSb3dzO1xuICBleHBvcnRzLnRzdlBhcnNlID0gdHN2UGFyc2U7XG4gIGV4cG9ydHMudHN2UGFyc2VSb3dzID0gdHN2UGFyc2VSb3dzO1xuICBleHBvcnRzLnRzdkZvcm1hdCA9IHRzdkZvcm1hdDtcbiAgZXhwb3J0cy50c3ZGb3JtYXRSb3dzID0gdHN2Rm9ybWF0Um93cztcbiAgZXhwb3J0cy5lYXNlTGluZWFyID0gbGluZWFyJDE7XG4gIGV4cG9ydHMuZWFzZVF1YWQgPSBxdWFkSW5PdXQ7XG4gIGV4cG9ydHMuZWFzZVF1YWRJbiA9IHF1YWRJbjtcbiAgZXhwb3J0cy5lYXNlUXVhZE91dCA9IHF1YWRPdXQ7XG4gIGV4cG9ydHMuZWFzZVF1YWRJbk91dCA9IHF1YWRJbk91dDtcbiAgZXhwb3J0cy5lYXNlQ3ViaWMgPSBjdWJpY0luT3V0O1xuICBleHBvcnRzLmVhc2VDdWJpY0luID0gY3ViaWNJbjtcbiAgZXhwb3J0cy5lYXNlQ3ViaWNPdXQgPSBjdWJpY091dDtcbiAgZXhwb3J0cy5lYXNlQ3ViaWNJbk91dCA9IGN1YmljSW5PdXQ7XG4gIGV4cG9ydHMuZWFzZVBvbHkgPSBwb2x5SW5PdXQ7XG4gIGV4cG9ydHMuZWFzZVBvbHlJbiA9IHBvbHlJbjtcbiAgZXhwb3J0cy5lYXNlUG9seU91dCA9IHBvbHlPdXQ7XG4gIGV4cG9ydHMuZWFzZVBvbHlJbk91dCA9IHBvbHlJbk91dDtcbiAgZXhwb3J0cy5lYXNlU2luID0gc2luSW5PdXQ7XG4gIGV4cG9ydHMuZWFzZVNpbkluID0gc2luSW47XG4gIGV4cG9ydHMuZWFzZVNpbk91dCA9IHNpbk91dDtcbiAgZXhwb3J0cy5lYXNlU2luSW5PdXQgPSBzaW5Jbk91dDtcbiAgZXhwb3J0cy5lYXNlRXhwID0gZXhwSW5PdXQ7XG4gIGV4cG9ydHMuZWFzZUV4cEluID0gZXhwSW47XG4gIGV4cG9ydHMuZWFzZUV4cE91dCA9IGV4cE91dDtcbiAgZXhwb3J0cy5lYXNlRXhwSW5PdXQgPSBleHBJbk91dDtcbiAgZXhwb3J0cy5lYXNlQ2lyY2xlID0gY2lyY2xlSW5PdXQ7XG4gIGV4cG9ydHMuZWFzZUNpcmNsZUluID0gY2lyY2xlSW47XG4gIGV4cG9ydHMuZWFzZUNpcmNsZU91dCA9IGNpcmNsZU91dDtcbiAgZXhwb3J0cy5lYXNlQ2lyY2xlSW5PdXQgPSBjaXJjbGVJbk91dDtcbiAgZXhwb3J0cy5lYXNlQm91bmNlID0gYm91bmNlT3V0O1xuICBleHBvcnRzLmVhc2VCb3VuY2VJbiA9IGJvdW5jZUluO1xuICBleHBvcnRzLmVhc2VCb3VuY2VPdXQgPSBib3VuY2VPdXQ7XG4gIGV4cG9ydHMuZWFzZUJvdW5jZUluT3V0ID0gYm91bmNlSW5PdXQ7XG4gIGV4cG9ydHMuZWFzZUJhY2sgPSBiYWNrSW5PdXQ7XG4gIGV4cG9ydHMuZWFzZUJhY2tJbiA9IGJhY2tJbjtcbiAgZXhwb3J0cy5lYXNlQmFja091dCA9IGJhY2tPdXQ7XG4gIGV4cG9ydHMuZWFzZUJhY2tJbk91dCA9IGJhY2tJbk91dDtcbiAgZXhwb3J0cy5lYXNlRWxhc3RpYyA9IGVsYXN0aWNPdXQ7XG4gIGV4cG9ydHMuZWFzZUVsYXN0aWNJbiA9IGVsYXN0aWNJbjtcbiAgZXhwb3J0cy5lYXNlRWxhc3RpY091dCA9IGVsYXN0aWNPdXQ7XG4gIGV4cG9ydHMuZWFzZUVsYXN0aWNJbk91dCA9IGVsYXN0aWNJbk91dDtcbiAgZXhwb3J0cy5mb3JjZUNlbnRlciA9IGNlbnRlciQxO1xuICBleHBvcnRzLmZvcmNlQ29sbGlkZSA9IGNvbGxpZGU7XG4gIGV4cG9ydHMuZm9yY2VMaW5rID0gbGluaztcbiAgZXhwb3J0cy5mb3JjZU1hbnlCb2R5ID0gbWFueUJvZHk7XG4gIGV4cG9ydHMuZm9yY2VTaW11bGF0aW9uID0gc2ltdWxhdGlvbjtcbiAgZXhwb3J0cy5mb3JjZVggPSB4JDI7XG4gIGV4cG9ydHMuZm9yY2VZID0geSQyO1xuICBleHBvcnRzLmZvcm1hdERlZmF1bHRMb2NhbGUgPSBkZWZhdWx0TG9jYWxlO1xuICBleHBvcnRzLmZvcm1hdExvY2FsZSA9IGZvcm1hdExvY2FsZTtcbiAgZXhwb3J0cy5mb3JtYXRTcGVjaWZpZXIgPSBmb3JtYXRTcGVjaWZpZXI7XG4gIGV4cG9ydHMucHJlY2lzaW9uRml4ZWQgPSBwcmVjaXNpb25GaXhlZDtcbiAgZXhwb3J0cy5wcmVjaXNpb25QcmVmaXggPSBwcmVjaXNpb25QcmVmaXg7XG4gIGV4cG9ydHMucHJlY2lzaW9uUm91bmQgPSBwcmVjaXNpb25Sb3VuZDtcbiAgZXhwb3J0cy5nZW9BcmVhID0gYXJlYTtcbiAgZXhwb3J0cy5nZW9Cb3VuZHMgPSBib3VuZHM7XG4gIGV4cG9ydHMuZ2VvQ2VudHJvaWQgPSBjZW50cm9pZDtcbiAgZXhwb3J0cy5nZW9DaXJjbGUgPSBjaXJjbGU7XG4gIGV4cG9ydHMuZ2VvQ2xpcEV4dGVudCA9IGV4dGVudCQxO1xuICBleHBvcnRzLmdlb0NvbnRhaW5zID0gY29udGFpbnM7XG4gIGV4cG9ydHMuZ2VvRGlzdGFuY2UgPSBkaXN0YW5jZTtcbiAgZXhwb3J0cy5nZW9HcmF0aWN1bGUgPSBncmF0aWN1bGU7XG4gIGV4cG9ydHMuZ2VvR3JhdGljdWxlMTAgPSBncmF0aWN1bGUxMDtcbiAgZXhwb3J0cy5nZW9JbnRlcnBvbGF0ZSA9IGludGVycG9sYXRlJDE7XG4gIGV4cG9ydHMuZ2VvTGVuZ3RoID0gbGVuZ3RoJDE7XG4gIGV4cG9ydHMuZ2VvUGF0aCA9IGluZGV4JDE7XG4gIGV4cG9ydHMuZ2VvQWxiZXJzID0gYWxiZXJzO1xuICBleHBvcnRzLmdlb0FsYmVyc1VzYSA9IGFsYmVyc1VzYTtcbiAgZXhwb3J0cy5nZW9BemltdXRoYWxFcXVhbEFyZWEgPSBhemltdXRoYWxFcXVhbEFyZWE7XG4gIGV4cG9ydHMuZ2VvQXppbXV0aGFsRXF1YWxBcmVhUmF3ID0gYXppbXV0aGFsRXF1YWxBcmVhUmF3O1xuICBleHBvcnRzLmdlb0F6aW11dGhhbEVxdWlkaXN0YW50ID0gYXppbXV0aGFsRXF1aWRpc3RhbnQ7XG4gIGV4cG9ydHMuZ2VvQXppbXV0aGFsRXF1aWRpc3RhbnRSYXcgPSBhemltdXRoYWxFcXVpZGlzdGFudFJhdztcbiAgZXhwb3J0cy5nZW9Db25pY0NvbmZvcm1hbCA9IGNvbmljQ29uZm9ybWFsO1xuICBleHBvcnRzLmdlb0NvbmljQ29uZm9ybWFsUmF3ID0gY29uaWNDb25mb3JtYWxSYXc7XG4gIGV4cG9ydHMuZ2VvQ29uaWNFcXVhbEFyZWEgPSBjb25pY0VxdWFsQXJlYTtcbiAgZXhwb3J0cy5nZW9Db25pY0VxdWFsQXJlYVJhdyA9IGNvbmljRXF1YWxBcmVhUmF3O1xuICBleHBvcnRzLmdlb0NvbmljRXF1aWRpc3RhbnQgPSBjb25pY0VxdWlkaXN0YW50O1xuICBleHBvcnRzLmdlb0NvbmljRXF1aWRpc3RhbnRSYXcgPSBjb25pY0VxdWlkaXN0YW50UmF3O1xuICBleHBvcnRzLmdlb0VxdWlyZWN0YW5ndWxhciA9IGVxdWlyZWN0YW5ndWxhcjtcbiAgZXhwb3J0cy5nZW9FcXVpcmVjdGFuZ3VsYXJSYXcgPSBlcXVpcmVjdGFuZ3VsYXJSYXc7XG4gIGV4cG9ydHMuZ2VvR25vbW9uaWMgPSBnbm9tb25pYztcbiAgZXhwb3J0cy5nZW9Hbm9tb25pY1JhdyA9IGdub21vbmljUmF3O1xuICBleHBvcnRzLmdlb0lkZW50aXR5ID0gaWRlbnRpdHkkNTtcbiAgZXhwb3J0cy5nZW9Qcm9qZWN0aW9uID0gcHJvamVjdGlvbjtcbiAgZXhwb3J0cy5nZW9Qcm9qZWN0aW9uTXV0YXRvciA9IHByb2plY3Rpb25NdXRhdG9yO1xuICBleHBvcnRzLmdlb01lcmNhdG9yID0gbWVyY2F0b3I7XG4gIGV4cG9ydHMuZ2VvTWVyY2F0b3JSYXcgPSBtZXJjYXRvclJhdztcbiAgZXhwb3J0cy5nZW9PcnRob2dyYXBoaWMgPSBvcnRob2dyYXBoaWM7XG4gIGV4cG9ydHMuZ2VvT3J0aG9ncmFwaGljUmF3ID0gb3J0aG9ncmFwaGljUmF3O1xuICBleHBvcnRzLmdlb1N0ZXJlb2dyYXBoaWMgPSBzdGVyZW9ncmFwaGljO1xuICBleHBvcnRzLmdlb1N0ZXJlb2dyYXBoaWNSYXcgPSBzdGVyZW9ncmFwaGljUmF3O1xuICBleHBvcnRzLmdlb1RyYW5zdmVyc2VNZXJjYXRvciA9IHRyYW5zdmVyc2VNZXJjYXRvcjtcbiAgZXhwb3J0cy5nZW9UcmFuc3ZlcnNlTWVyY2F0b3JSYXcgPSB0cmFuc3ZlcnNlTWVyY2F0b3JSYXc7XG4gIGV4cG9ydHMuZ2VvUm90YXRpb24gPSByb3RhdGlvbjtcbiAgZXhwb3J0cy5nZW9TdHJlYW0gPSBnZW9TdHJlYW07XG4gIGV4cG9ydHMuZ2VvVHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICBleHBvcnRzLmNsdXN0ZXIgPSBjbHVzdGVyO1xuICBleHBvcnRzLmhpZXJhcmNoeSA9IGhpZXJhcmNoeTtcbiAgZXhwb3J0cy5wYWNrID0gaW5kZXgkMjtcbiAgZXhwb3J0cy5wYWNrU2libGluZ3MgPSBzaWJsaW5ncztcbiAgZXhwb3J0cy5wYWNrRW5jbG9zZSA9IGVuY2xvc2U7XG4gIGV4cG9ydHMucGFydGl0aW9uID0gcGFydGl0aW9uO1xuICBleHBvcnRzLnN0cmF0aWZ5ID0gc3RyYXRpZnk7XG4gIGV4cG9ydHMudHJlZSA9IHRyZWU7XG4gIGV4cG9ydHMudHJlZW1hcCA9IGluZGV4JDM7XG4gIGV4cG9ydHMudHJlZW1hcEJpbmFyeSA9IGJpbmFyeTtcbiAgZXhwb3J0cy50cmVlbWFwRGljZSA9IHRyZWVtYXBEaWNlO1xuICBleHBvcnRzLnRyZWVtYXBTbGljZSA9IHRyZWVtYXBTbGljZTtcbiAgZXhwb3J0cy50cmVlbWFwU2xpY2VEaWNlID0gc2xpY2VEaWNlO1xuICBleHBvcnRzLnRyZWVtYXBTcXVhcmlmeSA9IHNxdWFyaWZ5O1xuICBleHBvcnRzLnRyZWVtYXBSZXNxdWFyaWZ5ID0gcmVzcXVhcmlmeTtcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZSA9IGludGVycG9sYXRlVmFsdWU7XG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVBcnJheSA9IGFycmF5JDE7XG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVCYXNpcyA9IGJhc2lzJDE7XG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVCYXNpc0Nsb3NlZCA9IGJhc2lzQ2xvc2VkO1xuICBleHBvcnRzLmludGVycG9sYXRlRGF0ZSA9IGRhdGU7XG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVOdW1iZXIgPSByZWludGVycG9sYXRlO1xuICBleHBvcnRzLmludGVycG9sYXRlT2JqZWN0ID0gb2JqZWN0O1xuICBleHBvcnRzLmludGVycG9sYXRlUm91bmQgPSBpbnRlcnBvbGF0ZVJvdW5kO1xuICBleHBvcnRzLmludGVycG9sYXRlU3RyaW5nID0gaW50ZXJwb2xhdGVTdHJpbmc7XG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVUcmFuc2Zvcm1Dc3MgPSBpbnRlcnBvbGF0ZVRyYW5zZm9ybUNzcztcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZVRyYW5zZm9ybVN2ZyA9IGludGVycG9sYXRlVHJhbnNmb3JtU3ZnO1xuICBleHBvcnRzLmludGVycG9sYXRlWm9vbSA9IGludGVycG9sYXRlWm9vbTtcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZVJnYiA9IGludGVycG9sYXRlUmdiO1xuICBleHBvcnRzLmludGVycG9sYXRlUmdiQmFzaXMgPSByZ2JCYXNpcztcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZVJnYkJhc2lzQ2xvc2VkID0gcmdiQmFzaXNDbG9zZWQ7XG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVIc2wgPSBoc2wkMjtcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZUhzbExvbmcgPSBoc2xMb25nO1xuICBleHBvcnRzLmludGVycG9sYXRlTGFiID0gbGFiJDE7XG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVIY2wgPSBoY2wkMjtcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZUhjbExvbmcgPSBoY2xMb25nO1xuICBleHBvcnRzLmludGVycG9sYXRlQ3ViZWhlbGl4ID0gY3ViZWhlbGl4JDI7XG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVDdWJlaGVsaXhMb25nID0gY3ViZWhlbGl4TG9uZztcbiAgZXhwb3J0cy5xdWFudGl6ZSA9IHF1YW50aXplO1xuICBleHBvcnRzLnBhdGggPSBwYXRoO1xuICBleHBvcnRzLnBvbHlnb25BcmVhID0gYXJlYSQxO1xuICBleHBvcnRzLnBvbHlnb25DZW50cm9pZCA9IGNlbnRyb2lkJDE7XG4gIGV4cG9ydHMucG9seWdvbkh1bGwgPSBodWxsO1xuICBleHBvcnRzLnBvbHlnb25Db250YWlucyA9IGNvbnRhaW5zJDE7XG4gIGV4cG9ydHMucG9seWdvbkxlbmd0aCA9IGxlbmd0aCQyO1xuICBleHBvcnRzLnF1YWR0cmVlID0gcXVhZHRyZWU7XG4gIGV4cG9ydHMucXVldWUgPSBxdWV1ZTtcbiAgZXhwb3J0cy5yYW5kb21Vbmlmb3JtID0gdW5pZm9ybTtcbiAgZXhwb3J0cy5yYW5kb21Ob3JtYWwgPSBub3JtYWw7XG4gIGV4cG9ydHMucmFuZG9tTG9nTm9ybWFsID0gbG9nTm9ybWFsO1xuICBleHBvcnRzLnJhbmRvbUJhdGVzID0gYmF0ZXM7XG4gIGV4cG9ydHMucmFuZG9tSXJ3aW5IYWxsID0gaXJ3aW5IYWxsO1xuICBleHBvcnRzLnJhbmRvbUV4cG9uZW50aWFsID0gZXhwb25lbnRpYWwkMTtcbiAgZXhwb3J0cy5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgZXhwb3J0cy5odG1sID0gaHRtbDtcbiAgZXhwb3J0cy5qc29uID0ganNvbjtcbiAgZXhwb3J0cy50ZXh0ID0gdGV4dDtcbiAgZXhwb3J0cy54bWwgPSB4bWw7XG4gIGV4cG9ydHMuY3N2ID0gY3N2JDE7XG4gIGV4cG9ydHMudHN2ID0gdHN2JDE7XG4gIGV4cG9ydHMuc2NhbGVCYW5kID0gYmFuZDtcbiAgZXhwb3J0cy5zY2FsZVBvaW50ID0gcG9pbnQkMTtcbiAgZXhwb3J0cy5zY2FsZUlkZW50aXR5ID0gaWRlbnRpdHkkNjtcbiAgZXhwb3J0cy5zY2FsZUxpbmVhciA9IGxpbmVhciQyO1xuICBleHBvcnRzLnNjYWxlTG9nID0gbG9nJDE7XG4gIGV4cG9ydHMuc2NhbGVPcmRpbmFsID0gb3JkaW5hbDtcbiAgZXhwb3J0cy5zY2FsZUltcGxpY2l0ID0gaW1wbGljaXQ7XG4gIGV4cG9ydHMuc2NhbGVQb3cgPSBwb3ckMTtcbiAgZXhwb3J0cy5zY2FsZVNxcnQgPSBzcXJ0JDE7XG4gIGV4cG9ydHMuc2NhbGVRdWFudGlsZSA9IHF1YW50aWxlO1xuICBleHBvcnRzLnNjYWxlUXVhbnRpemUgPSBxdWFudGl6ZSQxO1xuICBleHBvcnRzLnNjYWxlVGhyZXNob2xkID0gdGhyZXNob2xkJDE7XG4gIGV4cG9ydHMuc2NhbGVUaW1lID0gdGltZTtcbiAgZXhwb3J0cy5zY2FsZVV0YyA9IHV0Y1RpbWU7XG4gIGV4cG9ydHMuc2NoZW1lQ2F0ZWdvcnkxMCA9IGNhdGVnb3J5MTA7XG4gIGV4cG9ydHMuc2NoZW1lQ2F0ZWdvcnkyMGIgPSBjYXRlZ29yeTIwYjtcbiAgZXhwb3J0cy5zY2hlbWVDYXRlZ29yeTIwYyA9IGNhdGVnb3J5MjBjO1xuICBleHBvcnRzLnNjaGVtZUNhdGVnb3J5MjAgPSBjYXRlZ29yeTIwO1xuICBleHBvcnRzLmludGVycG9sYXRlQ3ViZWhlbGl4RGVmYXVsdCA9IGN1YmVoZWxpeCQzO1xuICBleHBvcnRzLmludGVycG9sYXRlUmFpbmJvdyA9IHJhaW5ib3ckMTtcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZVdhcm0gPSB3YXJtO1xuICBleHBvcnRzLmludGVycG9sYXRlQ29vbCA9IGNvb2w7XG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVWaXJpZGlzID0gdmlyaWRpcztcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZU1hZ21hID0gbWFnbWE7XG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVJbmZlcm5vID0gaW5mZXJubztcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZVBsYXNtYSA9IHBsYXNtYTtcbiAgZXhwb3J0cy5zY2FsZVNlcXVlbnRpYWwgPSBzZXF1ZW50aWFsO1xuICBleHBvcnRzLmNyZWF0b3IgPSBjcmVhdG9yO1xuICBleHBvcnRzLmxvY2FsID0gbG9jYWwkMTtcbiAgZXhwb3J0cy5tYXRjaGVyID0gbWF0Y2hlciQxO1xuICBleHBvcnRzLm1vdXNlID0gbW91c2U7XG4gIGV4cG9ydHMubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xuICBleHBvcnRzLm5hbWVzcGFjZXMgPSBuYW1lc3BhY2VzO1xuICBleHBvcnRzLnNlbGVjdCA9IHNlbGVjdDtcbiAgZXhwb3J0cy5zZWxlY3RBbGwgPSBzZWxlY3RBbGw7XG4gIGV4cG9ydHMuc2VsZWN0aW9uID0gc2VsZWN0aW9uO1xuICBleHBvcnRzLnNlbGVjdG9yID0gc2VsZWN0b3I7XG4gIGV4cG9ydHMuc2VsZWN0b3JBbGwgPSBzZWxlY3RvckFsbDtcbiAgZXhwb3J0cy5zdHlsZSA9IHN0eWxlVmFsdWU7XG4gIGV4cG9ydHMudG91Y2ggPSB0b3VjaDtcbiAgZXhwb3J0cy50b3VjaGVzID0gdG91Y2hlcztcbiAgZXhwb3J0cy53aW5kb3cgPSBkZWZhdWx0VmlldztcbiAgZXhwb3J0cy5jdXN0b21FdmVudCA9IGN1c3RvbUV2ZW50O1xuICBleHBvcnRzLmFyYyA9IGFyYztcbiAgZXhwb3J0cy5hcmVhID0gYXJlYSQyO1xuICBleHBvcnRzLmxpbmUgPSBsaW5lO1xuICBleHBvcnRzLnBpZSA9IHBpZTtcbiAgZXhwb3J0cy5hcmVhUmFkaWFsID0gYXJlYVJhZGlhbDtcbiAgZXhwb3J0cy5yYWRpYWxBcmVhID0gYXJlYVJhZGlhbDtcbiAgZXhwb3J0cy5saW5lUmFkaWFsID0gbGluZVJhZGlhbCQxO1xuICBleHBvcnRzLnJhZGlhbExpbmUgPSBsaW5lUmFkaWFsJDE7XG4gIGV4cG9ydHMucG9pbnRSYWRpYWwgPSBwb2ludFJhZGlhbDtcbiAgZXhwb3J0cy5saW5rSG9yaXpvbnRhbCA9IGxpbmtIb3Jpem9udGFsO1xuICBleHBvcnRzLmxpbmtWZXJ0aWNhbCA9IGxpbmtWZXJ0aWNhbDtcbiAgZXhwb3J0cy5saW5rUmFkaWFsID0gbGlua1JhZGlhbDtcbiAgZXhwb3J0cy5zeW1ib2wgPSBzeW1ib2w7XG4gIGV4cG9ydHMuc3ltYm9scyA9IHN5bWJvbHM7XG4gIGV4cG9ydHMuc3ltYm9sQ2lyY2xlID0gY2lyY2xlJDI7XG4gIGV4cG9ydHMuc3ltYm9sQ3Jvc3MgPSBjcm9zcyQyO1xuICBleHBvcnRzLnN5bWJvbERpYW1vbmQgPSBkaWFtb25kO1xuICBleHBvcnRzLnN5bWJvbFNxdWFyZSA9IHNxdWFyZTtcbiAgZXhwb3J0cy5zeW1ib2xTdGFyID0gc3RhcjtcbiAgZXhwb3J0cy5zeW1ib2xUcmlhbmdsZSA9IHRyaWFuZ2xlO1xuICBleHBvcnRzLnN5bWJvbFd5ZSA9IHd5ZTtcbiAgZXhwb3J0cy5jdXJ2ZUJhc2lzQ2xvc2VkID0gYmFzaXNDbG9zZWQkMTtcbiAgZXhwb3J0cy5jdXJ2ZUJhc2lzT3BlbiA9IGJhc2lzT3BlbjtcbiAgZXhwb3J0cy5jdXJ2ZUJhc2lzID0gYmFzaXMkMjtcbiAgZXhwb3J0cy5jdXJ2ZUJ1bmRsZSA9IGJ1bmRsZTtcbiAgZXhwb3J0cy5jdXJ2ZUNhcmRpbmFsQ2xvc2VkID0gY2FyZGluYWxDbG9zZWQ7XG4gIGV4cG9ydHMuY3VydmVDYXJkaW5hbE9wZW4gPSBjYXJkaW5hbE9wZW47XG4gIGV4cG9ydHMuY3VydmVDYXJkaW5hbCA9IGNhcmRpbmFsO1xuICBleHBvcnRzLmN1cnZlQ2F0bXVsbFJvbUNsb3NlZCA9IGNhdG11bGxSb21DbG9zZWQ7XG4gIGV4cG9ydHMuY3VydmVDYXRtdWxsUm9tT3BlbiA9IGNhdG11bGxSb21PcGVuO1xuICBleHBvcnRzLmN1cnZlQ2F0bXVsbFJvbSA9IGNhdG11bGxSb207XG4gIGV4cG9ydHMuY3VydmVMaW5lYXJDbG9zZWQgPSBsaW5lYXJDbG9zZWQ7XG4gIGV4cG9ydHMuY3VydmVMaW5lYXIgPSBjdXJ2ZUxpbmVhcjtcbiAgZXhwb3J0cy5jdXJ2ZU1vbm90b25lWCA9IG1vbm90b25lWDtcbiAgZXhwb3J0cy5jdXJ2ZU1vbm90b25lWSA9IG1vbm90b25lWTtcbiAgZXhwb3J0cy5jdXJ2ZU5hdHVyYWwgPSBuYXR1cmFsO1xuICBleHBvcnRzLmN1cnZlU3RlcCA9IHN0ZXA7XG4gIGV4cG9ydHMuY3VydmVTdGVwQWZ0ZXIgPSBzdGVwQWZ0ZXI7XG4gIGV4cG9ydHMuY3VydmVTdGVwQmVmb3JlID0gc3RlcEJlZm9yZTtcbiAgZXhwb3J0cy5zdGFjayA9IHN0YWNrO1xuICBleHBvcnRzLnN0YWNrT2Zmc2V0RXhwYW5kID0gZXhwYW5kO1xuICBleHBvcnRzLnN0YWNrT2Zmc2V0RGl2ZXJnaW5nID0gZGl2ZXJnaW5nO1xuICBleHBvcnRzLnN0YWNrT2Zmc2V0Tm9uZSA9IG5vbmUkMTtcbiAgZXhwb3J0cy5zdGFja09mZnNldFNpbGhvdWV0dGUgPSBzaWxob3VldHRlO1xuICBleHBvcnRzLnN0YWNrT2Zmc2V0V2lnZ2xlID0gd2lnZ2xlO1xuICBleHBvcnRzLnN0YWNrT3JkZXJBc2NlbmRpbmcgPSBhc2NlbmRpbmckMjtcbiAgZXhwb3J0cy5zdGFja09yZGVyRGVzY2VuZGluZyA9IGRlc2NlbmRpbmckMjtcbiAgZXhwb3J0cy5zdGFja09yZGVySW5zaWRlT3V0ID0gaW5zaWRlT3V0O1xuICBleHBvcnRzLnN0YWNrT3JkZXJOb25lID0gbm9uZSQyO1xuICBleHBvcnRzLnN0YWNrT3JkZXJSZXZlcnNlID0gcmV2ZXJzZTtcbiAgZXhwb3J0cy50aW1lSW50ZXJ2YWwgPSBuZXdJbnRlcnZhbDtcbiAgZXhwb3J0cy50aW1lTWlsbGlzZWNvbmQgPSBtaWxsaXNlY29uZDtcbiAgZXhwb3J0cy50aW1lTWlsbGlzZWNvbmRzID0gbWlsbGlzZWNvbmRzO1xuICBleHBvcnRzLnV0Y01pbGxpc2Vjb25kID0gbWlsbGlzZWNvbmQ7XG4gIGV4cG9ydHMudXRjTWlsbGlzZWNvbmRzID0gbWlsbGlzZWNvbmRzO1xuICBleHBvcnRzLnRpbWVTZWNvbmQgPSBzZWNvbmQ7XG4gIGV4cG9ydHMudGltZVNlY29uZHMgPSBzZWNvbmRzO1xuICBleHBvcnRzLnV0Y1NlY29uZCA9IHNlY29uZDtcbiAgZXhwb3J0cy51dGNTZWNvbmRzID0gc2Vjb25kcztcbiAgZXhwb3J0cy50aW1lTWludXRlID0gbWludXRlO1xuICBleHBvcnRzLnRpbWVNaW51dGVzID0gbWludXRlcztcbiAgZXhwb3J0cy50aW1lSG91ciA9IGhvdXI7XG4gIGV4cG9ydHMudGltZUhvdXJzID0gaG91cnM7XG4gIGV4cG9ydHMudGltZURheSA9IGRheTtcbiAgZXhwb3J0cy50aW1lRGF5cyA9IGRheXM7XG4gIGV4cG9ydHMudGltZVdlZWsgPSBzdW5kYXk7XG4gIGV4cG9ydHMudGltZVdlZWtzID0gc3VuZGF5cztcbiAgZXhwb3J0cy50aW1lU3VuZGF5ID0gc3VuZGF5O1xuICBleHBvcnRzLnRpbWVTdW5kYXlzID0gc3VuZGF5cztcbiAgZXhwb3J0cy50aW1lTW9uZGF5ID0gbW9uZGF5O1xuICBleHBvcnRzLnRpbWVNb25kYXlzID0gbW9uZGF5cztcbiAgZXhwb3J0cy50aW1lVHVlc2RheSA9IHR1ZXNkYXk7XG4gIGV4cG9ydHMudGltZVR1ZXNkYXlzID0gdHVlc2RheXM7XG4gIGV4cG9ydHMudGltZVdlZG5lc2RheSA9IHdlZG5lc2RheTtcbiAgZXhwb3J0cy50aW1lV2VkbmVzZGF5cyA9IHdlZG5lc2RheXM7XG4gIGV4cG9ydHMudGltZVRodXJzZGF5ID0gdGh1cnNkYXk7XG4gIGV4cG9ydHMudGltZVRodXJzZGF5cyA9IHRodXJzZGF5cztcbiAgZXhwb3J0cy50aW1lRnJpZGF5ID0gZnJpZGF5O1xuICBleHBvcnRzLnRpbWVGcmlkYXlzID0gZnJpZGF5cztcbiAgZXhwb3J0cy50aW1lU2F0dXJkYXkgPSBzYXR1cmRheTtcbiAgZXhwb3J0cy50aW1lU2F0dXJkYXlzID0gc2F0dXJkYXlzO1xuICBleHBvcnRzLnRpbWVNb250aCA9IG1vbnRoO1xuICBleHBvcnRzLnRpbWVNb250aHMgPSBtb250aHM7XG4gIGV4cG9ydHMudGltZVllYXIgPSB5ZWFyO1xuICBleHBvcnRzLnRpbWVZZWFycyA9IHllYXJzO1xuICBleHBvcnRzLnV0Y01pbnV0ZSA9IHV0Y01pbnV0ZTtcbiAgZXhwb3J0cy51dGNNaW51dGVzID0gdXRjTWludXRlcztcbiAgZXhwb3J0cy51dGNIb3VyID0gdXRjSG91cjtcbiAgZXhwb3J0cy51dGNIb3VycyA9IHV0Y0hvdXJzO1xuICBleHBvcnRzLnV0Y0RheSA9IHV0Y0RheTtcbiAgZXhwb3J0cy51dGNEYXlzID0gdXRjRGF5cztcbiAgZXhwb3J0cy51dGNXZWVrID0gdXRjU3VuZGF5O1xuICBleHBvcnRzLnV0Y1dlZWtzID0gdXRjU3VuZGF5cztcbiAgZXhwb3J0cy51dGNTdW5kYXkgPSB1dGNTdW5kYXk7XG4gIGV4cG9ydHMudXRjU3VuZGF5cyA9IHV0Y1N1bmRheXM7XG4gIGV4cG9ydHMudXRjTW9uZGF5ID0gdXRjTW9uZGF5O1xuICBleHBvcnRzLnV0Y01vbmRheXMgPSB1dGNNb25kYXlzO1xuICBleHBvcnRzLnV0Y1R1ZXNkYXkgPSB1dGNUdWVzZGF5O1xuICBleHBvcnRzLnV0Y1R1ZXNkYXlzID0gdXRjVHVlc2RheXM7XG4gIGV4cG9ydHMudXRjV2VkbmVzZGF5ID0gdXRjV2VkbmVzZGF5O1xuICBleHBvcnRzLnV0Y1dlZG5lc2RheXMgPSB1dGNXZWRuZXNkYXlzO1xuICBleHBvcnRzLnV0Y1RodXJzZGF5ID0gdXRjVGh1cnNkYXk7XG4gIGV4cG9ydHMudXRjVGh1cnNkYXlzID0gdXRjVGh1cnNkYXlzO1xuICBleHBvcnRzLnV0Y0ZyaWRheSA9IHV0Y0ZyaWRheTtcbiAgZXhwb3J0cy51dGNGcmlkYXlzID0gdXRjRnJpZGF5cztcbiAgZXhwb3J0cy51dGNTYXR1cmRheSA9IHV0Y1NhdHVyZGF5O1xuICBleHBvcnRzLnV0Y1NhdHVyZGF5cyA9IHV0Y1NhdHVyZGF5cztcbiAgZXhwb3J0cy51dGNNb250aCA9IHV0Y01vbnRoO1xuICBleHBvcnRzLnV0Y01vbnRocyA9IHV0Y01vbnRocztcbiAgZXhwb3J0cy51dGNZZWFyID0gdXRjWWVhcjtcbiAgZXhwb3J0cy51dGNZZWFycyA9IHV0Y1llYXJzO1xuICBleHBvcnRzLnRpbWVGb3JtYXREZWZhdWx0TG9jYWxlID0gZGVmYXVsdExvY2FsZSQxO1xuICBleHBvcnRzLnRpbWVGb3JtYXRMb2NhbGUgPSBmb3JtYXRMb2NhbGUkMTtcbiAgZXhwb3J0cy5pc29Gb3JtYXQgPSBmb3JtYXRJc287XG4gIGV4cG9ydHMuaXNvUGFyc2UgPSBwYXJzZUlzbztcbiAgZXhwb3J0cy5ub3cgPSBub3c7XG4gIGV4cG9ydHMudGltZXIgPSB0aW1lcjtcbiAgZXhwb3J0cy50aW1lckZsdXNoID0gdGltZXJGbHVzaDtcbiAgZXhwb3J0cy50aW1lb3V0ID0gdGltZW91dCQxO1xuICBleHBvcnRzLmludGVydmFsID0gaW50ZXJ2YWwkMTtcbiAgZXhwb3J0cy50cmFuc2l0aW9uID0gdHJhbnNpdGlvbjtcbiAgZXhwb3J0cy5hY3RpdmUgPSBhY3RpdmU7XG4gIGV4cG9ydHMuaW50ZXJydXB0ID0gaW50ZXJydXB0O1xuICBleHBvcnRzLnZvcm9ub2kgPSB2b3Jvbm9pO1xuICBleHBvcnRzLnpvb20gPSB6b29tO1xuICBleHBvcnRzLnpvb21UcmFuc2Zvcm0gPSB0cmFuc2Zvcm0kMTtcbiAgZXhwb3J0cy56b29tSWRlbnRpdHkgPSBpZGVudGl0eSQ4O1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59KTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvZm9ybS1kYXRhLXRvLW9iamVjdC9pbmRleC5qc1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5mdW5jdGlvbiB0b09iaihzb3VyY2UpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHNvdXJjZSkucmVkdWNlKGZ1bmN0aW9uIChvdXRwdXQsIGtleSkge1xuICAgIHZhciBwYXJlbnRLZXkgPSBrZXkubWF0Y2goL1teXFxbXSovaSk7XG4gICAgdmFyIHBhdGhzID0ga2V5Lm1hdGNoKC9cXFsuKj9cXF0vZykgfHwgW107XG4gICAgcGF0aHMgPSBbcGFyZW50S2V5WzBdXS5jb25jYXQocGF0aHMpLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4ga2V5LnJlcGxhY2UoL1xcW3xcXF0vZywgJycpO1xuICAgIH0pO1xuICAgIHZhciBjdXJyZW50UGF0aCA9IG91dHB1dDtcbiAgICB3aGlsZSAocGF0aHMubGVuZ3RoKSB7XG4gICAgICB2YXIgcGF0aEtleSA9IHBhdGhzLnNoaWZ0KCk7XG5cbiAgICAgIGlmIChwYXRoS2V5IGluIGN1cnJlbnRQYXRoKSB7XG4gICAgICAgIGN1cnJlbnRQYXRoID0gY3VycmVudFBhdGhbcGF0aEtleV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdXJyZW50UGF0aFtwYXRoS2V5XSA9IHBhdGhzLmxlbmd0aCA/IGlzTmFOKHBhdGhzWzBdKSA/IHt9IDogW10gOiBzb3VyY2Vba2V5XTtcbiAgICAgICAgY3VycmVudFBhdGggPSBjdXJyZW50UGF0aFtwYXRoS2V5XTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb3V0cHV0O1xuICB9LCB7fSk7XG59XG5cbmZ1bmN0aW9uIGZyb21PYmoob2JqKSB7XG4gIGZ1bmN0aW9uIHJlY3VyKG5ld09iaiwgcHJvcE5hbWUsIGN1cnJWYWwpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjdXJyVmFsKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoY3VyclZhbCkgPT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgICBPYmplY3Qua2V5cyhjdXJyVmFsKS5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgIHJlY3VyKG5ld09iaiwgcHJvcE5hbWUgKyBcIltcIiArIHYgKyBcIl1cIiwgY3VyclZhbFt2XSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBuZXdPYmo7XG4gICAgfVxuXG4gICAgbmV3T2JqW3Byb3BOYW1lXSA9IGN1cnJWYWw7XG4gICAgcmV0dXJuIG5ld09iajtcbiAgfVxuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgcmV0dXJuIGtleXMucmVkdWNlKGZ1bmN0aW9uIChuZXdPYmosIHByb3BOYW1lKSB7XG4gICAgcmV0dXJuIHJlY3VyKG5ld09iaiwgcHJvcE5hbWUsIG9ialtwcm9wTmFtZV0pO1xuICB9LCB7fSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBmcm9tT2JqOiBmcm9tT2JqLFxuICB0b09iajogdG9PYmpcbn07XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL2Zvcm1zeS1yZWFjdC9saWIvRGVjb3JhdG9yLmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKGdsb2JhbCkge1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO2ZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9cmV0dXJuIHRhcmdldDtcbn07XG5cbnZhciBSZWFjdCA9IGdsb2JhbC5SZWFjdCB8fCBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcmVhY3QvcmVhY3QuanNcIik7XG52YXIgY3JlYXRlUmVhY3RDbGFzcyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9jcmVhdGUtcmVhY3QtY2xhc3MvaW5kZXguanNcIik7XG52YXIgTWl4aW4gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvZm9ybXN5LXJlYWN0L2xpYi9NaXhpbi5qc1wiKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24gKENvbXBvbmVudCkge1xuICAgIHJldHVybiBjcmVhdGVSZWFjdENsYXNzKHtcbiAgICAgIG1peGluczogW01peGluXSxcbiAgICAgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICAgICAgICBzZXRWYWxpZGF0aW9uczogdGhpcy5zZXRWYWxpZGF0aW9ucyxcbiAgICAgICAgICBzZXRWYWx1ZTogdGhpcy5zZXRWYWx1ZSxcbiAgICAgICAgICByZXNldFZhbHVlOiB0aGlzLnJlc2V0VmFsdWUsXG4gICAgICAgICAgZ2V0VmFsdWU6IHRoaXMuZ2V0VmFsdWUsXG4gICAgICAgICAgaGFzVmFsdWU6IHRoaXMuaGFzVmFsdWUsXG4gICAgICAgICAgZ2V0RXJyb3JNZXNzYWdlOiB0aGlzLmdldEVycm9yTWVzc2FnZSxcbiAgICAgICAgICBnZXRFcnJvck1lc3NhZ2VzOiB0aGlzLmdldEVycm9yTWVzc2FnZXMsXG4gICAgICAgICAgaXNGb3JtRGlzYWJsZWQ6IHRoaXMuaXNGb3JtRGlzYWJsZWQsXG4gICAgICAgICAgaXNWYWxpZDogdGhpcy5pc1ZhbGlkLFxuICAgICAgICAgIGlzUHJpc3RpbmU6IHRoaXMuaXNQcmlzdGluZSxcbiAgICAgICAgICBpc0Zvcm1TdWJtaXR0ZWQ6IHRoaXMuaXNGb3JtU3VibWl0dGVkLFxuICAgICAgICAgIGlzUmVxdWlyZWQ6IHRoaXMuaXNSZXF1aXJlZCxcbiAgICAgICAgICBzaG93UmVxdWlyZWQ6IHRoaXMuc2hvd1JlcXVpcmVkLFxuICAgICAgICAgIHNob3dFcnJvcjogdGhpcy5zaG93RXJyb3IsXG4gICAgICAgICAgaXNWYWxpZFZhbHVlOiB0aGlzLmlzVmFsaWRWYWx1ZVxuICAgICAgICB9LCB0aGlzLnByb3BzKSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG59O1xuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2J1aWxkaW4vZ2xvYmFsLmpzXCIpKSlcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvZm9ybXN5LXJlYWN0L2xpYi9IT0MuanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oZ2xvYmFsKSB7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07Zm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1yZXR1cm4gdGFyZ2V0O1xufTtcblxudmFyIFJlYWN0ID0gZ2xvYmFsLlJlYWN0IHx8IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9yZWFjdC9yZWFjdC5qc1wiKTtcbnZhciBjcmVhdGVSZWFjdENsYXNzID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL2NyZWF0ZS1yZWFjdC1jbGFzcy9pbmRleC5qc1wiKTtcbnZhciBNaXhpbiA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9mb3Jtc3ktcmVhY3QvbGliL01peGluLmpzXCIpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ29tcG9uZW50KSB7XG4gIHJldHVybiBjcmVhdGVSZWFjdENsYXNzKHtcbiAgICBkaXNwbGF5TmFtZTogJ0Zvcm1zeSgnICsgZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KSArICcpJyxcbiAgICBtaXhpbnM6IFtNaXhpbl0sXG5cbiAgICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBpbm5lclJlZiA9IHRoaXMucHJvcHMuaW5uZXJSZWY7XG5cbiAgICAgIHZhciBwcm9wc0ZvckVsZW1lbnQgPSBfZXh0ZW5kcyh7XG4gICAgICAgIHNldFZhbGlkYXRpb25zOiB0aGlzLnNldFZhbGlkYXRpb25zLFxuICAgICAgICBzZXRWYWx1ZTogdGhpcy5zZXRWYWx1ZSxcbiAgICAgICAgcmVzZXRWYWx1ZTogdGhpcy5yZXNldFZhbHVlLFxuICAgICAgICBnZXRWYWx1ZTogdGhpcy5nZXRWYWx1ZSxcbiAgICAgICAgaGFzVmFsdWU6IHRoaXMuaGFzVmFsdWUsXG4gICAgICAgIGdldEVycm9yTWVzc2FnZTogdGhpcy5nZXRFcnJvck1lc3NhZ2UsXG4gICAgICAgIGdldEVycm9yTWVzc2FnZXM6IHRoaXMuZ2V0RXJyb3JNZXNzYWdlcyxcbiAgICAgICAgaXNGb3JtRGlzYWJsZWQ6IHRoaXMuaXNGb3JtRGlzYWJsZWQsXG4gICAgICAgIGlzVmFsaWQ6IHRoaXMuaXNWYWxpZCxcbiAgICAgICAgaXNQcmlzdGluZTogdGhpcy5pc1ByaXN0aW5lLFxuICAgICAgICBpc0Zvcm1TdWJtaXR0ZWQ6IHRoaXMuaXNGb3JtU3VibWl0dGVkLFxuICAgICAgICBpc1JlcXVpcmVkOiB0aGlzLmlzUmVxdWlyZWQsXG4gICAgICAgIHNob3dSZXF1aXJlZDogdGhpcy5zaG93UmVxdWlyZWQsXG4gICAgICAgIHNob3dFcnJvcjogdGhpcy5zaG93RXJyb3IsXG4gICAgICAgIGlzVmFsaWRWYWx1ZTogdGhpcy5pc1ZhbGlkVmFsdWVcbiAgICAgIH0sIHRoaXMucHJvcHMpO1xuXG4gICAgICBpZiAoaW5uZXJSZWYpIHtcbiAgICAgICAgcHJvcHNGb3JFbGVtZW50LnJlZiA9IGlubmVyUmVmO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBwcm9wc0ZvckVsZW1lbnQpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5mdW5jdGlvbiBnZXREaXNwbGF5TmFtZShDb21wb25lbnQpIHtcbiAgcmV0dXJuIENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSB8fCAodHlwZW9mIENvbXBvbmVudCA9PT0gJ3N0cmluZycgPyBDb21wb25lbnQgOiAnQ29tcG9uZW50Jyk7XG59XG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanNcIikpKVxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9mb3Jtc3ktcmVhY3QvbGliL01peGluLmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKGdsb2JhbCkge1xuXG52YXIgUHJvcFR5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanNcIik7XG52YXIgdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvZm9ybXN5LXJlYWN0L2xpYi91dGlscy5qc1wiKTtcbnZhciBSZWFjdCA9IGdsb2JhbC5SZWFjdCB8fCBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcmVhY3QvcmVhY3QuanNcIik7XG5cbnZhciBjb252ZXJ0VmFsaWRhdGlvbnNUb09iamVjdCA9IGZ1bmN0aW9uIGNvbnZlcnRWYWxpZGF0aW9uc1RvT2JqZWN0KHZhbGlkYXRpb25zKSB7XG5cbiAgaWYgKHR5cGVvZiB2YWxpZGF0aW9ucyA9PT0gJ3N0cmluZycpIHtcblxuICAgIHJldHVybiB2YWxpZGF0aW9ucy5zcGxpdCgvXFwsKD8hW157XFxbXSpbfVxcXV0pL2cpLnJlZHVjZShmdW5jdGlvbiAodmFsaWRhdGlvbnMsIHZhbGlkYXRpb24pIHtcbiAgICAgIHZhciBhcmdzID0gdmFsaWRhdGlvbi5zcGxpdCgnOicpO1xuICAgICAgdmFyIHZhbGlkYXRlTWV0aG9kID0gYXJncy5zaGlmdCgpO1xuXG4gICAgICBhcmdzID0gYXJncy5tYXAoZnVuY3Rpb24gKGFyZykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKGFyZyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICByZXR1cm4gYXJnOyAvLyBJdCBpcyBhIHN0cmluZyBpZiBpdCBjYW4gbm90IHBhcnNlIGl0XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAoYXJncy5sZW5ndGggPiAxKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRm9ybXN5IGRvZXMgbm90IHN1cHBvcnQgbXVsdGlwbGUgYXJncyBvbiBzdHJpbmcgdmFsaWRhdGlvbnMuIFVzZSBvYmplY3QgZm9ybWF0IG9mIHZhbGlkYXRpb25zIGluc3RlYWQuJyk7XG4gICAgICB9XG5cbiAgICAgIHZhbGlkYXRpb25zW3ZhbGlkYXRlTWV0aG9kXSA9IGFyZ3MubGVuZ3RoID8gYXJnc1swXSA6IHRydWU7XG4gICAgICByZXR1cm4gdmFsaWRhdGlvbnM7XG4gICAgfSwge30pO1xuICB9XG5cbiAgcmV0dXJuIHZhbGlkYXRpb25zIHx8IHt9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBfdmFsdWU6IHRoaXMucHJvcHMudmFsdWUsXG4gICAgICBfaXNSZXF1aXJlZDogZmFsc2UsXG4gICAgICBfaXNWYWxpZDogdHJ1ZSxcbiAgICAgIF9pc1ByaXN0aW5lOiB0cnVlLFxuICAgICAgX3ByaXN0aW5lVmFsdWU6IHRoaXMucHJvcHMudmFsdWUsXG4gICAgICBfdmFsaWRhdGlvbkVycm9yOiBbXSxcbiAgICAgIF9leHRlcm5hbEVycm9yOiBudWxsLFxuICAgICAgX2Zvcm1TdWJtaXR0ZWQ6IGZhbHNlXG4gICAgfTtcbiAgfSxcbiAgY29udGV4dFR5cGVzOiB7XG4gICAgZm9ybXN5OiBQcm9wVHlwZXMub2JqZWN0IC8vIFdoYXQgYWJvdXQgcmVxdWlyZWQ/XG4gIH0sXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7XG4gICAgICB2YWxpZGF0aW9uRXJyb3I6ICcnLFxuICAgICAgdmFsaWRhdGlvbkVycm9yczoge31cbiAgICB9O1xuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxNb3VudDogZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHZhciBjb25maWd1cmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLnNldFZhbGlkYXRpb25zKHRoaXMucHJvcHMudmFsaWRhdGlvbnMsIHRoaXMucHJvcHMucmVxdWlyZWQpO1xuXG4gICAgICAvLyBQYXNzIGEgZnVuY3Rpb24gaW5zdGVhZD9cbiAgICAgIHRoaXMuY29udGV4dC5mb3Jtc3kuYXR0YWNoVG9Gb3JtKHRoaXMpO1xuICAgICAgLy90aGlzLnByb3BzLl9hdHRhY2hUb0Zvcm0odGhpcyk7XG4gICAgfS5iaW5kKHRoaXMpO1xuXG4gICAgaWYgKCF0aGlzLnByb3BzLm5hbWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRm9ybSBJbnB1dCByZXF1aXJlcyBhIG5hbWUgcHJvcGVydHkgd2hlbiB1c2VkJyk7XG4gICAgfVxuXG4gICAgLypcbiAgICBpZiAoIXRoaXMucHJvcHMuX2F0dGFjaFRvRm9ybSkge1xuICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNNb3VudGVkKCkpIHJldHVybjtcbiAgICAgICAgaWYgKCF0aGlzLnByb3BzLl9hdHRhY2hUb0Zvcm0pIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Zvcm0gTWl4aW4gcmVxdWlyZXMgY29tcG9uZW50IHRvIGJlIG5lc3RlZCBpbiBhIEZvcm0nKTtcbiAgICAgICAgfVxuICAgICAgICBjb25maWd1cmUoKTtcbiAgICAgIH0uYmluZCh0aGlzKSwgMCk7XG4gICAgfVxuICAgICovXG4gICAgY29uZmlndXJlKCk7XG4gIH0sXG5cbiAgLy8gV2UgaGF2ZSB0byBtYWtlIHRoZSB2YWxpZGF0ZSBtZXRob2QgaXMga2VwdCB3aGVuIG5ldyBwcm9wcyBhcmUgYWRkZWRcbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICB0aGlzLnNldFZhbGlkYXRpb25zKG5leHRQcm9wcy52YWxpZGF0aW9ucywgbmV4dFByb3BzLnJlcXVpcmVkKTtcbiAgfSxcblxuICBjb21wb25lbnREaWRVcGRhdGU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcblxuICAgIC8vIElmIHRoZSB2YWx1ZSBwYXNzZWQgaGFzIGNoYW5nZWQsIHNldCBpdC4gSWYgdmFsdWUgaXMgbm90IHBhc3NlZCBpdCB3aWxsXG4gICAgLy8gaW50ZXJuYWxseSB1cGRhdGUsIGFuZCB0aGlzIHdpbGwgbmV2ZXIgcnVuXG4gICAgaWYgKCF1dGlscy5pc1NhbWUodGhpcy5wcm9wcy52YWx1ZSwgcHJldlByb3BzLnZhbHVlKSkge1xuICAgICAgdGhpcy5zZXRWYWx1ZSh0aGlzLnByb3BzLnZhbHVlKTtcbiAgICB9XG5cbiAgICAvLyBJZiB2YWxpZGF0aW9ucyBvciByZXF1aXJlZCBpcyBjaGFuZ2VkLCBydW4gYSBuZXcgdmFsaWRhdGlvblxuICAgIGlmICghdXRpbHMuaXNTYW1lKHRoaXMucHJvcHMudmFsaWRhdGlvbnMsIHByZXZQcm9wcy52YWxpZGF0aW9ucykgfHwgIXV0aWxzLmlzU2FtZSh0aGlzLnByb3BzLnJlcXVpcmVkLCBwcmV2UHJvcHMucmVxdWlyZWQpKSB7XG4gICAgICB0aGlzLmNvbnRleHQuZm9ybXN5LnZhbGlkYXRlKHRoaXMpO1xuICAgIH1cbiAgfSxcblxuICAvLyBEZXRhY2ggaXQgd2hlbiBjb21wb25lbnQgdW5tb3VudHNcbiAgY29tcG9uZW50V2lsbFVubW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuY29udGV4dC5mb3Jtc3kuZGV0YWNoRnJvbUZvcm0odGhpcyk7XG4gICAgLy90aGlzLnByb3BzLl9kZXRhY2hGcm9tRm9ybSh0aGlzKTtcbiAgfSxcblxuICBzZXRWYWxpZGF0aW9uczogZnVuY3Rpb24gc2V0VmFsaWRhdGlvbnModmFsaWRhdGlvbnMsIHJlcXVpcmVkKSB7XG5cbiAgICAvLyBBZGQgdmFsaWRhdGlvbnMgdG8gdGhlIHN0b3JlIGl0c2VsZiBhcyB0aGUgcHJvcHMgb2JqZWN0IGNhbiBub3QgYmUgbW9kaWZpZWRcbiAgICB0aGlzLl92YWxpZGF0aW9ucyA9IGNvbnZlcnRWYWxpZGF0aW9uc1RvT2JqZWN0KHZhbGlkYXRpb25zKSB8fCB7fTtcbiAgICB0aGlzLl9yZXF1aXJlZFZhbGlkYXRpb25zID0gcmVxdWlyZWQgPT09IHRydWUgPyB7IGlzRGVmYXVsdFJlcXVpcmVkVmFsdWU6IHRydWUgfSA6IGNvbnZlcnRWYWxpZGF0aW9uc1RvT2JqZWN0KHJlcXVpcmVkKTtcbiAgfSxcblxuICAvLyBXZSB2YWxpZGF0ZSBhZnRlciB0aGUgdmFsdWUgaGFzIGJlZW4gc2V0XG4gIHNldFZhbHVlOiBmdW5jdGlvbiBzZXRWYWx1ZSh2YWx1ZSkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgX3ZhbHVlOiB2YWx1ZSxcbiAgICAgIF9pc1ByaXN0aW5lOiBmYWxzZVxuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuY29udGV4dC5mb3Jtc3kudmFsaWRhdGUodGhpcyk7XG4gICAgICAvL3RoaXMucHJvcHMuX3ZhbGlkYXRlKHRoaXMpO1xuICAgIH0uYmluZCh0aGlzKSk7XG4gIH0sXG4gIHJlc2V0VmFsdWU6IGZ1bmN0aW9uIHJlc2V0VmFsdWUoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBfdmFsdWU6IHRoaXMuc3RhdGUuX3ByaXN0aW5lVmFsdWUsXG4gICAgICBfaXNQcmlzdGluZTogdHJ1ZVxuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuY29udGV4dC5mb3Jtc3kudmFsaWRhdGUodGhpcyk7XG4gICAgICAvL3RoaXMucHJvcHMuX3ZhbGlkYXRlKHRoaXMpO1xuICAgIH0pO1xuICB9LFxuICBnZXRWYWx1ZTogZnVuY3Rpb24gZ2V0VmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuX3ZhbHVlO1xuICB9LFxuICBoYXNWYWx1ZTogZnVuY3Rpb24gaGFzVmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuX3ZhbHVlICE9PSAnJztcbiAgfSxcbiAgZ2V0RXJyb3JNZXNzYWdlOiBmdW5jdGlvbiBnZXRFcnJvck1lc3NhZ2UoKSB7XG4gICAgdmFyIG1lc3NhZ2VzID0gdGhpcy5nZXRFcnJvck1lc3NhZ2VzKCk7XG4gICAgcmV0dXJuIG1lc3NhZ2VzLmxlbmd0aCA/IG1lc3NhZ2VzWzBdIDogbnVsbDtcbiAgfSxcbiAgZ2V0RXJyb3JNZXNzYWdlczogZnVuY3Rpb24gZ2V0RXJyb3JNZXNzYWdlcygpIHtcbiAgICByZXR1cm4gIXRoaXMuaXNWYWxpZCgpIHx8IHRoaXMuc2hvd1JlcXVpcmVkKCkgPyB0aGlzLnN0YXRlLl9leHRlcm5hbEVycm9yIHx8IHRoaXMuc3RhdGUuX3ZhbGlkYXRpb25FcnJvciB8fCBbXSA6IFtdO1xuICB9LFxuICBpc0Zvcm1EaXNhYmxlZDogZnVuY3Rpb24gaXNGb3JtRGlzYWJsZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dC5mb3Jtc3kuaXNGb3JtRGlzYWJsZWQoKTtcbiAgICAvL3JldHVybiB0aGlzLnByb3BzLl9pc0Zvcm1EaXNhYmxlZCgpO1xuICB9LFxuICBpc1ZhbGlkOiBmdW5jdGlvbiBpc1ZhbGlkKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlLl9pc1ZhbGlkO1xuICB9LFxuICBpc1ByaXN0aW5lOiBmdW5jdGlvbiBpc1ByaXN0aW5lKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlLl9pc1ByaXN0aW5lO1xuICB9LFxuICBpc0Zvcm1TdWJtaXR0ZWQ6IGZ1bmN0aW9uIGlzRm9ybVN1Ym1pdHRlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5fZm9ybVN1Ym1pdHRlZDtcbiAgfSxcbiAgaXNSZXF1aXJlZDogZnVuY3Rpb24gaXNSZXF1aXJlZCgpIHtcbiAgICByZXR1cm4gISF0aGlzLnByb3BzLnJlcXVpcmVkO1xuICB9LFxuICBzaG93UmVxdWlyZWQ6IGZ1bmN0aW9uIHNob3dSZXF1aXJlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5faXNSZXF1aXJlZDtcbiAgfSxcbiAgc2hvd0Vycm9yOiBmdW5jdGlvbiBzaG93RXJyb3IoKSB7XG4gICAgcmV0dXJuICF0aGlzLnNob3dSZXF1aXJlZCgpICYmICF0aGlzLmlzVmFsaWQoKTtcbiAgfSxcbiAgaXNWYWxpZFZhbHVlOiBmdW5jdGlvbiBpc1ZhbGlkVmFsdWUodmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0LmZvcm1zeS5pc1ZhbGlkVmFsdWUuY2FsbChudWxsLCB0aGlzLCB2YWx1ZSk7XG4gICAgLy9yZXR1cm4gdGhpcy5wcm9wcy5faXNWYWxpZFZhbHVlLmNhbGwobnVsbCwgdGhpcywgdmFsdWUpO1xuICB9XG59O1xuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2J1aWxkaW4vZ2xvYmFsLmpzXCIpKSlcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvZm9ybXN5LXJlYWN0L2xpYi9tYWluLmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKGdsb2JhbCkge1xuXG52YXIgX3R5cGVvZjIgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO2ZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9cmV0dXJuIHRhcmdldDtcbn07XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIF90eXBlb2YyKFN5bWJvbC5pdGVyYXRvcikgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YyKG9iaik7XG59IDogZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iaiA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mMihvYmopO1xufTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykge1xuICB2YXIgdGFyZ2V0ID0ge307Zm9yICh2YXIgaSBpbiBvYmopIHtcbiAgICBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlO2lmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlO3RhcmdldFtpXSA9IG9ialtpXTtcbiAgfXJldHVybiB0YXJnZXQ7XG59XG5cbnZhciBQcm9wVHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qc1wiKTtcbnZhciBSZWFjdCA9IGdsb2JhbC5SZWFjdCB8fCBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcmVhY3QvcmVhY3QuanNcIik7XG52YXIgY3JlYXRlUmVhY3RDbGFzcyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9jcmVhdGUtcmVhY3QtY2xhc3MvaW5kZXguanNcIik7XG52YXIgRm9ybXN5ID0ge307XG52YXIgdmFsaWRhdGlvblJ1bGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL2Zvcm1zeS1yZWFjdC9saWIvdmFsaWRhdGlvblJ1bGVzLmpzXCIpO1xudmFyIGZvcm1EYXRhVG9PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvZm9ybS1kYXRhLXRvLW9iamVjdC9pbmRleC5qc1wiKTtcbnZhciB1dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9mb3Jtc3ktcmVhY3QvbGliL3V0aWxzLmpzXCIpO1xudmFyIE1peGluID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL2Zvcm1zeS1yZWFjdC9saWIvTWl4aW4uanNcIik7XG52YXIgSE9DID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL2Zvcm1zeS1yZWFjdC9saWIvSE9DLmpzXCIpO1xudmFyIERlY29yYXRvciA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9mb3Jtc3ktcmVhY3QvbGliL0RlY29yYXRvci5qc1wiKTtcbnZhciBvcHRpb25zID0ge307XG52YXIgZW1wdHlBcnJheSA9IFtdO1xuXG5Gb3Jtc3kuTWl4aW4gPSBNaXhpbjtcbkZvcm1zeS5IT0MgPSBIT0M7XG5Gb3Jtc3kuRGVjb3JhdG9yID0gRGVjb3JhdG9yO1xuXG5Gb3Jtc3kuZGVmYXVsdHMgPSBmdW5jdGlvbiAocGFzc2VkT3B0aW9ucykge1xuICBvcHRpb25zID0gcGFzc2VkT3B0aW9ucztcbn07XG5cbkZvcm1zeS5hZGRWYWxpZGF0aW9uUnVsZSA9IGZ1bmN0aW9uIChuYW1lLCBmdW5jKSB7XG4gIHZhbGlkYXRpb25SdWxlc1tuYW1lXSA9IGZ1bmM7XG59O1xuXG5Gb3Jtc3kuRm9ybSA9IGNyZWF0ZVJlYWN0Q2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ0Zvcm1zeScsXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpc1ZhbGlkOiB0cnVlLFxuICAgICAgaXNTdWJtaXR0aW5nOiBmYWxzZSxcbiAgICAgIGNhbkNoYW5nZTogZmFsc2VcbiAgICB9O1xuICB9LFxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgb25TdWNjZXNzOiBmdW5jdGlvbiBvblN1Y2Nlc3MoKSB7fSxcbiAgICAgIG9uRXJyb3I6IGZ1bmN0aW9uIG9uRXJyb3IoKSB7fSxcbiAgICAgIG9uU3VibWl0OiBmdW5jdGlvbiBvblN1Ym1pdCgpIHt9LFxuICAgICAgb25WYWxpZFN1Ym1pdDogZnVuY3Rpb24gb25WYWxpZFN1Ym1pdCgpIHt9LFxuICAgICAgb25JbnZhbGlkU3VibWl0OiBmdW5jdGlvbiBvbkludmFsaWRTdWJtaXQoKSB7fSxcbiAgICAgIG9uVmFsaWQ6IGZ1bmN0aW9uIG9uVmFsaWQoKSB7fSxcbiAgICAgIG9uSW52YWxpZDogZnVuY3Rpb24gb25JbnZhbGlkKCkge30sXG4gICAgICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UoKSB7fSxcbiAgICAgIHZhbGlkYXRpb25FcnJvcnM6IG51bGwsXG4gICAgICBwcmV2ZW50RXh0ZXJuYWxJbnZhbGlkYXRpb246IGZhbHNlXG4gICAgfTtcbiAgfSxcblxuICBjaGlsZENvbnRleHRUeXBlczoge1xuICAgIGZvcm1zeTogUHJvcFR5cGVzLm9iamVjdFxuICB9LFxuICBnZXRDaGlsZENvbnRleHQ6IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGZvcm1zeToge1xuICAgICAgICBhdHRhY2hUb0Zvcm06IHRoaXMuYXR0YWNoVG9Gb3JtLFxuICAgICAgICBkZXRhY2hGcm9tRm9ybTogdGhpcy5kZXRhY2hGcm9tRm9ybSxcbiAgICAgICAgdmFsaWRhdGU6IHRoaXMudmFsaWRhdGUsXG4gICAgICAgIGlzRm9ybURpc2FibGVkOiB0aGlzLmlzRm9ybURpc2FibGVkLFxuICAgICAgICBpc1ZhbGlkVmFsdWU6IGZ1bmN0aW9uIGlzVmFsaWRWYWx1ZShjb21wb25lbnQsIHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLnJ1blZhbGlkYXRpb24oY29tcG9uZW50LCB2YWx1ZSkuaXNWYWxpZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH0sXG5cbiAgLy8gQWRkIGEgbWFwIHRvIHN0b3JlIHRoZSBpbnB1dHMgb2YgdGhlIGZvcm0sIGEgbW9kZWwgdG8gc3RvcmVcbiAgLy8gdGhlIHZhbHVlcyBvZiB0aGUgZm9ybSBhbmQgcmVnaXN0ZXIgY2hpbGQgaW5wdXRzXG4gIGNvbXBvbmVudFdpbGxNb3VudDogZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHRoaXMuaW5wdXRzID0gW107XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMudmFsaWRhdGVGb3JtKCk7XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbFVwZGF0ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVwZGF0ZSgpIHtcbiAgICAvLyBLZWVwIGEgcmVmZXJlbmNlIHRvIGlucHV0IG5hbWVzIGJlZm9yZSBmb3JtIHVwZGF0ZXMsXG4gICAgLy8gdG8gY2hlY2sgaWYgaW5wdXRzIGhhcyBjaGFuZ2VkIGFmdGVyIHJlbmRlclxuICAgIHRoaXMucHJldklucHV0TmFtZXMgPSB0aGlzLmlucHV0cy5tYXAoZnVuY3Rpb24gKGNvbXBvbmVudCkge1xuICAgICAgcmV0dXJuIGNvbXBvbmVudC5wcm9wcy5uYW1lO1xuICAgIH0pO1xuICB9LFxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuXG4gICAgaWYgKHRoaXMucHJvcHMudmFsaWRhdGlvbkVycm9ycyAmJiBfdHlwZW9mKHRoaXMucHJvcHMudmFsaWRhdGlvbkVycm9ycykgPT09ICdvYmplY3QnICYmIE9iamVjdC5rZXlzKHRoaXMucHJvcHMudmFsaWRhdGlvbkVycm9ycykubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5zZXRJbnB1dFZhbGlkYXRpb25FcnJvcnModGhpcy5wcm9wcy52YWxpZGF0aW9uRXJyb3JzKTtcbiAgICB9XG5cbiAgICB2YXIgbmV3SW5wdXROYW1lcyA9IHRoaXMuaW5wdXRzLm1hcChmdW5jdGlvbiAoY29tcG9uZW50KSB7XG4gICAgICByZXR1cm4gY29tcG9uZW50LnByb3BzLm5hbWU7XG4gICAgfSk7XG4gICAgaWYgKHV0aWxzLmFycmF5c0RpZmZlcih0aGlzLnByZXZJbnB1dE5hbWVzLCBuZXdJbnB1dE5hbWVzKSkge1xuICAgICAgdGhpcy52YWxpZGF0ZUZvcm0oKTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gQWxsb3cgcmVzZXR0aW5nIHRvIHNwZWNpZmllZCBkYXRhXG4gIHJlc2V0OiBmdW5jdGlvbiByZXNldChkYXRhKSB7XG4gICAgdGhpcy5zZXRGb3JtUHJpc3RpbmUodHJ1ZSk7XG4gICAgdGhpcy5yZXNldE1vZGVsKGRhdGEpO1xuICB9LFxuXG4gIC8vIFVwZGF0ZSBtb2RlbCwgc3VibWl0IHRvIHVybCBwcm9wIGFuZCBzZW5kIHRoZSBtb2RlbFxuICBzdWJtaXQ6IGZ1bmN0aW9uIHN1Ym1pdChldmVudCkge1xuXG4gICAgZXZlbnQgJiYgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIC8vIFRyaWdnZXIgZm9ybSBhcyBub3QgcHJpc3RpbmUuXG4gICAgLy8gSWYgYW55IGlucHV0cyBoYXZlIG5vdCBiZWVuIHRvdWNoZWQgeWV0IHRoaXMgd2lsbCBtYWtlIHRoZW0gZGlydHlcbiAgICAvLyBzbyB2YWxpZGF0aW9uIGJlY29tZXMgdmlzaWJsZSAoaWYgYmFzZWQgb24gaXNQcmlzdGluZSlcbiAgICB0aGlzLnNldEZvcm1QcmlzdGluZShmYWxzZSk7XG4gICAgdmFyIG1vZGVsID0gdGhpcy5nZXRNb2RlbCgpO1xuICAgIHRoaXMucHJvcHMub25TdWJtaXQobW9kZWwsIHRoaXMucmVzZXRNb2RlbCwgdGhpcy51cGRhdGVJbnB1dHNXaXRoRXJyb3IpO1xuICAgIHRoaXMuc3RhdGUuaXNWYWxpZCA/IHRoaXMucHJvcHMub25WYWxpZFN1Ym1pdChtb2RlbCwgdGhpcy5yZXNldE1vZGVsLCB0aGlzLnVwZGF0ZUlucHV0c1dpdGhFcnJvcikgOiB0aGlzLnByb3BzLm9uSW52YWxpZFN1Ym1pdChtb2RlbCwgdGhpcy5yZXNldE1vZGVsLCB0aGlzLnVwZGF0ZUlucHV0c1dpdGhFcnJvcik7XG4gIH0sXG5cbiAgbWFwTW9kZWw6IGZ1bmN0aW9uIG1hcE1vZGVsKG1vZGVsKSB7XG5cbiAgICBpZiAodGhpcy5wcm9wcy5tYXBwaW5nKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5tYXBwaW5nKG1vZGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZvcm1EYXRhVG9PYmplY3QudG9PYmooT2JqZWN0LmtleXMobW9kZWwpLnJlZHVjZShmdW5jdGlvbiAobWFwcGVkTW9kZWwsIGtleSkge1xuXG4gICAgICAgIHZhciBrZXlBcnJheSA9IGtleS5zcGxpdCgnLicpO1xuICAgICAgICB2YXIgYmFzZSA9IG1hcHBlZE1vZGVsO1xuICAgICAgICB3aGlsZSAoa2V5QXJyYXkubGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIGN1cnJlbnRLZXkgPSBrZXlBcnJheS5zaGlmdCgpO1xuICAgICAgICAgIGJhc2UgPSBiYXNlW2N1cnJlbnRLZXldID0ga2V5QXJyYXkubGVuZ3RoID8gYmFzZVtjdXJyZW50S2V5XSB8fCB7fSA6IG1vZGVsW2tleV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbWFwcGVkTW9kZWw7XG4gICAgICB9LCB7fSkpO1xuICAgIH1cbiAgfSxcblxuICBnZXRNb2RlbDogZnVuY3Rpb24gZ2V0TW9kZWwoKSB7XG4gICAgdmFyIGN1cnJlbnRWYWx1ZXMgPSB0aGlzLmdldEN1cnJlbnRWYWx1ZXMoKTtcbiAgICByZXR1cm4gdGhpcy5tYXBNb2RlbChjdXJyZW50VmFsdWVzKTtcbiAgfSxcblxuICAvLyBSZXNldCBlYWNoIGtleSBpbiB0aGUgbW9kZWwgdG8gdGhlIG9yaWdpbmFsIC8gaW5pdGlhbCAvIHNwZWNpZmllZCB2YWx1ZVxuICByZXNldE1vZGVsOiBmdW5jdGlvbiByZXNldE1vZGVsKGRhdGEpIHtcbiAgICB0aGlzLmlucHV0cy5mb3JFYWNoKGZ1bmN0aW9uIChjb21wb25lbnQpIHtcbiAgICAgIHZhciBuYW1lID0gY29tcG9uZW50LnByb3BzLm5hbWU7XG4gICAgICBpZiAoZGF0YSAmJiBkYXRhLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIGNvbXBvbmVudC5zZXRWYWx1ZShkYXRhW25hbWVdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbXBvbmVudC5yZXNldFZhbHVlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy52YWxpZGF0ZUZvcm0oKTtcbiAgfSxcblxuICBzZXRJbnB1dFZhbGlkYXRpb25FcnJvcnM6IGZ1bmN0aW9uIHNldElucHV0VmFsaWRhdGlvbkVycm9ycyhlcnJvcnMpIHtcbiAgICB0aGlzLmlucHV0cy5mb3JFYWNoKGZ1bmN0aW9uIChjb21wb25lbnQpIHtcbiAgICAgIHZhciBuYW1lID0gY29tcG9uZW50LnByb3BzLm5hbWU7XG4gICAgICB2YXIgYXJncyA9IFt7XG4gICAgICAgIF9pc1ZhbGlkOiAhKG5hbWUgaW4gZXJyb3JzKSxcbiAgICAgICAgX3ZhbGlkYXRpb25FcnJvcjogdHlwZW9mIGVycm9yc1tuYW1lXSA9PT0gJ3N0cmluZycgPyBbZXJyb3JzW25hbWVdXSA6IGVycm9yc1tuYW1lXVxuICAgICAgfV07XG4gICAgICBjb21wb25lbnQuc2V0U3RhdGUuYXBwbHkoY29tcG9uZW50LCBhcmdzKTtcbiAgICB9KTtcbiAgfSxcblxuICAvLyBDaGVja3MgaWYgdGhlIHZhbHVlcyBoYXZlIGNoYW5nZWQgZnJvbSB0aGVpciBpbml0aWFsIHZhbHVlXG4gIGlzQ2hhbmdlZDogZnVuY3Rpb24gaXNDaGFuZ2VkKCkge1xuICAgIHJldHVybiAhdXRpbHMuaXNTYW1lKHRoaXMuZ2V0UHJpc3RpbmVWYWx1ZXMoKSwgdGhpcy5nZXRDdXJyZW50VmFsdWVzKCkpO1xuICB9LFxuXG4gIGdldFByaXN0aW5lVmFsdWVzOiBmdW5jdGlvbiBnZXRQcmlzdGluZVZhbHVlcygpIHtcbiAgICByZXR1cm4gdGhpcy5pbnB1dHMucmVkdWNlKGZ1bmN0aW9uIChkYXRhLCBjb21wb25lbnQpIHtcbiAgICAgIHZhciBuYW1lID0gY29tcG9uZW50LnByb3BzLm5hbWU7XG4gICAgICBkYXRhW25hbWVdID0gY29tcG9uZW50LnByb3BzLnZhbHVlO1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSwge30pO1xuICB9LFxuXG4gIC8vIEdvIHRocm91Z2ggZXJyb3JzIGZyb20gc2VydmVyIGFuZCBncmFiIHRoZSBjb21wb25lbnRzXG4gIC8vIHN0b3JlZCBpbiB0aGUgaW5wdXRzIG1hcC4gQ2hhbmdlIHRoZWlyIHN0YXRlIHRvIGludmFsaWRcbiAgLy8gYW5kIHNldCB0aGUgc2VydmVyRXJyb3IgbWVzc2FnZVxuICB1cGRhdGVJbnB1dHNXaXRoRXJyb3I6IGZ1bmN0aW9uIHVwZGF0ZUlucHV0c1dpdGhFcnJvcihlcnJvcnMpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIE9iamVjdC5rZXlzKGVycm9ycykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSwgaW5kZXgpIHtcbiAgICAgIHZhciBjb21wb25lbnQgPSB1dGlscy5maW5kKF90aGlzMi5pbnB1dHMsIGZ1bmN0aW9uIChjb21wb25lbnQpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudC5wcm9wcy5uYW1lID09PSBuYW1lO1xuICAgICAgfSk7XG4gICAgICBpZiAoIWNvbXBvbmVudCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBhcmUgdHJ5aW5nIHRvIHVwZGF0ZSBhbiBpbnB1dCB0aGF0IGRvZXMgbm90IGV4aXN0LiAnICsgJ1ZlcmlmeSBlcnJvcnMgb2JqZWN0IHdpdGggaW5wdXQgbmFtZXMuICcgKyBKU09OLnN0cmluZ2lmeShlcnJvcnMpKTtcbiAgICAgIH1cbiAgICAgIHZhciBhcmdzID0gW3tcbiAgICAgICAgX2lzVmFsaWQ6IF90aGlzMi5wcm9wcy5wcmV2ZW50RXh0ZXJuYWxJbnZhbGlkYXRpb24gfHwgZmFsc2UsXG4gICAgICAgIF9leHRlcm5hbEVycm9yOiB0eXBlb2YgZXJyb3JzW25hbWVdID09PSAnc3RyaW5nJyA/IFtlcnJvcnNbbmFtZV1dIDogZXJyb3JzW25hbWVdXG4gICAgICB9XTtcbiAgICAgIGNvbXBvbmVudC5zZXRTdGF0ZS5hcHBseShjb21wb25lbnQsIGFyZ3MpO1xuICAgIH0pO1xuICB9LFxuXG4gIGlzRm9ybURpc2FibGVkOiBmdW5jdGlvbiBpc0Zvcm1EaXNhYmxlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5kaXNhYmxlZDtcbiAgfSxcblxuICBnZXRDdXJyZW50VmFsdWVzOiBmdW5jdGlvbiBnZXRDdXJyZW50VmFsdWVzKCkge1xuICAgIHJldHVybiB0aGlzLmlucHV0cy5yZWR1Y2UoZnVuY3Rpb24gKGRhdGEsIGNvbXBvbmVudCkge1xuICAgICAgdmFyIG5hbWUgPSBjb21wb25lbnQucHJvcHMubmFtZTtcbiAgICAgIGRhdGFbbmFtZV0gPSBjb21wb25lbnQuc3RhdGUuX3ZhbHVlO1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSwge30pO1xuICB9LFxuXG4gIHNldEZvcm1QcmlzdGluZTogZnVuY3Rpb24gc2V0Rm9ybVByaXN0aW5lKGlzUHJpc3RpbmUpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIF9mb3JtU3VibWl0dGVkOiAhaXNQcmlzdGluZVxuICAgIH0pO1xuXG4gICAgLy8gSXRlcmF0ZSB0aHJvdWdoIGVhY2ggY29tcG9uZW50IGFuZCBzZXQgaXQgYXMgcHJpc3RpbmVcbiAgICAvLyBvciBcImRpcnR5XCIuXG4gICAgdGhpcy5pbnB1dHMuZm9yRWFjaChmdW5jdGlvbiAoY29tcG9uZW50LCBpbmRleCkge1xuICAgICAgY29tcG9uZW50LnNldFN0YXRlKHtcbiAgICAgICAgX2Zvcm1TdWJtaXR0ZWQ6ICFpc1ByaXN0aW5lLFxuICAgICAgICBfaXNQcmlzdGluZTogaXNQcmlzdGluZVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgLy8gVXNlIHRoZSBiaW5kZWQgdmFsdWVzIGFuZCB0aGUgYWN0dWFsIGlucHV0IHZhbHVlIHRvXG4gIC8vIHZhbGlkYXRlIHRoZSBpbnB1dCBhbmQgc2V0IGl0cyBzdGF0ZS4gVGhlbiBjaGVjayB0aGVcbiAgLy8gc3RhdGUgb2YgdGhlIGZvcm0gaXRzZWxmXG4gIHZhbGlkYXRlOiBmdW5jdGlvbiB2YWxpZGF0ZShjb21wb25lbnQpIHtcblxuICAgIC8vIFRyaWdnZXIgb25DaGFuZ2VcbiAgICBpZiAodGhpcy5zdGF0ZS5jYW5DaGFuZ2UpIHtcbiAgICAgIHRoaXMucHJvcHMub25DaGFuZ2UodGhpcy5nZXRDdXJyZW50VmFsdWVzKCksIHRoaXMuaXNDaGFuZ2VkKCkpO1xuICAgIH1cblxuICAgIHZhciB2YWxpZGF0aW9uID0gdGhpcy5ydW5WYWxpZGF0aW9uKGNvbXBvbmVudCk7XG4gICAgLy8gUnVuIHRocm91Z2ggdGhlIHZhbGlkYXRpb25zLCBzcGxpdCB0aGVtIHVwIGFuZCBjYWxsXG4gICAgLy8gdGhlIHZhbGlkYXRvciBJRiB0aGVyZSBpcyBhIHZhbHVlIG9yIGl0IGlzIHJlcXVpcmVkXG4gICAgY29tcG9uZW50LnNldFN0YXRlKHtcbiAgICAgIF9pc1ZhbGlkOiB2YWxpZGF0aW9uLmlzVmFsaWQsXG4gICAgICBfaXNSZXF1aXJlZDogdmFsaWRhdGlvbi5pc1JlcXVpcmVkLFxuICAgICAgX3ZhbGlkYXRpb25FcnJvcjogdmFsaWRhdGlvbi5lcnJvcixcbiAgICAgIF9leHRlcm5hbEVycm9yOiBudWxsXG4gICAgfSwgdGhpcy52YWxpZGF0ZUZvcm0pO1xuICB9LFxuXG4gIC8vIENoZWNrcyB2YWxpZGF0aW9uIG9uIGN1cnJlbnQgdmFsdWUgb3IgYSBwYXNzZWQgdmFsdWVcbiAgcnVuVmFsaWRhdGlvbjogZnVuY3Rpb24gcnVuVmFsaWRhdGlvbihjb21wb25lbnQsIHZhbHVlKSB7XG5cbiAgICB2YXIgY3VycmVudFZhbHVlcyA9IHRoaXMuZ2V0Q3VycmVudFZhbHVlcygpO1xuICAgIHZhciB2YWxpZGF0aW9uRXJyb3JzID0gY29tcG9uZW50LnByb3BzLnZhbGlkYXRpb25FcnJvcnM7XG4gICAgdmFyIHZhbGlkYXRpb25FcnJvciA9IGNvbXBvbmVudC5wcm9wcy52YWxpZGF0aW9uRXJyb3I7XG4gICAgdmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoID09PSAyID8gdmFsdWUgOiBjb21wb25lbnQuc3RhdGUuX3ZhbHVlO1xuXG4gICAgdmFyIHZhbGlkYXRpb25SZXN1bHRzID0gdGhpcy5ydW5SdWxlcyh2YWx1ZSwgY3VycmVudFZhbHVlcywgY29tcG9uZW50Ll92YWxpZGF0aW9ucyk7XG4gICAgdmFyIHJlcXVpcmVkUmVzdWx0cyA9IHRoaXMucnVuUnVsZXModmFsdWUsIGN1cnJlbnRWYWx1ZXMsIGNvbXBvbmVudC5fcmVxdWlyZWRWYWxpZGF0aW9ucyk7XG5cbiAgICAvLyB0aGUgY29tcG9uZW50IGRlZmluZXMgYW4gZXhwbGljaXQgdmFsaWRhdGUgZnVuY3Rpb25cbiAgICBpZiAodHlwZW9mIGNvbXBvbmVudC52YWxpZGF0ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB2YWxpZGF0aW9uUmVzdWx0cy5mYWlsZWQgPSBjb21wb25lbnQudmFsaWRhdGUoKSA/IFtdIDogWydmYWlsZWQnXTtcbiAgICB9XG5cbiAgICB2YXIgaXNSZXF1aXJlZCA9IE9iamVjdC5rZXlzKGNvbXBvbmVudC5fcmVxdWlyZWRWYWxpZGF0aW9ucykubGVuZ3RoID8gISFyZXF1aXJlZFJlc3VsdHMuc3VjY2Vzcy5sZW5ndGggOiBmYWxzZTtcbiAgICB2YXIgaXNWYWxpZCA9ICF2YWxpZGF0aW9uUmVzdWx0cy5mYWlsZWQubGVuZ3RoICYmICEodGhpcy5wcm9wcy52YWxpZGF0aW9uRXJyb3JzICYmIHRoaXMucHJvcHMudmFsaWRhdGlvbkVycm9yc1tjb21wb25lbnQucHJvcHMubmFtZV0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGlzUmVxdWlyZWQ6IGlzUmVxdWlyZWQsXG4gICAgICBpc1ZhbGlkOiBpc1JlcXVpcmVkID8gZmFsc2UgOiBpc1ZhbGlkLFxuICAgICAgZXJyb3I6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICBpZiAoaXNWYWxpZCAmJiAhaXNSZXF1aXJlZCkge1xuICAgICAgICAgIHJldHVybiBlbXB0eUFycmF5O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbGlkYXRpb25SZXN1bHRzLmVycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gdmFsaWRhdGlvblJlc3VsdHMuZXJyb3JzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMucHJvcHMudmFsaWRhdGlvbkVycm9ycyAmJiB0aGlzLnByb3BzLnZhbGlkYXRpb25FcnJvcnNbY29tcG9uZW50LnByb3BzLm5hbWVdKSB7XG4gICAgICAgICAgcmV0dXJuIHR5cGVvZiB0aGlzLnByb3BzLnZhbGlkYXRpb25FcnJvcnNbY29tcG9uZW50LnByb3BzLm5hbWVdID09PSAnc3RyaW5nJyA/IFt0aGlzLnByb3BzLnZhbGlkYXRpb25FcnJvcnNbY29tcG9uZW50LnByb3BzLm5hbWVdXSA6IHRoaXMucHJvcHMudmFsaWRhdGlvbkVycm9yc1tjb21wb25lbnQucHJvcHMubmFtZV07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNSZXF1aXJlZCkge1xuICAgICAgICAgIHZhciBlcnJvciA9IHZhbGlkYXRpb25FcnJvcnNbcmVxdWlyZWRSZXN1bHRzLnN1Y2Nlc3NbMF1dO1xuICAgICAgICAgIHJldHVybiBlcnJvciA/IFtlcnJvcl0gOiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbGlkYXRpb25SZXN1bHRzLmZhaWxlZC5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gdmFsaWRhdGlvblJlc3VsdHMuZmFpbGVkLm1hcChmdW5jdGlvbiAoZmFpbGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsaWRhdGlvbkVycm9yc1tmYWlsZWRdID8gdmFsaWRhdGlvbkVycm9yc1tmYWlsZWRdIDogdmFsaWRhdGlvbkVycm9yO1xuICAgICAgICAgIH0pLmZpbHRlcihmdW5jdGlvbiAoeCwgcG9zLCBhcnIpIHtcbiAgICAgICAgICAgIC8vIFJlbW92ZSBkdXBsaWNhdGVzXG4gICAgICAgICAgICByZXR1cm4gYXJyLmluZGV4T2YoeCkgPT09IHBvcztcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfS5jYWxsKHRoaXMpXG4gICAgfTtcbiAgfSxcblxuICBydW5SdWxlczogZnVuY3Rpb24gcnVuUnVsZXModmFsdWUsIGN1cnJlbnRWYWx1ZXMsIHZhbGlkYXRpb25zKSB7XG5cbiAgICB2YXIgcmVzdWx0cyA9IHtcbiAgICAgIGVycm9yczogW10sXG4gICAgICBmYWlsZWQ6IFtdLFxuICAgICAgc3VjY2VzczogW11cbiAgICB9O1xuICAgIGlmIChPYmplY3Qua2V5cyh2YWxpZGF0aW9ucykubGVuZ3RoKSB7XG4gICAgICBPYmplY3Qua2V5cyh2YWxpZGF0aW9ucykuZm9yRWFjaChmdW5jdGlvbiAodmFsaWRhdGlvbk1ldGhvZCkge1xuXG4gICAgICAgIGlmICh2YWxpZGF0aW9uUnVsZXNbdmFsaWRhdGlvbk1ldGhvZF0gJiYgdHlwZW9mIHZhbGlkYXRpb25zW3ZhbGlkYXRpb25NZXRob2RdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGb3Jtc3kgZG9lcyBub3QgYWxsb3cgeW91IHRvIG92ZXJyaWRlIGRlZmF1bHQgdmFsaWRhdGlvbnM6ICcgKyB2YWxpZGF0aW9uTWV0aG9kKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdmFsaWRhdGlvblJ1bGVzW3ZhbGlkYXRpb25NZXRob2RdICYmIHR5cGVvZiB2YWxpZGF0aW9uc1t2YWxpZGF0aW9uTWV0aG9kXSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRm9ybXN5IGRvZXMgbm90IGhhdmUgdGhlIHZhbGlkYXRpb24gcnVsZTogJyArIHZhbGlkYXRpb25NZXRob2QpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiB2YWxpZGF0aW9uc1t2YWxpZGF0aW9uTWV0aG9kXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHZhciB2YWxpZGF0aW9uID0gdmFsaWRhdGlvbnNbdmFsaWRhdGlvbk1ldGhvZF0oY3VycmVudFZhbHVlcywgdmFsdWUpO1xuICAgICAgICAgIGlmICh0eXBlb2YgdmFsaWRhdGlvbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJlc3VsdHMuZXJyb3JzLnB1c2godmFsaWRhdGlvbik7XG4gICAgICAgICAgICByZXN1bHRzLmZhaWxlZC5wdXNoKHZhbGlkYXRpb25NZXRob2QpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIXZhbGlkYXRpb24pIHtcbiAgICAgICAgICAgIHJlc3VsdHMuZmFpbGVkLnB1c2godmFsaWRhdGlvbk1ldGhvZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsaWRhdGlvbnNbdmFsaWRhdGlvbk1ldGhvZF0gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB2YXIgdmFsaWRhdGlvbiA9IHZhbGlkYXRpb25SdWxlc1t2YWxpZGF0aW9uTWV0aG9kXShjdXJyZW50VmFsdWVzLCB2YWx1ZSwgdmFsaWRhdGlvbnNbdmFsaWRhdGlvbk1ldGhvZF0pO1xuICAgICAgICAgIGlmICh0eXBlb2YgdmFsaWRhdGlvbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJlc3VsdHMuZXJyb3JzLnB1c2godmFsaWRhdGlvbik7XG4gICAgICAgICAgICByZXN1bHRzLmZhaWxlZC5wdXNoKHZhbGlkYXRpb25NZXRob2QpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIXZhbGlkYXRpb24pIHtcbiAgICAgICAgICAgIHJlc3VsdHMuZmFpbGVkLnB1c2godmFsaWRhdGlvbk1ldGhvZCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdHMuc3VjY2Vzcy5wdXNoKHZhbGlkYXRpb25NZXRob2QpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0cy5zdWNjZXNzLnB1c2godmFsaWRhdGlvbk1ldGhvZCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfSxcblxuICAvLyBWYWxpZGF0ZSB0aGUgZm9ybSBieSBnb2luZyB0aHJvdWdoIGFsbCBjaGlsZCBpbnB1dCBjb21wb25lbnRzXG4gIC8vIGFuZCBjaGVjayB0aGVpciBzdGF0ZVxuICB2YWxpZGF0ZUZvcm06IGZ1bmN0aW9uIHZhbGlkYXRlRm9ybSgpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIC8vIFdlIG5lZWQgYSBjYWxsYmFjayBhcyB3ZSBhcmUgdmFsaWRhdGluZyBhbGwgaW5wdXRzIGFnYWluLiBUaGlzIHdpbGxcbiAgICAvLyBydW4gd2hlbiB0aGUgbGFzdCBjb21wb25lbnQgaGFzIHNldCBpdHMgc3RhdGVcbiAgICB2YXIgb25WYWxpZGF0aW9uQ29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgYWxsSXNWYWxpZCA9IHRoaXMuaW5wdXRzLmV2ZXJ5KGZ1bmN0aW9uIChjb21wb25lbnQpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudC5zdGF0ZS5faXNWYWxpZDtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgaXNWYWxpZDogYWxsSXNWYWxpZFxuICAgICAgfSk7XG5cbiAgICAgIGlmIChhbGxJc1ZhbGlkKSB7XG4gICAgICAgIHRoaXMucHJvcHMub25WYWxpZCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wcm9wcy5vbkludmFsaWQoKTtcbiAgICAgIH1cblxuICAgICAgLy8gVGVsbCB0aGUgZm9ybSB0aGF0IGl0IGNhbiBzdGFydCB0byB0cmlnZ2VyIGNoYW5nZSBldmVudHNcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBjYW5DaGFuZ2U6IHRydWVcbiAgICAgIH0pO1xuICAgIH0uYmluZCh0aGlzKTtcblxuICAgIC8vIFJ1biB2YWxpZGF0aW9uIGFnYWluIGluIGNhc2UgYWZmZWN0ZWQgYnkgb3RoZXIgaW5wdXRzLiBUaGVcbiAgICAvLyBsYXN0IGNvbXBvbmVudCB2YWxpZGF0ZWQgd2lsbCBydW4gdGhlIG9uVmFsaWRhdGlvbkNvbXBsZXRlIGNhbGxiYWNrXG4gICAgdGhpcy5pbnB1dHMuZm9yRWFjaChmdW5jdGlvbiAoY29tcG9uZW50LCBpbmRleCkge1xuICAgICAgdmFyIHZhbGlkYXRpb24gPSBfdGhpczMucnVuVmFsaWRhdGlvbihjb21wb25lbnQpO1xuICAgICAgaWYgKHZhbGlkYXRpb24uaXNWYWxpZCAmJiBjb21wb25lbnQuc3RhdGUuX2V4dGVybmFsRXJyb3IpIHtcbiAgICAgICAgdmFsaWRhdGlvbi5pc1ZhbGlkID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBjb21wb25lbnQuc2V0U3RhdGUoe1xuICAgICAgICBfaXNWYWxpZDogdmFsaWRhdGlvbi5pc1ZhbGlkLFxuICAgICAgICBfaXNSZXF1aXJlZDogdmFsaWRhdGlvbi5pc1JlcXVpcmVkLFxuICAgICAgICBfdmFsaWRhdGlvbkVycm9yOiB2YWxpZGF0aW9uLmVycm9yLFxuICAgICAgICBfZXh0ZXJuYWxFcnJvcjogIXZhbGlkYXRpb24uaXNWYWxpZCAmJiBjb21wb25lbnQuc3RhdGUuX2V4dGVybmFsRXJyb3IgPyBjb21wb25lbnQuc3RhdGUuX2V4dGVybmFsRXJyb3IgOiBudWxsXG4gICAgICB9LCBpbmRleCA9PT0gX3RoaXMzLmlucHV0cy5sZW5ndGggLSAxID8gb25WYWxpZGF0aW9uQ29tcGxldGUgOiBudWxsKTtcbiAgICB9KTtcblxuICAgIC8vIElmIHRoZXJlIGFyZSBubyBpbnB1dHMsIHNldCBzdGF0ZSB3aGVyZSBmb3JtIGlzIHJlYWR5IHRvIHRyaWdnZXJcbiAgICAvLyBjaGFuZ2UgZXZlbnQuIE5ldyBpbnB1dHMgbWlnaHQgYmUgYWRkZWQgbGF0ZXJcbiAgICBpZiAoIXRoaXMuaW5wdXRzLmxlbmd0aCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGNhbkNoYW5nZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIC8vIE1ldGhvZCBwdXQgb24gZWFjaCBpbnB1dCBjb21wb25lbnQgdG8gcmVnaXN0ZXJcbiAgLy8gaXRzZWxmIHRvIHRoZSBmb3JtXG4gIGF0dGFjaFRvRm9ybTogZnVuY3Rpb24gYXR0YWNoVG9Gb3JtKGNvbXBvbmVudCkge1xuXG4gICAgaWYgKHRoaXMuaW5wdXRzLmluZGV4T2YoY29tcG9uZW50KSA9PT0gLTEpIHtcbiAgICAgIHRoaXMuaW5wdXRzLnB1c2goY29tcG9uZW50KTtcbiAgICB9XG5cbiAgICB0aGlzLnZhbGlkYXRlKGNvbXBvbmVudCk7XG4gIH0sXG5cbiAgLy8gTWV0aG9kIHB1dCBvbiBlYWNoIGlucHV0IGNvbXBvbmVudCB0byB1bnJlZ2lzdGVyXG4gIC8vIGl0c2VsZiBmcm9tIHRoZSBmb3JtXG4gIGRldGFjaEZyb21Gb3JtOiBmdW5jdGlvbiBkZXRhY2hGcm9tRm9ybShjb21wb25lbnQpIHtcbiAgICB2YXIgY29tcG9uZW50UG9zID0gdGhpcy5pbnB1dHMuaW5kZXhPZihjb21wb25lbnQpO1xuXG4gICAgaWYgKGNvbXBvbmVudFBvcyAhPT0gLTEpIHtcbiAgICAgIHRoaXMuaW5wdXRzID0gdGhpcy5pbnB1dHMuc2xpY2UoMCwgY29tcG9uZW50UG9zKS5jb25jYXQodGhpcy5pbnB1dHMuc2xpY2UoY29tcG9uZW50UG9zICsgMSkpO1xuICAgIH1cblxuICAgIHRoaXMudmFsaWRhdGVGb3JtKCk7XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBtYXBwaW5nID0gX3Byb3BzLm1hcHBpbmcsXG4gICAgICAgIHZhbGlkYXRpb25FcnJvcnMgPSBfcHJvcHMudmFsaWRhdGlvbkVycm9ycyxcbiAgICAgICAgb25TdWJtaXQgPSBfcHJvcHMub25TdWJtaXQsXG4gICAgICAgIG9uVmFsaWQgPSBfcHJvcHMub25WYWxpZCxcbiAgICAgICAgb25WYWxpZFN1Ym1pdCA9IF9wcm9wcy5vblZhbGlkU3VibWl0LFxuICAgICAgICBvbkludmFsaWQgPSBfcHJvcHMub25JbnZhbGlkLFxuICAgICAgICBvbkludmFsaWRTdWJtaXQgPSBfcHJvcHMub25JbnZhbGlkU3VibWl0LFxuICAgICAgICBvbkNoYW5nZSA9IF9wcm9wcy5vbkNoYW5nZSxcbiAgICAgICAgcmVzZXQgPSBfcHJvcHMucmVzZXQsXG4gICAgICAgIHByZXZlbnRFeHRlcm5hbEludmFsaWRhdGlvbiA9IF9wcm9wcy5wcmV2ZW50RXh0ZXJuYWxJbnZhbGlkYXRpb24sXG4gICAgICAgIG9uU3VjY2VzcyA9IF9wcm9wcy5vblN1Y2Nlc3MsXG4gICAgICAgIG9uRXJyb3IgPSBfcHJvcHMub25FcnJvcixcbiAgICAgICAgbm9uRm9ybXN5UHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ21hcHBpbmcnLCAndmFsaWRhdGlvbkVycm9ycycsICdvblN1Ym1pdCcsICdvblZhbGlkJywgJ29uVmFsaWRTdWJtaXQnLCAnb25JbnZhbGlkJywgJ29uSW52YWxpZFN1Ym1pdCcsICdvbkNoYW5nZScsICdyZXNldCcsICdwcmV2ZW50RXh0ZXJuYWxJbnZhbGlkYXRpb24nLCAnb25TdWNjZXNzJywgJ29uRXJyb3InXSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCgnZm9ybScsIF9leHRlbmRzKHt9LCBub25Gb3Jtc3lQcm9wcywgeyBvblN1Ym1pdDogdGhpcy5zdWJtaXQgfSksIHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICB9XG59KTtcblxuaWYgKCFnbG9iYWwuZXhwb3J0cyAmJiAhZ2xvYmFsLm1vZHVsZSAmJiAoIWdsb2JhbC5kZWZpbmUgfHwgIWdsb2JhbC5kZWZpbmUuYW1kKSkge1xuICBnbG9iYWwuRm9ybXN5ID0gRm9ybXN5O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEZvcm1zeTtcbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2dsb2JhbC5qc1wiKSkpXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL2Zvcm1zeS1yZWFjdC9saWIvdXRpbHMuanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIF90eXBlb2YyID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgX3R5cGVvZjIoU3ltYm9sLml0ZXJhdG9yKSA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmogPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZjIob2JqKTtcbn0gOiBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YyKG9iaik7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYXJyYXlzRGlmZmVyOiBmdW5jdGlvbiBhcnJheXNEaWZmZXIoYSwgYikge1xuICAgIHZhciBpc0RpZmZlcmVudCA9IGZhbHNlO1xuICAgIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHtcbiAgICAgIGlzRGlmZmVyZW50ID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgYS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNTYW1lKGl0ZW0sIGJbaW5kZXhdKSkge1xuICAgICAgICAgIGlzRGlmZmVyZW50ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSwgdGhpcyk7XG4gICAgfVxuICAgIHJldHVybiBpc0RpZmZlcmVudDtcbiAgfSxcblxuICBvYmplY3RzRGlmZmVyOiBmdW5jdGlvbiBvYmplY3RzRGlmZmVyKGEsIGIpIHtcbiAgICB2YXIgaXNEaWZmZXJlbnQgPSBmYWxzZTtcbiAgICBpZiAoT2JqZWN0LmtleXMoYSkubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhiKS5sZW5ndGgpIHtcbiAgICAgIGlzRGlmZmVyZW50ID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgT2JqZWN0LmtleXMoYSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1NhbWUoYVtrZXldLCBiW2tleV0pKSB7XG4gICAgICAgICAgaXNEaWZmZXJlbnQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9LCB0aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuIGlzRGlmZmVyZW50O1xuICB9LFxuXG4gIGlzU2FtZTogZnVuY3Rpb24gaXNTYW1lKGEsIGIpIHtcbiAgICBpZiAoKHR5cGVvZiBhID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihhKSkgIT09ICh0eXBlb2YgYiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoYikpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGEpICYmIEFycmF5LmlzQXJyYXkoYikpIHtcbiAgICAgIHJldHVybiAhdGhpcy5hcnJheXNEaWZmZXIoYSwgYik7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIGEudG9TdHJpbmcoKSA9PT0gYi50b1N0cmluZygpO1xuICAgIH0gZWxzZSBpZiAoKHR5cGVvZiBhID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihhKSkgPT09ICdvYmplY3QnICYmIGEgIT09IG51bGwgJiYgYiAhPT0gbnVsbCkge1xuICAgICAgcmV0dXJuICF0aGlzLm9iamVjdHNEaWZmZXIoYSwgYik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGEgPT09IGI7XG4gIH0sXG5cbiAgZmluZDogZnVuY3Rpb24gZmluZChjb2xsZWN0aW9uLCBmbikge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gY29sbGVjdGlvbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBpdGVtID0gY29sbGVjdGlvbltpXTtcbiAgICAgIGlmIChmbihpdGVtKSkge1xuICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn07XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL2Zvcm1zeS1yZWFjdC9saWIvdmFsaWRhdGlvblJ1bGVzLmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBfaXNFeGlzdHkgPSBmdW5jdGlvbiBfaXNFeGlzdHkodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWQ7XG59O1xuXG52YXIgaXNFbXB0eSA9IGZ1bmN0aW9uIGlzRW1wdHkodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSAnJztcbn07XG5cbnZhciB2YWxpZGF0aW9ucyA9IHtcbiAgaXNEZWZhdWx0UmVxdWlyZWRWYWx1ZTogZnVuY3Rpb24gaXNEZWZhdWx0UmVxdWlyZWRWYWx1ZSh2YWx1ZXMsIHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09ICcnO1xuICB9LFxuICBpc0V4aXN0eTogZnVuY3Rpb24gaXNFeGlzdHkodmFsdWVzLCB2YWx1ZSkge1xuICAgIHJldHVybiBfaXNFeGlzdHkodmFsdWUpO1xuICB9LFxuICBtYXRjaFJlZ2V4cDogZnVuY3Rpb24gbWF0Y2hSZWdleHAodmFsdWVzLCB2YWx1ZSwgcmVnZXhwKSB7XG4gICAgcmV0dXJuICFfaXNFeGlzdHkodmFsdWUpIHx8IGlzRW1wdHkodmFsdWUpIHx8IHJlZ2V4cC50ZXN0KHZhbHVlKTtcbiAgfSxcbiAgaXNVbmRlZmluZWQ6IGZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbHVlcywgdmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZDtcbiAgfSxcbiAgaXNFbXB0eVN0cmluZzogZnVuY3Rpb24gaXNFbXB0eVN0cmluZyh2YWx1ZXMsIHZhbHVlKSB7XG4gICAgcmV0dXJuIGlzRW1wdHkodmFsdWUpO1xuICB9LFxuICBpc0VtYWlsOiBmdW5jdGlvbiBpc0VtYWlsKHZhbHVlcywgdmFsdWUpIHtcbiAgICByZXR1cm4gdmFsaWRhdGlvbnMubWF0Y2hSZWdleHAodmFsdWVzLCB2YWx1ZSwgL14oKChbYS16XXxcXGR8WyEjXFwkJSYnXFwqXFwrXFwtXFwvPVxcP1xcXl9ge1xcfH1+XXxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSkrKFxcLihbYS16XXxcXGR8WyEjXFwkJSYnXFwqXFwrXFwtXFwvPVxcP1xcXl9ge1xcfH1+XXxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSkrKSopfCgoXFx4MjIpKCgoKFxceDIwfFxceDA5KSooXFx4MGRcXHgwYSkpPyhcXHgyMHxcXHgwOSkrKT8oKFtcXHgwMS1cXHgwOFxceDBiXFx4MGNcXHgwZS1cXHgxZlxceDdmXXxcXHgyMXxbXFx4MjMtXFx4NWJdfFtcXHg1ZC1cXHg3ZV18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfChcXFxcKFtcXHgwMS1cXHgwOVxceDBiXFx4MGNcXHgwZC1cXHg3Zl18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKSkpKigoKFxceDIwfFxceDA5KSooXFx4MGRcXHgwYSkpPyhcXHgyMHxcXHgwOSkrKT8oXFx4MjIpKSlAKCgoW2Etel18XFxkfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoKFthLXpdfFxcZHxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSkoW2Etel18XFxkfC18XFwufF98fnxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSkqKFthLXpdfFxcZHxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSkpKVxcLikrKChbYS16XXxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KChbYS16XXxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSkoW2Etel18XFxkfC18XFwufF98fnxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSkqKFthLXpdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSkpJC9pKTtcbiAgfSxcbiAgaXNVcmw6IGZ1bmN0aW9uIGlzVXJsKHZhbHVlcywgdmFsdWUpIHtcbiAgICByZXR1cm4gdmFsaWRhdGlvbnMubWF0Y2hSZWdleHAodmFsdWVzLCB2YWx1ZSwgL14oaHR0cHM/fHM/ZnRwKTpcXC9cXC8oKCgoW2Etel18XFxkfC18XFwufF98fnxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KCVbXFxkYS1mXXsyfSl8WyFcXCQmJ1xcKFxcKVxcKlxcKyw7PV18OikqQCk/KCgoXFxkfFsxLTldXFxkfDFcXGRcXGR8MlswLTRdXFxkfDI1WzAtNV0pXFwuKFxcZHxbMS05XVxcZHwxXFxkXFxkfDJbMC00XVxcZHwyNVswLTVdKVxcLihcXGR8WzEtOV1cXGR8MVxcZFxcZHwyWzAtNF1cXGR8MjVbMC01XSlcXC4oXFxkfFsxLTldXFxkfDFcXGRcXGR8MlswLTRdXFxkfDI1WzAtNV0pKXwoKChbYS16XXxcXGR8W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCgoW2Etel18XFxkfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKShbYS16XXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSooW2Etel18XFxkfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSkpXFwuKSsoKFthLXpdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoKFthLXpdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKShbYS16XXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSooW2Etel18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKSlcXC4/KSg6XFxkKik/KShcXC8oKChbYS16XXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoJVtcXGRhLWZdezJ9KXxbIVxcJCYnXFwoXFwpXFwqXFwrLDs9XXw6fEApKyhcXC8oKFthLXpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCglW1xcZGEtZl17Mn0pfFshXFwkJidcXChcXClcXCpcXCssOz1dfDp8QCkqKSopPyk/KFxcPygoKFthLXpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCglW1xcZGEtZl17Mn0pfFshXFwkJidcXChcXClcXCpcXCssOz1dfDp8QCl8W1xcdUUwMDAtXFx1RjhGRl18XFwvfFxcPykqKT8oIygoKFthLXpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCglW1xcZGEtZl17Mn0pfFshXFwkJidcXChcXClcXCpcXCssOz1dfDp8QCl8XFwvfFxcPykqKT8kL2kpO1xuICB9LFxuICBpc1RydWU6IGZ1bmN0aW9uIGlzVHJ1ZSh2YWx1ZXMsIHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB0cnVlO1xuICB9LFxuICBpc0ZhbHNlOiBmdW5jdGlvbiBpc0ZhbHNlKHZhbHVlcywgdmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IGZhbHNlO1xuICB9LFxuICBpc051bWVyaWM6IGZ1bmN0aW9uIGlzTnVtZXJpYyh2YWx1ZXMsIHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gdmFsaWRhdGlvbnMubWF0Y2hSZWdleHAodmFsdWVzLCB2YWx1ZSwgL15bLStdPyg/OlxcZCpbLl0pP1xcZCskLyk7XG4gIH0sXG4gIGlzQWxwaGE6IGZ1bmN0aW9uIGlzQWxwaGEodmFsdWVzLCB2YWx1ZSkge1xuICAgIHJldHVybiB2YWxpZGF0aW9ucy5tYXRjaFJlZ2V4cCh2YWx1ZXMsIHZhbHVlLCAvXltBLVpdKyQvaSk7XG4gIH0sXG4gIGlzQWxwaGFudW1lcmljOiBmdW5jdGlvbiBpc0FscGhhbnVtZXJpYyh2YWx1ZXMsIHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbGlkYXRpb25zLm1hdGNoUmVnZXhwKHZhbHVlcywgdmFsdWUsIC9eWzAtOUEtWl0rJC9pKTtcbiAgfSxcbiAgaXNJbnQ6IGZ1bmN0aW9uIGlzSW50KHZhbHVlcywgdmFsdWUpIHtcbiAgICByZXR1cm4gdmFsaWRhdGlvbnMubWF0Y2hSZWdleHAodmFsdWVzLCB2YWx1ZSwgL14oPzpbLStdPyg/OjB8WzEtOV1cXGQqKSkkLyk7XG4gIH0sXG4gIGlzRmxvYXQ6IGZ1bmN0aW9uIGlzRmxvYXQodmFsdWVzLCB2YWx1ZSkge1xuICAgIHJldHVybiB2YWxpZGF0aW9ucy5tYXRjaFJlZ2V4cCh2YWx1ZXMsIHZhbHVlLCAvXig/OlstK10/KD86XFxkKykpPyg/OlxcLlxcZCopPyg/OltlRV1bXFwrXFwtXT8oPzpcXGQrKSk/JC8pO1xuICB9LFxuICBpc1dvcmRzOiBmdW5jdGlvbiBpc1dvcmRzKHZhbHVlcywgdmFsdWUpIHtcbiAgICByZXR1cm4gdmFsaWRhdGlvbnMubWF0Y2hSZWdleHAodmFsdWVzLCB2YWx1ZSwgL15bQS1aXFxzXSskL2kpO1xuICB9LFxuICBpc1NwZWNpYWxXb3JkczogZnVuY3Rpb24gaXNTcGVjaWFsV29yZHModmFsdWVzLCB2YWx1ZSkge1xuICAgIHJldHVybiB2YWxpZGF0aW9ucy5tYXRjaFJlZ2V4cCh2YWx1ZXMsIHZhbHVlLCAvXltBLVpcXHNcXHUwMEMwLVxcdTAxN0ZdKyQvaSk7XG4gIH0sXG4gIGlzTGVuZ3RoOiBmdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZXMsIHZhbHVlLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gIV9pc0V4aXN0eSh2YWx1ZSkgfHwgaXNFbXB0eSh2YWx1ZSkgfHwgdmFsdWUubGVuZ3RoID09PSBsZW5ndGg7XG4gIH0sXG4gIGVxdWFsczogZnVuY3Rpb24gZXF1YWxzKHZhbHVlcywgdmFsdWUsIGVxbCkge1xuICAgIHJldHVybiAhX2lzRXhpc3R5KHZhbHVlKSB8fCBpc0VtcHR5KHZhbHVlKSB8fCB2YWx1ZSA9PSBlcWw7XG4gIH0sXG4gIGVxdWFsc0ZpZWxkOiBmdW5jdGlvbiBlcXVhbHNGaWVsZCh2YWx1ZXMsIHZhbHVlLCBmaWVsZCkge1xuICAgIHJldHVybiB2YWx1ZSA9PSB2YWx1ZXNbZmllbGRdO1xuICB9LFxuICBtYXhMZW5ndGg6IGZ1bmN0aW9uIG1heExlbmd0aCh2YWx1ZXMsIHZhbHVlLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gIV9pc0V4aXN0eSh2YWx1ZSkgfHwgdmFsdWUubGVuZ3RoIDw9IGxlbmd0aDtcbiAgfSxcbiAgbWluTGVuZ3RoOiBmdW5jdGlvbiBtaW5MZW5ndGgodmFsdWVzLCB2YWx1ZSwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuICFfaXNFeGlzdHkodmFsdWUpIHx8IGlzRW1wdHkodmFsdWUpIHx8IHZhbHVlLmxlbmd0aCA+PSBsZW5ndGg7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gdmFsaWRhdGlvbnM7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL3JlYWN0LWlucHV0LWF1dG9zaXplL2xpYi9BdXRvc2l6ZUlucHV0LmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuXHRmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07Zm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuXHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcblx0XHRcdFx0dGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cdH1yZXR1cm4gdGFyZ2V0O1xufTtcblxudmFyIFJlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3JlYWN0L3JlYWN0LmpzXCIpO1xudmFyIFByb3BUeXBlcyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzXCIpO1xudmFyIGNyZWF0ZUNsYXNzID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL2NyZWF0ZS1yZWFjdC1jbGFzcy9pbmRleC5qc1wiKTtcblxudmFyIHNpemVyU3R5bGUgPSB7XG5cdHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuXHR0b3A6IDAsXG5cdGxlZnQ6IDAsXG5cdHZpc2liaWxpdHk6ICdoaWRkZW4nLFxuXHRoZWlnaHQ6IDAsXG5cdG92ZXJmbG93OiAnc2Nyb2xsJyxcblx0d2hpdGVTcGFjZTogJ3ByZSdcbn07XG5cbnZhciBBdXRvc2l6ZUlucHV0ID0gY3JlYXRlQ2xhc3Moe1xuXHRwcm9wVHlwZXM6IHtcblx0XHRjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsIC8vIGNsYXNzTmFtZSBmb3IgdGhlIG91dGVyIGVsZW1lbnRcblx0XHRkZWZhdWx0VmFsdWU6IFByb3BUeXBlcy5hbnksIC8vIGRlZmF1bHQgZmllbGQgdmFsdWVcblx0XHRpbnB1dENsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZywgLy8gY2xhc3NOYW1lIGZvciB0aGUgaW5wdXQgZWxlbWVudFxuXHRcdGlucHV0U3R5bGU6IFByb3BUeXBlcy5vYmplY3QsIC8vIGNzcyBzdHlsZXMgZm9yIHRoZSBpbnB1dCBlbGVtZW50XG5cdFx0bWluV2lkdGg6IFByb3BUeXBlcy5vbmVPZlR5cGUoWy8vIG1pbmltdW0gd2lkdGggZm9yIGlucHV0IGVsZW1lbnRcblx0XHRQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cdFx0b25BdXRvc2l6ZTogUHJvcFR5cGVzLmZ1bmMsIC8vIG9uQXV0b3NpemUgaGFuZGxlcjogZnVuY3Rpb24obmV3V2lkdGgpIHt9XG5cdFx0b25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLCAvLyBvbkNoYW5nZSBoYW5kbGVyOiBmdW5jdGlvbihuZXdWYWx1ZSkge31cblx0XHRwbGFjZWhvbGRlcjogUHJvcFR5cGVzLnN0cmluZywgLy8gcGxhY2Vob2xkZXIgdGV4dFxuXHRcdHBsYWNlaG9sZGVySXNNaW5XaWR0aDogUHJvcFR5cGVzLmJvb2wsIC8vIGRvbid0IGNvbGxhcHNlIHNpemUgdG8gbGVzcyB0aGFuIHRoZSBwbGFjZWhvbGRlclxuXHRcdHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LCAvLyBjc3Mgc3R5bGVzIGZvciB0aGUgb3V0ZXIgZWxlbWVudFxuXHRcdHZhbHVlOiBQcm9wVHlwZXMuYW55IH0sXG5cdC8vIGZpZWxkIHZhbHVlXG5cdGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRtaW5XaWR0aDogMVxuXHRcdH07XG5cdH0sXG5cdGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRpbnB1dFdpZHRoOiB0aGlzLnByb3BzLm1pbldpZHRoXG5cdFx0fTtcblx0fSxcblx0Y29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuXHRcdHRoaXMubW91bnRlZCA9IHRydWU7XG5cdFx0dGhpcy5jb3B5SW5wdXRTdHlsZXMoKTtcblx0XHR0aGlzLnVwZGF0ZUlucHV0V2lkdGgoKTtcblx0fSxcblx0Y29tcG9uZW50RGlkVXBkYXRlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzLCBwcmV2U3RhdGUpIHtcblx0XHRpZiAocHJldlN0YXRlLmlucHV0V2lkdGggIT09IHRoaXMuc3RhdGUuaW5wdXRXaWR0aCkge1xuXHRcdFx0aWYgKHR5cGVvZiB0aGlzLnByb3BzLm9uQXV0b3NpemUgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0dGhpcy5wcm9wcy5vbkF1dG9zaXplKHRoaXMuc3RhdGUuaW5wdXRXaWR0aCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHRoaXMudXBkYXRlSW5wdXRXaWR0aCgpO1xuXHR9LFxuXHRjb21wb25lbnRXaWxsVW5tb3VudDogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG5cdFx0dGhpcy5tb3VudGVkID0gZmFsc2U7XG5cdH0sXG5cdGlucHV0UmVmOiBmdW5jdGlvbiBpbnB1dFJlZihlbCkge1xuXHRcdHRoaXMuaW5wdXQgPSBlbDtcblx0fSxcblx0cGxhY2VIb2xkZXJTaXplclJlZjogZnVuY3Rpb24gcGxhY2VIb2xkZXJTaXplclJlZihlbCkge1xuXHRcdHRoaXMucGxhY2VIb2xkZXJTaXplciA9IGVsO1xuXHR9LFxuXHRzaXplclJlZjogZnVuY3Rpb24gc2l6ZXJSZWYoZWwpIHtcblx0XHR0aGlzLnNpemVyID0gZWw7XG5cdH0sXG5cdGNvcHlJbnB1dFN0eWxlczogZnVuY3Rpb24gY29weUlucHV0U3R5bGVzKCkge1xuXHRcdGlmICh0aGlzLm1vdW50ZWQgfHwgIXdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHZhciBpbnB1dFN0eWxlID0gdGhpcy5pbnB1dCAmJiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLmlucHV0KTtcblx0XHRpZiAoIWlucHV0U3R5bGUpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0dmFyIHdpZHRoTm9kZSA9IHRoaXMuc2l6ZXI7XG5cdFx0d2lkdGhOb2RlLnN0eWxlLmZvbnRTaXplID0gaW5wdXRTdHlsZS5mb250U2l6ZTtcblx0XHR3aWR0aE5vZGUuc3R5bGUuZm9udEZhbWlseSA9IGlucHV0U3R5bGUuZm9udEZhbWlseTtcblx0XHR3aWR0aE5vZGUuc3R5bGUuZm9udFdlaWdodCA9IGlucHV0U3R5bGUuZm9udFdlaWdodDtcblx0XHR3aWR0aE5vZGUuc3R5bGUuZm9udFN0eWxlID0gaW5wdXRTdHlsZS5mb250U3R5bGU7XG5cdFx0d2lkdGhOb2RlLnN0eWxlLmxldHRlclNwYWNpbmcgPSBpbnB1dFN0eWxlLmxldHRlclNwYWNpbmc7XG5cdFx0d2lkdGhOb2RlLnN0eWxlLnRleHRUcmFuc2Zvcm0gPSBpbnB1dFN0eWxlLnRleHRUcmFuc2Zvcm07XG5cdFx0aWYgKHRoaXMucHJvcHMucGxhY2Vob2xkZXIpIHtcblx0XHRcdHZhciBwbGFjZWhvbGRlck5vZGUgPSB0aGlzLnBsYWNlSG9sZGVyU2l6ZXI7XG5cdFx0XHRwbGFjZWhvbGRlck5vZGUuc3R5bGUuZm9udFNpemUgPSBpbnB1dFN0eWxlLmZvbnRTaXplO1xuXHRcdFx0cGxhY2Vob2xkZXJOb2RlLnN0eWxlLmZvbnRGYW1pbHkgPSBpbnB1dFN0eWxlLmZvbnRGYW1pbHk7XG5cdFx0XHRwbGFjZWhvbGRlck5vZGUuc3R5bGUuZm9udFdlaWdodCA9IGlucHV0U3R5bGUuZm9udFdlaWdodDtcblx0XHRcdHBsYWNlaG9sZGVyTm9kZS5zdHlsZS5mb250U3R5bGUgPSBpbnB1dFN0eWxlLmZvbnRTdHlsZTtcblx0XHRcdHBsYWNlaG9sZGVyTm9kZS5zdHlsZS5sZXR0ZXJTcGFjaW5nID0gaW5wdXRTdHlsZS5sZXR0ZXJTcGFjaW5nO1xuXHRcdFx0cGxhY2Vob2xkZXJOb2RlLnN0eWxlLnRleHRUcmFuc2Zvcm0gPSBpbnB1dFN0eWxlLnRleHRUcmFuc2Zvcm07XG5cdFx0fVxuXHR9LFxuXHR1cGRhdGVJbnB1dFdpZHRoOiBmdW5jdGlvbiB1cGRhdGVJbnB1dFdpZHRoKCkge1xuXHRcdGlmICghdGhpcy5tb3VudGVkIHx8ICF0aGlzLnNpemVyIHx8IHR5cGVvZiB0aGlzLnNpemVyLnNjcm9sbFdpZHRoID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHR2YXIgbmV3SW5wdXRXaWR0aCA9IHVuZGVmaW5lZDtcblx0XHRpZiAodGhpcy5wcm9wcy5wbGFjZWhvbGRlciAmJiAoIXRoaXMucHJvcHMudmFsdWUgfHwgdGhpcy5wcm9wcy52YWx1ZSAmJiB0aGlzLnByb3BzLnBsYWNlaG9sZGVySXNNaW5XaWR0aCkpIHtcblx0XHRcdG5ld0lucHV0V2lkdGggPSBNYXRoLm1heCh0aGlzLnNpemVyLnNjcm9sbFdpZHRoLCB0aGlzLnBsYWNlSG9sZGVyU2l6ZXIuc2Nyb2xsV2lkdGgpICsgMjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bmV3SW5wdXRXaWR0aCA9IHRoaXMuc2l6ZXIuc2Nyb2xsV2lkdGggKyAyO1xuXHRcdH1cblx0XHRpZiAobmV3SW5wdXRXaWR0aCA8IHRoaXMucHJvcHMubWluV2lkdGgpIHtcblx0XHRcdG5ld0lucHV0V2lkdGggPSB0aGlzLnByb3BzLm1pbldpZHRoO1xuXHRcdH1cblx0XHRpZiAobmV3SW5wdXRXaWR0aCAhPT0gdGhpcy5zdGF0ZS5pbnB1dFdpZHRoKSB7XG5cdFx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdFx0aW5wdXRXaWR0aDogbmV3SW5wdXRXaWR0aFxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9LFxuXHRnZXRJbnB1dDogZnVuY3Rpb24gZ2V0SW5wdXQoKSB7XG5cdFx0cmV0dXJuIHRoaXMuaW5wdXQ7XG5cdH0sXG5cdGZvY3VzOiBmdW5jdGlvbiBmb2N1cygpIHtcblx0XHR0aGlzLmlucHV0LmZvY3VzKCk7XG5cdH0sXG5cdGJsdXI6IGZ1bmN0aW9uIGJsdXIoKSB7XG5cdFx0dGhpcy5pbnB1dC5ibHVyKCk7XG5cdH0sXG5cdHNlbGVjdDogZnVuY3Rpb24gc2VsZWN0KCkge1xuXHRcdHRoaXMuaW5wdXQuc2VsZWN0KCk7XG5cdH0sXG5cdHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuXHRcdHZhciBzaXplclZhbHVlID0gW3RoaXMucHJvcHMuZGVmYXVsdFZhbHVlLCB0aGlzLnByb3BzLnZhbHVlLCAnJ10ucmVkdWNlKGZ1bmN0aW9uIChwcmV2aW91c1ZhbHVlLCBjdXJyZW50VmFsdWUpIHtcblx0XHRcdGlmIChwcmV2aW91c1ZhbHVlICE9PSBudWxsICYmIHByZXZpb3VzVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRyZXR1cm4gcHJldmlvdXNWYWx1ZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBjdXJyZW50VmFsdWU7XG5cdFx0fSk7XG5cblx0XHR2YXIgd3JhcHBlclN0eWxlID0gdGhpcy5wcm9wcy5zdHlsZSB8fCB7fTtcblx0XHRpZiAoIXdyYXBwZXJTdHlsZS5kaXNwbGF5KSB3cmFwcGVyU3R5bGUuZGlzcGxheSA9ICdpbmxpbmUtYmxvY2snO1xuXHRcdHZhciBpbnB1dFN0eWxlID0gX2V4dGVuZHMoe30sIHRoaXMucHJvcHMuaW5wdXRTdHlsZSk7XG5cdFx0aW5wdXRTdHlsZS53aWR0aCA9IHRoaXMuc3RhdGUuaW5wdXRXaWR0aCArICdweCc7XG5cdFx0aW5wdXRTdHlsZS5ib3hTaXppbmcgPSAnY29udGVudC1ib3gnO1xuXHRcdHZhciBpbnB1dFByb3BzID0gX2V4dGVuZHMoe30sIHRoaXMucHJvcHMpO1xuXHRcdGlucHV0UHJvcHMuY2xhc3NOYW1lID0gdGhpcy5wcm9wcy5pbnB1dENsYXNzTmFtZTtcblx0XHRpbnB1dFByb3BzLnN0eWxlID0gaW5wdXRTdHlsZTtcblx0XHQvLyBlbnN1cmUgcHJvcHMgbWVhbnQgZm9yIGBBdXRvc2l6ZUlucHV0YCBkb24ndCBlbmQgdXAgb24gdGhlIGBpbnB1dGBcblx0XHRkZWxldGUgaW5wdXRQcm9wcy5pbnB1dENsYXNzTmFtZTtcblx0XHRkZWxldGUgaW5wdXRQcm9wcy5pbnB1dFN0eWxlO1xuXHRcdGRlbGV0ZSBpbnB1dFByb3BzLm1pbldpZHRoO1xuXHRcdGRlbGV0ZSBpbnB1dFByb3BzLm9uQXV0b3NpemU7XG5cdFx0ZGVsZXRlIGlucHV0UHJvcHMucGxhY2Vob2xkZXJJc01pbldpZHRoO1xuXHRcdHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5wcm9wcy5jbGFzc05hbWUsIHN0eWxlOiB3cmFwcGVyU3R5bGUgfSwgUmVhY3QuY3JlYXRlRWxlbWVudCgnaW5wdXQnLCBfZXh0ZW5kcyh7fSwgaW5wdXRQcm9wcywgeyByZWY6IHRoaXMuaW5wdXRSZWYgfSkpLCBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHJlZjogdGhpcy5zaXplclJlZiwgc3R5bGU6IHNpemVyU3R5bGUgfSwgc2l6ZXJWYWx1ZSksIHRoaXMucHJvcHMucGxhY2Vob2xkZXIgPyBSZWFjdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHJlZjogdGhpcy5wbGFjZUhvbGRlclNpemVyUmVmLCBzdHlsZTogc2l6ZXJTdHlsZSB9LCB0aGlzLnByb3BzLnBsYWNlaG9sZGVyKSA6IG51bGwpO1xuXHR9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBdXRvc2l6ZUlucHV0O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9yZWFjdC1zZWxlY3QvbGliL0FzeW5jLmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuXHR2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuXHRmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07Zm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuXHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcblx0XHRcdFx0dGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cdH1yZXR1cm4gdGFyZ2V0O1xufTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcblx0ZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7ZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO2lmICgndmFsdWUnIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcblx0XHR9XG5cdH1yZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuXHRcdGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7aWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7cmV0dXJuIENvbnN0cnVjdG9yO1xuXHR9O1xufSgpO1xuXG52YXIgX2dldCA9IGZ1bmN0aW9uIGdldChfeCwgX3gyLCBfeDMpIHtcblx0dmFyIF9hZ2FpbiA9IHRydWU7X2Z1bmN0aW9uOiB3aGlsZSAoX2FnYWluKSB7XG5cdFx0dmFyIG9iamVjdCA9IF94LFxuXHRcdCAgICBwcm9wZXJ0eSA9IF94Mixcblx0XHQgICAgcmVjZWl2ZXIgPSBfeDM7X2FnYWluID0gZmFsc2U7aWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlO3ZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTtpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7aWYgKHBhcmVudCA9PT0gbnVsbCkge1xuXHRcdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0X3ggPSBwYXJlbnQ7X3gyID0gcHJvcGVydHk7X3gzID0gcmVjZWl2ZXI7X2FnYWluID0gdHJ1ZTtkZXNjID0gcGFyZW50ID0gdW5kZWZpbmVkO2NvbnRpbnVlIF9mdW5jdGlvbjtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKCd2YWx1ZScgaW4gZGVzYykge1xuXHRcdFx0cmV0dXJuIGRlc2MudmFsdWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBnZXR0ZXIgPSBkZXNjLmdldDtpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHRcdH1yZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpO1xuXHRcdH1cblx0fVxufTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcblx0cmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTtcbn1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuXHRpZiAoa2V5IGluIG9iaikge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7XG5cdH0gZWxzZSB7XG5cdFx0b2JqW2tleV0gPSB2YWx1ZTtcblx0fXJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcblx0aWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTtcblx0fVxufVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcblx0aWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAnZnVuY3Rpb24nICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICcgKyAodHlwZW9mIHN1cGVyQ2xhc3MgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHN1cGVyQ2xhc3MpKSk7XG5cdH1zdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pO2lmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn1cblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9yZWFjdC9yZWFjdC5qc1wiKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanNcIik7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfU2VsZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3JlYWN0LXNlbGVjdC9saWIvU2VsZWN0LmpzXCIpO1xuXG52YXIgX1NlbGVjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TZWxlY3QpO1xuXG52YXIgX3V0aWxzU3RyaXBEaWFjcml0aWNzID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3JlYWN0LXNlbGVjdC9saWIvdXRpbHMvc3RyaXBEaWFjcml0aWNzLmpzXCIpO1xuXG52YXIgX3V0aWxzU3RyaXBEaWFjcml0aWNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3V0aWxzU3RyaXBEaWFjcml0aWNzKTtcblxudmFyIHByb3BUeXBlcyA9IHtcblx0YXV0b2xvYWQ6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbC5pc1JlcXVpcmVkLCAvLyBhdXRvbWF0aWNhbGx5IGNhbGwgdGhlIGBsb2FkT3B0aW9uc2AgcHJvcCBvbi1tb3VudDsgZGVmYXVsdHMgdG8gdHJ1ZVxuXHRjYWNoZTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5hbnksIC8vIG9iamVjdCB0byB1c2UgdG8gY2FjaGUgcmVzdWx0czsgc2V0IHRvIG51bGwvZmFsc2UgdG8gZGlzYWJsZSBjYWNoaW5nXG5cdGNoaWxkcmVuOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMuaXNSZXF1aXJlZCwgLy8gQ2hpbGQgZnVuY3Rpb24gcmVzcG9uc2libGUgZm9yIGNyZWF0aW5nIHRoZSBpbm5lciBTZWxlY3QgY29tcG9uZW50OyAocHJvcHM6IE9iamVjdCk6IFByb3BUeXBlcy5lbGVtZW50XG5cdGlnbm9yZUFjY2VudHM6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCwgLy8gc3RyaXAgZGlhY3JpdGljcyB3aGVuIGZpbHRlcmluZzsgZGVmYXVsdHMgdG8gdHJ1ZVxuXHRpZ25vcmVDYXNlOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsIC8vIHBlcmZvcm0gY2FzZS1pbnNlbnNpdGl2ZSBmaWx0ZXJpbmc7IGRlZmF1bHRzIHRvIHRydWVcblx0bG9hZGluZ1BsYWNlaG9sZGVyOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm9uZU9mVHlwZShbLy8gcmVwbGFjZXMgdGhlIHBsYWNlaG9sZGVyIHdoaWxlIG9wdGlvbnMgYXJlIGxvYWRpbmdcblx0X3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcsIF9wcm9wVHlwZXMyWydkZWZhdWx0J10ubm9kZV0pLFxuXHRsb2FkT3B0aW9uczogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLmlzUmVxdWlyZWQsIC8vIGNhbGxiYWNrIHRvIGxvYWQgb3B0aW9ucyBhc3luY2hyb25vdXNseTsgKGlucHV0VmFsdWU6IHN0cmluZywgY2FsbGJhY2s6IEZ1bmN0aW9uKTogP1Byb21pc2Vcblx0bXVsdGk6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCwgLy8gbXVsdGktdmFsdWUgaW5wdXRcblx0b3B0aW9uczogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5hcnJheS5pc1JlcXVpcmVkLCAvLyBhcnJheSBvZiBvcHRpb25zXG5cdHBsYWNlaG9sZGVyOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm9uZU9mVHlwZShbLy8gZmllbGQgcGxhY2Vob2xkZXIsIGRpc3BsYXllZCB3aGVuIHRoZXJlJ3Mgbm8gdmFsdWUgKHNoYXJlZCB3aXRoIFNlbGVjdClcblx0X3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcsIF9wcm9wVHlwZXMyWydkZWZhdWx0J10ubm9kZV0pLFxuXHRub1Jlc3VsdHNUZXh0OiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm9uZU9mVHlwZShbLy8gZmllbGQgbm9SZXN1bHRzVGV4dCwgZGlzcGxheWVkIHdoZW4gbm8gb3B0aW9ucyBjb21lIGJhY2sgZnJvbSB0aGUgc2VydmVyXG5cdF9wcm9wVHlwZXMyWydkZWZhdWx0J10uc3RyaW5nLCBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm5vZGVdKSxcblx0b25DaGFuZ2U6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYywgLy8gb25DaGFuZ2UgaGFuZGxlcjogZnVuY3Rpb24gKG5ld1ZhbHVlKSB7fVxuXHRzZWFyY2hQcm9tcHRUZXh0OiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm9uZU9mVHlwZShbLy8gbGFiZWwgdG8gcHJvbXB0IGZvciBzZWFyY2ggaW5wdXRcblx0X3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcsIF9wcm9wVHlwZXMyWydkZWZhdWx0J10ubm9kZV0pLFxuXHRvbklucHV0Q2hhbmdlOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsIC8vIG9wdGlvbmFsIGZvciBrZWVwaW5nIHRyYWNrIG9mIHdoYXQgaXMgYmVpbmcgdHlwZWRcblx0dmFsdWU6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYW55IH07XG5cbi8vIGluaXRpYWwgZmllbGQgdmFsdWVcbnZhciBkZWZhdWx0Q2FjaGUgPSB7fTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcblx0YXV0b2xvYWQ6IHRydWUsXG5cdGNhY2hlOiBkZWZhdWx0Q2FjaGUsXG5cdGNoaWxkcmVuOiBkZWZhdWx0Q2hpbGRyZW4sXG5cdGlnbm9yZUFjY2VudHM6IHRydWUsXG5cdGlnbm9yZUNhc2U6IHRydWUsXG5cdGxvYWRpbmdQbGFjZWhvbGRlcjogJ0xvYWRpbmcuLi4nLFxuXHRvcHRpb25zOiBbXSxcblx0c2VhcmNoUHJvbXB0VGV4dDogJ1R5cGUgdG8gc2VhcmNoJ1xufTtcblxudmFyIEFzeW5jID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcblx0X2luaGVyaXRzKEFzeW5jLCBfQ29tcG9uZW50KTtcblxuXHRmdW5jdGlvbiBBc3luYyhwcm9wcywgY29udGV4dCkge1xuXHRcdF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBc3luYyk7XG5cblx0XHRfZ2V0KE9iamVjdC5nZXRQcm90b3R5cGVPZihBc3luYy5wcm90b3R5cGUpLCAnY29uc3RydWN0b3InLCB0aGlzKS5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KTtcblxuXHRcdHRoaXMuX2NhY2hlID0gcHJvcHMuY2FjaGUgPT09IGRlZmF1bHRDYWNoZSA/IHt9IDogcHJvcHMuY2FjaGU7XG5cblx0XHR0aGlzLnN0YXRlID0ge1xuXHRcdFx0aXNMb2FkaW5nOiBmYWxzZSxcblx0XHRcdG9wdGlvbnM6IHByb3BzLm9wdGlvbnNcblx0XHR9O1xuXG5cdFx0dGhpcy5fb25JbnB1dENoYW5nZSA9IHRoaXMuX29uSW5wdXRDaGFuZ2UuYmluZCh0aGlzKTtcblx0fVxuXG5cdF9jcmVhdGVDbGFzcyhBc3luYywgW3tcblx0XHRrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuXHRcdFx0dmFyIGF1dG9sb2FkID0gdGhpcy5wcm9wcy5hdXRvbG9hZDtcblxuXHRcdFx0aWYgKGF1dG9sb2FkKSB7XG5cdFx0XHRcdHRoaXMubG9hZE9wdGlvbnMoJycpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSwge1xuXHRcdGtleTogJ2NvbXBvbmVudFdpbGxVcGRhdGUnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG5cdFx0XHR2YXIgX3RoaXMgPSB0aGlzO1xuXG5cdFx0XHR2YXIgcHJvcGVydGllc1RvU3luYyA9IFsnb3B0aW9ucyddO1xuXHRcdFx0cHJvcGVydGllc1RvU3luYy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG5cdFx0XHRcdGlmIChfdGhpcy5wcm9wc1twcm9wXSAhPT0gbmV4dFByb3BzW3Byb3BdKSB7XG5cdFx0XHRcdFx0X3RoaXMuc2V0U3RhdGUoX2RlZmluZVByb3BlcnR5KHt9LCBwcm9wLCBuZXh0UHJvcHNbcHJvcF0pKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnY2xlYXJPcHRpb25zJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gY2xlYXJPcHRpb25zKCkge1xuXHRcdFx0dGhpcy5zZXRTdGF0ZSh7IG9wdGlvbnM6IFtdIH0pO1xuXHRcdH1cblx0fSwge1xuXHRcdGtleTogJ2xvYWRPcHRpb25zJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gbG9hZE9wdGlvbnMoaW5wdXRWYWx1ZSkge1xuXHRcdFx0dmFyIF90aGlzMiA9IHRoaXM7XG5cblx0XHRcdHZhciBsb2FkT3B0aW9ucyA9IHRoaXMucHJvcHMubG9hZE9wdGlvbnM7XG5cblx0XHRcdHZhciBjYWNoZSA9IHRoaXMuX2NhY2hlO1xuXG5cdFx0XHRpZiAoY2FjaGUgJiYgY2FjaGUuaGFzT3duUHJvcGVydHkoaW5wdXRWYWx1ZSkpIHtcblx0XHRcdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRcdFx0b3B0aW9uczogY2FjaGVbaW5wdXRWYWx1ZV1cblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbiBjYWxsYmFjayhlcnJvciwgZGF0YSkge1xuXHRcdFx0XHRpZiAoY2FsbGJhY2sgPT09IF90aGlzMi5fY2FsbGJhY2spIHtcblx0XHRcdFx0XHRfdGhpczIuX2NhbGxiYWNrID0gbnVsbDtcblxuXHRcdFx0XHRcdHZhciBvcHRpb25zID0gZGF0YSAmJiBkYXRhLm9wdGlvbnMgfHwgW107XG5cblx0XHRcdFx0XHRpZiAoY2FjaGUpIHtcblx0XHRcdFx0XHRcdGNhY2hlW2lucHV0VmFsdWVdID0gb3B0aW9ucztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRfdGhpczIuc2V0U3RhdGUoe1xuXHRcdFx0XHRcdFx0aXNMb2FkaW5nOiBmYWxzZSxcblx0XHRcdFx0XHRcdG9wdGlvbnM6IG9wdGlvbnNcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdFx0Ly8gSWdub3JlIGFsbCBidXQgdGhlIG1vc3QgcmVjZW50IHJlcXVlc3Rcblx0XHRcdHRoaXMuX2NhbGxiYWNrID0gY2FsbGJhY2s7XG5cblx0XHRcdHZhciBwcm9taXNlID0gbG9hZE9wdGlvbnMoaW5wdXRWYWx1ZSwgY2FsbGJhY2spO1xuXHRcdFx0aWYgKHByb21pc2UpIHtcblx0XHRcdFx0cHJvbWlzZS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNhbGxiYWNrKG51bGwsIGRhdGEpO1xuXHRcdFx0XHR9LCBmdW5jdGlvbiAoZXJyb3IpIHtcblx0XHRcdFx0XHRyZXR1cm4gY2FsbGJhY2soZXJyb3IpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHRoaXMuX2NhbGxiYWNrICYmICF0aGlzLnN0YXRlLmlzTG9hZGluZykge1xuXHRcdFx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdFx0XHRpc0xvYWRpbmc6IHRydWVcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBpbnB1dFZhbHVlO1xuXHRcdH1cblx0fSwge1xuXHRcdGtleTogJ19vbklucHV0Q2hhbmdlJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gX29uSW5wdXRDaGFuZ2UoaW5wdXRWYWx1ZSkge1xuXHRcdFx0dmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG5cdFx0XHR2YXIgaWdub3JlQWNjZW50cyA9IF9wcm9wcy5pZ25vcmVBY2NlbnRzO1xuXHRcdFx0dmFyIGlnbm9yZUNhc2UgPSBfcHJvcHMuaWdub3JlQ2FzZTtcblx0XHRcdHZhciBvbklucHV0Q2hhbmdlID0gX3Byb3BzLm9uSW5wdXRDaGFuZ2U7XG5cblx0XHRcdGlmIChpZ25vcmVBY2NlbnRzKSB7XG5cdFx0XHRcdGlucHV0VmFsdWUgPSAoMCwgX3V0aWxzU3RyaXBEaWFjcml0aWNzMlsnZGVmYXVsdCddKShpbnB1dFZhbHVlKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGlnbm9yZUNhc2UpIHtcblx0XHRcdFx0aW5wdXRWYWx1ZSA9IGlucHV0VmFsdWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKG9uSW5wdXRDaGFuZ2UpIHtcblx0XHRcdFx0b25JbnB1dENoYW5nZShpbnB1dFZhbHVlKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRoaXMubG9hZE9wdGlvbnMoaW5wdXRWYWx1ZSk7XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnaW5wdXRWYWx1ZScsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGlucHV0VmFsdWUoKSB7XG5cdFx0XHRpZiAodGhpcy5zZWxlY3QpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuc2VsZWN0LnN0YXRlLmlucHV0VmFsdWU7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gJyc7XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnbm9SZXN1bHRzVGV4dCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIG5vUmVzdWx0c1RleHQoKSB7XG5cdFx0XHR2YXIgX3Byb3BzMiA9IHRoaXMucHJvcHM7XG5cdFx0XHR2YXIgbG9hZGluZ1BsYWNlaG9sZGVyID0gX3Byb3BzMi5sb2FkaW5nUGxhY2Vob2xkZXI7XG5cdFx0XHR2YXIgbm9SZXN1bHRzVGV4dCA9IF9wcm9wczIubm9SZXN1bHRzVGV4dDtcblx0XHRcdHZhciBzZWFyY2hQcm9tcHRUZXh0ID0gX3Byb3BzMi5zZWFyY2hQcm9tcHRUZXh0O1xuXHRcdFx0dmFyIGlzTG9hZGluZyA9IHRoaXMuc3RhdGUuaXNMb2FkaW5nO1xuXG5cdFx0XHR2YXIgaW5wdXRWYWx1ZSA9IHRoaXMuaW5wdXRWYWx1ZSgpO1xuXG5cdFx0XHRpZiAoaXNMb2FkaW5nKSB7XG5cdFx0XHRcdHJldHVybiBsb2FkaW5nUGxhY2Vob2xkZXI7XG5cdFx0XHR9XG5cdFx0XHRpZiAoaW5wdXRWYWx1ZSAmJiBub1Jlc3VsdHNUZXh0KSB7XG5cdFx0XHRcdHJldHVybiBub1Jlc3VsdHNUZXh0O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHNlYXJjaFByb21wdFRleHQ7XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnZm9jdXMnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBmb2N1cygpIHtcblx0XHRcdHRoaXMuc2VsZWN0LmZvY3VzKCk7XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAncmVuZGVyJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuXHRcdFx0dmFyIF90aGlzMyA9IHRoaXM7XG5cblx0XHRcdHZhciBfcHJvcHMzID0gdGhpcy5wcm9wcztcblx0XHRcdHZhciBjaGlsZHJlbiA9IF9wcm9wczMuY2hpbGRyZW47XG5cdFx0XHR2YXIgbG9hZGluZ1BsYWNlaG9sZGVyID0gX3Byb3BzMy5sb2FkaW5nUGxhY2Vob2xkZXI7XG5cdFx0XHR2YXIgcGxhY2Vob2xkZXIgPSBfcHJvcHMzLnBsYWNlaG9sZGVyO1xuXHRcdFx0dmFyIF9zdGF0ZSA9IHRoaXMuc3RhdGU7XG5cdFx0XHR2YXIgaXNMb2FkaW5nID0gX3N0YXRlLmlzTG9hZGluZztcblx0XHRcdHZhciBvcHRpb25zID0gX3N0YXRlLm9wdGlvbnM7XG5cblx0XHRcdHZhciBwcm9wcyA9IHtcblx0XHRcdFx0bm9SZXN1bHRzVGV4dDogdGhpcy5ub1Jlc3VsdHNUZXh0KCksXG5cdFx0XHRcdHBsYWNlaG9sZGVyOiBpc0xvYWRpbmcgPyBsb2FkaW5nUGxhY2Vob2xkZXIgOiBwbGFjZWhvbGRlcixcblx0XHRcdFx0b3B0aW9uczogaXNMb2FkaW5nICYmIGxvYWRpbmdQbGFjZWhvbGRlciA/IFtdIDogb3B0aW9ucyxcblx0XHRcdFx0cmVmOiBmdW5jdGlvbiByZWYoX3JlZikge1xuXHRcdFx0XHRcdHJldHVybiBfdGhpczMuc2VsZWN0ID0gX3JlZjtcblx0XHRcdFx0fSxcblx0XHRcdFx0b25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKG5ld1ZhbHVlcykge1xuXHRcdFx0XHRcdGlmIChfdGhpczMucHJvcHMubXVsdGkgJiYgX3RoaXMzLnByb3BzLnZhbHVlICYmIG5ld1ZhbHVlcy5sZW5ndGggPiBfdGhpczMucHJvcHMudmFsdWUubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHRfdGhpczMuY2xlYXJPcHRpb25zKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdF90aGlzMy5wcm9wcy5vbkNoYW5nZShuZXdWYWx1ZXMpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0XHRyZXR1cm4gY2hpbGRyZW4oX2V4dGVuZHMoe30sIHRoaXMucHJvcHMsIHByb3BzLCB7XG5cdFx0XHRcdGlzTG9hZGluZzogaXNMb2FkaW5nLFxuXHRcdFx0XHRvbklucHV0Q2hhbmdlOiB0aGlzLl9vbklucHV0Q2hhbmdlXG5cdFx0XHR9KSk7XG5cdFx0fVxuXHR9XSk7XG5cblx0cmV0dXJuIEFzeW5jO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gQXN5bmM7XG5cbkFzeW5jLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbkFzeW5jLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuZnVuY3Rpb24gZGVmYXVsdENoaWxkcmVuKHByb3BzKSB7XG5cdHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChfU2VsZWN0MlsnZGVmYXVsdCddLCBwcm9wcyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2VsZWN0L2xpYi9Bc3luY0NyZWF0YWJsZS5qc1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcblx0Zm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO2ZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcblx0XHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG5cdFx0XHRcdHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXHR9cmV0dXJuIHRhcmdldDtcbn07XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG5cdHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07XG59XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcmVhY3QvcmVhY3QuanNcIik7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX2NyZWF0ZVJlYWN0Q2xhc3MgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvY3JlYXRlLXJlYWN0LWNsYXNzL2luZGV4LmpzXCIpO1xuXG52YXIgX2NyZWF0ZVJlYWN0Q2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlUmVhY3RDbGFzcyk7XG5cbnZhciBfU2VsZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3JlYWN0LXNlbGVjdC9saWIvU2VsZWN0LmpzXCIpO1xuXG52YXIgX1NlbGVjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TZWxlY3QpO1xuXG5mdW5jdGlvbiByZWR1Y2Uob2JqKSB7XG5cdHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSB8fCBhcmd1bWVudHNbMV0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzFdO1xuXG5cdHJldHVybiBPYmplY3Qua2V5cyhvYmopLnJlZHVjZShmdW5jdGlvbiAocHJvcHMsIGtleSkge1xuXHRcdHZhciB2YWx1ZSA9IG9ialtrZXldO1xuXHRcdGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSBwcm9wc1trZXldID0gdmFsdWU7XG5cdFx0cmV0dXJuIHByb3BzO1xuXHR9LCBwcm9wcyk7XG59XG5cbnZhciBBc3luY0NyZWF0YWJsZSA9ICgwLCBfY3JlYXRlUmVhY3RDbGFzczJbJ2RlZmF1bHQnXSkoe1xuXHRkaXNwbGF5TmFtZTogJ0FzeW5jQ3JlYXRhYmxlU2VsZWN0JyxcblxuXHRmb2N1czogZnVuY3Rpb24gZm9jdXMoKSB7XG5cdFx0dGhpcy5zZWxlY3QuZm9jdXMoKTtcblx0fSxcblxuXHRyZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcblx0XHR2YXIgX3RoaXMgPSB0aGlzO1xuXG5cdFx0cmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KF9TZWxlY3QyWydkZWZhdWx0J10uQXN5bmMsIHRoaXMucHJvcHMsIGZ1bmN0aW9uIChhc3luY1Byb3BzKSB7XG5cdFx0XHRyZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoX1NlbGVjdDJbJ2RlZmF1bHQnXS5DcmVhdGFibGUsIF90aGlzLnByb3BzLCBmdW5jdGlvbiAoY3JlYXRhYmxlUHJvcHMpIHtcblx0XHRcdFx0cmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KF9TZWxlY3QyWydkZWZhdWx0J10sIF9leHRlbmRzKHt9LCByZWR1Y2UoYXN5bmNQcm9wcywgcmVkdWNlKGNyZWF0YWJsZVByb3BzLCB7fSkpLCB7XG5cdFx0XHRcdFx0b25JbnB1dENoYW5nZTogZnVuY3Rpb24gb25JbnB1dENoYW5nZShpbnB1dCkge1xuXHRcdFx0XHRcdFx0Y3JlYXRhYmxlUHJvcHMub25JbnB1dENoYW5nZShpbnB1dCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gYXN5bmNQcm9wcy5vbklucHV0Q2hhbmdlKGlucHV0KTtcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHJlZjogZnVuY3Rpb24gcmVmKF9yZWYpIHtcblx0XHRcdFx0XHRcdF90aGlzLnNlbGVjdCA9IF9yZWY7XG5cdFx0XHRcdFx0XHRjcmVhdGFibGVQcm9wcy5yZWYoX3JlZik7XG5cdFx0XHRcdFx0XHRhc3luY1Byb3BzLnJlZihfcmVmKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pKTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHR9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBc3luY0NyZWF0YWJsZTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2VsZWN0L2xpYi9DcmVhdGFibGUuanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG5cdGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG5cdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuXHRcdFx0XHR0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblx0fXJldHVybiB0YXJnZXQ7XG59O1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuXHRyZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9O1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7XG5cdHZhciB0YXJnZXQgPSB7fTtmb3IgKHZhciBpIGluIG9iaikge1xuXHRcdGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7aWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7dGFyZ2V0W2ldID0gb2JqW2ldO1xuXHR9cmV0dXJuIHRhcmdldDtcbn1cblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9yZWFjdC9yZWFjdC5qc1wiKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfY3JlYXRlUmVhY3RDbGFzcyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9jcmVhdGUtcmVhY3QtY2xhc3MvaW5kZXguanNcIik7XG5cbnZhciBfY3JlYXRlUmVhY3RDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVSZWFjdENsYXNzKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qc1wiKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9TZWxlY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2VsZWN0L2xpYi9TZWxlY3QuanNcIik7XG5cbnZhciBfU2VsZWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1NlbGVjdCk7XG5cbnZhciBfdXRpbHNEZWZhdWx0RmlsdGVyT3B0aW9ucyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9yZWFjdC1zZWxlY3QvbGliL3V0aWxzL2RlZmF1bHRGaWx0ZXJPcHRpb25zLmpzXCIpO1xuXG52YXIgX3V0aWxzRGVmYXVsdEZpbHRlck9wdGlvbnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdXRpbHNEZWZhdWx0RmlsdGVyT3B0aW9ucyk7XG5cbnZhciBfdXRpbHNEZWZhdWx0TWVudVJlbmRlcmVyID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3JlYWN0LXNlbGVjdC9saWIvdXRpbHMvZGVmYXVsdE1lbnVSZW5kZXJlci5qc1wiKTtcblxudmFyIF91dGlsc0RlZmF1bHRNZW51UmVuZGVyZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdXRpbHNEZWZhdWx0TWVudVJlbmRlcmVyKTtcblxudmFyIENyZWF0YWJsZSA9ICgwLCBfY3JlYXRlUmVhY3RDbGFzczJbJ2RlZmF1bHQnXSkoe1xuXHRkaXNwbGF5TmFtZTogJ0NyZWF0YWJsZVNlbGVjdCcsXG5cblx0cHJvcFR5cGVzOiB7XG5cdFx0Ly8gQ2hpbGQgZnVuY3Rpb24gcmVzcG9uc2libGUgZm9yIGNyZWF0aW5nIHRoZSBpbm5lciBTZWxlY3QgY29tcG9uZW50XG5cdFx0Ly8gVGhpcyBjb21wb25lbnQgY2FuIGJlIHVzZWQgdG8gY29tcG9zZSBIT0NzIChlZyBDcmVhdGFibGUgYW5kIEFzeW5jKVxuXHRcdC8vIChwcm9wczogT2JqZWN0KTogUHJvcFR5cGVzLmVsZW1lbnRcblx0XHRjaGlsZHJlbjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLFxuXG5cdFx0Ly8gU2VlIFNlbGVjdC5wcm9wVHlwZXMuZmlsdGVyT3B0aW9uc1xuXHRcdGZpbHRlck9wdGlvbnM6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYW55LFxuXG5cdFx0Ly8gU2VhcmNoZXMgZm9yIGFueSBtYXRjaGluZyBvcHRpb24gd2l0aGluIHRoZSBzZXQgb2Ygb3B0aW9ucy5cblx0XHQvLyBUaGlzIGZ1bmN0aW9uIHByZXZlbnRzIGR1cGxpY2F0ZSBvcHRpb25zIGZyb20gYmVpbmcgY3JlYXRlZC5cblx0XHQvLyAoeyBvcHRpb246IE9iamVjdCwgb3B0aW9uczogQXJyYXksIGxhYmVsS2V5OiBzdHJpbmcsIHZhbHVlS2V5OiBzdHJpbmcgfSk6IGJvb2xlYW5cblx0XHRpc09wdGlvblVuaXF1ZTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLFxuXG5cdFx0Ly8gRGV0ZXJtaW5lcyBpZiB0aGUgY3VycmVudCBpbnB1dCB0ZXh0IHJlcHJlc2VudHMgYSB2YWxpZCBvcHRpb24uXG5cdFx0Ly8gKHsgbGFiZWw6IHN0cmluZyB9KTogYm9vbGVhblxuXHRcdGlzVmFsaWROZXdPcHRpb246IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcblxuXHRcdC8vIFNlZSBTZWxlY3QucHJvcFR5cGVzLm1lbnVSZW5kZXJlclxuXHRcdG1lbnVSZW5kZXJlcjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5hbnksXG5cblx0XHQvLyBGYWN0b3J5IHRvIGNyZWF0ZSBuZXcgb3B0aW9uLlxuXHRcdC8vICh7IGxhYmVsOiBzdHJpbmcsIGxhYmVsS2V5OiBzdHJpbmcsIHZhbHVlS2V5OiBzdHJpbmcgfSk6IE9iamVjdFxuXHRcdG5ld09wdGlvbkNyZWF0b3I6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcblxuXHRcdC8vIGlucHV0IGNoYW5nZSBoYW5kbGVyOiBmdW5jdGlvbiAoaW5wdXRWYWx1ZSkge31cblx0XHRvbklucHV0Q2hhbmdlOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsXG5cblx0XHQvLyBpbnB1dCBrZXlEb3duIGhhbmRsZXI6IGZ1bmN0aW9uIChldmVudCkge31cblx0XHRvbklucHV0S2V5RG93bjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLFxuXG5cdFx0Ly8gbmV3IG9wdGlvbiBjbGljayBoYW5kbGVyOiBmdW5jdGlvbiAob3B0aW9uKSB7fVxuXHRcdG9uTmV3T3B0aW9uQ2xpY2s6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcblxuXHRcdC8vIFNlZSBTZWxlY3QucHJvcFR5cGVzLm9wdGlvbnNcblx0XHRvcHRpb25zOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmFycmF5LFxuXG5cdFx0Ly8gQ3JlYXRlcyBwcm9tcHQvcGxhY2Vob2xkZXIgb3B0aW9uIHRleHQuXG5cdFx0Ly8gKGZpbHRlclRleHQ6IHN0cmluZyk6IHN0cmluZ1xuXHRcdHByb21wdFRleHRDcmVhdG9yOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsXG5cblx0XHQvLyBEZWNpZGVzIGlmIGEga2V5RG93biBldmVudCAoZWcgaXRzIGBrZXlDb2RlYCkgc2hvdWxkIHJlc3VsdCBpbiB0aGUgY3JlYXRpb24gb2YgYSBuZXcgb3B0aW9uLlxuXHRcdHNob3VsZEtleURvd25FdmVudENyZWF0ZU5ld09wdGlvbjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jXG5cdH0sXG5cblx0Ly8gRGVmYXVsdCBwcm9wIG1ldGhvZHNcblx0c3RhdGljczoge1xuXHRcdGlzT3B0aW9uVW5pcXVlOiBpc09wdGlvblVuaXF1ZSxcblx0XHRpc1ZhbGlkTmV3T3B0aW9uOiBpc1ZhbGlkTmV3T3B0aW9uLFxuXHRcdG5ld09wdGlvbkNyZWF0b3I6IG5ld09wdGlvbkNyZWF0b3IsXG5cdFx0cHJvbXB0VGV4dENyZWF0b3I6IHByb21wdFRleHRDcmVhdG9yLFxuXHRcdHNob3VsZEtleURvd25FdmVudENyZWF0ZU5ld09wdGlvbjogc2hvdWxkS2V5RG93bkV2ZW50Q3JlYXRlTmV3T3B0aW9uXG5cdH0sXG5cblx0Z2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGZpbHRlck9wdGlvbnM6IF91dGlsc0RlZmF1bHRGaWx0ZXJPcHRpb25zMlsnZGVmYXVsdCddLFxuXHRcdFx0aXNPcHRpb25VbmlxdWU6IGlzT3B0aW9uVW5pcXVlLFxuXHRcdFx0aXNWYWxpZE5ld09wdGlvbjogaXNWYWxpZE5ld09wdGlvbixcblx0XHRcdG1lbnVSZW5kZXJlcjogX3V0aWxzRGVmYXVsdE1lbnVSZW5kZXJlcjJbJ2RlZmF1bHQnXSxcblx0XHRcdG5ld09wdGlvbkNyZWF0b3I6IG5ld09wdGlvbkNyZWF0b3IsXG5cdFx0XHRwcm9tcHRUZXh0Q3JlYXRvcjogcHJvbXB0VGV4dENyZWF0b3IsXG5cdFx0XHRzaG91bGRLZXlEb3duRXZlbnRDcmVhdGVOZXdPcHRpb246IHNob3VsZEtleURvd25FdmVudENyZWF0ZU5ld09wdGlvblxuXHRcdH07XG5cdH0sXG5cblx0Y3JlYXRlTmV3T3B0aW9uOiBmdW5jdGlvbiBjcmVhdGVOZXdPcHRpb24oKSB7XG5cdFx0dmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG5cdFx0dmFyIGlzVmFsaWROZXdPcHRpb24gPSBfcHJvcHMuaXNWYWxpZE5ld09wdGlvbjtcblx0XHR2YXIgbmV3T3B0aW9uQ3JlYXRvciA9IF9wcm9wcy5uZXdPcHRpb25DcmVhdG9yO1xuXHRcdHZhciBvbk5ld09wdGlvbkNsaWNrID0gX3Byb3BzLm9uTmV3T3B0aW9uQ2xpY2s7XG5cdFx0dmFyIF9wcm9wcyRvcHRpb25zID0gX3Byb3BzLm9wdGlvbnM7XG5cdFx0dmFyIG9wdGlvbnMgPSBfcHJvcHMkb3B0aW9ucyA9PT0gdW5kZWZpbmVkID8gW10gOiBfcHJvcHMkb3B0aW9ucztcblx0XHR2YXIgc2hvdWxkS2V5RG93bkV2ZW50Q3JlYXRlTmV3T3B0aW9uID0gX3Byb3BzLnNob3VsZEtleURvd25FdmVudENyZWF0ZU5ld09wdGlvbjtcblxuXHRcdGlmIChpc1ZhbGlkTmV3T3B0aW9uKHsgbGFiZWw6IHRoaXMuaW5wdXRWYWx1ZSB9KSkge1xuXHRcdFx0dmFyIG9wdGlvbiA9IG5ld09wdGlvbkNyZWF0b3IoeyBsYWJlbDogdGhpcy5pbnB1dFZhbHVlLCBsYWJlbEtleTogdGhpcy5sYWJlbEtleSwgdmFsdWVLZXk6IHRoaXMudmFsdWVLZXkgfSk7XG5cdFx0XHR2YXIgX2lzT3B0aW9uVW5pcXVlID0gdGhpcy5pc09wdGlvblVuaXF1ZSh7IG9wdGlvbjogb3B0aW9uIH0pO1xuXG5cdFx0XHQvLyBEb24ndCBhZGQgdGhlIHNhbWUgb3B0aW9uIHR3aWNlLlxuXHRcdFx0aWYgKF9pc09wdGlvblVuaXF1ZSkge1xuXHRcdFx0XHRpZiAob25OZXdPcHRpb25DbGljaykge1xuXHRcdFx0XHRcdG9uTmV3T3B0aW9uQ2xpY2sob3B0aW9uKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRvcHRpb25zLnVuc2hpZnQob3B0aW9uKTtcblxuXHRcdFx0XHRcdHRoaXMuc2VsZWN0LnNlbGVjdFZhbHVlKG9wdGlvbik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0ZmlsdGVyT3B0aW9uczogZnVuY3Rpb24gZmlsdGVyT3B0aW9ucygpIHtcblx0XHR2YXIgX3Byb3BzMiA9IHRoaXMucHJvcHM7XG5cdFx0dmFyIGZpbHRlck9wdGlvbnMgPSBfcHJvcHMyLmZpbHRlck9wdGlvbnM7XG5cdFx0dmFyIGlzVmFsaWROZXdPcHRpb24gPSBfcHJvcHMyLmlzVmFsaWROZXdPcHRpb247XG5cdFx0dmFyIG9wdGlvbnMgPSBfcHJvcHMyLm9wdGlvbnM7XG5cdFx0dmFyIHByb21wdFRleHRDcmVhdG9yID0gX3Byb3BzMi5wcm9tcHRUZXh0Q3JlYXRvcjtcblxuXHRcdC8vIFRSSUNLWSBDaGVjayBjdXJyZW50bHkgc2VsZWN0ZWQgb3B0aW9ucyBhcyB3ZWxsLlxuXHRcdC8vIERvbid0IGRpc3BsYXkgYSBjcmVhdGUtcHJvbXB0IGZvciBhIHZhbHVlIHRoYXQncyBzZWxlY3RlZC5cblx0XHQvLyBUaGlzIGNvdmVycyBhc3luYyBlZGdlLWNhc2VzIHdoZXJlIGEgbmV3bHktY3JlYXRlZCBPcHRpb24gaXNuJ3QgeWV0IGluIHRoZSBhc3luYy1sb2FkZWQgYXJyYXkuXG5cdFx0dmFyIGV4Y2x1ZGVPcHRpb25zID0gYXJndW1lbnRzWzJdIHx8IFtdO1xuXG5cdFx0dmFyIGZpbHRlcmVkT3B0aW9ucyA9IGZpbHRlck9wdGlvbnMuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpIHx8IFtdO1xuXG5cdFx0aWYgKGlzVmFsaWROZXdPcHRpb24oeyBsYWJlbDogdGhpcy5pbnB1dFZhbHVlIH0pKSB7XG5cdFx0XHR2YXIgX25ld09wdGlvbkNyZWF0b3IgPSB0aGlzLnByb3BzLm5ld09wdGlvbkNyZWF0b3I7XG5cblx0XHRcdHZhciBvcHRpb24gPSBfbmV3T3B0aW9uQ3JlYXRvcih7XG5cdFx0XHRcdGxhYmVsOiB0aGlzLmlucHV0VmFsdWUsXG5cdFx0XHRcdGxhYmVsS2V5OiB0aGlzLmxhYmVsS2V5LFxuXHRcdFx0XHR2YWx1ZUtleTogdGhpcy52YWx1ZUtleVxuXHRcdFx0fSk7XG5cblx0XHRcdC8vIFRSSUNLWSBDb21wYXJlIHRvIGFsbCBvcHRpb25zIChub3QganVzdCBmaWx0ZXJlZCBvcHRpb25zKSBpbiBjYXNlIG9wdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHNlbGVjdGVkKS5cblx0XHRcdC8vIEZvciBtdWx0aS1zZWxlY3RzLCB0aGlzIHdvdWxkIHJlbW92ZSBpdCBmcm9tIHRoZSBmaWx0ZXJlZCBsaXN0LlxuXHRcdFx0dmFyIF9pc09wdGlvblVuaXF1ZTIgPSB0aGlzLmlzT3B0aW9uVW5pcXVlKHtcblx0XHRcdFx0b3B0aW9uOiBvcHRpb24sXG5cdFx0XHRcdG9wdGlvbnM6IGV4Y2x1ZGVPcHRpb25zLmNvbmNhdChmaWx0ZXJlZE9wdGlvbnMpXG5cdFx0XHR9KTtcblxuXHRcdFx0aWYgKF9pc09wdGlvblVuaXF1ZTIpIHtcblx0XHRcdFx0dmFyIF9wcm9tcHQgPSBwcm9tcHRUZXh0Q3JlYXRvcih0aGlzLmlucHV0VmFsdWUpO1xuXG5cdFx0XHRcdHRoaXMuX2NyZWF0ZVBsYWNlaG9sZGVyT3B0aW9uID0gX25ld09wdGlvbkNyZWF0b3Ioe1xuXHRcdFx0XHRcdGxhYmVsOiBfcHJvbXB0LFxuXHRcdFx0XHRcdGxhYmVsS2V5OiB0aGlzLmxhYmVsS2V5LFxuXHRcdFx0XHRcdHZhbHVlS2V5OiB0aGlzLnZhbHVlS2V5XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdGZpbHRlcmVkT3B0aW9ucy51bnNoaWZ0KHRoaXMuX2NyZWF0ZVBsYWNlaG9sZGVyT3B0aW9uKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmlsdGVyZWRPcHRpb25zO1xuXHR9LFxuXG5cdGlzT3B0aW9uVW5pcXVlOiBmdW5jdGlvbiBpc09wdGlvblVuaXF1ZShfcmVmMikge1xuXHRcdHZhciBvcHRpb24gPSBfcmVmMi5vcHRpb247XG5cdFx0dmFyIG9wdGlvbnMgPSBfcmVmMi5vcHRpb25zO1xuXHRcdHZhciBpc09wdGlvblVuaXF1ZSA9IHRoaXMucHJvcHMuaXNPcHRpb25VbmlxdWU7XG5cblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB0aGlzLnNlbGVjdC5maWx0ZXJPcHRpb25zKCk7XG5cblx0XHRyZXR1cm4gaXNPcHRpb25VbmlxdWUoe1xuXHRcdFx0bGFiZWxLZXk6IHRoaXMubGFiZWxLZXksXG5cdFx0XHRvcHRpb246IG9wdGlvbixcblx0XHRcdG9wdGlvbnM6IG9wdGlvbnMsXG5cdFx0XHR2YWx1ZUtleTogdGhpcy52YWx1ZUtleVxuXHRcdH0pO1xuXHR9LFxuXG5cdG1lbnVSZW5kZXJlcjogZnVuY3Rpb24gbWVudVJlbmRlcmVyKHBhcmFtcykge1xuXHRcdHZhciBtZW51UmVuZGVyZXIgPSB0aGlzLnByb3BzLm1lbnVSZW5kZXJlcjtcblxuXHRcdHJldHVybiBtZW51UmVuZGVyZXIoX2V4dGVuZHMoe30sIHBhcmFtcywge1xuXHRcdFx0b25TZWxlY3Q6IHRoaXMub25PcHRpb25TZWxlY3QsXG5cdFx0XHRzZWxlY3RWYWx1ZTogdGhpcy5vbk9wdGlvblNlbGVjdFxuXHRcdH0pKTtcblx0fSxcblxuXHRvbklucHV0Q2hhbmdlOiBmdW5jdGlvbiBvbklucHV0Q2hhbmdlKGlucHV0KSB7XG5cdFx0dmFyIG9uSW5wdXRDaGFuZ2UgPSB0aGlzLnByb3BzLm9uSW5wdXRDaGFuZ2U7XG5cblx0XHRpZiAob25JbnB1dENoYW5nZSkge1xuXHRcdFx0b25JbnB1dENoYW5nZShpbnB1dCk7XG5cdFx0fVxuXG5cdFx0Ly8gVGhpcyB2YWx1ZSBtYXkgYmUgbmVlZGVkIGluIGJldHdlZW4gU2VsZWN0IG1vdW50cyAod2hlbiB0aGlzLnNlbGVjdCBpcyBudWxsKVxuXHRcdHRoaXMuaW5wdXRWYWx1ZSA9IGlucHV0O1xuXHR9LFxuXG5cdG9uSW5wdXRLZXlEb3duOiBmdW5jdGlvbiBvbklucHV0S2V5RG93bihldmVudCkge1xuXHRcdHZhciBfcHJvcHMzID0gdGhpcy5wcm9wcztcblx0XHR2YXIgc2hvdWxkS2V5RG93bkV2ZW50Q3JlYXRlTmV3T3B0aW9uID0gX3Byb3BzMy5zaG91bGRLZXlEb3duRXZlbnRDcmVhdGVOZXdPcHRpb247XG5cdFx0dmFyIG9uSW5wdXRLZXlEb3duID0gX3Byb3BzMy5vbklucHV0S2V5RG93bjtcblxuXHRcdHZhciBmb2N1c2VkT3B0aW9uID0gdGhpcy5zZWxlY3QuZ2V0Rm9jdXNlZE9wdGlvbigpO1xuXG5cdFx0aWYgKGZvY3VzZWRPcHRpb24gJiYgZm9jdXNlZE9wdGlvbiA9PT0gdGhpcy5fY3JlYXRlUGxhY2Vob2xkZXJPcHRpb24gJiYgc2hvdWxkS2V5RG93bkV2ZW50Q3JlYXRlTmV3T3B0aW9uKHsga2V5Q29kZTogZXZlbnQua2V5Q29kZSB9KSkge1xuXHRcdFx0dGhpcy5jcmVhdGVOZXdPcHRpb24oKTtcblxuXHRcdFx0Ly8gUHJldmVudCBkZWNvcmF0ZWQgU2VsZWN0IGZyb20gZG9pbmcgYW55dGhpbmcgYWRkaXRpb25hbCB3aXRoIHRoaXMga2V5RG93biBldmVudFxuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHR9IGVsc2UgaWYgKG9uSW5wdXRLZXlEb3duKSB7XG5cdFx0XHRvbklucHV0S2V5RG93bihldmVudCk7XG5cdFx0fVxuXHR9LFxuXG5cdG9uT3B0aW9uU2VsZWN0OiBmdW5jdGlvbiBvbk9wdGlvblNlbGVjdChvcHRpb24sIGV2ZW50KSB7XG5cdFx0aWYgKG9wdGlvbiA9PT0gdGhpcy5fY3JlYXRlUGxhY2Vob2xkZXJPcHRpb24pIHtcblx0XHRcdHRoaXMuY3JlYXRlTmV3T3B0aW9uKCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuc2VsZWN0LnNlbGVjdFZhbHVlKG9wdGlvbik7XG5cdFx0fVxuXHR9LFxuXG5cdGZvY3VzOiBmdW5jdGlvbiBmb2N1cygpIHtcblx0XHR0aGlzLnNlbGVjdC5mb2N1cygpO1xuXHR9LFxuXG5cdHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuXHRcdHZhciBfdGhpcyA9IHRoaXM7XG5cblx0XHR2YXIgX3Byb3BzNCA9IHRoaXMucHJvcHM7XG5cdFx0dmFyIG5ld09wdGlvbkNyZWF0b3IgPSBfcHJvcHM0Lm5ld09wdGlvbkNyZWF0b3I7XG5cdFx0dmFyIHNob3VsZEtleURvd25FdmVudENyZWF0ZU5ld09wdGlvbiA9IF9wcm9wczQuc2hvdWxkS2V5RG93bkV2ZW50Q3JlYXRlTmV3T3B0aW9uO1xuXG5cdFx0dmFyIHJlc3RQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHM0LCBbJ25ld09wdGlvbkNyZWF0b3InLCAnc2hvdWxkS2V5RG93bkV2ZW50Q3JlYXRlTmV3T3B0aW9uJ10pO1xuXG5cdFx0dmFyIGNoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcblxuXHRcdC8vIFdlIGNhbid0IHVzZSBkZXN0cnVjdHVyaW5nIGRlZmF1bHQgdmFsdWVzIHRvIHNldCB0aGUgY2hpbGRyZW4sXG5cdFx0Ly8gYmVjYXVzZSBpdCB3b24ndCBhcHBseSB3b3JrIGlmIGBjaGlsZHJlbmAgaXMgbnVsbC4gQSBmYWxzeSBjaGVjayBpc1xuXHRcdC8vIG1vcmUgcmVsaWFibGUgaW4gcmVhbCB3b3JsZCB1c2UtY2FzZXMuXG5cdFx0aWYgKCFjaGlsZHJlbikge1xuXHRcdFx0Y2hpbGRyZW4gPSBkZWZhdWx0Q2hpbGRyZW47XG5cdFx0fVxuXG5cdFx0dmFyIHByb3BzID0gX2V4dGVuZHMoe30sIHJlc3RQcm9wcywge1xuXHRcdFx0YWxsb3dDcmVhdGU6IHRydWUsXG5cdFx0XHRmaWx0ZXJPcHRpb25zOiB0aGlzLmZpbHRlck9wdGlvbnMsXG5cdFx0XHRtZW51UmVuZGVyZXI6IHRoaXMubWVudVJlbmRlcmVyLFxuXHRcdFx0b25JbnB1dENoYW5nZTogdGhpcy5vbklucHV0Q2hhbmdlLFxuXHRcdFx0b25JbnB1dEtleURvd246IHRoaXMub25JbnB1dEtleURvd24sXG5cdFx0XHRyZWY6IGZ1bmN0aW9uIHJlZihfcmVmKSB7XG5cdFx0XHRcdF90aGlzLnNlbGVjdCA9IF9yZWY7XG5cblx0XHRcdFx0Ly8gVGhlc2UgdmFsdWVzIG1heSBiZSBuZWVkZWQgaW4gYmV0d2VlbiBTZWxlY3QgbW91bnRzICh3aGVuIHRoaXMuc2VsZWN0IGlzIG51bGwpXG5cdFx0XHRcdGlmIChfcmVmKSB7XG5cdFx0XHRcdFx0X3RoaXMubGFiZWxLZXkgPSBfcmVmLnByb3BzLmxhYmVsS2V5O1xuXHRcdFx0XHRcdF90aGlzLnZhbHVlS2V5ID0gX3JlZi5wcm9wcy52YWx1ZUtleTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIGNoaWxkcmVuKHByb3BzKTtcblx0fVxufSk7XG5cbmZ1bmN0aW9uIGRlZmF1bHRDaGlsZHJlbihwcm9wcykge1xuXHRyZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoX1NlbGVjdDJbJ2RlZmF1bHQnXSwgcHJvcHMpO1xufTtcblxuZnVuY3Rpb24gaXNPcHRpb25VbmlxdWUoX3JlZjMpIHtcblx0dmFyIG9wdGlvbiA9IF9yZWYzLm9wdGlvbjtcblx0dmFyIG9wdGlvbnMgPSBfcmVmMy5vcHRpb25zO1xuXHR2YXIgbGFiZWxLZXkgPSBfcmVmMy5sYWJlbEtleTtcblx0dmFyIHZhbHVlS2V5ID0gX3JlZjMudmFsdWVLZXk7XG5cblx0cmV0dXJuIG9wdGlvbnMuZmlsdGVyKGZ1bmN0aW9uIChleGlzdGluZ09wdGlvbikge1xuXHRcdHJldHVybiBleGlzdGluZ09wdGlvbltsYWJlbEtleV0gPT09IG9wdGlvbltsYWJlbEtleV0gfHwgZXhpc3RpbmdPcHRpb25bdmFsdWVLZXldID09PSBvcHRpb25bdmFsdWVLZXldO1xuXHR9KS5sZW5ndGggPT09IDA7XG59O1xuXG5mdW5jdGlvbiBpc1ZhbGlkTmV3T3B0aW9uKF9yZWY0KSB7XG5cdHZhciBsYWJlbCA9IF9yZWY0LmxhYmVsO1xuXG5cdHJldHVybiAhIWxhYmVsO1xufTtcblxuZnVuY3Rpb24gbmV3T3B0aW9uQ3JlYXRvcihfcmVmNSkge1xuXHR2YXIgbGFiZWwgPSBfcmVmNS5sYWJlbDtcblx0dmFyIGxhYmVsS2V5ID0gX3JlZjUubGFiZWxLZXk7XG5cdHZhciB2YWx1ZUtleSA9IF9yZWY1LnZhbHVlS2V5O1xuXG5cdHZhciBvcHRpb24gPSB7fTtcblx0b3B0aW9uW3ZhbHVlS2V5XSA9IGxhYmVsO1xuXHRvcHRpb25bbGFiZWxLZXldID0gbGFiZWw7XG5cdG9wdGlvbi5jbGFzc05hbWUgPSAnU2VsZWN0LWNyZWF0ZS1vcHRpb24tcGxhY2Vob2xkZXInO1xuXHRyZXR1cm4gb3B0aW9uO1xufTtcblxuZnVuY3Rpb24gcHJvbXB0VGV4dENyZWF0b3IobGFiZWwpIHtcblx0cmV0dXJuICdDcmVhdGUgb3B0aW9uIFwiJyArIGxhYmVsICsgJ1wiJztcbn1cblxuZnVuY3Rpb24gc2hvdWxkS2V5RG93bkV2ZW50Q3JlYXRlTmV3T3B0aW9uKF9yZWY2KSB7XG5cdHZhciBrZXlDb2RlID0gX3JlZjYua2V5Q29kZTtcblxuXHRzd2l0Y2ggKGtleUNvZGUpIHtcblx0XHRjYXNlIDk6IC8vIFRBQlxuXHRcdGNhc2UgMTM6IC8vIEVOVEVSXG5cdFx0Y2FzZSAxODg6XG5cdFx0XHQvLyBDT01NQVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRyZXR1cm4gZmFsc2U7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENyZWF0YWJsZTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2VsZWN0L2xpYi9PcHRpb24uanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcblx0cmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTtcbn1cblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9yZWFjdC9yZWFjdC5qc1wiKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfY3JlYXRlUmVhY3RDbGFzcyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9jcmVhdGUtcmVhY3QtY2xhc3MvaW5kZXguanNcIik7XG5cbnZhciBfY3JlYXRlUmVhY3RDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVSZWFjdENsYXNzKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qc1wiKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9jbGFzc25hbWVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanNcIik7XG5cbnZhciBfY2xhc3NuYW1lczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc25hbWVzKTtcblxudmFyIE9wdGlvbiA9ICgwLCBfY3JlYXRlUmVhY3RDbGFzczJbJ2RlZmF1bHQnXSkoe1xuXHRwcm9wVHlwZXM6IHtcblx0XHRjaGlsZHJlbjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ub2RlLFxuXHRcdGNsYXNzTmFtZTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcsIC8vIGNsYXNzTmFtZSAoYmFzZWQgb24gbW91c2UgcG9zaXRpb24pXG5cdFx0aW5zdGFuY2VQcmVmaXg6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uc3RyaW5nLmlzUmVxdWlyZWQsIC8vIHVuaXF1ZSBwcmVmaXggZm9yIHRoZSBpZHMgKHVzZWQgZm9yIGFyaWEpXG5cdFx0aXNEaXNhYmxlZDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLCAvLyB0aGUgb3B0aW9uIGlzIGRpc2FibGVkXG5cdFx0aXNGb2N1c2VkOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsIC8vIHRoZSBvcHRpb24gaXMgZm9jdXNlZFxuXHRcdGlzU2VsZWN0ZWQ6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCwgLy8gdGhlIG9wdGlvbiBpcyBzZWxlY3RlZFxuXHRcdG9uRm9jdXM6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYywgLy8gbWV0aG9kIHRvIGhhbmRsZSBtb3VzZUVudGVyIG9uIG9wdGlvbiBlbGVtZW50XG5cdFx0b25TZWxlY3Q6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYywgLy8gbWV0aG9kIHRvIGhhbmRsZSBjbGljayBvbiBvcHRpb24gZWxlbWVudFxuXHRcdG9uVW5mb2N1czogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLCAvLyBtZXRob2QgdG8gaGFuZGxlIG1vdXNlTGVhdmUgb24gb3B0aW9uIGVsZW1lbnRcblx0XHRvcHRpb246IF9wcm9wVHlwZXMyWydkZWZhdWx0J10ub2JqZWN0LmlzUmVxdWlyZWQsIC8vIG9iamVjdCB0aGF0IGlzIGJhc2UgZm9yIHRoYXQgb3B0aW9uXG5cdFx0b3B0aW9uSW5kZXg6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10ubnVtYmVyIH0sXG5cdC8vIGluZGV4IG9mIHRoZSBvcHRpb24sIHVzZWQgdG8gZ2VuZXJhdGUgdW5pcXVlIGlkcyBmb3IgYXJpYVxuXHRibG9ja0V2ZW50OiBmdW5jdGlvbiBibG9ja0V2ZW50KGV2ZW50KSB7XG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRpZiAoZXZlbnQudGFyZ2V0LnRhZ05hbWUgIT09ICdBJyB8fCAhKCdocmVmJyBpbiBldmVudC50YXJnZXQpKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGlmIChldmVudC50YXJnZXQudGFyZ2V0KSB7XG5cdFx0XHR3aW5kb3cub3BlbihldmVudC50YXJnZXQuaHJlZiwgZXZlbnQudGFyZ2V0LnRhcmdldCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gZXZlbnQudGFyZ2V0LmhyZWY7XG5cdFx0fVxuXHR9LFxuXG5cdGhhbmRsZU1vdXNlRG93bjogZnVuY3Rpb24gaGFuZGxlTW91c2VEb3duKGV2ZW50KSB7XG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR0aGlzLnByb3BzLm9uU2VsZWN0KHRoaXMucHJvcHMub3B0aW9uLCBldmVudCk7XG5cdH0sXG5cblx0aGFuZGxlTW91c2VFbnRlcjogZnVuY3Rpb24gaGFuZGxlTW91c2VFbnRlcihldmVudCkge1xuXHRcdHRoaXMub25Gb2N1cyhldmVudCk7XG5cdH0sXG5cblx0aGFuZGxlTW91c2VNb3ZlOiBmdW5jdGlvbiBoYW5kbGVNb3VzZU1vdmUoZXZlbnQpIHtcblx0XHR0aGlzLm9uRm9jdXMoZXZlbnQpO1xuXHR9LFxuXG5cdGhhbmRsZVRvdWNoRW5kOiBmdW5jdGlvbiBoYW5kbGVUb3VjaEVuZChldmVudCkge1xuXHRcdC8vIENoZWNrIGlmIHRoZSB2aWV3IGlzIGJlaW5nIGRyYWdnZWQsIEluIHRoaXMgY2FzZVxuXHRcdC8vIHdlIGRvbid0IHdhbnQgdG8gZmlyZSB0aGUgY2xpY2sgZXZlbnQgKGJlY2F1c2UgdGhlIHVzZXIgb25seSB3YW50cyB0byBzY3JvbGwpXG5cdFx0aWYgKHRoaXMuZHJhZ2dpbmcpIHJldHVybjtcblxuXHRcdHRoaXMuaGFuZGxlTW91c2VEb3duKGV2ZW50KTtcblx0fSxcblxuXHRoYW5kbGVUb3VjaE1vdmU6IGZ1bmN0aW9uIGhhbmRsZVRvdWNoTW92ZShldmVudCkge1xuXHRcdC8vIFNldCBhIGZsYWcgdGhhdCB0aGUgdmlldyBpcyBiZWluZyBkcmFnZ2VkXG5cdFx0dGhpcy5kcmFnZ2luZyA9IHRydWU7XG5cdH0sXG5cblx0aGFuZGxlVG91Y2hTdGFydDogZnVuY3Rpb24gaGFuZGxlVG91Y2hTdGFydChldmVudCkge1xuXHRcdC8vIFNldCBhIGZsYWcgdGhhdCB0aGUgdmlldyBpcyBub3QgYmVpbmcgZHJhZ2dlZFxuXHRcdHRoaXMuZHJhZ2dpbmcgPSBmYWxzZTtcblx0fSxcblxuXHRvbkZvY3VzOiBmdW5jdGlvbiBvbkZvY3VzKGV2ZW50KSB7XG5cdFx0aWYgKCF0aGlzLnByb3BzLmlzRm9jdXNlZCkge1xuXHRcdFx0dGhpcy5wcm9wcy5vbkZvY3VzKHRoaXMucHJvcHMub3B0aW9uLCBldmVudCk7XG5cdFx0fVxuXHR9LFxuXHRyZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcblx0XHR2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcblx0XHR2YXIgb3B0aW9uID0gX3Byb3BzLm9wdGlvbjtcblx0XHR2YXIgaW5zdGFuY2VQcmVmaXggPSBfcHJvcHMuaW5zdGFuY2VQcmVmaXg7XG5cdFx0dmFyIG9wdGlvbkluZGV4ID0gX3Byb3BzLm9wdGlvbkluZGV4O1xuXG5cdFx0dmFyIGNsYXNzTmFtZSA9ICgwLCBfY2xhc3NuYW1lczJbJ2RlZmF1bHQnXSkodGhpcy5wcm9wcy5jbGFzc05hbWUsIG9wdGlvbi5jbGFzc05hbWUpO1xuXG5cdFx0cmV0dXJuIG9wdGlvbi5kaXNhYmxlZCA/IF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuXHRcdFx0b25Nb3VzZURvd246IHRoaXMuYmxvY2tFdmVudCxcblx0XHRcdG9uQ2xpY2s6IHRoaXMuYmxvY2tFdmVudCB9LCB0aGlzLnByb3BzLmNoaWxkcmVuKSA6IF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuXHRcdFx0c3R5bGU6IG9wdGlvbi5zdHlsZSxcblx0XHRcdHJvbGU6ICdvcHRpb24nLFxuXHRcdFx0b25Nb3VzZURvd246IHRoaXMuaGFuZGxlTW91c2VEb3duLFxuXHRcdFx0b25Nb3VzZUVudGVyOiB0aGlzLmhhbmRsZU1vdXNlRW50ZXIsXG5cdFx0XHRvbk1vdXNlTW92ZTogdGhpcy5oYW5kbGVNb3VzZU1vdmUsXG5cdFx0XHRvblRvdWNoU3RhcnQ6IHRoaXMuaGFuZGxlVG91Y2hTdGFydCxcblx0XHRcdG9uVG91Y2hNb3ZlOiB0aGlzLmhhbmRsZVRvdWNoTW92ZSxcblx0XHRcdG9uVG91Y2hFbmQ6IHRoaXMuaGFuZGxlVG91Y2hFbmQsXG5cdFx0XHRpZDogaW5zdGFuY2VQcmVmaXggKyAnLW9wdGlvbi0nICsgb3B0aW9uSW5kZXgsXG5cdFx0XHR0aXRsZTogb3B0aW9uLnRpdGxlIH0sIHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuXHR9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBPcHRpb247XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL3JlYWN0LXNlbGVjdC9saWIvU2VsZWN0LmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyohXG4gIENvcHlyaWdodCAoYykgMjAxNiBKZWQgV2F0c29uLlxuICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHNlZVxuICBodHRwOi8vamVkd2F0c29uLmdpdGh1Yi5pby9yZWFjdC1zZWxlY3RcbiovXG5cblxuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcblx0dmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcblx0Zm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO2ZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcblx0XHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG5cdFx0XHRcdHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXHR9cmV0dXJuIHRhcmdldDtcbn07XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG5cdHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHtcblx0dmFyIHRhcmdldCA9IHt9O2ZvciAodmFyIGkgaW4gb2JqKSB7XG5cdFx0aWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTtpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTt0YXJnZXRbaV0gPSBvYmpbaV07XG5cdH1yZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG5cdGlmIChrZXkgaW4gb2JqKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTtcblx0fSBlbHNlIHtcblx0XHRvYmpba2V5XSA9IHZhbHVlO1xuXHR9cmV0dXJuIG9iajtcbn1cblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9yZWFjdC9yZWFjdC5qc1wiKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfY3JlYXRlUmVhY3RDbGFzcyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9jcmVhdGUtcmVhY3QtY2xhc3MvaW5kZXguanNcIik7XG5cbnZhciBfY3JlYXRlUmVhY3RDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVSZWFjdENsYXNzKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qc1wiKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9yZWFjdERvbSA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanNcIik7XG5cbnZhciBfcmVhY3REb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3REb20pO1xuXG52YXIgX3JlYWN0SW5wdXRBdXRvc2l6ZSA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9yZWFjdC1pbnB1dC1hdXRvc2l6ZS9saWIvQXV0b3NpemVJbnB1dC5qc1wiKTtcblxudmFyIF9yZWFjdElucHV0QXV0b3NpemUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3RJbnB1dEF1dG9zaXplKTtcblxudmFyIF9jbGFzc25hbWVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanNcIik7XG5cbnZhciBfY2xhc3NuYW1lczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc25hbWVzKTtcblxudmFyIF91dGlsc0RlZmF1bHRBcnJvd1JlbmRlcmVyID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3JlYWN0LXNlbGVjdC9saWIvdXRpbHMvZGVmYXVsdEFycm93UmVuZGVyZXIuanNcIik7XG5cbnZhciBfdXRpbHNEZWZhdWx0QXJyb3dSZW5kZXJlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91dGlsc0RlZmF1bHRBcnJvd1JlbmRlcmVyKTtcblxudmFyIF91dGlsc0RlZmF1bHRGaWx0ZXJPcHRpb25zID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3JlYWN0LXNlbGVjdC9saWIvdXRpbHMvZGVmYXVsdEZpbHRlck9wdGlvbnMuanNcIik7XG5cbnZhciBfdXRpbHNEZWZhdWx0RmlsdGVyT3B0aW9uczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91dGlsc0RlZmF1bHRGaWx0ZXJPcHRpb25zKTtcblxudmFyIF91dGlsc0RlZmF1bHRNZW51UmVuZGVyZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2VsZWN0L2xpYi91dGlscy9kZWZhdWx0TWVudVJlbmRlcmVyLmpzXCIpO1xuXG52YXIgX3V0aWxzRGVmYXVsdE1lbnVSZW5kZXJlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91dGlsc0RlZmF1bHRNZW51UmVuZGVyZXIpO1xuXG52YXIgX3V0aWxzRGVmYXVsdENsZWFyUmVuZGVyZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2VsZWN0L2xpYi91dGlscy9kZWZhdWx0Q2xlYXJSZW5kZXJlci5qc1wiKTtcblxudmFyIF91dGlsc0RlZmF1bHRDbGVhclJlbmRlcmVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3V0aWxzRGVmYXVsdENsZWFyUmVuZGVyZXIpO1xuXG52YXIgX0FzeW5jID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3JlYWN0LXNlbGVjdC9saWIvQXN5bmMuanNcIik7XG5cbnZhciBfQXN5bmMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQXN5bmMpO1xuXG52YXIgX0FzeW5jQ3JlYXRhYmxlID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3JlYWN0LXNlbGVjdC9saWIvQXN5bmNDcmVhdGFibGUuanNcIik7XG5cbnZhciBfQXN5bmNDcmVhdGFibGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQXN5bmNDcmVhdGFibGUpO1xuXG52YXIgX0NyZWF0YWJsZSA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9yZWFjdC1zZWxlY3QvbGliL0NyZWF0YWJsZS5qc1wiKTtcblxudmFyIF9DcmVhdGFibGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ3JlYXRhYmxlKTtcblxudmFyIF9PcHRpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2VsZWN0L2xpYi9PcHRpb24uanNcIik7XG5cbnZhciBfT3B0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX09wdGlvbik7XG5cbnZhciBfVmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2VsZWN0L2xpYi9WYWx1ZS5qc1wiKTtcblxudmFyIF9WYWx1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9WYWx1ZSk7XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeVZhbHVlKHZhbHVlKSB7XG5cdHZhciB2YWx1ZVR5cGUgPSB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHZhbHVlKTtcblx0aWYgKHZhbHVlVHlwZSA9PT0gJ3N0cmluZycpIHtcblx0XHRyZXR1cm4gdmFsdWU7XG5cdH0gZWxzZSBpZiAodmFsdWVUeXBlID09PSAnb2JqZWN0Jykge1xuXHRcdHJldHVybiBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG5cdH0gZWxzZSBpZiAodmFsdWVUeXBlID09PSAnbnVtYmVyJyB8fCB2YWx1ZVR5cGUgPT09ICdib29sZWFuJykge1xuXHRcdHJldHVybiBTdHJpbmcodmFsdWUpO1xuXHR9IGVsc2Uge1xuXHRcdHJldHVybiAnJztcblx0fVxufVxuXG52YXIgc3RyaW5nT3JOb2RlID0gX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5vbmVPZlR5cGUoW19wcm9wVHlwZXMyWydkZWZhdWx0J10uc3RyaW5nLCBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm5vZGVdKTtcblxudmFyIGluc3RhbmNlSWQgPSAxO1xuXG52YXIgU2VsZWN0ID0gKDAsIF9jcmVhdGVSZWFjdENsYXNzMlsnZGVmYXVsdCddKSh7XG5cblx0ZGlzcGxheU5hbWU6ICdTZWxlY3QnLFxuXG5cdHByb3BUeXBlczoge1xuXHRcdGFkZExhYmVsVGV4dDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcsIC8vIHBsYWNlaG9sZGVyIGRpc3BsYXllZCB3aGVuIHlvdSB3YW50IHRvIGFkZCBhIGxhYmVsIG9uIGEgbXVsdGktdmFsdWUgaW5wdXRcblx0XHQnYXJpYS1kZXNjcmliZWRieSc6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uc3RyaW5nLCAvLyBIVE1MIElEKHMpIG9mIGVsZW1lbnQocykgdGhhdCBzaG91bGQgYmUgdXNlZCB0byBkZXNjcmliZSB0aGlzIGlucHV0IChmb3IgYXNzaXN0aXZlIHRlY2gpXG5cdFx0J2FyaWEtbGFiZWwnOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnN0cmluZywgLy8gQXJpYSBsYWJlbCAoZm9yIGFzc2lzdGl2ZSB0ZWNoKVxuXHRcdCdhcmlhLWxhYmVsbGVkYnknOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnN0cmluZywgLy8gSFRNTCBJRCBvZiBhbiBlbGVtZW50IHRoYXQgc2hvdWxkIGJlIHVzZWQgYXMgdGhlIGxhYmVsIChmb3IgYXNzaXN0aXZlIHRlY2gpXG5cdFx0YXJyb3dSZW5kZXJlcjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLCAvLyBDcmVhdGUgZHJvcC1kb3duIGNhcmV0IGVsZW1lbnRcblx0XHRhdXRvQmx1cjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLCAvLyBhdXRvbWF0aWNhbGx5IGJsdXIgdGhlIGNvbXBvbmVudCB3aGVuIGFuIG9wdGlvbiBpcyBzZWxlY3RlZFxuXHRcdGF1dG9mb2N1czogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLCAvLyBhdXRvZm9jdXMgdGhlIGNvbXBvbmVudCBvbiBtb3VudFxuXHRcdGF1dG9zaXplOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsIC8vIHdoZXRoZXIgdG8gZW5hYmxlIGF1dG9zaXppbmcgb3Igbm90XG5cdFx0YmFja3NwYWNlUmVtb3ZlczogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLCAvLyB3aGV0aGVyIGJhY2tzcGFjZSByZW1vdmVzIGFuIGl0ZW0gaWYgdGhlcmUgaXMgbm8gdGV4dCBpbnB1dFxuXHRcdGJhY2tzcGFjZVRvUmVtb3ZlTWVzc2FnZTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcsIC8vIE1lc3NhZ2UgdG8gdXNlIGZvciBzY3JlZW5yZWFkZXJzIHRvIHByZXNzIGJhY2tzcGFjZSB0byByZW1vdmUgdGhlIGN1cnJlbnQgaXRlbSAtIHtsYWJlbH0gaXMgcmVwbGFjZWQgd2l0aCB0aGUgaXRlbSBsYWJlbFxuXHRcdGNsYXNzTmFtZTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcsIC8vIGNsYXNzTmFtZSBmb3IgdGhlIG91dGVyIGVsZW1lbnRcblx0XHRjbGVhckFsbFRleHQ6IHN0cmluZ09yTm9kZSwgLy8gdGl0bGUgZm9yIHRoZSBcImNsZWFyXCIgY29udHJvbCB3aGVuIG11bHRpOiB0cnVlXG5cdFx0Y2xlYXJSZW5kZXJlcjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLCAvLyBjcmVhdGUgY2xlYXJhYmxlIHggZWxlbWVudFxuXHRcdGNsZWFyVmFsdWVUZXh0OiBzdHJpbmdPck5vZGUsIC8vIHRpdGxlIGZvciB0aGUgXCJjbGVhclwiIGNvbnRyb2xcblx0XHRjbGVhcmFibGU6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCwgLy8gc2hvdWxkIGl0IGJlIHBvc3NpYmxlIHRvIHJlc2V0IHZhbHVlXG5cdFx0ZGVsZXRlUmVtb3ZlczogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLCAvLyB3aGV0aGVyIGJhY2tzcGFjZSByZW1vdmVzIGFuIGl0ZW0gaWYgdGhlcmUgaXMgbm8gdGV4dCBpbnB1dFxuXHRcdGRlbGltaXRlcjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcsIC8vIGRlbGltaXRlciB0byB1c2UgdG8gam9pbiBtdWx0aXBsZSB2YWx1ZXMgZm9yIHRoZSBoaWRkZW4gZmllbGQgdmFsdWVcblx0XHRkaXNhYmxlZDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLCAvLyB3aGV0aGVyIHRoZSBTZWxlY3QgaXMgZGlzYWJsZWQgb3Igbm90XG5cdFx0ZXNjYXBlQ2xlYXJzVmFsdWU6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCwgLy8gd2hldGhlciBlc2NhcGUgY2xlYXJzIHRoZSB2YWx1ZSB3aGVuIHRoZSBtZW51IGlzIGNsb3NlZFxuXHRcdGZpbHRlck9wdGlvbjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLCAvLyBtZXRob2QgdG8gZmlsdGVyIGEgc2luZ2xlIG9wdGlvbiAob3B0aW9uLCBmaWx0ZXJTdHJpbmcpXG5cdFx0ZmlsdGVyT3B0aW9uczogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5hbnksIC8vIGJvb2xlYW4gdG8gZW5hYmxlIGRlZmF1bHQgZmlsdGVyaW5nIG9yIGZ1bmN0aW9uIHRvIGZpbHRlciB0aGUgb3B0aW9ucyBhcnJheSAoW29wdGlvbnNdLCBmaWx0ZXJTdHJpbmcsIFt2YWx1ZXNdKVxuXHRcdGlnbm9yZUFjY2VudHM6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCwgLy8gd2hldGhlciB0byBzdHJpcCBkaWFjcml0aWNzIHdoZW4gZmlsdGVyaW5nXG5cdFx0aWdub3JlQ2FzZTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLCAvLyB3aGV0aGVyIHRvIHBlcmZvcm0gY2FzZS1pbnNlbnNpdGl2ZSBmaWx0ZXJpbmdcblx0XHRpbnB1dFByb3BzOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm9iamVjdCwgLy8gY3VzdG9tIGF0dHJpYnV0ZXMgZm9yIHRoZSBJbnB1dFxuXHRcdGlucHV0UmVuZGVyZXI6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYywgLy8gcmV0dXJucyBhIGN1c3RvbSBpbnB1dCBjb21wb25lbnRcblx0XHRpbnN0YW5jZUlkOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnN0cmluZywgLy8gc2V0IHRoZSBjb21wb25lbnRzIGluc3RhbmNlSWRcblx0XHRpc0xvYWRpbmc6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCwgLy8gd2hldGhlciB0aGUgU2VsZWN0IGlzIGxvYWRpbmcgZXh0ZXJuYWxseSBvciBub3QgKHN1Y2ggYXMgb3B0aW9ucyBiZWluZyBsb2FkZWQpXG5cdFx0am9pblZhbHVlczogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLCAvLyBqb2lucyBtdWx0aXBsZSB2YWx1ZXMgaW50byBhIHNpbmdsZSBmb3JtIGZpZWxkIHdpdGggdGhlIGRlbGltaXRlciAobGVnYWN5IG1vZGUpXG5cdFx0bGFiZWxLZXk6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uc3RyaW5nLCAvLyBwYXRoIG9mIHRoZSBsYWJlbCB2YWx1ZSBpbiBvcHRpb24gb2JqZWN0c1xuXHRcdG1hdGNoUG9zOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnN0cmluZywgLy8gKGFueXxzdGFydCkgbWF0Y2ggdGhlIHN0YXJ0IG9yIGVudGlyZSBzdHJpbmcgd2hlbiBmaWx0ZXJpbmdcblx0XHRtYXRjaFByb3A6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uc3RyaW5nLCAvLyAoYW55fGxhYmVsfHZhbHVlKSB3aGljaCBvcHRpb24gcHJvcGVydHkgdG8gZmlsdGVyIG9uXG5cdFx0bWVudUJ1ZmZlcjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5udW1iZXIsIC8vIG9wdGlvbmFsIGJ1ZmZlciAoaW4gcHgpIGJldHdlZW4gdGhlIGJvdHRvbSBvZiB0aGUgdmlld3BvcnQgYW5kIHRoZSBib3R0b20gb2YgdGhlIG1lbnVcblx0XHRtZW51Q29udGFpbmVyU3R5bGU6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10ub2JqZWN0LCAvLyBvcHRpb25hbCBzdHlsZSB0byBhcHBseSB0byB0aGUgbWVudSBjb250YWluZXJcblx0XHRtZW51UmVuZGVyZXI6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYywgLy8gcmVuZGVycyBhIGN1c3RvbSBtZW51IHdpdGggb3B0aW9uc1xuXHRcdG1lbnVTdHlsZTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5vYmplY3QsIC8vIG9wdGlvbmFsIHN0eWxlIHRvIGFwcGx5IHRvIHRoZSBtZW51XG5cdFx0bXVsdGk6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCwgLy8gbXVsdGktdmFsdWUgaW5wdXRcblx0XHRuYW1lOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnN0cmluZywgLy8gZ2VuZXJhdGVzIGEgaGlkZGVuIDxpbnB1dCAvPiB0YWcgd2l0aCB0aGlzIGZpZWxkIG5hbWUgZm9yIGh0bWwgZm9ybXNcblx0XHRub1Jlc3VsdHNUZXh0OiBzdHJpbmdPck5vZGUsIC8vIHBsYWNlaG9sZGVyIGRpc3BsYXllZCB3aGVuIHRoZXJlIGFyZSBubyBtYXRjaGluZyBzZWFyY2ggcmVzdWx0c1xuXHRcdG9uQmx1cjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLCAvLyBvbkJsdXIgaGFuZGxlcjogZnVuY3Rpb24gKGV2ZW50KSB7fVxuXHRcdG9uQmx1clJlc2V0c0lucHV0OiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsIC8vIHdoZXRoZXIgaW5wdXQgaXMgY2xlYXJlZCBvbiBibHVyXG5cdFx0b25DaGFuZ2U6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYywgLy8gb25DaGFuZ2UgaGFuZGxlcjogZnVuY3Rpb24gKG5ld1ZhbHVlKSB7fVxuXHRcdG9uQ2xvc2U6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYywgLy8gZmlyZXMgd2hlbiB0aGUgbWVudSBpcyBjbG9zZWRcblx0XHRvbkNsb3NlUmVzZXRzSW5wdXQ6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCwgLy8gd2hldGhlciBpbnB1dCBpcyBjbGVhcmVkIHdoZW4gbWVudSBpcyBjbG9zZWQgdGhyb3VnaCB0aGUgYXJyb3dcblx0XHRvbkZvY3VzOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsIC8vIG9uRm9jdXMgaGFuZGxlcjogZnVuY3Rpb24gKGV2ZW50KSB7fVxuXHRcdG9uSW5wdXRDaGFuZ2U6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYywgLy8gb25JbnB1dENoYW5nZSBoYW5kbGVyOiBmdW5jdGlvbiAoaW5wdXRWYWx1ZSkge31cblx0XHRvbklucHV0S2V5RG93bjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLCAvLyBpbnB1dCBrZXlEb3duIGhhbmRsZXI6IGZ1bmN0aW9uIChldmVudCkge31cblx0XHRvbk1lbnVTY3JvbGxUb0JvdHRvbTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLCAvLyBmaXJlcyB3aGVuIHRoZSBtZW51IGlzIHNjcm9sbGVkIHRvIHRoZSBib3R0b207IGNhbiBiZSB1c2VkIHRvIHBhZ2luYXRlIG9wdGlvbnNcblx0XHRvbk9wZW46IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYywgLy8gZmlyZXMgd2hlbiB0aGUgbWVudSBpcyBvcGVuZWRcblx0XHRvblZhbHVlQ2xpY2s6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYywgLy8gb25DbGljayBoYW5kbGVyIGZvciB2YWx1ZSBsYWJlbHM6IGZ1bmN0aW9uICh2YWx1ZSwgZXZlbnQpIHt9XG5cdFx0b3BlbkFmdGVyRm9jdXM6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCwgLy8gYm9vbGVhbiB0byBlbmFibGUgb3BlbmluZyBkcm9wZG93biB3aGVuIGZvY3VzZWRcblx0XHRvcGVuT25Gb2N1czogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLCAvLyBhbHdheXMgb3BlbiBvcHRpb25zIG1lbnUgb24gZm9jdXNcblx0XHRvcHRpb25DbGFzc05hbWU6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uc3RyaW5nLCAvLyBhZGRpdGlvbmFsIGNsYXNzKGVzKSB0byBhcHBseSB0byB0aGUgPE9wdGlvbiAvPiBlbGVtZW50c1xuXHRcdG9wdGlvbkNvbXBvbmVudDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLCAvLyBvcHRpb24gY29tcG9uZW50IHRvIHJlbmRlciBpbiBkcm9wZG93blxuXHRcdG9wdGlvblJlbmRlcmVyOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsIC8vIG9wdGlvblJlbmRlcmVyOiBmdW5jdGlvbiAob3B0aW9uKSB7fVxuXHRcdG9wdGlvbnM6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYXJyYXksIC8vIGFycmF5IG9mIG9wdGlvbnNcblx0XHRwYWdlU2l6ZTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5udW1iZXIsIC8vIG51bWJlciBvZiBlbnRyaWVzIHRvIHBhZ2Ugd2hlbiB1c2luZyBwYWdlIHVwL2Rvd24ga2V5c1xuXHRcdHBsYWNlaG9sZGVyOiBzdHJpbmdPck5vZGUsIC8vIGZpZWxkIHBsYWNlaG9sZGVyLCBkaXNwbGF5ZWQgd2hlbiB0aGVyZSdzIG5vIHZhbHVlXG5cdFx0cmVxdWlyZWQ6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCwgLy8gYXBwbGllcyBIVE1MNSByZXF1aXJlZCBhdHRyaWJ1dGUgd2hlbiBuZWVkZWRcblx0XHRyZXNldFZhbHVlOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmFueSwgLy8gdmFsdWUgdG8gdXNlIHdoZW4geW91IGNsZWFyIHRoZSBjb250cm9sXG5cdFx0c2Nyb2xsTWVudUludG9WaWV3OiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsIC8vIGJvb2xlYW4gdG8gZW5hYmxlIHRoZSB2aWV3cG9ydCB0byBzaGlmdCBzbyB0aGF0IHRoZSBmdWxsIG1lbnUgZnVsbHkgdmlzaWJsZSB3aGVuIGVuZ2FnZWRcblx0XHRzZWFyY2hhYmxlOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsIC8vIHdoZXRoZXIgdG8gZW5hYmxlIHNlYXJjaGluZyBmZWF0dXJlIG9yIG5vdFxuXHRcdHNpbXBsZVZhbHVlOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsIC8vIHBhc3MgdGhlIHZhbHVlIHRvIG9uQ2hhbmdlIGFzIGEgc2ltcGxlIHZhbHVlIChsZWdhY3kgcHJlIDEuMCBtb2RlKSwgZGVmYXVsdHMgdG8gZmFsc2Vcblx0XHRzdHlsZTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5vYmplY3QsIC8vIG9wdGlvbmFsIHN0eWxlIHRvIGFwcGx5IHRvIHRoZSBjb250cm9sXG5cdFx0dGFiSW5kZXg6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uc3RyaW5nLCAvLyBvcHRpb25hbCB0YWIgaW5kZXggb2YgdGhlIGNvbnRyb2xcblx0XHR0YWJTZWxlY3RzVmFsdWU6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCwgLy8gd2hldGhlciB0byB0cmVhdCB0YWJiaW5nIG91dCB3aGlsZSBmb2N1c2VkIHRvIGJlIHZhbHVlIHNlbGVjdGlvblxuXHRcdHZhbHVlOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmFueSwgLy8gaW5pdGlhbCBmaWVsZCB2YWx1ZVxuXHRcdHZhbHVlQ29tcG9uZW50OiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsIC8vIHZhbHVlIGNvbXBvbmVudCB0byByZW5kZXJcblx0XHR2YWx1ZUtleTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcsIC8vIHBhdGggb2YgdGhlIGxhYmVsIHZhbHVlIGluIG9wdGlvbiBvYmplY3RzXG5cdFx0dmFsdWVSZW5kZXJlcjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLCAvLyB2YWx1ZVJlbmRlcmVyOiBmdW5jdGlvbiAob3B0aW9uKSB7fVxuXHRcdHdyYXBwZXJTdHlsZTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5vYmplY3QgfSxcblxuXHQvLyBvcHRpb25hbCBzdHlsZSB0byBhcHBseSB0byB0aGUgY29tcG9uZW50IHdyYXBwZXJcblx0c3RhdGljczogeyBBc3luYzogX0FzeW5jMlsnZGVmYXVsdCddLCBBc3luY0NyZWF0YWJsZTogX0FzeW5jQ3JlYXRhYmxlMlsnZGVmYXVsdCddLCBDcmVhdGFibGU6IF9DcmVhdGFibGUyWydkZWZhdWx0J10gfSxcblxuXHRnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wcygpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0YWRkTGFiZWxUZXh0OiAnQWRkIFwie2xhYmVsfVwiPycsXG5cdFx0XHRhcnJvd1JlbmRlcmVyOiBfdXRpbHNEZWZhdWx0QXJyb3dSZW5kZXJlcjJbJ2RlZmF1bHQnXSxcblx0XHRcdGF1dG9zaXplOiB0cnVlLFxuXHRcdFx0YmFja3NwYWNlUmVtb3ZlczogdHJ1ZSxcblx0XHRcdGJhY2tzcGFjZVRvUmVtb3ZlTWVzc2FnZTogJ1ByZXNzIGJhY2tzcGFjZSB0byByZW1vdmUge2xhYmVsfScsXG5cdFx0XHRjbGVhcmFibGU6IHRydWUsXG5cdFx0XHRjbGVhckFsbFRleHQ6ICdDbGVhciBhbGwnLFxuXHRcdFx0Y2xlYXJSZW5kZXJlcjogX3V0aWxzRGVmYXVsdENsZWFyUmVuZGVyZXIyWydkZWZhdWx0J10sXG5cdFx0XHRjbGVhclZhbHVlVGV4dDogJ0NsZWFyIHZhbHVlJyxcblx0XHRcdGRlbGV0ZVJlbW92ZXM6IHRydWUsXG5cdFx0XHRkZWxpbWl0ZXI6ICcsJyxcblx0XHRcdGRpc2FibGVkOiBmYWxzZSxcblx0XHRcdGVzY2FwZUNsZWFyc1ZhbHVlOiB0cnVlLFxuXHRcdFx0ZmlsdGVyT3B0aW9uczogX3V0aWxzRGVmYXVsdEZpbHRlck9wdGlvbnMyWydkZWZhdWx0J10sXG5cdFx0XHRpZ25vcmVBY2NlbnRzOiB0cnVlLFxuXHRcdFx0aWdub3JlQ2FzZTogdHJ1ZSxcblx0XHRcdGlucHV0UHJvcHM6IHt9LFxuXHRcdFx0aXNMb2FkaW5nOiBmYWxzZSxcblx0XHRcdGpvaW5WYWx1ZXM6IGZhbHNlLFxuXHRcdFx0bGFiZWxLZXk6ICdsYWJlbCcsXG5cdFx0XHRtYXRjaFBvczogJ2FueScsXG5cdFx0XHRtYXRjaFByb3A6ICdhbnknLFxuXHRcdFx0bWVudUJ1ZmZlcjogMCxcblx0XHRcdG1lbnVSZW5kZXJlcjogX3V0aWxzRGVmYXVsdE1lbnVSZW5kZXJlcjJbJ2RlZmF1bHQnXSxcblx0XHRcdG11bHRpOiBmYWxzZSxcblx0XHRcdG5vUmVzdWx0c1RleHQ6ICdObyByZXN1bHRzIGZvdW5kJyxcblx0XHRcdG9uQmx1clJlc2V0c0lucHV0OiB0cnVlLFxuXHRcdFx0b25DbG9zZVJlc2V0c0lucHV0OiB0cnVlLFxuXHRcdFx0b3B0aW9uQ29tcG9uZW50OiBfT3B0aW9uMlsnZGVmYXVsdCddLFxuXHRcdFx0cGFnZVNpemU6IDUsXG5cdFx0XHRwbGFjZWhvbGRlcjogJ1NlbGVjdC4uLicsXG5cdFx0XHRyZXF1aXJlZDogZmFsc2UsXG5cdFx0XHRzY3JvbGxNZW51SW50b1ZpZXc6IHRydWUsXG5cdFx0XHRzZWFyY2hhYmxlOiB0cnVlLFxuXHRcdFx0c2ltcGxlVmFsdWU6IGZhbHNlLFxuXHRcdFx0dGFiU2VsZWN0c1ZhbHVlOiB0cnVlLFxuXHRcdFx0dmFsdWVDb21wb25lbnQ6IF9WYWx1ZTJbJ2RlZmF1bHQnXSxcblx0XHRcdHZhbHVlS2V5OiAndmFsdWUnXG5cdFx0fTtcblx0fSxcblxuXHRnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0aW5wdXRWYWx1ZTogJycsXG5cdFx0XHRpc0ZvY3VzZWQ6IGZhbHNlLFxuXHRcdFx0aXNPcGVuOiBmYWxzZSxcblx0XHRcdGlzUHNldWRvRm9jdXNlZDogZmFsc2UsXG5cdFx0XHRyZXF1aXJlZDogZmFsc2Vcblx0XHR9O1xuXHR9LFxuXG5cdGNvbXBvbmVudFdpbGxNb3VudDogZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuXHRcdHRoaXMuX2luc3RhbmNlUHJlZml4ID0gJ3JlYWN0LXNlbGVjdC0nICsgKHRoaXMucHJvcHMuaW5zdGFuY2VJZCB8fCArK2luc3RhbmNlSWQpICsgJy0nO1xuXHRcdHZhciB2YWx1ZUFycmF5ID0gdGhpcy5nZXRWYWx1ZUFycmF5KHRoaXMucHJvcHMudmFsdWUpO1xuXG5cdFx0aWYgKHRoaXMucHJvcHMucmVxdWlyZWQpIHtcblx0XHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0XHRyZXF1aXJlZDogdGhpcy5oYW5kbGVSZXF1aXJlZCh2YWx1ZUFycmF5WzBdLCB0aGlzLnByb3BzLm11bHRpKVxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9LFxuXG5cdGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcblx0XHRpZiAodGhpcy5wcm9wcy5hdXRvZm9jdXMpIHtcblx0XHRcdHRoaXMuZm9jdXMoKTtcblx0XHR9XG5cdH0sXG5cblx0Y29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcblx0XHR2YXIgdmFsdWVBcnJheSA9IHRoaXMuZ2V0VmFsdWVBcnJheShuZXh0UHJvcHMudmFsdWUsIG5leHRQcm9wcyk7XG5cblx0XHRpZiAobmV4dFByb3BzLnJlcXVpcmVkKSB7XG5cdFx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdFx0cmVxdWlyZWQ6IHRoaXMuaGFuZGxlUmVxdWlyZWQodmFsdWVBcnJheVswXSwgbmV4dFByb3BzLm11bHRpKVxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9LFxuXG5cdGNvbXBvbmVudFdpbGxVcGRhdGU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcblx0XHRpZiAobmV4dFN0YXRlLmlzT3BlbiAhPT0gdGhpcy5zdGF0ZS5pc09wZW4pIHtcblx0XHRcdHRoaXMudG9nZ2xlVG91Y2hPdXRzaWRlRXZlbnQobmV4dFN0YXRlLmlzT3Blbik7XG5cdFx0XHR2YXIgaGFuZGxlciA9IG5leHRTdGF0ZS5pc09wZW4gPyBuZXh0UHJvcHMub25PcGVuIDogbmV4dFByb3BzLm9uQ2xvc2U7XG5cdFx0XHRoYW5kbGVyICYmIGhhbmRsZXIoKTtcblx0XHR9XG5cdH0sXG5cblx0Y29tcG9uZW50RGlkVXBkYXRlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzLCBwcmV2U3RhdGUpIHtcblx0XHQvLyBmb2N1cyB0byB0aGUgc2VsZWN0ZWQgb3B0aW9uXG5cdFx0aWYgKHRoaXMubWVudSAmJiB0aGlzLmZvY3VzZWQgJiYgdGhpcy5zdGF0ZS5pc09wZW4gJiYgIXRoaXMuaGFzU2Nyb2xsZWRUb09wdGlvbikge1xuXHRcdFx0dmFyIGZvY3VzZWRPcHRpb25Ob2RlID0gX3JlYWN0RG9tMlsnZGVmYXVsdCddLmZpbmRET01Ob2RlKHRoaXMuZm9jdXNlZCk7XG5cdFx0XHR2YXIgbWVudU5vZGUgPSBfcmVhY3REb20yWydkZWZhdWx0J10uZmluZERPTU5vZGUodGhpcy5tZW51KTtcblx0XHRcdG1lbnVOb2RlLnNjcm9sbFRvcCA9IGZvY3VzZWRPcHRpb25Ob2RlLm9mZnNldFRvcDtcblx0XHRcdHRoaXMuaGFzU2Nyb2xsZWRUb09wdGlvbiA9IHRydWU7XG5cdFx0fSBlbHNlIGlmICghdGhpcy5zdGF0ZS5pc09wZW4pIHtcblx0XHRcdHRoaXMuaGFzU2Nyb2xsZWRUb09wdGlvbiA9IGZhbHNlO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLl9zY3JvbGxUb0ZvY3VzZWRPcHRpb25PblVwZGF0ZSAmJiB0aGlzLmZvY3VzZWQgJiYgdGhpcy5tZW51KSB7XG5cdFx0XHR0aGlzLl9zY3JvbGxUb0ZvY3VzZWRPcHRpb25PblVwZGF0ZSA9IGZhbHNlO1xuXHRcdFx0dmFyIGZvY3VzZWRET00gPSBfcmVhY3REb20yWydkZWZhdWx0J10uZmluZERPTU5vZGUodGhpcy5mb2N1c2VkKTtcblx0XHRcdHZhciBtZW51RE9NID0gX3JlYWN0RG9tMlsnZGVmYXVsdCddLmZpbmRET01Ob2RlKHRoaXMubWVudSk7XG5cdFx0XHR2YXIgZm9jdXNlZFJlY3QgPSBmb2N1c2VkRE9NLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdFx0dmFyIG1lbnVSZWN0ID0gbWVudURPTS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHRcdGlmIChmb2N1c2VkUmVjdC5ib3R0b20gPiBtZW51UmVjdC5ib3R0b20gfHwgZm9jdXNlZFJlY3QudG9wIDwgbWVudVJlY3QudG9wKSB7XG5cdFx0XHRcdG1lbnVET00uc2Nyb2xsVG9wID0gZm9jdXNlZERPTS5vZmZzZXRUb3AgKyBmb2N1c2VkRE9NLmNsaWVudEhlaWdodCAtIG1lbnVET00ub2Zmc2V0SGVpZ2h0O1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAodGhpcy5wcm9wcy5zY3JvbGxNZW51SW50b1ZpZXcgJiYgdGhpcy5tZW51Q29udGFpbmVyKSB7XG5cdFx0XHR2YXIgbWVudUNvbnRhaW5lclJlY3QgPSB0aGlzLm1lbnVDb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0XHRpZiAod2luZG93LmlubmVySGVpZ2h0IDwgbWVudUNvbnRhaW5lclJlY3QuYm90dG9tICsgdGhpcy5wcm9wcy5tZW51QnVmZmVyKSB7XG5cdFx0XHRcdHdpbmRvdy5zY3JvbGxCeSgwLCBtZW51Q29udGFpbmVyUmVjdC5ib3R0b20gKyB0aGlzLnByb3BzLm1lbnVCdWZmZXIgLSB3aW5kb3cuaW5uZXJIZWlnaHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAocHJldlByb3BzLmRpc2FibGVkICE9PSB0aGlzLnByb3BzLmRpc2FibGVkKSB7XG5cdFx0XHR0aGlzLnNldFN0YXRlKHsgaXNGb2N1c2VkOiBmYWxzZSB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC9uby1kaWQtdXBkYXRlLXNldC1zdGF0ZVxuXHRcdFx0dGhpcy5jbG9zZU1lbnUoKTtcblx0XHR9XG5cdH0sXG5cblx0Y29tcG9uZW50V2lsbFVubW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuXHRcdGlmICghZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciAmJiBkb2N1bWVudC5kZXRhY2hFdmVudCkge1xuXHRcdFx0ZG9jdW1lbnQuZGV0YWNoRXZlbnQoJ29udG91Y2hzdGFydCcsIHRoaXMuaGFuZGxlVG91Y2hPdXRzaWRlKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMuaGFuZGxlVG91Y2hPdXRzaWRlKTtcblx0XHR9XG5cdH0sXG5cblx0dG9nZ2xlVG91Y2hPdXRzaWRlRXZlbnQ6IGZ1bmN0aW9uIHRvZ2dsZVRvdWNoT3V0c2lkZUV2ZW50KGVuYWJsZWQpIHtcblx0XHRpZiAoZW5hYmxlZCkge1xuXHRcdFx0aWYgKCFkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyICYmIGRvY3VtZW50LmF0dGFjaEV2ZW50KSB7XG5cdFx0XHRcdGRvY3VtZW50LmF0dGFjaEV2ZW50KCdvbnRvdWNoc3RhcnQnLCB0aGlzLmhhbmRsZVRvdWNoT3V0c2lkZSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5oYW5kbGVUb3VjaE91dHNpZGUpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIWRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIgJiYgZG9jdW1lbnQuZGV0YWNoRXZlbnQpIHtcblx0XHRcdFx0ZG9jdW1lbnQuZGV0YWNoRXZlbnQoJ29udG91Y2hzdGFydCcsIHRoaXMuaGFuZGxlVG91Y2hPdXRzaWRlKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLmhhbmRsZVRvdWNoT3V0c2lkZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdGhhbmRsZVRvdWNoT3V0c2lkZTogZnVuY3Rpb24gaGFuZGxlVG91Y2hPdXRzaWRlKGV2ZW50KSB7XG5cdFx0Ly8gaGFuZGxlIHRvdWNoIG91dHNpZGUgb24gaW9zIHRvIGRpc21pc3MgbWVudVxuXHRcdGlmICh0aGlzLndyYXBwZXIgJiYgIXRoaXMud3JhcHBlci5jb250YWlucyhldmVudC50YXJnZXQpKSB7XG5cdFx0XHR0aGlzLmNsb3NlTWVudSgpO1xuXHRcdH1cblx0fSxcblxuXHRmb2N1czogZnVuY3Rpb24gZm9jdXMoKSB7XG5cdFx0aWYgKCF0aGlzLmlucHV0KSByZXR1cm47XG5cdFx0dGhpcy5pbnB1dC5mb2N1cygpO1xuXHR9LFxuXG5cdGJsdXJJbnB1dDogZnVuY3Rpb24gYmx1cklucHV0KCkge1xuXHRcdGlmICghdGhpcy5pbnB1dCkgcmV0dXJuO1xuXHRcdHRoaXMuaW5wdXQuYmx1cigpO1xuXHR9LFxuXG5cdGhhbmRsZVRvdWNoTW92ZTogZnVuY3Rpb24gaGFuZGxlVG91Y2hNb3ZlKGV2ZW50KSB7XG5cdFx0Ly8gU2V0IGEgZmxhZyB0aGF0IHRoZSB2aWV3IGlzIGJlaW5nIGRyYWdnZWRcblx0XHR0aGlzLmRyYWdnaW5nID0gdHJ1ZTtcblx0fSxcblxuXHRoYW5kbGVUb3VjaFN0YXJ0OiBmdW5jdGlvbiBoYW5kbGVUb3VjaFN0YXJ0KGV2ZW50KSB7XG5cdFx0Ly8gU2V0IGEgZmxhZyB0aGF0IHRoZSB2aWV3IGlzIG5vdCBiZWluZyBkcmFnZ2VkXG5cdFx0dGhpcy5kcmFnZ2luZyA9IGZhbHNlO1xuXHR9LFxuXG5cdGhhbmRsZVRvdWNoRW5kOiBmdW5jdGlvbiBoYW5kbGVUb3VjaEVuZChldmVudCkge1xuXHRcdC8vIENoZWNrIGlmIHRoZSB2aWV3IGlzIGJlaW5nIGRyYWdnZWQsIEluIHRoaXMgY2FzZVxuXHRcdC8vIHdlIGRvbid0IHdhbnQgdG8gZmlyZSB0aGUgY2xpY2sgZXZlbnQgKGJlY2F1c2UgdGhlIHVzZXIgb25seSB3YW50cyB0byBzY3JvbGwpXG5cdFx0aWYgKHRoaXMuZHJhZ2dpbmcpIHJldHVybjtcblxuXHRcdC8vIEZpcmUgdGhlIG1vdXNlIGV2ZW50c1xuXHRcdHRoaXMuaGFuZGxlTW91c2VEb3duKGV2ZW50KTtcblx0fSxcblxuXHRoYW5kbGVUb3VjaEVuZENsZWFyVmFsdWU6IGZ1bmN0aW9uIGhhbmRsZVRvdWNoRW5kQ2xlYXJWYWx1ZShldmVudCkge1xuXHRcdC8vIENoZWNrIGlmIHRoZSB2aWV3IGlzIGJlaW5nIGRyYWdnZWQsIEluIHRoaXMgY2FzZVxuXHRcdC8vIHdlIGRvbid0IHdhbnQgdG8gZmlyZSB0aGUgY2xpY2sgZXZlbnQgKGJlY2F1c2UgdGhlIHVzZXIgb25seSB3YW50cyB0byBzY3JvbGwpXG5cdFx0aWYgKHRoaXMuZHJhZ2dpbmcpIHJldHVybjtcblxuXHRcdC8vIENsZWFyIHRoZSB2YWx1ZVxuXHRcdHRoaXMuY2xlYXJWYWx1ZShldmVudCk7XG5cdH0sXG5cblx0aGFuZGxlTW91c2VEb3duOiBmdW5jdGlvbiBoYW5kbGVNb3VzZURvd24oZXZlbnQpIHtcblx0XHQvLyBpZiB0aGUgZXZlbnQgd2FzIHRyaWdnZXJlZCBieSBhIG1vdXNlZG93biBhbmQgbm90IHRoZSBwcmltYXJ5XG5cdFx0Ly8gYnV0dG9uLCBvciBpZiB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLCBpZ25vcmUgaXQuXG5cdFx0aWYgKHRoaXMucHJvcHMuZGlzYWJsZWQgfHwgZXZlbnQudHlwZSA9PT0gJ21vdXNlZG93bicgJiYgZXZlbnQuYnV0dG9uICE9PSAwKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKGV2ZW50LnRhcmdldC50YWdOYW1lID09PSAnSU5QVVQnKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gcHJldmVudCBkZWZhdWx0IGV2ZW50IGhhbmRsZXJzXG5cdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHRcdC8vIGZvciB0aGUgbm9uLXNlYXJjaGFibGUgc2VsZWN0LCB0b2dnbGUgdGhlIG1lbnVcblx0XHRpZiAoIXRoaXMucHJvcHMuc2VhcmNoYWJsZSkge1xuXHRcdFx0dGhpcy5mb2N1cygpO1xuXHRcdFx0cmV0dXJuIHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0XHRpc09wZW46ICF0aGlzLnN0YXRlLmlzT3BlblxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuc3RhdGUuaXNGb2N1c2VkKSB7XG5cdFx0XHQvLyBPbiBpT1MsIHdlIGNhbiBnZXQgaW50byBhIHN0YXRlIHdoZXJlIHdlIHRoaW5rIHRoZSBpbnB1dCBpcyBmb2N1c2VkIGJ1dCBpdCBpc24ndCByZWFsbHksXG5cdFx0XHQvLyBzaW5jZSBpT1MgaWdub3JlcyBwcm9ncmFtbWF0aWMgY2FsbHMgdG8gaW5wdXQuZm9jdXMoKSB0aGF0IHdlcmVuJ3QgdHJpZ2dlcmVkIGJ5IGEgY2xpY2sgZXZlbnQuXG5cdFx0XHQvLyBDYWxsIGZvY3VzKCkgYWdhaW4gaGVyZSB0byBiZSBzYWZlLlxuXHRcdFx0dGhpcy5mb2N1cygpO1xuXG5cdFx0XHR2YXIgaW5wdXQgPSB0aGlzLmlucHV0O1xuXHRcdFx0aWYgKHR5cGVvZiBpbnB1dC5nZXRJbnB1dCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHQvLyBHZXQgdGhlIGFjdHVhbCBET00gaW5wdXQgaWYgdGhlIHJlZiBpcyBhbiA8QXV0b3NpemVJbnB1dCAvPiBjb21wb25lbnRcblx0XHRcdFx0aW5wdXQgPSBpbnB1dC5nZXRJbnB1dCgpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBjbGVhcnMgdGhlIHZhbHVlIHNvIHRoYXQgdGhlIGN1cnNvciB3aWxsIGJlIGF0IHRoZSBlbmQgb2YgaW5wdXQgd2hlbiB0aGUgY29tcG9uZW50IHJlLXJlbmRlcnNcblx0XHRcdGlucHV0LnZhbHVlID0gJyc7XG5cblx0XHRcdC8vIGlmIHRoZSBpbnB1dCBpcyBmb2N1c2VkLCBlbnN1cmUgdGhlIG1lbnUgaXMgb3BlblxuXHRcdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRcdGlzT3BlbjogdHJ1ZSxcblx0XHRcdFx0aXNQc2V1ZG9Gb2N1c2VkOiBmYWxzZVxuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIG90aGVyd2lzZSwgZm9jdXMgdGhlIGlucHV0IGFuZCBvcGVuIHRoZSBtZW51XG5cdFx0XHR0aGlzLl9vcGVuQWZ0ZXJGb2N1cyA9IHRydWU7XG5cdFx0XHR0aGlzLmZvY3VzKCk7XG5cdFx0fVxuXHR9LFxuXG5cdGhhbmRsZU1vdXNlRG93bk9uQXJyb3c6IGZ1bmN0aW9uIGhhbmRsZU1vdXNlRG93bk9uQXJyb3coZXZlbnQpIHtcblx0XHQvLyBpZiB0aGUgZXZlbnQgd2FzIHRyaWdnZXJlZCBieSBhIG1vdXNlZG93biBhbmQgbm90IHRoZSBwcmltYXJ5XG5cdFx0Ly8gYnV0dG9uLCBvciBpZiB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLCBpZ25vcmUgaXQuXG5cdFx0aWYgKHRoaXMucHJvcHMuZGlzYWJsZWQgfHwgZXZlbnQudHlwZSA9PT0gJ21vdXNlZG93bicgJiYgZXZlbnQuYnV0dG9uICE9PSAwKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdC8vIElmIHRoZSBtZW51IGlzbid0IG9wZW4sIGxldCB0aGUgZXZlbnQgYnViYmxlIHRvIHRoZSBtYWluIGhhbmRsZU1vdXNlRG93blxuXHRcdGlmICghdGhpcy5zdGF0ZS5pc09wZW4pIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Ly8gcHJldmVudCBkZWZhdWx0IGV2ZW50IGhhbmRsZXJzXG5cdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHQvLyBjbG9zZSB0aGUgbWVudVxuXHRcdHRoaXMuY2xvc2VNZW51KCk7XG5cdH0sXG5cblx0aGFuZGxlTW91c2VEb3duT25NZW51OiBmdW5jdGlvbiBoYW5kbGVNb3VzZURvd25Pbk1lbnUoZXZlbnQpIHtcblx0XHQvLyBpZiB0aGUgZXZlbnQgd2FzIHRyaWdnZXJlZCBieSBhIG1vdXNlZG93biBhbmQgbm90IHRoZSBwcmltYXJ5XG5cdFx0Ly8gYnV0dG9uLCBvciBpZiB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLCBpZ25vcmUgaXQuXG5cdFx0aWYgKHRoaXMucHJvcHMuZGlzYWJsZWQgfHwgZXZlbnQudHlwZSA9PT0gJ21vdXNlZG93bicgJiYgZXZlbnQuYnV0dG9uICE9PSAwKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHR0aGlzLl9vcGVuQWZ0ZXJGb2N1cyA9IHRydWU7XG5cdFx0dGhpcy5mb2N1cygpO1xuXHR9LFxuXG5cdGNsb3NlTWVudTogZnVuY3Rpb24gY2xvc2VNZW51KCkge1xuXHRcdGlmICh0aGlzLnByb3BzLm9uQ2xvc2VSZXNldHNJbnB1dCkge1xuXHRcdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRcdGlzT3BlbjogZmFsc2UsXG5cdFx0XHRcdGlzUHNldWRvRm9jdXNlZDogdGhpcy5zdGF0ZS5pc0ZvY3VzZWQgJiYgIXRoaXMucHJvcHMubXVsdGksXG5cdFx0XHRcdGlucHV0VmFsdWU6ICcnXG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRcdGlzT3BlbjogZmFsc2UsXG5cdFx0XHRcdGlzUHNldWRvRm9jdXNlZDogdGhpcy5zdGF0ZS5pc0ZvY3VzZWQgJiYgIXRoaXMucHJvcHMubXVsdGksXG5cdFx0XHRcdGlucHV0VmFsdWU6IHRoaXMuc3RhdGUuaW5wdXRWYWx1ZVxuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdHRoaXMuaGFzU2Nyb2xsZWRUb09wdGlvbiA9IGZhbHNlO1xuXHR9LFxuXG5cdGhhbmRsZUlucHV0Rm9jdXM6IGZ1bmN0aW9uIGhhbmRsZUlucHV0Rm9jdXMoZXZlbnQpIHtcblx0XHRpZiAodGhpcy5wcm9wcy5kaXNhYmxlZCkgcmV0dXJuO1xuXHRcdHZhciBpc09wZW4gPSB0aGlzLnN0YXRlLmlzT3BlbiB8fCB0aGlzLl9vcGVuQWZ0ZXJGb2N1cyB8fCB0aGlzLnByb3BzLm9wZW5PbkZvY3VzO1xuXHRcdGlmICh0aGlzLnByb3BzLm9uRm9jdXMpIHtcblx0XHRcdHRoaXMucHJvcHMub25Gb2N1cyhldmVudCk7XG5cdFx0fVxuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0aXNGb2N1c2VkOiB0cnVlLFxuXHRcdFx0aXNPcGVuOiBpc09wZW5cblx0XHR9KTtcblx0XHR0aGlzLl9vcGVuQWZ0ZXJGb2N1cyA9IGZhbHNlO1xuXHR9LFxuXG5cdGhhbmRsZUlucHV0Qmx1cjogZnVuY3Rpb24gaGFuZGxlSW5wdXRCbHVyKGV2ZW50KSB7XG5cdFx0Ly8gVGhlIGNoZWNrIGZvciBtZW51LmNvbnRhaW5zKGFjdGl2ZUVsZW1lbnQpIGlzIG5lY2Vzc2FyeSB0byBwcmV2ZW50IElFMTEncyBzY3JvbGxiYXIgZnJvbSBjbG9zaW5nIHRoZSBtZW51IGluIGNlcnRhaW4gY29udGV4dHMuXG5cdFx0aWYgKHRoaXMubWVudSAmJiAodGhpcy5tZW51ID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50IHx8IHRoaXMubWVudS5jb250YWlucyhkb2N1bWVudC5hY3RpdmVFbGVtZW50KSkpIHtcblx0XHRcdHRoaXMuZm9jdXMoKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5wcm9wcy5vbkJsdXIpIHtcblx0XHRcdHRoaXMucHJvcHMub25CbHVyKGV2ZW50KTtcblx0XHR9XG5cdFx0dmFyIG9uQmx1cnJlZFN0YXRlID0ge1xuXHRcdFx0aXNGb2N1c2VkOiBmYWxzZSxcblx0XHRcdGlzT3BlbjogZmFsc2UsXG5cdFx0XHRpc1BzZXVkb0ZvY3VzZWQ6IGZhbHNlXG5cdFx0fTtcblx0XHRpZiAodGhpcy5wcm9wcy5vbkJsdXJSZXNldHNJbnB1dCkge1xuXHRcdFx0b25CbHVycmVkU3RhdGUuaW5wdXRWYWx1ZSA9ICcnO1xuXHRcdH1cblx0XHR0aGlzLnNldFN0YXRlKG9uQmx1cnJlZFN0YXRlKTtcblx0fSxcblxuXHRoYW5kbGVJbnB1dENoYW5nZTogZnVuY3Rpb24gaGFuZGxlSW5wdXRDaGFuZ2UoZXZlbnQpIHtcblx0XHR2YXIgbmV3SW5wdXRWYWx1ZSA9IGV2ZW50LnRhcmdldC52YWx1ZTtcblxuXHRcdGlmICh0aGlzLnN0YXRlLmlucHV0VmFsdWUgIT09IGV2ZW50LnRhcmdldC52YWx1ZSAmJiB0aGlzLnByb3BzLm9uSW5wdXRDaGFuZ2UpIHtcblx0XHRcdHZhciBuZXh0U3RhdGUgPSB0aGlzLnByb3BzLm9uSW5wdXRDaGFuZ2UobmV3SW5wdXRWYWx1ZSk7XG5cdFx0XHQvLyBOb3RlOiAhPSB1c2VkIGRlbGliZXJhdGVseSBoZXJlIHRvIGNhdGNoIHVuZGVmaW5lZCBhbmQgbnVsbFxuXHRcdFx0aWYgKG5leHRTdGF0ZSAhPSBudWxsICYmICh0eXBlb2YgbmV4dFN0YXRlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihuZXh0U3RhdGUpKSAhPT0gJ29iamVjdCcpIHtcblx0XHRcdFx0bmV3SW5wdXRWYWx1ZSA9ICcnICsgbmV4dFN0YXRlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0aXNPcGVuOiB0cnVlLFxuXHRcdFx0aXNQc2V1ZG9Gb2N1c2VkOiBmYWxzZSxcblx0XHRcdGlucHV0VmFsdWU6IG5ld0lucHV0VmFsdWVcblx0XHR9KTtcblx0fSxcblxuXHRoYW5kbGVLZXlEb3duOiBmdW5jdGlvbiBoYW5kbGVLZXlEb3duKGV2ZW50KSB7XG5cdFx0aWYgKHRoaXMucHJvcHMuZGlzYWJsZWQpIHJldHVybjtcblxuXHRcdGlmICh0eXBlb2YgdGhpcy5wcm9wcy5vbklucHV0S2V5RG93biA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0dGhpcy5wcm9wcy5vbklucHV0S2V5RG93bihldmVudCk7XG5cdFx0XHRpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0c3dpdGNoIChldmVudC5rZXlDb2RlKSB7XG5cdFx0XHRjYXNlIDg6XG5cdFx0XHRcdC8vIGJhY2tzcGFjZVxuXHRcdFx0XHRpZiAoIXRoaXMuc3RhdGUuaW5wdXRWYWx1ZSAmJiB0aGlzLnByb3BzLmJhY2tzcGFjZVJlbW92ZXMpIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdHRoaXMucG9wVmFsdWUoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHRjYXNlIDk6XG5cdFx0XHRcdC8vIHRhYlxuXHRcdFx0XHRpZiAoZXZlbnQuc2hpZnRLZXkgfHwgIXRoaXMuc3RhdGUuaXNPcGVuIHx8ICF0aGlzLnByb3BzLnRhYlNlbGVjdHNWYWx1ZSkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLnNlbGVjdEZvY3VzZWRPcHRpb24oKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0Y2FzZSAxMzpcblx0XHRcdFx0Ly8gZW50ZXJcblx0XHRcdFx0aWYgKCF0aGlzLnN0YXRlLmlzT3BlbikgcmV0dXJuO1xuXHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0dGhpcy5zZWxlY3RGb2N1c2VkT3B0aW9uKCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAyNzpcblx0XHRcdFx0Ly8gZXNjYXBlXG5cdFx0XHRcdGlmICh0aGlzLnN0YXRlLmlzT3Blbikge1xuXHRcdFx0XHRcdHRoaXMuY2xvc2VNZW51KCk7XG5cdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdH0gZWxzZSBpZiAodGhpcy5wcm9wcy5jbGVhcmFibGUgJiYgdGhpcy5wcm9wcy5lc2NhcGVDbGVhcnNWYWx1ZSkge1xuXHRcdFx0XHRcdHRoaXMuY2xlYXJWYWx1ZShldmVudCk7XG5cdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIDM4OlxuXHRcdFx0XHQvLyB1cFxuXHRcdFx0XHR0aGlzLmZvY3VzUHJldmlvdXNPcHRpb24oKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIDQwOlxuXHRcdFx0XHQvLyBkb3duXG5cdFx0XHRcdHRoaXMuZm9jdXNOZXh0T3B0aW9uKCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAzMzpcblx0XHRcdFx0Ly8gcGFnZSB1cFxuXHRcdFx0XHR0aGlzLmZvY3VzUGFnZVVwT3B0aW9uKCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAzNDpcblx0XHRcdFx0Ly8gcGFnZSBkb3duXG5cdFx0XHRcdHRoaXMuZm9jdXNQYWdlRG93bk9wdGlvbigpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgMzU6XG5cdFx0XHRcdC8vIGVuZCBrZXlcblx0XHRcdFx0aWYgKGV2ZW50LnNoaWZ0S2V5KSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuZm9jdXNFbmRPcHRpb24oKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIDM2OlxuXHRcdFx0XHQvLyBob21lIGtleVxuXHRcdFx0XHRpZiAoZXZlbnQuc2hpZnRLZXkpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5mb2N1c1N0YXJ0T3B0aW9uKCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSA0Njpcblx0XHRcdFx0Ly8gYmFja3NwYWNlXG5cdFx0XHRcdGlmICghdGhpcy5zdGF0ZS5pbnB1dFZhbHVlICYmIHRoaXMucHJvcHMuZGVsZXRlUmVtb3Zlcykge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0dGhpcy5wb3BWYWx1ZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0fSxcblxuXHRoYW5kbGVWYWx1ZUNsaWNrOiBmdW5jdGlvbiBoYW5kbGVWYWx1ZUNsaWNrKG9wdGlvbiwgZXZlbnQpIHtcblx0XHRpZiAoIXRoaXMucHJvcHMub25WYWx1ZUNsaWNrKSByZXR1cm47XG5cdFx0dGhpcy5wcm9wcy5vblZhbHVlQ2xpY2sob3B0aW9uLCBldmVudCk7XG5cdH0sXG5cblx0aGFuZGxlTWVudVNjcm9sbDogZnVuY3Rpb24gaGFuZGxlTWVudVNjcm9sbChldmVudCkge1xuXHRcdGlmICghdGhpcy5wcm9wcy5vbk1lbnVTY3JvbGxUb0JvdHRvbSkgcmV0dXJuO1xuXHRcdHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG5cblx0XHRpZiAodGFyZ2V0LnNjcm9sbEhlaWdodCA+IHRhcmdldC5vZmZzZXRIZWlnaHQgJiYgISh0YXJnZXQuc2Nyb2xsSGVpZ2h0IC0gdGFyZ2V0Lm9mZnNldEhlaWdodCAtIHRhcmdldC5zY3JvbGxUb3ApKSB7XG5cdFx0XHR0aGlzLnByb3BzLm9uTWVudVNjcm9sbFRvQm90dG9tKCk7XG5cdFx0fVxuXHR9LFxuXG5cdGhhbmRsZVJlcXVpcmVkOiBmdW5jdGlvbiBoYW5kbGVSZXF1aXJlZCh2YWx1ZSwgbXVsdGkpIHtcblx0XHRpZiAoIXZhbHVlKSByZXR1cm4gdHJ1ZTtcblx0XHRyZXR1cm4gbXVsdGkgPyB2YWx1ZS5sZW5ndGggPT09IDAgOiBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoID09PSAwO1xuXHR9LFxuXG5cdGdldE9wdGlvbkxhYmVsOiBmdW5jdGlvbiBnZXRPcHRpb25MYWJlbChvcCkge1xuXHRcdHJldHVybiBvcFt0aGlzLnByb3BzLmxhYmVsS2V5XTtcblx0fSxcblxuXHQvKipcbiAgKiBUdXJucyBhIHZhbHVlIGludG8gYW4gYXJyYXkgZnJvbSB0aGUgZ2l2ZW4gb3B0aW9uc1xuICAqIEBwYXJhbVx0e1N0cmluZ3xOdW1iZXJ8QXJyYXl9XHR2YWx1ZVx0XHQtIHRoZSB2YWx1ZSBvZiB0aGUgc2VsZWN0IGlucHV0XG4gICogQHBhcmFtXHR7T2JqZWN0fVx0XHRuZXh0UHJvcHNcdC0gb3B0aW9uYWxseSBzcGVjaWZ5IHRoZSBuZXh0UHJvcHMgc28gdGhlIHJldHVybmVkIGFycmF5IHVzZXMgdGhlIGxhdGVzdCBjb25maWd1cmF0aW9uXG4gICogQHJldHVybnNcdHtBcnJheX1cdHRoZSB2YWx1ZSBvZiB0aGUgc2VsZWN0IHJlcHJlc2VudGVkIGluIGFuIGFycmF5XG4gICovXG5cdGdldFZhbHVlQXJyYXk6IGZ1bmN0aW9uIGdldFZhbHVlQXJyYXkodmFsdWUsIG5leHRQcm9wcykge1xuXHRcdHZhciBfdGhpcyA9IHRoaXM7XG5cblx0XHQvKiogc3VwcG9ydCBvcHRpb25hbGx5IHBhc3NpbmcgaW4gdGhlIGBuZXh0UHJvcHNgIHNvIGBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzYCB1cGRhdGVzIHdpbGwgZnVuY3Rpb24gYXMgZXhwZWN0ZWQgKi9cblx0XHR2YXIgcHJvcHMgPSAodHlwZW9mIG5leHRQcm9wcyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YobmV4dFByb3BzKSkgPT09ICdvYmplY3QnID8gbmV4dFByb3BzIDogdGhpcy5wcm9wcztcblx0XHRpZiAocHJvcHMubXVsdGkpIHtcblx0XHRcdGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB2YWx1ZSA9IHZhbHVlLnNwbGl0KHByb3BzLmRlbGltaXRlcik7XG5cdFx0XHRpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG5cdFx0XHRcdGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gW107XG5cdFx0XHRcdHZhbHVlID0gW3ZhbHVlXTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB2YWx1ZS5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0XHRcdHJldHVybiBfdGhpcy5leHBhbmRWYWx1ZSh2YWx1ZSwgcHJvcHMpO1xuXHRcdFx0fSkuZmlsdGVyKGZ1bmN0aW9uIChpKSB7XG5cdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdHZhciBleHBhbmRlZFZhbHVlID0gdGhpcy5leHBhbmRWYWx1ZSh2YWx1ZSwgcHJvcHMpO1xuXHRcdHJldHVybiBleHBhbmRlZFZhbHVlID8gW2V4cGFuZGVkVmFsdWVdIDogW107XG5cdH0sXG5cblx0LyoqXG4gICogUmV0cmlldmUgYSB2YWx1ZSBmcm9tIHRoZSBnaXZlbiBvcHRpb25zIGFuZCB2YWx1ZUtleVxuICAqIEBwYXJhbVx0e1N0cmluZ3xOdW1iZXJ8QXJyYXl9XHR2YWx1ZVx0LSB0aGUgc2VsZWN0ZWQgdmFsdWUocylcbiAgKiBAcGFyYW1cdHtPYmplY3R9XHRcdHByb3BzXHQtIHRoZSBTZWxlY3QgY29tcG9uZW50J3MgcHJvcHMgKG9yIG5leHRQcm9wcylcbiAgKi9cblx0ZXhwYW5kVmFsdWU6IGZ1bmN0aW9uIGV4cGFuZFZhbHVlKHZhbHVlLCBwcm9wcykge1xuXHRcdHZhciB2YWx1ZVR5cGUgPSB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHZhbHVlKTtcblx0XHRpZiAodmFsdWVUeXBlICE9PSAnc3RyaW5nJyAmJiB2YWx1ZVR5cGUgIT09ICdudW1iZXInICYmIHZhbHVlVHlwZSAhPT0gJ2Jvb2xlYW4nKSByZXR1cm4gdmFsdWU7XG5cdFx0dmFyIG9wdGlvbnMgPSBwcm9wcy5vcHRpb25zO1xuXHRcdHZhciB2YWx1ZUtleSA9IHByb3BzLnZhbHVlS2V5O1xuXG5cdFx0aWYgKCFvcHRpb25zKSByZXR1cm47XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBvcHRpb25zLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRpZiAob3B0aW9uc1tpXVt2YWx1ZUtleV0gPT09IHZhbHVlKSByZXR1cm4gb3B0aW9uc1tpXTtcblx0XHR9XG5cdH0sXG5cblx0c2V0VmFsdWU6IGZ1bmN0aW9uIHNldFZhbHVlKHZhbHVlKSB7XG5cdFx0dmFyIF90aGlzMiA9IHRoaXM7XG5cblx0XHRpZiAodGhpcy5wcm9wcy5hdXRvQmx1cikge1xuXHRcdFx0dGhpcy5ibHVySW5wdXQoKTtcblx0XHR9XG5cdFx0aWYgKCF0aGlzLnByb3BzLm9uQ2hhbmdlKSByZXR1cm47XG5cdFx0aWYgKHRoaXMucHJvcHMucmVxdWlyZWQpIHtcblx0XHRcdHZhciByZXF1aXJlZCA9IHRoaXMuaGFuZGxlUmVxdWlyZWQodmFsdWUsIHRoaXMucHJvcHMubXVsdGkpO1xuXHRcdFx0dGhpcy5zZXRTdGF0ZSh7IHJlcXVpcmVkOiByZXF1aXJlZCB9KTtcblx0XHR9XG5cdFx0aWYgKHRoaXMucHJvcHMuc2ltcGxlVmFsdWUgJiYgdmFsdWUpIHtcblx0XHRcdHZhbHVlID0gdGhpcy5wcm9wcy5tdWx0aSA/IHZhbHVlLm1hcChmdW5jdGlvbiAoaSkge1xuXHRcdFx0XHRyZXR1cm4gaVtfdGhpczIucHJvcHMudmFsdWVLZXldO1xuXHRcdFx0fSkuam9pbih0aGlzLnByb3BzLmRlbGltaXRlcikgOiB2YWx1ZVt0aGlzLnByb3BzLnZhbHVlS2V5XTtcblx0XHR9XG5cdFx0dGhpcy5wcm9wcy5vbkNoYW5nZSh2YWx1ZSk7XG5cdH0sXG5cblx0c2VsZWN0VmFsdWU6IGZ1bmN0aW9uIHNlbGVjdFZhbHVlKHZhbHVlKSB7XG5cdFx0dmFyIF90aGlzMyA9IHRoaXM7XG5cblx0XHQvL05PVEU6IHVwZGF0ZSB2YWx1ZSBpbiB0aGUgY2FsbGJhY2sgdG8gbWFrZSBzdXJlIHRoZSBpbnB1dCB2YWx1ZSBpcyBlbXB0eSBzbyB0aGF0IHRoZXJlIGFyZSBubyBzdHlsaW5nIGlzc3VlcyAoQ2hyb21lIGhhZCBpc3N1ZSBvdGhlcndpc2UpXG5cdFx0dGhpcy5oYXNTY3JvbGxlZFRvT3B0aW9uID0gZmFsc2U7XG5cdFx0aWYgKHRoaXMucHJvcHMubXVsdGkpIHtcblx0XHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0XHRpbnB1dFZhbHVlOiAnJyxcblx0XHRcdFx0Zm9jdXNlZEluZGV4OiBudWxsXG5cdFx0XHR9LCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdF90aGlzMy5hZGRWYWx1ZSh2YWx1ZSk7XG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRcdGlzT3BlbjogZmFsc2UsXG5cdFx0XHRcdGlucHV0VmFsdWU6ICcnLFxuXHRcdFx0XHRpc1BzZXVkb0ZvY3VzZWQ6IHRoaXMuc3RhdGUuaXNGb2N1c2VkXG5cdFx0XHR9LCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdF90aGlzMy5zZXRWYWx1ZSh2YWx1ZSk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH0sXG5cblx0YWRkVmFsdWU6IGZ1bmN0aW9uIGFkZFZhbHVlKHZhbHVlKSB7XG5cdFx0dmFyIHZhbHVlQXJyYXkgPSB0aGlzLmdldFZhbHVlQXJyYXkodGhpcy5wcm9wcy52YWx1ZSk7XG5cdFx0dmFyIHZpc2libGVPcHRpb25zID0gdGhpcy5fdmlzaWJsZU9wdGlvbnMuZmlsdGVyKGZ1bmN0aW9uICh2YWwpIHtcblx0XHRcdHJldHVybiAhdmFsLmRpc2FibGVkO1xuXHRcdH0pO1xuXHRcdHZhciBsYXN0VmFsdWVJbmRleCA9IHZpc2libGVPcHRpb25zLmluZGV4T2YodmFsdWUpO1xuXHRcdHRoaXMuc2V0VmFsdWUodmFsdWVBcnJheS5jb25jYXQodmFsdWUpKTtcblx0XHRpZiAodmlzaWJsZU9wdGlvbnMubGVuZ3RoIC0gMSA9PT0gbGFzdFZhbHVlSW5kZXgpIHtcblx0XHRcdC8vIHRoZSBsYXN0IG9wdGlvbiB3YXMgc2VsZWN0ZWQ7IGZvY3VzIHRoZSBzZWNvbmQtbGFzdCBvbmVcblx0XHRcdHRoaXMuZm9jdXNPcHRpb24odmlzaWJsZU9wdGlvbnNbbGFzdFZhbHVlSW5kZXggLSAxXSk7XG5cdFx0fSBlbHNlIGlmICh2aXNpYmxlT3B0aW9ucy5sZW5ndGggPiBsYXN0VmFsdWVJbmRleCkge1xuXHRcdFx0Ly8gZm9jdXMgdGhlIG9wdGlvbiBiZWxvdyB0aGUgc2VsZWN0ZWQgb25lXG5cdFx0XHR0aGlzLmZvY3VzT3B0aW9uKHZpc2libGVPcHRpb25zW2xhc3RWYWx1ZUluZGV4ICsgMV0pO1xuXHRcdH1cblx0fSxcblxuXHRwb3BWYWx1ZTogZnVuY3Rpb24gcG9wVmFsdWUoKSB7XG5cdFx0dmFyIHZhbHVlQXJyYXkgPSB0aGlzLmdldFZhbHVlQXJyYXkodGhpcy5wcm9wcy52YWx1ZSk7XG5cdFx0aWYgKCF2YWx1ZUFycmF5Lmxlbmd0aCkgcmV0dXJuO1xuXHRcdGlmICh2YWx1ZUFycmF5W3ZhbHVlQXJyYXkubGVuZ3RoIC0gMV0uY2xlYXJhYmxlVmFsdWUgPT09IGZhbHNlKSByZXR1cm47XG5cdFx0dGhpcy5zZXRWYWx1ZSh2YWx1ZUFycmF5LnNsaWNlKDAsIHZhbHVlQXJyYXkubGVuZ3RoIC0gMSkpO1xuXHR9LFxuXG5cdHJlbW92ZVZhbHVlOiBmdW5jdGlvbiByZW1vdmVWYWx1ZSh2YWx1ZSkge1xuXHRcdHZhciB2YWx1ZUFycmF5ID0gdGhpcy5nZXRWYWx1ZUFycmF5KHRoaXMucHJvcHMudmFsdWUpO1xuXHRcdHRoaXMuc2V0VmFsdWUodmFsdWVBcnJheS5maWx0ZXIoZnVuY3Rpb24gKGkpIHtcblx0XHRcdHJldHVybiBpICE9PSB2YWx1ZTtcblx0XHR9KSk7XG5cdFx0dGhpcy5mb2N1cygpO1xuXHR9LFxuXG5cdGNsZWFyVmFsdWU6IGZ1bmN0aW9uIGNsZWFyVmFsdWUoZXZlbnQpIHtcblx0XHQvLyBpZiB0aGUgZXZlbnQgd2FzIHRyaWdnZXJlZCBieSBhIG1vdXNlZG93biBhbmQgbm90IHRoZSBwcmltYXJ5XG5cdFx0Ly8gYnV0dG9uLCBpZ25vcmUgaXQuXG5cdFx0aWYgKGV2ZW50ICYmIGV2ZW50LnR5cGUgPT09ICdtb3VzZWRvd24nICYmIGV2ZW50LmJ1dHRvbiAhPT0gMCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdHRoaXMuc2V0VmFsdWUodGhpcy5nZXRSZXNldFZhbHVlKCkpO1xuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0aXNPcGVuOiBmYWxzZSxcblx0XHRcdGlucHV0VmFsdWU6ICcnXG5cdFx0fSwgdGhpcy5mb2N1cyk7XG5cdH0sXG5cblx0Z2V0UmVzZXRWYWx1ZTogZnVuY3Rpb24gZ2V0UmVzZXRWYWx1ZSgpIHtcblx0XHRpZiAodGhpcy5wcm9wcy5yZXNldFZhbHVlICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiB0aGlzLnByb3BzLnJlc2V0VmFsdWU7XG5cdFx0fSBlbHNlIGlmICh0aGlzLnByb3BzLm11bHRpKSB7XG5cdFx0XHRyZXR1cm4gW107XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblx0fSxcblxuXHRmb2N1c09wdGlvbjogZnVuY3Rpb24gZm9jdXNPcHRpb24ob3B0aW9uKSB7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRmb2N1c2VkT3B0aW9uOiBvcHRpb25cblx0XHR9KTtcblx0fSxcblxuXHRmb2N1c05leHRPcHRpb246IGZ1bmN0aW9uIGZvY3VzTmV4dE9wdGlvbigpIHtcblx0XHR0aGlzLmZvY3VzQWRqYWNlbnRPcHRpb24oJ25leHQnKTtcblx0fSxcblxuXHRmb2N1c1ByZXZpb3VzT3B0aW9uOiBmdW5jdGlvbiBmb2N1c1ByZXZpb3VzT3B0aW9uKCkge1xuXHRcdHRoaXMuZm9jdXNBZGphY2VudE9wdGlvbigncHJldmlvdXMnKTtcblx0fSxcblxuXHRmb2N1c1BhZ2VVcE9wdGlvbjogZnVuY3Rpb24gZm9jdXNQYWdlVXBPcHRpb24oKSB7XG5cdFx0dGhpcy5mb2N1c0FkamFjZW50T3B0aW9uKCdwYWdlX3VwJyk7XG5cdH0sXG5cblx0Zm9jdXNQYWdlRG93bk9wdGlvbjogZnVuY3Rpb24gZm9jdXNQYWdlRG93bk9wdGlvbigpIHtcblx0XHR0aGlzLmZvY3VzQWRqYWNlbnRPcHRpb24oJ3BhZ2VfZG93bicpO1xuXHR9LFxuXG5cdGZvY3VzU3RhcnRPcHRpb246IGZ1bmN0aW9uIGZvY3VzU3RhcnRPcHRpb24oKSB7XG5cdFx0dGhpcy5mb2N1c0FkamFjZW50T3B0aW9uKCdzdGFydCcpO1xuXHR9LFxuXG5cdGZvY3VzRW5kT3B0aW9uOiBmdW5jdGlvbiBmb2N1c0VuZE9wdGlvbigpIHtcblx0XHR0aGlzLmZvY3VzQWRqYWNlbnRPcHRpb24oJ2VuZCcpO1xuXHR9LFxuXG5cdGZvY3VzQWRqYWNlbnRPcHRpb246IGZ1bmN0aW9uIGZvY3VzQWRqYWNlbnRPcHRpb24oZGlyKSB7XG5cdFx0dmFyIG9wdGlvbnMgPSB0aGlzLl92aXNpYmxlT3B0aW9ucy5tYXAoZnVuY3Rpb24gKG9wdGlvbiwgaW5kZXgpIHtcblx0XHRcdHJldHVybiB7IG9wdGlvbjogb3B0aW9uLCBpbmRleDogaW5kZXggfTtcblx0XHR9KS5maWx0ZXIoZnVuY3Rpb24gKG9wdGlvbikge1xuXHRcdFx0cmV0dXJuICFvcHRpb24ub3B0aW9uLmRpc2FibGVkO1xuXHRcdH0pO1xuXHRcdHRoaXMuX3Njcm9sbFRvRm9jdXNlZE9wdGlvbk9uVXBkYXRlID0gdHJ1ZTtcblx0XHRpZiAoIXRoaXMuc3RhdGUuaXNPcGVuKSB7XG5cdFx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdFx0aXNPcGVuOiB0cnVlLFxuXHRcdFx0XHRpbnB1dFZhbHVlOiAnJyxcblx0XHRcdFx0Zm9jdXNlZE9wdGlvbjogdGhpcy5fZm9jdXNlZE9wdGlvbiB8fCAob3B0aW9ucy5sZW5ndGggPyBvcHRpb25zW2RpciA9PT0gJ25leHQnID8gMCA6IG9wdGlvbnMubGVuZ3RoIC0gMV0ub3B0aW9uIDogbnVsbClcblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRpZiAoIW9wdGlvbnMubGVuZ3RoKSByZXR1cm47XG5cdFx0dmFyIGZvY3VzZWRJbmRleCA9IC0xO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgb3B0aW9ucy5sZW5ndGg7IGkrKykge1xuXHRcdFx0aWYgKHRoaXMuX2ZvY3VzZWRPcHRpb24gPT09IG9wdGlvbnNbaV0ub3B0aW9uKSB7XG5cdFx0XHRcdGZvY3VzZWRJbmRleCA9IGk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoZGlyID09PSAnbmV4dCcgJiYgZm9jdXNlZEluZGV4ICE9PSAtMSkge1xuXHRcdFx0Zm9jdXNlZEluZGV4ID0gKGZvY3VzZWRJbmRleCArIDEpICUgb3B0aW9ucy5sZW5ndGg7XG5cdFx0fSBlbHNlIGlmIChkaXIgPT09ICdwcmV2aW91cycpIHtcblx0XHRcdGlmIChmb2N1c2VkSW5kZXggPiAwKSB7XG5cdFx0XHRcdGZvY3VzZWRJbmRleCA9IGZvY3VzZWRJbmRleCAtIDE7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb2N1c2VkSW5kZXggPSBvcHRpb25zLmxlbmd0aCAtIDE7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChkaXIgPT09ICdzdGFydCcpIHtcblx0XHRcdGZvY3VzZWRJbmRleCA9IDA7XG5cdFx0fSBlbHNlIGlmIChkaXIgPT09ICdlbmQnKSB7XG5cdFx0XHRmb2N1c2VkSW5kZXggPSBvcHRpb25zLmxlbmd0aCAtIDE7XG5cdFx0fSBlbHNlIGlmIChkaXIgPT09ICdwYWdlX3VwJykge1xuXHRcdFx0dmFyIHBvdGVudGlhbEluZGV4ID0gZm9jdXNlZEluZGV4IC0gdGhpcy5wcm9wcy5wYWdlU2l6ZTtcblx0XHRcdGlmIChwb3RlbnRpYWxJbmRleCA8IDApIHtcblx0XHRcdFx0Zm9jdXNlZEluZGV4ID0gMDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvY3VzZWRJbmRleCA9IHBvdGVudGlhbEluZGV4O1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAoZGlyID09PSAncGFnZV9kb3duJykge1xuXHRcdFx0dmFyIHBvdGVudGlhbEluZGV4ID0gZm9jdXNlZEluZGV4ICsgdGhpcy5wcm9wcy5wYWdlU2l6ZTtcblx0XHRcdGlmIChwb3RlbnRpYWxJbmRleCA+IG9wdGlvbnMubGVuZ3RoIC0gMSkge1xuXHRcdFx0XHRmb2N1c2VkSW5kZXggPSBvcHRpb25zLmxlbmd0aCAtIDE7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb2N1c2VkSW5kZXggPSBwb3RlbnRpYWxJbmRleDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZm9jdXNlZEluZGV4ID09PSAtMSkge1xuXHRcdFx0Zm9jdXNlZEluZGV4ID0gMDtcblx0XHR9XG5cblx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdGZvY3VzZWRJbmRleDogb3B0aW9uc1tmb2N1c2VkSW5kZXhdLmluZGV4LFxuXHRcdFx0Zm9jdXNlZE9wdGlvbjogb3B0aW9uc1tmb2N1c2VkSW5kZXhdLm9wdGlvblxuXHRcdH0pO1xuXHR9LFxuXG5cdGdldEZvY3VzZWRPcHRpb246IGZ1bmN0aW9uIGdldEZvY3VzZWRPcHRpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2ZvY3VzZWRPcHRpb247XG5cdH0sXG5cblx0Z2V0SW5wdXRWYWx1ZTogZnVuY3Rpb24gZ2V0SW5wdXRWYWx1ZSgpIHtcblx0XHRyZXR1cm4gdGhpcy5zdGF0ZS5pbnB1dFZhbHVlO1xuXHR9LFxuXG5cdHNlbGVjdEZvY3VzZWRPcHRpb246IGZ1bmN0aW9uIHNlbGVjdEZvY3VzZWRPcHRpb24oKSB7XG5cdFx0aWYgKHRoaXMuX2ZvY3VzZWRPcHRpb24pIHtcblx0XHRcdHJldHVybiB0aGlzLnNlbGVjdFZhbHVlKHRoaXMuX2ZvY3VzZWRPcHRpb24pO1xuXHRcdH1cblx0fSxcblxuXHRyZW5kZXJMb2FkaW5nOiBmdW5jdGlvbiByZW5kZXJMb2FkaW5nKCkge1xuXHRcdGlmICghdGhpcy5wcm9wcy5pc0xvYWRpbmcpIHJldHVybjtcblx0XHRyZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCB7IGNsYXNzTmFtZTogJ1NlbGVjdC1sb2FkaW5nLXpvbmUnLCAnYXJpYS1oaWRkZW4nOiAndHJ1ZScgfSwgX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCB7IGNsYXNzTmFtZTogJ1NlbGVjdC1sb2FkaW5nJyB9KSk7XG5cdH0sXG5cblx0cmVuZGVyVmFsdWU6IGZ1bmN0aW9uIHJlbmRlclZhbHVlKHZhbHVlQXJyYXksIGlzT3Blbikge1xuXHRcdHZhciBfdGhpczQgPSB0aGlzO1xuXG5cdFx0dmFyIHJlbmRlckxhYmVsID0gdGhpcy5wcm9wcy52YWx1ZVJlbmRlcmVyIHx8IHRoaXMuZ2V0T3B0aW9uTGFiZWw7XG5cdFx0dmFyIFZhbHVlQ29tcG9uZW50ID0gdGhpcy5wcm9wcy52YWx1ZUNvbXBvbmVudDtcblx0XHRpZiAoIXZhbHVlQXJyYXkubGVuZ3RoKSB7XG5cdFx0XHRyZXR1cm4gIXRoaXMuc3RhdGUuaW5wdXRWYWx1ZSA/IF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogJ1NlbGVjdC1wbGFjZWhvbGRlcicgfSwgdGhpcy5wcm9wcy5wbGFjZWhvbGRlcikgOiBudWxsO1xuXHRcdH1cblx0XHR2YXIgb25DbGljayA9IHRoaXMucHJvcHMub25WYWx1ZUNsaWNrID8gdGhpcy5oYW5kbGVWYWx1ZUNsaWNrIDogbnVsbDtcblx0XHRpZiAodGhpcy5wcm9wcy5tdWx0aSkge1xuXHRcdFx0cmV0dXJuIHZhbHVlQXJyYXkubWFwKGZ1bmN0aW9uICh2YWx1ZSwgaSkge1xuXHRcdFx0XHRyZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoVmFsdWVDb21wb25lbnQsIHtcblx0XHRcdFx0XHRpZDogX3RoaXM0Ll9pbnN0YW5jZVByZWZpeCArICctdmFsdWUtJyArIGksXG5cdFx0XHRcdFx0aW5zdGFuY2VQcmVmaXg6IF90aGlzNC5faW5zdGFuY2VQcmVmaXgsXG5cdFx0XHRcdFx0ZGlzYWJsZWQ6IF90aGlzNC5wcm9wcy5kaXNhYmxlZCB8fCB2YWx1ZS5jbGVhcmFibGVWYWx1ZSA9PT0gZmFsc2UsXG5cdFx0XHRcdFx0a2V5OiAndmFsdWUtJyArIGkgKyAnLScgKyB2YWx1ZVtfdGhpczQucHJvcHMudmFsdWVLZXldLFxuXHRcdFx0XHRcdG9uQ2xpY2s6IG9uQ2xpY2ssXG5cdFx0XHRcdFx0b25SZW1vdmU6IF90aGlzNC5yZW1vdmVWYWx1ZSxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWVcblx0XHRcdFx0fSwgcmVuZGVyTGFiZWwodmFsdWUsIGkpLCBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnc3BhbicsIHsgY2xhc3NOYW1lOiAnU2VsZWN0LWFyaWEtb25seScgfSwgJ8KgJykpO1xuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIGlmICghdGhpcy5zdGF0ZS5pbnB1dFZhbHVlKSB7XG5cdFx0XHRpZiAoaXNPcGVuKSBvbkNsaWNrID0gbnVsbDtcblx0XHRcdHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChWYWx1ZUNvbXBvbmVudCwge1xuXHRcdFx0XHRpZDogdGhpcy5faW5zdGFuY2VQcmVmaXggKyAnLXZhbHVlLWl0ZW0nLFxuXHRcdFx0XHRkaXNhYmxlZDogdGhpcy5wcm9wcy5kaXNhYmxlZCxcblx0XHRcdFx0aW5zdGFuY2VQcmVmaXg6IHRoaXMuX2luc3RhbmNlUHJlZml4LFxuXHRcdFx0XHRvbkNsaWNrOiBvbkNsaWNrLFxuXHRcdFx0XHR2YWx1ZTogdmFsdWVBcnJheVswXVxuXHRcdFx0fSwgcmVuZGVyTGFiZWwodmFsdWVBcnJheVswXSkpO1xuXHRcdH1cblx0fSxcblxuXHRyZW5kZXJJbnB1dDogZnVuY3Rpb24gcmVuZGVySW5wdXQodmFsdWVBcnJheSwgZm9jdXNlZE9wdGlvbkluZGV4KSB7XG5cdFx0dmFyIF9jbGFzc05hbWVzLFxuXHRcdCAgICBfdGhpczUgPSB0aGlzO1xuXG5cdFx0dmFyIGNsYXNzTmFtZSA9ICgwLCBfY2xhc3NuYW1lczJbJ2RlZmF1bHQnXSkoJ1NlbGVjdC1pbnB1dCcsIHRoaXMucHJvcHMuaW5wdXRQcm9wcy5jbGFzc05hbWUpO1xuXHRcdHZhciBpc09wZW4gPSAhIXRoaXMuc3RhdGUuaXNPcGVuO1xuXG5cdFx0dmFyIGFyaWFPd25zID0gKDAsIF9jbGFzc25hbWVzMlsnZGVmYXVsdCddKSgoX2NsYXNzTmFtZXMgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCB0aGlzLl9pbnN0YW5jZVByZWZpeCArICctbGlzdCcsIGlzT3BlbiksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgdGhpcy5faW5zdGFuY2VQcmVmaXggKyAnLWJhY2tzcGFjZS1yZW1vdmUtbWVzc2FnZScsIHRoaXMucHJvcHMubXVsdGkgJiYgIXRoaXMucHJvcHMuZGlzYWJsZWQgJiYgdGhpcy5zdGF0ZS5pc0ZvY3VzZWQgJiYgIXRoaXMuc3RhdGUuaW5wdXRWYWx1ZSksIF9jbGFzc05hbWVzKSk7XG5cblx0XHQvLyBUT0RPOiBDaGVjayBob3cgdGhpcyBwcm9qZWN0IGluY2x1ZGVzIE9iamVjdC5hc3NpZ24oKVxuXHRcdHZhciBpbnB1dFByb3BzID0gX2V4dGVuZHMoe30sIHRoaXMucHJvcHMuaW5wdXRQcm9wcywge1xuXHRcdFx0cm9sZTogJ2NvbWJvYm94Jyxcblx0XHRcdCdhcmlhLWV4cGFuZGVkJzogJycgKyBpc09wZW4sXG5cdFx0XHQnYXJpYS1vd25zJzogYXJpYU93bnMsXG5cdFx0XHQnYXJpYS1oYXNwb3B1cCc6ICcnICsgaXNPcGVuLFxuXHRcdFx0J2FyaWEtYWN0aXZlZGVzY2VuZGFudCc6IGlzT3BlbiA/IHRoaXMuX2luc3RhbmNlUHJlZml4ICsgJy1vcHRpb24tJyArIGZvY3VzZWRPcHRpb25JbmRleCA6IHRoaXMuX2luc3RhbmNlUHJlZml4ICsgJy12YWx1ZScsXG5cdFx0XHQnYXJpYS1kZXNjcmliZWRieSc6IHRoaXMucHJvcHNbJ2FyaWEtZGVzY3JpYmVkYnknXSxcblx0XHRcdCdhcmlhLWxhYmVsbGVkYnknOiB0aGlzLnByb3BzWydhcmlhLWxhYmVsbGVkYnknXSxcblx0XHRcdCdhcmlhLWxhYmVsJzogdGhpcy5wcm9wc1snYXJpYS1sYWJlbCddLFxuXHRcdFx0Y2xhc3NOYW1lOiBjbGFzc05hbWUsXG5cdFx0XHR0YWJJbmRleDogdGhpcy5wcm9wcy50YWJJbmRleCxcblx0XHRcdG9uQmx1cjogdGhpcy5oYW5kbGVJbnB1dEJsdXIsXG5cdFx0XHRvbkNoYW5nZTogdGhpcy5oYW5kbGVJbnB1dENoYW5nZSxcblx0XHRcdG9uRm9jdXM6IHRoaXMuaGFuZGxlSW5wdXRGb2N1cyxcblx0XHRcdHJlZjogZnVuY3Rpb24gcmVmKF9yZWYpIHtcblx0XHRcdFx0cmV0dXJuIF90aGlzNS5pbnB1dCA9IF9yZWY7XG5cdFx0XHR9LFxuXHRcdFx0cmVxdWlyZWQ6IHRoaXMuc3RhdGUucmVxdWlyZWQsXG5cdFx0XHR2YWx1ZTogdGhpcy5zdGF0ZS5pbnB1dFZhbHVlXG5cdFx0fSk7XG5cblx0XHRpZiAodGhpcy5wcm9wcy5pbnB1dFJlbmRlcmVyKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wcm9wcy5pbnB1dFJlbmRlcmVyKGlucHV0UHJvcHMpO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLnByb3BzLmRpc2FibGVkIHx8ICF0aGlzLnByb3BzLnNlYXJjaGFibGUpIHtcblx0XHRcdHZhciBfcHJvcHMkaW5wdXRQcm9wcyA9IHRoaXMucHJvcHMuaW5wdXRQcm9wcztcblx0XHRcdHZhciBpbnB1dENsYXNzTmFtZSA9IF9wcm9wcyRpbnB1dFByb3BzLmlucHV0Q2xhc3NOYW1lO1xuXG5cdFx0XHR2YXIgZGl2UHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzJGlucHV0UHJvcHMsIFsnaW5wdXRDbGFzc05hbWUnXSk7XG5cblx0XHRcdHZhciBfYXJpYU93bnMgPSAoMCwgX2NsYXNzbmFtZXMyWydkZWZhdWx0J10pKF9kZWZpbmVQcm9wZXJ0eSh7fSwgdGhpcy5faW5zdGFuY2VQcmVmaXggKyAnLWxpc3QnLCBpc09wZW4pKTtcblxuXHRcdFx0cmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdkaXYnLCBfZXh0ZW5kcyh7fSwgZGl2UHJvcHMsIHtcblx0XHRcdFx0cm9sZTogJ2NvbWJvYm94Jyxcblx0XHRcdFx0J2FyaWEtZXhwYW5kZWQnOiBpc09wZW4sXG5cdFx0XHRcdCdhcmlhLW93bnMnOiBfYXJpYU93bnMsXG5cdFx0XHRcdCdhcmlhLWFjdGl2ZWRlc2NlbmRhbnQnOiBpc09wZW4gPyB0aGlzLl9pbnN0YW5jZVByZWZpeCArICctb3B0aW9uLScgKyBmb2N1c2VkT3B0aW9uSW5kZXggOiB0aGlzLl9pbnN0YW5jZVByZWZpeCArICctdmFsdWUnLFxuXHRcdFx0XHRjbGFzc05hbWU6IGNsYXNzTmFtZSxcblx0XHRcdFx0dGFiSW5kZXg6IHRoaXMucHJvcHMudGFiSW5kZXggfHwgMCxcblx0XHRcdFx0b25CbHVyOiB0aGlzLmhhbmRsZUlucHV0Qmx1cixcblx0XHRcdFx0b25Gb2N1czogdGhpcy5oYW5kbGVJbnB1dEZvY3VzLFxuXHRcdFx0XHRyZWY6IGZ1bmN0aW9uIHJlZihfcmVmMikge1xuXHRcdFx0XHRcdHJldHVybiBfdGhpczUuaW5wdXQgPSBfcmVmMjtcblx0XHRcdFx0fSxcblx0XHRcdFx0J2FyaWEtcmVhZG9ubHknOiAnJyArICEhdGhpcy5wcm9wcy5kaXNhYmxlZCxcblx0XHRcdFx0c3R5bGU6IHsgYm9yZGVyOiAwLCB3aWR0aDogMSwgZGlzcGxheTogJ2lubGluZS1ibG9jaycgfSB9KSk7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMucHJvcHMuYXV0b3NpemUpIHtcblx0XHRcdHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChfcmVhY3RJbnB1dEF1dG9zaXplMlsnZGVmYXVsdCddLCBfZXh0ZW5kcyh7fSwgaW5wdXRQcm9wcywgeyBtaW5XaWR0aDogJzUnIH0pKTtcblx0XHR9XG5cdFx0cmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lIH0sIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdpbnB1dCcsIGlucHV0UHJvcHMpKTtcblx0fSxcblxuXHRyZW5kZXJDbGVhcjogZnVuY3Rpb24gcmVuZGVyQ2xlYXIoKSB7XG5cblx0XHRpZiAoIXRoaXMucHJvcHMuY2xlYXJhYmxlIHx8IHRoaXMucHJvcHMudmFsdWUgPT09IHVuZGVmaW5lZCB8fCB0aGlzLnByb3BzLnZhbHVlID09PSBudWxsIHx8IHRoaXMucHJvcHMubXVsdGkgJiYgIXRoaXMucHJvcHMudmFsdWUubGVuZ3RoIHx8IHRoaXMucHJvcHMuZGlzYWJsZWQgfHwgdGhpcy5wcm9wcy5pc0xvYWRpbmcpIHJldHVybjtcblx0XHR2YXIgY2xlYXIgPSB0aGlzLnByb3BzLmNsZWFyUmVuZGVyZXIoKTtcblxuXHRcdHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnc3BhbicsIHsgY2xhc3NOYW1lOiAnU2VsZWN0LWNsZWFyLXpvbmUnLCB0aXRsZTogdGhpcy5wcm9wcy5tdWx0aSA/IHRoaXMucHJvcHMuY2xlYXJBbGxUZXh0IDogdGhpcy5wcm9wcy5jbGVhclZhbHVlVGV4dCxcblx0XHRcdCdhcmlhLWxhYmVsJzogdGhpcy5wcm9wcy5tdWx0aSA/IHRoaXMucHJvcHMuY2xlYXJBbGxUZXh0IDogdGhpcy5wcm9wcy5jbGVhclZhbHVlVGV4dCxcblx0XHRcdG9uTW91c2VEb3duOiB0aGlzLmNsZWFyVmFsdWUsXG5cdFx0XHRvblRvdWNoU3RhcnQ6IHRoaXMuaGFuZGxlVG91Y2hTdGFydCxcblx0XHRcdG9uVG91Y2hNb3ZlOiB0aGlzLmhhbmRsZVRvdWNoTW92ZSxcblx0XHRcdG9uVG91Y2hFbmQ6IHRoaXMuaGFuZGxlVG91Y2hFbmRDbGVhclZhbHVlXG5cdFx0fSwgY2xlYXIpO1xuXHR9LFxuXG5cdHJlbmRlckFycm93OiBmdW5jdGlvbiByZW5kZXJBcnJvdygpIHtcblx0XHR2YXIgb25Nb3VzZURvd24gPSB0aGlzLmhhbmRsZU1vdXNlRG93bk9uQXJyb3c7XG5cdFx0dmFyIGlzT3BlbiA9IHRoaXMuc3RhdGUuaXNPcGVuO1xuXHRcdHZhciBhcnJvdyA9IHRoaXMucHJvcHMuYXJyb3dSZW5kZXJlcih7IG9uTW91c2VEb3duOiBvbk1vdXNlRG93biwgaXNPcGVuOiBpc09wZW4gfSk7XG5cblx0XHRyZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCB7XG5cdFx0XHRjbGFzc05hbWU6ICdTZWxlY3QtYXJyb3ctem9uZScsXG5cdFx0XHRvbk1vdXNlRG93bjogb25Nb3VzZURvd25cblx0XHR9LCBhcnJvdyk7XG5cdH0sXG5cblx0ZmlsdGVyT3B0aW9uczogZnVuY3Rpb24gZmlsdGVyT3B0aW9ucyhleGNsdWRlT3B0aW9ucykge1xuXHRcdHZhciBmaWx0ZXJWYWx1ZSA9IHRoaXMuc3RhdGUuaW5wdXRWYWx1ZTtcblx0XHR2YXIgb3B0aW9ucyA9IHRoaXMucHJvcHMub3B0aW9ucyB8fCBbXTtcblx0XHRpZiAodGhpcy5wcm9wcy5maWx0ZXJPcHRpb25zKSB7XG5cdFx0XHQvLyBNYWludGFpbiBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSB3aXRoIGJvb2xlYW4gYXR0cmlidXRlXG5cdFx0XHR2YXIgZmlsdGVyT3B0aW9ucyA9IHR5cGVvZiB0aGlzLnByb3BzLmZpbHRlck9wdGlvbnMgPT09ICdmdW5jdGlvbicgPyB0aGlzLnByb3BzLmZpbHRlck9wdGlvbnMgOiBfdXRpbHNEZWZhdWx0RmlsdGVyT3B0aW9uczJbJ2RlZmF1bHQnXTtcblxuXHRcdFx0cmV0dXJuIGZpbHRlck9wdGlvbnMob3B0aW9ucywgZmlsdGVyVmFsdWUsIGV4Y2x1ZGVPcHRpb25zLCB7XG5cdFx0XHRcdGZpbHRlck9wdGlvbjogdGhpcy5wcm9wcy5maWx0ZXJPcHRpb24sXG5cdFx0XHRcdGlnbm9yZUFjY2VudHM6IHRoaXMucHJvcHMuaWdub3JlQWNjZW50cyxcblx0XHRcdFx0aWdub3JlQ2FzZTogdGhpcy5wcm9wcy5pZ25vcmVDYXNlLFxuXHRcdFx0XHRsYWJlbEtleTogdGhpcy5wcm9wcy5sYWJlbEtleSxcblx0XHRcdFx0bWF0Y2hQb3M6IHRoaXMucHJvcHMubWF0Y2hQb3MsXG5cdFx0XHRcdG1hdGNoUHJvcDogdGhpcy5wcm9wcy5tYXRjaFByb3AsXG5cdFx0XHRcdHZhbHVlS2V5OiB0aGlzLnByb3BzLnZhbHVlS2V5XG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIG9wdGlvbnM7XG5cdFx0fVxuXHR9LFxuXG5cdG9uT3B0aW9uUmVmOiBmdW5jdGlvbiBvbk9wdGlvblJlZihyZWYsIGlzRm9jdXNlZCkge1xuXHRcdGlmIChpc0ZvY3VzZWQpIHtcblx0XHRcdHRoaXMuZm9jdXNlZCA9IHJlZjtcblx0XHR9XG5cdH0sXG5cblx0cmVuZGVyTWVudTogZnVuY3Rpb24gcmVuZGVyTWVudShvcHRpb25zLCB2YWx1ZUFycmF5LCBmb2N1c2VkT3B0aW9uKSB7XG5cdFx0aWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5sZW5ndGgpIHtcblx0XHRcdHJldHVybiB0aGlzLnByb3BzLm1lbnVSZW5kZXJlcih7XG5cdFx0XHRcdGZvY3VzZWRPcHRpb246IGZvY3VzZWRPcHRpb24sXG5cdFx0XHRcdGZvY3VzT3B0aW9uOiB0aGlzLmZvY3VzT3B0aW9uLFxuXHRcdFx0XHRpbnN0YW5jZVByZWZpeDogdGhpcy5faW5zdGFuY2VQcmVmaXgsXG5cdFx0XHRcdGxhYmVsS2V5OiB0aGlzLnByb3BzLmxhYmVsS2V5LFxuXHRcdFx0XHRvbkZvY3VzOiB0aGlzLmZvY3VzT3B0aW9uLFxuXHRcdFx0XHRvblNlbGVjdDogdGhpcy5zZWxlY3RWYWx1ZSxcblx0XHRcdFx0b3B0aW9uQ2xhc3NOYW1lOiB0aGlzLnByb3BzLm9wdGlvbkNsYXNzTmFtZSxcblx0XHRcdFx0b3B0aW9uQ29tcG9uZW50OiB0aGlzLnByb3BzLm9wdGlvbkNvbXBvbmVudCxcblx0XHRcdFx0b3B0aW9uUmVuZGVyZXI6IHRoaXMucHJvcHMub3B0aW9uUmVuZGVyZXIgfHwgdGhpcy5nZXRPcHRpb25MYWJlbCxcblx0XHRcdFx0b3B0aW9uczogb3B0aW9ucyxcblx0XHRcdFx0c2VsZWN0VmFsdWU6IHRoaXMuc2VsZWN0VmFsdWUsXG5cdFx0XHRcdHZhbHVlQXJyYXk6IHZhbHVlQXJyYXksXG5cdFx0XHRcdHZhbHVlS2V5OiB0aGlzLnByb3BzLnZhbHVlS2V5LFxuXHRcdFx0XHRvbk9wdGlvblJlZjogdGhpcy5vbk9wdGlvblJlZlxuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIGlmICh0aGlzLnByb3BzLm5vUmVzdWx0c1RleHQpIHtcblx0XHRcdHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6ICdTZWxlY3Qtbm9yZXN1bHRzJyB9LCB0aGlzLnByb3BzLm5vUmVzdWx0c1RleHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdH0sXG5cblx0cmVuZGVySGlkZGVuRmllbGQ6IGZ1bmN0aW9uIHJlbmRlckhpZGRlbkZpZWxkKHZhbHVlQXJyYXkpIHtcblx0XHR2YXIgX3RoaXM2ID0gdGhpcztcblxuXHRcdGlmICghdGhpcy5wcm9wcy5uYW1lKSByZXR1cm47XG5cdFx0aWYgKHRoaXMucHJvcHMuam9pblZhbHVlcykge1xuXHRcdFx0dmFyIHZhbHVlID0gdmFsdWVBcnJheS5tYXAoZnVuY3Rpb24gKGkpIHtcblx0XHRcdFx0cmV0dXJuIHN0cmluZ2lmeVZhbHVlKGlbX3RoaXM2LnByb3BzLnZhbHVlS2V5XSk7XG5cdFx0XHR9KS5qb2luKHRoaXMucHJvcHMuZGVsaW1pdGVyKTtcblx0XHRcdHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnaW5wdXQnLCB7XG5cdFx0XHRcdHR5cGU6ICdoaWRkZW4nLFxuXHRcdFx0XHRyZWY6IGZ1bmN0aW9uIHJlZihfcmVmMykge1xuXHRcdFx0XHRcdHJldHVybiBfdGhpczYudmFsdWUgPSBfcmVmMztcblx0XHRcdFx0fSxcblx0XHRcdFx0bmFtZTogdGhpcy5wcm9wcy5uYW1lLFxuXHRcdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHRcdGRpc2FibGVkOiB0aGlzLnByb3BzLmRpc2FibGVkIH0pO1xuXHRcdH1cblx0XHRyZXR1cm4gdmFsdWVBcnJheS5tYXAoZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG5cdFx0XHRyZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ2lucHV0JywgeyBrZXk6ICdoaWRkZW4uJyArIGluZGV4LFxuXHRcdFx0XHR0eXBlOiAnaGlkZGVuJyxcblx0XHRcdFx0cmVmOiAndmFsdWUnICsgaW5kZXgsXG5cdFx0XHRcdG5hbWU6IF90aGlzNi5wcm9wcy5uYW1lLFxuXHRcdFx0XHR2YWx1ZTogc3RyaW5naWZ5VmFsdWUoaXRlbVtfdGhpczYucHJvcHMudmFsdWVLZXldKSxcblx0XHRcdFx0ZGlzYWJsZWQ6IF90aGlzNi5wcm9wcy5kaXNhYmxlZCB9KTtcblx0XHR9KTtcblx0fSxcblxuXHRnZXRGb2N1c2FibGVPcHRpb25JbmRleDogZnVuY3Rpb24gZ2V0Rm9jdXNhYmxlT3B0aW9uSW5kZXgoc2VsZWN0ZWRPcHRpb24pIHtcblx0XHR2YXIgb3B0aW9ucyA9IHRoaXMuX3Zpc2libGVPcHRpb25zO1xuXHRcdGlmICghb3B0aW9ucy5sZW5ndGgpIHJldHVybiBudWxsO1xuXG5cdFx0dmFyIHZhbHVlS2V5ID0gdGhpcy5wcm9wcy52YWx1ZUtleTtcblx0XHR2YXIgZm9jdXNlZE9wdGlvbiA9IHRoaXMuc3RhdGUuZm9jdXNlZE9wdGlvbiB8fCBzZWxlY3RlZE9wdGlvbjtcblx0XHRpZiAoZm9jdXNlZE9wdGlvbiAmJiAhZm9jdXNlZE9wdGlvbi5kaXNhYmxlZCkge1xuXHRcdFx0dmFyIGZvY3VzZWRPcHRpb25JbmRleCA9IC0xO1xuXHRcdFx0b3B0aW9ucy5zb21lKGZ1bmN0aW9uIChvcHRpb24sIGluZGV4KSB7XG5cdFx0XHRcdHZhciBpc09wdGlvbkVxdWFsID0gb3B0aW9uW3ZhbHVlS2V5XSA9PT0gZm9jdXNlZE9wdGlvblt2YWx1ZUtleV07XG5cdFx0XHRcdGlmIChpc09wdGlvbkVxdWFsKSB7XG5cdFx0XHRcdFx0Zm9jdXNlZE9wdGlvbkluZGV4ID0gaW5kZXg7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGlzT3B0aW9uRXF1YWw7XG5cdFx0XHR9KTtcblx0XHRcdGlmIChmb2N1c2VkT3B0aW9uSW5kZXggIT09IC0xKSB7XG5cdFx0XHRcdHJldHVybiBmb2N1c2VkT3B0aW9uSW5kZXg7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBvcHRpb25zLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRpZiAoIW9wdGlvbnNbaV0uZGlzYWJsZWQpIHJldHVybiBpO1xuXHRcdH1cblx0XHRyZXR1cm4gbnVsbDtcblx0fSxcblxuXHRyZW5kZXJPdXRlcjogZnVuY3Rpb24gcmVuZGVyT3V0ZXIob3B0aW9ucywgdmFsdWVBcnJheSwgZm9jdXNlZE9wdGlvbikge1xuXHRcdHZhciBfdGhpczcgPSB0aGlzO1xuXG5cdFx0dmFyIG1lbnUgPSB0aGlzLnJlbmRlck1lbnUob3B0aW9ucywgdmFsdWVBcnJheSwgZm9jdXNlZE9wdGlvbik7XG5cdFx0aWYgKCFtZW51KSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cblx0XHRyZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgcmVmOiBmdW5jdGlvbiByZWYoX3JlZjQpIHtcblx0XHRcdFx0cmV0dXJuIF90aGlzNy5tZW51Q29udGFpbmVyID0gX3JlZjQ7XG5cdFx0XHR9LCBjbGFzc05hbWU6ICdTZWxlY3QtbWVudS1vdXRlcicsIHN0eWxlOiB0aGlzLnByb3BzLm1lbnVDb250YWluZXJTdHlsZSB9LCBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnZGl2JywgeyByZWY6IGZ1bmN0aW9uIHJlZihfcmVmNSkge1xuXHRcdFx0XHRyZXR1cm4gX3RoaXM3Lm1lbnUgPSBfcmVmNTtcblx0XHRcdH0sIHJvbGU6ICdsaXN0Ym94JywgY2xhc3NOYW1lOiAnU2VsZWN0LW1lbnUnLCBpZDogdGhpcy5faW5zdGFuY2VQcmVmaXggKyAnLWxpc3QnLFxuXHRcdFx0c3R5bGU6IHRoaXMucHJvcHMubWVudVN0eWxlLFxuXHRcdFx0b25TY3JvbGw6IHRoaXMuaGFuZGxlTWVudVNjcm9sbCxcblx0XHRcdG9uTW91c2VEb3duOiB0aGlzLmhhbmRsZU1vdXNlRG93bk9uTWVudSB9LCBtZW51KSk7XG5cdH0sXG5cblx0cmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG5cdFx0dmFyIF90aGlzOCA9IHRoaXM7XG5cblx0XHR2YXIgdmFsdWVBcnJheSA9IHRoaXMuZ2V0VmFsdWVBcnJheSh0aGlzLnByb3BzLnZhbHVlKTtcblx0XHR2YXIgb3B0aW9ucyA9IHRoaXMuX3Zpc2libGVPcHRpb25zID0gdGhpcy5maWx0ZXJPcHRpb25zKHRoaXMucHJvcHMubXVsdGkgPyB0aGlzLmdldFZhbHVlQXJyYXkodGhpcy5wcm9wcy52YWx1ZSkgOiBudWxsKTtcblx0XHR2YXIgaXNPcGVuID0gdGhpcy5zdGF0ZS5pc09wZW47XG5cdFx0aWYgKHRoaXMucHJvcHMubXVsdGkgJiYgIW9wdGlvbnMubGVuZ3RoICYmIHZhbHVlQXJyYXkubGVuZ3RoICYmICF0aGlzLnN0YXRlLmlucHV0VmFsdWUpIGlzT3BlbiA9IGZhbHNlO1xuXHRcdHZhciBmb2N1c2VkT3B0aW9uSW5kZXggPSB0aGlzLmdldEZvY3VzYWJsZU9wdGlvbkluZGV4KHZhbHVlQXJyYXlbMF0pO1xuXG5cdFx0dmFyIGZvY3VzZWRPcHRpb24gPSBudWxsO1xuXHRcdGlmIChmb2N1c2VkT3B0aW9uSW5kZXggIT09IG51bGwpIHtcblx0XHRcdGZvY3VzZWRPcHRpb24gPSB0aGlzLl9mb2N1c2VkT3B0aW9uID0gb3B0aW9uc1tmb2N1c2VkT3B0aW9uSW5kZXhdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb2N1c2VkT3B0aW9uID0gdGhpcy5fZm9jdXNlZE9wdGlvbiA9IG51bGw7XG5cdFx0fVxuXHRcdHZhciBjbGFzc05hbWUgPSAoMCwgX2NsYXNzbmFtZXMyWydkZWZhdWx0J10pKCdTZWxlY3QnLCB0aGlzLnByb3BzLmNsYXNzTmFtZSwge1xuXHRcdFx0J1NlbGVjdC0tbXVsdGknOiB0aGlzLnByb3BzLm11bHRpLFxuXHRcdFx0J1NlbGVjdC0tc2luZ2xlJzogIXRoaXMucHJvcHMubXVsdGksXG5cdFx0XHQnaXMtY2xlYXJhYmxlJzogdGhpcy5wcm9wcy5jbGVhcmFibGUsXG5cdFx0XHQnaXMtZGlzYWJsZWQnOiB0aGlzLnByb3BzLmRpc2FibGVkLFxuXHRcdFx0J2lzLWZvY3VzZWQnOiB0aGlzLnN0YXRlLmlzRm9jdXNlZCxcblx0XHRcdCdpcy1sb2FkaW5nJzogdGhpcy5wcm9wcy5pc0xvYWRpbmcsXG5cdFx0XHQnaXMtb3Blbic6IGlzT3Blbixcblx0XHRcdCdpcy1wc2V1ZG8tZm9jdXNlZCc6IHRoaXMuc3RhdGUuaXNQc2V1ZG9Gb2N1c2VkLFxuXHRcdFx0J2lzLXNlYXJjaGFibGUnOiB0aGlzLnByb3BzLnNlYXJjaGFibGUsXG5cdFx0XHQnaGFzLXZhbHVlJzogdmFsdWVBcnJheS5sZW5ndGhcblx0XHR9KTtcblxuXHRcdHZhciByZW1vdmVNZXNzYWdlID0gbnVsbDtcblx0XHRpZiAodGhpcy5wcm9wcy5tdWx0aSAmJiAhdGhpcy5wcm9wcy5kaXNhYmxlZCAmJiB2YWx1ZUFycmF5Lmxlbmd0aCAmJiAhdGhpcy5zdGF0ZS5pbnB1dFZhbHVlICYmIHRoaXMuc3RhdGUuaXNGb2N1c2VkICYmIHRoaXMucHJvcHMuYmFja3NwYWNlUmVtb3Zlcykge1xuXHRcdFx0cmVtb3ZlTWVzc2FnZSA9IF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdzcGFuJywgeyBpZDogdGhpcy5faW5zdGFuY2VQcmVmaXggKyAnLWJhY2tzcGFjZS1yZW1vdmUtbWVzc2FnZScsIGNsYXNzTmFtZTogJ1NlbGVjdC1hcmlhLW9ubHknLCAnYXJpYS1saXZlJzogJ2Fzc2VydGl2ZScgfSwgdGhpcy5wcm9wcy5iYWNrc3BhY2VUb1JlbW92ZU1lc3NhZ2UucmVwbGFjZSgne2xhYmVsfScsIHZhbHVlQXJyYXlbdmFsdWVBcnJheS5sZW5ndGggLSAxXVt0aGlzLnByb3BzLmxhYmVsS2V5XSkpO1xuXHRcdH1cblxuXHRcdHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnZGl2JywgeyByZWY6IGZ1bmN0aW9uIHJlZihfcmVmNikge1xuXHRcdFx0XHRyZXR1cm4gX3RoaXM4LndyYXBwZXIgPSBfcmVmNjtcblx0XHRcdH0sXG5cdFx0XHRjbGFzc05hbWU6IGNsYXNzTmFtZSxcblx0XHRcdHN0eWxlOiB0aGlzLnByb3BzLndyYXBwZXJTdHlsZSB9LCB0aGlzLnJlbmRlckhpZGRlbkZpZWxkKHZhbHVlQXJyYXkpLCBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnZGl2JywgeyByZWY6IGZ1bmN0aW9uIHJlZihfcmVmNykge1xuXHRcdFx0XHRyZXR1cm4gX3RoaXM4LmNvbnRyb2wgPSBfcmVmNztcblx0XHRcdH0sXG5cdFx0XHRjbGFzc05hbWU6ICdTZWxlY3QtY29udHJvbCcsXG5cdFx0XHRzdHlsZTogdGhpcy5wcm9wcy5zdHlsZSxcblx0XHRcdG9uS2V5RG93bjogdGhpcy5oYW5kbGVLZXlEb3duLFxuXHRcdFx0b25Nb3VzZURvd246IHRoaXMuaGFuZGxlTW91c2VEb3duLFxuXHRcdFx0b25Ub3VjaEVuZDogdGhpcy5oYW5kbGVUb3VjaEVuZCxcblx0XHRcdG9uVG91Y2hTdGFydDogdGhpcy5oYW5kbGVUb3VjaFN0YXJ0LFxuXHRcdFx0b25Ub3VjaE1vdmU6IHRoaXMuaGFuZGxlVG91Y2hNb3ZlXG5cdFx0fSwgX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCB7IGNsYXNzTmFtZTogJ1NlbGVjdC1tdWx0aS12YWx1ZS13cmFwcGVyJywgaWQ6IHRoaXMuX2luc3RhbmNlUHJlZml4ICsgJy12YWx1ZScgfSwgdGhpcy5yZW5kZXJWYWx1ZSh2YWx1ZUFycmF5LCBpc09wZW4pLCB0aGlzLnJlbmRlcklucHV0KHZhbHVlQXJyYXksIGZvY3VzZWRPcHRpb25JbmRleCkpLCByZW1vdmVNZXNzYWdlLCB0aGlzLnJlbmRlckxvYWRpbmcoKSwgdGhpcy5yZW5kZXJDbGVhcigpLCB0aGlzLnJlbmRlckFycm93KCkpLCBpc09wZW4gPyB0aGlzLnJlbmRlck91dGVyKG9wdGlvbnMsICF0aGlzLnByb3BzLm11bHRpID8gdmFsdWVBcnJheSA6IG51bGwsIGZvY3VzZWRPcHRpb24pIDogbnVsbCk7XG5cdH1cblxufSk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IFNlbGVjdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9yZWFjdC1zZWxlY3QvbGliL1ZhbHVlLmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG5cdHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07XG59XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcmVhY3QvcmVhY3QuanNcIik7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX2NyZWF0ZVJlYWN0Q2xhc3MgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvY3JlYXRlLXJlYWN0LWNsYXNzL2luZGV4LmpzXCIpO1xuXG52YXIgX2NyZWF0ZVJlYWN0Q2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlUmVhY3RDbGFzcyk7XG5cbnZhciBfcHJvcFR5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanNcIik7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzXCIpO1xuXG52YXIgX2NsYXNzbmFtZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NuYW1lcyk7XG5cbnZhciBWYWx1ZSA9ICgwLCBfY3JlYXRlUmVhY3RDbGFzczJbJ2RlZmF1bHQnXSkoe1xuXG5cdGRpc3BsYXlOYW1lOiAnVmFsdWUnLFxuXG5cdHByb3BUeXBlczoge1xuXHRcdGNoaWxkcmVuOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm5vZGUsXG5cdFx0ZGlzYWJsZWQ6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCwgLy8gZGlzYWJsZWQgcHJvcCBwYXNzZWQgdG8gUmVhY3RTZWxlY3Rcblx0XHRpZDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcsIC8vIFVuaXF1ZSBpZCBmb3IgdGhlIHZhbHVlIC0gdXNlZCBmb3IgYXJpYVxuXHRcdG9uQ2xpY2s6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYywgLy8gbWV0aG9kIHRvIGhhbmRsZSBjbGljayBvbiB2YWx1ZSBsYWJlbFxuXHRcdG9uUmVtb3ZlOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsIC8vIG1ldGhvZCB0byBoYW5kbGUgcmVtb3ZhbCBvZiB0aGUgdmFsdWVcblx0XHR2YWx1ZTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5vYmplY3QuaXNSZXF1aXJlZCB9LFxuXG5cdC8vIHRoZSBvcHRpb24gb2JqZWN0IGZvciB0aGlzIHZhbHVlXG5cdGhhbmRsZU1vdXNlRG93bjogZnVuY3Rpb24gaGFuZGxlTW91c2VEb3duKGV2ZW50KSB7XG5cdFx0aWYgKGV2ZW50LnR5cGUgPT09ICdtb3VzZWRvd24nICYmIGV2ZW50LmJ1dHRvbiAhPT0gMCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRpZiAodGhpcy5wcm9wcy5vbkNsaWNrKSB7XG5cdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdHRoaXMucHJvcHMub25DbGljayh0aGlzLnByb3BzLnZhbHVlLCBldmVudCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGlmICh0aGlzLnByb3BzLnZhbHVlLmhyZWYpIHtcblx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdH1cblx0fSxcblxuXHRvblJlbW92ZTogZnVuY3Rpb24gb25SZW1vdmUoZXZlbnQpIHtcblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdHRoaXMucHJvcHMub25SZW1vdmUodGhpcy5wcm9wcy52YWx1ZSk7XG5cdH0sXG5cblx0aGFuZGxlVG91Y2hFbmRSZW1vdmU6IGZ1bmN0aW9uIGhhbmRsZVRvdWNoRW5kUmVtb3ZlKGV2ZW50KSB7XG5cdFx0Ly8gQ2hlY2sgaWYgdGhlIHZpZXcgaXMgYmVpbmcgZHJhZ2dlZCwgSW4gdGhpcyBjYXNlXG5cdFx0Ly8gd2UgZG9uJ3Qgd2FudCB0byBmaXJlIHRoZSBjbGljayBldmVudCAoYmVjYXVzZSB0aGUgdXNlciBvbmx5IHdhbnRzIHRvIHNjcm9sbClcblx0XHRpZiAodGhpcy5kcmFnZ2luZykgcmV0dXJuO1xuXG5cdFx0Ly8gRmlyZSB0aGUgbW91c2UgZXZlbnRzXG5cdFx0dGhpcy5vblJlbW92ZShldmVudCk7XG5cdH0sXG5cblx0aGFuZGxlVG91Y2hNb3ZlOiBmdW5jdGlvbiBoYW5kbGVUb3VjaE1vdmUoZXZlbnQpIHtcblx0XHQvLyBTZXQgYSBmbGFnIHRoYXQgdGhlIHZpZXcgaXMgYmVpbmcgZHJhZ2dlZFxuXHRcdHRoaXMuZHJhZ2dpbmcgPSB0cnVlO1xuXHR9LFxuXG5cdGhhbmRsZVRvdWNoU3RhcnQ6IGZ1bmN0aW9uIGhhbmRsZVRvdWNoU3RhcnQoZXZlbnQpIHtcblx0XHQvLyBTZXQgYSBmbGFnIHRoYXQgdGhlIHZpZXcgaXMgbm90IGJlaW5nIGRyYWdnZWRcblx0XHR0aGlzLmRyYWdnaW5nID0gZmFsc2U7XG5cdH0sXG5cblx0cmVuZGVyUmVtb3ZlSWNvbjogZnVuY3Rpb24gcmVuZGVyUmVtb3ZlSWNvbigpIHtcblx0XHRpZiAodGhpcy5wcm9wcy5kaXNhYmxlZCB8fCAhdGhpcy5wcm9wcy5vblJlbW92ZSkgcmV0dXJuO1xuXHRcdHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnc3BhbicsIHsgY2xhc3NOYW1lOiAnU2VsZWN0LXZhbHVlLWljb24nLFxuXHRcdFx0J2FyaWEtaGlkZGVuJzogJ3RydWUnLFxuXHRcdFx0b25Nb3VzZURvd246IHRoaXMub25SZW1vdmUsXG5cdFx0XHRvblRvdWNoRW5kOiB0aGlzLmhhbmRsZVRvdWNoRW5kUmVtb3ZlLFxuXHRcdFx0b25Ub3VjaFN0YXJ0OiB0aGlzLmhhbmRsZVRvdWNoU3RhcnQsXG5cdFx0XHRvblRvdWNoTW92ZTogdGhpcy5oYW5kbGVUb3VjaE1vdmUgfSwgJ8OXJyk7XG5cdH0sXG5cblx0cmVuZGVyTGFiZWw6IGZ1bmN0aW9uIHJlbmRlckxhYmVsKCkge1xuXHRcdHZhciBjbGFzc05hbWUgPSAnU2VsZWN0LXZhbHVlLWxhYmVsJztcblx0XHRyZXR1cm4gdGhpcy5wcm9wcy5vbkNsaWNrIHx8IHRoaXMucHJvcHMudmFsdWUuaHJlZiA/IF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdhJywgeyBjbGFzc05hbWU6IGNsYXNzTmFtZSwgaHJlZjogdGhpcy5wcm9wcy52YWx1ZS5ocmVmLCB0YXJnZXQ6IHRoaXMucHJvcHMudmFsdWUudGFyZ2V0LCBvbk1vdXNlRG93bjogdGhpcy5oYW5kbGVNb3VzZURvd24sIG9uVG91Y2hFbmQ6IHRoaXMuaGFuZGxlTW91c2VEb3duIH0sIHRoaXMucHJvcHMuY2hpbGRyZW4pIDogX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lLCByb2xlOiAnb3B0aW9uJywgJ2FyaWEtc2VsZWN0ZWQnOiAndHJ1ZScsIGlkOiB0aGlzLnByb3BzLmlkIH0sIHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuXHR9LFxuXG5cdHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuXHRcdHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lczJbJ2RlZmF1bHQnXSkoJ1NlbGVjdC12YWx1ZScsIHRoaXMucHJvcHMudmFsdWUuY2xhc3NOYW1lKSxcblx0XHRcdHN0eWxlOiB0aGlzLnByb3BzLnZhbHVlLnN0eWxlLFxuXHRcdFx0dGl0bGU6IHRoaXMucHJvcHMudmFsdWUudGl0bGVcblx0XHR9LCB0aGlzLnJlbmRlclJlbW92ZUljb24oKSwgdGhpcy5yZW5kZXJMYWJlbCgpKTtcblx0fVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBWYWx1ZTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2VsZWN0L2xpYi91dGlscy9kZWZhdWx0QXJyb3dSZW5kZXJlci5qc1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0dmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBhcnJvd1JlbmRlcmVyO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuXHRyZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07XG59XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcmVhY3QvcmVhY3QuanNcIik7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG5mdW5jdGlvbiBhcnJvd1JlbmRlcmVyKF9yZWYpIHtcblx0dmFyIG9uTW91c2VEb3duID0gX3JlZi5vbk1vdXNlRG93bjtcblxuXHRyZXR1cm4gX3JlYWN0MltcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuXHRcdGNsYXNzTmFtZTogXCJTZWxlY3QtYXJyb3dcIixcblx0XHRvbk1vdXNlRG93bjogb25Nb3VzZURvd25cblx0fSk7XG59XG5cbjtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL3JlYWN0LXNlbGVjdC9saWIvdXRpbHMvZGVmYXVsdENsZWFyUmVuZGVyZXIuanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuXHR2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzWydkZWZhdWx0J10gPSBjbGVhclJlbmRlcmVyO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuXHRyZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9O1xufVxuXG52YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3JlYWN0L3JlYWN0LmpzXCIpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuZnVuY3Rpb24gY2xlYXJSZW5kZXJlcigpIHtcblx0cmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdzcGFuJywge1xuXHRcdGNsYXNzTmFtZTogJ1NlbGVjdC1jbGVhcicsXG5cdFx0ZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHsgX19odG1sOiAnJnRpbWVzOycgfVxuXHR9KTtcbn1cblxuO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL3JlYWN0LXNlbGVjdC9saWIvdXRpbHMvZGVmYXVsdEZpbHRlck9wdGlvbnMuanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcblx0cmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTtcbn1cblxudmFyIF9zdHJpcERpYWNyaXRpY3MgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2VsZWN0L2xpYi91dGlscy9zdHJpcERpYWNyaXRpY3MuanNcIik7XG5cbnZhciBfc3RyaXBEaWFjcml0aWNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N0cmlwRGlhY3JpdGljcyk7XG5cbmZ1bmN0aW9uIGZpbHRlck9wdGlvbnMob3B0aW9ucywgZmlsdGVyVmFsdWUsIGV4Y2x1ZGVPcHRpb25zLCBwcm9wcykge1xuXHR2YXIgX3RoaXMgPSB0aGlzO1xuXG5cdGlmIChwcm9wcy5pZ25vcmVBY2NlbnRzKSB7XG5cdFx0ZmlsdGVyVmFsdWUgPSAoMCwgX3N0cmlwRGlhY3JpdGljczJbJ2RlZmF1bHQnXSkoZmlsdGVyVmFsdWUpO1xuXHR9XG5cblx0aWYgKHByb3BzLmlnbm9yZUNhc2UpIHtcblx0XHRmaWx0ZXJWYWx1ZSA9IGZpbHRlclZhbHVlLnRvTG93ZXJDYXNlKCk7XG5cdH1cblxuXHRpZiAoZXhjbHVkZU9wdGlvbnMpIGV4Y2x1ZGVPcHRpb25zID0gZXhjbHVkZU9wdGlvbnMubWFwKGZ1bmN0aW9uIChpKSB7XG5cdFx0cmV0dXJuIGlbcHJvcHMudmFsdWVLZXldO1xuXHR9KTtcblxuXHRyZXR1cm4gb3B0aW9ucy5maWx0ZXIoZnVuY3Rpb24gKG9wdGlvbikge1xuXHRcdGlmIChleGNsdWRlT3B0aW9ucyAmJiBleGNsdWRlT3B0aW9ucy5pbmRleE9mKG9wdGlvbltwcm9wcy52YWx1ZUtleV0pID4gLTEpIHJldHVybiBmYWxzZTtcblx0XHRpZiAocHJvcHMuZmlsdGVyT3B0aW9uKSByZXR1cm4gcHJvcHMuZmlsdGVyT3B0aW9uLmNhbGwoX3RoaXMsIG9wdGlvbiwgZmlsdGVyVmFsdWUpO1xuXHRcdGlmICghZmlsdGVyVmFsdWUpIHJldHVybiB0cnVlO1xuXHRcdHZhciB2YWx1ZVRlc3QgPSBTdHJpbmcob3B0aW9uW3Byb3BzLnZhbHVlS2V5XSk7XG5cdFx0dmFyIGxhYmVsVGVzdCA9IFN0cmluZyhvcHRpb25bcHJvcHMubGFiZWxLZXldKTtcblx0XHRpZiAocHJvcHMuaWdub3JlQWNjZW50cykge1xuXHRcdFx0aWYgKHByb3BzLm1hdGNoUHJvcCAhPT0gJ2xhYmVsJykgdmFsdWVUZXN0ID0gKDAsIF9zdHJpcERpYWNyaXRpY3MyWydkZWZhdWx0J10pKHZhbHVlVGVzdCk7XG5cdFx0XHRpZiAocHJvcHMubWF0Y2hQcm9wICE9PSAndmFsdWUnKSBsYWJlbFRlc3QgPSAoMCwgX3N0cmlwRGlhY3JpdGljczJbJ2RlZmF1bHQnXSkobGFiZWxUZXN0KTtcblx0XHR9XG5cdFx0aWYgKHByb3BzLmlnbm9yZUNhc2UpIHtcblx0XHRcdGlmIChwcm9wcy5tYXRjaFByb3AgIT09ICdsYWJlbCcpIHZhbHVlVGVzdCA9IHZhbHVlVGVzdC50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0aWYgKHByb3BzLm1hdGNoUHJvcCAhPT0gJ3ZhbHVlJykgbGFiZWxUZXN0ID0gbGFiZWxUZXN0LnRvTG93ZXJDYXNlKCk7XG5cdFx0fVxuXHRcdHJldHVybiBwcm9wcy5tYXRjaFBvcyA9PT0gJ3N0YXJ0JyA/IHByb3BzLm1hdGNoUHJvcCAhPT0gJ2xhYmVsJyAmJiB2YWx1ZVRlc3Quc3Vic3RyKDAsIGZpbHRlclZhbHVlLmxlbmd0aCkgPT09IGZpbHRlclZhbHVlIHx8IHByb3BzLm1hdGNoUHJvcCAhPT0gJ3ZhbHVlJyAmJiBsYWJlbFRlc3Quc3Vic3RyKDAsIGZpbHRlclZhbHVlLmxlbmd0aCkgPT09IGZpbHRlclZhbHVlIDogcHJvcHMubWF0Y2hQcm9wICE9PSAnbGFiZWwnICYmIHZhbHVlVGVzdC5pbmRleE9mKGZpbHRlclZhbHVlKSA+PSAwIHx8IHByb3BzLm1hdGNoUHJvcCAhPT0gJ3ZhbHVlJyAmJiBsYWJlbFRlc3QuaW5kZXhPZihmaWx0ZXJWYWx1ZSkgPj0gMDtcblx0fSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZmlsdGVyT3B0aW9ucztcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2VsZWN0L2xpYi91dGlscy9kZWZhdWx0TWVudVJlbmRlcmVyLmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG5cdHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07XG59XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzXCIpO1xuXG52YXIgX2NsYXNzbmFtZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NuYW1lcyk7XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcmVhY3QvcmVhY3QuanNcIik7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG5mdW5jdGlvbiBtZW51UmVuZGVyZXIoX3JlZikge1xuXHR2YXIgZm9jdXNlZE9wdGlvbiA9IF9yZWYuZm9jdXNlZE9wdGlvbjtcblx0dmFyIGluc3RhbmNlUHJlZml4ID0gX3JlZi5pbnN0YW5jZVByZWZpeDtcblx0dmFyIGxhYmVsS2V5ID0gX3JlZi5sYWJlbEtleTtcblx0dmFyIG9uRm9jdXMgPSBfcmVmLm9uRm9jdXM7XG5cdHZhciBvblNlbGVjdCA9IF9yZWYub25TZWxlY3Q7XG5cdHZhciBvcHRpb25DbGFzc05hbWUgPSBfcmVmLm9wdGlvbkNsYXNzTmFtZTtcblx0dmFyIG9wdGlvbkNvbXBvbmVudCA9IF9yZWYub3B0aW9uQ29tcG9uZW50O1xuXHR2YXIgb3B0aW9uUmVuZGVyZXIgPSBfcmVmLm9wdGlvblJlbmRlcmVyO1xuXHR2YXIgb3B0aW9ucyA9IF9yZWYub3B0aW9ucztcblx0dmFyIHZhbHVlQXJyYXkgPSBfcmVmLnZhbHVlQXJyYXk7XG5cdHZhciB2YWx1ZUtleSA9IF9yZWYudmFsdWVLZXk7XG5cdHZhciBvbk9wdGlvblJlZiA9IF9yZWYub25PcHRpb25SZWY7XG5cblx0dmFyIE9wdGlvbiA9IG9wdGlvbkNvbXBvbmVudDtcblxuXHRyZXR1cm4gb3B0aW9ucy5tYXAoZnVuY3Rpb24gKG9wdGlvbiwgaSkge1xuXHRcdHZhciBpc1NlbGVjdGVkID0gdmFsdWVBcnJheSAmJiB2YWx1ZUFycmF5LmluZGV4T2Yob3B0aW9uKSA+IC0xO1xuXHRcdHZhciBpc0ZvY3VzZWQgPSBvcHRpb24gPT09IGZvY3VzZWRPcHRpb247XG5cdFx0dmFyIG9wdGlvbkNsYXNzID0gKDAsIF9jbGFzc25hbWVzMlsnZGVmYXVsdCddKShvcHRpb25DbGFzc05hbWUsIHtcblx0XHRcdCdTZWxlY3Qtb3B0aW9uJzogdHJ1ZSxcblx0XHRcdCdpcy1zZWxlY3RlZCc6IGlzU2VsZWN0ZWQsXG5cdFx0XHQnaXMtZm9jdXNlZCc6IGlzRm9jdXNlZCxcblx0XHRcdCdpcy1kaXNhYmxlZCc6IG9wdGlvbi5kaXNhYmxlZFxuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KE9wdGlvbiwge1xuXHRcdFx0Y2xhc3NOYW1lOiBvcHRpb25DbGFzcyxcblx0XHRcdGluc3RhbmNlUHJlZml4OiBpbnN0YW5jZVByZWZpeCxcblx0XHRcdGlzRGlzYWJsZWQ6IG9wdGlvbi5kaXNhYmxlZCxcblx0XHRcdGlzRm9jdXNlZDogaXNGb2N1c2VkLFxuXHRcdFx0aXNTZWxlY3RlZDogaXNTZWxlY3RlZCxcblx0XHRcdGtleTogJ29wdGlvbi0nICsgaSArICctJyArIG9wdGlvblt2YWx1ZUtleV0sXG5cdFx0XHRvbkZvY3VzOiBvbkZvY3VzLFxuXHRcdFx0b25TZWxlY3Q6IG9uU2VsZWN0LFxuXHRcdFx0b3B0aW9uOiBvcHRpb24sXG5cdFx0XHRvcHRpb25JbmRleDogaSxcblx0XHRcdHJlZjogZnVuY3Rpb24gcmVmKF9yZWYyKSB7XG5cdFx0XHRcdG9uT3B0aW9uUmVmKF9yZWYyLCBpc0ZvY3VzZWQpO1xuXHRcdFx0fVxuXHRcdH0sIG9wdGlvblJlbmRlcmVyKG9wdGlvbiwgaSkpO1xuXHR9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtZW51UmVuZGVyZXI7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL3JlYWN0LXNlbGVjdC9saWIvdXRpbHMvc3RyaXBEaWFjcml0aWNzLmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBtYXAgPSBbeyAnYmFzZSc6ICdBJywgJ2xldHRlcnMnOiAvW1xcdTAwNDFcXHUyNEI2XFx1RkYyMVxcdTAwQzBcXHUwMEMxXFx1MDBDMlxcdTFFQTZcXHUxRUE0XFx1MUVBQVxcdTFFQThcXHUwMEMzXFx1MDEwMFxcdTAxMDJcXHUxRUIwXFx1MUVBRVxcdTFFQjRcXHUxRUIyXFx1MDIyNlxcdTAxRTBcXHUwMEM0XFx1MDFERVxcdTFFQTJcXHUwMEM1XFx1MDFGQVxcdTAxQ0RcXHUwMjAwXFx1MDIwMlxcdTFFQTBcXHUxRUFDXFx1MUVCNlxcdTFFMDBcXHUwMTA0XFx1MDIzQVxcdTJDNkZdL2cgfSwgeyAnYmFzZSc6ICdBQScsICdsZXR0ZXJzJzogL1tcXHVBNzMyXS9nIH0sIHsgJ2Jhc2UnOiAnQUUnLCAnbGV0dGVycyc6IC9bXFx1MDBDNlxcdTAxRkNcXHUwMUUyXS9nIH0sIHsgJ2Jhc2UnOiAnQU8nLCAnbGV0dGVycyc6IC9bXFx1QTczNF0vZyB9LCB7ICdiYXNlJzogJ0FVJywgJ2xldHRlcnMnOiAvW1xcdUE3MzZdL2cgfSwgeyAnYmFzZSc6ICdBVicsICdsZXR0ZXJzJzogL1tcXHVBNzM4XFx1QTczQV0vZyB9LCB7ICdiYXNlJzogJ0FZJywgJ2xldHRlcnMnOiAvW1xcdUE3M0NdL2cgfSwgeyAnYmFzZSc6ICdCJywgJ2xldHRlcnMnOiAvW1xcdTAwNDJcXHUyNEI3XFx1RkYyMlxcdTFFMDJcXHUxRTA0XFx1MUUwNlxcdTAyNDNcXHUwMTgyXFx1MDE4MV0vZyB9LCB7ICdiYXNlJzogJ0MnLCAnbGV0dGVycyc6IC9bXFx1MDA0M1xcdTI0QjhcXHVGRjIzXFx1MDEwNlxcdTAxMDhcXHUwMTBBXFx1MDEwQ1xcdTAwQzdcXHUxRTA4XFx1MDE4N1xcdTAyM0JcXHVBNzNFXS9nIH0sIHsgJ2Jhc2UnOiAnRCcsICdsZXR0ZXJzJzogL1tcXHUwMDQ0XFx1MjRCOVxcdUZGMjRcXHUxRTBBXFx1MDEwRVxcdTFFMENcXHUxRTEwXFx1MUUxMlxcdTFFMEVcXHUwMTEwXFx1MDE4QlxcdTAxOEFcXHUwMTg5XFx1QTc3OV0vZyB9LCB7ICdiYXNlJzogJ0RaJywgJ2xldHRlcnMnOiAvW1xcdTAxRjFcXHUwMUM0XS9nIH0sIHsgJ2Jhc2UnOiAnRHonLCAnbGV0dGVycyc6IC9bXFx1MDFGMlxcdTAxQzVdL2cgfSwgeyAnYmFzZSc6ICdFJywgJ2xldHRlcnMnOiAvW1xcdTAwNDVcXHUyNEJBXFx1RkYyNVxcdTAwQzhcXHUwMEM5XFx1MDBDQVxcdTFFQzBcXHUxRUJFXFx1MUVDNFxcdTFFQzJcXHUxRUJDXFx1MDExMlxcdTFFMTRcXHUxRTE2XFx1MDExNFxcdTAxMTZcXHUwMENCXFx1MUVCQVxcdTAxMUFcXHUwMjA0XFx1MDIwNlxcdTFFQjhcXHUxRUM2XFx1MDIyOFxcdTFFMUNcXHUwMTE4XFx1MUUxOFxcdTFFMUFcXHUwMTkwXFx1MDE4RV0vZyB9LCB7ICdiYXNlJzogJ0YnLCAnbGV0dGVycyc6IC9bXFx1MDA0NlxcdTI0QkJcXHVGRjI2XFx1MUUxRVxcdTAxOTFcXHVBNzdCXS9nIH0sIHsgJ2Jhc2UnOiAnRycsICdsZXR0ZXJzJzogL1tcXHUwMDQ3XFx1MjRCQ1xcdUZGMjdcXHUwMUY0XFx1MDExQ1xcdTFFMjBcXHUwMTFFXFx1MDEyMFxcdTAxRTZcXHUwMTIyXFx1MDFFNFxcdTAxOTNcXHVBN0EwXFx1QTc3RFxcdUE3N0VdL2cgfSwgeyAnYmFzZSc6ICdIJywgJ2xldHRlcnMnOiAvW1xcdTAwNDhcXHUyNEJEXFx1RkYyOFxcdTAxMjRcXHUxRTIyXFx1MUUyNlxcdTAyMUVcXHUxRTI0XFx1MUUyOFxcdTFFMkFcXHUwMTI2XFx1MkM2N1xcdTJDNzVcXHVBNzhEXS9nIH0sIHsgJ2Jhc2UnOiAnSScsICdsZXR0ZXJzJzogL1tcXHUwMDQ5XFx1MjRCRVxcdUZGMjlcXHUwMENDXFx1MDBDRFxcdTAwQ0VcXHUwMTI4XFx1MDEyQVxcdTAxMkNcXHUwMTMwXFx1MDBDRlxcdTFFMkVcXHUxRUM4XFx1MDFDRlxcdTAyMDhcXHUwMjBBXFx1MUVDQVxcdTAxMkVcXHUxRTJDXFx1MDE5N10vZyB9LCB7ICdiYXNlJzogJ0onLCAnbGV0dGVycyc6IC9bXFx1MDA0QVxcdTI0QkZcXHVGRjJBXFx1MDEzNFxcdTAyNDhdL2cgfSwgeyAnYmFzZSc6ICdLJywgJ2xldHRlcnMnOiAvW1xcdTAwNEJcXHUyNEMwXFx1RkYyQlxcdTFFMzBcXHUwMUU4XFx1MUUzMlxcdTAxMzZcXHUxRTM0XFx1MDE5OFxcdTJDNjlcXHVBNzQwXFx1QTc0MlxcdUE3NDRcXHVBN0EyXS9nIH0sIHsgJ2Jhc2UnOiAnTCcsICdsZXR0ZXJzJzogL1tcXHUwMDRDXFx1MjRDMVxcdUZGMkNcXHUwMTNGXFx1MDEzOVxcdTAxM0RcXHUxRTM2XFx1MUUzOFxcdTAxM0JcXHUxRTNDXFx1MUUzQVxcdTAxNDFcXHUwMjNEXFx1MkM2MlxcdTJDNjBcXHVBNzQ4XFx1QTc0NlxcdUE3ODBdL2cgfSwgeyAnYmFzZSc6ICdMSicsICdsZXR0ZXJzJzogL1tcXHUwMUM3XS9nIH0sIHsgJ2Jhc2UnOiAnTGonLCAnbGV0dGVycyc6IC9bXFx1MDFDOF0vZyB9LCB7ICdiYXNlJzogJ00nLCAnbGV0dGVycyc6IC9bXFx1MDA0RFxcdTI0QzJcXHVGRjJEXFx1MUUzRVxcdTFFNDBcXHUxRTQyXFx1MkM2RVxcdTAxOUNdL2cgfSwgeyAnYmFzZSc6ICdOJywgJ2xldHRlcnMnOiAvW1xcdTAwNEVcXHUyNEMzXFx1RkYyRVxcdTAxRjhcXHUwMTQzXFx1MDBEMVxcdTFFNDRcXHUwMTQ3XFx1MUU0NlxcdTAxNDVcXHUxRTRBXFx1MUU0OFxcdTAyMjBcXHUwMTlEXFx1QTc5MFxcdUE3QTRdL2cgfSwgeyAnYmFzZSc6ICdOSicsICdsZXR0ZXJzJzogL1tcXHUwMUNBXS9nIH0sIHsgJ2Jhc2UnOiAnTmonLCAnbGV0dGVycyc6IC9bXFx1MDFDQl0vZyB9LCB7ICdiYXNlJzogJ08nLCAnbGV0dGVycyc6IC9bXFx1MDA0RlxcdTI0QzRcXHVGRjJGXFx1MDBEMlxcdTAwRDNcXHUwMEQ0XFx1MUVEMlxcdTFFRDBcXHUxRUQ2XFx1MUVENFxcdTAwRDVcXHUxRTRDXFx1MDIyQ1xcdTFFNEVcXHUwMTRDXFx1MUU1MFxcdTFFNTJcXHUwMTRFXFx1MDIyRVxcdTAyMzBcXHUwMEQ2XFx1MDIyQVxcdTFFQ0VcXHUwMTUwXFx1MDFEMVxcdTAyMENcXHUwMjBFXFx1MDFBMFxcdTFFRENcXHUxRURBXFx1MUVFMFxcdTFFREVcXHUxRUUyXFx1MUVDQ1xcdTFFRDhcXHUwMUVBXFx1MDFFQ1xcdTAwRDhcXHUwMUZFXFx1MDE4NlxcdTAxOUZcXHVBNzRBXFx1QTc0Q10vZyB9LCB7ICdiYXNlJzogJ09JJywgJ2xldHRlcnMnOiAvW1xcdTAxQTJdL2cgfSwgeyAnYmFzZSc6ICdPTycsICdsZXR0ZXJzJzogL1tcXHVBNzRFXS9nIH0sIHsgJ2Jhc2UnOiAnT1UnLCAnbGV0dGVycyc6IC9bXFx1MDIyMl0vZyB9LCB7ICdiYXNlJzogJ1AnLCAnbGV0dGVycyc6IC9bXFx1MDA1MFxcdTI0QzVcXHVGRjMwXFx1MUU1NFxcdTFFNTZcXHUwMUE0XFx1MkM2M1xcdUE3NTBcXHVBNzUyXFx1QTc1NF0vZyB9LCB7ICdiYXNlJzogJ1EnLCAnbGV0dGVycyc6IC9bXFx1MDA1MVxcdTI0QzZcXHVGRjMxXFx1QTc1NlxcdUE3NThcXHUwMjRBXS9nIH0sIHsgJ2Jhc2UnOiAnUicsICdsZXR0ZXJzJzogL1tcXHUwMDUyXFx1MjRDN1xcdUZGMzJcXHUwMTU0XFx1MUU1OFxcdTAxNThcXHUwMjEwXFx1MDIxMlxcdTFFNUFcXHUxRTVDXFx1MDE1NlxcdTFFNUVcXHUwMjRDXFx1MkM2NFxcdUE3NUFcXHVBN0E2XFx1QTc4Ml0vZyB9LCB7ICdiYXNlJzogJ1MnLCAnbGV0dGVycyc6IC9bXFx1MDA1M1xcdTI0QzhcXHVGRjMzXFx1MUU5RVxcdTAxNUFcXHUxRTY0XFx1MDE1Q1xcdTFFNjBcXHUwMTYwXFx1MUU2NlxcdTFFNjJcXHUxRTY4XFx1MDIxOFxcdTAxNUVcXHUyQzdFXFx1QTdBOFxcdUE3ODRdL2cgfSwgeyAnYmFzZSc6ICdUJywgJ2xldHRlcnMnOiAvW1xcdTAwNTRcXHUyNEM5XFx1RkYzNFxcdTFFNkFcXHUwMTY0XFx1MUU2Q1xcdTAyMUFcXHUwMTYyXFx1MUU3MFxcdTFFNkVcXHUwMTY2XFx1MDFBQ1xcdTAxQUVcXHUwMjNFXFx1QTc4Nl0vZyB9LCB7ICdiYXNlJzogJ1RaJywgJ2xldHRlcnMnOiAvW1xcdUE3MjhdL2cgfSwgeyAnYmFzZSc6ICdVJywgJ2xldHRlcnMnOiAvW1xcdTAwNTVcXHUyNENBXFx1RkYzNVxcdTAwRDlcXHUwMERBXFx1MDBEQlxcdTAxNjhcXHUxRTc4XFx1MDE2QVxcdTFFN0FcXHUwMTZDXFx1MDBEQ1xcdTAxREJcXHUwMUQ3XFx1MDFENVxcdTAxRDlcXHUxRUU2XFx1MDE2RVxcdTAxNzBcXHUwMUQzXFx1MDIxNFxcdTAyMTZcXHUwMUFGXFx1MUVFQVxcdTFFRThcXHUxRUVFXFx1MUVFQ1xcdTFFRjBcXHUxRUU0XFx1MUU3MlxcdTAxNzJcXHUxRTc2XFx1MUU3NFxcdTAyNDRdL2cgfSwgeyAnYmFzZSc6ICdWJywgJ2xldHRlcnMnOiAvW1xcdTAwNTZcXHUyNENCXFx1RkYzNlxcdTFFN0NcXHUxRTdFXFx1MDFCMlxcdUE3NUVcXHUwMjQ1XS9nIH0sIHsgJ2Jhc2UnOiAnVlknLCAnbGV0dGVycyc6IC9bXFx1QTc2MF0vZyB9LCB7ICdiYXNlJzogJ1cnLCAnbGV0dGVycyc6IC9bXFx1MDA1N1xcdTI0Q0NcXHVGRjM3XFx1MUU4MFxcdTFFODJcXHUwMTc0XFx1MUU4NlxcdTFFODRcXHUxRTg4XFx1MkM3Ml0vZyB9LCB7ICdiYXNlJzogJ1gnLCAnbGV0dGVycyc6IC9bXFx1MDA1OFxcdTI0Q0RcXHVGRjM4XFx1MUU4QVxcdTFFOENdL2cgfSwgeyAnYmFzZSc6ICdZJywgJ2xldHRlcnMnOiAvW1xcdTAwNTlcXHUyNENFXFx1RkYzOVxcdTFFRjJcXHUwMEREXFx1MDE3NlxcdTFFRjhcXHUwMjMyXFx1MUU4RVxcdTAxNzhcXHUxRUY2XFx1MUVGNFxcdTAxQjNcXHUwMjRFXFx1MUVGRV0vZyB9LCB7ICdiYXNlJzogJ1onLCAnbGV0dGVycyc6IC9bXFx1MDA1QVxcdTI0Q0ZcXHVGRjNBXFx1MDE3OVxcdTFFOTBcXHUwMTdCXFx1MDE3RFxcdTFFOTJcXHUxRTk0XFx1MDFCNVxcdTAyMjRcXHUyQzdGXFx1MkM2QlxcdUE3NjJdL2cgfSwgeyAnYmFzZSc6ICdhJywgJ2xldHRlcnMnOiAvW1xcdTAwNjFcXHUyNEQwXFx1RkY0MVxcdTFFOUFcXHUwMEUwXFx1MDBFMVxcdTAwRTJcXHUxRUE3XFx1MUVBNVxcdTFFQUJcXHUxRUE5XFx1MDBFM1xcdTAxMDFcXHUwMTAzXFx1MUVCMVxcdTFFQUZcXHUxRUI1XFx1MUVCM1xcdTAyMjdcXHUwMUUxXFx1MDBFNFxcdTAxREZcXHUxRUEzXFx1MDBFNVxcdTAxRkJcXHUwMUNFXFx1MDIwMVxcdTAyMDNcXHUxRUExXFx1MUVBRFxcdTFFQjdcXHUxRTAxXFx1MDEwNVxcdTJDNjVcXHUwMjUwXS9nIH0sIHsgJ2Jhc2UnOiAnYWEnLCAnbGV0dGVycyc6IC9bXFx1QTczM10vZyB9LCB7ICdiYXNlJzogJ2FlJywgJ2xldHRlcnMnOiAvW1xcdTAwRTZcXHUwMUZEXFx1MDFFM10vZyB9LCB7ICdiYXNlJzogJ2FvJywgJ2xldHRlcnMnOiAvW1xcdUE3MzVdL2cgfSwgeyAnYmFzZSc6ICdhdScsICdsZXR0ZXJzJzogL1tcXHVBNzM3XS9nIH0sIHsgJ2Jhc2UnOiAnYXYnLCAnbGV0dGVycyc6IC9bXFx1QTczOVxcdUE3M0JdL2cgfSwgeyAnYmFzZSc6ICdheScsICdsZXR0ZXJzJzogL1tcXHVBNzNEXS9nIH0sIHsgJ2Jhc2UnOiAnYicsICdsZXR0ZXJzJzogL1tcXHUwMDYyXFx1MjREMVxcdUZGNDJcXHUxRTAzXFx1MUUwNVxcdTFFMDdcXHUwMTgwXFx1MDE4M1xcdTAyNTNdL2cgfSwgeyAnYmFzZSc6ICdjJywgJ2xldHRlcnMnOiAvW1xcdTAwNjNcXHUyNEQyXFx1RkY0M1xcdTAxMDdcXHUwMTA5XFx1MDEwQlxcdTAxMERcXHUwMEU3XFx1MUUwOVxcdTAxODhcXHUwMjNDXFx1QTczRlxcdTIxODRdL2cgfSwgeyAnYmFzZSc6ICdkJywgJ2xldHRlcnMnOiAvW1xcdTAwNjRcXHUyNEQzXFx1RkY0NFxcdTFFMEJcXHUwMTBGXFx1MUUwRFxcdTFFMTFcXHUxRTEzXFx1MUUwRlxcdTAxMTFcXHUwMThDXFx1MDI1NlxcdTAyNTdcXHVBNzdBXS9nIH0sIHsgJ2Jhc2UnOiAnZHonLCAnbGV0dGVycyc6IC9bXFx1MDFGM1xcdTAxQzZdL2cgfSwgeyAnYmFzZSc6ICdlJywgJ2xldHRlcnMnOiAvW1xcdTAwNjVcXHUyNEQ0XFx1RkY0NVxcdTAwRThcXHUwMEU5XFx1MDBFQVxcdTFFQzFcXHUxRUJGXFx1MUVDNVxcdTFFQzNcXHUxRUJEXFx1MDExM1xcdTFFMTVcXHUxRTE3XFx1MDExNVxcdTAxMTdcXHUwMEVCXFx1MUVCQlxcdTAxMUJcXHUwMjA1XFx1MDIwN1xcdTFFQjlcXHUxRUM3XFx1MDIyOVxcdTFFMURcXHUwMTE5XFx1MUUxOVxcdTFFMUJcXHUwMjQ3XFx1MDI1QlxcdTAxRERdL2cgfSwgeyAnYmFzZSc6ICdmJywgJ2xldHRlcnMnOiAvW1xcdTAwNjZcXHUyNEQ1XFx1RkY0NlxcdTFFMUZcXHUwMTkyXFx1QTc3Q10vZyB9LCB7ICdiYXNlJzogJ2cnLCAnbGV0dGVycyc6IC9bXFx1MDA2N1xcdTI0RDZcXHVGRjQ3XFx1MDFGNVxcdTAxMURcXHUxRTIxXFx1MDExRlxcdTAxMjFcXHUwMUU3XFx1MDEyM1xcdTAxRTVcXHUwMjYwXFx1QTdBMVxcdTFENzlcXHVBNzdGXS9nIH0sIHsgJ2Jhc2UnOiAnaCcsICdsZXR0ZXJzJzogL1tcXHUwMDY4XFx1MjREN1xcdUZGNDhcXHUwMTI1XFx1MUUyM1xcdTFFMjdcXHUwMjFGXFx1MUUyNVxcdTFFMjlcXHUxRTJCXFx1MUU5NlxcdTAxMjdcXHUyQzY4XFx1MkM3NlxcdTAyNjVdL2cgfSwgeyAnYmFzZSc6ICdodicsICdsZXR0ZXJzJzogL1tcXHUwMTk1XS9nIH0sIHsgJ2Jhc2UnOiAnaScsICdsZXR0ZXJzJzogL1tcXHUwMDY5XFx1MjREOFxcdUZGNDlcXHUwMEVDXFx1MDBFRFxcdTAwRUVcXHUwMTI5XFx1MDEyQlxcdTAxMkRcXHUwMEVGXFx1MUUyRlxcdTFFQzlcXHUwMUQwXFx1MDIwOVxcdTAyMEJcXHUxRUNCXFx1MDEyRlxcdTFFMkRcXHUwMjY4XFx1MDEzMV0vZyB9LCB7ICdiYXNlJzogJ2onLCAnbGV0dGVycyc6IC9bXFx1MDA2QVxcdTI0RDlcXHVGRjRBXFx1MDEzNVxcdTAxRjBcXHUwMjQ5XS9nIH0sIHsgJ2Jhc2UnOiAnaycsICdsZXR0ZXJzJzogL1tcXHUwMDZCXFx1MjREQVxcdUZGNEJcXHUxRTMxXFx1MDFFOVxcdTFFMzNcXHUwMTM3XFx1MUUzNVxcdTAxOTlcXHUyQzZBXFx1QTc0MVxcdUE3NDNcXHVBNzQ1XFx1QTdBM10vZyB9LCB7ICdiYXNlJzogJ2wnLCAnbGV0dGVycyc6IC9bXFx1MDA2Q1xcdTI0REJcXHVGRjRDXFx1MDE0MFxcdTAxM0FcXHUwMTNFXFx1MUUzN1xcdTFFMzlcXHUwMTNDXFx1MUUzRFxcdTFFM0JcXHUwMTdGXFx1MDE0MlxcdTAxOUFcXHUwMjZCXFx1MkM2MVxcdUE3NDlcXHVBNzgxXFx1QTc0N10vZyB9LCB7ICdiYXNlJzogJ2xqJywgJ2xldHRlcnMnOiAvW1xcdTAxQzldL2cgfSwgeyAnYmFzZSc6ICdtJywgJ2xldHRlcnMnOiAvW1xcdTAwNkRcXHUyNERDXFx1RkY0RFxcdTFFM0ZcXHUxRTQxXFx1MUU0M1xcdTAyNzFcXHUwMjZGXS9nIH0sIHsgJ2Jhc2UnOiAnbicsICdsZXR0ZXJzJzogL1tcXHUwMDZFXFx1MjRERFxcdUZGNEVcXHUwMUY5XFx1MDE0NFxcdTAwRjFcXHUxRTQ1XFx1MDE0OFxcdTFFNDdcXHUwMTQ2XFx1MUU0QlxcdTFFNDlcXHUwMTlFXFx1MDI3MlxcdTAxNDlcXHVBNzkxXFx1QTdBNV0vZyB9LCB7ICdiYXNlJzogJ25qJywgJ2xldHRlcnMnOiAvW1xcdTAxQ0NdL2cgfSwgeyAnYmFzZSc6ICdvJywgJ2xldHRlcnMnOiAvW1xcdTAwNkZcXHUyNERFXFx1RkY0RlxcdTAwRjJcXHUwMEYzXFx1MDBGNFxcdTFFRDNcXHUxRUQxXFx1MUVEN1xcdTFFRDVcXHUwMEY1XFx1MUU0RFxcdTAyMkRcXHUxRTRGXFx1MDE0RFxcdTFFNTFcXHUxRTUzXFx1MDE0RlxcdTAyMkZcXHUwMjMxXFx1MDBGNlxcdTAyMkJcXHUxRUNGXFx1MDE1MVxcdTAxRDJcXHUwMjBEXFx1MDIwRlxcdTAxQTFcXHUxRUREXFx1MUVEQlxcdTFFRTFcXHUxRURGXFx1MUVFM1xcdTFFQ0RcXHUxRUQ5XFx1MDFFQlxcdTAxRURcXHUwMEY4XFx1MDFGRlxcdTAyNTRcXHVBNzRCXFx1QTc0RFxcdTAyNzVdL2cgfSwgeyAnYmFzZSc6ICdvaScsICdsZXR0ZXJzJzogL1tcXHUwMUEzXS9nIH0sIHsgJ2Jhc2UnOiAnb3UnLCAnbGV0dGVycyc6IC9bXFx1MDIyM10vZyB9LCB7ICdiYXNlJzogJ29vJywgJ2xldHRlcnMnOiAvW1xcdUE3NEZdL2cgfSwgeyAnYmFzZSc6ICdwJywgJ2xldHRlcnMnOiAvW1xcdTAwNzBcXHUyNERGXFx1RkY1MFxcdTFFNTVcXHUxRTU3XFx1MDFBNVxcdTFEN0RcXHVBNzUxXFx1QTc1M1xcdUE3NTVdL2cgfSwgeyAnYmFzZSc6ICdxJywgJ2xldHRlcnMnOiAvW1xcdTAwNzFcXHUyNEUwXFx1RkY1MVxcdTAyNEJcXHVBNzU3XFx1QTc1OV0vZyB9LCB7ICdiYXNlJzogJ3InLCAnbGV0dGVycyc6IC9bXFx1MDA3MlxcdTI0RTFcXHVGRjUyXFx1MDE1NVxcdTFFNTlcXHUwMTU5XFx1MDIxMVxcdTAyMTNcXHUxRTVCXFx1MUU1RFxcdTAxNTdcXHUxRTVGXFx1MDI0RFxcdTAyN0RcXHVBNzVCXFx1QTdBN1xcdUE3ODNdL2cgfSwgeyAnYmFzZSc6ICdzJywgJ2xldHRlcnMnOiAvW1xcdTAwNzNcXHUyNEUyXFx1RkY1M1xcdTAwREZcXHUwMTVCXFx1MUU2NVxcdTAxNURcXHUxRTYxXFx1MDE2MVxcdTFFNjdcXHUxRTYzXFx1MUU2OVxcdTAyMTlcXHUwMTVGXFx1MDIzRlxcdUE3QTlcXHVBNzg1XFx1MUU5Ql0vZyB9LCB7ICdiYXNlJzogJ3QnLCAnbGV0dGVycyc6IC9bXFx1MDA3NFxcdTI0RTNcXHVGRjU0XFx1MUU2QlxcdTFFOTdcXHUwMTY1XFx1MUU2RFxcdTAyMUJcXHUwMTYzXFx1MUU3MVxcdTFFNkZcXHUwMTY3XFx1MDFBRFxcdTAyODhcXHUyQzY2XFx1QTc4N10vZyB9LCB7ICdiYXNlJzogJ3R6JywgJ2xldHRlcnMnOiAvW1xcdUE3MjldL2cgfSwgeyAnYmFzZSc6ICd1JywgJ2xldHRlcnMnOiAvW1xcdTAwNzVcXHUyNEU0XFx1RkY1NVxcdTAwRjlcXHUwMEZBXFx1MDBGQlxcdTAxNjlcXHUxRTc5XFx1MDE2QlxcdTFFN0JcXHUwMTZEXFx1MDBGQ1xcdTAxRENcXHUwMUQ4XFx1MDFENlxcdTAxREFcXHUxRUU3XFx1MDE2RlxcdTAxNzFcXHUwMUQ0XFx1MDIxNVxcdTAyMTdcXHUwMUIwXFx1MUVFQlxcdTFFRTlcXHUxRUVGXFx1MUVFRFxcdTFFRjFcXHUxRUU1XFx1MUU3M1xcdTAxNzNcXHUxRTc3XFx1MUU3NVxcdTAyODldL2cgfSwgeyAnYmFzZSc6ICd2JywgJ2xldHRlcnMnOiAvW1xcdTAwNzZcXHUyNEU1XFx1RkY1NlxcdTFFN0RcXHUxRTdGXFx1MDI4QlxcdUE3NUZcXHUwMjhDXS9nIH0sIHsgJ2Jhc2UnOiAndnknLCAnbGV0dGVycyc6IC9bXFx1QTc2MV0vZyB9LCB7ICdiYXNlJzogJ3cnLCAnbGV0dGVycyc6IC9bXFx1MDA3N1xcdTI0RTZcXHVGRjU3XFx1MUU4MVxcdTFFODNcXHUwMTc1XFx1MUU4N1xcdTFFODVcXHUxRTk4XFx1MUU4OVxcdTJDNzNdL2cgfSwgeyAnYmFzZSc6ICd4JywgJ2xldHRlcnMnOiAvW1xcdTAwNzhcXHUyNEU3XFx1RkY1OFxcdTFFOEJcXHUxRThEXS9nIH0sIHsgJ2Jhc2UnOiAneScsICdsZXR0ZXJzJzogL1tcXHUwMDc5XFx1MjRFOFxcdUZGNTlcXHUxRUYzXFx1MDBGRFxcdTAxNzdcXHUxRUY5XFx1MDIzM1xcdTFFOEZcXHUwMEZGXFx1MUVGN1xcdTFFOTlcXHUxRUY1XFx1MDFCNFxcdTAyNEZcXHUxRUZGXS9nIH0sIHsgJ2Jhc2UnOiAneicsICdsZXR0ZXJzJzogL1tcXHUwMDdBXFx1MjRFOVxcdUZGNUFcXHUwMTdBXFx1MUU5MVxcdTAxN0NcXHUwMTdFXFx1MUU5M1xcdTFFOTVcXHUwMUI2XFx1MDIyNVxcdTAyNDBcXHUyQzZDXFx1QTc2M10vZyB9XTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzdHJpcERpYWNyaXRpY3Moc3RyKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbWFwLmxlbmd0aDsgaSsrKSB7XG5cdFx0c3RyID0gc3RyLnJlcGxhY2UobWFwW2ldLmxldHRlcnMsIG1hcFtpXS5iYXNlKTtcblx0fVxuXHRyZXR1cm4gc3RyO1xufTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2FtZC1vcHRpb25zLmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihfX3dlYnBhY2tfYW1kX29wdGlvbnNfXykgey8qIGdsb2JhbHMgX193ZWJwYWNrX2FtZF9vcHRpb25zX18gKi9cclxubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfYW1kX29wdGlvbnNfXztcclxuXG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywge30pKVxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9jb21wb25lbnRzL0F1dGgvRmllbGQvRmllbGQuanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9yZWFjdC9yZWFjdC5qc1wiKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfZm9ybXN5UmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvZm9ybXN5LXJlYWN0L2xpYi9tYWluLmpzXCIpO1xuXG52YXIgX2Zvcm1zeVJlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Zvcm1zeVJlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qc1wiKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgRmllbGQgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoRmllbGQsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEZpZWxkKHByb3BzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZpZWxkKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChGaWVsZC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEZpZWxkKSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgX3RoaXMuY2hhbmdlVmFsdWUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIF90aGlzLnByb3BzLnNldFZhbHVlKGV2ZW50LmN1cnJlbnRUYXJnZXRbX3RoaXMucHJvcHMudHlwZSA9PT0gJ2NoZWNrYm94JyA/ICdjaGVja2VkJyA6ICd2YWx1ZSddKTtcbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhGaWVsZCwgW3tcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgZXJyb3JNZXNzYWdlID0gdGhpcy5wcm9wcy5nZXRFcnJvck1lc3NhZ2UoKTtcblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBjbGFzc05hbWU6ICdzaWdudXAtZmllbGQtZ3JvdXAnIH0sXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdsYWJlbCcsXG4gICAgICAgICAge1xuICAgICAgICAgICAgaHRtbEZvcjogdGhpcy5wcm9wcy5uYW1lLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICBjbGFzc05hbWU6ICdzaWdudXAtZm9ybV9fbGFiZWwnIH0sXG4gICAgICAgICAgdGhpcy5wcm9wcy5uYW1lXG4gICAgICAgICksXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdpbnB1dCcsIHtcbiAgICAgICAgICBvbkNoYW5nZTogdGhpcy5jaGFuZ2VWYWx1ZSxcbiAgICAgICAgICB2YWx1ZTogdGhpcy5wcm9wcy5nZXRWYWx1ZSgpLFxuICAgICAgICAgIHR5cGU6IHRoaXMucHJvcHMudHlwZSB8fCAndGV4dCcsXG4gICAgICAgICAgbmFtZTogdGhpcy5wcm9wcy5uYW1lLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgY2xhc3NOYW1lOiAnc2lnbnVwLWZvcm1fX2lucHV0LWZpZWxkJyB9KSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ3AnLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiAnY2FwdGlvbiBzaWdudXAtZm9ybV9fY2FwdGlvbicgfSxcbiAgICAgICAgICB0aGlzLnByb3BzLnRleHRcbiAgICAgICAgKSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ3NwYW4nLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiAnc2lnbnVwLWZvcm1fX2Vycm9yLW1lc3NhZ2UnIH0sXG4gICAgICAgICAgZXJyb3JNZXNzYWdlXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEZpZWxkO1xufShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuRmllbGQucHJvcFR5cGVzID0ge1xuICBuYW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgdGV4dDogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIHR5cGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBzZXRWYWx1ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5hbnksXG4gIGdldFZhbHVlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIHZhbGlkYXRpb25zOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmFueSxcbiAgZ2V0RXJyb3JNZXNzYWdlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIHJlZ2lzdHJhdGlvbjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jXG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSAoMCwgX2Zvcm1zeVJlYWN0LkhPQykoRmllbGQpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9jb21wb25lbnRzL0NoYXJ0L0F4aXMvQXhpcy5qc1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdW5kZWZpbmVkO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3JlYWN0L3JlYWN0LmpzXCIpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9kID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL2QzL2J1aWxkL2QzLmpzXCIpO1xuXG52YXIgZDMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfZCk7XG5cbnZhciBfcmVhY3REb20gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzXCIpO1xuXG52YXIgX3JlYWN0RG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RG9tKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qc1wiKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgQXhpcyA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhBeGlzLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBBeGlzKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBeGlzKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQXhpcy5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEF4aXMpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhBeGlzLCBbe1xuICAgIGtleTogJ2NvbXBvbmVudERpZFVwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgIHRoaXMucmVuZGVyQXhpcygpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLnJlbmRlckF4aXMoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXJBeGlzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyQXhpcygpIHtcbiAgICAgIHZhciBheGlzT3JpZW50ID0gJ2F4aXMnICsgdGhpcy5wcm9wcy5vcmllbnQ7XG4gICAgICB2YXIgYXhpcyA9IGQzW2F4aXNPcmllbnRdKHRoaXMucHJvcHMuc2NhbGUpLnRpY2tzKHRoaXMucHJvcHMudGlja3MpO1xuXG4gICAgICBpZiAodGhpcy5wcm9wcy5mb3JtYXQpIHtcbiAgICAgICAgYXhpcyA9IGF4aXMudGlja0Zvcm1hdChkMy50aW1lRm9ybWF0KHRoaXMucHJvcHMuZm9ybWF0KSk7XG4gICAgICB9XG5cbiAgICAgIGQzLnNlbGVjdCh0aGlzLmF4aXNFbGVtZW50KS5jYWxsKGF4aXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgdHJhbnNsYXRlID0gJ3RyYW5zbGF0ZSgwLCcgKyB0aGlzLnByb3BzLmggKyAnKSc7XG5cbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZycsIHsgY2xhc3NOYW1lOiAnYXhpcycsXG4gICAgICAgIHJlZjogZnVuY3Rpb24gcmVmKGVsKSB7XG4gICAgICAgICAgX3RoaXMyLmF4aXNFbGVtZW50ID0gZWw7XG4gICAgICAgIH0sXG4gICAgICAgIHRyYW5zZm9ybTogdGhpcy5wcm9wcy5heGlzVHlwZSA9PT0gJ3gnID8gdHJhbnNsYXRlIDogJycgfSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEF4aXM7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBBeGlzO1xuXG5cbkF4aXMucHJvcFR5cGVzID0ge1xuICBoOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgb3JpZW50OiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mKFsnTGVmdCcsICdCb3R0b20nLCAnUmlnaHQnLCAnVG9wJ10pLFxuICBzY2FsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBheGlzVHlwZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZihbJ3gnLCAneSddKSxcbiAgdGlja3M6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICBmb3JtYXQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nXG59O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9jb21wb25lbnRzL0NoYXJ0L0NoYXJ0LmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB1bmRlZmluZWQ7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcmVhY3QvcmVhY3QuanNcIik7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzXCIpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX0xpbmVDaGFydCA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3NyYy9jb21wb25lbnRzL0NoYXJ0L0xpbmVDaGFydC9MaW5lQ2hhcnQuanNcIik7XG5cbnZhciBfTGluZUNoYXJ0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0xpbmVDaGFydCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIENoYXJ0ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKENoYXJ0LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBDaGFydChwcm9wcykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDaGFydCk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQ2hhcnQuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihDaGFydCkpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgIF90aGlzLnNldENoaWxkV2lkdGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGNhbGNXaWR0aDogX3RoaXMuZ2V0RWxlbWVudFdpZHRoKClcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGNhbGNXaWR0aDogMjAwXG4gICAgfTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQ2hhcnQsIFt7XG4gICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLnNldENoaWxkV2lkdGgpO1xuICAgICAgdGhpcy5zZXRDaGlsZFdpZHRoKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFVubW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLnNldENoaWxkV2lkdGgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldEVsZW1lbnRXaWR0aCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEVsZW1lbnRXaWR0aCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmRpdi5vZmZzZXRXaWR0aDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBjbGFzc05hbWU6IHRoaXMucHJvcHMuc3R5bGVOYW1lLFxuICAgICAgICAgIHJlZjogZnVuY3Rpb24gcmVmKGVsKSB7XG4gICAgICAgICAgICBfdGhpczIuZGl2ID0gZWw7XG4gICAgICAgICAgfSB9LFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfTGluZUNoYXJ0Mi5kZWZhdWx0LCB7XG4gICAgICAgICAgd2lkdGg6IHRoaXMuc3RhdGUuY2FsY1dpZHRoLFxuICAgICAgICAgIGRhdGE6IHRoaXMucHJvcHMuZGF0YSB9KVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQ2hhcnQ7XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBDaGFydDtcblxuXG5DaGFydC5wcm9wVHlwZXMgPSB7XG4gIHBhcmVudDogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIHN0eWxlTmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGRhdGE6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYXJyYXlcbn07XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL2NvbXBvbmVudHMvQ2hhcnQvRG90cy9Eb3RzLmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkRvdHMgPSB1bmRlZmluZWQ7XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcmVhY3QvcmVhY3QuanNcIik7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzXCIpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgRG90cyA9IGV4cG9ydHMuRG90cyA9IGZ1bmN0aW9uIERvdHMocHJvcHMpIHtcbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICdnJyxcbiAgICBudWxsLFxuICAgIHByb3BzLmRhdGEubWFwKGZ1bmN0aW9uIChkLCBpKSB7XG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2NpcmNsZScsIHsgY2xhc3NOYW1lOiAnZG90JywgcjogJzUnLCBjeDogcHJvcHMueChkLmRhdGUpLFxuICAgICAgICBjeTogcHJvcHMueShkW3Byb3BzLnlEYXRhXSksIGtleTogaSB9KTtcbiAgICB9KVxuICApO1xufTtcblxuRG90cy5wcm9wVHlwZXMgPSB7XG4gIGRhdGE6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYXJyYXksXG4gIHlEYXRhOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgeDogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICB5OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmNcbn07XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL2NvbXBvbmVudHMvQ2hhcnQvR3JpZC9HcmlkLmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB1bmRlZmluZWQ7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcmVhY3QvcmVhY3QuanNcIik7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX2QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvZDMvYnVpbGQvZDMuanNcIik7XG5cbnZhciBkMyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9kKTtcblxudmFyIF9yZWFjdERvbSA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanNcIik7XG5cbnZhciBfcmVhY3REb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3REb20pO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzXCIpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBHcmlkID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKEdyaWQsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEdyaWQoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEdyaWQpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChHcmlkLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoR3JpZCkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEdyaWQsIFt7XG4gICAga2V5OiAnY29tcG9uZW50RGlkVXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgdGhpcy5yZW5kZXJHcmlkKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMucmVuZGVyR3JpZCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlckdyaWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJHcmlkKCkge1xuICAgICAgdmFyIGF4aXNPcmllbnQgPSAnYXhpcycgKyB0aGlzLnByb3BzLm9yaWVudDtcbiAgICAgIHZhciBheGlzID0gZDNbYXhpc09yaWVudF0odGhpcy5wcm9wcy5zY2FsZSkudGlja3ModGhpcy5wcm9wcy50aWNrcykudGlja1NpemUoLXRoaXMucHJvcHMubGVuLCAwLCAwKS50aWNrRm9ybWF0KCcnKTtcblxuICAgICAgZDMuc2VsZWN0KHRoaXMuZ3JpZEVsZW1lbnQpLmNhbGwoYXhpcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciB0cmFuc2xhdGUgPSAndHJhbnNsYXRlKDAsJyArIHRoaXMucHJvcHMuaCArICcpJztcblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdnJywgeyBjbGFzc05hbWU6ICdncmlkJyxcbiAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYoZWwpIHtcbiAgICAgICAgICBfdGhpczIuZ3JpZEVsZW1lbnQgPSBlbDtcbiAgICAgICAgfSxcbiAgICAgICAgdHJhbnNmb3JtOiB0aGlzLnByb3BzLmdyaWRUeXBlID09PSAneCcgPyB0cmFuc2xhdGUgOiAnJyB9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gR3JpZDtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEdyaWQ7XG5cblxuR3JpZC5wcm9wVHlwZXMgPSB7XG4gIGg6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICBvcmllbnQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2YoWydMZWZ0JywgJ0JvdHRvbScsICdSaWdodCcsICdUb3AnXSksXG4gIHNjYWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIGdyaWRUeXBlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mKFsneCcsICd5J10pLFxuICB0aWNrczogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gIGxlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXJcbn07XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL2NvbXBvbmVudHMvQ2hhcnQvTGluZUNoYXJ0L0xpbmVDaGFydC5qc1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdW5kZWZpbmVkO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9zcmMvY29tcG9uZW50cy9DaGFydC9MaW5lQ2hhcnQvaW5kZXguc2Nzc1wiKTtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9yZWFjdC9yZWFjdC5qc1wiKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfZCA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9kMy9idWlsZC9kMy5qc1wiKTtcblxudmFyIGQzID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX2QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzXCIpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX0RvdHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9zcmMvY29tcG9uZW50cy9DaGFydC9Eb3RzL0RvdHMuanNcIik7XG5cbnZhciBfR3JpZCA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3NyYy9jb21wb25lbnRzL0NoYXJ0L0dyaWQvR3JpZC5qc1wiKTtcblxudmFyIF9HcmlkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0dyaWQpO1xuXG52YXIgX0F4aXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9zcmMvY29tcG9uZW50cy9DaGFydC9BeGlzL0F4aXMuanNcIik7XG5cbnZhciBfQXhpczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9BeGlzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgTGluZUNoYXJ0ID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgX2luaGVyaXRzKExpbmVDaGFydCwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTGluZUNoYXJ0KHByb3BzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExpbmVDaGFydCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKExpbmVDaGFydC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExpbmVDaGFydCkpLmNhbGwodGhpcywgcHJvcHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhMaW5lQ2hhcnQsIFt7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBtYXJnaW4gPSB7IHRvcDogMjAsIHJpZ2h0OiAyMCwgYm90dG9tOiAyMCwgbGVmdDogNTAgfSxcbiAgICAgICAgICB3ID0gdGhpcy5wcm9wcy53aWR0aCAtIChtYXJnaW4ubGVmdCArIG1hcmdpbi5yaWdodCksXG4gICAgICAgICAgaCA9IHRoaXMucHJvcHMuaGVpZ2h0IC0gKG1hcmdpbi50b3AgKyBtYXJnaW4uYm90dG9tKTtcbiAgICAgIHZhciBwYXJzZURhdGUgPSBkMy50aW1lUGFyc2UoJyV4Jyk7XG5cbiAgICAgIHRoaXMuZGF0YSA9IHRoaXMucHJvcHMuZGF0YS5tYXAoZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGQsIHsgZGF0ZTogcGFyc2VEYXRlKGRbX3RoaXMyLnByb3BzLnhEYXRhXSkgfSk7XG4gICAgICB9KS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHJldHVybiBEYXRlLnBhcnNlKGFbX3RoaXMyLnByb3BzLnhEYXRhXSkgLSBEYXRlLnBhcnNlKGJbX3RoaXMyLnByb3BzLnhEYXRhXSk7XG4gICAgICB9KTtcbiAgICAgIHZhciB4ID0gZDMuc2NhbGVUaW1lKCkuZG9tYWluKGQzLmV4dGVudCh0aGlzLmRhdGEsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgIHJldHVybiBkLmRhdGU7XG4gICAgICB9KSkucmFuZ2VSb3VuZChbMCwgd10pO1xuICAgICAgdmFyIHkgPSBkMy5zY2FsZUxpbmVhcigpLmRvbWFpbihbMCwgNTAwXSkucmFuZ2UoW2gsIDBdKTtcbiAgICAgIHZhciBsaW5lID0gZDMubGluZSgpLngoZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgcmV0dXJuIHgoZC5kYXRlKTtcbiAgICAgIH0pLnkoZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgcmV0dXJuIHkoZFtfdGhpczIucHJvcHMueURhdGFdKTtcbiAgICAgIH0pLmN1cnZlKGQzLmN1cnZlQ2FyZGluYWwpO1xuICAgICAgdmFyIHRyYW5zZm9ybSA9ICd0cmFuc2xhdGUoJyArIG1hcmdpbi5sZWZ0ICsgJywnICsgbWFyZ2luLnRvcCArICcpJztcblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAge1xuICAgICAgICAgIGNsYXNzTmFtZTogdGhpcy5wcm9wcy5zdHlsZU5hbWUsXG4gICAgICAgICAgc3R5bGU6IHsgd2lkdGg6IHRoaXMucHJvcHMud2lkdGgsIGhlaWdodDogdGhpcy5wcm9wcy5oZWlnaHQgfSB9LFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnc3ZnJyxcbiAgICAgICAgICB7XG4gICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScgfSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdnJyxcbiAgICAgICAgICAgIHsgdHJhbnNmb3JtOiB0cmFuc2Zvcm0gfSxcbiAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9HcmlkMi5kZWZhdWx0LCB7XG4gICAgICAgICAgICAgIGg6IGgsXG4gICAgICAgICAgICAgIGxlbjogaCxcbiAgICAgICAgICAgICAgc2NhbGU6IHgsXG4gICAgICAgICAgICAgIGdyaWRUeXBlOiAneCcsXG4gICAgICAgICAgICAgIG9yaWVudDogJ0JvdHRvbScsXG4gICAgICAgICAgICAgIHRpY2tzOiB0aGlzLmRhdGEubGVuZ3RoICogMiB9KSxcbiAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9HcmlkMi5kZWZhdWx0LCB7XG4gICAgICAgICAgICAgIGg6IGgsXG4gICAgICAgICAgICAgIGxlbjogdyxcbiAgICAgICAgICAgICAgc2NhbGU6IHksXG4gICAgICAgICAgICAgIGdyaWRUeXBlOiAneScsXG4gICAgICAgICAgICAgIG9yaWVudDogJ0xlZnQnLFxuICAgICAgICAgICAgICB0aWNrczogNiB9KSxcbiAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9BeGlzMi5kZWZhdWx0LCB7IGg6IGgsXG4gICAgICAgICAgICAgIG9yaWVudDogJ0xlZnQnLFxuICAgICAgICAgICAgICBzY2FsZTogeSxcbiAgICAgICAgICAgICAgYXhpc1R5cGU6ICd5JyxcbiAgICAgICAgICAgICAgdGlja3M6IDYgfSksXG4gICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfQXhpczIuZGVmYXVsdCwgeyBoOiBoLFxuICAgICAgICAgICAgICBvcmllbnQ6ICdCb3R0b20nLFxuICAgICAgICAgICAgICBzY2FsZTogeCxcbiAgICAgICAgICAgICAgYXhpc1R5cGU6ICd4JyxcbiAgICAgICAgICAgICAgdGlja3M6IDgsXG4gICAgICAgICAgICAgIGZvcm1hdDogJyVkLyVtJyB9KSxcbiAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Eb3RzLkRvdHMsIHtcbiAgICAgICAgICAgICAgeDogeCxcbiAgICAgICAgICAgICAgeTogeSxcbiAgICAgICAgICAgICAgZGF0YTogdGhpcy5kYXRhLFxuICAgICAgICAgICAgICB5RGF0YTogdGhpcy5wcm9wcy55RGF0YSB9KSxcbiAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdwYXRoJywge1xuICAgICAgICAgICAgICBjbGFzc05hbWU6ICdsaW5lIHNoYWRvdycsXG4gICAgICAgICAgICAgIGQ6IGxpbmUodGhpcy5kYXRhKSxcbiAgICAgICAgICAgICAgc3Ryb2tlTGluZWNhcDogJ3JvdW5kJyB9KVxuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTGluZUNoYXJ0O1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gTGluZUNoYXJ0O1xuXG5cbkxpbmVDaGFydC5wcm9wVHlwZXMgPSB7XG4gIHdpZHRoOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgaGVpZ2h0OiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgeERhdGE6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICB5RGF0YTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGRhdGE6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYXJyYXksXG4gIHN0eWxlTmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmdcbn07XG5cbkxpbmVDaGFydC5kZWZhdWx0UHJvcHMgPSB7XG4gIHdpZHRoOiA4MDAsXG4gIGhlaWdodDogMzAwLFxuICB4RGF0YTogJ2RheScsXG4gIHlEYXRhOiAnY291bnQnLFxuICBkYXRhOiBbeyBkYXk6ICcwMi8xMS8yMDE2JywgY291bnQ6IDE4MCB9LCB7IGRheTogJzAyLzEvMjAxNicsIGNvdW50OiAyNTAgfSwgeyBkYXk6ICcwMi8xMC8yMDE2JywgY291bnQ6IDgzIH0sIHsgZGF5OiAnMDIvMjQvMjAxNicsIGNvdW50OiA0MzAgfSwgeyBkYXk6ICcwMi8xNS8yMDE2JywgY291bnQ6IDE0MCB9LCB7IGRheTogJzAyLzI3LzIwMTYnLCBjb3VudDogMzEwIH0sIHsgZGF5OiAnMDIvMTcvMjAxNicsIGNvdW50OiA0MzAgfSwgeyBkYXk6ICcwMi84LzIwMTYnLCBjb3VudDogMTgwIH0sIHsgZGF5OiAnMDIvMTkvMjAxNicsIGNvdW50OiAxNTAgfSwgeyBkYXk6ICcwMi8yLzIwMTYnLCBjb3VudDogMTgwIH0sIHsgZGF5OiAnMDIvMy8yMDE2JywgY291bnQ6IDI1MCB9XVxufTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvY29tcG9uZW50cy9DaGFydC9MaW5lQ2hhcnQvaW5kZXguc2Nzc1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG4vLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9jb21wb25lbnRzL0RldmljZUZvcm0vZGV2aWNlRm9ybS5qc1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9zcmMvY29tcG9uZW50cy9EZXZpY2VGb3JtL2RldmljZUZvcm0uc2Nzc1wiKTtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9yZWFjdC9yZWFjdC5qc1wiKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanNcIik7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfcmVhY3RTZWxlY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2VsZWN0L2xpYi9TZWxlY3QuanNcIik7XG5cbnZhciBfcmVhY3RTZWxlY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3RTZWxlY3QpO1xuXG52YXIgX3JlZHV4ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3JlZHV4L2VzL2luZGV4LmpzXCIpO1xuXG52YXIgX2J1aWxkZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9zcmMvYWN0aW9ucy9idWlsZGVyLmFjdGlvbi5qc1wiKTtcblxudmFyIF9yZWFjdFJlZHV4ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2luZGV4LmpzXCIpO1xuXG52YXIgX2Zvcm1zeVJlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL2Zvcm1zeS1yZWFjdC9saWIvbWFpbi5qc1wiKTtcblxudmFyIF9mb3Jtc3lSZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9mb3Jtc3lSZWFjdCk7XG5cbnZhciBfRmllbGQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9zcmMvY29tcG9uZW50cy9BdXRoL0ZpZWxkL0ZpZWxkLmpzXCIpO1xuXG52YXIgX0ZpZWxkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0ZpZWxkKTtcblxudmFyIF9TZWxlY3RMb2NhdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3NyYy9jb21wb25lbnRzL1NlbGVjdExvY2F0aW9uL1NlbGVjdExvY2F0aW9uLmpzXCIpO1xuXG52YXIgX1NlbGVjdExvY2F0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1NlbGVjdExvY2F0aW9uKTtcblxudmFyIF91dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3NyYy91dGlscy91dGlscy5qc1wiKTtcblxudmFyIF9ub3RpZmljYXRpb25zID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vc3JjL2FjdGlvbnMvbm90aWZpY2F0aW9ucy5hY3Rpb24uanNcIik7XG5cbnZhciBfZGV2aWNlcyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3NyYy9hY3Rpb25zL2RldmljZXMuYWN0aW9uLmpzXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBpdGVtc1RvQ2hvb3NlID0gWydUb2dnbGUnLCAnVGltZXInLCAnTGluZUNoYXJ0JywgJ1ZhbHVlJywgJ1JhbmdlJ107XG5cbnZhciBEZXZpY2VGb3JtID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKERldmljZUZvcm0sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIERldmljZUZvcm0ocHJvcHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGV2aWNlRm9ybSk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoRGV2aWNlRm9ybS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKERldmljZUZvcm0pKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfdGhpcy5hZGRJdGVtID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBuZXdJdGVtID0ge1xuICAgICAgICBuYW1lOiBlLnRhcmdldC52YWx1ZVxuICAgICAgfTtcblxuICAgICAgKDAsIF91dGlscy5zZXRJdGVtRGVmYXVsdERhdGEpKG5ld0l0ZW0pO1xuICAgICAgX3RoaXMucHJvcHMuYWRkSXRlbShuZXdJdGVtKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuY3JlYXRlQnV0dG9uID0gZnVuY3Rpb24gKGxhYmVsLCBpbmRleCkge1xuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdpbnB1dCcsIHtcbiAgICAgICAga2V5OiBpbmRleCxcbiAgICAgICAgdHlwZTogJ2J1dHRvbicsXG4gICAgICAgIGNsYXNzTmFtZTogJ2Zvcm0tYnV0dG9uJyxcbiAgICAgICAgb25DbGljazogX3RoaXMuYWRkSXRlbSxcbiAgICAgICAgdmFsdWU6IGxhYmVsIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVVc2VySW5wdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5wcm9wcy5zZXRWYWx1ZSgnbmFtZScsIF90aGlzLm5hbWUuZ2V0VmFsdWUoKSk7XG4gICAgfTtcblxuICAgIF90aGlzLnNlbGVjdExvY2F0aW9uID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBfdGhpcy5wcm9wcy5zZXRWYWx1ZSgnbG9jYXRpb24nLCB2YWx1ZSk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZVN1Ym1pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh0eXBlb2YgX3RoaXMucHJvcHMuc2V0dGluZ3MuX2lkICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBfdGhpcy5wcm9wcy51cGRhdGVEZXZpY2UoX3RoaXMucHJvcHMuc2V0dGluZ3MsIF90aGlzLnByb3BzLnNldHRpbmdzLl9pZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpcy5wcm9wcy5hZGREZXZpY2UoX3RoaXMucHJvcHMuc2V0dGluZ3MpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5lbmFibGVCdXR0b24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGNhblN1Ym1pdDogdHJ1ZVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLmRpc2FibGVCdXR0b24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGNhblN1Ym1pdDogZmFsc2VcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGl0ZW1zOiBbXVxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKERldmljZUZvcm0sIFt7XG4gICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMucHJvcHMubG9hZExvY2F0aW9ucygpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NyZWF0ZUJ1dHRvbnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVCdXR0b25zKCkge1xuICAgICAgcmV0dXJuIGl0ZW1zVG9DaG9vc2UubWFwKHRoaXMuY3JlYXRlQnV0dG9uKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIGRlZmF1bHRMb2NhdGlvbiA9IHRoaXMucHJvcHMuc2V0dGluZ3MubG9jYXRpb247XG5cbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgX2Zvcm1zeVJlYWN0Mi5kZWZhdWx0LkZvcm0sXG4gICAgICAgIHtcbiAgICAgICAgICBvblN1Ym1pdDogdGhpcy5oYW5kbGVTdWJtaXQsXG4gICAgICAgICAgb25WYWxpZDogdGhpcy5lbmFibGVCdXR0b24sXG4gICAgICAgICAgb25JbnZhbGlkOiB0aGlzLmRpc2FibGVCdXR0b24sXG4gICAgICAgICAgb25DaGFuZ2U6IHRoaXMuaGFuZGxlVXNlcklucHV0LFxuICAgICAgICAgIGNsYXNzTmFtZTogJ2RldmljZS1mb3JtJyB9LFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfRmllbGQyLmRlZmF1bHQsIHtcbiAgICAgICAgICBuYW1lOiAnRGV2aWNlIG5hbWUnLFxuICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICByZWY6IGZ1bmN0aW9uIHJlZihpbnB1dCkge1xuICAgICAgICAgICAgX3RoaXMyLm5hbWUgPSBpbnB1dDtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHRleHQ6ICdQbGVhc2UgZW50ZXIgZGV2aWNlIG5hbWUnLFxuICAgICAgICAgIHZhbGlkYXRpb25zOiB7XG4gICAgICAgICAgICBtYXRjaFJlZ2V4cDogL1tcXHdcXGRcXHNdKy9cbiAgICAgICAgICB9LFxuICAgICAgICAgIHZhbGlkYXRpb25FcnJvcjogJ1RoaXMgaXMgbm90IGEgdmFsaWQgbmFtZScsXG4gICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgdmFsdWU6IHRoaXMucHJvcHMuc2V0dGluZ3MubmFtZSB9KSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBjbGFzc05hbWU6ICdpbnB1dC1jb250YWluZXInIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnbGFiZWwnLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICdMb2NhdGlvbjonXG4gICAgICAgICAgKSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfU2VsZWN0TG9jYXRpb24yLmRlZmF1bHQsIHtcbiAgICAgICAgICAgIHNlbGVjdExvY2F0aW9uOiB0aGlzLnNlbGVjdExvY2F0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb25zOiB0aGlzLnByb3BzLmxvY2F0aW9ucyxcbiAgICAgICAgICAgIGFkZExvY2F0aW9uOiB0aGlzLnByb3BzLmFkZExvY2F0aW9uLFxuICAgICAgICAgICAgZGVsZXRlTG9jYXRpb246IHRoaXMucHJvcHMuZGVsZXRlTG9jYXRpb24sXG4gICAgICAgICAgICBkZWZhdWx0TG9jYXRpb246IGRlZmF1bHRMb2NhdGlvbixcbiAgICAgICAgICAgIGRldmljZUV4aXN0SW5Mb2NhdGlvbjogdGhpcy5wcm9wcy5kZXZpY2VFeGlzdEluTG9jYXRpb24sXG4gICAgICAgICAgICBkZXZpY2VJbkxvY2F0aW9uOiB0aGlzLnByb3BzLmRldmljZUluTG9jYXRpb25cbiAgICAgICAgICB9KVxuICAgICAgICApLFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2xhYmVsJyxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAnIERldmljZSBjb25maWc6J1xuICAgICAgICAgICksXG4gICAgICAgICAgdGhpcy5jcmVhdGVCdXR0b25zKClcbiAgICAgICAgKSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBjbGFzc05hbWU6ICdtYWluLWJ1dHRvbi13cmFwIHNpZ251cC1maWVsZC1ncm91cCBzaWdudXAtYnRuLWdyb3VwJyB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdpbnB1dCcsIHsgY2xhc3NOYW1lOiAnYnRuIGJ0bi0tcHJpbWFyeSBidG4tLXNpZ251cCBidG4tLXNpZ251cC1hY3RpdmUnLFxuICAgICAgICAgICAgdHlwZTogJ3N1Ym1pdCcsXG4gICAgICAgICAgICB2YWx1ZTogJ1NhdmUnLFxuICAgICAgICAgICAgZGlzYWJsZWQ6ICF0aGlzLnN0YXRlLmNhblN1Ym1pdCB8fCB0aGlzLnByb3BzLnN0YXR1cyA9PT0gJ1BFTkRJTkcnIH0pXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIERldmljZUZvcm07XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5mdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoc3RvcmUpIHtcbiAgcmV0dXJuIHtcbiAgICBzZXR0aW5nczogc3RvcmUuYnVpbGRlci5kZXZpY2UsXG4gICAgc3RhdHVzOiBzdG9yZS5idWlsZGVyLnVwbG9hZFN0YXR1cyxcbiAgICBsb2NhdGlvbnM6IHN0b3JlLmJ1aWxkZXIubG9jYXRpb25zLFxuICAgIGRldmljZUluTG9jYXRpb246IHN0b3JlLmJ1aWxkZXIuZGV2aWNlSW5Mb2NhdGlvblxuICB9O1xufVxuZnVuY3Rpb24gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoKSB7XG4gIHJldHVybiB7XG4gICAgc2V0VmFsdWU6ICgwLCBfcmVkdXguYmluZEFjdGlvbkNyZWF0b3JzKShfYnVpbGRlci5zZXRWYWx1ZSwgZGlzcGF0Y2gpLFxuICAgIGFkZEl0ZW06ICgwLCBfcmVkdXguYmluZEFjdGlvbkNyZWF0b3JzKShfYnVpbGRlci5hZGRJdGVtLCBkaXNwYXRjaCksXG4gICAgcmVzZXRQcm90bzogKDAsIF9yZWR1eC5iaW5kQWN0aW9uQ3JlYXRvcnMpKF9idWlsZGVyLnJlc2V0UHJvdG8sIGRpc3BhdGNoKSxcbiAgICBhZGREZXZpY2U6ICgwLCBfcmVkdXguYmluZEFjdGlvbkNyZWF0b3JzKShfYnVpbGRlci5hZGREZXZpY2UsIGRpc3BhdGNoKSxcbiAgICB1cGRhdGVEZXZpY2U6IGZ1bmN0aW9uIHVwZGF0ZURldmljZShkYXRhLCBpZCkge1xuICAgICAgcmV0dXJuIGRpc3BhdGNoKCgwLCBfZGV2aWNlcy51cGRhdGVEZXZpY2UpKGRhdGEsIGlkKSk7XG4gICAgfSxcbiAgICBsb2FkTG9jYXRpb25zOiBmdW5jdGlvbiBsb2FkTG9jYXRpb25zKCkge1xuICAgICAgcmV0dXJuIGRpc3BhdGNoKCgwLCBfYnVpbGRlci5sb2FkTG9jYXRpb25zKSgpKTtcbiAgICB9LFxuICAgIGFkZExvY2F0aW9uOiBmdW5jdGlvbiBhZGRMb2NhdGlvbihsb2NhdGlvbikge1xuICAgICAgcmV0dXJuIGRpc3BhdGNoKCgwLCBfYnVpbGRlci5hZGRMb2NhdGlvbikobG9jYXRpb24pKTtcbiAgICB9LFxuICAgIGRlbGV0ZUxvY2F0aW9uOiBmdW5jdGlvbiBkZWxldGVMb2NhdGlvbihpZCkge1xuICAgICAgcmV0dXJuIGRpc3BhdGNoKCgwLCBfYnVpbGRlci5kZWxldGVMb2NhdGlvbikoaWQpKTtcbiAgICB9LFxuICAgIGRldmljZUV4aXN0SW5Mb2NhdGlvbjogZnVuY3Rpb24gZGV2aWNlRXhpc3RJbkxvY2F0aW9uKGlkLCBjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIGRpc3BhdGNoKCgwLCBfYnVpbGRlci5kZXZpY2VzSW5Mb2NhdGlvbikoaWQsIGNhbGxiYWNrKSk7XG4gICAgfVxuICB9O1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gKDAsIF9yZWFjdFJlZHV4LmNvbm5lY3QpKG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKShEZXZpY2VGb3JtKTtcblxuXG5EZXZpY2VGb3JtLnByb3BUeXBlcyA9IHtcbiAgc2V0VmFsdWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgYWRkSXRlbTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICByZXNldFByb3RvOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIGFkZERldmljZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBzZXR0aW5nczogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIHN0YXR1czogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIHVwZGF0ZURldmljZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBsb2FkTG9jYXRpb25zOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIGxvY2F0aW9uczogX3Byb3BUeXBlczIuZGVmYXVsdC5hcnJheSxcbiAgYWRkTG9jYXRpb246IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgZGVsZXRlTG9jYXRpb246IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgZGV2aWNlSW5Mb2NhdGlvbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBkZXZpY2VFeGlzdEluTG9jYXRpb246IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuY1xufTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvY29tcG9uZW50cy9EZXZpY2VGb3JtL2RldmljZUZvcm0uc2Nzc1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG4vLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9jb21wb25lbnRzL1Byb3RvdHlwZS9Qcm90b3R5cGUuanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9yZWFjdC9yZWFjdC5qc1wiKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanNcIik7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfcmVhY3RSZWR1eCA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9pbmRleC5qc1wiKTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vc3JjL2NvbXBvbmVudHMvUHJvdG90eXBlL2luZGV4LnNjc3NcIik7XG5cbnZhciBfU2V0dGluZ3NMaXN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vc3JjL2NvbXBvbmVudHMvU2V0dGluZ3NMaXN0L1NldHRpbmdzTGlzdC5qc1wiKTtcblxudmFyIF9idWlsZGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vc3JjL2FjdGlvbnMvYnVpbGRlci5hY3Rpb24uanNcIik7XG5cbnZhciBfcmVkdXggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcmVkdXgvZXMvaW5kZXguanNcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBQcm90b3R5cGUgPSBmdW5jdGlvbiBQcm90b3R5cGUocHJvcHMpIHtcbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICdkaXYnLFxuICAgIHsgY2xhc3NOYW1lOiAnUHJvdG90eXBlJyB9LFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2gzJyxcbiAgICAgIG51bGwsXG4gICAgICBwcm9wcy5kZXZpY2UubmFtZSB8fCAnRGV2aWNlIG5hbWUnXG4gICAgKSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfU2V0dGluZ3NMaXN0LlNldHRpbmdzTGlzdCwge1xuICAgICAgYWRkRGVzY3JpcHRpb246IHByb3BzLmFkZERlc2NyaXB0aW9uLFxuICAgICAgc2V0dGluZ3M6IHByb3BzLmRldmljZSxcbiAgICAgIGRlbGV0ZUl0ZW06IHByb3BzLmRlbGV0ZUl0ZW0sXG4gICAgICBzZXRJdGVtVmFsdWU6IHByb3BzLnNldEl0ZW1WYWx1ZSxcbiAgICAgIHNldFBhcmFtZXRlcnM6IHByb3BzLnNldFBhcmFtZXRlcnNcbiAgICB9KVxuICApO1xufTtcblxuZnVuY3Rpb24gbWFwU3RhdGVUb1Byb3BzKHN0b3JlKSB7XG4gIHJldHVybiB7XG4gICAgc2V0dGluZ3M6IHN0b3JlLmJ1aWxkZXIuZGV2aWNlXG4gIH07XG59XG5cbmZ1bmN0aW9uIG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCkge1xuICByZXR1cm4ge1xuICAgIGFkZERlc2NyaXB0aW9uOiAoMCwgX3JlZHV4LmJpbmRBY3Rpb25DcmVhdG9ycykoX2J1aWxkZXIuYWRkRGVzY3JpcHRpb24sIGRpc3BhdGNoKSxcbiAgICBzZXRJdGVtVmFsdWU6ICgwLCBfcmVkdXguYmluZEFjdGlvbkNyZWF0b3JzKShfYnVpbGRlci5zZXRJdGVtVmFsdWUsIGRpc3BhdGNoKSxcbiAgICBzZXRQYXJhbWV0ZXJzOiAoMCwgX3JlZHV4LmJpbmRBY3Rpb25DcmVhdG9ycykoX2J1aWxkZXIuc2V0UGFyYW1ldGVycywgZGlzcGF0Y2gpXG4gIH07XG59XG5cblByb3RvdHlwZS5wcm9wVHlwZXMgPSB7XG4gIGRldmljZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIGFkZERlc2NyaXB0aW9uOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIGRlbGV0ZUl0ZW06IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgc2V0SXRlbVZhbHVlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIHNldHRpbmdzOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgc2V0UGFyYW1ldGVyczogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jXG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSAoMCwgX3JlYWN0UmVkdXguY29ubmVjdCkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMpKFByb3RvdHlwZSk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL2NvbXBvbmVudHMvUHJvdG90eXBlL2luZGV4LnNjc3NcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvY29tcG9uZW50cy9SYW5nZVNldHRpbmdzL1JhbmdlLmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB1bmRlZmluZWQ7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcmVhY3QvcmVhY3QuanNcIik7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzXCIpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9zcmMvY29tcG9uZW50cy9SYW5nZVNldHRpbmdzL1JhbmdlU3R5bGUuc2Nzc1wiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgUmFuZ2VTZXR0aW5ncyA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhSYW5nZVNldHRpbmdzLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSYW5nZVNldHRpbmdzKHByb3BzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJhbmdlU2V0dGluZ3MpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFJhbmdlU2V0dGluZ3MuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihSYW5nZVNldHRpbmdzKSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgX3RoaXMub25DaGFuZ2UgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICB2YWx1ZTogZS50YXJnZXQudmFsdWVcbiAgICAgIH0pO1xuXG4gICAgICBpZiAodHlwZW9mIF90aGlzLnByb3BzLm9uVGltZXJDaGFuZ2UgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uVGltZXJDaGFuZ2UoZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLnNldFZhbHVlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmICh0eXBlb2YgX3RoaXMucHJvcHMuc2V0VGltZXJWYWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgX3RoaXMucHJvcHMuc2V0VGltZXJWYWx1ZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXMucHJvcHMuc2V0SXRlbVZhbHVlKF90aGlzLnN0YXRlLnZhbHVlLCBfdGhpcy5wcm9wcy5pdGVtSWQsIF90aGlzLnByb3BzLmRldmljZUlkKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuc2V0UGFyYW1zID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMucHJvcHMuc2V0UGFyYW1ldGVycyhfdGhpcy5wcm9wcy5pdGVtSWQsIF90aGlzLnN0YXRlLnBhcmFtcyk7XG4gICAgfTtcblxuICAgIHZhciBtaW5WYWx1ZSA9IHZvaWQgMCxcbiAgICAgICAgbWF4VmFsdWUgPSB2b2lkIDA7XG5cbiAgICBpZiAoX3RoaXMucHJvcHMucGFyYW1zKSB7XG4gICAgICBtaW5WYWx1ZSA9IF90aGlzLnByb3BzLnBhcmFtcy5taW5WYWx1ZTtcbiAgICAgIG1heFZhbHVlID0gX3RoaXMucHJvcHMucGFyYW1zLm1heFZhbHVlO1xuICAgIH1cblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgdmFsdWU6IDAsXG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgbWluVmFsdWU6IG1pblZhbHVlIHx8IDAsXG4gICAgICAgIG1heFZhbHVlOiBtYXhWYWx1ZSB8fCAxMDBcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuc2V0TWluVmFsdWUgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICBtaW5WYWx1ZTogcGFyc2VJbnQoZS50YXJnZXQudmFsdWUpLFxuICAgICAgICAgIG1heFZhbHVlOiBfdGhpcy5zdGF0ZS5wYXJhbXMubWF4VmFsdWVcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLnNldE1heFZhbHVlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgbWF4VmFsdWU6IHBhcnNlSW50KGUudGFyZ2V0LnZhbHVlKSxcbiAgICAgICAgICBtaW5WYWx1ZTogX3RoaXMuc3RhdGUucGFyYW1zLm1pblZhbHVlXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFJhbmdlU2V0dGluZ3MsIFt7XG4gICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5wcm9wcy5kYXRhICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICB2YWx1ZTogdGhpcy5wcm9wcy5kYXRhXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHZhbHVlOiBuZXh0UHJvcHMuZGF0YSB8fCAwXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBtaW4gPSBfcHJvcHMubWluLFxuICAgICAgICAgIG1heCA9IF9wcm9wcy5tYXg7XG5cblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBjbGFzc05hbWU6ICcnICsgdGhpcy5wcm9wcy5zdHlsZU5hbWUgfSxcbiAgICAgICAgdGhpcy5wcm9wcy5zaG93TWluTWF4ID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBjbGFzc05hbWU6ICdyYW5nZS1zZXR0aW5ncycgfSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdwJyxcbiAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAncmFuZ2Utc2V0dGluZ3NfX3RpdGxlJyB9LFxuICAgICAgICAgICAgJ0VudGVyIG1pbiBhbmQgbWF4IHZhbHVlcyBmb3Igc2V0dGluZydcbiAgICAgICAgICApLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7IGNsYXNzTmFtZTogJ3JhbmdlLXNldHRpbmdzX192YWwnIH0sXG4gICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnaW5wdXQnLCB7XG4gICAgICAgICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgICAgICAgICBuYW1lOiAnbWluJyxcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdFbnRlciBtaW4gdmFsdWUnLFxuICAgICAgICAgICAgICBvbkNoYW5nZTogdGhpcy5zZXRNaW5WYWx1ZSxcbiAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuc3RhdGUucGFyYW1zLm1pblZhbHVlIH0pXG4gICAgICAgICAgKSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdyYW5nZS1zZXR0aW5nc19fdmFsJyB9LFxuICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jywge1xuICAgICAgICAgICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgICAgICAgICAgbmFtZTogJ21heCcsXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnRW50ZXIgbWF4IHZhbHVlJyxcbiAgICAgICAgICAgICAgb25DaGFuZ2U6IHRoaXMuc2V0TWF4VmFsdWUsXG4gICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnN0YXRlLnBhcmFtcy5tYXhWYWx1ZSB9KVxuICAgICAgICAgICksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnYnV0dG9uJyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgb25DbGljazogdGhpcy5zZXRQYXJhbXMsXG4gICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2J0biByYW5nZS1zZXR0aW5nc19fYnRuJyB9LFxuICAgICAgICAgICAgJ1N1Ym1pdCdcbiAgICAgICAgICApXG4gICAgICAgICkgOiBudWxsLFxuICAgICAgICB0aGlzLnByb3BzLmhpZGVMYWJlbCA/IG51bGwgOiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAncCcsXG4gICAgICAgICAgeyBjbGFzc05hbWU6ICdyYW5nZV92YWx1ZScgfSxcbiAgICAgICAgICB0aGlzLnN0YXRlLnZhbHVlXG4gICAgICAgICksXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdpbnB1dCcsIHtcbiAgICAgICAgICB0eXBlOiAncmFuZ2UnLFxuICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLm9uQ2hhbmdlLFxuICAgICAgICAgIG9uTW91c2VVcDogdGhpcy5zZXRWYWx1ZSxcbiAgICAgICAgICBtaW46IG1pbiB8fCB0aGlzLnN0YXRlLnBhcmFtcy5taW5WYWx1ZSxcbiAgICAgICAgICBtYXg6IG1heCB8fCB0aGlzLnN0YXRlLnBhcmFtcy5tYXhWYWx1ZSxcbiAgICAgICAgICBzdGVwOiAxLFxuICAgICAgICAgIHZhbHVlOiB0aGlzLnN0YXRlLnZhbHVlXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBSYW5nZVNldHRpbmdzO1xufShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gUmFuZ2VTZXR0aW5ncztcblxuXG5SYW5nZVNldHRpbmdzLnByb3BUeXBlcyA9IHtcbiAgc3R5bGVOYW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgaXRlbUlkOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgbWF4OiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgbWluOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgc2V0RGV2aWNlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIGhpZGVMYWJlbDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBzZXRJdGVtVmFsdWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgZGF0YTogX3Byb3BUeXBlczIuZGVmYXVsdC5hbnksXG4gIG9uVGltZXJDaGFuZ2U6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgZGV2aWNlSWQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBzZXRUaW1lclZhbHVlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIHNldFBhcmFtZXRlcnM6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgc2hvd01pbk1heDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBtYXhWYWx1ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gIG1pblZhbHVlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgcGFyYW1zOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdFxufTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvY29tcG9uZW50cy9SYW5nZVNldHRpbmdzL1JhbmdlU3R5bGUuc2Nzc1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG4vLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9jb21wb25lbnRzL1NlbGVjdExvY2F0aW9uL1NlbGVjdExvY2F0aW9uLmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB1bmRlZmluZWQ7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcmVhY3QvcmVhY3QuanNcIik7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzXCIpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX1BvcHVwID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vc3JjL2NvbXBvbmVudHMvUG9wdXAvUG9wdXAuanNcIik7XG5cbnZhciBfQnV0dG9uID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vc3JjL2NvbXBvbmVudHMvQnV0dG9uL0J1dHRvbi5qc1wiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgU2VsZWN0TG9jYXRpb24gPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoU2VsZWN0TG9jYXRpb24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFNlbGVjdExvY2F0aW9uKHByb3BzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNlbGVjdExvY2F0aW9uKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChTZWxlY3RMb2NhdGlvbi5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFNlbGVjdExvY2F0aW9uKSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgX3RoaXMuc2V0UG9wdXBTaG93biA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgdmFyIGN1cnJlbnRTdGF0ZSA9IF90aGlzLnN0YXRlLnBvcHVwU2hvd247XG5cbiAgICAgIHZhciBfc2V0UG9wdXBTaG93biA9IGZ1bmN0aW9uIF9zZXRQb3B1cFNob3duKCkge1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgcG9wdXBTaG93bjogIWN1cnJlbnRTdGF0ZSxcbiAgICAgICAgICBpZExvY2F0aW9uOiBpZFxuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIGlmICh0eXBlb2YgaWQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIF90aGlzLnByb3BzLmRldmljZUV4aXN0SW5Mb2NhdGlvbihpZCwgX3NldFBvcHVwU2hvd24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3NldFBvcHVwU2hvd24oKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuc2hvd0lucHV0TG9jYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGlucHV0OiAhX3RoaXMuc3RhdGUuaW5wdXRcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5zZXRJbnB1dFZhbHVlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgaW5wdXRWYWx1ZTogZS50YXJnZXQudmFsdWVcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5kZWxldGVTZWxlY3RlZExvY2F0aW9uID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBfdGhpcy5wcm9wcy5kZWxldGVMb2NhdGlvbihpZCk7XG4gICAgfTtcblxuICAgIF90aGlzLnNldExvY2F0aW9uVmFsdWUgPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgbG9jYXRpb25WYWx1ZTogbG9jYXRpb24ubGFiZWxcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpcy5wcm9wcy5zZWxlY3RMb2NhdGlvbihsb2NhdGlvbi5sYWJlbCk7XG4gICAgICBfdGhpcy5zaG93SW5wdXRMb2NhdGlvbigpO1xuICAgIH07XG5cbiAgICBfdGhpcy5hZGRMb2NhdGlvblZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnN0YXRlLmlucHV0VmFsdWUudHJpbSgpICE9PSAnJykge1xuICAgICAgICBfdGhpcy5wcm9wcy5hZGRMb2NhdGlvbihfdGhpcy5zdGF0ZS5pbnB1dFZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBpbnB1dFZhbHVlOiAnJ1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgaW5wdXQ6IGZhbHNlLFxuICAgICAgbG9jYXRpb25WYWx1ZTogJycsXG4gICAgICBpbnB1dFZhbHVlOiAnJyxcbiAgICAgIHBvcHVwU2hvd246IGZhbHNlLFxuICAgICAgaWRMb2NhdGlvbjogJydcbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTZWxlY3RMb2NhdGlvbiwgW3tcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBjbGFzc05hbWU6ICdTZWxlY3QtY29udHJvbCcgfSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdTZWxlY3QtdmFsdWUgc2VsZWN0LW1lbnUtY29udGFpbmVyJyB9LFxuICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ3NlbGVjdC1tZW51LWxhYmVsJyxcbiAgICAgICAgICAgICAgICBvbkNsaWNrOiB0aGlzLnNob3dJbnB1dExvY2F0aW9uIH0sXG4gICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICdzcGFuJyxcbiAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ1NlbGVjdC12YWx1ZS1sYWJlbCcgfSxcbiAgICAgICAgICAgICAgICAhdGhpcy5zdGF0ZS5sb2NhdGlvblZhbHVlID8gdGhpcy5wcm9wcy5kZWZhdWx0TG9jYXRpb24gOiB0aGlzLnN0YXRlLmxvY2F0aW9uVmFsdWVcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2knLCB7IGNsYXNzTmFtZTogJ3NlbGVjdC10b2dnbGUgZmEgJyArICh0aGlzLnN0YXRlLmlucHV0ID8gJ2ZhLWNhcmV0LXVwJyA6ICdmYS1jYXJldC1kb3duJykgfSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICApLFxuICAgICAgICAgIHRoaXMuc3RhdGUuaW5wdXQgPyBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdTZWxlY3QtbWVudV9fb3V0ZXInIH0sXG4gICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnU2VsZWN0LWlucHV0LWxvY2F0aW9uJyB9LFxuICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnaW5wdXQnLCB7IHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ0FkZCBuZXcgbG9jYXRpb24nLFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ1NlbGVjdC1pbnB1dF9hZGQtbG9jYXRpb24nLFxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLnNldElucHV0VmFsdWUsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuc3RhdGUuaW5wdXRWYWx1ZSB9KSxcbiAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2knLCB7IGNsYXNzTmFtZTogJ2ZhIGZhLXBsdXMgU2VsZWN0LWlucHV0X2FkZC1sb2NhdGlvbl9pY29uJyxcbiAgICAgICAgICAgICAgICBvbkNsaWNrOiB0aGlzLmFkZExvY2F0aW9uVmFsdWUgfSlcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgJ3VsJyxcbiAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdTZWxlY3QtbWVudScgfSxcbiAgICAgICAgICAgICAgdGhpcy5wcm9wcy5sb2NhdGlvbnMubWFwKGZ1bmN0aW9uIChsb2NhdGlvbiwgaSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICdsaScsXG4gICAgICAgICAgICAgICAgICB7IGtleTogaSwgY2xhc3NOYW1lOiAnU2VsZWN0LW9wdGlvbicgfSxcbiAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAnc3BhbicsXG4gICAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnU2VsZWN0LW9wdGlvbl9faXRlbScsXG4gICAgICAgICAgICAgICAgICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljayhlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLnNldExvY2F0aW9uVmFsdWUobG9jYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgIH0gfSxcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24ubGFiZWxcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnaScsIHsgY2xhc3NOYW1lOiAnZmEgZmEtdHJhc2ggU2VsZWN0LW9wdGlvbl9faWNvbicsXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczIuc2V0UG9wdXBTaG93bihsb2NhdGlvbi5faWQpO1xuICAgICAgICAgICAgICAgICAgICB9IH0pXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICApIDogbnVsbFxuICAgICAgICApLFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBfUG9wdXAuUG9wdXAsXG4gICAgICAgICAge1xuICAgICAgICAgICAgc2V0UG9wdXBTaG93bjogdGhpcy5zZXRQb3B1cFNob3duLFxuICAgICAgICAgICAgcG9wdXBTaG93bjogdGhpcy5zdGF0ZS5wb3B1cFNob3duLFxuICAgICAgICAgICAgaGVhZGVyOiAnQ29uZmlybSB0aGUgYWN0aW9uJyxcbiAgICAgICAgICAgIHRleHQ6IHRoaXMucHJvcHMuZGV2aWNlSW5Mb2NhdGlvbiA/ICdZb3UgY2FuXFwndCBkZWxldGUgdGhpcyBsb2NhdGlvbiwgYmVjYXVzZSB5b3UgaGF2ZSBkZXZpY2VzIGluIGl0JyA6ICdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIHRoaXMgbG9jYXRpb24/JyB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9CdXR0b24uQnV0dG9uLCB7XG4gICAgICAgICAgICBkaXNhYmxlZDogdGhpcy5wcm9wcy5kZXZpY2VJbkxvY2F0aW9uLFxuICAgICAgICAgICAgc2V0UG9wdXBTaG93bjogdGhpcy5zZXRQb3B1cFNob3duLFxuICAgICAgICAgICAgb2tIYW5kbGVyOiBmdW5jdGlvbiBva0hhbmRsZXIoKSB7XG4gICAgICAgICAgICAgIF90aGlzMi5kZWxldGVTZWxlY3RlZExvY2F0aW9uKF90aGlzMi5zdGF0ZS5pZExvY2F0aW9uKTtcbiAgICAgICAgICAgICAgX3RoaXMyLnNldFBvcHVwU2hvd24oKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGFzc05hbWU6IHRoaXMucHJvcHMuZGV2aWNlSW5Mb2NhdGlvbiA/ICdidG4gYnRuLS1kZWZhdWx0JyA6ICdidG4gcG9wdXBfX2J0bicsXG4gICAgICAgICAgICBpbm5lclRleHQ6ICdPaydcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfQnV0dG9uLkJ1dHRvbiwge1xuICAgICAgICAgICAgb2tIYW5kbGVyOiBmdW5jdGlvbiBva0hhbmRsZXIoKSB7XG4gICAgICAgICAgICAgIF90aGlzMi5zZXRQb3B1cFNob3duKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2xhc3NOYW1lOiAnYnRuIGJ0bi0tZGVmYXVsdCBwb3B1cF9fYnRuJyxcbiAgICAgICAgICAgIGlubmVyVGV4dDogJ0NhbmNlbCdcbiAgICAgICAgICB9KVxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTZWxlY3RMb2NhdGlvbjtcbn0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFNlbGVjdExvY2F0aW9uO1xuXG5cblNlbGVjdExvY2F0aW9uLnByb3BUeXBlcyA9IHtcbiAgbG9jYXRpb25zOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmFycmF5LFxuICBhZGRMb2NhdGlvbjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBkZWxldGVMb2NhdGlvbjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBzZWxlY3RMb2NhdGlvbjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBkZWZhdWx0TG9jYXRpb246IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBkZXZpY2VFeGlzdEluTG9jYXRpb246IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgZGV2aWNlSW5Mb2NhdGlvbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sXG59O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9jb21wb25lbnRzL1NldHRpbmdzTGlzdC9TZXR0aW5nc0xpc3QuanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuU2V0dGluZ3NMaXN0ID0gdW5kZWZpbmVkO1xuXG52YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3JlYWN0L3JlYWN0LmpzXCIpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qc1wiKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9jb21wb25lbnRzTmFtZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9zcmMvZGF0YS9jb21wb25lbnRzTmFtZXMuanNcIik7XG5cbnZhciBfU2V0dGluZ3NMaXN0SXRlbSA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3NyYy9jb21wb25lbnRzL1NldHRpbmdzTGlzdEl0ZW0vU2V0dGluZ3NMaXN0SXRlbS5qc1wiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIFNldHRpbmdzTGlzdCA9IGV4cG9ydHMuU2V0dGluZ3NMaXN0ID0gZnVuY3Rpb24gU2V0dGluZ3NMaXN0KHByb3BzKSB7XG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAnZGl2JyxcbiAgICB7IGNsYXNzTmFtZTogJ3NldHRpbmdzLWJsb2NrJyB9LFxuICAgIHByb3BzLnNldHRpbmdzLml0ZW1zLm1hcChmdW5jdGlvbiAoc2V0dGluZywgaSkge1xuICAgICAgdmFyIEl0ZW0gPSBfY29tcG9uZW50c05hbWVzLnNldHRpbmdzQ29tcG9uZW50c1tzZXR0aW5nLm5hbWVdO1xuXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIF9TZXR0aW5nc0xpc3RJdGVtLlNldHRpbmdzTGlzdEl0ZW0sXG4gICAgICAgIHtcbiAgICAgICAgICBrZXk6IGksXG4gICAgICAgICAgYWRkRGVzY3JpcHRpb246IHByb3BzLmFkZERlc2NyaXB0aW9uLFxuICAgICAgICAgIHN0eWxlTmFtZTogJ3NldHRpbmdzLScgKyBzZXR0aW5nLm5hbWUudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICBuYW1lOiBzZXR0aW5nLm5hbWUsXG4gICAgICAgICAgZGVsZXRlSXRlbTogcHJvcHMuZGVsZXRlSXRlbSxcbiAgICAgICAgICBzZXRJdGVtVmFsdWU6IHByb3BzLnNldEl0ZW1WYWx1ZSxcbiAgICAgICAgICBzZXRQYXJhbWV0ZXJzOiBwcm9wcy5zZXRQYXJhbWV0ZXJzLFxuICAgICAgICAgIGNoZWNrZWQ6IHNldHRpbmcuZGF0YSxcbiAgICAgICAgICBkYXRhOiBzZXR0aW5nLmRhdGEsXG4gICAgICAgICAgcGFyYW1zOiBzZXR0aW5nLnBhcmFtcyxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogc2V0dGluZy5kZXNjcmlwdGlvbixcbiAgICAgICAgICBpZDogaSB9LFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChJdGVtLCBudWxsKVxuICAgICAgKTtcbiAgICB9KVxuICApO1xufTtcblxuU2V0dGluZ3NMaXN0LnByb3BUeXBlcyA9IHtcbiAgc2V0dGluZ3M6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICB3aWR0aDogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gIGFkZERlc2NyaXB0aW9uOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIGRlbGV0ZUl0ZW06IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgc2V0SXRlbVZhbHVlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIHNldFBhcmFtZXRlcnM6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuY1xufTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvY29tcG9uZW50cy9TZXR0aW5nc0xpc3RJdGVtL1NldHRpbmdzTGlzdEl0ZW0uanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuU2V0dGluZ3NMaXN0SXRlbSA9IHVuZGVmaW5lZDtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9yZWFjdC9yZWFjdC5qc1wiKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbl9fd2VicGFja19yZXF1aXJlX18oXCIuL3NyYy9jb21wb25lbnRzL1NldHRpbmdzTGlzdEl0ZW0vaW5kZXguc2Nzc1wiKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qc1wiKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIFNldHRpbmdzTGlzdEl0ZW0gPSBleHBvcnRzLlNldHRpbmdzTGlzdEl0ZW0gPSBmdW5jdGlvbiBTZXR0aW5nc0xpc3RJdGVtKHByb3BzKSB7XG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAnZGl2JyxcbiAgICB7IGNsYXNzTmFtZTogJ3NldHRpbmdzICcgKyBwcm9wcy5zdHlsZU5hbWUgfSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBjbGFzc05hbWU6ICdpdGVtLWhlYWRlcicgfSxcbiAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAncCcsXG4gICAgICAgIHsgY2xhc3NOYW1lOiAnaXRlbS1oZWFkZXJfX25hbWUnIH0sXG4gICAgICAgIHByb3BzLm5hbWVcbiAgICAgICksXG4gICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJywge1xuICAgICAgICBjbGFzc05hbWU6ICdpdGVtLWhlYWRlcl9fZGVsZXRlLWJ0bicsXG4gICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soKSB7XG4gICAgICAgICAgcmV0dXJuIHByb3BzLmRlbGV0ZUl0ZW0ocHJvcHMuaWQpO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICksXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIG51bGwsXG4gICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2xhYmVsJyxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jywge1xuICAgICAgICAgIGNsYXNzTmFtZTogJ2Rlc2NyaXB0aW9uLWlucHV0JyxcbiAgICAgICAgICBwbGFjZWhvbGRlcjogJ0Rlc2NyaXB0aW9uJyxcbiAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgdmFsdWU6IHByb3BzLmRlc2NyaXB0aW9uLFxuICAgICAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZShlKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJvcHMuYWRkRGVzY3JpcHRpb24ocHJvcHMuaWQsIGUudGFyZ2V0LnZhbHVlKTtcbiAgICAgICAgICB9IH0pXG4gICAgICApXG4gICAgKSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY2xvbmVFbGVtZW50KHByb3BzLmNoaWxkcmVuLCB7XG4gICAgICBzdHlsZU5hbWU6ICdpdGVtLWJvZHknLFxuICAgICAgc2V0SXRlbVZhbHVlOiBwcm9wcy5zZXRJdGVtVmFsdWUsXG4gICAgICBzZXRQYXJhbWV0ZXJzOiBwcm9wcy5zZXRQYXJhbWV0ZXJzLFxuICAgICAgaXRlbUlkOiBwcm9wcy5pZCxcbiAgICAgIGNoZWNrZWQ6IHByb3BzLmNoZWNrZWQsXG4gICAgICBkYXRhOiBwcm9wcy5kYXRhLFxuICAgICAgcGFyYW1zOiBwcm9wcy5wYXJhbXMsXG4gICAgICBzaG93TWluTWF4OiB0cnVlXG4gICAgfSlcbiAgKTtcbn07XG5cblNldHRpbmdzTGlzdEl0ZW0ucHJvcFR5cGVzID0ge1xuICBzdHlsZU5hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBzZXRJdGVtVmFsdWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgY2hlY2tlZDogX3Byb3BUeXBlczIuZGVmYXVsdC5hbnksXG4gIGlkOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgbmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGFkZERlc2NyaXB0aW9uOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIGRlbGV0ZUl0ZW06IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYy5pc1JlcXVpcmVkLFxuICBjaGlsZHJlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5hbnksXG4gIGRlc2NyaXB0aW9uOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgZGF0YTogX3Byb3BUeXBlczIuZGVmYXVsdC5hbnksXG4gIHNldFBhcmFtZXRlcnM6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgcGFyYW1zOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdFxufTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvY29tcG9uZW50cy9TZXR0aW5nc0xpc3RJdGVtL2luZGV4LnNjc3NcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvY29tcG9uZW50cy9UaW1lclNldHRpbmdzL1RpbWVyLmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB1bmRlZmluZWQ7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcmVhY3QvcmVhY3QuanNcIik7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzXCIpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9zcmMvY29tcG9uZW50cy9UaW1lclNldHRpbmdzL1RpbWVyU3R5bGUuc2Nzc1wiKTtcblxudmFyIF9SYW5nZSA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3NyYy9jb21wb25lbnRzL1JhbmdlU2V0dGluZ3MvUmFuZ2UuanNcIik7XG5cbnZhciBfUmFuZ2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUmFuZ2UpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBUaW1lclNldHRpbmdzID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFRpbWVyU2V0dGluZ3MsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRpbWVyU2V0dGluZ3MocHJvcHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGltZXJTZXR0aW5ncyk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoVGltZXJTZXR0aW5ncy5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFRpbWVyU2V0dGluZ3MpKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfdGhpcy5jaGFuZ2VIb3VycyA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBob3VyczogZXZlbnQudGFyZ2V0LnZhbHVlXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuY2hhbmdlTWludXRlcyA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBtaW51dGVzOiBldmVudC50YXJnZXQudmFsdWVcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5zZXRUaW1lclZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMucHJvcHMuc2V0SXRlbVZhbHVlKF90aGlzLnN0YXRlLmhvdXJzICsgJzonICsgX3RoaXMuc3RhdGUubWludXRlcywgX3RoaXMucHJvcHMuaXRlbUlkLCBfdGhpcy5wcm9wcy5kZXZpY2VJZCk7XG4gICAgfTtcblxuICAgIF90aGlzLmhvdXJzS2V5RG93biA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKChldmVudC5rZXlDb2RlIDwgNDcgfHwgZXZlbnQua2V5Q29kZSA+IDU4KSAmJiBldmVudC5rZXlDb2RlICE9PSA4KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgICBpZiAocGFyc2VJbnQoZXZlbnQudGFyZ2V0LnZhbHVlICsgZXZlbnQua2V5KSA+IDk5KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLm1pbnV0ZXNLZXlEb3duID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoKGV2ZW50LmtleUNvZGUgPCA0NyB8fCBldmVudC5rZXlDb2RlID4gNTgpICYmIGV2ZW50LmtleUNvZGUgIT09IDgpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJzZUludChldmVudC50YXJnZXQudmFsdWUgKyBldmVudC5rZXkpID4gNTkpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBob3VyczogMCxcbiAgICAgIG1pbnV0ZXM6IDBcbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhUaW1lclNldHRpbmdzLCBbe1xuICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICBpZiAodHlwZW9mIHRoaXMucHJvcHMuZGF0YSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdmFyIHRpbWUgPSB0aGlzLnByb3BzLmRhdGEuc3BsaXQoJzonKTtcblxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBob3VyczogdGltZVswXSxcbiAgICAgICAgICBtaW51dGVzOiB0aW1lWzFdXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsgY2xhc3NOYW1lOiAnbS10aW1lICcgKyB0aGlzLnByb3BzLnN0eWxlTmFtZSB9LFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IGNsYXNzTmFtZTogJ3Nob3d0aW1lJyB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdpbnB1dCcsIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ3Nob3d0aW1lX190aW1lJyxcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLnN0YXRlLmhvdXJzLFxuICAgICAgICAgICAgb25DaGFuZ2U6IHRoaXMuY2hhbmdlSG91cnMsXG4gICAgICAgICAgICBvbktleURvd246IHRoaXMuaG91cnNLZXlEb3duXG4gICAgICAgICAgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnc3BhbicsXG4gICAgICAgICAgICB7IGNsYXNzTmFtZTogJ3Nob3d0aW1lX19zZXBhcmF0ZXInIH0sXG4gICAgICAgICAgICAnOidcbiAgICAgICAgICApLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdpbnB1dCcsIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ3Nob3d0aW1lX190aW1lJyxcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLnN0YXRlLm1pbnV0ZXMsXG4gICAgICAgICAgICBvbkNoYW5nZTogdGhpcy5jaGFuZ2VNaW51dGVzLFxuICAgICAgICAgICAgb25LZXlEb3duOiB0aGlzLm1pbnV0ZXNLZXlEb3duXG4gICAgICAgICAgfSlcbiAgICAgICAgKSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBjbGFzc05hbWU6ICdzbGlkZXJzJyB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7IGNsYXNzTmFtZTogJ3NsaWRlcnNfX3RpbWUtdGV4dCcgfSxcbiAgICAgICAgICAgICdIb3VycydcbiAgICAgICAgICApLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9SYW5nZTIuZGVmYXVsdCwge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiAndS1zbGlkZXItdGltZScsXG4gICAgICAgICAgICBtaW46IDAsXG4gICAgICAgICAgICBtYXg6IDk5LFxuICAgICAgICAgICAgc2V0SXRlbVZhbHVlOiB0aGlzLnByb3BzLnNldEl0ZW1WYWx1ZSxcbiAgICAgICAgICAgIG9uVGltZXJDaGFuZ2U6IHRoaXMuY2hhbmdlSG91cnMsXG4gICAgICAgICAgICBzZXRUaW1lclZhbHVlOiB0aGlzLnNldFRpbWVyVmFsdWUsXG4gICAgICAgICAgICBoaWRlTGFiZWw6IHRydWUsXG4gICAgICAgICAgICBkYXRhOiB0aGlzLnN0YXRlLmhvdXJzXG4gICAgICAgICAgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnc2xpZGVyc19fdGltZS10ZXh0JyB9LFxuICAgICAgICAgICAgJ01pbnV0ZXMnXG4gICAgICAgICAgKSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfUmFuZ2UyLmRlZmF1bHQsIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ3Utc2xpZGVyLXRpbWUnLFxuICAgICAgICAgICAgbWluOiAwLFxuICAgICAgICAgICAgbWF4OiA1OSxcbiAgICAgICAgICAgIHNldEl0ZW1WYWx1ZTogdGhpcy5wcm9wcy5zZXRJdGVtVmFsdWUsXG4gICAgICAgICAgICBvblRpbWVyQ2hhbmdlOiB0aGlzLmNoYW5nZU1pbnV0ZXMsXG4gICAgICAgICAgICBzZXRUaW1lclZhbHVlOiB0aGlzLnNldFRpbWVyVmFsdWUsXG4gICAgICAgICAgICBoaWRlTGFiZWw6IHRydWUsXG4gICAgICAgICAgICBkYXRhOiB0aGlzLnN0YXRlLm1pbnV0ZXNcbiAgICAgICAgICB9KVxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBUaW1lclNldHRpbmdzO1xufShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gVGltZXJTZXR0aW5ncztcblxuVGltZXJTZXR0aW5ncy5wcm9wVHlwZXMgPSB7XG4gIHN0eWxlTmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIHZhbHVlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgb25DaGFuZ2U6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgc2V0SXRlbVZhbHVlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIGl0ZW1JZDogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gIG5ld1ZhbHVlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgZGF0YTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGRldmljZUlkOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZ1xufTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvY29tcG9uZW50cy9UaW1lclNldHRpbmdzL1RpbWVyU3R5bGUuc2Nzc1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG4vLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9jb21wb25lbnRzL1RvZ2dsZVNldHRpbmdzL1RvZ2dsZVNldHRpbmdzLmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB1bmRlZmluZWQ7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcmVhY3QvcmVhY3QuanNcIik7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzXCIpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9zcmMvY29tcG9uZW50cy9Ub2dnbGVTZXR0aW5ncy9Ub2dnbGVTdHlsZS5zY3NzXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBUb2dnbGVTZXR0aW5ncyA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhUb2dnbGVTZXR0aW5ncywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVG9nZ2xlU2V0dGluZ3MocHJvcHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVG9nZ2xlU2V0dGluZ3MpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFRvZ2dsZVNldHRpbmdzLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVG9nZ2xlU2V0dGluZ3MpKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfdGhpcy5vbkNoYW5nZVZhbHVlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIF90aGlzLnByb3BzLnNldEl0ZW1WYWx1ZSghX3RoaXMucHJvcHMuY2hlY2tlZCwgX3RoaXMucHJvcHMuaXRlbUlkLCBfdGhpcy5wcm9wcy5kZXZpY2VJZCk7XG4gICAgfTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhUb2dnbGVTZXR0aW5ncywgW3tcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IGNsYXNzTmFtZTogJycgKyB0aGlzLnByb3BzLnN0eWxlTmFtZSB9LFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnbGFiZWwnLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiAnc3dpdGNoJyB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdpbnB1dCcsIHtcbiAgICAgICAgICAgIHR5cGU6ICdjaGVja2JveCcsXG4gICAgICAgICAgICBjaGVja2VkOiB0aGlzLnByb3BzLmNoZWNrZWQsXG4gICAgICAgICAgICBvbkNoYW5nZTogdGhpcy5vbkNoYW5nZVZhbHVlXG4gICAgICAgICAgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiAnc2xpZGVyIHJvdW5kJyB9KVxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBUb2dnbGVTZXR0aW5ncztcbn0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFRvZ2dsZVNldHRpbmdzO1xuXG5cblRvZ2dsZVNldHRpbmdzLnByb3BUeXBlcyA9IHtcbiAgZGV2aWNlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgc3R5bGVOYW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgY2hlY2tlZDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLmlzUmVxdWlyZWQsXG4gIHNldEl0ZW1WYWx1ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBpdGVtSWQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYW55LFxuICBuZXdWYWx1ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGRldmljZUlkOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZ1xufTtcblRvZ2dsZVNldHRpbmdzLmRlZmF1bHRQcm9wcyA9IHtcbiAgY2hlY2tlZDogZmFsc2Vcbn07XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL2NvbXBvbmVudHMvVG9nZ2xlU2V0dGluZ3MvVG9nZ2xlU3R5bGUuc2Nzc1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG4vLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9jb21wb25lbnRzL1ZhbHVlU2V0dGluZ3MvVmFsdWUuanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHVuZGVmaW5lZDtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9yZWFjdC9yZWFjdC5qc1wiKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanNcIik7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbl9fd2VicGFja19yZXF1aXJlX18oXCIuL3NyYy9jb21wb25lbnRzL1ZhbHVlU2V0dGluZ3MvVmFsdWVTdHlsZS5zY3NzXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBWYWx1ZVNldHRpbmdzID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFZhbHVlU2V0dGluZ3MsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFZhbHVlU2V0dGluZ3MocHJvcHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVmFsdWVTZXR0aW5ncyk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoVmFsdWVTZXR0aW5ncy5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFZhbHVlU2V0dGluZ3MpKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfdGhpcy5zZXRUZXh0VmFsdWUgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgX3RoaXMucHJvcHMuc2V0SXRlbVZhbHVlKF90aGlzLnN0YXRlLnZhbHVlLCBfdGhpcy5wcm9wcy5pdGVtSWQsIF90aGlzLnByb3BzLmRldmljZUlkKTtcbiAgICB9O1xuXG4gICAgX3RoaXMub25DaGFuZ2VWYWx1ZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgbmV3VmFsdWUgPSBlLnRhcmdldC52YWx1ZTtcblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICB2YWx1ZTogbmV3VmFsdWVcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHZhbHVlOiAnJ1xuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFZhbHVlU2V0dGluZ3MsIFt7XG4gICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5wcm9wcy5kYXRhICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICB2YWx1ZTogdGhpcy5wcm9wcy5kYXRhXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsgY2xhc3NOYW1lOiAnJyArIHRoaXMucHJvcHMuc3R5bGVOYW1lIH0sXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdpbnB1dCcsIHtcbiAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgY2xhc3NOYW1lOiAndmFsdWVfaW5wdXQnLFxuICAgICAgICAgIHBsYWNlaG9sZGVyOiAnSW5wdXQuLi4nLFxuICAgICAgICAgIHZhbHVlOiB0aGlzLnN0YXRlLnZhbHVlLFxuICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLm9uQ2hhbmdlVmFsdWUsXG4gICAgICAgICAgb25CbHVyOiB0aGlzLnNldFRleHRWYWx1ZVxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVmFsdWVTZXR0aW5ncztcbn0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFZhbHVlU2V0dGluZ3M7XG5cblxuVmFsdWVTZXR0aW5ncy5wcm9wVHlwZXMgPSB7XG4gIHN0eWxlTmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIHZhbHVlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgb25DaGFuZ2VWYWx1ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBzZXRJdGVtVmFsdWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgaXRlbUlkOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgbmV3VmFsdWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBkYXRhOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgZGV2aWNlSWQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nXG59O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9jb21wb25lbnRzL1ZhbHVlU2V0dGluZ3MvVmFsdWVTdHlsZS5zY3NzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL2RhdGEvY29tcG9uZW50c05hbWVzLmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnNldHRpbmdzQ29tcG9uZW50cyA9IHVuZGVmaW5lZDtcblxudmFyIF9SYW5nZSA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3NyYy9jb21wb25lbnRzL1JhbmdlU2V0dGluZ3MvUmFuZ2UuanNcIik7XG5cbnZhciBfUmFuZ2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUmFuZ2UpO1xuXG52YXIgX1RvZ2dsZVNldHRpbmdzID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vc3JjL2NvbXBvbmVudHMvVG9nZ2xlU2V0dGluZ3MvVG9nZ2xlU2V0dGluZ3MuanNcIik7XG5cbnZhciBfVG9nZ2xlU2V0dGluZ3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVG9nZ2xlU2V0dGluZ3MpO1xuXG52YXIgX1RpbWVyID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vc3JjL2NvbXBvbmVudHMvVGltZXJTZXR0aW5ncy9UaW1lci5qc1wiKTtcblxudmFyIF9UaW1lcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9UaW1lcik7XG5cbnZhciBfVmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9zcmMvY29tcG9uZW50cy9WYWx1ZVNldHRpbmdzL1ZhbHVlLmpzXCIpO1xuXG52YXIgX1ZhbHVlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1ZhbHVlKTtcblxudmFyIF9DaGFydCA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3NyYy9jb21wb25lbnRzL0NoYXJ0L0NoYXJ0LmpzXCIpO1xuXG52YXIgX0NoYXJ0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NoYXJ0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHNldHRpbmdzQ29tcG9uZW50cyA9IGV4cG9ydHMuc2V0dGluZ3NDb21wb25lbnRzID0ge1xuICBMaW5lQ2hhcnQ6IF9DaGFydDIuZGVmYXVsdCxcbiAgUmFuZ2U6IF9SYW5nZTIuZGVmYXVsdCxcbiAgVGltZXI6IF9UaW1lcjIuZGVmYXVsdCxcbiAgVmFsdWU6IF9WYWx1ZTIuZGVmYXVsdCxcbiAgVG9nZ2xlOiBfVG9nZ2xlU2V0dGluZ3MyLmRlZmF1bHRcbn07XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL3BhZ2VzL0J1aWxkZXIvQnVpbGRlci5qc1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3JlYWN0L3JlYWN0LmpzXCIpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWR1eCA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9yZWR1eC9lcy9pbmRleC5qc1wiKTtcblxudmFyIF9yZWFjdFJlZHV4ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2luZGV4LmpzXCIpO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9zcmMvcGFnZXMvQnVpbGRlci9idWlsZGVyLnNjc3NcIik7XG5cbnZhciBfZGV2aWNlRm9ybSA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3NyYy9jb21wb25lbnRzL0RldmljZUZvcm0vZGV2aWNlRm9ybS5qc1wiKTtcblxudmFyIF9kZXZpY2VGb3JtMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RldmljZUZvcm0pO1xuXG52YXIgX1Byb3RvdHlwZSA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3NyYy9jb21wb25lbnRzL1Byb3RvdHlwZS9Qcm90b3R5cGUuanNcIik7XG5cbnZhciBfUHJvdG90eXBlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1Byb3RvdHlwZSk7XG5cbnZhciBfTWVzc2FnZSA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3NyYy9jb21wb25lbnRzL01lc3NhZ2UvTWVzc2FnZS5qc1wiKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qc1wiKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9idWlsZGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vc3JjL2FjdGlvbnMvYnVpbGRlci5hY3Rpb24uanNcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIEJ1aWxkZXIgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoQnVpbGRlciwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQnVpbGRlcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQnVpbGRlcik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEJ1aWxkZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihCdWlsZGVyKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQnVpbGRlciwgW3tcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsTW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgICBpZiAodHlwZW9mIHRoaXMucHJvcHMubWF0Y2gucGFyYW1zLmlkICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aGlzLnByb3BzLmVkaXREZXZpY2UodGhpcy5wcm9wcy5tYXRjaC5wYXJhbXMuaWQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wcm9wcy5yZXNldEJ1aWxkZXIoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnREaWRVcGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMucHJvcHMuc3RhdHVzID09PSAnRE9ORScpIHtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMyLnByb3BzLnJlc2V0QnVpbGRlcigpO1xuICAgICAgICAgIF90aGlzMi5wcm9wcy5oaXN0b3J5LnB1c2goJy9kZXZpY2VzJyk7XG4gICAgICAgIH0sIDEwMDApO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ3NlY3Rpb24nLFxuICAgICAgICB7IGNsYXNzTmFtZTogJ2J1aWxkZXIgZGV2aWNlLWxpc3QnIH0sXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdoMScsXG4gICAgICAgICAgeyBjbGFzc05hbWU6ICdkZXZpY2UtbGlzdF9fdGl0bGUnIH0sXG4gICAgICAgICAgJ0RldmljZSBCdWlsZGVyJ1xuICAgICAgICApLFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZGV2aWNlRm9ybTIuZGVmYXVsdCwgbnVsbCksXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9NZXNzYWdlLk1lc3NhZ2UsIHtcbiAgICAgICAgICBjbGVhclN0YXR1czogdGhpcy5wcm9wcy5jbGVhckFkZFN0YXR1cyxcbiAgICAgICAgICBzdGF0dXM6IHRoaXMucHJvcHMuc3RhdHVzLFxuICAgICAgICAgIGhlYWRlcjogJ0Vycm9yJyxcbiAgICAgICAgICB0ZXh0OiB0aGlzLnByb3BzLmVycm9yVGV4dCB9KSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2gzJyxcbiAgICAgICAgICB7IGNsYXNzTmFtZTogJ2J1aWxkZXJfX3RpdGxlJyB9LFxuICAgICAgICAgICdQcm90b3R5cGUnXG4gICAgICAgICksXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Qcm90b3R5cGUyLmRlZmF1bHQsIHtcbiAgICAgICAgICBkZXZpY2U6IHRoaXMucHJvcHMuZGV2aWNlLFxuICAgICAgICAgIGRlbGV0ZUl0ZW06IHRoaXMucHJvcHMuZGVsZXRlSXRlbSB9KVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQnVpbGRlcjtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbmZ1bmN0aW9uIG1hcFN0YXRlVG9Qcm9wcyhzdG9yZSkge1xuICByZXR1cm4ge1xuICAgIGRldmljZTogc3RvcmUuYnVpbGRlci5kZXZpY2UsXG4gICAgc3RhdHVzOiBzdG9yZS5idWlsZGVyLnVwbG9hZFN0YXR1cyxcbiAgICBlcnJvclRleHQ6IHN0b3JlLmJ1aWxkZXIuZXJyb3JUZXh0XG4gIH07XG59XG5cbmZ1bmN0aW9uIG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCkge1xuICByZXR1cm4ge1xuICAgIGRlbGV0ZUl0ZW06ICgwLCBfcmVkdXguYmluZEFjdGlvbkNyZWF0b3JzKShfYnVpbGRlci5kZWxldGVJdGVtLCBkaXNwYXRjaCksXG4gICAgcmVzZXRCdWlsZGVyOiAoMCwgX3JlZHV4LmJpbmRBY3Rpb25DcmVhdG9ycykoX2J1aWxkZXIucmVzZXRQcm90bywgZGlzcGF0Y2gpLFxuICAgIGVkaXREZXZpY2U6ICgwLCBfcmVkdXguYmluZEFjdGlvbkNyZWF0b3JzKShfYnVpbGRlci5lZGl0RGV2aWNlLCBkaXNwYXRjaCksXG4gICAgY2xlYXJBZGRTdGF0dXM6ICgwLCBfcmVkdXguYmluZEFjdGlvbkNyZWF0b3JzKShfYnVpbGRlci5jbGVhckFkZFN0YXR1cywgZGlzcGF0Y2gpXG4gIH07XG59XG5cbkJ1aWxkZXIucHJvcFR5cGVzID0ge1xuICBzdGF0dXM6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBkZXZpY2U6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICByZXNldEJ1aWxkZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgZGVsZXRlSXRlbTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBoaXN0b3J5OiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgbWF0Y2g6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICBwYXJhbXM6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICBpZDogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGVkaXREZXZpY2U6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgY2xlYXJBZGRTdGF0dXM6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgZXJyb3JUZXh0OiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZ1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gKDAsIF9yZWFjdFJlZHV4LmNvbm5lY3QpKG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKShCdWlsZGVyKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvcGFnZXMvQnVpbGRlci9idWlsZGVyLnNjc3NcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuLyoqKi8gfSlcblxufSk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIDAuaW5kZXhfYnVuZGxlLmpzIiwiLyohXG4gIENvcHlyaWdodCAoYykgMjAxNiBKZWQgV2F0c29uLlxuICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHNlZVxuICBodHRwOi8vamVkd2F0c29uLmdpdGh1Yi5pby9jbGFzc25hbWVzXG4qL1xuLyogZ2xvYmFsIGRlZmluZSAqL1xuXG4oZnVuY3Rpb24gKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIGhhc093biA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5cdGZ1bmN0aW9uIGNsYXNzTmFtZXMgKCkge1xuXHRcdHZhciBjbGFzc2VzID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdGlmICghYXJnKSBjb250aW51ZTtcblxuXHRcdFx0dmFyIGFyZ1R5cGUgPSB0eXBlb2YgYXJnO1xuXG5cdFx0XHRpZiAoYXJnVHlwZSA9PT0gJ3N0cmluZycgfHwgYXJnVHlwZSA9PT0gJ251bWJlcicpIHtcblx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZyk7XG5cdFx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuXHRcdFx0XHRjbGFzc2VzLnB1c2goY2xhc3NOYW1lcy5hcHBseShudWxsLCBhcmcpKTtcblx0XHRcdH0gZWxzZSBpZiAoYXJnVHlwZSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0Zm9yICh2YXIga2V5IGluIGFyZykge1xuXHRcdFx0XHRcdGlmIChoYXNPd24uY2FsbChhcmcsIGtleSkgJiYgYXJnW2tleV0pIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChrZXkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdG1vZHVsZS5leHBvcnRzID0gY2xhc3NOYW1lcztcblx0fSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gcmVnaXN0ZXIgYXMgJ2NsYXNzbmFtZXMnLCBjb25zaXN0ZW50IHdpdGggbnBtIHBhY2thZ2UgbmFtZVxuXHRcdGRlZmluZSgnY2xhc3NuYW1lcycsIFtdLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gY2xhc3NOYW1lcztcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuY2xhc3NOYW1lcyA9IGNsYXNzTmFtZXM7XG5cdH1cbn0oKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2NsYXNzbmFtZXMvaW5kZXguanMiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIGZhY3RvcnkgPSByZXF1aXJlKCcuL2ZhY3RvcnknKTtcblxuaWYgKHR5cGVvZiBSZWFjdCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgdGhyb3cgRXJyb3IoXG4gICAgJ2NyZWF0ZS1yZWFjdC1jbGFzcyBjb3VsZCBub3QgZmluZCB0aGUgUmVhY3Qgb2JqZWN0LiBJZiB5b3UgYXJlIHVzaW5nIHNjcmlwdCB0YWdzLCAnICtcbiAgICAgICdtYWtlIHN1cmUgdGhhdCBSZWFjdCBpcyBiZWluZyBsb2FkZWQgYmVmb3JlIGNyZWF0ZS1yZWFjdC1jbGFzcy4nXG4gICk7XG59XG5cbi8vIEhhY2sgdG8gZ3JhYiBOb29wVXBkYXRlUXVldWUgZnJvbSBpc29tb3JwaGljIFJlYWN0XG52YXIgUmVhY3ROb29wVXBkYXRlUXVldWUgPSBuZXcgUmVhY3QuQ29tcG9uZW50KCkudXBkYXRlcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICBSZWFjdC5Db21wb25lbnQsXG4gIFJlYWN0LmlzVmFsaWRFbGVtZW50LFxuICBSZWFjdE5vb3BVcGRhdGVRdWV1ZVxuKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vY3JlYXRlLXJlYWN0LWNsYXNzL2luZGV4LmpzIiwiLy8gaHR0cHM6Ly9kM2pzLm9yZyBWZXJzaW9uIDQuMTAuMC4gQ29weXJpZ2h0IDIwMTcgTWlrZSBCb3N0b2NrLlxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcblx0dHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gZmFjdG9yeShleHBvcnRzKSA6XG5cdHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJ2V4cG9ydHMnXSwgZmFjdG9yeSkgOlxuXHQoZmFjdG9yeSgoZ2xvYmFsLmQzID0gZ2xvYmFsLmQzIHx8IHt9KSkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKGV4cG9ydHMpIHsgJ3VzZSBzdHJpY3QnO1xuXG52YXIgdmVyc2lvbiA9IFwiNC4xMC4wXCI7XG5cbnZhciBhc2NlbmRpbmcgPSBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogYSA+PSBiID8gMCA6IE5hTjtcbn07XG5cbnZhciBiaXNlY3RvciA9IGZ1bmN0aW9uKGNvbXBhcmUpIHtcbiAgaWYgKGNvbXBhcmUubGVuZ3RoID09PSAxKSBjb21wYXJlID0gYXNjZW5kaW5nQ29tcGFyYXRvcihjb21wYXJlKTtcbiAgcmV0dXJuIHtcbiAgICBsZWZ0OiBmdW5jdGlvbihhLCB4LCBsbywgaGkpIHtcbiAgICAgIGlmIChsbyA9PSBudWxsKSBsbyA9IDA7XG4gICAgICBpZiAoaGkgPT0gbnVsbCkgaGkgPSBhLmxlbmd0aDtcbiAgICAgIHdoaWxlIChsbyA8IGhpKSB7XG4gICAgICAgIHZhciBtaWQgPSBsbyArIGhpID4+PiAxO1xuICAgICAgICBpZiAoY29tcGFyZShhW21pZF0sIHgpIDwgMCkgbG8gPSBtaWQgKyAxO1xuICAgICAgICBlbHNlIGhpID0gbWlkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxvO1xuICAgIH0sXG4gICAgcmlnaHQ6IGZ1bmN0aW9uKGEsIHgsIGxvLCBoaSkge1xuICAgICAgaWYgKGxvID09IG51bGwpIGxvID0gMDtcbiAgICAgIGlmIChoaSA9PSBudWxsKSBoaSA9IGEubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxvIDwgaGkpIHtcbiAgICAgICAgdmFyIG1pZCA9IGxvICsgaGkgPj4+IDE7XG4gICAgICAgIGlmIChjb21wYXJlKGFbbWlkXSwgeCkgPiAwKSBoaSA9IG1pZDtcbiAgICAgICAgZWxzZSBsbyA9IG1pZCArIDE7XG4gICAgICB9XG4gICAgICByZXR1cm4gbG87XG4gICAgfVxuICB9O1xufTtcblxuZnVuY3Rpb24gYXNjZW5kaW5nQ29tcGFyYXRvcihmKSB7XG4gIHJldHVybiBmdW5jdGlvbihkLCB4KSB7XG4gICAgcmV0dXJuIGFzY2VuZGluZyhmKGQpLCB4KTtcbiAgfTtcbn1cblxudmFyIGFzY2VuZGluZ0Jpc2VjdCA9IGJpc2VjdG9yKGFzY2VuZGluZyk7XG52YXIgYmlzZWN0UmlnaHQgPSBhc2NlbmRpbmdCaXNlY3QucmlnaHQ7XG52YXIgYmlzZWN0TGVmdCA9IGFzY2VuZGluZ0Jpc2VjdC5sZWZ0O1xuXG52YXIgcGFpcnMgPSBmdW5jdGlvbihhcnJheSwgZikge1xuICBpZiAoZiA9PSBudWxsKSBmID0gcGFpcjtcbiAgdmFyIGkgPSAwLCBuID0gYXJyYXkubGVuZ3RoIC0gMSwgcCA9IGFycmF5WzBdLCBwYWlycyA9IG5ldyBBcnJheShuIDwgMCA/IDAgOiBuKTtcbiAgd2hpbGUgKGkgPCBuKSBwYWlyc1tpXSA9IGYocCwgcCA9IGFycmF5WysraV0pO1xuICByZXR1cm4gcGFpcnM7XG59O1xuXG5mdW5jdGlvbiBwYWlyKGEsIGIpIHtcbiAgcmV0dXJuIFthLCBiXTtcbn1cblxudmFyIGNyb3NzID0gZnVuY3Rpb24odmFsdWVzMCwgdmFsdWVzMSwgcmVkdWNlKSB7XG4gIHZhciBuMCA9IHZhbHVlczAubGVuZ3RoLFxuICAgICAgbjEgPSB2YWx1ZXMxLmxlbmd0aCxcbiAgICAgIHZhbHVlcyA9IG5ldyBBcnJheShuMCAqIG4xKSxcbiAgICAgIGkwLFxuICAgICAgaTEsXG4gICAgICBpLFxuICAgICAgdmFsdWUwO1xuXG4gIGlmIChyZWR1Y2UgPT0gbnVsbCkgcmVkdWNlID0gcGFpcjtcblxuICBmb3IgKGkwID0gaSA9IDA7IGkwIDwgbjA7ICsraTApIHtcbiAgICBmb3IgKHZhbHVlMCA9IHZhbHVlczBbaTBdLCBpMSA9IDA7IGkxIDwgbjE7ICsraTEsICsraSkge1xuICAgICAgdmFsdWVzW2ldID0gcmVkdWNlKHZhbHVlMCwgdmFsdWVzMVtpMV0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB2YWx1ZXM7XG59O1xuXG52YXIgZGVzY2VuZGluZyA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGIgPCBhID8gLTEgOiBiID4gYSA/IDEgOiBiID49IGEgPyAwIDogTmFOO1xufTtcblxudmFyIG51bWJlciA9IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHggPT09IG51bGwgPyBOYU4gOiAreDtcbn07XG5cbnZhciB2YXJpYW5jZSA9IGZ1bmN0aW9uKHZhbHVlcywgdmFsdWVvZikge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBtID0gMCxcbiAgICAgIGkgPSAtMSxcbiAgICAgIG1lYW4gPSAwLFxuICAgICAgdmFsdWUsXG4gICAgICBkZWx0YSxcbiAgICAgIHN1bSA9IDA7XG5cbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAoIWlzTmFOKHZhbHVlID0gbnVtYmVyKHZhbHVlc1tpXSkpKSB7XG4gICAgICAgIGRlbHRhID0gdmFsdWUgLSBtZWFuO1xuICAgICAgICBtZWFuICs9IGRlbHRhIC8gKyttO1xuICAgICAgICBzdW0gKz0gZGVsdGEgKiAodmFsdWUgLSBtZWFuKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBlbHNlIHtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKCFpc05hTih2YWx1ZSA9IG51bWJlcih2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkpKSB7XG4gICAgICAgIGRlbHRhID0gdmFsdWUgLSBtZWFuO1xuICAgICAgICBtZWFuICs9IGRlbHRhIC8gKyttO1xuICAgICAgICBzdW0gKz0gZGVsdGEgKiAodmFsdWUgLSBtZWFuKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAobSA+IDEpIHJldHVybiBzdW0gLyAobSAtIDEpO1xufTtcblxudmFyIGRldmlhdGlvbiA9IGZ1bmN0aW9uKGFycmF5LCBmKSB7XG4gIHZhciB2ID0gdmFyaWFuY2UoYXJyYXksIGYpO1xuICByZXR1cm4gdiA/IE1hdGguc3FydCh2KSA6IHY7XG59O1xuXG52YXIgZXh0ZW50ID0gZnVuY3Rpb24odmFsdWVzLCB2YWx1ZW9mKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIGkgPSAtMSxcbiAgICAgIHZhbHVlLFxuICAgICAgbWluLFxuICAgICAgbWF4O1xuXG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHtcbiAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBGaW5kIHRoZSBmaXJzdCBjb21wYXJhYmxlIHZhbHVlLlxuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtaW4gPSBtYXggPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVzW2ldKSAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAobWluID4gdmFsdWUpIG1pbiA9IHZhbHVlO1xuICAgICAgICAgICAgaWYgKG1heCA8IHZhbHVlKSBtYXggPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBlbHNlIHtcbiAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBGaW5kIHRoZSBmaXJzdCBjb21wYXJhYmxlIHZhbHVlLlxuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSAhPSBudWxsICYmIHZhbHVlID49IHZhbHVlKSB7XG4gICAgICAgIG1pbiA9IG1heCA9IHZhbHVlO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBDb21wYXJlIHRoZSByZW1haW5pbmcgdmFsdWVzLlxuICAgICAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKG1pbiA+IHZhbHVlKSBtaW4gPSB2YWx1ZTtcbiAgICAgICAgICAgIGlmIChtYXggPCB2YWx1ZSkgbWF4ID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFttaW4sIG1heF07XG59O1xuXG52YXIgYXJyYXkgPSBBcnJheS5wcm90b3R5cGU7XG5cbnZhciBzbGljZSA9IGFycmF5LnNsaWNlO1xudmFyIG1hcCA9IGFycmF5Lm1hcDtcblxudmFyIGNvbnN0YW50ID0gZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59O1xuXG52YXIgaWRlbnRpdHkgPSBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4O1xufTtcblxudmFyIHNlcXVlbmNlID0gZnVuY3Rpb24oc3RhcnQsIHN0b3AsIHN0ZXApIHtcbiAgc3RhcnQgPSArc3RhcnQsIHN0b3AgPSArc3RvcCwgc3RlcCA9IChuID0gYXJndW1lbnRzLmxlbmd0aCkgPCAyID8gKHN0b3AgPSBzdGFydCwgc3RhcnQgPSAwLCAxKSA6IG4gPCAzID8gMSA6ICtzdGVwO1xuXG4gIHZhciBpID0gLTEsXG4gICAgICBuID0gTWF0aC5tYXgoMCwgTWF0aC5jZWlsKChzdG9wIC0gc3RhcnQpIC8gc3RlcCkpIHwgMCxcbiAgICAgIHJhbmdlID0gbmV3IEFycmF5KG4pO1xuXG4gIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgcmFuZ2VbaV0gPSBzdGFydCArIGkgKiBzdGVwO1xuICB9XG5cbiAgcmV0dXJuIHJhbmdlO1xufTtcblxudmFyIGUxMCA9IE1hdGguc3FydCg1MCk7XG52YXIgZTUgPSBNYXRoLnNxcnQoMTApO1xudmFyIGUyID0gTWF0aC5zcXJ0KDIpO1xuXG52YXIgdGlja3MgPSBmdW5jdGlvbihzdGFydCwgc3RvcCwgY291bnQpIHtcbiAgdmFyIHJldmVyc2UgPSBzdG9wIDwgc3RhcnQsXG4gICAgICBpID0gLTEsXG4gICAgICBuLFxuICAgICAgdGlja3MsXG4gICAgICBzdGVwO1xuXG4gIGlmIChyZXZlcnNlKSBuID0gc3RhcnQsIHN0YXJ0ID0gc3RvcCwgc3RvcCA9IG47XG5cbiAgaWYgKChzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpKSA9PT0gMCB8fCAhaXNGaW5pdGUoc3RlcCkpIHJldHVybiBbXTtcblxuICBpZiAoc3RlcCA+IDApIHtcbiAgICBzdGFydCA9IE1hdGguY2VpbChzdGFydCAvIHN0ZXApO1xuICAgIHN0b3AgPSBNYXRoLmZsb29yKHN0b3AgLyBzdGVwKTtcbiAgICB0aWNrcyA9IG5ldyBBcnJheShuID0gTWF0aC5jZWlsKHN0b3AgLSBzdGFydCArIDEpKTtcbiAgICB3aGlsZSAoKytpIDwgbikgdGlja3NbaV0gPSAoc3RhcnQgKyBpKSAqIHN0ZXA7XG4gIH0gZWxzZSB7XG4gICAgc3RhcnQgPSBNYXRoLmZsb29yKHN0YXJ0ICogc3RlcCk7XG4gICAgc3RvcCA9IE1hdGguY2VpbChzdG9wICogc3RlcCk7XG4gICAgdGlja3MgPSBuZXcgQXJyYXkobiA9IE1hdGguY2VpbChzdGFydCAtIHN0b3AgKyAxKSk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHRpY2tzW2ldID0gKHN0YXJ0IC0gaSkgLyBzdGVwO1xuICB9XG5cbiAgaWYgKHJldmVyc2UpIHRpY2tzLnJldmVyc2UoKTtcblxuICByZXR1cm4gdGlja3M7XG59O1xuXG5mdW5jdGlvbiB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCkge1xuICB2YXIgc3RlcCA9IChzdG9wIC0gc3RhcnQpIC8gTWF0aC5tYXgoMCwgY291bnQpLFxuICAgICAgcG93ZXIgPSBNYXRoLmZsb29yKE1hdGgubG9nKHN0ZXApIC8gTWF0aC5MTjEwKSxcbiAgICAgIGVycm9yID0gc3RlcCAvIE1hdGgucG93KDEwLCBwb3dlcik7XG4gIHJldHVybiBwb3dlciA+PSAwXG4gICAgICA/IChlcnJvciA+PSBlMTAgPyAxMCA6IGVycm9yID49IGU1ID8gNSA6IGVycm9yID49IGUyID8gMiA6IDEpICogTWF0aC5wb3coMTAsIHBvd2VyKVxuICAgICAgOiAtTWF0aC5wb3coMTAsIC1wb3dlcikgLyAoZXJyb3IgPj0gZTEwID8gMTAgOiBlcnJvciA+PSBlNSA/IDUgOiBlcnJvciA+PSBlMiA/IDIgOiAxKTtcbn1cblxuZnVuY3Rpb24gdGlja1N0ZXAoc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gIHZhciBzdGVwMCA9IE1hdGguYWJzKHN0b3AgLSBzdGFydCkgLyBNYXRoLm1heCgwLCBjb3VudCksXG4gICAgICBzdGVwMSA9IE1hdGgucG93KDEwLCBNYXRoLmZsb29yKE1hdGgubG9nKHN0ZXAwKSAvIE1hdGguTE4xMCkpLFxuICAgICAgZXJyb3IgPSBzdGVwMCAvIHN0ZXAxO1xuICBpZiAoZXJyb3IgPj0gZTEwKSBzdGVwMSAqPSAxMDtcbiAgZWxzZSBpZiAoZXJyb3IgPj0gZTUpIHN0ZXAxICo9IDU7XG4gIGVsc2UgaWYgKGVycm9yID49IGUyKSBzdGVwMSAqPSAyO1xuICByZXR1cm4gc3RvcCA8IHN0YXJ0ID8gLXN0ZXAxIDogc3RlcDE7XG59XG5cbnZhciBzdHVyZ2VzID0gZnVuY3Rpb24odmFsdWVzKSB7XG4gIHJldHVybiBNYXRoLmNlaWwoTWF0aC5sb2codmFsdWVzLmxlbmd0aCkgLyBNYXRoLkxOMikgKyAxO1xufTtcblxudmFyIGhpc3RvZ3JhbSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgdmFsdWUgPSBpZGVudGl0eSxcbiAgICAgIGRvbWFpbiA9IGV4dGVudCxcbiAgICAgIHRocmVzaG9sZCA9IHN0dXJnZXM7XG5cbiAgZnVuY3Rpb24gaGlzdG9ncmFtKGRhdGEpIHtcbiAgICB2YXIgaSxcbiAgICAgICAgbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICB4LFxuICAgICAgICB2YWx1ZXMgPSBuZXcgQXJyYXkobik7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICB2YWx1ZXNbaV0gPSB2YWx1ZShkYXRhW2ldLCBpLCBkYXRhKTtcbiAgICB9XG5cbiAgICB2YXIgeHogPSBkb21haW4odmFsdWVzKSxcbiAgICAgICAgeDAgPSB4elswXSxcbiAgICAgICAgeDEgPSB4elsxXSxcbiAgICAgICAgdHogPSB0aHJlc2hvbGQodmFsdWVzLCB4MCwgeDEpO1xuXG4gICAgLy8gQ29udmVydCBudW1iZXIgb2YgdGhyZXNob2xkcyBpbnRvIHVuaWZvcm0gdGhyZXNob2xkcy5cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodHopKSB7XG4gICAgICB0eiA9IHRpY2tTdGVwKHgwLCB4MSwgdHopO1xuICAgICAgdHogPSBzZXF1ZW5jZShNYXRoLmNlaWwoeDAgLyB0eikgKiB0eiwgTWF0aC5mbG9vcih4MSAvIHR6KSAqIHR6LCB0eik7IC8vIGV4Y2x1c2l2ZVxuICAgIH1cblxuICAgIC8vIFJlbW92ZSBhbnkgdGhyZXNob2xkcyBvdXRzaWRlIHRoZSBkb21haW4uXG4gICAgdmFyIG0gPSB0ei5sZW5ndGg7XG4gICAgd2hpbGUgKHR6WzBdIDw9IHgwKSB0ei5zaGlmdCgpLCAtLW07XG4gICAgd2hpbGUgKHR6W20gLSAxXSA+IHgxKSB0ei5wb3AoKSwgLS1tO1xuXG4gICAgdmFyIGJpbnMgPSBuZXcgQXJyYXkobSArIDEpLFxuICAgICAgICBiaW47XG5cbiAgICAvLyBJbml0aWFsaXplIGJpbnMuXG4gICAgZm9yIChpID0gMDsgaSA8PSBtOyArK2kpIHtcbiAgICAgIGJpbiA9IGJpbnNbaV0gPSBbXTtcbiAgICAgIGJpbi54MCA9IGkgPiAwID8gdHpbaSAtIDFdIDogeDA7XG4gICAgICBiaW4ueDEgPSBpIDwgbSA/IHR6W2ldIDogeDE7XG4gICAgfVxuXG4gICAgLy8gQXNzaWduIGRhdGEgdG8gYmlucyBieSB2YWx1ZSwgaWdub3JpbmcgYW55IG91dHNpZGUgdGhlIGRvbWFpbi5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICB4ID0gdmFsdWVzW2ldO1xuICAgICAgaWYgKHgwIDw9IHggJiYgeCA8PSB4MSkge1xuICAgICAgICBiaW5zW2Jpc2VjdFJpZ2h0KHR6LCB4LCAwLCBtKV0ucHVzaChkYXRhW2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYmlucztcbiAgfVxuXG4gIGhpc3RvZ3JhbS52YWx1ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh2YWx1ZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoXyksIGhpc3RvZ3JhbSkgOiB2YWx1ZTtcbiAgfTtcblxuICBoaXN0b2dyYW0uZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRvbWFpbiA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoW19bMF0sIF9bMV1dKSwgaGlzdG9ncmFtKSA6IGRvbWFpbjtcbiAgfTtcblxuICBoaXN0b2dyYW0udGhyZXNob2xkcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aHJlc2hvbGQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IEFycmF5LmlzQXJyYXkoXykgPyBjb25zdGFudChzbGljZS5jYWxsKF8pKSA6IGNvbnN0YW50KF8pLCBoaXN0b2dyYW0pIDogdGhyZXNob2xkO1xuICB9O1xuXG4gIHJldHVybiBoaXN0b2dyYW07XG59O1xuXG52YXIgdGhyZXNob2xkID0gZnVuY3Rpb24odmFsdWVzLCBwLCB2YWx1ZW9mKSB7XG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHZhbHVlb2YgPSBudW1iZXI7XG4gIGlmICghKG4gPSB2YWx1ZXMubGVuZ3RoKSkgcmV0dXJuO1xuICBpZiAoKHAgPSArcCkgPD0gMCB8fCBuIDwgMikgcmV0dXJuICt2YWx1ZW9mKHZhbHVlc1swXSwgMCwgdmFsdWVzKTtcbiAgaWYgKHAgPj0gMSkgcmV0dXJuICt2YWx1ZW9mKHZhbHVlc1tuIC0gMV0sIG4gLSAxLCB2YWx1ZXMpO1xuICB2YXIgbixcbiAgICAgIGkgPSAobiAtIDEpICogcCxcbiAgICAgIGkwID0gTWF0aC5mbG9vcihpKSxcbiAgICAgIHZhbHVlMCA9ICt2YWx1ZW9mKHZhbHVlc1tpMF0sIGkwLCB2YWx1ZXMpLFxuICAgICAgdmFsdWUxID0gK3ZhbHVlb2YodmFsdWVzW2kwICsgMV0sIGkwICsgMSwgdmFsdWVzKTtcbiAgcmV0dXJuIHZhbHVlMCArICh2YWx1ZTEgLSB2YWx1ZTApICogKGkgLSBpMCk7XG59O1xuXG52YXIgZnJlZWRtYW5EaWFjb25pcyA9IGZ1bmN0aW9uKHZhbHVlcywgbWluLCBtYXgpIHtcbiAgdmFsdWVzID0gbWFwLmNhbGwodmFsdWVzLCBudW1iZXIpLnNvcnQoYXNjZW5kaW5nKTtcbiAgcmV0dXJuIE1hdGguY2VpbCgobWF4IC0gbWluKSAvICgyICogKHRocmVzaG9sZCh2YWx1ZXMsIDAuNzUpIC0gdGhyZXNob2xkKHZhbHVlcywgMC4yNSkpICogTWF0aC5wb3codmFsdWVzLmxlbmd0aCwgLTEgLyAzKSkpO1xufTtcblxudmFyIHNjb3R0ID0gZnVuY3Rpb24odmFsdWVzLCBtaW4sIG1heCkge1xuICByZXR1cm4gTWF0aC5jZWlsKChtYXggLSBtaW4pIC8gKDMuNSAqIGRldmlhdGlvbih2YWx1ZXMpICogTWF0aC5wb3codmFsdWVzLmxlbmd0aCwgLTEgLyAzKSkpO1xufTtcblxudmFyIG1heCA9IGZ1bmN0aW9uKHZhbHVlcywgdmFsdWVvZikge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBpID0gLTEsXG4gICAgICB2YWx1ZSxcbiAgICAgIG1heDtcblxuICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbWF4ID0gdmFsdWU7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCAmJiB2YWx1ZSA+IG1heCkge1xuICAgICAgICAgICAgbWF4ID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtYXggPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwgJiYgdmFsdWUgPiBtYXgpIHtcbiAgICAgICAgICAgIG1heCA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtYXg7XG59O1xuXG52YXIgbWVhbiA9IGZ1bmN0aW9uKHZhbHVlcywgdmFsdWVvZikge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBtID0gbixcbiAgICAgIGkgPSAtMSxcbiAgICAgIHZhbHVlLFxuICAgICAgc3VtID0gMDtcblxuICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICghaXNOYU4odmFsdWUgPSBudW1iZXIodmFsdWVzW2ldKSkpIHN1bSArPSB2YWx1ZTtcbiAgICAgIGVsc2UgLS1tO1xuICAgIH1cbiAgfVxuXG4gIGVsc2Uge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAoIWlzTmFOKHZhbHVlID0gbnVtYmVyKHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSkpIHN1bSArPSB2YWx1ZTtcbiAgICAgIGVsc2UgLS1tO1xuICAgIH1cbiAgfVxuXG4gIGlmIChtKSByZXR1cm4gc3VtIC8gbTtcbn07XG5cbnZhciBtZWRpYW4gPSBmdW5jdGlvbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgaSA9IC0xLFxuICAgICAgdmFsdWUsXG4gICAgICBudW1iZXJzID0gW107XG5cbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAoIWlzTmFOKHZhbHVlID0gbnVtYmVyKHZhbHVlc1tpXSkpKSB7XG4gICAgICAgIG51bWJlcnMucHVzaCh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICghaXNOYU4odmFsdWUgPSBudW1iZXIodmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpKSkge1xuICAgICAgICBudW1iZXJzLnB1c2godmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aHJlc2hvbGQobnVtYmVycy5zb3J0KGFzY2VuZGluZyksIDAuNSk7XG59O1xuXG52YXIgbWVyZ2UgPSBmdW5jdGlvbihhcnJheXMpIHtcbiAgdmFyIG4gPSBhcnJheXMubGVuZ3RoLFxuICAgICAgbSxcbiAgICAgIGkgPSAtMSxcbiAgICAgIGogPSAwLFxuICAgICAgbWVyZ2VkLFxuICAgICAgYXJyYXk7XG5cbiAgd2hpbGUgKCsraSA8IG4pIGogKz0gYXJyYXlzW2ldLmxlbmd0aDtcbiAgbWVyZ2VkID0gbmV3IEFycmF5KGopO1xuXG4gIHdoaWxlICgtLW4gPj0gMCkge1xuICAgIGFycmF5ID0gYXJyYXlzW25dO1xuICAgIG0gPSBhcnJheS5sZW5ndGg7XG4gICAgd2hpbGUgKC0tbSA+PSAwKSB7XG4gICAgICBtZXJnZWRbLS1qXSA9IGFycmF5W21dO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtZXJnZWQ7XG59O1xuXG52YXIgbWluID0gZnVuY3Rpb24odmFsdWVzLCB2YWx1ZW9mKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIGkgPSAtMSxcbiAgICAgIHZhbHVlLFxuICAgICAgbWluO1xuXG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHtcbiAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBGaW5kIHRoZSBmaXJzdCBjb21wYXJhYmxlIHZhbHVlLlxuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtaW4gPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVzW2ldKSAhPSBudWxsICYmIG1pbiA+IHZhbHVlKSB7XG4gICAgICAgICAgICBtaW4gPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBlbHNlIHtcbiAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBGaW5kIHRoZSBmaXJzdCBjb21wYXJhYmxlIHZhbHVlLlxuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSAhPSBudWxsICYmIHZhbHVlID49IHZhbHVlKSB7XG4gICAgICAgIG1pbiA9IHZhbHVlO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBDb21wYXJlIHRoZSByZW1haW5pbmcgdmFsdWVzLlxuICAgICAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCAmJiBtaW4gPiB2YWx1ZSkge1xuICAgICAgICAgICAgbWluID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1pbjtcbn07XG5cbnZhciBwZXJtdXRlID0gZnVuY3Rpb24oYXJyYXksIGluZGV4ZXMpIHtcbiAgdmFyIGkgPSBpbmRleGVzLmxlbmd0aCwgcGVybXV0ZXMgPSBuZXcgQXJyYXkoaSk7XG4gIHdoaWxlIChpLS0pIHBlcm11dGVzW2ldID0gYXJyYXlbaW5kZXhlc1tpXV07XG4gIHJldHVybiBwZXJtdXRlcztcbn07XG5cbnZhciBzY2FuID0gZnVuY3Rpb24odmFsdWVzLCBjb21wYXJlKSB7XG4gIGlmICghKG4gPSB2YWx1ZXMubGVuZ3RoKSkgcmV0dXJuO1xuICB2YXIgbixcbiAgICAgIGkgPSAwLFxuICAgICAgaiA9IDAsXG4gICAgICB4aSxcbiAgICAgIHhqID0gdmFsdWVzW2pdO1xuXG4gIGlmIChjb21wYXJlID09IG51bGwpIGNvbXBhcmUgPSBhc2NlbmRpbmc7XG5cbiAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICBpZiAoY29tcGFyZSh4aSA9IHZhbHVlc1tpXSwgeGopIDwgMCB8fCBjb21wYXJlKHhqLCB4aikgIT09IDApIHtcbiAgICAgIHhqID0geGksIGogPSBpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChjb21wYXJlKHhqLCB4aikgPT09IDApIHJldHVybiBqO1xufTtcblxudmFyIHNodWZmbGUgPSBmdW5jdGlvbihhcnJheSwgaTAsIGkxKSB7XG4gIHZhciBtID0gKGkxID09IG51bGwgPyBhcnJheS5sZW5ndGggOiBpMSkgLSAoaTAgPSBpMCA9PSBudWxsID8gMCA6ICtpMCksXG4gICAgICB0LFxuICAgICAgaTtcblxuICB3aGlsZSAobSkge1xuICAgIGkgPSBNYXRoLnJhbmRvbSgpICogbS0tIHwgMDtcbiAgICB0ID0gYXJyYXlbbSArIGkwXTtcbiAgICBhcnJheVttICsgaTBdID0gYXJyYXlbaSArIGkwXTtcbiAgICBhcnJheVtpICsgaTBdID0gdDtcbiAgfVxuXG4gIHJldHVybiBhcnJheTtcbn07XG5cbnZhciBzdW0gPSBmdW5jdGlvbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgaSA9IC0xLFxuICAgICAgdmFsdWUsXG4gICAgICBzdW0gPSAwO1xuXG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKHZhbHVlID0gK3ZhbHVlc1tpXSkgc3VtICs9IHZhbHVlOyAvLyBOb3RlOiB6ZXJvIGFuZCBudWxsIGFyZSBlcXVpdmFsZW50LlxuICAgIH1cbiAgfVxuXG4gIGVsc2Uge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAodmFsdWUgPSArdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpIHN1bSArPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3VtO1xufTtcblxudmFyIHRyYW5zcG9zZSA9IGZ1bmN0aW9uKG1hdHJpeCkge1xuICBpZiAoIShuID0gbWF0cml4Lmxlbmd0aCkpIHJldHVybiBbXTtcbiAgZm9yICh2YXIgaSA9IC0xLCBtID0gbWluKG1hdHJpeCwgbGVuZ3RoKSwgdHJhbnNwb3NlID0gbmV3IEFycmF5KG0pOyArK2kgPCBtOykge1xuICAgIGZvciAodmFyIGogPSAtMSwgbiwgcm93ID0gdHJhbnNwb3NlW2ldID0gbmV3IEFycmF5KG4pOyArK2ogPCBuOykge1xuICAgICAgcm93W2pdID0gbWF0cml4W2pdW2ldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJhbnNwb3NlO1xufTtcblxuZnVuY3Rpb24gbGVuZ3RoKGQpIHtcbiAgcmV0dXJuIGQubGVuZ3RoO1xufVxuXG52YXIgemlwID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0cmFuc3Bvc2UoYXJndW1lbnRzKTtcbn07XG5cbnZhciBzbGljZSQxID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuXG52YXIgaWRlbnRpdHkkMSA9IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHg7XG59O1xuXG52YXIgdG9wID0gMTtcbnZhciByaWdodCA9IDI7XG52YXIgYm90dG9tID0gMztcbnZhciBsZWZ0ID0gNDtcbnZhciBlcHNpbG9uID0gMWUtNjtcblxuZnVuY3Rpb24gdHJhbnNsYXRlWCh4KSB7XG4gIHJldHVybiBcInRyYW5zbGF0ZShcIiArICh4ICsgMC41KSArIFwiLDApXCI7XG59XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZVkoeSkge1xuICByZXR1cm4gXCJ0cmFuc2xhdGUoMCxcIiArICh5ICsgMC41KSArIFwiKVwiO1xufVxuXG5mdW5jdGlvbiBudW1iZXIkMShzY2FsZSkge1xuICByZXR1cm4gZnVuY3Rpb24oZCkge1xuICAgIHJldHVybiArc2NhbGUoZCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNlbnRlcihzY2FsZSkge1xuICB2YXIgb2Zmc2V0ID0gTWF0aC5tYXgoMCwgc2NhbGUuYmFuZHdpZHRoKCkgLSAxKSAvIDI7IC8vIEFkanVzdCBmb3IgMC41cHggb2Zmc2V0LlxuICBpZiAoc2NhbGUucm91bmQoKSkgb2Zmc2V0ID0gTWF0aC5yb3VuZChvZmZzZXQpO1xuICByZXR1cm4gZnVuY3Rpb24oZCkge1xuICAgIHJldHVybiArc2NhbGUoZCkgKyBvZmZzZXQ7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGVudGVyaW5nKCkge1xuICByZXR1cm4gIXRoaXMuX19heGlzO1xufVxuXG5mdW5jdGlvbiBheGlzKG9yaWVudCwgc2NhbGUpIHtcbiAgdmFyIHRpY2tBcmd1bWVudHMgPSBbXSxcbiAgICAgIHRpY2tWYWx1ZXMgPSBudWxsLFxuICAgICAgdGlja0Zvcm1hdCA9IG51bGwsXG4gICAgICB0aWNrU2l6ZUlubmVyID0gNixcbiAgICAgIHRpY2tTaXplT3V0ZXIgPSA2LFxuICAgICAgdGlja1BhZGRpbmcgPSAzLFxuICAgICAgayA9IG9yaWVudCA9PT0gdG9wIHx8IG9yaWVudCA9PT0gbGVmdCA/IC0xIDogMSxcbiAgICAgIHggPSBvcmllbnQgPT09IGxlZnQgfHwgb3JpZW50ID09PSByaWdodCA/IFwieFwiIDogXCJ5XCIsXG4gICAgICB0cmFuc2Zvcm0gPSBvcmllbnQgPT09IHRvcCB8fCBvcmllbnQgPT09IGJvdHRvbSA/IHRyYW5zbGF0ZVggOiB0cmFuc2xhdGVZO1xuXG4gIGZ1bmN0aW9uIGF4aXMoY29udGV4dCkge1xuICAgIHZhciB2YWx1ZXMgPSB0aWNrVmFsdWVzID09IG51bGwgPyAoc2NhbGUudGlja3MgPyBzY2FsZS50aWNrcy5hcHBseShzY2FsZSwgdGlja0FyZ3VtZW50cykgOiBzY2FsZS5kb21haW4oKSkgOiB0aWNrVmFsdWVzLFxuICAgICAgICBmb3JtYXQgPSB0aWNrRm9ybWF0ID09IG51bGwgPyAoc2NhbGUudGlja0Zvcm1hdCA/IHNjYWxlLnRpY2tGb3JtYXQuYXBwbHkoc2NhbGUsIHRpY2tBcmd1bWVudHMpIDogaWRlbnRpdHkkMSkgOiB0aWNrRm9ybWF0LFxuICAgICAgICBzcGFjaW5nID0gTWF0aC5tYXgodGlja1NpemVJbm5lciwgMCkgKyB0aWNrUGFkZGluZyxcbiAgICAgICAgcmFuZ2UgPSBzY2FsZS5yYW5nZSgpLFxuICAgICAgICByYW5nZTAgPSArcmFuZ2VbMF0gKyAwLjUsXG4gICAgICAgIHJhbmdlMSA9ICtyYW5nZVtyYW5nZS5sZW5ndGggLSAxXSArIDAuNSxcbiAgICAgICAgcG9zaXRpb24gPSAoc2NhbGUuYmFuZHdpZHRoID8gY2VudGVyIDogbnVtYmVyJDEpKHNjYWxlLmNvcHkoKSksXG4gICAgICAgIHNlbGVjdGlvbiA9IGNvbnRleHQuc2VsZWN0aW9uID8gY29udGV4dC5zZWxlY3Rpb24oKSA6IGNvbnRleHQsXG4gICAgICAgIHBhdGggPSBzZWxlY3Rpb24uc2VsZWN0QWxsKFwiLmRvbWFpblwiKS5kYXRhKFtudWxsXSksXG4gICAgICAgIHRpY2sgPSBzZWxlY3Rpb24uc2VsZWN0QWxsKFwiLnRpY2tcIikuZGF0YSh2YWx1ZXMsIHNjYWxlKS5vcmRlcigpLFxuICAgICAgICB0aWNrRXhpdCA9IHRpY2suZXhpdCgpLFxuICAgICAgICB0aWNrRW50ZXIgPSB0aWNrLmVudGVyKCkuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIiwgXCJ0aWNrXCIpLFxuICAgICAgICBsaW5lID0gdGljay5zZWxlY3QoXCJsaW5lXCIpLFxuICAgICAgICB0ZXh0ID0gdGljay5zZWxlY3QoXCJ0ZXh0XCIpO1xuXG4gICAgcGF0aCA9IHBhdGgubWVyZ2UocGF0aC5lbnRlcigpLmluc2VydChcInBhdGhcIiwgXCIudGlja1wiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiZG9tYWluXCIpXG4gICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIFwiIzAwMFwiKSk7XG5cbiAgICB0aWNrID0gdGljay5tZXJnZSh0aWNrRW50ZXIpO1xuXG4gICAgbGluZSA9IGxpbmUubWVyZ2UodGlja0VudGVyLmFwcGVuZChcImxpbmVcIilcbiAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCIjMDAwXCIpXG4gICAgICAgIC5hdHRyKHggKyBcIjJcIiwgayAqIHRpY2tTaXplSW5uZXIpKTtcblxuICAgIHRleHQgPSB0ZXh0Lm1lcmdlKHRpY2tFbnRlci5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIiMwMDBcIilcbiAgICAgICAgLmF0dHIoeCwgayAqIHNwYWNpbmcpXG4gICAgICAgIC5hdHRyKFwiZHlcIiwgb3JpZW50ID09PSB0b3AgPyBcIjBlbVwiIDogb3JpZW50ID09PSBib3R0b20gPyBcIjAuNzFlbVwiIDogXCIwLjMyZW1cIikpO1xuXG4gICAgaWYgKGNvbnRleHQgIT09IHNlbGVjdGlvbikge1xuICAgICAgcGF0aCA9IHBhdGgudHJhbnNpdGlvbihjb250ZXh0KTtcbiAgICAgIHRpY2sgPSB0aWNrLnRyYW5zaXRpb24oY29udGV4dCk7XG4gICAgICBsaW5lID0gbGluZS50cmFuc2l0aW9uKGNvbnRleHQpO1xuICAgICAgdGV4dCA9IHRleHQudHJhbnNpdGlvbihjb250ZXh0KTtcblxuICAgICAgdGlja0V4aXQgPSB0aWNrRXhpdC50cmFuc2l0aW9uKGNvbnRleHQpXG4gICAgICAgICAgLmF0dHIoXCJvcGFjaXR5XCIsIGVwc2lsb24pXG4gICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gaXNGaW5pdGUoZCA9IHBvc2l0aW9uKGQpKSA/IHRyYW5zZm9ybShkKSA6IHRoaXMuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpOyB9KTtcblxuICAgICAgdGlja0VudGVyXG4gICAgICAgICAgLmF0dHIoXCJvcGFjaXR5XCIsIGVwc2lsb24pXG4gICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkgeyB2YXIgcCA9IHRoaXMucGFyZW50Tm9kZS5fX2F4aXM7IHJldHVybiB0cmFuc2Zvcm0ocCAmJiBpc0Zpbml0ZShwID0gcChkKSkgPyBwIDogcG9zaXRpb24oZCkpOyB9KTtcbiAgICB9XG5cbiAgICB0aWNrRXhpdC5yZW1vdmUoKTtcblxuICAgIHBhdGhcbiAgICAgICAgLmF0dHIoXCJkXCIsIG9yaWVudCA9PT0gbGVmdCB8fCBvcmllbnQgPT0gcmlnaHRcbiAgICAgICAgICAgID8gXCJNXCIgKyBrICogdGlja1NpemVPdXRlciArIFwiLFwiICsgcmFuZ2UwICsgXCJIMC41VlwiICsgcmFuZ2UxICsgXCJIXCIgKyBrICogdGlja1NpemVPdXRlclxuICAgICAgICAgICAgOiBcIk1cIiArIHJhbmdlMCArIFwiLFwiICsgayAqIHRpY2tTaXplT3V0ZXIgKyBcIlYwLjVIXCIgKyByYW5nZTEgKyBcIlZcIiArIGsgKiB0aWNrU2l6ZU91dGVyKTtcblxuICAgIHRpY2tcbiAgICAgICAgLmF0dHIoXCJvcGFjaXR5XCIsIDEpXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIHRyYW5zZm9ybShwb3NpdGlvbihkKSk7IH0pO1xuXG4gICAgbGluZVxuICAgICAgICAuYXR0cih4ICsgXCIyXCIsIGsgKiB0aWNrU2l6ZUlubmVyKTtcblxuICAgIHRleHRcbiAgICAgICAgLmF0dHIoeCwgayAqIHNwYWNpbmcpXG4gICAgICAgIC50ZXh0KGZvcm1hdCk7XG5cbiAgICBzZWxlY3Rpb24uZmlsdGVyKGVudGVyaW5nKVxuICAgICAgICAuYXR0cihcImZpbGxcIiwgXCJub25lXCIpXG4gICAgICAgIC5hdHRyKFwiZm9udC1zaXplXCIsIDEwKVxuICAgICAgICAuYXR0cihcImZvbnQtZmFtaWx5XCIsIFwic2Fucy1zZXJpZlwiKVxuICAgICAgICAuYXR0cihcInRleHQtYW5jaG9yXCIsIG9yaWVudCA9PT0gcmlnaHQgPyBcInN0YXJ0XCIgOiBvcmllbnQgPT09IGxlZnQgPyBcImVuZFwiIDogXCJtaWRkbGVcIik7XG5cbiAgICBzZWxlY3Rpb25cbiAgICAgICAgLmVhY2goZnVuY3Rpb24oKSB7IHRoaXMuX19heGlzID0gcG9zaXRpb247IH0pO1xuICB9XG5cbiAgYXhpcy5zY2FsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzY2FsZSA9IF8sIGF4aXMpIDogc2NhbGU7XG4gIH07XG5cbiAgYXhpcy50aWNrcyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aWNrQXJndW1lbnRzID0gc2xpY2UkMS5jYWxsKGFyZ3VtZW50cyksIGF4aXM7XG4gIH07XG5cbiAgYXhpcy50aWNrQXJndW1lbnRzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tBcmd1bWVudHMgPSBfID09IG51bGwgPyBbXSA6IHNsaWNlJDEuY2FsbChfKSwgYXhpcykgOiB0aWNrQXJndW1lbnRzLnNsaWNlKCk7XG4gIH07XG5cbiAgYXhpcy50aWNrVmFsdWVzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tWYWx1ZXMgPSBfID09IG51bGwgPyBudWxsIDogc2xpY2UkMS5jYWxsKF8pLCBheGlzKSA6IHRpY2tWYWx1ZXMgJiYgdGlja1ZhbHVlcy5zbGljZSgpO1xuICB9O1xuXG4gIGF4aXMudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrRm9ybWF0ID0gXywgYXhpcykgOiB0aWNrRm9ybWF0O1xuICB9O1xuXG4gIGF4aXMudGlja1NpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja1NpemVJbm5lciA9IHRpY2tTaXplT3V0ZXIgPSArXywgYXhpcykgOiB0aWNrU2l6ZUlubmVyO1xuICB9O1xuXG4gIGF4aXMudGlja1NpemVJbm5lciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrU2l6ZUlubmVyID0gK18sIGF4aXMpIDogdGlja1NpemVJbm5lcjtcbiAgfTtcblxuICBheGlzLnRpY2tTaXplT3V0ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja1NpemVPdXRlciA9ICtfLCBheGlzKSA6IHRpY2tTaXplT3V0ZXI7XG4gIH07XG5cbiAgYXhpcy50aWNrUGFkZGluZyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrUGFkZGluZyA9ICtfLCBheGlzKSA6IHRpY2tQYWRkaW5nO1xuICB9O1xuXG4gIHJldHVybiBheGlzO1xufVxuXG5mdW5jdGlvbiBheGlzVG9wKHNjYWxlKSB7XG4gIHJldHVybiBheGlzKHRvcCwgc2NhbGUpO1xufVxuXG5mdW5jdGlvbiBheGlzUmlnaHQoc2NhbGUpIHtcbiAgcmV0dXJuIGF4aXMocmlnaHQsIHNjYWxlKTtcbn1cblxuZnVuY3Rpb24gYXhpc0JvdHRvbShzY2FsZSkge1xuICByZXR1cm4gYXhpcyhib3R0b20sIHNjYWxlKTtcbn1cblxuZnVuY3Rpb24gYXhpc0xlZnQoc2NhbGUpIHtcbiAgcmV0dXJuIGF4aXMobGVmdCwgc2NhbGUpO1xufVxuXG52YXIgbm9vcCA9IHt2YWx1ZTogZnVuY3Rpb24oKSB7fX07XG5cbmZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IGFyZ3VtZW50cy5sZW5ndGgsIF8gPSB7fSwgdDsgaSA8IG47ICsraSkge1xuICAgIGlmICghKHQgPSBhcmd1bWVudHNbaV0gKyBcIlwiKSB8fCAodCBpbiBfKSkgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCB0eXBlOiBcIiArIHQpO1xuICAgIF9bdF0gPSBbXTtcbiAgfVxuICByZXR1cm4gbmV3IERpc3BhdGNoKF8pO1xufVxuXG5mdW5jdGlvbiBEaXNwYXRjaChfKSB7XG4gIHRoaXMuXyA9IF87XG59XG5cbmZ1bmN0aW9uIHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lcywgdHlwZXMpIHtcbiAgcmV0dXJuIHR5cGVuYW1lcy50cmltKCkuc3BsaXQoL158XFxzKy8pLm1hcChmdW5jdGlvbih0KSB7XG4gICAgdmFyIG5hbWUgPSBcIlwiLCBpID0gdC5pbmRleE9mKFwiLlwiKTtcbiAgICBpZiAoaSA+PSAwKSBuYW1lID0gdC5zbGljZShpICsgMSksIHQgPSB0LnNsaWNlKDAsIGkpO1xuICAgIGlmICh0ICYmICF0eXBlcy5oYXNPd25Qcm9wZXJ0eSh0KSkgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB0eXBlOiBcIiArIHQpO1xuICAgIHJldHVybiB7dHlwZTogdCwgbmFtZTogbmFtZX07XG4gIH0pO1xufVxuXG5EaXNwYXRjaC5wcm90b3R5cGUgPSBkaXNwYXRjaC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBEaXNwYXRjaCxcbiAgb246IGZ1bmN0aW9uKHR5cGVuYW1lLCBjYWxsYmFjaykge1xuICAgIHZhciBfID0gdGhpcy5fLFxuICAgICAgICBUID0gcGFyc2VUeXBlbmFtZXModHlwZW5hbWUgKyBcIlwiLCBfKSxcbiAgICAgICAgdCxcbiAgICAgICAgaSA9IC0xLFxuICAgICAgICBuID0gVC5sZW5ndGg7XG5cbiAgICAvLyBJZiBubyBjYWxsYmFjayB3YXMgc3BlY2lmaWVkLCByZXR1cm4gdGhlIGNhbGxiYWNrIG9mIHRoZSBnaXZlbiB0eXBlIGFuZCBuYW1lLlxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgodCA9ICh0eXBlbmFtZSA9IFRbaV0pLnR5cGUpICYmICh0ID0gZ2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUpKSkgcmV0dXJuIHQ7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSWYgYSB0eXBlIHdhcyBzcGVjaWZpZWQsIHNldCB0aGUgY2FsbGJhY2sgZm9yIHRoZSBnaXZlbiB0eXBlIGFuZCBuYW1lLlxuICAgIC8vIE90aGVyd2lzZSwgaWYgYSBudWxsIGNhbGxiYWNrIHdhcyBzcGVjaWZpZWQsIHJlbW92ZSBjYWxsYmFja3Mgb2YgdGhlIGdpdmVuIG5hbWUuXG4gICAgaWYgKGNhbGxiYWNrICE9IG51bGwgJiYgdHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgY2FsbGJhY2s6IFwiICsgY2FsbGJhY2spO1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAodCA9ICh0eXBlbmFtZSA9IFRbaV0pLnR5cGUpIF9bdF0gPSBzZXQoX1t0XSwgdHlwZW5hbWUubmFtZSwgY2FsbGJhY2spO1xuICAgICAgZWxzZSBpZiAoY2FsbGJhY2sgPT0gbnVsbCkgZm9yICh0IGluIF8pIF9bdF0gPSBzZXQoX1t0XSwgdHlwZW5hbWUubmFtZSwgbnVsbCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIGNvcHk6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjb3B5ID0ge30sIF8gPSB0aGlzLl87XG4gICAgZm9yICh2YXIgdCBpbiBfKSBjb3B5W3RdID0gX1t0XS5zbGljZSgpO1xuICAgIHJldHVybiBuZXcgRGlzcGF0Y2goY29weSk7XG4gIH0sXG4gIGNhbGw6IGZ1bmN0aW9uKHR5cGUsIHRoYXQpIHtcbiAgICBpZiAoKG4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMikgPiAwKSBmb3IgKHZhciBhcmdzID0gbmV3IEFycmF5KG4pLCBpID0gMCwgbiwgdDsgaSA8IG47ICsraSkgYXJnc1tpXSA9IGFyZ3VtZW50c1tpICsgMl07XG4gICAgaWYgKCF0aGlzLl8uaGFzT3duUHJvcGVydHkodHlwZSkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0eXBlKTtcbiAgICBmb3IgKHQgPSB0aGlzLl9bdHlwZV0sIGkgPSAwLCBuID0gdC5sZW5ndGg7IGkgPCBuOyArK2kpIHRbaV0udmFsdWUuYXBwbHkodGhhdCwgYXJncyk7XG4gIH0sXG4gIGFwcGx5OiBmdW5jdGlvbih0eXBlLCB0aGF0LCBhcmdzKSB7XG4gICAgaWYgKCF0aGlzLl8uaGFzT3duUHJvcGVydHkodHlwZSkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0eXBlKTtcbiAgICBmb3IgKHZhciB0ID0gdGhpcy5fW3R5cGVdLCBpID0gMCwgbiA9IHQubGVuZ3RoOyBpIDwgbjsgKytpKSB0W2ldLnZhbHVlLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBnZXQodHlwZSwgbmFtZSkge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IHR5cGUubGVuZ3RoLCBjOyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKChjID0gdHlwZVtpXSkubmFtZSA9PT0gbmFtZSkge1xuICAgICAgcmV0dXJuIGMudmFsdWU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNldCh0eXBlLCBuYW1lLCBjYWxsYmFjaykge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IHR5cGUubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKHR5cGVbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgdHlwZVtpXSA9IG5vb3AsIHR5cGUgPSB0eXBlLnNsaWNlKDAsIGkpLmNvbmNhdCh0eXBlLnNsaWNlKGkgKyAxKSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgaWYgKGNhbGxiYWNrICE9IG51bGwpIHR5cGUucHVzaCh7bmFtZTogbmFtZSwgdmFsdWU6IGNhbGxiYWNrfSk7XG4gIHJldHVybiB0eXBlO1xufVxuXG52YXIgeGh0bWwgPSBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjtcblxudmFyIG5hbWVzcGFjZXMgPSB7XG4gIHN2ZzogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICB4aHRtbDogeGh0bWwsXG4gIHhsaW5rOiBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIixcbiAgeG1sOiBcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLFxuICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zL1wiXG59O1xuXG52YXIgbmFtZXNwYWNlID0gZnVuY3Rpb24obmFtZSkge1xuICB2YXIgcHJlZml4ID0gbmFtZSArPSBcIlwiLCBpID0gcHJlZml4LmluZGV4T2YoXCI6XCIpO1xuICBpZiAoaSA+PSAwICYmIChwcmVmaXggPSBuYW1lLnNsaWNlKDAsIGkpKSAhPT0gXCJ4bWxuc1wiKSBuYW1lID0gbmFtZS5zbGljZShpICsgMSk7XG4gIHJldHVybiBuYW1lc3BhY2VzLmhhc093blByb3BlcnR5KHByZWZpeCkgPyB7c3BhY2U6IG5hbWVzcGFjZXNbcHJlZml4XSwgbG9jYWw6IG5hbWV9IDogbmFtZTtcbn07XG5cbmZ1bmN0aW9uIGNyZWF0b3JJbmhlcml0KG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBkb2N1bWVudCA9IHRoaXMub3duZXJEb2N1bWVudCxcbiAgICAgICAgdXJpID0gdGhpcy5uYW1lc3BhY2VVUkk7XG4gICAgcmV0dXJuIHVyaSA9PT0geGh0bWwgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm5hbWVzcGFjZVVSSSA9PT0geGh0bWxcbiAgICAgICAgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5hbWUpXG4gICAgICAgIDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHVyaSwgbmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0b3JGaXhlZChmdWxsbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgfTtcbn1cblxudmFyIGNyZWF0b3IgPSBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcbiAgcmV0dXJuIChmdWxsbmFtZS5sb2NhbFxuICAgICAgPyBjcmVhdG9yRml4ZWRcbiAgICAgIDogY3JlYXRvckluaGVyaXQpKGZ1bGxuYW1lKTtcbn07XG5cbnZhciBuZXh0SWQgPSAwO1xuXG5mdW5jdGlvbiBsb2NhbCQxKCkge1xuICByZXR1cm4gbmV3IExvY2FsO1xufVxuXG5mdW5jdGlvbiBMb2NhbCgpIHtcbiAgdGhpcy5fID0gXCJAXCIgKyAoKytuZXh0SWQpLnRvU3RyaW5nKDM2KTtcbn1cblxuTG9jYWwucHJvdG90eXBlID0gbG9jYWwkMS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBMb2NhbCxcbiAgZ2V0OiBmdW5jdGlvbihub2RlKSB7XG4gICAgdmFyIGlkID0gdGhpcy5fO1xuICAgIHdoaWxlICghKGlkIGluIG5vZGUpKSBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkgcmV0dXJuO1xuICAgIHJldHVybiBub2RlW2lkXTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihub2RlLCB2YWx1ZSkge1xuICAgIHJldHVybiBub2RlW3RoaXMuX10gPSB2YWx1ZTtcbiAgfSxcbiAgcmVtb3ZlOiBmdW5jdGlvbihub2RlKSB7XG4gICAgcmV0dXJuIHRoaXMuXyBpbiBub2RlICYmIGRlbGV0ZSBub2RlW3RoaXMuX107XG4gIH0sXG4gIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fO1xuICB9XG59O1xuXG52YXIgbWF0Y2hlciA9IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5tYXRjaGVzKHNlbGVjdG9yKTtcbiAgfTtcbn07XG5cbmlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIGlmICghZWxlbWVudC5tYXRjaGVzKSB7XG4gICAgdmFyIHZlbmRvck1hdGNoZXMgPSBlbGVtZW50LndlYmtpdE1hdGNoZXNTZWxlY3RvclxuICAgICAgICB8fCBlbGVtZW50Lm1zTWF0Y2hlc1NlbGVjdG9yXG4gICAgICAgIHx8IGVsZW1lbnQubW96TWF0Y2hlc1NlbGVjdG9yXG4gICAgICAgIHx8IGVsZW1lbnQub01hdGNoZXNTZWxlY3RvcjtcbiAgICBtYXRjaGVyID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHZlbmRvck1hdGNoZXMuY2FsbCh0aGlzLCBzZWxlY3Rvcik7XG4gICAgICB9O1xuICAgIH07XG4gIH1cbn1cblxudmFyIG1hdGNoZXIkMSA9IG1hdGNoZXI7XG5cbnZhciBmaWx0ZXJFdmVudHMgPSB7fTtcblxuZXhwb3J0cy5ldmVudCA9IG51bGw7XG5cbmlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgdmFyIGVsZW1lbnQkMSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgaWYgKCEoXCJvbm1vdXNlZW50ZXJcIiBpbiBlbGVtZW50JDEpKSB7XG4gICAgZmlsdGVyRXZlbnRzID0ge21vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsIG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIn07XG4gIH1cbn1cblxuZnVuY3Rpb24gZmlsdGVyQ29udGV4dExpc3RlbmVyKGxpc3RlbmVyLCBpbmRleCwgZ3JvdXApIHtcbiAgbGlzdGVuZXIgPSBjb250ZXh0TGlzdGVuZXIobGlzdGVuZXIsIGluZGV4LCBncm91cCk7XG4gIHJldHVybiBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciByZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldDtcbiAgICBpZiAoIXJlbGF0ZWQgfHwgKHJlbGF0ZWQgIT09IHRoaXMgJiYgIShyZWxhdGVkLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKHRoaXMpICYgOCkpKSB7XG4gICAgICBsaXN0ZW5lci5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbnRleHRMaXN0ZW5lcihsaXN0ZW5lciwgaW5kZXgsIGdyb3VwKSB7XG4gIHJldHVybiBmdW5jdGlvbihldmVudDEpIHtcbiAgICB2YXIgZXZlbnQwID0gZXhwb3J0cy5ldmVudDsgLy8gRXZlbnRzIGNhbiBiZSByZWVudHJhbnQgKGUuZy4sIGZvY3VzKS5cbiAgICBleHBvcnRzLmV2ZW50ID0gZXZlbnQxO1xuICAgIHRyeSB7XG4gICAgICBsaXN0ZW5lci5jYWxsKHRoaXMsIHRoaXMuX19kYXRhX18sIGluZGV4LCBncm91cCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGV4cG9ydHMuZXZlbnQgPSBldmVudDA7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBwYXJzZVR5cGVuYW1lcyQxKHR5cGVuYW1lcykge1xuICByZXR1cm4gdHlwZW5hbWVzLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykubWFwKGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgbmFtZSA9IFwiXCIsIGkgPSB0LmluZGV4T2YoXCIuXCIpO1xuICAgIGlmIChpID49IDApIG5hbWUgPSB0LnNsaWNlKGkgKyAxKSwgdCA9IHQuc2xpY2UoMCwgaSk7XG4gICAgcmV0dXJuIHt0eXBlOiB0LCBuYW1lOiBuYW1lfTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG9uUmVtb3ZlKHR5cGVuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgb24gPSB0aGlzLl9fb247XG4gICAgaWYgKCFvbikgcmV0dXJuO1xuICAgIGZvciAodmFyIGogPSAwLCBpID0gLTEsIG0gPSBvbi5sZW5ndGgsIG87IGogPCBtOyArK2opIHtcbiAgICAgIGlmIChvID0gb25bal0sICghdHlwZW5hbWUudHlwZSB8fCBvLnR5cGUgPT09IHR5cGVuYW1lLnR5cGUpICYmIG8ubmFtZSA9PT0gdHlwZW5hbWUubmFtZSkge1xuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoby50eXBlLCBvLmxpc3RlbmVyLCBvLmNhcHR1cmUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb25bKytpXSA9IG87XG4gICAgICB9XG4gICAgfVxuICAgIGlmICgrK2kpIG9uLmxlbmd0aCA9IGk7XG4gICAgZWxzZSBkZWxldGUgdGhpcy5fX29uO1xuICB9O1xufVxuXG5mdW5jdGlvbiBvbkFkZCh0eXBlbmFtZSwgdmFsdWUsIGNhcHR1cmUpIHtcbiAgdmFyIHdyYXAgPSBmaWx0ZXJFdmVudHMuaGFzT3duUHJvcGVydHkodHlwZW5hbWUudHlwZSkgPyBmaWx0ZXJDb250ZXh0TGlzdGVuZXIgOiBjb250ZXh0TGlzdGVuZXI7XG4gIHJldHVybiBmdW5jdGlvbihkLCBpLCBncm91cCkge1xuICAgIHZhciBvbiA9IHRoaXMuX19vbiwgbywgbGlzdGVuZXIgPSB3cmFwKHZhbHVlLCBpLCBncm91cCk7XG4gICAgaWYgKG9uKSBmb3IgKHZhciBqID0gMCwgbSA9IG9uLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgICAgaWYgKChvID0gb25bal0pLnR5cGUgPT09IHR5cGVuYW1lLnR5cGUgJiYgby5uYW1lID09PSB0eXBlbmFtZS5uYW1lKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihvLnR5cGUsIG8ubGlzdGVuZXIsIG8uY2FwdHVyZSk7XG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihvLnR5cGUsIG8ubGlzdGVuZXIgPSBsaXN0ZW5lciwgby5jYXB0dXJlID0gY2FwdHVyZSk7XG4gICAgICAgIG8udmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIodHlwZW5hbWUudHlwZSwgbGlzdGVuZXIsIGNhcHR1cmUpO1xuICAgIG8gPSB7dHlwZTogdHlwZW5hbWUudHlwZSwgbmFtZTogdHlwZW5hbWUubmFtZSwgdmFsdWU6IHZhbHVlLCBsaXN0ZW5lcjogbGlzdGVuZXIsIGNhcHR1cmU6IGNhcHR1cmV9O1xuICAgIGlmICghb24pIHRoaXMuX19vbiA9IFtvXTtcbiAgICBlbHNlIG9uLnB1c2gobyk7XG4gIH07XG59XG5cbnZhciBzZWxlY3Rpb25fb24gPSBmdW5jdGlvbih0eXBlbmFtZSwgdmFsdWUsIGNhcHR1cmUpIHtcbiAgdmFyIHR5cGVuYW1lcyA9IHBhcnNlVHlwZW5hbWVzJDEodHlwZW5hbWUgKyBcIlwiKSwgaSwgbiA9IHR5cGVuYW1lcy5sZW5ndGgsIHQ7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIG9uID0gdGhpcy5ub2RlKCkuX19vbjtcbiAgICBpZiAob24pIGZvciAodmFyIGogPSAwLCBtID0gb24ubGVuZ3RoLCBvOyBqIDwgbTsgKytqKSB7XG4gICAgICBmb3IgKGkgPSAwLCBvID0gb25bal07IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKCh0ID0gdHlwZW5hbWVzW2ldKS50eXBlID09PSBvLnR5cGUgJiYgdC5uYW1lID09PSBvLm5hbWUpIHtcbiAgICAgICAgICByZXR1cm4gby52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuICBvbiA9IHZhbHVlID8gb25BZGQgOiBvblJlbW92ZTtcbiAgaWYgKGNhcHR1cmUgPT0gbnVsbCkgY2FwdHVyZSA9IGZhbHNlO1xuICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB0aGlzLmVhY2gob24odHlwZW5hbWVzW2ldLCB2YWx1ZSwgY2FwdHVyZSkpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIGN1c3RvbUV2ZW50KGV2ZW50MSwgbGlzdGVuZXIsIHRoYXQsIGFyZ3MpIHtcbiAgdmFyIGV2ZW50MCA9IGV4cG9ydHMuZXZlbnQ7XG4gIGV2ZW50MS5zb3VyY2VFdmVudCA9IGV4cG9ydHMuZXZlbnQ7XG4gIGV4cG9ydHMuZXZlbnQgPSBldmVudDE7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9IGZpbmFsbHkge1xuICAgIGV4cG9ydHMuZXZlbnQgPSBldmVudDA7XG4gIH1cbn1cblxudmFyIHNvdXJjZUV2ZW50ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBjdXJyZW50ID0gZXhwb3J0cy5ldmVudCwgc291cmNlO1xuICB3aGlsZSAoc291cmNlID0gY3VycmVudC5zb3VyY2VFdmVudCkgY3VycmVudCA9IHNvdXJjZTtcbiAgcmV0dXJuIGN1cnJlbnQ7XG59O1xuXG52YXIgcG9pbnQgPSBmdW5jdGlvbihub2RlLCBldmVudCkge1xuICB2YXIgc3ZnID0gbm9kZS5vd25lclNWR0VsZW1lbnQgfHwgbm9kZTtcblxuICBpZiAoc3ZnLmNyZWF0ZVNWR1BvaW50KSB7XG4gICAgdmFyIHBvaW50ID0gc3ZnLmNyZWF0ZVNWR1BvaW50KCk7XG4gICAgcG9pbnQueCA9IGV2ZW50LmNsaWVudFgsIHBvaW50LnkgPSBldmVudC5jbGllbnRZO1xuICAgIHBvaW50ID0gcG9pbnQubWF0cml4VHJhbnNmb3JtKG5vZGUuZ2V0U2NyZWVuQ1RNKCkuaW52ZXJzZSgpKTtcbiAgICByZXR1cm4gW3BvaW50LngsIHBvaW50LnldO1xuICB9XG5cbiAgdmFyIHJlY3QgPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICByZXR1cm4gW2V2ZW50LmNsaWVudFggLSByZWN0LmxlZnQgLSBub2RlLmNsaWVudExlZnQsIGV2ZW50LmNsaWVudFkgLSByZWN0LnRvcCAtIG5vZGUuY2xpZW50VG9wXTtcbn07XG5cbnZhciBtb3VzZSA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgdmFyIGV2ZW50ID0gc291cmNlRXZlbnQoKTtcbiAgaWYgKGV2ZW50LmNoYW5nZWRUb3VjaGVzKSBldmVudCA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdO1xuICByZXR1cm4gcG9pbnQobm9kZSwgZXZlbnQpO1xufTtcblxuZnVuY3Rpb24gbm9uZSgpIHt9XG5cbnZhciBzZWxlY3RvciA9IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiBzZWxlY3RvciA9PSBudWxsID8gbm9uZSA6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICB9O1xufTtcblxudmFyIHNlbGVjdGlvbl9zZWxlY3QgPSBmdW5jdGlvbihzZWxlY3QpIHtcbiAgaWYgKHR5cGVvZiBzZWxlY3QgIT09IFwiZnVuY3Rpb25cIikgc2VsZWN0ID0gc2VsZWN0b3Ioc2VsZWN0KTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHN1Ymdyb3VwID0gc3ViZ3JvdXBzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBzdWJub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIChzdWJub2RlID0gc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSkge1xuICAgICAgICBpZiAoXCJfX2RhdGFfX1wiIGluIG5vZGUpIHN1Ym5vZGUuX19kYXRhX18gPSBub2RlLl9fZGF0YV9fO1xuICAgICAgICBzdWJncm91cFtpXSA9IHN1Ym5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzKTtcbn07XG5cbmZ1bmN0aW9uIGVtcHR5JDEoKSB7XG4gIHJldHVybiBbXTtcbn1cblxudmFyIHNlbGVjdG9yQWxsID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHNlbGVjdG9yID09IG51bGwgPyBlbXB0eSQxIDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gIH07XG59O1xuXG52YXIgc2VsZWN0aW9uX3NlbGVjdEFsbCA9IGZ1bmN0aW9uKHNlbGVjdCkge1xuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvckFsbChzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IFtdLCBwYXJlbnRzID0gW10sIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHN1Ymdyb3Vwcy5wdXNoKHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSk7XG4gICAgICAgIHBhcmVudHMucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdWJncm91cHMsIHBhcmVudHMpO1xufTtcblxudmFyIHNlbGVjdGlvbl9maWx0ZXIgPSBmdW5jdGlvbihtYXRjaCkge1xuICBpZiAodHlwZW9mIG1hdGNoICE9PSBcImZ1bmN0aW9uXCIpIG1hdGNoID0gbWF0Y2hlciQxKG1hdGNoKTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHN1Ymdyb3VwID0gc3ViZ3JvdXBzW2pdID0gW10sIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgbWF0Y2guY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpIHtcbiAgICAgICAgc3ViZ3JvdXAucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMpO1xufTtcblxudmFyIHNwYXJzZSA9IGZ1bmN0aW9uKHVwZGF0ZSkge1xuICByZXR1cm4gbmV3IEFycmF5KHVwZGF0ZS5sZW5ndGgpO1xufTtcblxudmFyIHNlbGVjdGlvbl9lbnRlciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFNlbGVjdGlvbih0aGlzLl9lbnRlciB8fCB0aGlzLl9ncm91cHMubWFwKHNwYXJzZSksIHRoaXMuX3BhcmVudHMpO1xufTtcblxuZnVuY3Rpb24gRW50ZXJOb2RlKHBhcmVudCwgZGF0dW0pIHtcbiAgdGhpcy5vd25lckRvY3VtZW50ID0gcGFyZW50Lm93bmVyRG9jdW1lbnQ7XG4gIHRoaXMubmFtZXNwYWNlVVJJID0gcGFyZW50Lm5hbWVzcGFjZVVSSTtcbiAgdGhpcy5fbmV4dCA9IG51bGw7XG4gIHRoaXMuX3BhcmVudCA9IHBhcmVudDtcbiAgdGhpcy5fX2RhdGFfXyA9IGRhdHVtO1xufVxuXG5FbnRlck5vZGUucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogRW50ZXJOb2RlLFxuICBhcHBlbmRDaGlsZDogZnVuY3Rpb24oY2hpbGQpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIHRoaXMuX25leHQpOyB9LFxuICBpbnNlcnRCZWZvcmU6IGZ1bmN0aW9uKGNoaWxkLCBuZXh0KSB7IHJldHVybiB0aGlzLl9wYXJlbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCBuZXh0KTsgfSxcbiAgcXVlcnlTZWxlY3RvcjogZnVuY3Rpb24oc2VsZWN0b3IpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTsgfSxcbiAgcXVlcnlTZWxlY3RvckFsbDogZnVuY3Rpb24oc2VsZWN0b3IpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTsgfVxufTtcblxudmFyIGNvbnN0YW50JDEgPSBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn07XG5cbnZhciBrZXlQcmVmaXggPSBcIiRcIjsgLy8gUHJvdGVjdCBhZ2FpbnN0IGtleXMgbGlrZSDigJxfX3Byb3RvX1/igJ0uXG5cbmZ1bmN0aW9uIGJpbmRJbmRleChwYXJlbnQsIGdyb3VwLCBlbnRlciwgdXBkYXRlLCBleGl0LCBkYXRhKSB7XG4gIHZhciBpID0gMCxcbiAgICAgIG5vZGUsXG4gICAgICBncm91cExlbmd0aCA9IGdyb3VwLmxlbmd0aCxcbiAgICAgIGRhdGFMZW5ndGggPSBkYXRhLmxlbmd0aDtcblxuICAvLyBQdXQgYW55IG5vbi1udWxsIG5vZGVzIHRoYXQgZml0IGludG8gdXBkYXRlLlxuICAvLyBQdXQgYW55IG51bGwgbm9kZXMgaW50byBlbnRlci5cbiAgLy8gUHV0IGFueSByZW1haW5pbmcgZGF0YSBpbnRvIGVudGVyLlxuICBmb3IgKDsgaSA8IGRhdGFMZW5ndGg7ICsraSkge1xuICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgIG5vZGUuX19kYXRhX18gPSBkYXRhW2ldO1xuICAgICAgdXBkYXRlW2ldID0gbm9kZTtcbiAgICB9IGVsc2Uge1xuICAgICAgZW50ZXJbaV0gPSBuZXcgRW50ZXJOb2RlKHBhcmVudCwgZGF0YVtpXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gUHV0IGFueSBub24tbnVsbCBub2RlcyB0aGF0IGRvbuKAmXQgZml0IGludG8gZXhpdC5cbiAgZm9yICg7IGkgPCBncm91cExlbmd0aDsgKytpKSB7XG4gICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgZXhpdFtpXSA9IG5vZGU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGJpbmRLZXkocGFyZW50LCBncm91cCwgZW50ZXIsIHVwZGF0ZSwgZXhpdCwgZGF0YSwga2V5KSB7XG4gIHZhciBpLFxuICAgICAgbm9kZSxcbiAgICAgIG5vZGVCeUtleVZhbHVlID0ge30sXG4gICAgICBncm91cExlbmd0aCA9IGdyb3VwLmxlbmd0aCxcbiAgICAgIGRhdGFMZW5ndGggPSBkYXRhLmxlbmd0aCxcbiAgICAgIGtleVZhbHVlcyA9IG5ldyBBcnJheShncm91cExlbmd0aCksXG4gICAgICBrZXlWYWx1ZTtcblxuICAvLyBDb21wdXRlIHRoZSBrZXkgZm9yIGVhY2ggbm9kZS5cbiAgLy8gSWYgbXVsdGlwbGUgbm9kZXMgaGF2ZSB0aGUgc2FtZSBrZXksIHRoZSBkdXBsaWNhdGVzIGFyZSBhZGRlZCB0byBleGl0LlxuICBmb3IgKGkgPSAwOyBpIDwgZ3JvdXBMZW5ndGg7ICsraSkge1xuICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgIGtleVZhbHVlc1tpXSA9IGtleVZhbHVlID0ga2V5UHJlZml4ICsga2V5LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApO1xuICAgICAgaWYgKGtleVZhbHVlIGluIG5vZGVCeUtleVZhbHVlKSB7XG4gICAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZUJ5S2V5VmFsdWVba2V5VmFsdWVdID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBDb21wdXRlIHRoZSBrZXkgZm9yIGVhY2ggZGF0dW0uXG4gIC8vIElmIHRoZXJlIGEgbm9kZSBhc3NvY2lhdGVkIHdpdGggdGhpcyBrZXksIGpvaW4gYW5kIGFkZCBpdCB0byB1cGRhdGUuXG4gIC8vIElmIHRoZXJlIGlzIG5vdCAob3IgdGhlIGtleSBpcyBhIGR1cGxpY2F0ZSksIGFkZCBpdCB0byBlbnRlci5cbiAgZm9yIChpID0gMDsgaSA8IGRhdGFMZW5ndGg7ICsraSkge1xuICAgIGtleVZhbHVlID0ga2V5UHJlZml4ICsga2V5LmNhbGwocGFyZW50LCBkYXRhW2ldLCBpLCBkYXRhKTtcbiAgICBpZiAobm9kZSA9IG5vZGVCeUtleVZhbHVlW2tleVZhbHVlXSkge1xuICAgICAgdXBkYXRlW2ldID0gbm9kZTtcbiAgICAgIG5vZGUuX19kYXRhX18gPSBkYXRhW2ldO1xuICAgICAgbm9kZUJ5S2V5VmFsdWVba2V5VmFsdWVdID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgZW50ZXJbaV0gPSBuZXcgRW50ZXJOb2RlKHBhcmVudCwgZGF0YVtpXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gQWRkIGFueSByZW1haW5pbmcgbm9kZXMgdGhhdCB3ZXJlIG5vdCBib3VuZCB0byBkYXRhIHRvIGV4aXQuXG4gIGZvciAoaSA9IDA7IGkgPCBncm91cExlbmd0aDsgKytpKSB7XG4gICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIChub2RlQnlLZXlWYWx1ZVtrZXlWYWx1ZXNbaV1dID09PSBub2RlKSkge1xuICAgICAgZXhpdFtpXSA9IG5vZGU7XG4gICAgfVxuICB9XG59XG5cbnZhciBzZWxlY3Rpb25fZGF0YSA9IGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgaWYgKCF2YWx1ZSkge1xuICAgIGRhdGEgPSBuZXcgQXJyYXkodGhpcy5zaXplKCkpLCBqID0gLTE7XG4gICAgdGhpcy5lYWNoKGZ1bmN0aW9uKGQpIHsgZGF0YVsrK2pdID0gZDsgfSk7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICB2YXIgYmluZCA9IGtleSA/IGJpbmRLZXkgOiBiaW5kSW5kZXgsXG4gICAgICBwYXJlbnRzID0gdGhpcy5fcGFyZW50cyxcbiAgICAgIGdyb3VwcyA9IHRoaXMuX2dyb3VwcztcblxuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHZhbHVlID0gY29uc3RhbnQkMSh2YWx1ZSk7XG5cbiAgZm9yICh2YXIgbSA9IGdyb3Vwcy5sZW5ndGgsIHVwZGF0ZSA9IG5ldyBBcnJheShtKSwgZW50ZXIgPSBuZXcgQXJyYXkobSksIGV4aXQgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgdmFyIHBhcmVudCA9IHBhcmVudHNbal0sXG4gICAgICAgIGdyb3VwID0gZ3JvdXBzW2pdLFxuICAgICAgICBncm91cExlbmd0aCA9IGdyb3VwLmxlbmd0aCxcbiAgICAgICAgZGF0YSA9IHZhbHVlLmNhbGwocGFyZW50LCBwYXJlbnQgJiYgcGFyZW50Ll9fZGF0YV9fLCBqLCBwYXJlbnRzKSxcbiAgICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoLFxuICAgICAgICBlbnRlckdyb3VwID0gZW50ZXJbal0gPSBuZXcgQXJyYXkoZGF0YUxlbmd0aCksXG4gICAgICAgIHVwZGF0ZUdyb3VwID0gdXBkYXRlW2pdID0gbmV3IEFycmF5KGRhdGFMZW5ndGgpLFxuICAgICAgICBleGl0R3JvdXAgPSBleGl0W2pdID0gbmV3IEFycmF5KGdyb3VwTGVuZ3RoKTtcblxuICAgIGJpbmQocGFyZW50LCBncm91cCwgZW50ZXJHcm91cCwgdXBkYXRlR3JvdXAsIGV4aXRHcm91cCwgZGF0YSwga2V5KTtcblxuICAgIC8vIE5vdyBjb25uZWN0IHRoZSBlbnRlciBub2RlcyB0byB0aGVpciBmb2xsb3dpbmcgdXBkYXRlIG5vZGUsIHN1Y2ggdGhhdFxuICAgIC8vIGFwcGVuZENoaWxkIGNhbiBpbnNlcnQgdGhlIG1hdGVyaWFsaXplZCBlbnRlciBub2RlIGJlZm9yZSB0aGlzIG5vZGUsXG4gICAgLy8gcmF0aGVyIHRoYW4gYXQgdGhlIGVuZCBvZiB0aGUgcGFyZW50IG5vZGUuXG4gICAgZm9yICh2YXIgaTAgPSAwLCBpMSA9IDAsIHByZXZpb3VzLCBuZXh0OyBpMCA8IGRhdGFMZW5ndGg7ICsraTApIHtcbiAgICAgIGlmIChwcmV2aW91cyA9IGVudGVyR3JvdXBbaTBdKSB7XG4gICAgICAgIGlmIChpMCA+PSBpMSkgaTEgPSBpMCArIDE7XG4gICAgICAgIHdoaWxlICghKG5leHQgPSB1cGRhdGVHcm91cFtpMV0pICYmICsraTEgPCBkYXRhTGVuZ3RoKTtcbiAgICAgICAgcHJldmlvdXMuX25leHQgPSBuZXh0IHx8IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlID0gbmV3IFNlbGVjdGlvbih1cGRhdGUsIHBhcmVudHMpO1xuICB1cGRhdGUuX2VudGVyID0gZW50ZXI7XG4gIHVwZGF0ZS5fZXhpdCA9IGV4aXQ7XG4gIHJldHVybiB1cGRhdGU7XG59O1xuXG52YXIgc2VsZWN0aW9uX2V4aXQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24odGhpcy5fZXhpdCB8fCB0aGlzLl9ncm91cHMubWFwKHNwYXJzZSksIHRoaXMuX3BhcmVudHMpO1xufTtcblxudmFyIHNlbGVjdGlvbl9tZXJnZSA9IGZ1bmN0aW9uKHNlbGVjdGlvbiQkMSkge1xuXG4gIGZvciAodmFyIGdyb3VwczAgPSB0aGlzLl9ncm91cHMsIGdyb3VwczEgPSBzZWxlY3Rpb24kJDEuX2dyb3VwcywgbTAgPSBncm91cHMwLmxlbmd0aCwgbTEgPSBncm91cHMxLmxlbmd0aCwgbSA9IE1hdGgubWluKG0wLCBtMSksIG1lcmdlcyA9IG5ldyBBcnJheShtMCksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAwID0gZ3JvdXBzMFtqXSwgZ3JvdXAxID0gZ3JvdXBzMVtqXSwgbiA9IGdyb3VwMC5sZW5ndGgsIG1lcmdlID0gbWVyZ2VzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cDBbaV0gfHwgZ3JvdXAxW2ldKSB7XG4gICAgICAgIG1lcmdlW2ldID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKDsgaiA8IG0wOyArK2opIHtcbiAgICBtZXJnZXNbal0gPSBncm91cHMwW2pdO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24obWVyZ2VzLCB0aGlzLl9wYXJlbnRzKTtcbn07XG5cbnZhciBzZWxlY3Rpb25fb3JkZXIgPSBmdW5jdGlvbigpIHtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIGogPSAtMSwgbSA9IGdyb3Vwcy5sZW5ndGg7ICsraiA8IG07KSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSBncm91cC5sZW5ndGggLSAxLCBuZXh0ID0gZ3JvdXBbaV0sIG5vZGU7IC0taSA+PSAwOykge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBpZiAobmV4dCAmJiBuZXh0ICE9PSBub2RlLm5leHRTaWJsaW5nKSBuZXh0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5vZGUsIG5leHQpO1xuICAgICAgICBuZXh0ID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbnZhciBzZWxlY3Rpb25fc29ydCA9IGZ1bmN0aW9uKGNvbXBhcmUpIHtcbiAgaWYgKCFjb21wYXJlKSBjb21wYXJlID0gYXNjZW5kaW5nJDE7XG5cbiAgZnVuY3Rpb24gY29tcGFyZU5vZGUoYSwgYikge1xuICAgIHJldHVybiBhICYmIGIgPyBjb21wYXJlKGEuX19kYXRhX18sIGIuX19kYXRhX18pIDogIWEgLSAhYjtcbiAgfVxuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHNvcnRncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHNvcnRncm91cCA9IHNvcnRncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHNvcnRncm91cFtpXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICAgIHNvcnRncm91cC5zb3J0KGNvbXBhcmVOb2RlKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHNvcnRncm91cHMsIHRoaXMuX3BhcmVudHMpLm9yZGVyKCk7XG59O1xuXG5mdW5jdGlvbiBhc2NlbmRpbmckMShhLCBiKSB7XG4gIHJldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogYSA+PSBiID8gMCA6IE5hTjtcbn1cblxudmFyIHNlbGVjdGlvbl9jYWxsID0gZnVuY3Rpb24oKSB7XG4gIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50c1swXTtcbiAgYXJndW1lbnRzWzBdID0gdGhpcztcbiAgY2FsbGJhY2suYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG52YXIgc2VsZWN0aW9uX25vZGVzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBub2RlcyA9IG5ldyBBcnJheSh0aGlzLnNpemUoKSksIGkgPSAtMTtcbiAgdGhpcy5lYWNoKGZ1bmN0aW9uKCkgeyBub2Rlc1srK2ldID0gdGhpczsgfSk7XG4gIHJldHVybiBub2Rlcztcbn07XG5cbnZhciBzZWxlY3Rpb25fbm9kZSA9IGZ1bmN0aW9uKCkge1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgaiA9IDAsIG0gPSBncm91cHMubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSAwLCBuID0gZ3JvdXAubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICB2YXIgbm9kZSA9IGdyb3VwW2ldO1xuICAgICAgaWYgKG5vZGUpIHJldHVybiBub2RlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufTtcblxudmFyIHNlbGVjdGlvbl9zaXplID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzaXplID0gMDtcbiAgdGhpcy5lYWNoKGZ1bmN0aW9uKCkgeyArK3NpemU7IH0pO1xuICByZXR1cm4gc2l6ZTtcbn07XG5cbnZhciBzZWxlY3Rpb25fZW1wdHkgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICF0aGlzLm5vZGUoKTtcbn07XG5cbnZhciBzZWxlY3Rpb25fZWFjaCA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gMCwgbSA9IGdyb3Vwcy5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGgsIG5vZGU7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIGNhbGxiYWNrLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gYXR0clJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0clJlbW92ZU5TKGZ1bGxuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudChuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnROUyhmdWxsbmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsLCB2YWx1ZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJGdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgIGVsc2UgdGhpcy5zZXRBdHRyaWJ1dGUobmFtZSwgdik7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJGdW5jdGlvbk5TKGZ1bGxuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICBlbHNlIHRoaXMuc2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsLCB2KTtcbiAgfTtcbn1cblxudmFyIHNlbGVjdGlvbl9hdHRyID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciBub2RlID0gdGhpcy5ub2RlKCk7XG4gICAgcmV0dXJuIGZ1bGxuYW1lLmxvY2FsXG4gICAgICAgID8gbm9kZS5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpXG4gICAgICAgIDogbm9kZS5nZXRBdHRyaWJ1dGUoZnVsbG5hbWUpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbFxuICAgICAgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyUmVtb3ZlTlMgOiBhdHRyUmVtb3ZlKSA6ICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyRnVuY3Rpb25OUyA6IGF0dHJGdW5jdGlvbilcbiAgICAgIDogKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckNvbnN0YW50TlMgOiBhdHRyQ29uc3RhbnQpKSkoZnVsbG5hbWUsIHZhbHVlKSk7XG59O1xuXG52YXIgZGVmYXVsdFZpZXcgPSBmdW5jdGlvbihub2RlKSB7XG4gIHJldHVybiAobm9kZS5vd25lckRvY3VtZW50ICYmIG5vZGUub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldykgLy8gbm9kZSBpcyBhIE5vZGVcbiAgICAgIHx8IChub2RlLmRvY3VtZW50ICYmIG5vZGUpIC8vIG5vZGUgaXMgYSBXaW5kb3dcbiAgICAgIHx8IG5vZGUuZGVmYXVsdFZpZXc7IC8vIG5vZGUgaXMgYSBEb2N1bWVudFxufTtcblxuZnVuY3Rpb24gc3R5bGVSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVDb25zdGFudChuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdmFsdWUsIHByaW9yaXR5KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVGdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICAgIGVsc2UgdGhpcy5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2LCBwcmlvcml0eSk7XG4gIH07XG59XG5cbnZhciBzZWxlY3Rpb25fc3R5bGUgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxXG4gICAgICA/IHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbFxuICAgICAgICAgICAgPyBzdHlsZVJlbW92ZSA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgICA/IHN0eWxlRnVuY3Rpb25cbiAgICAgICAgICAgIDogc3R5bGVDb25zdGFudCkobmFtZSwgdmFsdWUsIHByaW9yaXR5ID09IG51bGwgPyBcIlwiIDogcHJpb3JpdHkpKVxuICAgICAgOiBzdHlsZVZhbHVlKHRoaXMubm9kZSgpLCBuYW1lKTtcbn07XG5cbmZ1bmN0aW9uIHN0eWxlVmFsdWUobm9kZSwgbmFtZSkge1xuICByZXR1cm4gbm9kZS5zdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpXG4gICAgICB8fCBkZWZhdWx0Vmlldyhub2RlKS5nZXRDb21wdXRlZFN0eWxlKG5vZGUsIG51bGwpLmdldFByb3BlcnR5VmFsdWUobmFtZSk7XG59XG5cbmZ1bmN0aW9uIHByb3BlcnR5UmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGRlbGV0ZSB0aGlzW25hbWVdO1xuICB9O1xufVxuXG5mdW5jdGlvbiBwcm9wZXJ0eUNvbnN0YW50KG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzW25hbWVdID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHByb3BlcnR5RnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSBkZWxldGUgdGhpc1tuYW1lXTtcbiAgICBlbHNlIHRoaXNbbmFtZV0gPSB2O1xuICB9O1xufVxuXG52YXIgc2VsZWN0aW9uX3Byb3BlcnR5ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxXG4gICAgICA/IHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbFxuICAgICAgICAgID8gcHJvcGVydHlSZW1vdmUgOiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gcHJvcGVydHlGdW5jdGlvblxuICAgICAgICAgIDogcHJvcGVydHlDb25zdGFudCkobmFtZSwgdmFsdWUpKVxuICAgICAgOiB0aGlzLm5vZGUoKVtuYW1lXTtcbn07XG5cbmZ1bmN0aW9uIGNsYXNzQXJyYXkoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcudHJpbSgpLnNwbGl0KC9efFxccysvKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NMaXN0KG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuY2xhc3NMaXN0IHx8IG5ldyBDbGFzc0xpc3Qobm9kZSk7XG59XG5cbmZ1bmN0aW9uIENsYXNzTGlzdChub2RlKSB7XG4gIHRoaXMuX25vZGUgPSBub2RlO1xuICB0aGlzLl9uYW1lcyA9IGNsYXNzQXJyYXkobm9kZS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiKTtcbn1cblxuQ2xhc3NMaXN0LnByb3RvdHlwZSA9IHtcbiAgYWRkOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIGkgPSB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgIGlmIChpIDwgMCkge1xuICAgICAgdGhpcy5fbmFtZXMucHVzaChuYW1lKTtcbiAgICAgIHRoaXMuX25vZGUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgdGhpcy5fbmFtZXMuam9pbihcIiBcIikpO1xuICAgIH1cbiAgfSxcbiAgcmVtb3ZlOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIGkgPSB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgIGlmIChpID49IDApIHtcbiAgICAgIHRoaXMuX25hbWVzLnNwbGljZShpLCAxKTtcbiAgICAgIHRoaXMuX25vZGUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgdGhpcy5fbmFtZXMuam9pbihcIiBcIikpO1xuICAgIH1cbiAgfSxcbiAgY29udGFpbnM6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5fbmFtZXMuaW5kZXhPZihuYW1lKSA+PSAwO1xuICB9XG59O1xuXG5mdW5jdGlvbiBjbGFzc2VkQWRkKG5vZGUsIG5hbWVzKSB7XG4gIHZhciBsaXN0ID0gY2xhc3NMaXN0KG5vZGUpLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gIHdoaWxlICgrK2kgPCBuKSBsaXN0LmFkZChuYW1lc1tpXSk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRSZW1vdmUobm9kZSwgbmFtZXMpIHtcbiAgdmFyIGxpc3QgPSBjbGFzc0xpc3Qobm9kZSksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgd2hpbGUgKCsraSA8IG4pIGxpc3QucmVtb3ZlKG5hbWVzW2ldKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZFRydWUobmFtZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGNsYXNzZWRBZGQodGhpcywgbmFtZXMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkRmFsc2UobmFtZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGNsYXNzZWRSZW1vdmUodGhpcywgbmFtZXMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkRnVuY3Rpb24obmFtZXMsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAodmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKSA/IGNsYXNzZWRBZGQgOiBjbGFzc2VkUmVtb3ZlKSh0aGlzLCBuYW1lcyk7XG4gIH07XG59XG5cbnZhciBzZWxlY3Rpb25fY2xhc3NlZCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBuYW1lcyA9IGNsYXNzQXJyYXkobmFtZSArIFwiXCIpO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciBsaXN0ID0gY2xhc3NMaXN0KHRoaXMubm9kZSgpKSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoIWxpc3QuY29udGFpbnMobmFtZXNbaV0pKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gdGhpcy5lYWNoKCh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyBjbGFzc2VkRnVuY3Rpb24gOiB2YWx1ZVxuICAgICAgPyBjbGFzc2VkVHJ1ZVxuICAgICAgOiBjbGFzc2VkRmFsc2UpKG5hbWVzLCB2YWx1ZSkpO1xufTtcblxuZnVuY3Rpb24gdGV4dFJlbW92ZSgpIHtcbiAgdGhpcy50ZXh0Q29udGVudCA9IFwiXCI7XG59XG5cbmZ1bmN0aW9uIHRleHRDb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0ZXh0RnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdiA9PSBudWxsID8gXCJcIiA6IHY7XG4gIH07XG59XG5cbnZhciBzZWxlY3Rpb25fdGV4dCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgPyB0ZXh0UmVtb3ZlIDogKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyB0ZXh0RnVuY3Rpb25cbiAgICAgICAgICA6IHRleHRDb25zdGFudCkodmFsdWUpKVxuICAgICAgOiB0aGlzLm5vZGUoKS50ZXh0Q29udGVudDtcbn07XG5cbmZ1bmN0aW9uIGh0bWxSZW1vdmUoKSB7XG4gIHRoaXMuaW5uZXJIVE1MID0gXCJcIjtcbn1cblxuZnVuY3Rpb24gaHRtbENvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmlubmVySFRNTCA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBodG1sRnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB0aGlzLmlubmVySFRNTCA9IHYgPT0gbnVsbCA/IFwiXCIgOiB2O1xuICB9O1xufVxuXG52YXIgc2VsZWN0aW9uX2h0bWwgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2godmFsdWUgPT0gbnVsbFxuICAgICAgICAgID8gaHRtbFJlbW92ZSA6ICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gaHRtbEZ1bmN0aW9uXG4gICAgICAgICAgOiBodG1sQ29uc3RhbnQpKHZhbHVlKSlcbiAgICAgIDogdGhpcy5ub2RlKCkuaW5uZXJIVE1MO1xufTtcblxuZnVuY3Rpb24gcmFpc2UoKSB7XG4gIGlmICh0aGlzLm5leHRTaWJsaW5nKSB0aGlzLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQodGhpcyk7XG59XG5cbnZhciBzZWxlY3Rpb25fcmFpc2UgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChyYWlzZSk7XG59O1xuXG5mdW5jdGlvbiBsb3dlcigpIHtcbiAgaWYgKHRoaXMucHJldmlvdXNTaWJsaW5nKSB0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMsIHRoaXMucGFyZW50Tm9kZS5maXJzdENoaWxkKTtcbn1cblxudmFyIHNlbGVjdGlvbl9sb3dlciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5lYWNoKGxvd2VyKTtcbn07XG5cbnZhciBzZWxlY3Rpb25fYXBwZW5kID0gZnVuY3Rpb24obmFtZSkge1xuICB2YXIgY3JlYXRlID0gdHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIiA/IG5hbWUgOiBjcmVhdG9yKG5hbWUpO1xuICByZXR1cm4gdGhpcy5zZWxlY3QoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuYXBwZW5kQ2hpbGQoY3JlYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9KTtcbn07XG5cbmZ1bmN0aW9uIGNvbnN0YW50TnVsbCgpIHtcbiAgcmV0dXJuIG51bGw7XG59XG5cbnZhciBzZWxlY3Rpb25faW5zZXJ0ID0gZnVuY3Rpb24obmFtZSwgYmVmb3JlKSB7XG4gIHZhciBjcmVhdGUgPSB0eXBlb2YgbmFtZSA9PT0gXCJmdW5jdGlvblwiID8gbmFtZSA6IGNyZWF0b3IobmFtZSksXG4gICAgICBzZWxlY3QgPSBiZWZvcmUgPT0gbnVsbCA/IGNvbnN0YW50TnVsbCA6IHR5cGVvZiBiZWZvcmUgPT09IFwiZnVuY3Rpb25cIiA/IGJlZm9yZSA6IHNlbGVjdG9yKGJlZm9yZSk7XG4gIHJldHVybiB0aGlzLnNlbGVjdChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5pbnNlcnRCZWZvcmUoY3JlYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHNlbGVjdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IG51bGwpO1xuICB9KTtcbn07XG5cbmZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgaWYgKHBhcmVudCkgcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xufVxuXG52YXIgc2VsZWN0aW9uX3JlbW92ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5lYWNoKHJlbW92ZSk7XG59O1xuXG52YXIgc2VsZWN0aW9uX2RhdHVtID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5wcm9wZXJ0eShcIl9fZGF0YV9fXCIsIHZhbHVlKVxuICAgICAgOiB0aGlzLm5vZGUoKS5fX2RhdGFfXztcbn07XG5cbmZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQobm9kZSwgdHlwZSwgcGFyYW1zKSB7XG4gIHZhciB3aW5kb3cgPSBkZWZhdWx0Vmlldyhub2RlKSxcbiAgICAgIGV2ZW50ID0gd2luZG93LkN1c3RvbUV2ZW50O1xuXG4gIGlmICh0eXBlb2YgZXZlbnQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGV2ZW50ID0gbmV3IGV2ZW50KHR5cGUsIHBhcmFtcyk7XG4gIH0gZWxzZSB7XG4gICAgZXZlbnQgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJFdmVudFwiKTtcbiAgICBpZiAocGFyYW1zKSBldmVudC5pbml0RXZlbnQodHlwZSwgcGFyYW1zLmJ1YmJsZXMsIHBhcmFtcy5jYW5jZWxhYmxlKSwgZXZlbnQuZGV0YWlsID0gcGFyYW1zLmRldGFpbDtcbiAgICBlbHNlIGV2ZW50LmluaXRFdmVudCh0eXBlLCBmYWxzZSwgZmFsc2UpO1xuICB9XG5cbiAgbm9kZS5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbn1cblxuZnVuY3Rpb24gZGlzcGF0Y2hDb25zdGFudCh0eXBlLCBwYXJhbXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkaXNwYXRjaEV2ZW50KHRoaXMsIHR5cGUsIHBhcmFtcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoRnVuY3Rpb24odHlwZSwgcGFyYW1zKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2hFdmVudCh0aGlzLCB0eXBlLCBwYXJhbXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG5cbnZhciBzZWxlY3Rpb25fZGlzcGF0Y2ggPSBmdW5jdGlvbih0eXBlLCBwYXJhbXMpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaCgodHlwZW9mIHBhcmFtcyA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IGRpc3BhdGNoRnVuY3Rpb25cbiAgICAgIDogZGlzcGF0Y2hDb25zdGFudCkodHlwZSwgcGFyYW1zKSk7XG59O1xuXG52YXIgcm9vdCA9IFtudWxsXTtcblxuZnVuY3Rpb24gU2VsZWN0aW9uKGdyb3VwcywgcGFyZW50cykge1xuICB0aGlzLl9ncm91cHMgPSBncm91cHM7XG4gIHRoaXMuX3BhcmVudHMgPSBwYXJlbnRzO1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKFtbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XV0sIHJvb3QpO1xufVxuXG5TZWxlY3Rpb24ucHJvdG90eXBlID0gc2VsZWN0aW9uLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFNlbGVjdGlvbixcbiAgc2VsZWN0OiBzZWxlY3Rpb25fc2VsZWN0LFxuICBzZWxlY3RBbGw6IHNlbGVjdGlvbl9zZWxlY3RBbGwsXG4gIGZpbHRlcjogc2VsZWN0aW9uX2ZpbHRlcixcbiAgZGF0YTogc2VsZWN0aW9uX2RhdGEsXG4gIGVudGVyOiBzZWxlY3Rpb25fZW50ZXIsXG4gIGV4aXQ6IHNlbGVjdGlvbl9leGl0LFxuICBtZXJnZTogc2VsZWN0aW9uX21lcmdlLFxuICBvcmRlcjogc2VsZWN0aW9uX29yZGVyLFxuICBzb3J0OiBzZWxlY3Rpb25fc29ydCxcbiAgY2FsbDogc2VsZWN0aW9uX2NhbGwsXG4gIG5vZGVzOiBzZWxlY3Rpb25fbm9kZXMsXG4gIG5vZGU6IHNlbGVjdGlvbl9ub2RlLFxuICBzaXplOiBzZWxlY3Rpb25fc2l6ZSxcbiAgZW1wdHk6IHNlbGVjdGlvbl9lbXB0eSxcbiAgZWFjaDogc2VsZWN0aW9uX2VhY2gsXG4gIGF0dHI6IHNlbGVjdGlvbl9hdHRyLFxuICBzdHlsZTogc2VsZWN0aW9uX3N0eWxlLFxuICBwcm9wZXJ0eTogc2VsZWN0aW9uX3Byb3BlcnR5LFxuICBjbGFzc2VkOiBzZWxlY3Rpb25fY2xhc3NlZCxcbiAgdGV4dDogc2VsZWN0aW9uX3RleHQsXG4gIGh0bWw6IHNlbGVjdGlvbl9odG1sLFxuICByYWlzZTogc2VsZWN0aW9uX3JhaXNlLFxuICBsb3dlcjogc2VsZWN0aW9uX2xvd2VyLFxuICBhcHBlbmQ6IHNlbGVjdGlvbl9hcHBlbmQsXG4gIGluc2VydDogc2VsZWN0aW9uX2luc2VydCxcbiAgcmVtb3ZlOiBzZWxlY3Rpb25fcmVtb3ZlLFxuICBkYXR1bTogc2VsZWN0aW9uX2RhdHVtLFxuICBvbjogc2VsZWN0aW9uX29uLFxuICBkaXNwYXRjaDogc2VsZWN0aW9uX2Rpc3BhdGNoXG59O1xuXG52YXIgc2VsZWN0ID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIlxuICAgICAgPyBuZXcgU2VsZWN0aW9uKFtbZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcildXSwgW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudF0pXG4gICAgICA6IG5ldyBTZWxlY3Rpb24oW1tzZWxlY3Rvcl1dLCByb290KTtcbn07XG5cbnZhciBzZWxlY3RBbGwgPSBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiXG4gICAgICA/IG5ldyBTZWxlY3Rpb24oW2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpXSwgW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudF0pXG4gICAgICA6IG5ldyBTZWxlY3Rpb24oW3NlbGVjdG9yID09IG51bGwgPyBbXSA6IHNlbGVjdG9yXSwgcm9vdCk7XG59O1xuXG52YXIgdG91Y2ggPSBmdW5jdGlvbihub2RlLCB0b3VjaGVzLCBpZGVudGlmaWVyKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMykgaWRlbnRpZmllciA9IHRvdWNoZXMsIHRvdWNoZXMgPSBzb3VyY2VFdmVudCgpLmNoYW5nZWRUb3VjaGVzO1xuXG4gIGZvciAodmFyIGkgPSAwLCBuID0gdG91Y2hlcyA/IHRvdWNoZXMubGVuZ3RoIDogMCwgdG91Y2g7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAoKHRvdWNoID0gdG91Y2hlc1tpXSkuaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmV0dXJuIHBvaW50KG5vZGUsIHRvdWNoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn07XG5cbnZhciB0b3VjaGVzID0gZnVuY3Rpb24obm9kZSwgdG91Y2hlcykge1xuICBpZiAodG91Y2hlcyA9PSBudWxsKSB0b3VjaGVzID0gc291cmNlRXZlbnQoKS50b3VjaGVzO1xuXG4gIGZvciAodmFyIGkgPSAwLCBuID0gdG91Y2hlcyA/IHRvdWNoZXMubGVuZ3RoIDogMCwgcG9pbnRzID0gbmV3IEFycmF5KG4pOyBpIDwgbjsgKytpKSB7XG4gICAgcG9pbnRzW2ldID0gcG9pbnQobm9kZSwgdG91Y2hlc1tpXSk7XG4gIH1cblxuICByZXR1cm4gcG9pbnRzO1xufTtcblxuZnVuY3Rpb24gbm9wcm9wYWdhdGlvbigpIHtcbiAgZXhwb3J0cy5ldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbn1cblxudmFyIG5vZXZlbnQgPSBmdW5jdGlvbigpIHtcbiAgZXhwb3J0cy5ldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICBleHBvcnRzLmV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xufTtcblxudmFyIGRyYWdEaXNhYmxlID0gZnVuY3Rpb24odmlldykge1xuICB2YXIgcm9vdCA9IHZpZXcuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LFxuICAgICAgc2VsZWN0aW9uJCQxID0gc2VsZWN0KHZpZXcpLm9uKFwiZHJhZ3N0YXJ0LmRyYWdcIiwgbm9ldmVudCwgdHJ1ZSk7XG4gIGlmIChcIm9uc2VsZWN0c3RhcnRcIiBpbiByb290KSB7XG4gICAgc2VsZWN0aW9uJCQxLm9uKFwic2VsZWN0c3RhcnQuZHJhZ1wiLCBub2V2ZW50LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICByb290Ll9fbm9zZWxlY3QgPSByb290LnN0eWxlLk1velVzZXJTZWxlY3Q7XG4gICAgcm9vdC5zdHlsZS5Nb3pVc2VyU2VsZWN0ID0gXCJub25lXCI7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHllc2RyYWcodmlldywgbm9jbGljaykge1xuICB2YXIgcm9vdCA9IHZpZXcuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LFxuICAgICAgc2VsZWN0aW9uJCQxID0gc2VsZWN0KHZpZXcpLm9uKFwiZHJhZ3N0YXJ0LmRyYWdcIiwgbnVsbCk7XG4gIGlmIChub2NsaWNrKSB7XG4gICAgc2VsZWN0aW9uJCQxLm9uKFwiY2xpY2suZHJhZ1wiLCBub2V2ZW50LCB0cnVlKTtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBzZWxlY3Rpb24kJDEub24oXCJjbGljay5kcmFnXCIsIG51bGwpOyB9LCAwKTtcbiAgfVxuICBpZiAoXCJvbnNlbGVjdHN0YXJ0XCIgaW4gcm9vdCkge1xuICAgIHNlbGVjdGlvbiQkMS5vbihcInNlbGVjdHN0YXJ0LmRyYWdcIiwgbnVsbCk7XG4gIH0gZWxzZSB7XG4gICAgcm9vdC5zdHlsZS5Nb3pVc2VyU2VsZWN0ID0gcm9vdC5fX25vc2VsZWN0O1xuICAgIGRlbGV0ZSByb290Ll9fbm9zZWxlY3Q7XG4gIH1cbn1cblxudmFyIGNvbnN0YW50JDIgPSBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn07XG5cbmZ1bmN0aW9uIERyYWdFdmVudCh0YXJnZXQsIHR5cGUsIHN1YmplY3QsIGlkLCBhY3RpdmUsIHgsIHksIGR4LCBkeSwgZGlzcGF0Y2gpIHtcbiAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gIHRoaXMudHlwZSA9IHR5cGU7XG4gIHRoaXMuc3ViamVjdCA9IHN1YmplY3Q7XG4gIHRoaXMuaWRlbnRpZmllciA9IGlkO1xuICB0aGlzLmFjdGl2ZSA9IGFjdGl2ZTtcbiAgdGhpcy54ID0geDtcbiAgdGhpcy55ID0geTtcbiAgdGhpcy5keCA9IGR4O1xuICB0aGlzLmR5ID0gZHk7XG4gIHRoaXMuXyA9IGRpc3BhdGNoO1xufVxuXG5EcmFnRXZlbnQucHJvdG90eXBlLm9uID0gZnVuY3Rpb24oKSB7XG4gIHZhciB2YWx1ZSA9IHRoaXMuXy5vbi5hcHBseSh0aGlzLl8sIGFyZ3VtZW50cyk7XG4gIHJldHVybiB2YWx1ZSA9PT0gdGhpcy5fID8gdGhpcyA6IHZhbHVlO1xufTtcblxuLy8gSWdub3JlIHJpZ2h0LWNsaWNrLCBzaW5jZSB0aGF0IHNob3VsZCBvcGVuIHRoZSBjb250ZXh0IG1lbnUuXG5mdW5jdGlvbiBkZWZhdWx0RmlsdGVyJDEoKSB7XG4gIHJldHVybiAhZXhwb3J0cy5ldmVudC5idXR0b247XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRDb250YWluZXIoKSB7XG4gIHJldHVybiB0aGlzLnBhcmVudE5vZGU7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRTdWJqZWN0KGQpIHtcbiAgcmV0dXJuIGQgPT0gbnVsbCA/IHt4OiBleHBvcnRzLmV2ZW50LngsIHk6IGV4cG9ydHMuZXZlbnQueX0gOiBkO1xufVxuXG5mdW5jdGlvbiB0b3VjaGFibGUoKSB7XG4gIHJldHVybiBcIm9udG91Y2hzdGFydFwiIGluIHRoaXM7XG59XG5cbnZhciBkcmFnID0gZnVuY3Rpb24oKSB7XG4gIHZhciBmaWx0ZXIgPSBkZWZhdWx0RmlsdGVyJDEsXG4gICAgICBjb250YWluZXIgPSBkZWZhdWx0Q29udGFpbmVyLFxuICAgICAgc3ViamVjdCA9IGRlZmF1bHRTdWJqZWN0LFxuICAgICAgZ2VzdHVyZXMgPSB7fSxcbiAgICAgIGxpc3RlbmVycyA9IGRpc3BhdGNoKFwic3RhcnRcIiwgXCJkcmFnXCIsIFwiZW5kXCIpLFxuICAgICAgYWN0aXZlID0gMCxcbiAgICAgIG1vdXNlZG93bngsXG4gICAgICBtb3VzZWRvd255LFxuICAgICAgbW91c2Vtb3ZpbmcsXG4gICAgICB0b3VjaGVuZGluZyxcbiAgICAgIGNsaWNrRGlzdGFuY2UyID0gMDtcblxuICBmdW5jdGlvbiBkcmFnKHNlbGVjdGlvbikge1xuICAgIHNlbGVjdGlvblxuICAgICAgICAub24oXCJtb3VzZWRvd24uZHJhZ1wiLCBtb3VzZWRvd25lZClcbiAgICAgIC5maWx0ZXIodG91Y2hhYmxlKVxuICAgICAgICAub24oXCJ0b3VjaHN0YXJ0LmRyYWdcIiwgdG91Y2hzdGFydGVkKVxuICAgICAgICAub24oXCJ0b3VjaG1vdmUuZHJhZ1wiLCB0b3VjaG1vdmVkKVxuICAgICAgICAub24oXCJ0b3VjaGVuZC5kcmFnIHRvdWNoY2FuY2VsLmRyYWdcIiwgdG91Y2hlbmRlZClcbiAgICAgICAgLnN0eWxlKFwidG91Y2gtYWN0aW9uXCIsIFwibm9uZVwiKVxuICAgICAgICAuc3R5bGUoXCItd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3JcIiwgXCJyZ2JhKDAsMCwwLDApXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gbW91c2Vkb3duZWQoKSB7XG4gICAgaWYgKHRvdWNoZW5kaW5nIHx8ICFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuICAgIHZhciBnZXN0dXJlID0gYmVmb3Jlc3RhcnQoXCJtb3VzZVwiLCBjb250YWluZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgbW91c2UsIHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKCFnZXN0dXJlKSByZXR1cm47XG4gICAgc2VsZWN0KGV4cG9ydHMuZXZlbnQudmlldykub24oXCJtb3VzZW1vdmUuZHJhZ1wiLCBtb3VzZW1vdmVkLCB0cnVlKS5vbihcIm1vdXNldXAuZHJhZ1wiLCBtb3VzZXVwcGVkLCB0cnVlKTtcbiAgICBkcmFnRGlzYWJsZShleHBvcnRzLmV2ZW50LnZpZXcpO1xuICAgIG5vcHJvcGFnYXRpb24oKTtcbiAgICBtb3VzZW1vdmluZyA9IGZhbHNlO1xuICAgIG1vdXNlZG93bnggPSBleHBvcnRzLmV2ZW50LmNsaWVudFg7XG4gICAgbW91c2Vkb3dueSA9IGV4cG9ydHMuZXZlbnQuY2xpZW50WTtcbiAgICBnZXN0dXJlKFwic3RhcnRcIik7XG4gIH1cblxuICBmdW5jdGlvbiBtb3VzZW1vdmVkKCkge1xuICAgIG5vZXZlbnQoKTtcbiAgICBpZiAoIW1vdXNlbW92aW5nKSB7XG4gICAgICB2YXIgZHggPSBleHBvcnRzLmV2ZW50LmNsaWVudFggLSBtb3VzZWRvd254LCBkeSA9IGV4cG9ydHMuZXZlbnQuY2xpZW50WSAtIG1vdXNlZG93bnk7XG4gICAgICBtb3VzZW1vdmluZyA9IGR4ICogZHggKyBkeSAqIGR5ID4gY2xpY2tEaXN0YW5jZTI7XG4gICAgfVxuICAgIGdlc3R1cmVzLm1vdXNlKFwiZHJhZ1wiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1vdXNldXBwZWQoKSB7XG4gICAgc2VsZWN0KGV4cG9ydHMuZXZlbnQudmlldykub24oXCJtb3VzZW1vdmUuZHJhZyBtb3VzZXVwLmRyYWdcIiwgbnVsbCk7XG4gICAgeWVzZHJhZyhleHBvcnRzLmV2ZW50LnZpZXcsIG1vdXNlbW92aW5nKTtcbiAgICBub2V2ZW50KCk7XG4gICAgZ2VzdHVyZXMubW91c2UoXCJlbmRcIik7XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaHN0YXJ0ZWQoKSB7XG4gICAgaWYgKCFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuICAgIHZhciB0b3VjaGVzJCQxID0gZXhwb3J0cy5ldmVudC5jaGFuZ2VkVG91Y2hlcyxcbiAgICAgICAgYyA9IGNvbnRhaW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICBuID0gdG91Y2hlcyQkMS5sZW5ndGgsIGksIGdlc3R1cmU7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoZ2VzdHVyZSA9IGJlZm9yZXN0YXJ0KHRvdWNoZXMkJDFbaV0uaWRlbnRpZmllciwgYywgdG91Y2gsIHRoaXMsIGFyZ3VtZW50cykpIHtcbiAgICAgICAgbm9wcm9wYWdhdGlvbigpO1xuICAgICAgICBnZXN0dXJlKFwic3RhcnRcIik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdG91Y2htb3ZlZCgpIHtcbiAgICB2YXIgdG91Y2hlcyQkMSA9IGV4cG9ydHMuZXZlbnQuY2hhbmdlZFRvdWNoZXMsXG4gICAgICAgIG4gPSB0b3VjaGVzJCQxLmxlbmd0aCwgaSwgZ2VzdHVyZTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChnZXN0dXJlID0gZ2VzdHVyZXNbdG91Y2hlcyQkMVtpXS5pZGVudGlmaWVyXSkge1xuICAgICAgICBub2V2ZW50KCk7XG4gICAgICAgIGdlc3R1cmUoXCJkcmFnXCIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNoZW5kZWQoKSB7XG4gICAgdmFyIHRvdWNoZXMkJDEgPSBleHBvcnRzLmV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICBuID0gdG91Y2hlcyQkMS5sZW5ndGgsIGksIGdlc3R1cmU7XG5cbiAgICBpZiAodG91Y2hlbmRpbmcpIGNsZWFyVGltZW91dCh0b3VjaGVuZGluZyk7XG4gICAgdG91Y2hlbmRpbmcgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyB0b3VjaGVuZGluZyA9IG51bGw7IH0sIDUwMCk7IC8vIEdob3N0IGNsaWNrcyBhcmUgZGVsYXllZCFcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoZ2VzdHVyZSA9IGdlc3R1cmVzW3RvdWNoZXMkJDFbaV0uaWRlbnRpZmllcl0pIHtcbiAgICAgICAgbm9wcm9wYWdhdGlvbigpO1xuICAgICAgICBnZXN0dXJlKFwiZW5kXCIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGJlZm9yZXN0YXJ0KGlkLCBjb250YWluZXIsIHBvaW50LCB0aGF0LCBhcmdzKSB7XG4gICAgdmFyIHAgPSBwb2ludChjb250YWluZXIsIGlkKSwgcywgZHgsIGR5LFxuICAgICAgICBzdWJsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuY29weSgpO1xuXG4gICAgaWYgKCFjdXN0b21FdmVudChuZXcgRHJhZ0V2ZW50KGRyYWcsIFwiYmVmb3Jlc3RhcnRcIiwgcywgaWQsIGFjdGl2ZSwgcFswXSwgcFsxXSwgMCwgMCwgc3VibGlzdGVuZXJzKSwgZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoKGV4cG9ydHMuZXZlbnQuc3ViamVjdCA9IHMgPSBzdWJqZWN0LmFwcGx5KHRoYXQsIGFyZ3MpKSA9PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gICAgICBkeCA9IHMueCAtIHBbMF0gfHwgMDtcbiAgICAgIGR5ID0gcy55IC0gcFsxXSB8fCAwO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSkpIHJldHVybjtcblxuICAgIHJldHVybiBmdW5jdGlvbiBnZXN0dXJlKHR5cGUpIHtcbiAgICAgIHZhciBwMCA9IHAsIG47XG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBcInN0YXJ0XCI6IGdlc3R1cmVzW2lkXSA9IGdlc3R1cmUsIG4gPSBhY3RpdmUrKzsgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJlbmRcIjogZGVsZXRlIGdlc3R1cmVzW2lkXSwgLS1hY3RpdmU7IC8vIG5vYnJlYWtcbiAgICAgICAgY2FzZSBcImRyYWdcIjogcCA9IHBvaW50KGNvbnRhaW5lciwgaWQpLCBuID0gYWN0aXZlOyBicmVhaztcbiAgICAgIH1cbiAgICAgIGN1c3RvbUV2ZW50KG5ldyBEcmFnRXZlbnQoZHJhZywgdHlwZSwgcywgaWQsIG4sIHBbMF0gKyBkeCwgcFsxXSArIGR5LCBwWzBdIC0gcDBbMF0sIHBbMV0gLSBwMFsxXSwgc3VibGlzdGVuZXJzKSwgc3VibGlzdGVuZXJzLmFwcGx5LCBzdWJsaXN0ZW5lcnMsIFt0eXBlLCB0aGF0LCBhcmdzXSk7XG4gICAgfTtcbiAgfVxuXG4gIGRyYWcuZmlsdGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGZpbHRlciA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMighIV8pLCBkcmFnKSA6IGZpbHRlcjtcbiAgfTtcblxuICBkcmFnLmNvbnRhaW5lciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjb250YWluZXIgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDIoXyksIGRyYWcpIDogY29udGFpbmVyO1xuICB9O1xuXG4gIGRyYWcuc3ViamVjdCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdWJqZWN0ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQyKF8pLCBkcmFnKSA6IHN1YmplY3Q7XG4gIH07XG5cbiAgZHJhZy5vbiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZSA9IGxpc3RlbmVycy5vbi5hcHBseShsaXN0ZW5lcnMsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIHZhbHVlID09PSBsaXN0ZW5lcnMgPyBkcmFnIDogdmFsdWU7XG4gIH07XG5cbiAgZHJhZy5jbGlja0Rpc3RhbmNlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNsaWNrRGlzdGFuY2UyID0gKF8gPSArXykgKiBfLCBkcmFnKSA6IE1hdGguc3FydChjbGlja0Rpc3RhbmNlMik7XG4gIH07XG5cbiAgcmV0dXJuIGRyYWc7XG59O1xuXG52YXIgZGVmaW5lID0gZnVuY3Rpb24oY29uc3RydWN0b3IsIGZhY3RvcnksIHByb3RvdHlwZSkge1xuICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBmYWN0b3J5LnByb3RvdHlwZSA9IHByb3RvdHlwZTtcbiAgcHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY29uc3RydWN0b3I7XG59O1xuXG5mdW5jdGlvbiBleHRlbmQocGFyZW50LCBkZWZpbml0aW9uKSB7XG4gIHZhciBwcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHBhcmVudC5wcm90b3R5cGUpO1xuICBmb3IgKHZhciBrZXkgaW4gZGVmaW5pdGlvbikgcHJvdG90eXBlW2tleV0gPSBkZWZpbml0aW9uW2tleV07XG4gIHJldHVybiBwcm90b3R5cGU7XG59XG5cbmZ1bmN0aW9uIENvbG9yKCkge31cblxudmFyIGRhcmtlciA9IDAuNztcbnZhciBicmlnaHRlciA9IDEgLyBkYXJrZXI7XG5cbnZhciByZUkgPSBcIlxcXFxzKihbKy1dP1xcXFxkKylcXFxccypcIjtcbnZhciByZU4gPSBcIlxcXFxzKihbKy1dP1xcXFxkKlxcXFwuP1xcXFxkKyg/OltlRV1bKy1dP1xcXFxkKyk/KVxcXFxzKlwiO1xudmFyIHJlUCA9IFwiXFxcXHMqKFsrLV0/XFxcXGQqXFxcXC4/XFxcXGQrKD86W2VFXVsrLV0/XFxcXGQrKT8pJVxcXFxzKlwiO1xudmFyIHJlSGV4MyA9IC9eIyhbMC05YS1mXXszfSkkLztcbnZhciByZUhleDYgPSAvXiMoWzAtOWEtZl17Nn0pJC87XG52YXIgcmVSZ2JJbnRlZ2VyID0gbmV3IFJlZ0V4cChcIl5yZ2JcXFxcKFwiICsgW3JlSSwgcmVJLCByZUldICsgXCJcXFxcKSRcIik7XG52YXIgcmVSZ2JQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5yZ2JcXFxcKFwiICsgW3JlUCwgcmVQLCByZVBdICsgXCJcXFxcKSRcIik7XG52YXIgcmVSZ2JhSW50ZWdlciA9IG5ldyBSZWdFeHAoXCJecmdiYVxcXFwoXCIgKyBbcmVJLCByZUksIHJlSSwgcmVOXSArIFwiXFxcXCkkXCIpO1xudmFyIHJlUmdiYVBlcmNlbnQgPSBuZXcgUmVnRXhwKFwiXnJnYmFcXFxcKFwiICsgW3JlUCwgcmVQLCByZVAsIHJlTl0gKyBcIlxcXFwpJFwiKTtcbnZhciByZUhzbFBlcmNlbnQgPSBuZXcgUmVnRXhwKFwiXmhzbFxcXFwoXCIgKyBbcmVOLCByZVAsIHJlUF0gKyBcIlxcXFwpJFwiKTtcbnZhciByZUhzbGFQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5oc2xhXFxcXChcIiArIFtyZU4sIHJlUCwgcmVQLCByZU5dICsgXCJcXFxcKSRcIik7XG5cbnZhciBuYW1lZCA9IHtcbiAgYWxpY2VibHVlOiAweGYwZjhmZixcbiAgYW50aXF1ZXdoaXRlOiAweGZhZWJkNyxcbiAgYXF1YTogMHgwMGZmZmYsXG4gIGFxdWFtYXJpbmU6IDB4N2ZmZmQ0LFxuICBhenVyZTogMHhmMGZmZmYsXG4gIGJlaWdlOiAweGY1ZjVkYyxcbiAgYmlzcXVlOiAweGZmZTRjNCxcbiAgYmxhY2s6IDB4MDAwMDAwLFxuICBibGFuY2hlZGFsbW9uZDogMHhmZmViY2QsXG4gIGJsdWU6IDB4MDAwMGZmLFxuICBibHVldmlvbGV0OiAweDhhMmJlMixcbiAgYnJvd246IDB4YTUyYTJhLFxuICBidXJseXdvb2Q6IDB4ZGViODg3LFxuICBjYWRldGJsdWU6IDB4NWY5ZWEwLFxuICBjaGFydHJldXNlOiAweDdmZmYwMCxcbiAgY2hvY29sYXRlOiAweGQyNjkxZSxcbiAgY29yYWw6IDB4ZmY3ZjUwLFxuICBjb3JuZmxvd2VyYmx1ZTogMHg2NDk1ZWQsXG4gIGNvcm5zaWxrOiAweGZmZjhkYyxcbiAgY3JpbXNvbjogMHhkYzE0M2MsXG4gIGN5YW46IDB4MDBmZmZmLFxuICBkYXJrYmx1ZTogMHgwMDAwOGIsXG4gIGRhcmtjeWFuOiAweDAwOGI4YixcbiAgZGFya2dvbGRlbnJvZDogMHhiODg2MGIsXG4gIGRhcmtncmF5OiAweGE5YTlhOSxcbiAgZGFya2dyZWVuOiAweDAwNjQwMCxcbiAgZGFya2dyZXk6IDB4YTlhOWE5LFxuICBkYXJra2hha2k6IDB4YmRiNzZiLFxuICBkYXJrbWFnZW50YTogMHg4YjAwOGIsXG4gIGRhcmtvbGl2ZWdyZWVuOiAweDU1NmIyZixcbiAgZGFya29yYW5nZTogMHhmZjhjMDAsXG4gIGRhcmtvcmNoaWQ6IDB4OTkzMmNjLFxuICBkYXJrcmVkOiAweDhiMDAwMCxcbiAgZGFya3NhbG1vbjogMHhlOTk2N2EsXG4gIGRhcmtzZWFncmVlbjogMHg4ZmJjOGYsXG4gIGRhcmtzbGF0ZWJsdWU6IDB4NDgzZDhiLFxuICBkYXJrc2xhdGVncmF5OiAweDJmNGY0ZixcbiAgZGFya3NsYXRlZ3JleTogMHgyZjRmNGYsXG4gIGRhcmt0dXJxdW9pc2U6IDB4MDBjZWQxLFxuICBkYXJrdmlvbGV0OiAweDk0MDBkMyxcbiAgZGVlcHBpbms6IDB4ZmYxNDkzLFxuICBkZWVwc2t5Ymx1ZTogMHgwMGJmZmYsXG4gIGRpbWdyYXk6IDB4Njk2OTY5LFxuICBkaW1ncmV5OiAweDY5Njk2OSxcbiAgZG9kZ2VyYmx1ZTogMHgxZTkwZmYsXG4gIGZpcmVicmljazogMHhiMjIyMjIsXG4gIGZsb3JhbHdoaXRlOiAweGZmZmFmMCxcbiAgZm9yZXN0Z3JlZW46IDB4MjI4YjIyLFxuICBmdWNoc2lhOiAweGZmMDBmZixcbiAgZ2FpbnNib3JvOiAweGRjZGNkYyxcbiAgZ2hvc3R3aGl0ZTogMHhmOGY4ZmYsXG4gIGdvbGQ6IDB4ZmZkNzAwLFxuICBnb2xkZW5yb2Q6IDB4ZGFhNTIwLFxuICBncmF5OiAweDgwODA4MCxcbiAgZ3JlZW46IDB4MDA4MDAwLFxuICBncmVlbnllbGxvdzogMHhhZGZmMmYsXG4gIGdyZXk6IDB4ODA4MDgwLFxuICBob25leWRldzogMHhmMGZmZjAsXG4gIGhvdHBpbms6IDB4ZmY2OWI0LFxuICBpbmRpYW5yZWQ6IDB4Y2Q1YzVjLFxuICBpbmRpZ286IDB4NGIwMDgyLFxuICBpdm9yeTogMHhmZmZmZjAsXG4gIGtoYWtpOiAweGYwZTY4YyxcbiAgbGF2ZW5kZXI6IDB4ZTZlNmZhLFxuICBsYXZlbmRlcmJsdXNoOiAweGZmZjBmNSxcbiAgbGF3bmdyZWVuOiAweDdjZmMwMCxcbiAgbGVtb25jaGlmZm9uOiAweGZmZmFjZCxcbiAgbGlnaHRibHVlOiAweGFkZDhlNixcbiAgbGlnaHRjb3JhbDogMHhmMDgwODAsXG4gIGxpZ2h0Y3lhbjogMHhlMGZmZmYsXG4gIGxpZ2h0Z29sZGVucm9keWVsbG93OiAweGZhZmFkMixcbiAgbGlnaHRncmF5OiAweGQzZDNkMyxcbiAgbGlnaHRncmVlbjogMHg5MGVlOTAsXG4gIGxpZ2h0Z3JleTogMHhkM2QzZDMsXG4gIGxpZ2h0cGluazogMHhmZmI2YzEsXG4gIGxpZ2h0c2FsbW9uOiAweGZmYTA3YSxcbiAgbGlnaHRzZWFncmVlbjogMHgyMGIyYWEsXG4gIGxpZ2h0c2t5Ymx1ZTogMHg4N2NlZmEsXG4gIGxpZ2h0c2xhdGVncmF5OiAweDc3ODg5OSxcbiAgbGlnaHRzbGF0ZWdyZXk6IDB4Nzc4ODk5LFxuICBsaWdodHN0ZWVsYmx1ZTogMHhiMGM0ZGUsXG4gIGxpZ2h0eWVsbG93OiAweGZmZmZlMCxcbiAgbGltZTogMHgwMGZmMDAsXG4gIGxpbWVncmVlbjogMHgzMmNkMzIsXG4gIGxpbmVuOiAweGZhZjBlNixcbiAgbWFnZW50YTogMHhmZjAwZmYsXG4gIG1hcm9vbjogMHg4MDAwMDAsXG4gIG1lZGl1bWFxdWFtYXJpbmU6IDB4NjZjZGFhLFxuICBtZWRpdW1ibHVlOiAweDAwMDBjZCxcbiAgbWVkaXVtb3JjaGlkOiAweGJhNTVkMyxcbiAgbWVkaXVtcHVycGxlOiAweDkzNzBkYixcbiAgbWVkaXVtc2VhZ3JlZW46IDB4M2NiMzcxLFxuICBtZWRpdW1zbGF0ZWJsdWU6IDB4N2I2OGVlLFxuICBtZWRpdW1zcHJpbmdncmVlbjogMHgwMGZhOWEsXG4gIG1lZGl1bXR1cnF1b2lzZTogMHg0OGQxY2MsXG4gIG1lZGl1bXZpb2xldHJlZDogMHhjNzE1ODUsXG4gIG1pZG5pZ2h0Ymx1ZTogMHgxOTE5NzAsXG4gIG1pbnRjcmVhbTogMHhmNWZmZmEsXG4gIG1pc3R5cm9zZTogMHhmZmU0ZTEsXG4gIG1vY2Nhc2luOiAweGZmZTRiNSxcbiAgbmF2YWpvd2hpdGU6IDB4ZmZkZWFkLFxuICBuYXZ5OiAweDAwMDA4MCxcbiAgb2xkbGFjZTogMHhmZGY1ZTYsXG4gIG9saXZlOiAweDgwODAwMCxcbiAgb2xpdmVkcmFiOiAweDZiOGUyMyxcbiAgb3JhbmdlOiAweGZmYTUwMCxcbiAgb3JhbmdlcmVkOiAweGZmNDUwMCxcbiAgb3JjaGlkOiAweGRhNzBkNixcbiAgcGFsZWdvbGRlbnJvZDogMHhlZWU4YWEsXG4gIHBhbGVncmVlbjogMHg5OGZiOTgsXG4gIHBhbGV0dXJxdW9pc2U6IDB4YWZlZWVlLFxuICBwYWxldmlvbGV0cmVkOiAweGRiNzA5MyxcbiAgcGFwYXlhd2hpcDogMHhmZmVmZDUsXG4gIHBlYWNocHVmZjogMHhmZmRhYjksXG4gIHBlcnU6IDB4Y2Q4NTNmLFxuICBwaW5rOiAweGZmYzBjYixcbiAgcGx1bTogMHhkZGEwZGQsXG4gIHBvd2RlcmJsdWU6IDB4YjBlMGU2LFxuICBwdXJwbGU6IDB4ODAwMDgwLFxuICByZWJlY2NhcHVycGxlOiAweDY2MzM5OSxcbiAgcmVkOiAweGZmMDAwMCxcbiAgcm9zeWJyb3duOiAweGJjOGY4ZixcbiAgcm95YWxibHVlOiAweDQxNjllMSxcbiAgc2FkZGxlYnJvd246IDB4OGI0NTEzLFxuICBzYWxtb246IDB4ZmE4MDcyLFxuICBzYW5keWJyb3duOiAweGY0YTQ2MCxcbiAgc2VhZ3JlZW46IDB4MmU4YjU3LFxuICBzZWFzaGVsbDogMHhmZmY1ZWUsXG4gIHNpZW5uYTogMHhhMDUyMmQsXG4gIHNpbHZlcjogMHhjMGMwYzAsXG4gIHNreWJsdWU6IDB4ODdjZWViLFxuICBzbGF0ZWJsdWU6IDB4NmE1YWNkLFxuICBzbGF0ZWdyYXk6IDB4NzA4MDkwLFxuICBzbGF0ZWdyZXk6IDB4NzA4MDkwLFxuICBzbm93OiAweGZmZmFmYSxcbiAgc3ByaW5nZ3JlZW46IDB4MDBmZjdmLFxuICBzdGVlbGJsdWU6IDB4NDY4MmI0LFxuICB0YW46IDB4ZDJiNDhjLFxuICB0ZWFsOiAweDAwODA4MCxcbiAgdGhpc3RsZTogMHhkOGJmZDgsXG4gIHRvbWF0bzogMHhmZjYzNDcsXG4gIHR1cnF1b2lzZTogMHg0MGUwZDAsXG4gIHZpb2xldDogMHhlZTgyZWUsXG4gIHdoZWF0OiAweGY1ZGViMyxcbiAgd2hpdGU6IDB4ZmZmZmZmLFxuICB3aGl0ZXNtb2tlOiAweGY1ZjVmNSxcbiAgeWVsbG93OiAweGZmZmYwMCxcbiAgeWVsbG93Z3JlZW46IDB4OWFjZDMyXG59O1xuXG5kZWZpbmUoQ29sb3IsIGNvbG9yLCB7XG4gIGRpc3BsYXlhYmxlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5yZ2IoKS5kaXNwbGF5YWJsZSgpO1xuICB9LFxuICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucmdiKCkgKyBcIlwiO1xuICB9XG59KTtcblxuZnVuY3Rpb24gY29sb3IoZm9ybWF0KSB7XG4gIHZhciBtO1xuICBmb3JtYXQgPSAoZm9ybWF0ICsgXCJcIikudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiAobSA9IHJlSGV4My5leGVjKGZvcm1hdCkpID8gKG0gPSBwYXJzZUludChtWzFdLCAxNiksIG5ldyBSZ2IoKG0gPj4gOCAmIDB4ZikgfCAobSA+PiA0ICYgMHgwZjApLCAobSA+PiA0ICYgMHhmKSB8IChtICYgMHhmMCksICgobSAmIDB4ZikgPDwgNCkgfCAobSAmIDB4ZiksIDEpKSAvLyAjZjAwXG4gICAgICA6IChtID0gcmVIZXg2LmV4ZWMoZm9ybWF0KSkgPyByZ2JuKHBhcnNlSW50KG1bMV0sIDE2KSkgLy8gI2ZmMDAwMFxuICAgICAgOiAobSA9IHJlUmdiSW50ZWdlci5leGVjKGZvcm1hdCkpID8gbmV3IFJnYihtWzFdLCBtWzJdLCBtWzNdLCAxKSAvLyByZ2IoMjU1LCAwLCAwKVxuICAgICAgOiAobSA9IHJlUmdiUGVyY2VudC5leGVjKGZvcm1hdCkpID8gbmV3IFJnYihtWzFdICogMjU1IC8gMTAwLCBtWzJdICogMjU1IC8gMTAwLCBtWzNdICogMjU1IC8gMTAwLCAxKSAvLyByZ2IoMTAwJSwgMCUsIDAlKVxuICAgICAgOiAobSA9IHJlUmdiYUludGVnZXIuZXhlYyhmb3JtYXQpKSA/IHJnYmEobVsxXSwgbVsyXSwgbVszXSwgbVs0XSkgLy8gcmdiYSgyNTUsIDAsIDAsIDEpXG4gICAgICA6IChtID0gcmVSZ2JhUGVyY2VudC5leGVjKGZvcm1hdCkpID8gcmdiYShtWzFdICogMjU1IC8gMTAwLCBtWzJdICogMjU1IC8gMTAwLCBtWzNdICogMjU1IC8gMTAwLCBtWzRdKSAvLyByZ2IoMTAwJSwgMCUsIDAlLCAxKVxuICAgICAgOiAobSA9IHJlSHNsUGVyY2VudC5leGVjKGZvcm1hdCkpID8gaHNsYShtWzFdLCBtWzJdIC8gMTAwLCBtWzNdIC8gMTAwLCAxKSAvLyBoc2woMTIwLCA1MCUsIDUwJSlcbiAgICAgIDogKG0gPSByZUhzbGFQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBoc2xhKG1bMV0sIG1bMl0gLyAxMDAsIG1bM10gLyAxMDAsIG1bNF0pIC8vIGhzbGEoMTIwLCA1MCUsIDUwJSwgMSlcbiAgICAgIDogbmFtZWQuaGFzT3duUHJvcGVydHkoZm9ybWF0KSA/IHJnYm4obmFtZWRbZm9ybWF0XSlcbiAgICAgIDogZm9ybWF0ID09PSBcInRyYW5zcGFyZW50XCIgPyBuZXcgUmdiKE5hTiwgTmFOLCBOYU4sIDApXG4gICAgICA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIHJnYm4obikge1xuICByZXR1cm4gbmV3IFJnYihuID4+IDE2ICYgMHhmZiwgbiA+PiA4ICYgMHhmZiwgbiAmIDB4ZmYsIDEpO1xufVxuXG5mdW5jdGlvbiByZ2JhKHIsIGcsIGIsIGEpIHtcbiAgaWYgKGEgPD0gMCkgciA9IGcgPSBiID0gTmFOO1xuICByZXR1cm4gbmV3IFJnYihyLCBnLCBiLCBhKTtcbn1cblxuZnVuY3Rpb24gcmdiQ29udmVydChvKSB7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBDb2xvcikpIG8gPSBjb2xvcihvKTtcbiAgaWYgKCFvKSByZXR1cm4gbmV3IFJnYjtcbiAgbyA9IG8ucmdiKCk7XG4gIHJldHVybiBuZXcgUmdiKG8uciwgby5nLCBvLmIsIG8ub3BhY2l0eSk7XG59XG5cbmZ1bmN0aW9uIHJnYihyLCBnLCBiLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gcmdiQ29udmVydChyKSA6IG5ldyBSZ2IociwgZywgYiwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5mdW5jdGlvbiBSZ2IociwgZywgYiwgb3BhY2l0eSkge1xuICB0aGlzLnIgPSArcjtcbiAgdGhpcy5nID0gK2c7XG4gIHRoaXMuYiA9ICtiO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKFJnYiwgcmdiLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gYnJpZ2h0ZXIgOiBNYXRoLnBvdyhicmlnaHRlciwgayk7XG4gICAgcmV0dXJuIG5ldyBSZ2IodGhpcy5yICogaywgdGhpcy5nICogaywgdGhpcy5iICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGRhcmtlciA6IE1hdGgucG93KGRhcmtlciwgayk7XG4gICAgcmV0dXJuIG5ldyBSZ2IodGhpcy5yICogaywgdGhpcy5nICogaywgdGhpcy5iICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgZGlzcGxheWFibGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAoMCA8PSB0aGlzLnIgJiYgdGhpcy5yIDw9IDI1NSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5nICYmIHRoaXMuZyA8PSAyNTUpXG4gICAgICAgICYmICgwIDw9IHRoaXMuYiAmJiB0aGlzLmIgPD0gMjU1KVxuICAgICAgICAmJiAoMCA8PSB0aGlzLm9wYWNpdHkgJiYgdGhpcy5vcGFjaXR5IDw9IDEpO1xuICB9LFxuICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGEgPSB0aGlzLm9wYWNpdHk7IGEgPSBpc05hTihhKSA/IDEgOiBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBhKSk7XG4gICAgcmV0dXJuIChhID09PSAxID8gXCJyZ2IoXCIgOiBcInJnYmEoXCIpXG4gICAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHRoaXMucikgfHwgMCkpICsgXCIsIFwiXG4gICAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHRoaXMuZykgfHwgMCkpICsgXCIsIFwiXG4gICAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHRoaXMuYikgfHwgMCkpXG4gICAgICAgICsgKGEgPT09IDEgPyBcIilcIiA6IFwiLCBcIiArIGEgKyBcIilcIik7XG4gIH1cbn0pKTtcblxuZnVuY3Rpb24gaHNsYShoLCBzLCBsLCBhKSB7XG4gIGlmIChhIDw9IDApIGggPSBzID0gbCA9IE5hTjtcbiAgZWxzZSBpZiAobCA8PSAwIHx8IGwgPj0gMSkgaCA9IHMgPSBOYU47XG4gIGVsc2UgaWYgKHMgPD0gMCkgaCA9IE5hTjtcbiAgcmV0dXJuIG5ldyBIc2woaCwgcywgbCwgYSk7XG59XG5cbmZ1bmN0aW9uIGhzbENvbnZlcnQobykge1xuICBpZiAobyBpbnN0YW5jZW9mIEhzbCkgcmV0dXJuIG5ldyBIc2woby5oLCBvLnMsIG8ubCwgby5vcGFjaXR5KTtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIENvbG9yKSkgbyA9IGNvbG9yKG8pO1xuICBpZiAoIW8pIHJldHVybiBuZXcgSHNsO1xuICBpZiAobyBpbnN0YW5jZW9mIEhzbCkgcmV0dXJuIG87XG4gIG8gPSBvLnJnYigpO1xuICB2YXIgciA9IG8uciAvIDI1NSxcbiAgICAgIGcgPSBvLmcgLyAyNTUsXG4gICAgICBiID0gby5iIC8gMjU1LFxuICAgICAgbWluID0gTWF0aC5taW4ociwgZywgYiksXG4gICAgICBtYXggPSBNYXRoLm1heChyLCBnLCBiKSxcbiAgICAgIGggPSBOYU4sXG4gICAgICBzID0gbWF4IC0gbWluLFxuICAgICAgbCA9IChtYXggKyBtaW4pIC8gMjtcbiAgaWYgKHMpIHtcbiAgICBpZiAociA9PT0gbWF4KSBoID0gKGcgLSBiKSAvIHMgKyAoZyA8IGIpICogNjtcbiAgICBlbHNlIGlmIChnID09PSBtYXgpIGggPSAoYiAtIHIpIC8gcyArIDI7XG4gICAgZWxzZSBoID0gKHIgLSBnKSAvIHMgKyA0O1xuICAgIHMgLz0gbCA8IDAuNSA/IG1heCArIG1pbiA6IDIgLSBtYXggLSBtaW47XG4gICAgaCAqPSA2MDtcbiAgfSBlbHNlIHtcbiAgICBzID0gbCA+IDAgJiYgbCA8IDEgPyAwIDogaDtcbiAgfVxuICByZXR1cm4gbmV3IEhzbChoLCBzLCBsLCBvLm9wYWNpdHkpO1xufVxuXG5mdW5jdGlvbiBoc2woaCwgcywgbCwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGhzbENvbnZlcnQoaCkgOiBuZXcgSHNsKGgsIHMsIGwsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZnVuY3Rpb24gSHNsKGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgdGhpcy5oID0gK2g7XG4gIHRoaXMucyA9ICtzO1xuICB0aGlzLmwgPSArbDtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShIc2wsIGhzbCwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGJyaWdodGVyIDogTWF0aC5wb3coYnJpZ2h0ZXIsIGspO1xuICAgIHJldHVybiBuZXcgSHNsKHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gZGFya2VyIDogTWF0aC5wb3coZGFya2VyLCBrKTtcbiAgICByZXR1cm4gbmV3IEhzbCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgaCA9IHRoaXMuaCAlIDM2MCArICh0aGlzLmggPCAwKSAqIDM2MCxcbiAgICAgICAgcyA9IGlzTmFOKGgpIHx8IGlzTmFOKHRoaXMucykgPyAwIDogdGhpcy5zLFxuICAgICAgICBsID0gdGhpcy5sLFxuICAgICAgICBtMiA9IGwgKyAobCA8IDAuNSA/IGwgOiAxIC0gbCkgKiBzLFxuICAgICAgICBtMSA9IDIgKiBsIC0gbTI7XG4gICAgcmV0dXJuIG5ldyBSZ2IoXG4gICAgICBoc2wycmdiKGggPj0gMjQwID8gaCAtIDI0MCA6IGggKyAxMjAsIG0xLCBtMiksXG4gICAgICBoc2wycmdiKGgsIG0xLCBtMiksXG4gICAgICBoc2wycmdiKGggPCAxMjAgPyBoICsgMjQwIDogaCAtIDEyMCwgbTEsIG0yKSxcbiAgICAgIHRoaXMub3BhY2l0eVxuICAgICk7XG4gIH0sXG4gIGRpc3BsYXlhYmxlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gKDAgPD0gdGhpcy5zICYmIHRoaXMucyA8PSAxIHx8IGlzTmFOKHRoaXMucykpXG4gICAgICAgICYmICgwIDw9IHRoaXMubCAmJiB0aGlzLmwgPD0gMSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5vcGFjaXR5ICYmIHRoaXMub3BhY2l0eSA8PSAxKTtcbiAgfVxufSkpO1xuXG4vKiBGcm9tIEZ2RCAxMy4zNywgQ1NTIENvbG9yIE1vZHVsZSBMZXZlbCAzICovXG5mdW5jdGlvbiBoc2wycmdiKGgsIG0xLCBtMikge1xuICByZXR1cm4gKGggPCA2MCA/IG0xICsgKG0yIC0gbTEpICogaCAvIDYwXG4gICAgICA6IGggPCAxODAgPyBtMlxuICAgICAgOiBoIDwgMjQwID8gbTEgKyAobTIgLSBtMSkgKiAoMjQwIC0gaCkgLyA2MFxuICAgICAgOiBtMSkgKiAyNTU7XG59XG5cbnZhciBkZWcycmFkID0gTWF0aC5QSSAvIDE4MDtcbnZhciByYWQyZGVnID0gMTgwIC8gTWF0aC5QSTtcblxudmFyIEtuID0gMTg7XG52YXIgWG4gPSAwLjk1MDQ3MDtcbnZhciBZbiA9IDE7XG52YXIgWm4gPSAxLjA4ODgzMDtcbnZhciB0MCA9IDQgLyAyOTtcbnZhciB0MSA9IDYgLyAyOTtcbnZhciB0MiA9IDMgKiB0MSAqIHQxO1xudmFyIHQzID0gdDEgKiB0MSAqIHQxO1xuXG5mdW5jdGlvbiBsYWJDb252ZXJ0KG8pIHtcbiAgaWYgKG8gaW5zdGFuY2VvZiBMYWIpIHJldHVybiBuZXcgTGFiKG8ubCwgby5hLCBvLmIsIG8ub3BhY2l0eSk7XG4gIGlmIChvIGluc3RhbmNlb2YgSGNsKSB7XG4gICAgdmFyIGggPSBvLmggKiBkZWcycmFkO1xuICAgIHJldHVybiBuZXcgTGFiKG8ubCwgTWF0aC5jb3MoaCkgKiBvLmMsIE1hdGguc2luKGgpICogby5jLCBvLm9wYWNpdHkpO1xuICB9XG4gIGlmICghKG8gaW5zdGFuY2VvZiBSZ2IpKSBvID0gcmdiQ29udmVydChvKTtcbiAgdmFyIGIgPSByZ2IyeHl6KG8uciksXG4gICAgICBhID0gcmdiMnh5eihvLmcpLFxuICAgICAgbCA9IHJnYjJ4eXooby5iKSxcbiAgICAgIHggPSB4eXoybGFiKCgwLjQxMjQ1NjQgKiBiICsgMC4zNTc1NzYxICogYSArIDAuMTgwNDM3NSAqIGwpIC8gWG4pLFxuICAgICAgeSA9IHh5ejJsYWIoKDAuMjEyNjcyOSAqIGIgKyAwLjcxNTE1MjIgKiBhICsgMC4wNzIxNzUwICogbCkgLyBZbiksXG4gICAgICB6ID0geHl6MmxhYigoMC4wMTkzMzM5ICogYiArIDAuMTE5MTkyMCAqIGEgKyAwLjk1MDMwNDEgKiBsKSAvIFpuKTtcbiAgcmV0dXJuIG5ldyBMYWIoMTE2ICogeSAtIDE2LCA1MDAgKiAoeCAtIHkpLCAyMDAgKiAoeSAtIHopLCBvLm9wYWNpdHkpO1xufVxuXG5mdW5jdGlvbiBsYWIobCwgYSwgYiwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGxhYkNvbnZlcnQobCkgOiBuZXcgTGFiKGwsIGEsIGIsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZnVuY3Rpb24gTGFiKGwsIGEsIGIsIG9wYWNpdHkpIHtcbiAgdGhpcy5sID0gK2w7XG4gIHRoaXMuYSA9ICthO1xuICB0aGlzLmIgPSArYjtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShMYWIsIGxhYiwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIG5ldyBMYWIodGhpcy5sICsgS24gKiAoayA9PSBudWxsID8gMSA6IGspLCB0aGlzLmEsIHRoaXMuYiwgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIG5ldyBMYWIodGhpcy5sIC0gS24gKiAoayA9PSBudWxsID8gMSA6IGspLCB0aGlzLmEsIHRoaXMuYiwgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgeSA9ICh0aGlzLmwgKyAxNikgLyAxMTYsXG4gICAgICAgIHggPSBpc05hTih0aGlzLmEpID8geSA6IHkgKyB0aGlzLmEgLyA1MDAsXG4gICAgICAgIHogPSBpc05hTih0aGlzLmIpID8geSA6IHkgLSB0aGlzLmIgLyAyMDA7XG4gICAgeSA9IFluICogbGFiMnh5eih5KTtcbiAgICB4ID0gWG4gKiBsYWIyeHl6KHgpO1xuICAgIHogPSBabiAqIGxhYjJ4eXooeik7XG4gICAgcmV0dXJuIG5ldyBSZ2IoXG4gICAgICB4eXoycmdiKCAzLjI0MDQ1NDIgKiB4IC0gMS41MzcxMzg1ICogeSAtIDAuNDk4NTMxNCAqIHopLCAvLyBENjUgLT4gc1JHQlxuICAgICAgeHl6MnJnYigtMC45NjkyNjYwICogeCArIDEuODc2MDEwOCAqIHkgKyAwLjA0MTU1NjAgKiB6KSxcbiAgICAgIHh5ejJyZ2IoIDAuMDU1NjQzNCAqIHggLSAwLjIwNDAyNTkgKiB5ICsgMS4wNTcyMjUyICogeiksXG4gICAgICB0aGlzLm9wYWNpdHlcbiAgICApO1xuICB9XG59KSk7XG5cbmZ1bmN0aW9uIHh5ejJsYWIodCkge1xuICByZXR1cm4gdCA+IHQzID8gTWF0aC5wb3codCwgMSAvIDMpIDogdCAvIHQyICsgdDA7XG59XG5cbmZ1bmN0aW9uIGxhYjJ4eXoodCkge1xuICByZXR1cm4gdCA+IHQxID8gdCAqIHQgKiB0IDogdDIgKiAodCAtIHQwKTtcbn1cblxuZnVuY3Rpb24geHl6MnJnYih4KSB7XG4gIHJldHVybiAyNTUgKiAoeCA8PSAwLjAwMzEzMDggPyAxMi45MiAqIHggOiAxLjA1NSAqIE1hdGgucG93KHgsIDEgLyAyLjQpIC0gMC4wNTUpO1xufVxuXG5mdW5jdGlvbiByZ2IyeHl6KHgpIHtcbiAgcmV0dXJuICh4IC89IDI1NSkgPD0gMC4wNDA0NSA/IHggLyAxMi45MiA6IE1hdGgucG93KCh4ICsgMC4wNTUpIC8gMS4wNTUsIDIuNCk7XG59XG5cbmZ1bmN0aW9uIGhjbENvbnZlcnQobykge1xuICBpZiAobyBpbnN0YW5jZW9mIEhjbCkgcmV0dXJuIG5ldyBIY2woby5oLCBvLmMsIG8ubCwgby5vcGFjaXR5KTtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIExhYikpIG8gPSBsYWJDb252ZXJ0KG8pO1xuICB2YXIgaCA9IE1hdGguYXRhbjIoby5iLCBvLmEpICogcmFkMmRlZztcbiAgcmV0dXJuIG5ldyBIY2woaCA8IDAgPyBoICsgMzYwIDogaCwgTWF0aC5zcXJ0KG8uYSAqIG8uYSArIG8uYiAqIG8uYiksIG8ubCwgby5vcGFjaXR5KTtcbn1cblxuZnVuY3Rpb24gaGNsKGgsIGMsIGwsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBoY2xDb252ZXJ0KGgpIDogbmV3IEhjbChoLCBjLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmZ1bmN0aW9uIEhjbChoLCBjLCBsLCBvcGFjaXR5KSB7XG4gIHRoaXMuaCA9ICtoO1xuICB0aGlzLmMgPSArYztcbiAgdGhpcy5sID0gK2w7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoSGNsLCBoY2wsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgSGNsKHRoaXMuaCwgdGhpcy5jLCB0aGlzLmwgKyBLbiAqIChrID09IG51bGwgPyAxIDogayksIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgSGNsKHRoaXMuaCwgdGhpcy5jLCB0aGlzLmwgLSBLbiAqIChrID09IG51bGwgPyAxIDogayksIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGxhYkNvbnZlcnQodGhpcykucmdiKCk7XG4gIH1cbn0pKTtcblxudmFyIEEgPSAtMC4xNDg2MTtcbnZhciBCID0gKzEuNzgyNzc7XG52YXIgQyA9IC0wLjI5MjI3O1xudmFyIEQgPSAtMC45MDY0OTtcbnZhciBFID0gKzEuOTcyOTQ7XG52YXIgRUQgPSBFICogRDtcbnZhciBFQiA9IEUgKiBCO1xudmFyIEJDX0RBID0gQiAqIEMgLSBEICogQTtcblxuZnVuY3Rpb24gY3ViZWhlbGl4Q29udmVydChvKSB7XG4gIGlmIChvIGluc3RhbmNlb2YgQ3ViZWhlbGl4KSByZXR1cm4gbmV3IEN1YmVoZWxpeChvLmgsIG8ucywgby5sLCBvLm9wYWNpdHkpO1xuICBpZiAoIShvIGluc3RhbmNlb2YgUmdiKSkgbyA9IHJnYkNvbnZlcnQobyk7XG4gIHZhciByID0gby5yIC8gMjU1LFxuICAgICAgZyA9IG8uZyAvIDI1NSxcbiAgICAgIGIgPSBvLmIgLyAyNTUsXG4gICAgICBsID0gKEJDX0RBICogYiArIEVEICogciAtIEVCICogZykgLyAoQkNfREEgKyBFRCAtIEVCKSxcbiAgICAgIGJsID0gYiAtIGwsXG4gICAgICBrID0gKEUgKiAoZyAtIGwpIC0gQyAqIGJsKSAvIEQsXG4gICAgICBzID0gTWF0aC5zcXJ0KGsgKiBrICsgYmwgKiBibCkgLyAoRSAqIGwgKiAoMSAtIGwpKSwgLy8gTmFOIGlmIGw9MCBvciBsPTFcbiAgICAgIGggPSBzID8gTWF0aC5hdGFuMihrLCBibCkgKiByYWQyZGVnIC0gMTIwIDogTmFOO1xuICByZXR1cm4gbmV3IEN1YmVoZWxpeChoIDwgMCA/IGggKyAzNjAgOiBoLCBzLCBsLCBvLm9wYWNpdHkpO1xufVxuXG5mdW5jdGlvbiBjdWJlaGVsaXgoaCwgcywgbCwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGN1YmVoZWxpeENvbnZlcnQoaCkgOiBuZXcgQ3ViZWhlbGl4KGgsIHMsIGwsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZnVuY3Rpb24gQ3ViZWhlbGl4KGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgdGhpcy5oID0gK2g7XG4gIHRoaXMucyA9ICtzO1xuICB0aGlzLmwgPSArbDtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShDdWJlaGVsaXgsIGN1YmVoZWxpeCwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGJyaWdodGVyIDogTWF0aC5wb3coYnJpZ2h0ZXIsIGspO1xuICAgIHJldHVybiBuZXcgQ3ViZWhlbGl4KHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gZGFya2VyIDogTWF0aC5wb3coZGFya2VyLCBrKTtcbiAgICByZXR1cm4gbmV3IEN1YmVoZWxpeCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgaCA9IGlzTmFOKHRoaXMuaCkgPyAwIDogKHRoaXMuaCArIDEyMCkgKiBkZWcycmFkLFxuICAgICAgICBsID0gK3RoaXMubCxcbiAgICAgICAgYSA9IGlzTmFOKHRoaXMucykgPyAwIDogdGhpcy5zICogbCAqICgxIC0gbCksXG4gICAgICAgIGNvc2ggPSBNYXRoLmNvcyhoKSxcbiAgICAgICAgc2luaCA9IE1hdGguc2luKGgpO1xuICAgIHJldHVybiBuZXcgUmdiKFxuICAgICAgMjU1ICogKGwgKyBhICogKEEgKiBjb3NoICsgQiAqIHNpbmgpKSxcbiAgICAgIDI1NSAqIChsICsgYSAqIChDICogY29zaCArIEQgKiBzaW5oKSksXG4gICAgICAyNTUgKiAobCArIGEgKiAoRSAqIGNvc2gpKSxcbiAgICAgIHRoaXMub3BhY2l0eVxuICAgICk7XG4gIH1cbn0pKTtcblxuZnVuY3Rpb24gYmFzaXModDEsIHYwLCB2MSwgdjIsIHYzKSB7XG4gIHZhciB0MiA9IHQxICogdDEsIHQzID0gdDIgKiB0MTtcbiAgcmV0dXJuICgoMSAtIDMgKiB0MSArIDMgKiB0MiAtIHQzKSAqIHYwXG4gICAgICArICg0IC0gNiAqIHQyICsgMyAqIHQzKSAqIHYxXG4gICAgICArICgxICsgMyAqIHQxICsgMyAqIHQyIC0gMyAqIHQzKSAqIHYyXG4gICAgICArIHQzICogdjMpIC8gNjtcbn1cblxudmFyIGJhc2lzJDEgPSBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoIC0gMTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgaSA9IHQgPD0gMCA/ICh0ID0gMCkgOiB0ID49IDEgPyAodCA9IDEsIG4gLSAxKSA6IE1hdGguZmxvb3IodCAqIG4pLFxuICAgICAgICB2MSA9IHZhbHVlc1tpXSxcbiAgICAgICAgdjIgPSB2YWx1ZXNbaSArIDFdLFxuICAgICAgICB2MCA9IGkgPiAwID8gdmFsdWVzW2kgLSAxXSA6IDIgKiB2MSAtIHYyLFxuICAgICAgICB2MyA9IGkgPCBuIC0gMSA/IHZhbHVlc1tpICsgMl0gOiAyICogdjIgLSB2MTtcbiAgICByZXR1cm4gYmFzaXMoKHQgLSBpIC8gbikgKiBuLCB2MCwgdjEsIHYyLCB2Myk7XG4gIH07XG59O1xuXG52YXIgYmFzaXNDbG9zZWQgPSBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHZhciBpID0gTWF0aC5mbG9vcigoKHQgJT0gMSkgPCAwID8gKyt0IDogdCkgKiBuKSxcbiAgICAgICAgdjAgPSB2YWx1ZXNbKGkgKyBuIC0gMSkgJSBuXSxcbiAgICAgICAgdjEgPSB2YWx1ZXNbaSAlIG5dLFxuICAgICAgICB2MiA9IHZhbHVlc1soaSArIDEpICUgbl0sXG4gICAgICAgIHYzID0gdmFsdWVzWyhpICsgMikgJSBuXTtcbiAgICByZXR1cm4gYmFzaXMoKHQgLSBpIC8gbikgKiBuLCB2MCwgdjEsIHYyLCB2Myk7XG4gIH07XG59O1xuXG52YXIgY29uc3RhbnQkMyA9IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufTtcblxuZnVuY3Rpb24gbGluZWFyKGEsIGQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYSArIHQgKiBkO1xuICB9O1xufVxuXG5mdW5jdGlvbiBleHBvbmVudGlhbChhLCBiLCB5KSB7XG4gIHJldHVybiBhID0gTWF0aC5wb3coYSwgeSksIGIgPSBNYXRoLnBvdyhiLCB5KSAtIGEsIHkgPSAxIC8geSwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBNYXRoLnBvdyhhICsgdCAqIGIsIHkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBodWUoYSwgYikge1xuICB2YXIgZCA9IGIgLSBhO1xuICByZXR1cm4gZCA/IGxpbmVhcihhLCBkID4gMTgwIHx8IGQgPCAtMTgwID8gZCAtIDM2MCAqIE1hdGgucm91bmQoZCAvIDM2MCkgOiBkKSA6IGNvbnN0YW50JDMoaXNOYU4oYSkgPyBiIDogYSk7XG59XG5cbmZ1bmN0aW9uIGdhbW1hKHkpIHtcbiAgcmV0dXJuICh5ID0gK3kpID09PSAxID8gbm9nYW1tYSA6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYiAtIGEgPyBleHBvbmVudGlhbChhLCBiLCB5KSA6IGNvbnN0YW50JDMoaXNOYU4oYSkgPyBiIDogYSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG5vZ2FtbWEoYSwgYikge1xuICB2YXIgZCA9IGIgLSBhO1xuICByZXR1cm4gZCA/IGxpbmVhcihhLCBkKSA6IGNvbnN0YW50JDMoaXNOYU4oYSkgPyBiIDogYSk7XG59XG5cbnZhciBpbnRlcnBvbGF0ZVJnYiA9IChmdW5jdGlvbiByZ2JHYW1tYSh5KSB7XG4gIHZhciBjb2xvciQkMSA9IGdhbW1hKHkpO1xuXG4gIGZ1bmN0aW9uIHJnYiQkMShzdGFydCwgZW5kKSB7XG4gICAgdmFyIHIgPSBjb2xvciQkMSgoc3RhcnQgPSByZ2Ioc3RhcnQpKS5yLCAoZW5kID0gcmdiKGVuZCkpLnIpLFxuICAgICAgICBnID0gY29sb3IkJDEoc3RhcnQuZywgZW5kLmcpLFxuICAgICAgICBiID0gY29sb3IkJDEoc3RhcnQuYiwgZW5kLmIpLFxuICAgICAgICBvcGFjaXR5ID0gbm9nYW1tYShzdGFydC5vcGFjaXR5LCBlbmQub3BhY2l0eSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHN0YXJ0LnIgPSByKHQpO1xuICAgICAgc3RhcnQuZyA9IGcodCk7XG4gICAgICBzdGFydC5iID0gYih0KTtcbiAgICAgIHN0YXJ0Lm9wYWNpdHkgPSBvcGFjaXR5KHQpO1xuICAgICAgcmV0dXJuIHN0YXJ0ICsgXCJcIjtcbiAgICB9O1xuICB9XG5cbiAgcmdiJCQxLmdhbW1hID0gcmdiR2FtbWE7XG5cbiAgcmV0dXJuIHJnYiQkMTtcbn0pKDEpO1xuXG5mdW5jdGlvbiByZ2JTcGxpbmUoc3BsaW5lKSB7XG4gIHJldHVybiBmdW5jdGlvbihjb2xvcnMpIHtcbiAgICB2YXIgbiA9IGNvbG9ycy5sZW5ndGgsXG4gICAgICAgIHIgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGcgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGIgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGksIGNvbG9yJCQxO1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGNvbG9yJCQxID0gcmdiKGNvbG9yc1tpXSk7XG4gICAgICByW2ldID0gY29sb3IkJDEuciB8fCAwO1xuICAgICAgZ1tpXSA9IGNvbG9yJCQxLmcgfHwgMDtcbiAgICAgIGJbaV0gPSBjb2xvciQkMS5iIHx8IDA7XG4gICAgfVxuICAgIHIgPSBzcGxpbmUocik7XG4gICAgZyA9IHNwbGluZShnKTtcbiAgICBiID0gc3BsaW5lKGIpO1xuICAgIGNvbG9yJCQxLm9wYWNpdHkgPSAxO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBjb2xvciQkMS5yID0gcih0KTtcbiAgICAgIGNvbG9yJCQxLmcgPSBnKHQpO1xuICAgICAgY29sb3IkJDEuYiA9IGIodCk7XG4gICAgICByZXR1cm4gY29sb3IkJDEgKyBcIlwiO1xuICAgIH07XG4gIH07XG59XG5cbnZhciByZ2JCYXNpcyA9IHJnYlNwbGluZShiYXNpcyQxKTtcbnZhciByZ2JCYXNpc0Nsb3NlZCA9IHJnYlNwbGluZShiYXNpc0Nsb3NlZCk7XG5cbnZhciBhcnJheSQxID0gZnVuY3Rpb24oYSwgYikge1xuICB2YXIgbmIgPSBiID8gYi5sZW5ndGggOiAwLFxuICAgICAgbmEgPSBhID8gTWF0aC5taW4obmIsIGEubGVuZ3RoKSA6IDAsXG4gICAgICB4ID0gbmV3IEFycmF5KG5iKSxcbiAgICAgIGMgPSBuZXcgQXJyYXkobmIpLFxuICAgICAgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgbmE7ICsraSkgeFtpXSA9IGludGVycG9sYXRlVmFsdWUoYVtpXSwgYltpXSk7XG4gIGZvciAoOyBpIDwgbmI7ICsraSkgY1tpXSA9IGJbaV07XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbmE7ICsraSkgY1tpXSA9IHhbaV0odCk7XG4gICAgcmV0dXJuIGM7XG4gIH07XG59O1xuXG52YXIgZGF0ZSA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGQgPSBuZXcgRGF0ZTtcbiAgcmV0dXJuIGEgPSArYSwgYiAtPSBhLCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGQuc2V0VGltZShhICsgYiAqIHQpLCBkO1xuICB9O1xufTtcblxudmFyIHJlaW50ZXJwb2xhdGUgPSBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBhID0gK2EsIGIgLT0gYSwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBhICsgYiAqIHQ7XG4gIH07XG59O1xuXG52YXIgb2JqZWN0ID0gZnVuY3Rpb24oYSwgYikge1xuICB2YXIgaSA9IHt9LFxuICAgICAgYyA9IHt9LFxuICAgICAgaztcblxuICBpZiAoYSA9PT0gbnVsbCB8fCB0eXBlb2YgYSAhPT0gXCJvYmplY3RcIikgYSA9IHt9O1xuICBpZiAoYiA9PT0gbnVsbCB8fCB0eXBlb2YgYiAhPT0gXCJvYmplY3RcIikgYiA9IHt9O1xuXG4gIGZvciAoayBpbiBiKSB7XG4gICAgaWYgKGsgaW4gYSkge1xuICAgICAgaVtrXSA9IGludGVycG9sYXRlVmFsdWUoYVtrXSwgYltrXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNba10gPSBiW2tdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgZm9yIChrIGluIGkpIGNba10gPSBpW2tdKHQpO1xuICAgIHJldHVybiBjO1xuICB9O1xufTtcblxudmFyIHJlQSA9IC9bLStdPyg/OlxcZCtcXC4/XFxkKnxcXC4/XFxkKykoPzpbZUVdWy0rXT9cXGQrKT8vZztcbnZhciByZUIgPSBuZXcgUmVnRXhwKHJlQS5zb3VyY2UsIFwiZ1wiKTtcblxuZnVuY3Rpb24gemVybyhiKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYjtcbiAgfTtcbn1cblxuZnVuY3Rpb24gb25lKGIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYih0KSArIFwiXCI7XG4gIH07XG59XG5cbnZhciBpbnRlcnBvbGF0ZVN0cmluZyA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGJpID0gcmVBLmxhc3RJbmRleCA9IHJlQi5sYXN0SW5kZXggPSAwLCAvLyBzY2FuIGluZGV4IGZvciBuZXh0IG51bWJlciBpbiBiXG4gICAgICBhbSwgLy8gY3VycmVudCBtYXRjaCBpbiBhXG4gICAgICBibSwgLy8gY3VycmVudCBtYXRjaCBpbiBiXG4gICAgICBicywgLy8gc3RyaW5nIHByZWNlZGluZyBjdXJyZW50IG51bWJlciBpbiBiLCBpZiBhbnlcbiAgICAgIGkgPSAtMSwgLy8gaW5kZXggaW4gc1xuICAgICAgcyA9IFtdLCAvLyBzdHJpbmcgY29uc3RhbnRzIGFuZCBwbGFjZWhvbGRlcnNcbiAgICAgIHEgPSBbXTsgLy8gbnVtYmVyIGludGVycG9sYXRvcnNcblxuICAvLyBDb2VyY2UgaW5wdXRzIHRvIHN0cmluZ3MuXG4gIGEgPSBhICsgXCJcIiwgYiA9IGIgKyBcIlwiO1xuXG4gIC8vIEludGVycG9sYXRlIHBhaXJzIG9mIG51bWJlcnMgaW4gYSAmIGIuXG4gIHdoaWxlICgoYW0gPSByZUEuZXhlYyhhKSlcbiAgICAgICYmIChibSA9IHJlQi5leGVjKGIpKSkge1xuICAgIGlmICgoYnMgPSBibS5pbmRleCkgPiBiaSkgeyAvLyBhIHN0cmluZyBwcmVjZWRlcyB0aGUgbmV4dCBudW1iZXIgaW4gYlxuICAgICAgYnMgPSBiLnNsaWNlKGJpLCBicyk7XG4gICAgICBpZiAoc1tpXSkgc1tpXSArPSBiczsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICAgIGVsc2Ugc1srK2ldID0gYnM7XG4gICAgfVxuICAgIGlmICgoYW0gPSBhbVswXSkgPT09IChibSA9IGJtWzBdKSkgeyAvLyBudW1iZXJzIGluIGEgJiBiIG1hdGNoXG4gICAgICBpZiAoc1tpXSkgc1tpXSArPSBibTsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICAgIGVsc2Ugc1srK2ldID0gYm07XG4gICAgfSBlbHNlIHsgLy8gaW50ZXJwb2xhdGUgbm9uLW1hdGNoaW5nIG51bWJlcnNcbiAgICAgIHNbKytpXSA9IG51bGw7XG4gICAgICBxLnB1c2goe2k6IGksIHg6IHJlaW50ZXJwb2xhdGUoYW0sIGJtKX0pO1xuICAgIH1cbiAgICBiaSA9IHJlQi5sYXN0SW5kZXg7XG4gIH1cblxuICAvLyBBZGQgcmVtYWlucyBvZiBiLlxuICBpZiAoYmkgPCBiLmxlbmd0aCkge1xuICAgIGJzID0gYi5zbGljZShiaSk7XG4gICAgaWYgKHNbaV0pIHNbaV0gKz0gYnM7IC8vIGNvYWxlc2NlIHdpdGggcHJldmlvdXMgc3RyaW5nXG4gICAgZWxzZSBzWysraV0gPSBicztcbiAgfVxuXG4gIC8vIFNwZWNpYWwgb3B0aW1pemF0aW9uIGZvciBvbmx5IGEgc2luZ2xlIG1hdGNoLlxuICAvLyBPdGhlcndpc2UsIGludGVycG9sYXRlIGVhY2ggb2YgdGhlIG51bWJlcnMgYW5kIHJlam9pbiB0aGUgc3RyaW5nLlxuICByZXR1cm4gcy5sZW5ndGggPCAyID8gKHFbMF1cbiAgICAgID8gb25lKHFbMF0ueClcbiAgICAgIDogemVybyhiKSlcbiAgICAgIDogKGIgPSBxLmxlbmd0aCwgZnVuY3Rpb24odCkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBvOyBpIDwgYjsgKytpKSBzWyhvID0gcVtpXSkuaV0gPSBvLngodCk7XG4gICAgICAgICAgcmV0dXJuIHMuam9pbihcIlwiKTtcbiAgICAgICAgfSk7XG59O1xuXG52YXIgaW50ZXJwb2xhdGVWYWx1ZSA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIHQgPSB0eXBlb2YgYiwgYztcbiAgcmV0dXJuIGIgPT0gbnVsbCB8fCB0ID09PSBcImJvb2xlYW5cIiA/IGNvbnN0YW50JDMoYilcbiAgICAgIDogKHQgPT09IFwibnVtYmVyXCIgPyByZWludGVycG9sYXRlXG4gICAgICA6IHQgPT09IFwic3RyaW5nXCIgPyAoKGMgPSBjb2xvcihiKSkgPyAoYiA9IGMsIGludGVycG9sYXRlUmdiKSA6IGludGVycG9sYXRlU3RyaW5nKVxuICAgICAgOiBiIGluc3RhbmNlb2YgY29sb3IgPyBpbnRlcnBvbGF0ZVJnYlxuICAgICAgOiBiIGluc3RhbmNlb2YgRGF0ZSA/IGRhdGVcbiAgICAgIDogQXJyYXkuaXNBcnJheShiKSA/IGFycmF5JDFcbiAgICAgIDogdHlwZW9mIGIudmFsdWVPZiAhPT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBiLnRvU3RyaW5nICE9PSBcImZ1bmN0aW9uXCIgfHwgaXNOYU4oYikgPyBvYmplY3RcbiAgICAgIDogcmVpbnRlcnBvbGF0ZSkoYSwgYik7XG59O1xuXG52YXIgaW50ZXJwb2xhdGVSb3VuZCA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgPSArYSwgYiAtPSBhLCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQoYSArIGIgKiB0KTtcbiAgfTtcbn07XG5cbnZhciBkZWdyZWVzID0gMTgwIC8gTWF0aC5QSTtcblxudmFyIGlkZW50aXR5JDIgPSB7XG4gIHRyYW5zbGF0ZVg6IDAsXG4gIHRyYW5zbGF0ZVk6IDAsXG4gIHJvdGF0ZTogMCxcbiAgc2tld1g6IDAsXG4gIHNjYWxlWDogMSxcbiAgc2NhbGVZOiAxXG59O1xuXG52YXIgZGVjb21wb3NlID0gZnVuY3Rpb24oYSwgYiwgYywgZCwgZSwgZikge1xuICB2YXIgc2NhbGVYLCBzY2FsZVksIHNrZXdYO1xuICBpZiAoc2NhbGVYID0gTWF0aC5zcXJ0KGEgKiBhICsgYiAqIGIpKSBhIC89IHNjYWxlWCwgYiAvPSBzY2FsZVg7XG4gIGlmIChza2V3WCA9IGEgKiBjICsgYiAqIGQpIGMgLT0gYSAqIHNrZXdYLCBkIC09IGIgKiBza2V3WDtcbiAgaWYgKHNjYWxlWSA9IE1hdGguc3FydChjICogYyArIGQgKiBkKSkgYyAvPSBzY2FsZVksIGQgLz0gc2NhbGVZLCBza2V3WCAvPSBzY2FsZVk7XG4gIGlmIChhICogZCA8IGIgKiBjKSBhID0gLWEsIGIgPSAtYiwgc2tld1ggPSAtc2tld1gsIHNjYWxlWCA9IC1zY2FsZVg7XG4gIHJldHVybiB7XG4gICAgdHJhbnNsYXRlWDogZSxcbiAgICB0cmFuc2xhdGVZOiBmLFxuICAgIHJvdGF0ZTogTWF0aC5hdGFuMihiLCBhKSAqIGRlZ3JlZXMsXG4gICAgc2tld1g6IE1hdGguYXRhbihza2V3WCkgKiBkZWdyZWVzLFxuICAgIHNjYWxlWDogc2NhbGVYLFxuICAgIHNjYWxlWTogc2NhbGVZXG4gIH07XG59O1xuXG52YXIgY3NzTm9kZTtcbnZhciBjc3NSb290O1xudmFyIGNzc1ZpZXc7XG52YXIgc3ZnTm9kZTtcblxuZnVuY3Rpb24gcGFyc2VDc3ModmFsdWUpIHtcbiAgaWYgKHZhbHVlID09PSBcIm5vbmVcIikgcmV0dXJuIGlkZW50aXR5JDI7XG4gIGlmICghY3NzTm9kZSkgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJESVZcIiksIGNzc1Jvb3QgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIGNzc1ZpZXcgPSBkb2N1bWVudC5kZWZhdWx0VmlldztcbiAgY3NzTm9kZS5zdHlsZS50cmFuc2Zvcm0gPSB2YWx1ZTtcbiAgdmFsdWUgPSBjc3NWaWV3LmdldENvbXB1dGVkU3R5bGUoY3NzUm9vdC5hcHBlbmRDaGlsZChjc3NOb2RlKSwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShcInRyYW5zZm9ybVwiKTtcbiAgY3NzUm9vdC5yZW1vdmVDaGlsZChjc3NOb2RlKTtcbiAgdmFsdWUgPSB2YWx1ZS5zbGljZSg3LCAtMSkuc3BsaXQoXCIsXCIpO1xuICByZXR1cm4gZGVjb21wb3NlKCt2YWx1ZVswXSwgK3ZhbHVlWzFdLCArdmFsdWVbMl0sICt2YWx1ZVszXSwgK3ZhbHVlWzRdLCArdmFsdWVbNV0pO1xufVxuXG5mdW5jdGlvbiBwYXJzZVN2Zyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIGlkZW50aXR5JDI7XG4gIGlmICghc3ZnTm9kZSkgc3ZnTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwiZ1wiKTtcbiAgc3ZnTm9kZS5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgdmFsdWUpO1xuICBpZiAoISh2YWx1ZSA9IHN2Z05vZGUudHJhbnNmb3JtLmJhc2VWYWwuY29uc29saWRhdGUoKSkpIHJldHVybiBpZGVudGl0eSQyO1xuICB2YWx1ZSA9IHZhbHVlLm1hdHJpeDtcbiAgcmV0dXJuIGRlY29tcG9zZSh2YWx1ZS5hLCB2YWx1ZS5iLCB2YWx1ZS5jLCB2YWx1ZS5kLCB2YWx1ZS5lLCB2YWx1ZS5mKTtcbn1cblxuZnVuY3Rpb24gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2UsIHB4Q29tbWEsIHB4UGFyZW4sIGRlZ1BhcmVuKSB7XG5cbiAgZnVuY3Rpb24gcG9wKHMpIHtcbiAgICByZXR1cm4gcy5sZW5ndGggPyBzLnBvcCgpICsgXCIgXCIgOiBcIlwiO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNsYXRlKHhhLCB5YSwgeGIsIHliLCBzLCBxKSB7XG4gICAgaWYgKHhhICE9PSB4YiB8fCB5YSAhPT0geWIpIHtcbiAgICAgIHZhciBpID0gcy5wdXNoKFwidHJhbnNsYXRlKFwiLCBudWxsLCBweENvbW1hLCBudWxsLCBweFBhcmVuKTtcbiAgICAgIHEucHVzaCh7aTogaSAtIDQsIHg6IHJlaW50ZXJwb2xhdGUoeGEsIHhiKX0sIHtpOiBpIC0gMiwgeDogcmVpbnRlcnBvbGF0ZSh5YSwgeWIpfSk7XG4gICAgfSBlbHNlIGlmICh4YiB8fCB5Yikge1xuICAgICAgcy5wdXNoKFwidHJhbnNsYXRlKFwiICsgeGIgKyBweENvbW1hICsgeWIgKyBweFBhcmVuKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByb3RhdGUoYSwgYiwgcywgcSkge1xuICAgIGlmIChhICE9PSBiKSB7XG4gICAgICBpZiAoYSAtIGIgPiAxODApIGIgKz0gMzYwOyBlbHNlIGlmIChiIC0gYSA+IDE4MCkgYSArPSAzNjA7IC8vIHNob3J0ZXN0IHBhdGhcbiAgICAgIHEucHVzaCh7aTogcy5wdXNoKHBvcChzKSArIFwicm90YXRlKFwiLCBudWxsLCBkZWdQYXJlbikgLSAyLCB4OiByZWludGVycG9sYXRlKGEsIGIpfSk7XG4gICAgfSBlbHNlIGlmIChiKSB7XG4gICAgICBzLnB1c2gocG9wKHMpICsgXCJyb3RhdGUoXCIgKyBiICsgZGVnUGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNrZXdYKGEsIGIsIHMsIHEpIHtcbiAgICBpZiAoYSAhPT0gYikge1xuICAgICAgcS5wdXNoKHtpOiBzLnB1c2gocG9wKHMpICsgXCJza2V3WChcIiwgbnVsbCwgZGVnUGFyZW4pIC0gMiwgeDogcmVpbnRlcnBvbGF0ZShhLCBiKX0pO1xuICAgIH0gZWxzZSBpZiAoYikge1xuICAgICAgcy5wdXNoKHBvcChzKSArIFwic2tld1goXCIgKyBiICsgZGVnUGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNjYWxlKHhhLCB5YSwgeGIsIHliLCBzLCBxKSB7XG4gICAgaWYgKHhhICE9PSB4YiB8fCB5YSAhPT0geWIpIHtcbiAgICAgIHZhciBpID0gcy5wdXNoKHBvcChzKSArIFwic2NhbGUoXCIsIG51bGwsIFwiLFwiLCBudWxsLCBcIilcIik7XG4gICAgICBxLnB1c2goe2k6IGkgLSA0LCB4OiByZWludGVycG9sYXRlKHhhLCB4Yil9LCB7aTogaSAtIDIsIHg6IHJlaW50ZXJwb2xhdGUoeWEsIHliKX0pO1xuICAgIH0gZWxzZSBpZiAoeGIgIT09IDEgfHwgeWIgIT09IDEpIHtcbiAgICAgIHMucHVzaChwb3AocykgKyBcInNjYWxlKFwiICsgeGIgKyBcIixcIiArIHliICsgXCIpXCIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbihhLCBiKSB7XG4gICAgdmFyIHMgPSBbXSwgLy8gc3RyaW5nIGNvbnN0YW50cyBhbmQgcGxhY2Vob2xkZXJzXG4gICAgICAgIHEgPSBbXTsgLy8gbnVtYmVyIGludGVycG9sYXRvcnNcbiAgICBhID0gcGFyc2UoYSksIGIgPSBwYXJzZShiKTtcbiAgICB0cmFuc2xhdGUoYS50cmFuc2xhdGVYLCBhLnRyYW5zbGF0ZVksIGIudHJhbnNsYXRlWCwgYi50cmFuc2xhdGVZLCBzLCBxKTtcbiAgICByb3RhdGUoYS5yb3RhdGUsIGIucm90YXRlLCBzLCBxKTtcbiAgICBza2V3WChhLnNrZXdYLCBiLnNrZXdYLCBzLCBxKTtcbiAgICBzY2FsZShhLnNjYWxlWCwgYS5zY2FsZVksIGIuc2NhbGVYLCBiLnNjYWxlWSwgcywgcSk7XG4gICAgYSA9IGIgPSBudWxsOyAvLyBnY1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICB2YXIgaSA9IC0xLCBuID0gcS5sZW5ndGgsIG87XG4gICAgICB3aGlsZSAoKytpIDwgbikgc1sobyA9IHFbaV0pLmldID0gby54KHQpO1xuICAgICAgcmV0dXJuIHMuam9pbihcIlwiKTtcbiAgICB9O1xuICB9O1xufVxuXG52YXIgaW50ZXJwb2xhdGVUcmFuc2Zvcm1Dc3MgPSBpbnRlcnBvbGF0ZVRyYW5zZm9ybShwYXJzZUNzcywgXCJweCwgXCIsIFwicHgpXCIsIFwiZGVnKVwiKTtcbnZhciBpbnRlcnBvbGF0ZVRyYW5zZm9ybVN2ZyA9IGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlU3ZnLCBcIiwgXCIsIFwiKVwiLCBcIilcIik7XG5cbnZhciByaG8gPSBNYXRoLlNRUlQyO1xudmFyIHJobzIgPSAyO1xudmFyIHJobzQgPSA0O1xudmFyIGVwc2lsb24yID0gMWUtMTI7XG5cbmZ1bmN0aW9uIGNvc2goeCkge1xuICByZXR1cm4gKCh4ID0gTWF0aC5leHAoeCkpICsgMSAvIHgpIC8gMjtcbn1cblxuZnVuY3Rpb24gc2luaCh4KSB7XG4gIHJldHVybiAoKHggPSBNYXRoLmV4cCh4KSkgLSAxIC8geCkgLyAyO1xufVxuXG5mdW5jdGlvbiB0YW5oKHgpIHtcbiAgcmV0dXJuICgoeCA9IE1hdGguZXhwKDIgKiB4KSkgLSAxKSAvICh4ICsgMSk7XG59XG5cbi8vIHAwID0gW3V4MCwgdXkwLCB3MF1cbi8vIHAxID0gW3V4MSwgdXkxLCB3MV1cbnZhciBpbnRlcnBvbGF0ZVpvb20gPSBmdW5jdGlvbihwMCwgcDEpIHtcbiAgdmFyIHV4MCA9IHAwWzBdLCB1eTAgPSBwMFsxXSwgdzAgPSBwMFsyXSxcbiAgICAgIHV4MSA9IHAxWzBdLCB1eTEgPSBwMVsxXSwgdzEgPSBwMVsyXSxcbiAgICAgIGR4ID0gdXgxIC0gdXgwLFxuICAgICAgZHkgPSB1eTEgLSB1eTAsXG4gICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5LFxuICAgICAgaSxcbiAgICAgIFM7XG5cbiAgLy8gU3BlY2lhbCBjYXNlIGZvciB1MCDiiYUgdTEuXG4gIGlmIChkMiA8IGVwc2lsb24yKSB7XG4gICAgUyA9IE1hdGgubG9nKHcxIC8gdzApIC8gcmhvO1xuICAgIGkgPSBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gW1xuICAgICAgICB1eDAgKyB0ICogZHgsXG4gICAgICAgIHV5MCArIHQgKiBkeSxcbiAgICAgICAgdzAgKiBNYXRoLmV4cChyaG8gKiB0ICogUylcbiAgICAgIF07XG4gICAgfTtcbiAgfVxuXG4gIC8vIEdlbmVyYWwgY2FzZS5cbiAgZWxzZSB7XG4gICAgdmFyIGQxID0gTWF0aC5zcXJ0KGQyKSxcbiAgICAgICAgYjAgPSAodzEgKiB3MSAtIHcwICogdzAgKyByaG80ICogZDIpIC8gKDIgKiB3MCAqIHJobzIgKiBkMSksXG4gICAgICAgIGIxID0gKHcxICogdzEgLSB3MCAqIHcwIC0gcmhvNCAqIGQyKSAvICgyICogdzEgKiByaG8yICogZDEpLFxuICAgICAgICByMCA9IE1hdGgubG9nKE1hdGguc3FydChiMCAqIGIwICsgMSkgLSBiMCksXG4gICAgICAgIHIxID0gTWF0aC5sb2coTWF0aC5zcXJ0KGIxICogYjEgKyAxKSAtIGIxKTtcbiAgICBTID0gKHIxIC0gcjApIC8gcmhvO1xuICAgIGkgPSBmdW5jdGlvbih0KSB7XG4gICAgICB2YXIgcyA9IHQgKiBTLFxuICAgICAgICAgIGNvc2hyMCA9IGNvc2gocjApLFxuICAgICAgICAgIHUgPSB3MCAvIChyaG8yICogZDEpICogKGNvc2hyMCAqIHRhbmgocmhvICogcyArIHIwKSAtIHNpbmgocjApKTtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIHV4MCArIHUgKiBkeCxcbiAgICAgICAgdXkwICsgdSAqIGR5LFxuICAgICAgICB3MCAqIGNvc2hyMCAvIGNvc2gocmhvICogcyArIHIwKVxuICAgICAgXTtcbiAgICB9O1xuICB9XG5cbiAgaS5kdXJhdGlvbiA9IFMgKiAxMDAwO1xuXG4gIHJldHVybiBpO1xufTtcblxuZnVuY3Rpb24gaHNsJDEoaHVlJCQxKSB7XG4gIHJldHVybiBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgdmFyIGggPSBodWUkJDEoKHN0YXJ0ID0gaHNsKHN0YXJ0KSkuaCwgKGVuZCA9IGhzbChlbmQpKS5oKSxcbiAgICAgICAgcyA9IG5vZ2FtbWEoc3RhcnQucywgZW5kLnMpLFxuICAgICAgICBsID0gbm9nYW1tYShzdGFydC5sLCBlbmQubCksXG4gICAgICAgIG9wYWNpdHkgPSBub2dhbW1hKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgc3RhcnQuaCA9IGgodCk7XG4gICAgICBzdGFydC5zID0gcyh0KTtcbiAgICAgIHN0YXJ0LmwgPSBsKHQpO1xuICAgICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XG4gICAgICByZXR1cm4gc3RhcnQgKyBcIlwiO1xuICAgIH07XG4gIH1cbn1cblxudmFyIGhzbCQyID0gaHNsJDEoaHVlKTtcbnZhciBoc2xMb25nID0gaHNsJDEobm9nYW1tYSk7XG5cbmZ1bmN0aW9uIGxhYiQxKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGwgPSBub2dhbW1hKChzdGFydCA9IGxhYihzdGFydCkpLmwsIChlbmQgPSBsYWIoZW5kKSkubCksXG4gICAgICBhID0gbm9nYW1tYShzdGFydC5hLCBlbmQuYSksXG4gICAgICBiID0gbm9nYW1tYShzdGFydC5iLCBlbmQuYiksXG4gICAgICBvcGFjaXR5ID0gbm9nYW1tYShzdGFydC5vcGFjaXR5LCBlbmQub3BhY2l0eSk7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgc3RhcnQubCA9IGwodCk7XG4gICAgc3RhcnQuYSA9IGEodCk7XG4gICAgc3RhcnQuYiA9IGIodCk7XG4gICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XG4gICAgcmV0dXJuIHN0YXJ0ICsgXCJcIjtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaGNsJDEoaHVlJCQxKSB7XG4gIHJldHVybiBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgdmFyIGggPSBodWUkJDEoKHN0YXJ0ID0gaGNsKHN0YXJ0KSkuaCwgKGVuZCA9IGhjbChlbmQpKS5oKSxcbiAgICAgICAgYyA9IG5vZ2FtbWEoc3RhcnQuYywgZW5kLmMpLFxuICAgICAgICBsID0gbm9nYW1tYShzdGFydC5sLCBlbmQubCksXG4gICAgICAgIG9wYWNpdHkgPSBub2dhbW1hKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgc3RhcnQuaCA9IGgodCk7XG4gICAgICBzdGFydC5jID0gYyh0KTtcbiAgICAgIHN0YXJ0LmwgPSBsKHQpO1xuICAgICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XG4gICAgICByZXR1cm4gc3RhcnQgKyBcIlwiO1xuICAgIH07XG4gIH1cbn1cblxudmFyIGhjbCQyID0gaGNsJDEoaHVlKTtcbnZhciBoY2xMb25nID0gaGNsJDEobm9nYW1tYSk7XG5cbmZ1bmN0aW9uIGN1YmVoZWxpeCQxKGh1ZSQkMSkge1xuICByZXR1cm4gKGZ1bmN0aW9uIGN1YmVoZWxpeEdhbW1hKHkpIHtcbiAgICB5ID0gK3k7XG5cbiAgICBmdW5jdGlvbiBjdWJlaGVsaXgkJDEoc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGggPSBodWUkJDEoKHN0YXJ0ID0gY3ViZWhlbGl4KHN0YXJ0KSkuaCwgKGVuZCA9IGN1YmVoZWxpeChlbmQpKS5oKSxcbiAgICAgICAgICBzID0gbm9nYW1tYShzdGFydC5zLCBlbmQucyksXG4gICAgICAgICAgbCA9IG5vZ2FtbWEoc3RhcnQubCwgZW5kLmwpLFxuICAgICAgICAgIG9wYWNpdHkgPSBub2dhbW1hKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICAgIHN0YXJ0LmggPSBoKHQpO1xuICAgICAgICBzdGFydC5zID0gcyh0KTtcbiAgICAgICAgc3RhcnQubCA9IGwoTWF0aC5wb3codCwgeSkpO1xuICAgICAgICBzdGFydC5vcGFjaXR5ID0gb3BhY2l0eSh0KTtcbiAgICAgICAgcmV0dXJuIHN0YXJ0ICsgXCJcIjtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY3ViZWhlbGl4JCQxLmdhbW1hID0gY3ViZWhlbGl4R2FtbWE7XG5cbiAgICByZXR1cm4gY3ViZWhlbGl4JCQxO1xuICB9KSgxKTtcbn1cblxudmFyIGN1YmVoZWxpeCQyID0gY3ViZWhlbGl4JDEoaHVlKTtcbnZhciBjdWJlaGVsaXhMb25nID0gY3ViZWhlbGl4JDEobm9nYW1tYSk7XG5cbnZhciBxdWFudGl6ZSA9IGZ1bmN0aW9uKGludGVycG9sYXRvciwgbikge1xuICB2YXIgc2FtcGxlcyA9IG5ldyBBcnJheShuKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyArK2kpIHNhbXBsZXNbaV0gPSBpbnRlcnBvbGF0b3IoaSAvIChuIC0gMSkpO1xuICByZXR1cm4gc2FtcGxlcztcbn07XG5cbnZhciBmcmFtZSA9IDA7XG52YXIgdGltZW91dCA9IDA7XG52YXIgaW50ZXJ2YWwgPSAwO1xudmFyIHBva2VEZWxheSA9IDEwMDA7XG52YXIgdGFza0hlYWQ7XG52YXIgdGFza1RhaWw7XG52YXIgY2xvY2tMYXN0ID0gMDtcbnZhciBjbG9ja05vdyA9IDA7XG52YXIgY2xvY2tTa2V3ID0gMDtcbnZhciBjbG9jayA9IHR5cGVvZiBwZXJmb3JtYW5jZSA9PT0gXCJvYmplY3RcIiAmJiBwZXJmb3JtYW5jZS5ub3cgPyBwZXJmb3JtYW5jZSA6IERhdGU7XG52YXIgc2V0RnJhbWUgPSB0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQod2luZG93KSA6IGZ1bmN0aW9uKGYpIHsgc2V0VGltZW91dChmLCAxNyk7IH07XG5cbmZ1bmN0aW9uIG5vdygpIHtcbiAgcmV0dXJuIGNsb2NrTm93IHx8IChzZXRGcmFtZShjbGVhck5vdyksIGNsb2NrTm93ID0gY2xvY2subm93KCkgKyBjbG9ja1NrZXcpO1xufVxuXG5mdW5jdGlvbiBjbGVhck5vdygpIHtcbiAgY2xvY2tOb3cgPSAwO1xufVxuXG5mdW5jdGlvbiBUaW1lcigpIHtcbiAgdGhpcy5fY2FsbCA9XG4gIHRoaXMuX3RpbWUgPVxuICB0aGlzLl9uZXh0ID0gbnVsbDtcbn1cblxuVGltZXIucHJvdG90eXBlID0gdGltZXIucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogVGltZXIsXG4gIHJlc3RhcnQ6IGZ1bmN0aW9uKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcImNhbGxiYWNrIGlzIG5vdCBhIGZ1bmN0aW9uXCIpO1xuICAgIHRpbWUgPSAodGltZSA9PSBudWxsID8gbm93KCkgOiArdGltZSkgKyAoZGVsYXkgPT0gbnVsbCA/IDAgOiArZGVsYXkpO1xuICAgIGlmICghdGhpcy5fbmV4dCAmJiB0YXNrVGFpbCAhPT0gdGhpcykge1xuICAgICAgaWYgKHRhc2tUYWlsKSB0YXNrVGFpbC5fbmV4dCA9IHRoaXM7XG4gICAgICBlbHNlIHRhc2tIZWFkID0gdGhpcztcbiAgICAgIHRhc2tUYWlsID0gdGhpcztcbiAgICB9XG4gICAgdGhpcy5fY2FsbCA9IGNhbGxiYWNrO1xuICAgIHRoaXMuX3RpbWUgPSB0aW1lO1xuICAgIHNsZWVwKCk7XG4gIH0sXG4gIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9jYWxsKSB7XG4gICAgICB0aGlzLl9jYWxsID0gbnVsbDtcbiAgICAgIHRoaXMuX3RpbWUgPSBJbmZpbml0eTtcbiAgICAgIHNsZWVwKCk7XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiB0aW1lcihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgdmFyIHQgPSBuZXcgVGltZXI7XG4gIHQucmVzdGFydChjYWxsYmFjaywgZGVsYXksIHRpbWUpO1xuICByZXR1cm4gdDtcbn1cblxuZnVuY3Rpb24gdGltZXJGbHVzaCgpIHtcbiAgbm93KCk7IC8vIEdldCB0aGUgY3VycmVudCB0aW1lLCBpZiBub3QgYWxyZWFkeSBzZXQuXG4gICsrZnJhbWU7IC8vIFByZXRlbmQgd2XigJl2ZSBzZXQgYW4gYWxhcm0sIGlmIHdlIGhhdmVu4oCZdCBhbHJlYWR5LlxuICB2YXIgdCA9IHRhc2tIZWFkLCBlO1xuICB3aGlsZSAodCkge1xuICAgIGlmICgoZSA9IGNsb2NrTm93IC0gdC5fdGltZSkgPj0gMCkgdC5fY2FsbC5jYWxsKG51bGwsIGUpO1xuICAgIHQgPSB0Ll9uZXh0O1xuICB9XG4gIC0tZnJhbWU7XG59XG5cbmZ1bmN0aW9uIHdha2UoKSB7XG4gIGNsb2NrTm93ID0gKGNsb2NrTGFzdCA9IGNsb2NrLm5vdygpKSArIGNsb2NrU2tldztcbiAgZnJhbWUgPSB0aW1lb3V0ID0gMDtcbiAgdHJ5IHtcbiAgICB0aW1lckZsdXNoKCk7XG4gIH0gZmluYWxseSB7XG4gICAgZnJhbWUgPSAwO1xuICAgIG5hcCgpO1xuICAgIGNsb2NrTm93ID0gMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBwb2tlKCkge1xuICB2YXIgbm93ID0gY2xvY2subm93KCksIGRlbGF5ID0gbm93IC0gY2xvY2tMYXN0O1xuICBpZiAoZGVsYXkgPiBwb2tlRGVsYXkpIGNsb2NrU2tldyAtPSBkZWxheSwgY2xvY2tMYXN0ID0gbm93O1xufVxuXG5mdW5jdGlvbiBuYXAoKSB7XG4gIHZhciB0MCwgdDEgPSB0YXNrSGVhZCwgdDIsIHRpbWUgPSBJbmZpbml0eTtcbiAgd2hpbGUgKHQxKSB7XG4gICAgaWYgKHQxLl9jYWxsKSB7XG4gICAgICBpZiAodGltZSA+IHQxLl90aW1lKSB0aW1lID0gdDEuX3RpbWU7XG4gICAgICB0MCA9IHQxLCB0MSA9IHQxLl9uZXh0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0MiA9IHQxLl9uZXh0LCB0MS5fbmV4dCA9IG51bGw7XG4gICAgICB0MSA9IHQwID8gdDAuX25leHQgPSB0MiA6IHRhc2tIZWFkID0gdDI7XG4gICAgfVxuICB9XG4gIHRhc2tUYWlsID0gdDA7XG4gIHNsZWVwKHRpbWUpO1xufVxuXG5mdW5jdGlvbiBzbGVlcCh0aW1lKSB7XG4gIGlmIChmcmFtZSkgcmV0dXJuOyAvLyBTb29uZXN0IGFsYXJtIGFscmVhZHkgc2V0LCBvciB3aWxsIGJlLlxuICBpZiAodGltZW91dCkgdGltZW91dCA9IGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgdmFyIGRlbGF5ID0gdGltZSAtIGNsb2NrTm93O1xuICBpZiAoZGVsYXkgPiAyNCkge1xuICAgIGlmICh0aW1lIDwgSW5maW5pdHkpIHRpbWVvdXQgPSBzZXRUaW1lb3V0KHdha2UsIGRlbGF5KTtcbiAgICBpZiAoaW50ZXJ2YWwpIGludGVydmFsID0gY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFpbnRlcnZhbCkgY2xvY2tMYXN0ID0gY2xvY2tOb3csIGludGVydmFsID0gc2V0SW50ZXJ2YWwocG9rZSwgcG9rZURlbGF5KTtcbiAgICBmcmFtZSA9IDEsIHNldEZyYW1lKHdha2UpO1xuICB9XG59XG5cbnZhciB0aW1lb3V0JDEgPSBmdW5jdGlvbihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgdmFyIHQgPSBuZXcgVGltZXI7XG4gIGRlbGF5ID0gZGVsYXkgPT0gbnVsbCA/IDAgOiArZGVsYXk7XG4gIHQucmVzdGFydChmdW5jdGlvbihlbGFwc2VkKSB7XG4gICAgdC5zdG9wKCk7XG4gICAgY2FsbGJhY2soZWxhcHNlZCArIGRlbGF5KTtcbiAgfSwgZGVsYXksIHRpbWUpO1xuICByZXR1cm4gdDtcbn07XG5cbnZhciBpbnRlcnZhbCQxID0gZnVuY3Rpb24oY2FsbGJhY2ssIGRlbGF5LCB0aW1lKSB7XG4gIHZhciB0ID0gbmV3IFRpbWVyLCB0b3RhbCA9IGRlbGF5O1xuICBpZiAoZGVsYXkgPT0gbnVsbCkgcmV0dXJuIHQucmVzdGFydChjYWxsYmFjaywgZGVsYXksIHRpbWUpLCB0O1xuICBkZWxheSA9ICtkZWxheSwgdGltZSA9IHRpbWUgPT0gbnVsbCA/IG5vdygpIDogK3RpbWU7XG4gIHQucmVzdGFydChmdW5jdGlvbiB0aWNrKGVsYXBzZWQpIHtcbiAgICBlbGFwc2VkICs9IHRvdGFsO1xuICAgIHQucmVzdGFydCh0aWNrLCB0b3RhbCArPSBkZWxheSwgdGltZSk7XG4gICAgY2FsbGJhY2soZWxhcHNlZCk7XG4gIH0sIGRlbGF5LCB0aW1lKTtcbiAgcmV0dXJuIHQ7XG59O1xuXG52YXIgZW1wdHlPbiA9IGRpc3BhdGNoKFwic3RhcnRcIiwgXCJlbmRcIiwgXCJpbnRlcnJ1cHRcIik7XG52YXIgZW1wdHlUd2VlbiA9IFtdO1xuXG52YXIgQ1JFQVRFRCA9IDA7XG52YXIgU0NIRURVTEVEID0gMTtcbnZhciBTVEFSVElORyA9IDI7XG52YXIgU1RBUlRFRCA9IDM7XG52YXIgUlVOTklORyA9IDQ7XG52YXIgRU5ESU5HID0gNTtcbnZhciBFTkRFRCA9IDY7XG5cbnZhciBzY2hlZHVsZSA9IGZ1bmN0aW9uKG5vZGUsIG5hbWUsIGlkLCBpbmRleCwgZ3JvdXAsIHRpbWluZykge1xuICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb247XG4gIGlmICghc2NoZWR1bGVzKSBub2RlLl9fdHJhbnNpdGlvbiA9IHt9O1xuICBlbHNlIGlmIChpZCBpbiBzY2hlZHVsZXMpIHJldHVybjtcbiAgY3JlYXRlKG5vZGUsIGlkLCB7XG4gICAgbmFtZTogbmFtZSxcbiAgICBpbmRleDogaW5kZXgsIC8vIEZvciBjb250ZXh0IGR1cmluZyBjYWxsYmFjay5cbiAgICBncm91cDogZ3JvdXAsIC8vIEZvciBjb250ZXh0IGR1cmluZyBjYWxsYmFjay5cbiAgICBvbjogZW1wdHlPbixcbiAgICB0d2VlbjogZW1wdHlUd2VlbixcbiAgICB0aW1lOiB0aW1pbmcudGltZSxcbiAgICBkZWxheTogdGltaW5nLmRlbGF5LFxuICAgIGR1cmF0aW9uOiB0aW1pbmcuZHVyYXRpb24sXG4gICAgZWFzZTogdGltaW5nLmVhc2UsXG4gICAgdGltZXI6IG51bGwsXG4gICAgc3RhdGU6IENSRUFURURcbiAgfSk7XG59O1xuXG5mdW5jdGlvbiBpbml0KG5vZGUsIGlkKSB7XG4gIHZhciBzY2hlZHVsZSA9IG5vZGUuX190cmFuc2l0aW9uO1xuICBpZiAoIXNjaGVkdWxlIHx8ICEoc2NoZWR1bGUgPSBzY2hlZHVsZVtpZF0pIHx8IHNjaGVkdWxlLnN0YXRlID4gQ1JFQVRFRCkgdGhyb3cgbmV3IEVycm9yKFwidG9vIGxhdGVcIik7XG4gIHJldHVybiBzY2hlZHVsZTtcbn1cblxuZnVuY3Rpb24gc2V0JDEobm9kZSwgaWQpIHtcbiAgdmFyIHNjaGVkdWxlID0gbm9kZS5fX3RyYW5zaXRpb247XG4gIGlmICghc2NoZWR1bGUgfHwgIShzY2hlZHVsZSA9IHNjaGVkdWxlW2lkXSkgfHwgc2NoZWR1bGUuc3RhdGUgPiBTVEFSVElORykgdGhyb3cgbmV3IEVycm9yKFwidG9vIGxhdGVcIik7XG4gIHJldHVybiBzY2hlZHVsZTtcbn1cblxuZnVuY3Rpb24gZ2V0JDEobm9kZSwgaWQpIHtcbiAgdmFyIHNjaGVkdWxlID0gbm9kZS5fX3RyYW5zaXRpb247XG4gIGlmICghc2NoZWR1bGUgfHwgIShzY2hlZHVsZSA9IHNjaGVkdWxlW2lkXSkpIHRocm93IG5ldyBFcnJvcihcInRvbyBsYXRlXCIpO1xuICByZXR1cm4gc2NoZWR1bGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZShub2RlLCBpZCwgc2VsZikge1xuICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb24sXG4gICAgICB0d2VlbjtcblxuICAvLyBJbml0aWFsaXplIHRoZSBzZWxmIHRpbWVyIHdoZW4gdGhlIHRyYW5zaXRpb24gaXMgY3JlYXRlZC5cbiAgLy8gTm90ZSB0aGUgYWN0dWFsIGRlbGF5IGlzIG5vdCBrbm93biB1bnRpbCB0aGUgZmlyc3QgY2FsbGJhY2shXG4gIHNjaGVkdWxlc1tpZF0gPSBzZWxmO1xuICBzZWxmLnRpbWVyID0gdGltZXIoc2NoZWR1bGUsIDAsIHNlbGYudGltZSk7XG5cbiAgZnVuY3Rpb24gc2NoZWR1bGUoZWxhcHNlZCkge1xuICAgIHNlbGYuc3RhdGUgPSBTQ0hFRFVMRUQ7XG4gICAgc2VsZi50aW1lci5yZXN0YXJ0KHN0YXJ0LCBzZWxmLmRlbGF5LCBzZWxmLnRpbWUpO1xuXG4gICAgLy8gSWYgdGhlIGVsYXBzZWQgZGVsYXkgaXMgbGVzcyB0aGFuIG91ciBmaXJzdCBzbGVlcCwgc3RhcnQgaW1tZWRpYXRlbHkuXG4gICAgaWYgKHNlbGYuZGVsYXkgPD0gZWxhcHNlZCkgc3RhcnQoZWxhcHNlZCAtIHNlbGYuZGVsYXkpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RhcnQoZWxhcHNlZCkge1xuICAgIHZhciBpLCBqLCBuLCBvO1xuXG4gICAgLy8gSWYgdGhlIHN0YXRlIGlzIG5vdCBTQ0hFRFVMRUQsIHRoZW4gd2UgcHJldmlvdXNseSBlcnJvcmVkIG9uIHN0YXJ0LlxuICAgIGlmIChzZWxmLnN0YXRlICE9PSBTQ0hFRFVMRUQpIHJldHVybiBzdG9wKCk7XG5cbiAgICBmb3IgKGkgaW4gc2NoZWR1bGVzKSB7XG4gICAgICBvID0gc2NoZWR1bGVzW2ldO1xuICAgICAgaWYgKG8ubmFtZSAhPT0gc2VsZi5uYW1lKSBjb250aW51ZTtcblxuICAgICAgLy8gV2hpbGUgdGhpcyBlbGVtZW50IGFscmVhZHkgaGFzIGEgc3RhcnRpbmcgdHJhbnNpdGlvbiBkdXJpbmcgdGhpcyBmcmFtZSxcbiAgICAgIC8vIGRlZmVyIHN0YXJ0aW5nIGFuIGludGVycnVwdGluZyB0cmFuc2l0aW9uIHVudGlsIHRoYXQgdHJhbnNpdGlvbiBoYXMgYVxuICAgICAgLy8gY2hhbmNlIHRvIHRpY2sgKGFuZCBwb3NzaWJseSBlbmQpOyBzZWUgZDMvZDMtdHJhbnNpdGlvbiM1NCFcbiAgICAgIGlmIChvLnN0YXRlID09PSBTVEFSVEVEKSByZXR1cm4gdGltZW91dCQxKHN0YXJ0KTtcblxuICAgICAgLy8gSW50ZXJydXB0IHRoZSBhY3RpdmUgdHJhbnNpdGlvbiwgaWYgYW55LlxuICAgICAgLy8gRGlzcGF0Y2ggdGhlIGludGVycnVwdCBldmVudC5cbiAgICAgIGlmIChvLnN0YXRlID09PSBSVU5OSU5HKSB7XG4gICAgICAgIG8uc3RhdGUgPSBFTkRFRDtcbiAgICAgICAgby50aW1lci5zdG9wKCk7XG4gICAgICAgIG8ub24uY2FsbChcImludGVycnVwdFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBvLmluZGV4LCBvLmdyb3VwKTtcbiAgICAgICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2FuY2VsIGFueSBwcmUtZW1wdGVkIHRyYW5zaXRpb25zLiBObyBpbnRlcnJ1cHQgZXZlbnQgaXMgZGlzcGF0Y2hlZFxuICAgICAgLy8gYmVjYXVzZSB0aGUgY2FuY2VsbGVkIHRyYW5zaXRpb25zIG5ldmVyIHN0YXJ0ZWQuIE5vdGUgdGhhdCB0aGlzIGFsc29cbiAgICAgIC8vIHJlbW92ZXMgdGhpcyB0cmFuc2l0aW9uIGZyb20gdGhlIHBlbmRpbmcgbGlzdCFcbiAgICAgIGVsc2UgaWYgKCtpIDwgaWQpIHtcbiAgICAgICAgby5zdGF0ZSA9IEVOREVEO1xuICAgICAgICBvLnRpbWVyLnN0b3AoKTtcbiAgICAgICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBEZWZlciB0aGUgZmlyc3QgdGljayB0byBlbmQgb2YgdGhlIGN1cnJlbnQgZnJhbWU7IHNlZSBkMy9kMyMxNTc2LlxuICAgIC8vIE5vdGUgdGhlIHRyYW5zaXRpb24gbWF5IGJlIGNhbmNlbGVkIGFmdGVyIHN0YXJ0IGFuZCBiZWZvcmUgdGhlIGZpcnN0IHRpY2shXG4gICAgLy8gTm90ZSB0aGlzIG11c3QgYmUgc2NoZWR1bGVkIGJlZm9yZSB0aGUgc3RhcnQgZXZlbnQ7IHNlZSBkMy9kMy10cmFuc2l0aW9uIzE2IVxuICAgIC8vIEFzc3VtaW5nIHRoaXMgaXMgc3VjY2Vzc2Z1bCwgc3Vic2VxdWVudCBjYWxsYmFja3MgZ28gc3RyYWlnaHQgdG8gdGljay5cbiAgICB0aW1lb3V0JDEoZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoc2VsZi5zdGF0ZSA9PT0gU1RBUlRFRCkge1xuICAgICAgICBzZWxmLnN0YXRlID0gUlVOTklORztcbiAgICAgICAgc2VsZi50aW1lci5yZXN0YXJ0KHRpY2ssIHNlbGYuZGVsYXksIHNlbGYudGltZSk7XG4gICAgICAgIHRpY2soZWxhcHNlZCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBEaXNwYXRjaCB0aGUgc3RhcnQgZXZlbnQuXG4gICAgLy8gTm90ZSB0aGlzIG11c3QgYmUgZG9uZSBiZWZvcmUgdGhlIHR3ZWVuIGFyZSBpbml0aWFsaXplZC5cbiAgICBzZWxmLnN0YXRlID0gU1RBUlRJTkc7XG4gICAgc2VsZi5vbi5jYWxsKFwic3RhcnRcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgc2VsZi5pbmRleCwgc2VsZi5ncm91cCk7XG4gICAgaWYgKHNlbGYuc3RhdGUgIT09IFNUQVJUSU5HKSByZXR1cm47IC8vIGludGVycnVwdGVkXG4gICAgc2VsZi5zdGF0ZSA9IFNUQVJURUQ7XG5cbiAgICAvLyBJbml0aWFsaXplIHRoZSB0d2VlbiwgZGVsZXRpbmcgbnVsbCB0d2Vlbi5cbiAgICB0d2VlbiA9IG5ldyBBcnJheShuID0gc2VsZi50d2Vlbi5sZW5ndGgpO1xuICAgIGZvciAoaSA9IDAsIGogPSAtMTsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG8gPSBzZWxmLnR3ZWVuW2ldLnZhbHVlLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgc2VsZi5pbmRleCwgc2VsZi5ncm91cCkpIHtcbiAgICAgICAgdHdlZW5bKytqXSA9IG87XG4gICAgICB9XG4gICAgfVxuICAgIHR3ZWVuLmxlbmd0aCA9IGogKyAxO1xuICB9XG5cbiAgZnVuY3Rpb24gdGljayhlbGFwc2VkKSB7XG4gICAgdmFyIHQgPSBlbGFwc2VkIDwgc2VsZi5kdXJhdGlvbiA/IHNlbGYuZWFzZS5jYWxsKG51bGwsIGVsYXBzZWQgLyBzZWxmLmR1cmF0aW9uKSA6IChzZWxmLnRpbWVyLnJlc3RhcnQoc3RvcCksIHNlbGYuc3RhdGUgPSBFTkRJTkcsIDEpLFxuICAgICAgICBpID0gLTEsXG4gICAgICAgIG4gPSB0d2Vlbi5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgdHdlZW5baV0uY2FsbChudWxsLCB0KTtcbiAgICB9XG5cbiAgICAvLyBEaXNwYXRjaCB0aGUgZW5kIGV2ZW50LlxuICAgIGlmIChzZWxmLnN0YXRlID09PSBFTkRJTkcpIHtcbiAgICAgIHNlbGYub24uY2FsbChcImVuZFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBzZWxmLmluZGV4LCBzZWxmLmdyb3VwKTtcbiAgICAgIHN0b3AoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzdG9wKCkge1xuICAgIHNlbGYuc3RhdGUgPSBFTkRFRDtcbiAgICBzZWxmLnRpbWVyLnN0b3AoKTtcbiAgICBkZWxldGUgc2NoZWR1bGVzW2lkXTtcbiAgICBmb3IgKHZhciBpIGluIHNjaGVkdWxlcykgcmV0dXJuOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgZGVsZXRlIG5vZGUuX190cmFuc2l0aW9uO1xuICB9XG59XG5cbnZhciBpbnRlcnJ1cHQgPSBmdW5jdGlvbihub2RlLCBuYW1lKSB7XG4gIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbixcbiAgICAgIHNjaGVkdWxlJCQxLFxuICAgICAgYWN0aXZlLFxuICAgICAgZW1wdHkgPSB0cnVlLFxuICAgICAgaTtcblxuICBpZiAoIXNjaGVkdWxlcykgcmV0dXJuO1xuXG4gIG5hbWUgPSBuYW1lID09IG51bGwgPyBudWxsIDogbmFtZSArIFwiXCI7XG5cbiAgZm9yIChpIGluIHNjaGVkdWxlcykge1xuICAgIGlmICgoc2NoZWR1bGUkJDEgPSBzY2hlZHVsZXNbaV0pLm5hbWUgIT09IG5hbWUpIHsgZW1wdHkgPSBmYWxzZTsgY29udGludWU7IH1cbiAgICBhY3RpdmUgPSBzY2hlZHVsZSQkMS5zdGF0ZSA+IFNUQVJUSU5HICYmIHNjaGVkdWxlJCQxLnN0YXRlIDwgRU5ESU5HO1xuICAgIHNjaGVkdWxlJCQxLnN0YXRlID0gRU5ERUQ7XG4gICAgc2NoZWR1bGUkJDEudGltZXIuc3RvcCgpO1xuICAgIGlmIChhY3RpdmUpIHNjaGVkdWxlJCQxLm9uLmNhbGwoXCJpbnRlcnJ1cHRcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgc2NoZWR1bGUkJDEuaW5kZXgsIHNjaGVkdWxlJCQxLmdyb3VwKTtcbiAgICBkZWxldGUgc2NoZWR1bGVzW2ldO1xuICB9XG5cbiAgaWYgKGVtcHR5KSBkZWxldGUgbm9kZS5fX3RyYW5zaXRpb247XG59O1xuXG52YXIgc2VsZWN0aW9uX2ludGVycnVwdCA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICBpbnRlcnJ1cHQodGhpcywgbmFtZSk7XG4gIH0pO1xufTtcblxuZnVuY3Rpb24gdHdlZW5SZW1vdmUoaWQsIG5hbWUpIHtcbiAgdmFyIHR3ZWVuMCwgdHdlZW4xO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlJCQxID0gc2V0JDEodGhpcywgaWQpLFxuICAgICAgICB0d2VlbiA9IHNjaGVkdWxlJCQxLnR3ZWVuO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCB0d2VlbiB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCB0d2VlbiBhbmQgd2XigJlyZSBkb25lIVxuICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cbiAgICBpZiAodHdlZW4gIT09IHR3ZWVuMCkge1xuICAgICAgdHdlZW4xID0gdHdlZW4wID0gdHdlZW47XG4gICAgICBmb3IgKHZhciBpID0gMCwgbiA9IHR3ZWVuMS5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKHR3ZWVuMVtpXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgICAgdHdlZW4xID0gdHdlZW4xLnNsaWNlKCk7XG4gICAgICAgICAgdHdlZW4xLnNwbGljZShpLCAxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHNjaGVkdWxlJCQxLnR3ZWVuID0gdHdlZW4xO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0d2VlbkZ1bmN0aW9uKGlkLCBuYW1lLCB2YWx1ZSkge1xuICB2YXIgdHdlZW4wLCB0d2VlbjE7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlJCQxID0gc2V0JDEodGhpcywgaWQpLFxuICAgICAgICB0d2VlbiA9IHNjaGVkdWxlJCQxLnR3ZWVuO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCB0d2VlbiB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCB0d2VlbiBhbmQgd2XigJlyZSBkb25lIVxuICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cbiAgICBpZiAodHdlZW4gIT09IHR3ZWVuMCkge1xuICAgICAgdHdlZW4xID0gKHR3ZWVuMCA9IHR3ZWVuKS5zbGljZSgpO1xuICAgICAgZm9yICh2YXIgdCA9IHtuYW1lOiBuYW1lLCB2YWx1ZTogdmFsdWV9LCBpID0gMCwgbiA9IHR3ZWVuMS5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKHR3ZWVuMVtpXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgICAgdHdlZW4xW2ldID0gdDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGkgPT09IG4pIHR3ZWVuMS5wdXNoKHQpO1xuICAgIH1cblxuICAgIHNjaGVkdWxlJCQxLnR3ZWVuID0gdHdlZW4xO1xuICB9O1xufVxuXG52YXIgdHJhbnNpdGlvbl90d2VlbiA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIG5hbWUgKz0gXCJcIjtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgdHdlZW4gPSBnZXQkMSh0aGlzLm5vZGUoKSwgaWQpLnR3ZWVuO1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gdHdlZW4ubGVuZ3RoLCB0OyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKHQgPSB0d2VlbltpXSkubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICByZXR1cm4gdC52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsID8gdHdlZW5SZW1vdmUgOiB0d2VlbkZ1bmN0aW9uKShpZCwgbmFtZSwgdmFsdWUpKTtcbn07XG5cbmZ1bmN0aW9uIHR3ZWVuVmFsdWUodHJhbnNpdGlvbiwgbmFtZSwgdmFsdWUpIHtcbiAgdmFyIGlkID0gdHJhbnNpdGlvbi5faWQ7XG5cbiAgdHJhbnNpdGlvbi5lYWNoKGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSQkMSA9IHNldCQxKHRoaXMsIGlkKTtcbiAgICAoc2NoZWR1bGUkJDEudmFsdWUgfHwgKHNjaGVkdWxlJCQxLnZhbHVlID0ge30pKVtuYW1lXSA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH0pO1xuXG4gIHJldHVybiBmdW5jdGlvbihub2RlKSB7XG4gICAgcmV0dXJuIGdldCQxKG5vZGUsIGlkKS52YWx1ZVtuYW1lXTtcbiAgfTtcbn1cblxudmFyIGludGVycG9sYXRlID0gZnVuY3Rpb24oYSwgYikge1xuICB2YXIgYztcbiAgcmV0dXJuICh0eXBlb2YgYiA9PT0gXCJudW1iZXJcIiA/IHJlaW50ZXJwb2xhdGVcbiAgICAgIDogYiBpbnN0YW5jZW9mIGNvbG9yID8gaW50ZXJwb2xhdGVSZ2JcbiAgICAgIDogKGMgPSBjb2xvcihiKSkgPyAoYiA9IGMsIGludGVycG9sYXRlUmdiKVxuICAgICAgOiBpbnRlcnBvbGF0ZVN0cmluZykoYSwgYik7XG59O1xuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlJDEobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJSZW1vdmVOUyQxKGZ1bGxuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudCQxKG5hbWUsIGludGVycG9sYXRlJCQxLCB2YWx1ZTEpIHtcbiAgdmFyIHZhbHVlMDAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUwID0gdGhpcy5nZXRBdHRyaWJ1dGUobmFtZSk7XG4gICAgcmV0dXJuIHZhbHVlMCA9PT0gdmFsdWUxID8gbnVsbFxuICAgICAgICA6IHZhbHVlMCA9PT0gdmFsdWUwMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlJCQxKHZhbHVlMDAgPSB2YWx1ZTAsIHZhbHVlMSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudE5TJDEoZnVsbG5hbWUsIGludGVycG9sYXRlJCQxLCB2YWx1ZTEpIHtcbiAgdmFyIHZhbHVlMDAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUwID0gdGhpcy5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIHJldHVybiB2YWx1ZTAgPT09IHZhbHVlMSA/IG51bGxcbiAgICAgICAgOiB2YWx1ZTAgPT09IHZhbHVlMDAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZSQkMSh2YWx1ZTAwID0gdmFsdWUwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb24kMShuYW1lLCBpbnRlcnBvbGF0ZSQkMSwgdmFsdWUpIHtcbiAgdmFyIHZhbHVlMDAsXG4gICAgICB2YWx1ZTEwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlMCwgdmFsdWUxID0gdmFsdWUodGhpcyk7XG4gICAgaWYgKHZhbHVlMSA9PSBudWxsKSByZXR1cm4gdm9pZCB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICB2YWx1ZTAgPSB0aGlzLmdldEF0dHJpYnV0ZShuYW1lKTtcbiAgICByZXR1cm4gdmFsdWUwID09PSB2YWx1ZTEgPyBudWxsXG4gICAgICAgIDogdmFsdWUwID09PSB2YWx1ZTAwICYmIHZhbHVlMSA9PT0gdmFsdWUxMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlJCQxKHZhbHVlMDAgPSB2YWx1ZTAsIHZhbHVlMTAgPSB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb25OUyQxKGZ1bGxuYW1lLCBpbnRlcnBvbGF0ZSQkMSwgdmFsdWUpIHtcbiAgdmFyIHZhbHVlMDAsXG4gICAgICB2YWx1ZTEwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlMCwgdmFsdWUxID0gdmFsdWUodGhpcyk7XG4gICAgaWYgKHZhbHVlMSA9PSBudWxsKSByZXR1cm4gdm9pZCB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgdmFsdWUwID0gdGhpcy5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIHJldHVybiB2YWx1ZTAgPT09IHZhbHVlMSA/IG51bGxcbiAgICAgICAgOiB2YWx1ZTAgPT09IHZhbHVlMDAgJiYgdmFsdWUxID09PSB2YWx1ZTEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUkJDEodmFsdWUwMCA9IHZhbHVlMCwgdmFsdWUxMCA9IHZhbHVlMSk7XG4gIH07XG59XG5cbnZhciB0cmFuc2l0aW9uX2F0dHIgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSksIGkgPSBmdWxsbmFtZSA9PT0gXCJ0cmFuc2Zvcm1cIiA/IGludGVycG9sYXRlVHJhbnNmb3JtU3ZnIDogaW50ZXJwb2xhdGU7XG4gIHJldHVybiB0aGlzLmF0dHJUd2VlbihuYW1lLCB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyRnVuY3Rpb25OUyQxIDogYXR0ckZ1bmN0aW9uJDEpKGZ1bGxuYW1lLCBpLCB0d2VlblZhbHVlKHRoaXMsIFwiYXR0ci5cIiArIG5hbWUsIHZhbHVlKSlcbiAgICAgIDogdmFsdWUgPT0gbnVsbCA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJSZW1vdmVOUyQxIDogYXR0clJlbW92ZSQxKShmdWxsbmFtZSlcbiAgICAgIDogKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckNvbnN0YW50TlMkMSA6IGF0dHJDb25zdGFudCQxKShmdWxsbmFtZSwgaSwgdmFsdWUgKyBcIlwiKSk7XG59O1xuXG5mdW5jdGlvbiBhdHRyVHdlZW5OUyhmdWxsbmFtZSwgdmFsdWUpIHtcbiAgZnVuY3Rpb24gdHdlZW4oKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLCBpID0gdmFsdWUuYXBwbHkobm9kZSwgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gaSAmJiBmdW5jdGlvbih0KSB7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCwgaSh0KSk7XG4gICAgfTtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5mdW5jdGlvbiBhdHRyVHdlZW4obmFtZSwgdmFsdWUpIHtcbiAgZnVuY3Rpb24gdHdlZW4oKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLCBpID0gdmFsdWUuYXBwbHkobm9kZSwgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gaSAmJiBmdW5jdGlvbih0KSB7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZShuYW1lLCBpKHQpKTtcbiAgICB9O1xuICB9XG4gIHR3ZWVuLl92YWx1ZSA9IHZhbHVlO1xuICByZXR1cm4gdHdlZW47XG59XG5cbnZhciB0cmFuc2l0aW9uX2F0dHJUd2VlbiA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBrZXkgPSBcImF0dHIuXCIgKyBuYW1lO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHJldHVybiAoa2V5ID0gdGhpcy50d2VlbihrZXkpKSAmJiBrZXkuX3ZhbHVlO1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCBudWxsKTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcbiAgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCAoZnVsbG5hbWUubG9jYWwgPyBhdHRyVHdlZW5OUyA6IGF0dHJUd2VlbikoZnVsbG5hbWUsIHZhbHVlKSk7XG59O1xuXG5mdW5jdGlvbiBkZWxheUZ1bmN0aW9uKGlkLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgaW5pdCh0aGlzLCBpZCkuZGVsYXkgPSArdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZGVsYXlDb25zdGFudChpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID0gK3ZhbHVlLCBmdW5jdGlvbigpIHtcbiAgICBpbml0KHRoaXMsIGlkKS5kZWxheSA9IHZhbHVlO1xuICB9O1xufVxuXG52YXIgdHJhbnNpdGlvbl9kZWxheSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGRlbGF5RnVuY3Rpb25cbiAgICAgICAgICA6IGRlbGF5Q29uc3RhbnQpKGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCQxKHRoaXMubm9kZSgpLCBpZCkuZGVsYXk7XG59O1xuXG5mdW5jdGlvbiBkdXJhdGlvbkZ1bmN0aW9uKGlkLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgc2V0JDEodGhpcywgaWQpLmR1cmF0aW9uID0gK3ZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGR1cmF0aW9uQ29uc3RhbnQoaWQsIHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9ICt2YWx1ZSwgZnVuY3Rpb24oKSB7XG4gICAgc2V0JDEodGhpcywgaWQpLmR1cmF0aW9uID0gdmFsdWU7XG4gIH07XG59XG5cbnZhciB0cmFuc2l0aW9uX2R1cmF0aW9uID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKCh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gZHVyYXRpb25GdW5jdGlvblxuICAgICAgICAgIDogZHVyYXRpb25Db25zdGFudCkoaWQsIHZhbHVlKSlcbiAgICAgIDogZ2V0JDEodGhpcy5ub2RlKCksIGlkKS5kdXJhdGlvbjtcbn07XG5cbmZ1bmN0aW9uIGVhc2VDb25zdGFudChpZCwgdmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBzZXQkMSh0aGlzLCBpZCkuZWFzZSA9IHZhbHVlO1xuICB9O1xufVxuXG52YXIgdHJhbnNpdGlvbl9lYXNlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKGVhc2VDb25zdGFudChpZCwgdmFsdWUpKVxuICAgICAgOiBnZXQkMSh0aGlzLm5vZGUoKSwgaWQpLmVhc2U7XG59O1xuXG52YXIgdHJhbnNpdGlvbl9maWx0ZXIgPSBmdW5jdGlvbihtYXRjaCkge1xuICBpZiAodHlwZW9mIG1hdGNoICE9PSBcImZ1bmN0aW9uXCIpIG1hdGNoID0gbWF0Y2hlciQxKG1hdGNoKTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHN1Ymdyb3VwID0gc3ViZ3JvdXBzW2pdID0gW10sIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgbWF0Y2guY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpIHtcbiAgICAgICAgc3ViZ3JvdXAucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCB0aGlzLl9uYW1lLCB0aGlzLl9pZCk7XG59O1xuXG52YXIgdHJhbnNpdGlvbl9tZXJnZSA9IGZ1bmN0aW9uKHRyYW5zaXRpb24kJDEpIHtcbiAgaWYgKHRyYW5zaXRpb24kJDEuX2lkICE9PSB0aGlzLl9pZCkgdGhyb3cgbmV3IEVycm9yO1xuXG4gIGZvciAodmFyIGdyb3VwczAgPSB0aGlzLl9ncm91cHMsIGdyb3VwczEgPSB0cmFuc2l0aW9uJCQxLl9ncm91cHMsIG0wID0gZ3JvdXBzMC5sZW5ndGgsIG0xID0gZ3JvdXBzMS5sZW5ndGgsIG0gPSBNYXRoLm1pbihtMCwgbTEpLCBtZXJnZXMgPSBuZXcgQXJyYXkobTApLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwMCA9IGdyb3VwczBbal0sIGdyb3VwMSA9IGdyb3VwczFbal0sIG4gPSBncm91cDAubGVuZ3RoLCBtZXJnZSA9IG1lcmdlc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXAwW2ldIHx8IGdyb3VwMVtpXSkge1xuICAgICAgICBtZXJnZVtpXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9yICg7IGogPCBtMDsgKytqKSB7XG4gICAgbWVyZ2VzW2pdID0gZ3JvdXBzMFtqXTtcbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihtZXJnZXMsIHRoaXMuX3BhcmVudHMsIHRoaXMuX25hbWUsIHRoaXMuX2lkKTtcbn07XG5cbmZ1bmN0aW9uIHN0YXJ0KG5hbWUpIHtcbiAgcmV0dXJuIChuYW1lICsgXCJcIikudHJpbSgpLnNwbGl0KC9efFxccysvKS5ldmVyeShmdW5jdGlvbih0KSB7XG4gICAgdmFyIGkgPSB0LmluZGV4T2YoXCIuXCIpO1xuICAgIGlmIChpID49IDApIHQgPSB0LnNsaWNlKDAsIGkpO1xuICAgIHJldHVybiAhdCB8fCB0ID09PSBcInN0YXJ0XCI7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBvbkZ1bmN0aW9uKGlkLCBuYW1lLCBsaXN0ZW5lcikge1xuICB2YXIgb24wLCBvbjEsIHNpdCA9IHN0YXJ0KG5hbWUpID8gaW5pdCA6IHNldCQxO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlJCQxID0gc2l0KHRoaXMsIGlkKSxcbiAgICAgICAgb24gPSBzY2hlZHVsZSQkMS5vbjtcblxuICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgYSBkaXNwYXRjaCB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCBkaXNwYXRjaCBhbmQgd2XigJlyZSBkb25lIVxuICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cbiAgICBpZiAob24gIT09IG9uMCkgKG9uMSA9IChvbjAgPSBvbikuY29weSgpKS5vbihuYW1lLCBsaXN0ZW5lcik7XG5cbiAgICBzY2hlZHVsZSQkMS5vbiA9IG9uMTtcbiAgfTtcbn1cblxudmFyIHRyYW5zaXRpb25fb24gPSBmdW5jdGlvbihuYW1lLCBsaXN0ZW5lcikge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDJcbiAgICAgID8gZ2V0JDEodGhpcy5ub2RlKCksIGlkKS5vbi5vbihuYW1lKVxuICAgICAgOiB0aGlzLmVhY2gob25GdW5jdGlvbihpZCwgbmFtZSwgbGlzdGVuZXIpKTtcbn07XG5cbmZ1bmN0aW9uIHJlbW92ZUZ1bmN0aW9uKGlkKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICAgIGZvciAodmFyIGkgaW4gdGhpcy5fX3RyYW5zaXRpb24pIGlmICgraSAhPT0gaWQpIHJldHVybjtcbiAgICBpZiAocGFyZW50KSBwYXJlbnQucmVtb3ZlQ2hpbGQodGhpcyk7XG4gIH07XG59XG5cbnZhciB0cmFuc2l0aW9uX3JlbW92ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5vbihcImVuZC5yZW1vdmVcIiwgcmVtb3ZlRnVuY3Rpb24odGhpcy5faWQpKTtcbn07XG5cbnZhciB0cmFuc2l0aW9uX3NlbGVjdCA9IGZ1bmN0aW9uKHNlbGVjdCQkMSkge1xuICB2YXIgbmFtZSA9IHRoaXMuX25hbWUsXG4gICAgICBpZCA9IHRoaXMuX2lkO1xuXG4gIGlmICh0eXBlb2Ygc2VsZWN0JCQxICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCQkMSA9IHNlbGVjdG9yKHNlbGVjdCQkMSk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgc3Vibm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAoc3Vibm9kZSA9IHNlbGVjdCQkMS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkpIHtcbiAgICAgICAgaWYgKFwiX19kYXRhX19cIiBpbiBub2RlKSBzdWJub2RlLl9fZGF0YV9fID0gbm9kZS5fX2RhdGFfXztcbiAgICAgICAgc3ViZ3JvdXBbaV0gPSBzdWJub2RlO1xuICAgICAgICBzY2hlZHVsZShzdWJncm91cFtpXSwgbmFtZSwgaWQsIGksIHN1Ymdyb3VwLCBnZXQkMShub2RlLCBpZCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMsIG5hbWUsIGlkKTtcbn07XG5cbnZhciB0cmFuc2l0aW9uX3NlbGVjdEFsbCA9IGZ1bmN0aW9uKHNlbGVjdCQkMSkge1xuICB2YXIgbmFtZSA9IHRoaXMuX25hbWUsXG4gICAgICBpZCA9IHRoaXMuX2lkO1xuXG4gIGlmICh0eXBlb2Ygc2VsZWN0JCQxICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCQkMSA9IHNlbGVjdG9yQWxsKHNlbGVjdCQkMSk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gW10sIHBhcmVudHMgPSBbXSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgZm9yICh2YXIgY2hpbGRyZW4gPSBzZWxlY3QkJDEuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCksIGNoaWxkLCBpbmhlcml0ID0gZ2V0JDEobm9kZSwgaWQpLCBrID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgayA8IGw7ICsraykge1xuICAgICAgICAgIGlmIChjaGlsZCA9IGNoaWxkcmVuW2tdKSB7XG4gICAgICAgICAgICBzY2hlZHVsZShjaGlsZCwgbmFtZSwgaWQsIGssIGNoaWxkcmVuLCBpbmhlcml0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3ViZ3JvdXBzLnB1c2goY2hpbGRyZW4pO1xuICAgICAgICBwYXJlbnRzLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKHN1Ymdyb3VwcywgcGFyZW50cywgbmFtZSwgaWQpO1xufTtcblxudmFyIFNlbGVjdGlvbiQxID0gc2VsZWN0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvcjtcblxudmFyIHRyYW5zaXRpb25fc2VsZWN0aW9uID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uJDEodGhpcy5fZ3JvdXBzLCB0aGlzLl9wYXJlbnRzKTtcbn07XG5cbmZ1bmN0aW9uIHN0eWxlUmVtb3ZlJDEobmFtZSwgaW50ZXJwb2xhdGUkJDEpIHtcbiAgdmFyIHZhbHVlMDAsXG4gICAgICB2YWx1ZTEwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlMCA9IHN0eWxlVmFsdWUodGhpcywgbmFtZSksXG4gICAgICAgIHZhbHVlMSA9ICh0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpLCBzdHlsZVZhbHVlKHRoaXMsIG5hbWUpKTtcbiAgICByZXR1cm4gdmFsdWUwID09PSB2YWx1ZTEgPyBudWxsXG4gICAgICAgIDogdmFsdWUwID09PSB2YWx1ZTAwICYmIHZhbHVlMSA9PT0gdmFsdWUxMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlJCQxKHZhbHVlMDAgPSB2YWx1ZTAsIHZhbHVlMTAgPSB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZVJlbW92ZUVuZChuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUNvbnN0YW50JDEobmFtZSwgaW50ZXJwb2xhdGUkJDEsIHZhbHVlMSkge1xuICB2YXIgdmFsdWUwMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZTAgPSBzdHlsZVZhbHVlKHRoaXMsIG5hbWUpO1xuICAgIHJldHVybiB2YWx1ZTAgPT09IHZhbHVlMSA/IG51bGxcbiAgICAgICAgOiB2YWx1ZTAgPT09IHZhbHVlMDAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZSQkMSh2YWx1ZTAwID0gdmFsdWUwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUZ1bmN0aW9uJDEobmFtZSwgaW50ZXJwb2xhdGUkJDEsIHZhbHVlKSB7XG4gIHZhciB2YWx1ZTAwLFxuICAgICAgdmFsdWUxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZTAgPSBzdHlsZVZhbHVlKHRoaXMsIG5hbWUpLFxuICAgICAgICB2YWx1ZTEgPSB2YWx1ZSh0aGlzKTtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHZhbHVlMSA9ICh0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpLCBzdHlsZVZhbHVlKHRoaXMsIG5hbWUpKTtcbiAgICByZXR1cm4gdmFsdWUwID09PSB2YWx1ZTEgPyBudWxsXG4gICAgICAgIDogdmFsdWUwID09PSB2YWx1ZTAwICYmIHZhbHVlMSA9PT0gdmFsdWUxMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlJCQxKHZhbHVlMDAgPSB2YWx1ZTAsIHZhbHVlMTAgPSB2YWx1ZTEpO1xuICB9O1xufVxuXG52YXIgdHJhbnNpdGlvbl9zdHlsZSA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICB2YXIgaSA9IChuYW1lICs9IFwiXCIpID09PSBcInRyYW5zZm9ybVwiID8gaW50ZXJwb2xhdGVUcmFuc2Zvcm1Dc3MgOiBpbnRlcnBvbGF0ZTtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyB0aGlzXG4gICAgICAgICAgLnN0eWxlVHdlZW4obmFtZSwgc3R5bGVSZW1vdmUkMShuYW1lLCBpKSlcbiAgICAgICAgICAub24oXCJlbmQuc3R5bGUuXCIgKyBuYW1lLCBzdHlsZVJlbW92ZUVuZChuYW1lKSlcbiAgICAgIDogdGhpcy5zdHlsZVR3ZWVuKG5hbWUsIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBzdHlsZUZ1bmN0aW9uJDEobmFtZSwgaSwgdHdlZW5WYWx1ZSh0aGlzLCBcInN0eWxlLlwiICsgbmFtZSwgdmFsdWUpKVxuICAgICAgICAgIDogc3R5bGVDb25zdGFudCQxKG5hbWUsIGksIHZhbHVlICsgXCJcIiksIHByaW9yaXR5KTtcbn07XG5cbmZ1bmN0aW9uIHN0eWxlVHdlZW4obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBub2RlID0gdGhpcywgaSA9IHZhbHVlLmFwcGx5KG5vZGUsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIGkgJiYgZnVuY3Rpb24odCkge1xuICAgICAgbm9kZS5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCBpKHQpLCBwcmlvcml0eSk7XG4gICAgfTtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG52YXIgdHJhbnNpdGlvbl9zdHlsZVR3ZWVuID0gZnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHZhciBrZXkgPSBcInN0eWxlLlwiICsgKG5hbWUgKz0gXCJcIik7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcmV0dXJuIChrZXkgPSB0aGlzLnR3ZWVuKGtleSkpICYmIGtleS5fdmFsdWU7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gdGhpcy50d2VlbihrZXksIG51bGwpO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCBzdHlsZVR3ZWVuKG5hbWUsIHZhbHVlLCBwcmlvcml0eSA9PSBudWxsID8gXCJcIiA6IHByaW9yaXR5KSk7XG59O1xuXG5mdW5jdGlvbiB0ZXh0Q29uc3RhbnQkMSh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0ZXh0RnVuY3Rpb24kMSh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlMSA9IHZhbHVlKHRoaXMpO1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTEgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZTE7XG4gIH07XG59XG5cbnZhciB0cmFuc2l0aW9uX3RleHQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdGhpcy50d2VlbihcInRleHRcIiwgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gdGV4dEZ1bmN0aW9uJDEodHdlZW5WYWx1ZSh0aGlzLCBcInRleHRcIiwgdmFsdWUpKVxuICAgICAgOiB0ZXh0Q29uc3RhbnQkMSh2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIikpO1xufTtcblxudmFyIHRyYW5zaXRpb25fdHJhbnNpdGlvbiA9IGZ1bmN0aW9uKCkge1xuICB2YXIgbmFtZSA9IHRoaXMuX25hbWUsXG4gICAgICBpZDAgPSB0aGlzLl9pZCxcbiAgICAgIGlkMSA9IG5ld0lkKCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgdmFyIGluaGVyaXQgPSBnZXQkMShub2RlLCBpZDApO1xuICAgICAgICBzY2hlZHVsZShub2RlLCBuYW1lLCBpZDEsIGksIGdyb3VwLCB7XG4gICAgICAgICAgdGltZTogaW5oZXJpdC50aW1lICsgaW5oZXJpdC5kZWxheSArIGluaGVyaXQuZHVyYXRpb24sXG4gICAgICAgICAgZGVsYXk6IDAsXG4gICAgICAgICAgZHVyYXRpb246IGluaGVyaXQuZHVyYXRpb24sXG4gICAgICAgICAgZWFzZTogaW5oZXJpdC5lYXNlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihncm91cHMsIHRoaXMuX3BhcmVudHMsIG5hbWUsIGlkMSk7XG59O1xuXG52YXIgaWQgPSAwO1xuXG5mdW5jdGlvbiBUcmFuc2l0aW9uKGdyb3VwcywgcGFyZW50cywgbmFtZSwgaWQpIHtcbiAgdGhpcy5fZ3JvdXBzID0gZ3JvdXBzO1xuICB0aGlzLl9wYXJlbnRzID0gcGFyZW50cztcbiAgdGhpcy5fbmFtZSA9IG5hbWU7XG4gIHRoaXMuX2lkID0gaWQ7XG59XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb24obmFtZSkge1xuICByZXR1cm4gc2VsZWN0aW9uKCkudHJhbnNpdGlvbihuYW1lKTtcbn1cblxuZnVuY3Rpb24gbmV3SWQoKSB7XG4gIHJldHVybiArK2lkO1xufVxuXG52YXIgc2VsZWN0aW9uX3Byb3RvdHlwZSA9IHNlbGVjdGlvbi5wcm90b3R5cGU7XG5cblRyYW5zaXRpb24ucHJvdG90eXBlID0gdHJhbnNpdGlvbi5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBUcmFuc2l0aW9uLFxuICBzZWxlY3Q6IHRyYW5zaXRpb25fc2VsZWN0LFxuICBzZWxlY3RBbGw6IHRyYW5zaXRpb25fc2VsZWN0QWxsLFxuICBmaWx0ZXI6IHRyYW5zaXRpb25fZmlsdGVyLFxuICBtZXJnZTogdHJhbnNpdGlvbl9tZXJnZSxcbiAgc2VsZWN0aW9uOiB0cmFuc2l0aW9uX3NlbGVjdGlvbixcbiAgdHJhbnNpdGlvbjogdHJhbnNpdGlvbl90cmFuc2l0aW9uLFxuICBjYWxsOiBzZWxlY3Rpb25fcHJvdG90eXBlLmNhbGwsXG4gIG5vZGVzOiBzZWxlY3Rpb25fcHJvdG90eXBlLm5vZGVzLFxuICBub2RlOiBzZWxlY3Rpb25fcHJvdG90eXBlLm5vZGUsXG4gIHNpemU6IHNlbGVjdGlvbl9wcm90b3R5cGUuc2l6ZSxcbiAgZW1wdHk6IHNlbGVjdGlvbl9wcm90b3R5cGUuZW1wdHksXG4gIGVhY2g6IHNlbGVjdGlvbl9wcm90b3R5cGUuZWFjaCxcbiAgb246IHRyYW5zaXRpb25fb24sXG4gIGF0dHI6IHRyYW5zaXRpb25fYXR0cixcbiAgYXR0clR3ZWVuOiB0cmFuc2l0aW9uX2F0dHJUd2VlbixcbiAgc3R5bGU6IHRyYW5zaXRpb25fc3R5bGUsXG4gIHN0eWxlVHdlZW46IHRyYW5zaXRpb25fc3R5bGVUd2VlbixcbiAgdGV4dDogdHJhbnNpdGlvbl90ZXh0LFxuICByZW1vdmU6IHRyYW5zaXRpb25fcmVtb3ZlLFxuICB0d2VlbjogdHJhbnNpdGlvbl90d2VlbixcbiAgZGVsYXk6IHRyYW5zaXRpb25fZGVsYXksXG4gIGR1cmF0aW9uOiB0cmFuc2l0aW9uX2R1cmF0aW9uLFxuICBlYXNlOiB0cmFuc2l0aW9uX2Vhc2Vcbn07XG5cbmZ1bmN0aW9uIGxpbmVhciQxKHQpIHtcbiAgcmV0dXJuICt0O1xufVxuXG5mdW5jdGlvbiBxdWFkSW4odCkge1xuICByZXR1cm4gdCAqIHQ7XG59XG5cbmZ1bmN0aW9uIHF1YWRPdXQodCkge1xuICByZXR1cm4gdCAqICgyIC0gdCk7XG59XG5cbmZ1bmN0aW9uIHF1YWRJbk91dCh0KSB7XG4gIHJldHVybiAoKHQgKj0gMikgPD0gMSA/IHQgKiB0IDogLS10ICogKDIgLSB0KSArIDEpIC8gMjtcbn1cblxuZnVuY3Rpb24gY3ViaWNJbih0KSB7XG4gIHJldHVybiB0ICogdCAqIHQ7XG59XG5cbmZ1bmN0aW9uIGN1YmljT3V0KHQpIHtcbiAgcmV0dXJuIC0tdCAqIHQgKiB0ICsgMTtcbn1cblxuZnVuY3Rpb24gY3ViaWNJbk91dCh0KSB7XG4gIHJldHVybiAoKHQgKj0gMikgPD0gMSA/IHQgKiB0ICogdCA6ICh0IC09IDIpICogdCAqIHQgKyAyKSAvIDI7XG59XG5cbnZhciBleHBvbmVudCA9IDM7XG5cbnZhciBwb2x5SW4gPSAoZnVuY3Rpb24gY3VzdG9tKGUpIHtcbiAgZSA9ICtlO1xuXG4gIGZ1bmN0aW9uIHBvbHlJbih0KSB7XG4gICAgcmV0dXJuIE1hdGgucG93KHQsIGUpO1xuICB9XG5cbiAgcG9seUluLmV4cG9uZW50ID0gY3VzdG9tO1xuXG4gIHJldHVybiBwb2x5SW47XG59KShleHBvbmVudCk7XG5cbnZhciBwb2x5T3V0ID0gKGZ1bmN0aW9uIGN1c3RvbShlKSB7XG4gIGUgPSArZTtcblxuICBmdW5jdGlvbiBwb2x5T3V0KHQpIHtcbiAgICByZXR1cm4gMSAtIE1hdGgucG93KDEgLSB0LCBlKTtcbiAgfVxuXG4gIHBvbHlPdXQuZXhwb25lbnQgPSBjdXN0b207XG5cbiAgcmV0dXJuIHBvbHlPdXQ7XG59KShleHBvbmVudCk7XG5cbnZhciBwb2x5SW5PdXQgPSAoZnVuY3Rpb24gY3VzdG9tKGUpIHtcbiAgZSA9ICtlO1xuXG4gIGZ1bmN0aW9uIHBvbHlJbk91dCh0KSB7XG4gICAgcmV0dXJuICgodCAqPSAyKSA8PSAxID8gTWF0aC5wb3codCwgZSkgOiAyIC0gTWF0aC5wb3coMiAtIHQsIGUpKSAvIDI7XG4gIH1cblxuICBwb2x5SW5PdXQuZXhwb25lbnQgPSBjdXN0b207XG5cbiAgcmV0dXJuIHBvbHlJbk91dDtcbn0pKGV4cG9uZW50KTtcblxudmFyIHBpID0gTWF0aC5QSTtcbnZhciBoYWxmUGkgPSBwaSAvIDI7XG5cbmZ1bmN0aW9uIHNpbkluKHQpIHtcbiAgcmV0dXJuIDEgLSBNYXRoLmNvcyh0ICogaGFsZlBpKTtcbn1cblxuZnVuY3Rpb24gc2luT3V0KHQpIHtcbiAgcmV0dXJuIE1hdGguc2luKHQgKiBoYWxmUGkpO1xufVxuXG5mdW5jdGlvbiBzaW5Jbk91dCh0KSB7XG4gIHJldHVybiAoMSAtIE1hdGguY29zKHBpICogdCkpIC8gMjtcbn1cblxuZnVuY3Rpb24gZXhwSW4odCkge1xuICByZXR1cm4gTWF0aC5wb3coMiwgMTAgKiB0IC0gMTApO1xufVxuXG5mdW5jdGlvbiBleHBPdXQodCkge1xuICByZXR1cm4gMSAtIE1hdGgucG93KDIsIC0xMCAqIHQpO1xufVxuXG5mdW5jdGlvbiBleHBJbk91dCh0KSB7XG4gIHJldHVybiAoKHQgKj0gMikgPD0gMSA/IE1hdGgucG93KDIsIDEwICogdCAtIDEwKSA6IDIgLSBNYXRoLnBvdygyLCAxMCAtIDEwICogdCkpIC8gMjtcbn1cblxuZnVuY3Rpb24gY2lyY2xlSW4odCkge1xuICByZXR1cm4gMSAtIE1hdGguc3FydCgxIC0gdCAqIHQpO1xufVxuXG5mdW5jdGlvbiBjaXJjbGVPdXQodCkge1xuICByZXR1cm4gTWF0aC5zcXJ0KDEgLSAtLXQgKiB0KTtcbn1cblxuZnVuY3Rpb24gY2lyY2xlSW5PdXQodCkge1xuICByZXR1cm4gKCh0ICo9IDIpIDw9IDEgPyAxIC0gTWF0aC5zcXJ0KDEgLSB0ICogdCkgOiBNYXRoLnNxcnQoMSAtICh0IC09IDIpICogdCkgKyAxKSAvIDI7XG59XG5cbnZhciBiMSA9IDQgLyAxMTtcbnZhciBiMiA9IDYgLyAxMTtcbnZhciBiMyA9IDggLyAxMTtcbnZhciBiNCA9IDMgLyA0O1xudmFyIGI1ID0gOSAvIDExO1xudmFyIGI2ID0gMTAgLyAxMTtcbnZhciBiNyA9IDE1IC8gMTY7XG52YXIgYjggPSAyMSAvIDIyO1xudmFyIGI5ID0gNjMgLyA2NDtcbnZhciBiMCA9IDEgLyBiMSAvIGIxO1xuXG5mdW5jdGlvbiBib3VuY2VJbih0KSB7XG4gIHJldHVybiAxIC0gYm91bmNlT3V0KDEgLSB0KTtcbn1cblxuZnVuY3Rpb24gYm91bmNlT3V0KHQpIHtcbiAgcmV0dXJuICh0ID0gK3QpIDwgYjEgPyBiMCAqIHQgKiB0IDogdCA8IGIzID8gYjAgKiAodCAtPSBiMikgKiB0ICsgYjQgOiB0IDwgYjYgPyBiMCAqICh0IC09IGI1KSAqIHQgKyBiNyA6IGIwICogKHQgLT0gYjgpICogdCArIGI5O1xufVxuXG5mdW5jdGlvbiBib3VuY2VJbk91dCh0KSB7XG4gIHJldHVybiAoKHQgKj0gMikgPD0gMSA/IDEgLSBib3VuY2VPdXQoMSAtIHQpIDogYm91bmNlT3V0KHQgLSAxKSArIDEpIC8gMjtcbn1cblxudmFyIG92ZXJzaG9vdCA9IDEuNzAxNTg7XG5cbnZhciBiYWNrSW4gPSAoZnVuY3Rpb24gY3VzdG9tKHMpIHtcbiAgcyA9ICtzO1xuXG4gIGZ1bmN0aW9uIGJhY2tJbih0KSB7XG4gICAgcmV0dXJuIHQgKiB0ICogKChzICsgMSkgKiB0IC0gcyk7XG4gIH1cblxuICBiYWNrSW4ub3ZlcnNob290ID0gY3VzdG9tO1xuXG4gIHJldHVybiBiYWNrSW47XG59KShvdmVyc2hvb3QpO1xuXG52YXIgYmFja091dCA9IChmdW5jdGlvbiBjdXN0b20ocykge1xuICBzID0gK3M7XG5cbiAgZnVuY3Rpb24gYmFja091dCh0KSB7XG4gICAgcmV0dXJuIC0tdCAqIHQgKiAoKHMgKyAxKSAqIHQgKyBzKSArIDE7XG4gIH1cblxuICBiYWNrT3V0Lm92ZXJzaG9vdCA9IGN1c3RvbTtcblxuICByZXR1cm4gYmFja091dDtcbn0pKG92ZXJzaG9vdCk7XG5cbnZhciBiYWNrSW5PdXQgPSAoZnVuY3Rpb24gY3VzdG9tKHMpIHtcbiAgcyA9ICtzO1xuXG4gIGZ1bmN0aW9uIGJhY2tJbk91dCh0KSB7XG4gICAgcmV0dXJuICgodCAqPSAyKSA8IDEgPyB0ICogdCAqICgocyArIDEpICogdCAtIHMpIDogKHQgLT0gMikgKiB0ICogKChzICsgMSkgKiB0ICsgcykgKyAyKSAvIDI7XG4gIH1cblxuICBiYWNrSW5PdXQub3ZlcnNob290ID0gY3VzdG9tO1xuXG4gIHJldHVybiBiYWNrSW5PdXQ7XG59KShvdmVyc2hvb3QpO1xuXG52YXIgdGF1ID0gMiAqIE1hdGguUEk7XG52YXIgYW1wbGl0dWRlID0gMTtcbnZhciBwZXJpb2QgPSAwLjM7XG5cbnZhciBlbGFzdGljSW4gPSAoZnVuY3Rpb24gY3VzdG9tKGEsIHApIHtcbiAgdmFyIHMgPSBNYXRoLmFzaW4oMSAvIChhID0gTWF0aC5tYXgoMSwgYSkpKSAqIChwIC89IHRhdSk7XG5cbiAgZnVuY3Rpb24gZWxhc3RpY0luKHQpIHtcbiAgICByZXR1cm4gYSAqIE1hdGgucG93KDIsIDEwICogLS10KSAqIE1hdGguc2luKChzIC0gdCkgLyBwKTtcbiAgfVxuXG4gIGVsYXN0aWNJbi5hbXBsaXR1ZGUgPSBmdW5jdGlvbihhKSB7IHJldHVybiBjdXN0b20oYSwgcCAqIHRhdSk7IH07XG4gIGVsYXN0aWNJbi5wZXJpb2QgPSBmdW5jdGlvbihwKSB7IHJldHVybiBjdXN0b20oYSwgcCk7IH07XG5cbiAgcmV0dXJuIGVsYXN0aWNJbjtcbn0pKGFtcGxpdHVkZSwgcGVyaW9kKTtcblxudmFyIGVsYXN0aWNPdXQgPSAoZnVuY3Rpb24gY3VzdG9tKGEsIHApIHtcbiAgdmFyIHMgPSBNYXRoLmFzaW4oMSAvIChhID0gTWF0aC5tYXgoMSwgYSkpKSAqIChwIC89IHRhdSk7XG5cbiAgZnVuY3Rpb24gZWxhc3RpY091dCh0KSB7XG4gICAgcmV0dXJuIDEgLSBhICogTWF0aC5wb3coMiwgLTEwICogKHQgPSArdCkpICogTWF0aC5zaW4oKHQgKyBzKSAvIHApO1xuICB9XG5cbiAgZWxhc3RpY091dC5hbXBsaXR1ZGUgPSBmdW5jdGlvbihhKSB7IHJldHVybiBjdXN0b20oYSwgcCAqIHRhdSk7IH07XG4gIGVsYXN0aWNPdXQucGVyaW9kID0gZnVuY3Rpb24ocCkgeyByZXR1cm4gY3VzdG9tKGEsIHApOyB9O1xuXG4gIHJldHVybiBlbGFzdGljT3V0O1xufSkoYW1wbGl0dWRlLCBwZXJpb2QpO1xuXG52YXIgZWxhc3RpY0luT3V0ID0gKGZ1bmN0aW9uIGN1c3RvbShhLCBwKSB7XG4gIHZhciBzID0gTWF0aC5hc2luKDEgLyAoYSA9IE1hdGgubWF4KDEsIGEpKSkgKiAocCAvPSB0YXUpO1xuXG4gIGZ1bmN0aW9uIGVsYXN0aWNJbk91dCh0KSB7XG4gICAgcmV0dXJuICgodCA9IHQgKiAyIC0gMSkgPCAwXG4gICAgICAgID8gYSAqIE1hdGgucG93KDIsIDEwICogdCkgKiBNYXRoLnNpbigocyAtIHQpIC8gcClcbiAgICAgICAgOiAyIC0gYSAqIE1hdGgucG93KDIsIC0xMCAqIHQpICogTWF0aC5zaW4oKHMgKyB0KSAvIHApKSAvIDI7XG4gIH1cblxuICBlbGFzdGljSW5PdXQuYW1wbGl0dWRlID0gZnVuY3Rpb24oYSkgeyByZXR1cm4gY3VzdG9tKGEsIHAgKiB0YXUpOyB9O1xuICBlbGFzdGljSW5PdXQucGVyaW9kID0gZnVuY3Rpb24ocCkgeyByZXR1cm4gY3VzdG9tKGEsIHApOyB9O1xuXG4gIHJldHVybiBlbGFzdGljSW5PdXQ7XG59KShhbXBsaXR1ZGUsIHBlcmlvZCk7XG5cbnZhciBkZWZhdWx0VGltaW5nID0ge1xuICB0aW1lOiBudWxsLCAvLyBTZXQgb24gdXNlLlxuICBkZWxheTogMCxcbiAgZHVyYXRpb246IDI1MCxcbiAgZWFzZTogY3ViaWNJbk91dFxufTtcblxuZnVuY3Rpb24gaW5oZXJpdChub2RlLCBpZCkge1xuICB2YXIgdGltaW5nO1xuICB3aGlsZSAoISh0aW1pbmcgPSBub2RlLl9fdHJhbnNpdGlvbikgfHwgISh0aW1pbmcgPSB0aW1pbmdbaWRdKSkge1xuICAgIGlmICghKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpKSB7XG4gICAgICByZXR1cm4gZGVmYXVsdFRpbWluZy50aW1lID0gbm93KCksIGRlZmF1bHRUaW1pbmc7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aW1pbmc7XG59XG5cbnZhciBzZWxlY3Rpb25fdHJhbnNpdGlvbiA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIGlkLFxuICAgICAgdGltaW5nO1xuXG4gIGlmIChuYW1lIGluc3RhbmNlb2YgVHJhbnNpdGlvbikge1xuICAgIGlkID0gbmFtZS5faWQsIG5hbWUgPSBuYW1lLl9uYW1lO1xuICB9IGVsc2Uge1xuICAgIGlkID0gbmV3SWQoKSwgKHRpbWluZyA9IGRlZmF1bHRUaW1pbmcpLnRpbWUgPSBub3coKSwgbmFtZSA9IG5hbWUgPT0gbnVsbCA/IG51bGwgOiBuYW1lICsgXCJcIjtcbiAgfVxuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHNjaGVkdWxlKG5vZGUsIG5hbWUsIGlkLCBpLCBncm91cCwgdGltaW5nIHx8IGluaGVyaXQobm9kZSwgaWQpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCBuYW1lLCBpZCk7XG59O1xuXG5zZWxlY3Rpb24ucHJvdG90eXBlLmludGVycnVwdCA9IHNlbGVjdGlvbl9pbnRlcnJ1cHQ7XG5zZWxlY3Rpb24ucHJvdG90eXBlLnRyYW5zaXRpb24gPSBzZWxlY3Rpb25fdHJhbnNpdGlvbjtcblxudmFyIHJvb3QkMSA9IFtudWxsXTtcblxudmFyIGFjdGl2ZSA9IGZ1bmN0aW9uKG5vZGUsIG5hbWUpIHtcbiAgdmFyIHNjaGVkdWxlcyA9IG5vZGUuX190cmFuc2l0aW9uLFxuICAgICAgc2NoZWR1bGUkJDEsXG4gICAgICBpO1xuXG4gIGlmIChzY2hlZHVsZXMpIHtcbiAgICBuYW1lID0gbmFtZSA9PSBudWxsID8gbnVsbCA6IG5hbWUgKyBcIlwiO1xuICAgIGZvciAoaSBpbiBzY2hlZHVsZXMpIHtcbiAgICAgIGlmICgoc2NoZWR1bGUkJDEgPSBzY2hlZHVsZXNbaV0pLnN0YXRlID4gU0NIRURVTEVEICYmIHNjaGVkdWxlJCQxLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKFtbbm9kZV1dLCByb290JDEsIG5hbWUsICtpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn07XG5cbnZhciBjb25zdGFudCQ0ID0gZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59O1xuXG52YXIgQnJ1c2hFdmVudCA9IGZ1bmN0aW9uKHRhcmdldCwgdHlwZSwgc2VsZWN0aW9uKSB7XG4gIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICB0aGlzLnR5cGUgPSB0eXBlO1xuICB0aGlzLnNlbGVjdGlvbiA9IHNlbGVjdGlvbjtcbn07XG5cbmZ1bmN0aW9uIG5vcHJvcGFnYXRpb24kMSgpIHtcbiAgZXhwb3J0cy5ldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbn1cblxudmFyIG5vZXZlbnQkMSA9IGZ1bmN0aW9uKCkge1xuICBleHBvcnRzLmV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIGV4cG9ydHMuZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG59O1xuXG52YXIgTU9ERV9EUkFHID0ge25hbWU6IFwiZHJhZ1wifTtcbnZhciBNT0RFX1NQQUNFID0ge25hbWU6IFwic3BhY2VcIn07XG52YXIgTU9ERV9IQU5ETEUgPSB7bmFtZTogXCJoYW5kbGVcIn07XG52YXIgTU9ERV9DRU5URVIgPSB7bmFtZTogXCJjZW50ZXJcIn07XG5cbnZhciBYID0ge1xuICBuYW1lOiBcInhcIixcbiAgaGFuZGxlczogW1wiZVwiLCBcIndcIl0ubWFwKHR5cGUpLFxuICBpbnB1dDogZnVuY3Rpb24oeCwgZSkgeyByZXR1cm4geCAmJiBbW3hbMF0sIGVbMF1bMV1dLCBbeFsxXSwgZVsxXVsxXV1dOyB9LFxuICBvdXRwdXQ6IGZ1bmN0aW9uKHh5KSB7IHJldHVybiB4eSAmJiBbeHlbMF1bMF0sIHh5WzFdWzBdXTsgfVxufTtcblxudmFyIFkgPSB7XG4gIG5hbWU6IFwieVwiLFxuICBoYW5kbGVzOiBbXCJuXCIsIFwic1wiXS5tYXAodHlwZSksXG4gIGlucHV0OiBmdW5jdGlvbih5LCBlKSB7IHJldHVybiB5ICYmIFtbZVswXVswXSwgeVswXV0sIFtlWzFdWzBdLCB5WzFdXV07IH0sXG4gIG91dHB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5ICYmIFt4eVswXVsxXSwgeHlbMV1bMV1dOyB9XG59O1xuXG52YXIgWFkgPSB7XG4gIG5hbWU6IFwieHlcIixcbiAgaGFuZGxlczogW1wiblwiLCBcImVcIiwgXCJzXCIsIFwid1wiLCBcIm53XCIsIFwibmVcIiwgXCJzZVwiLCBcInN3XCJdLm1hcCh0eXBlKSxcbiAgaW5wdXQ6IGZ1bmN0aW9uKHh5KSB7IHJldHVybiB4eTsgfSxcbiAgb3V0cHV0OiBmdW5jdGlvbih4eSkgeyByZXR1cm4geHk7IH1cbn07XG5cbnZhciBjdXJzb3JzID0ge1xuICBvdmVybGF5OiBcImNyb3NzaGFpclwiLFxuICBzZWxlY3Rpb246IFwibW92ZVwiLFxuICBuOiBcIm5zLXJlc2l6ZVwiLFxuICBlOiBcImV3LXJlc2l6ZVwiLFxuICBzOiBcIm5zLXJlc2l6ZVwiLFxuICB3OiBcImV3LXJlc2l6ZVwiLFxuICBudzogXCJud3NlLXJlc2l6ZVwiLFxuICBuZTogXCJuZXN3LXJlc2l6ZVwiLFxuICBzZTogXCJud3NlLXJlc2l6ZVwiLFxuICBzdzogXCJuZXN3LXJlc2l6ZVwiXG59O1xuXG52YXIgZmxpcFggPSB7XG4gIGU6IFwid1wiLFxuICB3OiBcImVcIixcbiAgbnc6IFwibmVcIixcbiAgbmU6IFwibndcIixcbiAgc2U6IFwic3dcIixcbiAgc3c6IFwic2VcIlxufTtcblxudmFyIGZsaXBZID0ge1xuICBuOiBcInNcIixcbiAgczogXCJuXCIsXG4gIG53OiBcInN3XCIsXG4gIG5lOiBcInNlXCIsXG4gIHNlOiBcIm5lXCIsXG4gIHN3OiBcIm53XCJcbn07XG5cbnZhciBzaWduc1ggPSB7XG4gIG92ZXJsYXk6ICsxLFxuICBzZWxlY3Rpb246ICsxLFxuICBuOiBudWxsLFxuICBlOiArMSxcbiAgczogbnVsbCxcbiAgdzogLTEsXG4gIG53OiAtMSxcbiAgbmU6ICsxLFxuICBzZTogKzEsXG4gIHN3OiAtMVxufTtcblxudmFyIHNpZ25zWSA9IHtcbiAgb3ZlcmxheTogKzEsXG4gIHNlbGVjdGlvbjogKzEsXG4gIG46IC0xLFxuICBlOiBudWxsLFxuICBzOiArMSxcbiAgdzogbnVsbCxcbiAgbnc6IC0xLFxuICBuZTogLTEsXG4gIHNlOiArMSxcbiAgc3c6ICsxXG59O1xuXG5mdW5jdGlvbiB0eXBlKHQpIHtcbiAgcmV0dXJuIHt0eXBlOiB0fTtcbn1cblxuLy8gSWdub3JlIHJpZ2h0LWNsaWNrLCBzaW5jZSB0aGF0IHNob3VsZCBvcGVuIHRoZSBjb250ZXh0IG1lbnUuXG5mdW5jdGlvbiBkZWZhdWx0RmlsdGVyKCkge1xuICByZXR1cm4gIWV4cG9ydHMuZXZlbnQuYnV0dG9uO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0RXh0ZW50KCkge1xuICB2YXIgc3ZnID0gdGhpcy5vd25lclNWR0VsZW1lbnQgfHwgdGhpcztcbiAgcmV0dXJuIFtbMCwgMF0sIFtzdmcud2lkdGguYmFzZVZhbC52YWx1ZSwgc3ZnLmhlaWdodC5iYXNlVmFsLnZhbHVlXV07XG59XG5cbi8vIExpa2UgZDMubG9jYWwsIGJ1dCB3aXRoIHRoZSBuYW1lIOKAnF9fYnJ1c2jigJ0gcmF0aGVyIHRoYW4gYXV0by1nZW5lcmF0ZWQuXG5mdW5jdGlvbiBsb2NhbCQkMShub2RlKSB7XG4gIHdoaWxlICghbm9kZS5fX2JydXNoKSBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkgcmV0dXJuO1xuICByZXR1cm4gbm9kZS5fX2JydXNoO1xufVxuXG5mdW5jdGlvbiBlbXB0eShleHRlbnQpIHtcbiAgcmV0dXJuIGV4dGVudFswXVswXSA9PT0gZXh0ZW50WzFdWzBdXG4gICAgICB8fCBleHRlbnRbMF1bMV0gPT09IGV4dGVudFsxXVsxXTtcbn1cblxuZnVuY3Rpb24gYnJ1c2hTZWxlY3Rpb24obm9kZSkge1xuICB2YXIgc3RhdGUgPSBub2RlLl9fYnJ1c2g7XG4gIHJldHVybiBzdGF0ZSA/IHN0YXRlLmRpbS5vdXRwdXQoc3RhdGUuc2VsZWN0aW9uKSA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIGJydXNoWCgpIHtcbiAgcmV0dXJuIGJydXNoJDEoWCk7XG59XG5cbmZ1bmN0aW9uIGJydXNoWSgpIHtcbiAgcmV0dXJuIGJydXNoJDEoWSk7XG59XG5cbnZhciBicnVzaCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gYnJ1c2gkMShYWSk7XG59O1xuXG5mdW5jdGlvbiBicnVzaCQxKGRpbSkge1xuICB2YXIgZXh0ZW50ID0gZGVmYXVsdEV4dGVudCxcbiAgICAgIGZpbHRlciA9IGRlZmF1bHRGaWx0ZXIsXG4gICAgICBsaXN0ZW5lcnMgPSBkaXNwYXRjaChicnVzaCwgXCJzdGFydFwiLCBcImJydXNoXCIsIFwiZW5kXCIpLFxuICAgICAgaGFuZGxlU2l6ZSA9IDYsXG4gICAgICB0b3VjaGVuZGluZztcblxuICBmdW5jdGlvbiBicnVzaChncm91cCkge1xuICAgIHZhciBvdmVybGF5ID0gZ3JvdXBcbiAgICAgICAgLnByb3BlcnR5KFwiX19icnVzaFwiLCBpbml0aWFsaXplKVxuICAgICAgLnNlbGVjdEFsbChcIi5vdmVybGF5XCIpXG4gICAgICAuZGF0YShbdHlwZShcIm92ZXJsYXlcIildKTtcblxuICAgIG92ZXJsYXkuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJvdmVybGF5XCIpXG4gICAgICAgIC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJhbGxcIilcbiAgICAgICAgLmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29ycy5vdmVybGF5KVxuICAgICAgLm1lcmdlKG92ZXJsYXkpXG4gICAgICAgIC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBleHRlbnQgPSBsb2NhbCQkMSh0aGlzKS5leHRlbnQ7XG4gICAgICAgICAgc2VsZWN0KHRoaXMpXG4gICAgICAgICAgICAgIC5hdHRyKFwieFwiLCBleHRlbnRbMF1bMF0pXG4gICAgICAgICAgICAgIC5hdHRyKFwieVwiLCBleHRlbnRbMF1bMV0pXG4gICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgZXh0ZW50WzFdWzBdIC0gZXh0ZW50WzBdWzBdKVxuICAgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBleHRlbnRbMV1bMV0gLSBleHRlbnRbMF1bMV0pO1xuICAgICAgICB9KTtcblxuICAgIGdyb3VwLnNlbGVjdEFsbChcIi5zZWxlY3Rpb25cIilcbiAgICAgIC5kYXRhKFt0eXBlKFwic2VsZWN0aW9uXCIpXSlcbiAgICAgIC5lbnRlcigpLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInNlbGVjdGlvblwiKVxuICAgICAgICAuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzLnNlbGVjdGlvbilcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwiIzc3N1wiKVxuICAgICAgICAuYXR0cihcImZpbGwtb3BhY2l0eVwiLCAwLjMpXG4gICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIFwiI2ZmZlwiKVxuICAgICAgICAuYXR0cihcInNoYXBlLXJlbmRlcmluZ1wiLCBcImNyaXNwRWRnZXNcIik7XG5cbiAgICB2YXIgaGFuZGxlID0gZ3JvdXAuc2VsZWN0QWxsKFwiLmhhbmRsZVwiKVxuICAgICAgLmRhdGEoZGltLmhhbmRsZXMsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZTsgfSk7XG5cbiAgICBoYW5kbGUuZXhpdCgpLnJlbW92ZSgpO1xuXG4gICAgaGFuZGxlLmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIFwiaGFuZGxlIGhhbmRsZS0tXCIgKyBkLnR5cGU7IH0pXG4gICAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGN1cnNvcnNbZC50eXBlXTsgfSk7XG5cbiAgICBncm91cFxuICAgICAgICAuZWFjaChyZWRyYXcpXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIm5vbmVcIilcbiAgICAgICAgLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcImFsbFwiKVxuICAgICAgICAuc3R5bGUoXCItd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3JcIiwgXCJyZ2JhKDAsMCwwLDApXCIpXG4gICAgICAgIC5vbihcIm1vdXNlZG93bi5icnVzaCB0b3VjaHN0YXJ0LmJydXNoXCIsIHN0YXJ0ZWQpO1xuICB9XG5cbiAgYnJ1c2gubW92ZSA9IGZ1bmN0aW9uKGdyb3VwLCBzZWxlY3Rpb24pIHtcbiAgICBpZiAoZ3JvdXAuc2VsZWN0aW9uKSB7XG4gICAgICBncm91cFxuICAgICAgICAgIC5vbihcInN0YXJ0LmJydXNoXCIsIGZ1bmN0aW9uKCkgeyBlbWl0dGVyKHRoaXMsIGFyZ3VtZW50cykuYmVmb3Jlc3RhcnQoKS5zdGFydCgpOyB9KVxuICAgICAgICAgIC5vbihcImludGVycnVwdC5icnVzaCBlbmQuYnJ1c2hcIiwgZnVuY3Rpb24oKSB7IGVtaXR0ZXIodGhpcywgYXJndW1lbnRzKS5lbmQoKTsgfSlcbiAgICAgICAgICAudHdlZW4oXCJicnVzaFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoYXQuX19icnVzaCxcbiAgICAgICAgICAgICAgICBlbWl0ID0gZW1pdHRlcih0aGF0LCBhcmd1bWVudHMpLFxuICAgICAgICAgICAgICAgIHNlbGVjdGlvbjAgPSBzdGF0ZS5zZWxlY3Rpb24sXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uMSA9IGRpbS5pbnB1dCh0eXBlb2Ygc2VsZWN0aW9uID09PSBcImZ1bmN0aW9uXCIgPyBzZWxlY3Rpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHNlbGVjdGlvbiwgc3RhdGUuZXh0ZW50KSxcbiAgICAgICAgICAgICAgICBpID0gaW50ZXJwb2xhdGVWYWx1ZShzZWxlY3Rpb24wLCBzZWxlY3Rpb24xKTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gdHdlZW4odCkge1xuICAgICAgICAgICAgICBzdGF0ZS5zZWxlY3Rpb24gPSB0ID09PSAxICYmIGVtcHR5KHNlbGVjdGlvbjEpID8gbnVsbCA6IGkodCk7XG4gICAgICAgICAgICAgIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgICAgICAgICAgICBlbWl0LmJydXNoKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBzZWxlY3Rpb24wICYmIHNlbGVjdGlvbjEgPyB0d2VlbiA6IHR3ZWVuKDEpO1xuICAgICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBncm91cFxuICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgICAgIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICAgICAgc3RhdGUgPSB0aGF0Ll9fYnJ1c2gsXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uMSA9IGRpbS5pbnB1dCh0eXBlb2Ygc2VsZWN0aW9uID09PSBcImZ1bmN0aW9uXCIgPyBzZWxlY3Rpb24uYXBwbHkodGhhdCwgYXJncykgOiBzZWxlY3Rpb24sIHN0YXRlLmV4dGVudCksXG4gICAgICAgICAgICAgICAgZW1pdCA9IGVtaXR0ZXIodGhhdCwgYXJncykuYmVmb3Jlc3RhcnQoKTtcblxuICAgICAgICAgICAgaW50ZXJydXB0KHRoYXQpO1xuICAgICAgICAgICAgc3RhdGUuc2VsZWN0aW9uID0gc2VsZWN0aW9uMSA9PSBudWxsIHx8IGVtcHR5KHNlbGVjdGlvbjEpID8gbnVsbCA6IHNlbGVjdGlvbjE7XG4gICAgICAgICAgICByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICAgICAgICAgIGVtaXQuc3RhcnQoKS5icnVzaCgpLmVuZCgpO1xuICAgICAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiByZWRyYXcoKSB7XG4gICAgdmFyIGdyb3VwID0gc2VsZWN0KHRoaXMpLFxuICAgICAgICBzZWxlY3Rpb24gPSBsb2NhbCQkMSh0aGlzKS5zZWxlY3Rpb247XG5cbiAgICBpZiAoc2VsZWN0aW9uKSB7XG4gICAgICBncm91cC5zZWxlY3RBbGwoXCIuc2VsZWN0aW9uXCIpXG4gICAgICAgICAgLnN0eWxlKFwiZGlzcGxheVwiLCBudWxsKVxuICAgICAgICAgIC5hdHRyKFwieFwiLCBzZWxlY3Rpb25bMF1bMF0pXG4gICAgICAgICAgLmF0dHIoXCJ5XCIsIHNlbGVjdGlvblswXVsxXSlcbiAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIHNlbGVjdGlvblsxXVswXSAtIHNlbGVjdGlvblswXVswXSlcbiAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBzZWxlY3Rpb25bMV1bMV0gLSBzZWxlY3Rpb25bMF1bMV0pO1xuXG4gICAgICBncm91cC5zZWxlY3RBbGwoXCIuaGFuZGxlXCIpXG4gICAgICAgICAgLnN0eWxlKFwiZGlzcGxheVwiLCBudWxsKVxuICAgICAgICAgIC5hdHRyKFwieFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGVbZC50eXBlLmxlbmd0aCAtIDFdID09PSBcImVcIiA/IHNlbGVjdGlvblsxXVswXSAtIGhhbmRsZVNpemUgLyAyIDogc2VsZWN0aW9uWzBdWzBdIC0gaGFuZGxlU2l6ZSAvIDI7IH0pXG4gICAgICAgICAgLmF0dHIoXCJ5XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZVswXSA9PT0gXCJzXCIgPyBzZWxlY3Rpb25bMV1bMV0gLSBoYW5kbGVTaXplIC8gMiA6IHNlbGVjdGlvblswXVsxXSAtIGhhbmRsZVNpemUgLyAyOyB9KVxuICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlID09PSBcIm5cIiB8fCBkLnR5cGUgPT09IFwic1wiID8gc2VsZWN0aW9uWzFdWzBdIC0gc2VsZWN0aW9uWzBdWzBdICsgaGFuZGxlU2l6ZSA6IGhhbmRsZVNpemU7IH0pXG4gICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlID09PSBcImVcIiB8fCBkLnR5cGUgPT09IFwid1wiID8gc2VsZWN0aW9uWzFdWzFdIC0gc2VsZWN0aW9uWzBdWzFdICsgaGFuZGxlU2l6ZSA6IGhhbmRsZVNpemU7IH0pO1xuICAgIH1cblxuICAgIGVsc2Uge1xuICAgICAgZ3JvdXAuc2VsZWN0QWxsKFwiLnNlbGVjdGlvbiwuaGFuZGxlXCIpXG4gICAgICAgICAgLnN0eWxlKFwiZGlzcGxheVwiLCBcIm5vbmVcIilcbiAgICAgICAgICAuYXR0cihcInhcIiwgbnVsbClcbiAgICAgICAgICAuYXR0cihcInlcIiwgbnVsbClcbiAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIG51bGwpXG4gICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgbnVsbCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZW1pdHRlcih0aGF0LCBhcmdzKSB7XG4gICAgcmV0dXJuIHRoYXQuX19icnVzaC5lbWl0dGVyIHx8IG5ldyBFbWl0dGVyKHRoYXQsIGFyZ3MpO1xuICB9XG5cbiAgZnVuY3Rpb24gRW1pdHRlcih0aGF0LCBhcmdzKSB7XG4gICAgdGhpcy50aGF0ID0gdGhhdDtcbiAgICB0aGlzLmFyZ3MgPSBhcmdzO1xuICAgIHRoaXMuc3RhdGUgPSB0aGF0Ll9fYnJ1c2g7XG4gICAgdGhpcy5hY3RpdmUgPSAwO1xuICB9XG5cbiAgRW1pdHRlci5wcm90b3R5cGUgPSB7XG4gICAgYmVmb3Jlc3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCsrdGhpcy5hY3RpdmUgPT09IDEpIHRoaXMuc3RhdGUuZW1pdHRlciA9IHRoaXMsIHRoaXMuc3RhcnRpbmcgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5zdGFydGluZykgdGhpcy5zdGFydGluZyA9IGZhbHNlLCB0aGlzLmVtaXQoXCJzdGFydFwiKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgYnJ1c2g6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5lbWl0KFwiYnJ1c2hcIik7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGVuZDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoLS10aGlzLmFjdGl2ZSA9PT0gMCkgZGVsZXRlIHRoaXMuc3RhdGUuZW1pdHRlciwgdGhpcy5lbWl0KFwiZW5kXCIpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBlbWl0OiBmdW5jdGlvbih0eXBlKSB7XG4gICAgICBjdXN0b21FdmVudChuZXcgQnJ1c2hFdmVudChicnVzaCwgdHlwZSwgZGltLm91dHB1dCh0aGlzLnN0YXRlLnNlbGVjdGlvbikpLCBsaXN0ZW5lcnMuYXBwbHksIGxpc3RlbmVycywgW3R5cGUsIHRoaXMudGhhdCwgdGhpcy5hcmdzXSk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHN0YXJ0ZWQoKSB7XG4gICAgaWYgKGV4cG9ydHMuZXZlbnQudG91Y2hlcykgeyBpZiAoZXhwb3J0cy5ldmVudC5jaGFuZ2VkVG91Y2hlcy5sZW5ndGggPCBleHBvcnRzLmV2ZW50LnRvdWNoZXMubGVuZ3RoKSByZXR1cm4gbm9ldmVudCQxKCk7IH1cbiAgICBlbHNlIGlmICh0b3VjaGVuZGluZykgcmV0dXJuO1xuICAgIGlmICghZmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHJldHVybjtcblxuICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgdHlwZSA9IGV4cG9ydHMuZXZlbnQudGFyZ2V0Ll9fZGF0YV9fLnR5cGUsXG4gICAgICAgIG1vZGUgPSAoZXhwb3J0cy5ldmVudC5tZXRhS2V5ID8gdHlwZSA9IFwib3ZlcmxheVwiIDogdHlwZSkgPT09IFwic2VsZWN0aW9uXCIgPyBNT0RFX0RSQUcgOiAoZXhwb3J0cy5ldmVudC5hbHRLZXkgPyBNT0RFX0NFTlRFUiA6IE1PREVfSEFORExFKSxcbiAgICAgICAgc2lnblggPSBkaW0gPT09IFkgPyBudWxsIDogc2lnbnNYW3R5cGVdLFxuICAgICAgICBzaWduWSA9IGRpbSA9PT0gWCA/IG51bGwgOiBzaWduc1lbdHlwZV0sXG4gICAgICAgIHN0YXRlID0gbG9jYWwkJDEodGhhdCksXG4gICAgICAgIGV4dGVudCA9IHN0YXRlLmV4dGVudCxcbiAgICAgICAgc2VsZWN0aW9uID0gc3RhdGUuc2VsZWN0aW9uLFxuICAgICAgICBXID0gZXh0ZW50WzBdWzBdLCB3MCwgdzEsXG4gICAgICAgIE4gPSBleHRlbnRbMF1bMV0sIG4wLCBuMSxcbiAgICAgICAgRSA9IGV4dGVudFsxXVswXSwgZTAsIGUxLFxuICAgICAgICBTID0gZXh0ZW50WzFdWzFdLCBzMCwgczEsXG4gICAgICAgIGR4LFxuICAgICAgICBkeSxcbiAgICAgICAgbW92aW5nLFxuICAgICAgICBzaGlmdGluZyA9IHNpZ25YICYmIHNpZ25ZICYmIGV4cG9ydHMuZXZlbnQuc2hpZnRLZXksXG4gICAgICAgIGxvY2tYLFxuICAgICAgICBsb2NrWSxcbiAgICAgICAgcG9pbnQwID0gbW91c2UodGhhdCksXG4gICAgICAgIHBvaW50ID0gcG9pbnQwLFxuICAgICAgICBlbWl0ID0gZW1pdHRlcih0aGF0LCBhcmd1bWVudHMpLmJlZm9yZXN0YXJ0KCk7XG5cbiAgICBpZiAodHlwZSA9PT0gXCJvdmVybGF5XCIpIHtcbiAgICAgIHN0YXRlLnNlbGVjdGlvbiA9IHNlbGVjdGlvbiA9IFtcbiAgICAgICAgW3cwID0gZGltID09PSBZID8gVyA6IHBvaW50MFswXSwgbjAgPSBkaW0gPT09IFggPyBOIDogcG9pbnQwWzFdXSxcbiAgICAgICAgW2UwID0gZGltID09PSBZID8gRSA6IHcwLCBzMCA9IGRpbSA9PT0gWCA/IFMgOiBuMF1cbiAgICAgIF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHcwID0gc2VsZWN0aW9uWzBdWzBdO1xuICAgICAgbjAgPSBzZWxlY3Rpb25bMF1bMV07XG4gICAgICBlMCA9IHNlbGVjdGlvblsxXVswXTtcbiAgICAgIHMwID0gc2VsZWN0aW9uWzFdWzFdO1xuICAgIH1cblxuICAgIHcxID0gdzA7XG4gICAgbjEgPSBuMDtcbiAgICBlMSA9IGUwO1xuICAgIHMxID0gczA7XG5cbiAgICB2YXIgZ3JvdXAgPSBzZWxlY3QodGhhdClcbiAgICAgICAgLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcIm5vbmVcIik7XG5cbiAgICB2YXIgb3ZlcmxheSA9IGdyb3VwLnNlbGVjdEFsbChcIi5vdmVybGF5XCIpXG4gICAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnNbdHlwZV0pO1xuXG4gICAgaWYgKGV4cG9ydHMuZXZlbnQudG91Y2hlcykge1xuICAgICAgZ3JvdXBcbiAgICAgICAgICAub24oXCJ0b3VjaG1vdmUuYnJ1c2hcIiwgbW92ZWQsIHRydWUpXG4gICAgICAgICAgLm9uKFwidG91Y2hlbmQuYnJ1c2ggdG91Y2hjYW5jZWwuYnJ1c2hcIiwgZW5kZWQsIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdmlldyA9IHNlbGVjdChleHBvcnRzLmV2ZW50LnZpZXcpXG4gICAgICAgICAgLm9uKFwia2V5ZG93bi5icnVzaFwiLCBrZXlkb3duZWQsIHRydWUpXG4gICAgICAgICAgLm9uKFwia2V5dXAuYnJ1c2hcIiwga2V5dXBwZWQsIHRydWUpXG4gICAgICAgICAgLm9uKFwibW91c2Vtb3ZlLmJydXNoXCIsIG1vdmVkLCB0cnVlKVxuICAgICAgICAgIC5vbihcIm1vdXNldXAuYnJ1c2hcIiwgZW5kZWQsIHRydWUpO1xuXG4gICAgICBkcmFnRGlzYWJsZShleHBvcnRzLmV2ZW50LnZpZXcpO1xuICAgIH1cblxuICAgIG5vcHJvcGFnYXRpb24kMSgpO1xuICAgIGludGVycnVwdCh0aGF0KTtcbiAgICByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICBlbWl0LnN0YXJ0KCk7XG5cbiAgICBmdW5jdGlvbiBtb3ZlZCgpIHtcbiAgICAgIHZhciBwb2ludDEgPSBtb3VzZSh0aGF0KTtcbiAgICAgIGlmIChzaGlmdGluZyAmJiAhbG9ja1ggJiYgIWxvY2tZKSB7XG4gICAgICAgIGlmIChNYXRoLmFicyhwb2ludDFbMF0gLSBwb2ludFswXSkgPiBNYXRoLmFicyhwb2ludDFbMV0gLSBwb2ludFsxXSkpIGxvY2tZID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBsb2NrWCA9IHRydWU7XG4gICAgICB9XG4gICAgICBwb2ludCA9IHBvaW50MTtcbiAgICAgIG1vdmluZyA9IHRydWU7XG4gICAgICBub2V2ZW50JDEoKTtcbiAgICAgIG1vdmUoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb3ZlKCkge1xuICAgICAgdmFyIHQ7XG5cbiAgICAgIGR4ID0gcG9pbnRbMF0gLSBwb2ludDBbMF07XG4gICAgICBkeSA9IHBvaW50WzFdIC0gcG9pbnQwWzFdO1xuXG4gICAgICBzd2l0Y2ggKG1vZGUpIHtcbiAgICAgICAgY2FzZSBNT0RFX1NQQUNFOlxuICAgICAgICBjYXNlIE1PREVfRFJBRzoge1xuICAgICAgICAgIGlmIChzaWduWCkgZHggPSBNYXRoLm1heChXIC0gdzAsIE1hdGgubWluKEUgLSBlMCwgZHgpKSwgdzEgPSB3MCArIGR4LCBlMSA9IGUwICsgZHg7XG4gICAgICAgICAgaWYgKHNpZ25ZKSBkeSA9IE1hdGgubWF4KE4gLSBuMCwgTWF0aC5taW4oUyAtIHMwLCBkeSkpLCBuMSA9IG4wICsgZHksIHMxID0gczAgKyBkeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIE1PREVfSEFORExFOiB7XG4gICAgICAgICAgaWYgKHNpZ25YIDwgMCkgZHggPSBNYXRoLm1heChXIC0gdzAsIE1hdGgubWluKEUgLSB3MCwgZHgpKSwgdzEgPSB3MCArIGR4LCBlMSA9IGUwO1xuICAgICAgICAgIGVsc2UgaWYgKHNpZ25YID4gMCkgZHggPSBNYXRoLm1heChXIC0gZTAsIE1hdGgubWluKEUgLSBlMCwgZHgpKSwgdzEgPSB3MCwgZTEgPSBlMCArIGR4O1xuICAgICAgICAgIGlmIChzaWduWSA8IDApIGR5ID0gTWF0aC5tYXgoTiAtIG4wLCBNYXRoLm1pbihTIC0gbjAsIGR5KSksIG4xID0gbjAgKyBkeSwgczEgPSBzMDtcbiAgICAgICAgICBlbHNlIGlmIChzaWduWSA+IDApIGR5ID0gTWF0aC5tYXgoTiAtIHMwLCBNYXRoLm1pbihTIC0gczAsIGR5KSksIG4xID0gbjAsIHMxID0gczAgKyBkeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIE1PREVfQ0VOVEVSOiB7XG4gICAgICAgICAgaWYgKHNpZ25YKSB3MSA9IE1hdGgubWF4KFcsIE1hdGgubWluKEUsIHcwIC0gZHggKiBzaWduWCkpLCBlMSA9IE1hdGgubWF4KFcsIE1hdGgubWluKEUsIGUwICsgZHggKiBzaWduWCkpO1xuICAgICAgICAgIGlmIChzaWduWSkgbjEgPSBNYXRoLm1heChOLCBNYXRoLm1pbihTLCBuMCAtIGR5ICogc2lnblkpKSwgczEgPSBNYXRoLm1heChOLCBNYXRoLm1pbihTLCBzMCArIGR5ICogc2lnblkpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZTEgPCB3MSkge1xuICAgICAgICBzaWduWCAqPSAtMTtcbiAgICAgICAgdCA9IHcwLCB3MCA9IGUwLCBlMCA9IHQ7XG4gICAgICAgIHQgPSB3MSwgdzEgPSBlMSwgZTEgPSB0O1xuICAgICAgICBpZiAodHlwZSBpbiBmbGlwWCkgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnNbdHlwZSA9IGZsaXBYW3R5cGVdXSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzMSA8IG4xKSB7XG4gICAgICAgIHNpZ25ZICo9IC0xO1xuICAgICAgICB0ID0gbjAsIG4wID0gczAsIHMwID0gdDtcbiAgICAgICAgdCA9IG4xLCBuMSA9IHMxLCBzMSA9IHQ7XG4gICAgICAgIGlmICh0eXBlIGluIGZsaXBZKSBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29yc1t0eXBlID0gZmxpcFlbdHlwZV1dKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlLnNlbGVjdGlvbikgc2VsZWN0aW9uID0gc3RhdGUuc2VsZWN0aW9uOyAvLyBNYXkgYmUgc2V0IGJ5IGJydXNoLm1vdmUhXG4gICAgICBpZiAobG9ja1gpIHcxID0gc2VsZWN0aW9uWzBdWzBdLCBlMSA9IHNlbGVjdGlvblsxXVswXTtcbiAgICAgIGlmIChsb2NrWSkgbjEgPSBzZWxlY3Rpb25bMF1bMV0sIHMxID0gc2VsZWN0aW9uWzFdWzFdO1xuXG4gICAgICBpZiAoc2VsZWN0aW9uWzBdWzBdICE9PSB3MVxuICAgICAgICAgIHx8IHNlbGVjdGlvblswXVsxXSAhPT0gbjFcbiAgICAgICAgICB8fCBzZWxlY3Rpb25bMV1bMF0gIT09IGUxXG4gICAgICAgICAgfHwgc2VsZWN0aW9uWzFdWzFdICE9PSBzMSkge1xuICAgICAgICBzdGF0ZS5zZWxlY3Rpb24gPSBbW3cxLCBuMV0sIFtlMSwgczFdXTtcbiAgICAgICAgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgICAgIGVtaXQuYnJ1c2goKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlbmRlZCgpIHtcbiAgICAgIG5vcHJvcGFnYXRpb24kMSgpO1xuICAgICAgaWYgKGV4cG9ydHMuZXZlbnQudG91Y2hlcykge1xuICAgICAgICBpZiAoZXhwb3J0cy5ldmVudC50b3VjaGVzLmxlbmd0aCkgcmV0dXJuO1xuICAgICAgICBpZiAodG91Y2hlbmRpbmcpIGNsZWFyVGltZW91dCh0b3VjaGVuZGluZyk7XG4gICAgICAgIHRvdWNoZW5kaW5nID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsgdG91Y2hlbmRpbmcgPSBudWxsOyB9LCA1MDApOyAvLyBHaG9zdCBjbGlja3MgYXJlIGRlbGF5ZWQhXG4gICAgICAgIGdyb3VwLm9uKFwidG91Y2htb3ZlLmJydXNoIHRvdWNoZW5kLmJydXNoIHRvdWNoY2FuY2VsLmJydXNoXCIsIG51bGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeWVzZHJhZyhleHBvcnRzLmV2ZW50LnZpZXcsIG1vdmluZyk7XG4gICAgICAgIHZpZXcub24oXCJrZXlkb3duLmJydXNoIGtleXVwLmJydXNoIG1vdXNlbW92ZS5icnVzaCBtb3VzZXVwLmJydXNoXCIsIG51bGwpO1xuICAgICAgfVxuICAgICAgZ3JvdXAuYXR0cihcInBvaW50ZXItZXZlbnRzXCIsIFwiYWxsXCIpO1xuICAgICAgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnMub3ZlcmxheSk7XG4gICAgICBpZiAoc3RhdGUuc2VsZWN0aW9uKSBzZWxlY3Rpb24gPSBzdGF0ZS5zZWxlY3Rpb247IC8vIE1heSBiZSBzZXQgYnkgYnJ1c2gubW92ZSAob24gc3RhcnQpIVxuICAgICAgaWYgKGVtcHR5KHNlbGVjdGlvbikpIHN0YXRlLnNlbGVjdGlvbiA9IG51bGwsIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgICAgZW1pdC5lbmQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBrZXlkb3duZWQoKSB7XG4gICAgICBzd2l0Y2ggKGV4cG9ydHMuZXZlbnQua2V5Q29kZSkge1xuICAgICAgICBjYXNlIDE2OiB7IC8vIFNISUZUXG4gICAgICAgICAgc2hpZnRpbmcgPSBzaWduWCAmJiBzaWduWTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDE4OiB7IC8vIEFMVFxuICAgICAgICAgIGlmIChtb2RlID09PSBNT0RFX0hBTkRMRSkge1xuICAgICAgICAgICAgaWYgKHNpZ25YKSBlMCA9IGUxIC0gZHggKiBzaWduWCwgdzAgPSB3MSArIGR4ICogc2lnblg7XG4gICAgICAgICAgICBpZiAoc2lnblkpIHMwID0gczEgLSBkeSAqIHNpZ25ZLCBuMCA9IG4xICsgZHkgKiBzaWduWTtcbiAgICAgICAgICAgIG1vZGUgPSBNT0RFX0NFTlRFUjtcbiAgICAgICAgICAgIG1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAzMjogeyAvLyBTUEFDRTsgdGFrZXMgcHJpb3JpdHkgb3ZlciBBTFRcbiAgICAgICAgICBpZiAobW9kZSA9PT0gTU9ERV9IQU5ETEUgfHwgbW9kZSA9PT0gTU9ERV9DRU5URVIpIHtcbiAgICAgICAgICAgIGlmIChzaWduWCA8IDApIGUwID0gZTEgLSBkeDsgZWxzZSBpZiAoc2lnblggPiAwKSB3MCA9IHcxIC0gZHg7XG4gICAgICAgICAgICBpZiAoc2lnblkgPCAwKSBzMCA9IHMxIC0gZHk7IGVsc2UgaWYgKHNpZ25ZID4gMCkgbjAgPSBuMSAtIGR5O1xuICAgICAgICAgICAgbW9kZSA9IE1PREVfU1BBQ0U7XG4gICAgICAgICAgICBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29ycy5zZWxlY3Rpb24pO1xuICAgICAgICAgICAgbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiByZXR1cm47XG4gICAgICB9XG4gICAgICBub2V2ZW50JDEoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBrZXl1cHBlZCgpIHtcbiAgICAgIHN3aXRjaCAoZXhwb3J0cy5ldmVudC5rZXlDb2RlKSB7XG4gICAgICAgIGNhc2UgMTY6IHsgLy8gU0hJRlRcbiAgICAgICAgICBpZiAoc2hpZnRpbmcpIHtcbiAgICAgICAgICAgIGxvY2tYID0gbG9ja1kgPSBzaGlmdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDE4OiB7IC8vIEFMVFxuICAgICAgICAgIGlmIChtb2RlID09PSBNT0RFX0NFTlRFUikge1xuICAgICAgICAgICAgaWYgKHNpZ25YIDwgMCkgZTAgPSBlMTsgZWxzZSBpZiAoc2lnblggPiAwKSB3MCA9IHcxO1xuICAgICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgczAgPSBzMTsgZWxzZSBpZiAoc2lnblkgPiAwKSBuMCA9IG4xO1xuICAgICAgICAgICAgbW9kZSA9IE1PREVfSEFORExFO1xuICAgICAgICAgICAgbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDMyOiB7IC8vIFNQQUNFXG4gICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfU1BBQ0UpIHtcbiAgICAgICAgICAgIGlmIChleHBvcnRzLmV2ZW50LmFsdEtleSkge1xuICAgICAgICAgICAgICBpZiAoc2lnblgpIGUwID0gZTEgLSBkeCAqIHNpZ25YLCB3MCA9IHcxICsgZHggKiBzaWduWDtcbiAgICAgICAgICAgICAgaWYgKHNpZ25ZKSBzMCA9IHMxIC0gZHkgKiBzaWduWSwgbjAgPSBuMSArIGR5ICogc2lnblk7XG4gICAgICAgICAgICAgIG1vZGUgPSBNT0RFX0NFTlRFUjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmIChzaWduWCA8IDApIGUwID0gZTE7IGVsc2UgaWYgKHNpZ25YID4gMCkgdzAgPSB3MTtcbiAgICAgICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgczAgPSBzMTsgZWxzZSBpZiAoc2lnblkgPiAwKSBuMCA9IG4xO1xuICAgICAgICAgICAgICBtb2RlID0gTU9ERV9IQU5ETEU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29yc1t0eXBlXSk7XG4gICAgICAgICAgICBtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHJldHVybjtcbiAgICAgIH1cbiAgICAgIG5vZXZlbnQkMSgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgdmFyIHN0YXRlID0gdGhpcy5fX2JydXNoIHx8IHtzZWxlY3Rpb246IG51bGx9O1xuICAgIHN0YXRlLmV4dGVudCA9IGV4dGVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHN0YXRlLmRpbSA9IGRpbTtcbiAgICByZXR1cm4gc3RhdGU7XG4gIH1cblxuICBicnVzaC5leHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZXh0ZW50ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQ0KFtbK19bMF1bMF0sICtfWzBdWzFdXSwgWytfWzFdWzBdLCArX1sxXVsxXV1dKSwgYnJ1c2gpIDogZXh0ZW50O1xuICB9O1xuXG4gIGJydXNoLmZpbHRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChmaWx0ZXIgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDQoISFfKSwgYnJ1c2gpIDogZmlsdGVyO1xuICB9O1xuXG4gIGJydXNoLmhhbmRsZVNpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaGFuZGxlU2l6ZSA9ICtfLCBicnVzaCkgOiBoYW5kbGVTaXplO1xuICB9O1xuXG4gIGJydXNoLm9uID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlID0gbGlzdGVuZXJzLm9uLmFwcGx5KGxpc3RlbmVycywgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gdmFsdWUgPT09IGxpc3RlbmVycyA/IGJydXNoIDogdmFsdWU7XG4gIH07XG5cbiAgcmV0dXJuIGJydXNoO1xufVxuXG52YXIgY29zID0gTWF0aC5jb3M7XG52YXIgc2luID0gTWF0aC5zaW47XG52YXIgcGkkMSA9IE1hdGguUEk7XG52YXIgaGFsZlBpJDEgPSBwaSQxIC8gMjtcbnZhciB0YXUkMSA9IHBpJDEgKiAyO1xudmFyIG1heCQxID0gTWF0aC5tYXg7XG5cbmZ1bmN0aW9uIGNvbXBhcmVWYWx1ZShjb21wYXJlKSB7XG4gIHJldHVybiBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGNvbXBhcmUoXG4gICAgICBhLnNvdXJjZS52YWx1ZSArIGEudGFyZ2V0LnZhbHVlLFxuICAgICAgYi5zb3VyY2UudmFsdWUgKyBiLnRhcmdldC52YWx1ZVxuICAgICk7XG4gIH07XG59XG5cbnZhciBjaG9yZCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcGFkQW5nbGUgPSAwLFxuICAgICAgc29ydEdyb3VwcyA9IG51bGwsXG4gICAgICBzb3J0U3ViZ3JvdXBzID0gbnVsbCxcbiAgICAgIHNvcnRDaG9yZHMgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGNob3JkKG1hdHJpeCkge1xuICAgIHZhciBuID0gbWF0cml4Lmxlbmd0aCxcbiAgICAgICAgZ3JvdXBTdW1zID0gW10sXG4gICAgICAgIGdyb3VwSW5kZXggPSBzZXF1ZW5jZShuKSxcbiAgICAgICAgc3ViZ3JvdXBJbmRleCA9IFtdLFxuICAgICAgICBjaG9yZHMgPSBbXSxcbiAgICAgICAgZ3JvdXBzID0gY2hvcmRzLmdyb3VwcyA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG4gKiBuKSxcbiAgICAgICAgayxcbiAgICAgICAgeCxcbiAgICAgICAgeDAsXG4gICAgICAgIGR4LFxuICAgICAgICBpLFxuICAgICAgICBqO1xuXG4gICAgLy8gQ29tcHV0ZSB0aGUgc3VtLlxuICAgIGsgPSAwLCBpID0gLTE7IHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICB4ID0gMCwgaiA9IC0xOyB3aGlsZSAoKytqIDwgbikge1xuICAgICAgICB4ICs9IG1hdHJpeFtpXVtqXTtcbiAgICAgIH1cbiAgICAgIGdyb3VwU3Vtcy5wdXNoKHgpO1xuICAgICAgc3ViZ3JvdXBJbmRleC5wdXNoKHNlcXVlbmNlKG4pKTtcbiAgICAgIGsgKz0geDtcbiAgICB9XG5cbiAgICAvLyBTb3J0IGdyb3Vwc+KAplxuICAgIGlmIChzb3J0R3JvdXBzKSBncm91cEluZGV4LnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgcmV0dXJuIHNvcnRHcm91cHMoZ3JvdXBTdW1zW2FdLCBncm91cFN1bXNbYl0pO1xuICAgIH0pO1xuXG4gICAgLy8gU29ydCBzdWJncm91cHPigKZcbiAgICBpZiAoc29ydFN1Ymdyb3Vwcykgc3ViZ3JvdXBJbmRleC5mb3JFYWNoKGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgIGQuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgIHJldHVybiBzb3J0U3ViZ3JvdXBzKG1hdHJpeFtpXVthXSwgbWF0cml4W2ldW2JdKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gQ29udmVydCB0aGUgc3VtIHRvIHNjYWxpbmcgZmFjdG9yIGZvciBbMCwgMnBpXS5cbiAgICAvLyBUT0RPIEFsbG93IHN0YXJ0IGFuZCBlbmQgYW5nbGUgdG8gYmUgc3BlY2lmaWVkP1xuICAgIC8vIFRPRE8gQWxsb3cgcGFkZGluZyB0byBiZSBzcGVjaWZpZWQgYXMgcGVyY2VudGFnZT9cbiAgICBrID0gbWF4JDEoMCwgdGF1JDEgLSBwYWRBbmdsZSAqIG4pIC8gaztcbiAgICBkeCA9IGsgPyBwYWRBbmdsZSA6IHRhdSQxIC8gbjtcblxuICAgIC8vIENvbXB1dGUgdGhlIHN0YXJ0IGFuZCBlbmQgYW5nbGUgZm9yIGVhY2ggZ3JvdXAgYW5kIHN1Ymdyb3VwLlxuICAgIC8vIE5vdGU6IE9wZXJhIGhhcyBhIGJ1ZyByZW9yZGVyaW5nIG9iamVjdCBsaXRlcmFsIHByb3BlcnRpZXMhXG4gICAgeCA9IDAsIGkgPSAtMTsgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIHgwID0geCwgaiA9IC0xOyB3aGlsZSAoKytqIDwgbikge1xuICAgICAgICB2YXIgZGkgPSBncm91cEluZGV4W2ldLFxuICAgICAgICAgICAgZGogPSBzdWJncm91cEluZGV4W2RpXVtqXSxcbiAgICAgICAgICAgIHYgPSBtYXRyaXhbZGldW2RqXSxcbiAgICAgICAgICAgIGEwID0geCxcbiAgICAgICAgICAgIGExID0geCArPSB2ICogaztcbiAgICAgICAgc3ViZ3JvdXBzW2RqICogbiArIGRpXSA9IHtcbiAgICAgICAgICBpbmRleDogZGksXG4gICAgICAgICAgc3ViaW5kZXg6IGRqLFxuICAgICAgICAgIHN0YXJ0QW5nbGU6IGEwLFxuICAgICAgICAgIGVuZEFuZ2xlOiBhMSxcbiAgICAgICAgICB2YWx1ZTogdlxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgZ3JvdXBzW2RpXSA9IHtcbiAgICAgICAgaW5kZXg6IGRpLFxuICAgICAgICBzdGFydEFuZ2xlOiB4MCxcbiAgICAgICAgZW5kQW5nbGU6IHgsXG4gICAgICAgIHZhbHVlOiBncm91cFN1bXNbZGldXG4gICAgICB9O1xuICAgICAgeCArPSBkeDtcbiAgICB9XG5cbiAgICAvLyBHZW5lcmF0ZSBjaG9yZHMgZm9yIGVhY2ggKG5vbi1lbXB0eSkgc3ViZ3JvdXAtc3ViZ3JvdXAgbGluay5cbiAgICBpID0gLTE7IHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBqID0gaSAtIDE7IHdoaWxlICgrK2ogPCBuKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBzdWJncm91cHNbaiAqIG4gKyBpXSxcbiAgICAgICAgICAgIHRhcmdldCA9IHN1Ymdyb3Vwc1tpICogbiArIGpdO1xuICAgICAgICBpZiAoc291cmNlLnZhbHVlIHx8IHRhcmdldC52YWx1ZSkge1xuICAgICAgICAgIGNob3Jkcy5wdXNoKHNvdXJjZS52YWx1ZSA8IHRhcmdldC52YWx1ZVxuICAgICAgICAgICAgICA/IHtzb3VyY2U6IHRhcmdldCwgdGFyZ2V0OiBzb3VyY2V9XG4gICAgICAgICAgICAgIDoge3NvdXJjZTogc291cmNlLCB0YXJnZXQ6IHRhcmdldH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNvcnRDaG9yZHMgPyBjaG9yZHMuc29ydChzb3J0Q2hvcmRzKSA6IGNob3JkcztcbiAgfVxuXG4gIGNob3JkLnBhZEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZEFuZ2xlID0gbWF4JDEoMCwgXyksIGNob3JkKSA6IHBhZEFuZ2xlO1xuICB9O1xuXG4gIGNob3JkLnNvcnRHcm91cHMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc29ydEdyb3VwcyA9IF8sIGNob3JkKSA6IHNvcnRHcm91cHM7XG4gIH07XG5cbiAgY2hvcmQuc29ydFN1Ymdyb3VwcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzb3J0U3ViZ3JvdXBzID0gXywgY2hvcmQpIDogc29ydFN1Ymdyb3VwcztcbiAgfTtcblxuICBjaG9yZC5zb3J0Q2hvcmRzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKF8gPT0gbnVsbCA/IHNvcnRDaG9yZHMgPSBudWxsIDogKHNvcnRDaG9yZHMgPSBjb21wYXJlVmFsdWUoXykpLl8gPSBfLCBjaG9yZCkgOiBzb3J0Q2hvcmRzICYmIHNvcnRDaG9yZHMuXztcbiAgfTtcblxuICByZXR1cm4gY2hvcmQ7XG59O1xuXG52YXIgc2xpY2UkMiA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcblxudmFyIGNvbnN0YW50JDUgPSBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn07XG5cbnZhciBwaSQyID0gTWF0aC5QSTtcbnZhciB0YXUkMiA9IDIgKiBwaSQyO1xudmFyIGVwc2lsb24kMSA9IDFlLTY7XG52YXIgdGF1RXBzaWxvbiA9IHRhdSQyIC0gZXBzaWxvbiQxO1xuXG5mdW5jdGlvbiBQYXRoKCkge1xuICB0aGlzLl94MCA9IHRoaXMuX3kwID0gLy8gc3RhcnQgb2YgY3VycmVudCBzdWJwYXRoXG4gIHRoaXMuX3gxID0gdGhpcy5feTEgPSBudWxsOyAvLyBlbmQgb2YgY3VycmVudCBzdWJwYXRoXG4gIHRoaXMuXyA9IFwiXCI7XG59XG5cbmZ1bmN0aW9uIHBhdGgoKSB7XG4gIHJldHVybiBuZXcgUGF0aDtcbn1cblxuUGF0aC5wcm90b3R5cGUgPSBwYXRoLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFBhdGgsXG4gIG1vdmVUbzogZnVuY3Rpb24oeCwgeSkge1xuICAgIHRoaXMuXyArPSBcIk1cIiArICh0aGlzLl94MCA9IHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTAgPSB0aGlzLl95MSA9ICt5KTtcbiAgfSxcbiAgY2xvc2VQYXRoOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5feDEgIT09IG51bGwpIHtcbiAgICAgIHRoaXMuX3gxID0gdGhpcy5feDAsIHRoaXMuX3kxID0gdGhpcy5feTA7XG4gICAgICB0aGlzLl8gKz0gXCJaXCI7XG4gICAgfVxuICB9LFxuICBsaW5lVG86IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB0aGlzLl8gKz0gXCJMXCIgKyAodGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MSA9ICt5KTtcbiAgfSxcbiAgcXVhZHJhdGljQ3VydmVUbzogZnVuY3Rpb24oeDEsIHkxLCB4LCB5KSB7XG4gICAgdGhpcy5fICs9IFwiUVwiICsgKCt4MSkgKyBcIixcIiArICgreTEpICsgXCIsXCIgKyAodGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MSA9ICt5KTtcbiAgfSxcbiAgYmV6aWVyQ3VydmVUbzogZnVuY3Rpb24oeDEsIHkxLCB4MiwgeTIsIHgsIHkpIHtcbiAgICB0aGlzLl8gKz0gXCJDXCIgKyAoK3gxKSArIFwiLFwiICsgKCt5MSkgKyBcIixcIiArICgreDIpICsgXCIsXCIgKyAoK3kyKSArIFwiLFwiICsgKHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTEgPSAreSk7XG4gIH0sXG4gIGFyY1RvOiBmdW5jdGlvbih4MSwgeTEsIHgyLCB5Miwgcikge1xuICAgIHgxID0gK3gxLCB5MSA9ICt5MSwgeDIgPSAreDIsIHkyID0gK3kyLCByID0gK3I7XG4gICAgdmFyIHgwID0gdGhpcy5feDEsXG4gICAgICAgIHkwID0gdGhpcy5feTEsXG4gICAgICAgIHgyMSA9IHgyIC0geDEsXG4gICAgICAgIHkyMSA9IHkyIC0geTEsXG4gICAgICAgIHgwMSA9IHgwIC0geDEsXG4gICAgICAgIHkwMSA9IHkwIC0geTEsXG4gICAgICAgIGwwMV8yID0geDAxICogeDAxICsgeTAxICogeTAxO1xuXG4gICAgLy8gSXMgdGhlIHJhZGl1cyBuZWdhdGl2ZT8gRXJyb3IuXG4gICAgaWYgKHIgPCAwKSB0aHJvdyBuZXcgRXJyb3IoXCJuZWdhdGl2ZSByYWRpdXM6IFwiICsgcik7XG5cbiAgICAvLyBJcyB0aGlzIHBhdGggZW1wdHk/IE1vdmUgdG8gKHgxLHkxKS5cbiAgICBpZiAodGhpcy5feDEgPT09IG51bGwpIHtcbiAgICAgIHRoaXMuXyArPSBcIk1cIiArICh0aGlzLl94MSA9IHgxKSArIFwiLFwiICsgKHRoaXMuX3kxID0geTEpO1xuICAgIH1cblxuICAgIC8vIE9yLCBpcyAoeDEseTEpIGNvaW5jaWRlbnQgd2l0aCAoeDAseTApPyBEbyBub3RoaW5nLlxuICAgIGVsc2UgaWYgKCEobDAxXzIgPiBlcHNpbG9uJDEpKSB7fVxuXG4gICAgLy8gT3IsIGFyZSAoeDAseTApLCAoeDEseTEpIGFuZCAoeDIseTIpIGNvbGxpbmVhcj9cbiAgICAvLyBFcXVpdmFsZW50bHksIGlzICh4MSx5MSkgY29pbmNpZGVudCB3aXRoICh4Mix5Mik/XG4gICAgLy8gT3IsIGlzIHRoZSByYWRpdXMgemVybz8gTGluZSB0byAoeDEseTEpLlxuICAgIGVsc2UgaWYgKCEoTWF0aC5hYnMoeTAxICogeDIxIC0geTIxICogeDAxKSA+IGVwc2lsb24kMSkgfHwgIXIpIHtcbiAgICAgIHRoaXMuXyArPSBcIkxcIiArICh0aGlzLl94MSA9IHgxKSArIFwiLFwiICsgKHRoaXMuX3kxID0geTEpO1xuICAgIH1cblxuICAgIC8vIE90aGVyd2lzZSwgZHJhdyBhbiBhcmMhXG4gICAgZWxzZSB7XG4gICAgICB2YXIgeDIwID0geDIgLSB4MCxcbiAgICAgICAgICB5MjAgPSB5MiAtIHkwLFxuICAgICAgICAgIGwyMV8yID0geDIxICogeDIxICsgeTIxICogeTIxLFxuICAgICAgICAgIGwyMF8yID0geDIwICogeDIwICsgeTIwICogeTIwLFxuICAgICAgICAgIGwyMSA9IE1hdGguc3FydChsMjFfMiksXG4gICAgICAgICAgbDAxID0gTWF0aC5zcXJ0KGwwMV8yKSxcbiAgICAgICAgICBsID0gciAqIE1hdGgudGFuKChwaSQyIC0gTWF0aC5hY29zKChsMjFfMiArIGwwMV8yIC0gbDIwXzIpIC8gKDIgKiBsMjEgKiBsMDEpKSkgLyAyKSxcbiAgICAgICAgICB0MDEgPSBsIC8gbDAxLFxuICAgICAgICAgIHQyMSA9IGwgLyBsMjE7XG5cbiAgICAgIC8vIElmIHRoZSBzdGFydCB0YW5nZW50IGlzIG5vdCBjb2luY2lkZW50IHdpdGggKHgwLHkwKSwgbGluZSB0by5cbiAgICAgIGlmIChNYXRoLmFicyh0MDEgLSAxKSA+IGVwc2lsb24kMSkge1xuICAgICAgICB0aGlzLl8gKz0gXCJMXCIgKyAoeDEgKyB0MDEgKiB4MDEpICsgXCIsXCIgKyAoeTEgKyB0MDEgKiB5MDEpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl8gKz0gXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIsMCwwLFwiICsgKCsoeTAxICogeDIwID4geDAxICogeTIwKSkgKyBcIixcIiArICh0aGlzLl94MSA9IHgxICsgdDIxICogeDIxKSArIFwiLFwiICsgKHRoaXMuX3kxID0geTEgKyB0MjEgKiB5MjEpO1xuICAgIH1cbiAgfSxcbiAgYXJjOiBmdW5jdGlvbih4LCB5LCByLCBhMCwgYTEsIGNjdykge1xuICAgIHggPSAreCwgeSA9ICt5LCByID0gK3I7XG4gICAgdmFyIGR4ID0gciAqIE1hdGguY29zKGEwKSxcbiAgICAgICAgZHkgPSByICogTWF0aC5zaW4oYTApLFxuICAgICAgICB4MCA9IHggKyBkeCxcbiAgICAgICAgeTAgPSB5ICsgZHksXG4gICAgICAgIGN3ID0gMSBeIGNjdyxcbiAgICAgICAgZGEgPSBjY3cgPyBhMCAtIGExIDogYTEgLSBhMDtcblxuICAgIC8vIElzIHRoZSByYWRpdXMgbmVnYXRpdmU/IEVycm9yLlxuICAgIGlmIChyIDwgMCkgdGhyb3cgbmV3IEVycm9yKFwibmVnYXRpdmUgcmFkaXVzOiBcIiArIHIpO1xuXG4gICAgLy8gSXMgdGhpcyBwYXRoIGVtcHR5PyBNb3ZlIHRvICh4MCx5MCkuXG4gICAgaWYgKHRoaXMuX3gxID09PSBudWxsKSB7XG4gICAgICB0aGlzLl8gKz0gXCJNXCIgKyB4MCArIFwiLFwiICsgeTA7XG4gICAgfVxuXG4gICAgLy8gT3IsIGlzICh4MCx5MCkgbm90IGNvaW5jaWRlbnQgd2l0aCB0aGUgcHJldmlvdXMgcG9pbnQ/IExpbmUgdG8gKHgwLHkwKS5cbiAgICBlbHNlIGlmIChNYXRoLmFicyh0aGlzLl94MSAtIHgwKSA+IGVwc2lsb24kMSB8fCBNYXRoLmFicyh0aGlzLl95MSAtIHkwKSA+IGVwc2lsb24kMSkge1xuICAgICAgdGhpcy5fICs9IFwiTFwiICsgeDAgKyBcIixcIiArIHkwO1xuICAgIH1cblxuICAgIC8vIElzIHRoaXMgYXJjIGVtcHR5PyBXZeKAmXJlIGRvbmUuXG4gICAgaWYgKCFyKSByZXR1cm47XG5cbiAgICAvLyBEb2VzIHRoZSBhbmdsZSBnbyB0aGUgd3Jvbmcgd2F5PyBGbGlwIHRoZSBkaXJlY3Rpb24uXG4gICAgaWYgKGRhIDwgMCkgZGEgPSBkYSAlIHRhdSQyICsgdGF1JDI7XG5cbiAgICAvLyBJcyB0aGlzIGEgY29tcGxldGUgY2lyY2xlPyBEcmF3IHR3byBhcmNzIHRvIGNvbXBsZXRlIHRoZSBjaXJjbGUuXG4gICAgaWYgKGRhID4gdGF1RXBzaWxvbikge1xuICAgICAgdGhpcy5fICs9IFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsMSxcIiArIGN3ICsgXCIsXCIgKyAoeCAtIGR4KSArIFwiLFwiICsgKHkgLSBkeSkgKyBcIkFcIiArIHIgKyBcIixcIiArIHIgKyBcIiwwLDEsXCIgKyBjdyArIFwiLFwiICsgKHRoaXMuX3gxID0geDApICsgXCIsXCIgKyAodGhpcy5feTEgPSB5MCk7XG4gICAgfVxuXG4gICAgLy8gSXMgdGhpcyBhcmMgbm9uLWVtcHR5PyBEcmF3IGFuIGFyYyFcbiAgICBlbHNlIGlmIChkYSA+IGVwc2lsb24kMSkge1xuICAgICAgdGhpcy5fICs9IFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsXCIgKyAoKyhkYSA+PSBwaSQyKSkgKyBcIixcIiArIGN3ICsgXCIsXCIgKyAodGhpcy5feDEgPSB4ICsgciAqIE1hdGguY29zKGExKSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkgKyByICogTWF0aC5zaW4oYTEpKTtcbiAgICB9XG4gIH0sXG4gIHJlY3Q6IGZ1bmN0aW9uKHgsIHksIHcsIGgpIHtcbiAgICB0aGlzLl8gKz0gXCJNXCIgKyAodGhpcy5feDAgPSB0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kwID0gdGhpcy5feTEgPSAreSkgKyBcImhcIiArICgrdykgKyBcInZcIiArICgraCkgKyBcImhcIiArICgtdykgKyBcIlpcIjtcbiAgfSxcbiAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl87XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGRlZmF1bHRTb3VyY2UoZCkge1xuICByZXR1cm4gZC5zb3VyY2U7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRUYXJnZXQoZCkge1xuICByZXR1cm4gZC50YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRSYWRpdXMoZCkge1xuICByZXR1cm4gZC5yYWRpdXM7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRTdGFydEFuZ2xlKGQpIHtcbiAgcmV0dXJuIGQuc3RhcnRBbmdsZTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdEVuZEFuZ2xlKGQpIHtcbiAgcmV0dXJuIGQuZW5kQW5nbGU7XG59XG5cbnZhciByaWJib24gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHNvdXJjZSA9IGRlZmF1bHRTb3VyY2UsXG4gICAgICB0YXJnZXQgPSBkZWZhdWx0VGFyZ2V0LFxuICAgICAgcmFkaXVzID0gZGVmYXVsdFJhZGl1cyxcbiAgICAgIHN0YXJ0QW5nbGUgPSBkZWZhdWx0U3RhcnRBbmdsZSxcbiAgICAgIGVuZEFuZ2xlID0gZGVmYXVsdEVuZEFuZ2xlLFxuICAgICAgY29udGV4dCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gcmliYm9uKCkge1xuICAgIHZhciBidWZmZXIsXG4gICAgICAgIGFyZ3YgPSBzbGljZSQyLmNhbGwoYXJndW1lbnRzKSxcbiAgICAgICAgcyA9IHNvdXJjZS5hcHBseSh0aGlzLCBhcmd2KSxcbiAgICAgICAgdCA9IHRhcmdldC5hcHBseSh0aGlzLCBhcmd2KSxcbiAgICAgICAgc3IgPSArcmFkaXVzLmFwcGx5KHRoaXMsIChhcmd2WzBdID0gcywgYXJndikpLFxuICAgICAgICBzYTAgPSBzdGFydEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3YpIC0gaGFsZlBpJDEsXG4gICAgICAgIHNhMSA9IGVuZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3YpIC0gaGFsZlBpJDEsXG4gICAgICAgIHN4MCA9IHNyICogY29zKHNhMCksXG4gICAgICAgIHN5MCA9IHNyICogc2luKHNhMCksXG4gICAgICAgIHRyID0gK3JhZGl1cy5hcHBseSh0aGlzLCAoYXJndlswXSA9IHQsIGFyZ3YpKSxcbiAgICAgICAgdGEwID0gc3RhcnRBbmdsZS5hcHBseSh0aGlzLCBhcmd2KSAtIGhhbGZQaSQxLFxuICAgICAgICB0YTEgPSBlbmRBbmdsZS5hcHBseSh0aGlzLCBhcmd2KSAtIGhhbGZQaSQxO1xuXG4gICAgaWYgKCFjb250ZXh0KSBjb250ZXh0ID0gYnVmZmVyID0gcGF0aCgpO1xuXG4gICAgY29udGV4dC5tb3ZlVG8oc3gwLCBzeTApO1xuICAgIGNvbnRleHQuYXJjKDAsIDAsIHNyLCBzYTAsIHNhMSk7XG4gICAgaWYgKHNhMCAhPT0gdGEwIHx8IHNhMSAhPT0gdGExKSB7IC8vIFRPRE8gc3IgIT09IHRyP1xuICAgICAgY29udGV4dC5xdWFkcmF0aWNDdXJ2ZVRvKDAsIDAsIHRyICogY29zKHRhMCksIHRyICogc2luKHRhMCkpO1xuICAgICAgY29udGV4dC5hcmMoMCwgMCwgdHIsIHRhMCwgdGExKTtcbiAgICB9XG4gICAgY29udGV4dC5xdWFkcmF0aWNDdXJ2ZVRvKDAsIDAsIHN4MCwgc3kwKTtcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuXG4gICAgaWYgKGJ1ZmZlcikgcmV0dXJuIGNvbnRleHQgPSBudWxsLCBidWZmZXIgKyBcIlwiIHx8IG51bGw7XG4gIH1cblxuICByaWJib24ucmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhZGl1cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkNSgrXyksIHJpYmJvbikgOiByYWRpdXM7XG4gIH07XG5cbiAgcmliYm9uLnN0YXJ0QW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3RhcnRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkNSgrXyksIHJpYmJvbikgOiBzdGFydEFuZ2xlO1xuICB9O1xuXG4gIHJpYmJvbi5lbmRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChlbmRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkNSgrXyksIHJpYmJvbikgOiBlbmRBbmdsZTtcbiAgfTtcblxuICByaWJib24uc291cmNlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNvdXJjZSA9IF8sIHJpYmJvbikgOiBzb3VyY2U7XG4gIH07XG5cbiAgcmliYm9uLnRhcmdldCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0YXJnZXQgPSBfLCByaWJib24pIDogdGFyZ2V0O1xuICB9O1xuXG4gIHJpYmJvbi5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKChjb250ZXh0ID0gXyA9PSBudWxsID8gbnVsbCA6IF8pLCByaWJib24pIDogY29udGV4dDtcbiAgfTtcblxuICByZXR1cm4gcmliYm9uO1xufTtcblxudmFyIHByZWZpeCA9IFwiJFwiO1xuXG5mdW5jdGlvbiBNYXAoKSB7fVxuXG5NYXAucHJvdG90eXBlID0gbWFwJDEucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogTWFwLFxuICBoYXM6IGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiAocHJlZml4ICsga2V5KSBpbiB0aGlzO1xuICB9LFxuICBnZXQ6IGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiB0aGlzW3ByZWZpeCArIGtleV07XG4gIH0sXG4gIHNldDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgIHRoaXNbcHJlZml4ICsga2V5XSA9IHZhbHVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICByZW1vdmU6IGZ1bmN0aW9uKGtleSkge1xuICAgIHZhciBwcm9wZXJ0eSA9IHByZWZpeCArIGtleTtcbiAgICByZXR1cm4gcHJvcGVydHkgaW4gdGhpcyAmJiBkZWxldGUgdGhpc1twcm9wZXJ0eV07XG4gIH0sXG4gIGNsZWFyOiBmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgZGVsZXRlIHRoaXNbcHJvcGVydHldO1xuICB9LFxuICBrZXlzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSBrZXlzLnB1c2gocHJvcGVydHkuc2xpY2UoMSkpO1xuICAgIHJldHVybiBrZXlzO1xuICB9LFxuICB2YWx1ZXM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgdmFsdWVzLnB1c2godGhpc1twcm9wZXJ0eV0pO1xuICAgIHJldHVybiB2YWx1ZXM7XG4gIH0sXG4gIGVudHJpZXM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBlbnRyaWVzID0gW107XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGVudHJpZXMucHVzaCh7a2V5OiBwcm9wZXJ0eS5zbGljZSgxKSwgdmFsdWU6IHRoaXNbcHJvcGVydHldfSk7XG4gICAgcmV0dXJuIGVudHJpZXM7XG4gIH0sXG4gIHNpemU6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzaXplID0gMDtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgKytzaXplO1xuICAgIHJldHVybiBzaXplO1xuICB9LFxuICBlbXB0eTogZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgZWFjaDogZnVuY3Rpb24oZikge1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSBmKHRoaXNbcHJvcGVydHldLCBwcm9wZXJ0eS5zbGljZSgxKSwgdGhpcyk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIG1hcCQxKG9iamVjdCwgZikge1xuICB2YXIgbWFwID0gbmV3IE1hcDtcblxuICAvLyBDb3B5IGNvbnN0cnVjdG9yLlxuICBpZiAob2JqZWN0IGluc3RhbmNlb2YgTWFwKSBvYmplY3QuZWFjaChmdW5jdGlvbih2YWx1ZSwga2V5KSB7IG1hcC5zZXQoa2V5LCB2YWx1ZSk7IH0pO1xuXG4gIC8vIEluZGV4IGFycmF5IGJ5IG51bWVyaWMgaW5kZXggb3Igc3BlY2lmaWVkIGtleSBmdW5jdGlvbi5cbiAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvYmplY3QpKSB7XG4gICAgdmFyIGkgPSAtMSxcbiAgICAgICAgbiA9IG9iamVjdC5sZW5ndGgsXG4gICAgICAgIG87XG5cbiAgICBpZiAoZiA9PSBudWxsKSB3aGlsZSAoKytpIDwgbikgbWFwLnNldChpLCBvYmplY3RbaV0pO1xuICAgIGVsc2Ugd2hpbGUgKCsraSA8IG4pIG1hcC5zZXQoZihvID0gb2JqZWN0W2ldLCBpLCBvYmplY3QpLCBvKTtcbiAgfVxuXG4gIC8vIENvbnZlcnQgb2JqZWN0IHRvIG1hcC5cbiAgZWxzZSBpZiAob2JqZWN0KSBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSBtYXAuc2V0KGtleSwgb2JqZWN0W2tleV0pO1xuXG4gIHJldHVybiBtYXA7XG59XG5cbnZhciBuZXN0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBrZXlzID0gW10sXG4gICAgICBzb3J0S2V5cyA9IFtdLFxuICAgICAgc29ydFZhbHVlcyxcbiAgICAgIHJvbGx1cCxcbiAgICAgIG5lc3Q7XG5cbiAgZnVuY3Rpb24gYXBwbHkoYXJyYXksIGRlcHRoLCBjcmVhdGVSZXN1bHQsIHNldFJlc3VsdCkge1xuICAgIGlmIChkZXB0aCA+PSBrZXlzLmxlbmd0aCkge1xuICAgICAgaWYgKHNvcnRWYWx1ZXMgIT0gbnVsbCkgYXJyYXkuc29ydChzb3J0VmFsdWVzKTtcbiAgICAgIHJldHVybiByb2xsdXAgIT0gbnVsbCA/IHJvbGx1cChhcnJheSkgOiBhcnJheTtcbiAgICB9XG5cbiAgICB2YXIgaSA9IC0xLFxuICAgICAgICBuID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICBrZXkgPSBrZXlzW2RlcHRoKytdLFxuICAgICAgICBrZXlWYWx1ZSxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHZhbHVlc0J5S2V5ID0gbWFwJDEoKSxcbiAgICAgICAgdmFsdWVzLFxuICAgICAgICByZXN1bHQgPSBjcmVhdGVSZXN1bHQoKTtcblxuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAodmFsdWVzID0gdmFsdWVzQnlLZXkuZ2V0KGtleVZhbHVlID0ga2V5KHZhbHVlID0gYXJyYXlbaV0pICsgXCJcIikpIHtcbiAgICAgICAgdmFsdWVzLnB1c2godmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWVzQnlLZXkuc2V0KGtleVZhbHVlLCBbdmFsdWVdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YWx1ZXNCeUtleS5lYWNoKGZ1bmN0aW9uKHZhbHVlcywga2V5KSB7XG4gICAgICBzZXRSZXN1bHQocmVzdWx0LCBrZXksIGFwcGx5KHZhbHVlcywgZGVwdGgsIGNyZWF0ZVJlc3VsdCwgc2V0UmVzdWx0KSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gZW50cmllcyhtYXAsIGRlcHRoKSB7XG4gICAgaWYgKCsrZGVwdGggPiBrZXlzLmxlbmd0aCkgcmV0dXJuIG1hcDtcbiAgICB2YXIgYXJyYXksIHNvcnRLZXkgPSBzb3J0S2V5c1tkZXB0aCAtIDFdO1xuICAgIGlmIChyb2xsdXAgIT0gbnVsbCAmJiBkZXB0aCA+PSBrZXlzLmxlbmd0aCkgYXJyYXkgPSBtYXAuZW50cmllcygpO1xuICAgIGVsc2UgYXJyYXkgPSBbXSwgbWFwLmVhY2goZnVuY3Rpb24odiwgaykgeyBhcnJheS5wdXNoKHtrZXk6IGssIHZhbHVlczogZW50cmllcyh2LCBkZXB0aCl9KTsgfSk7XG4gICAgcmV0dXJuIHNvcnRLZXkgIT0gbnVsbCA/IGFycmF5LnNvcnQoZnVuY3Rpb24oYSwgYikgeyByZXR1cm4gc29ydEtleShhLmtleSwgYi5rZXkpOyB9KSA6IGFycmF5O1xuICB9XG5cbiAgcmV0dXJuIG5lc3QgPSB7XG4gICAgb2JqZWN0OiBmdW5jdGlvbihhcnJheSkgeyByZXR1cm4gYXBwbHkoYXJyYXksIDAsIGNyZWF0ZU9iamVjdCwgc2V0T2JqZWN0KTsgfSxcbiAgICBtYXA6IGZ1bmN0aW9uKGFycmF5KSB7IHJldHVybiBhcHBseShhcnJheSwgMCwgY3JlYXRlTWFwLCBzZXRNYXApOyB9LFxuICAgIGVudHJpZXM6IGZ1bmN0aW9uKGFycmF5KSB7IHJldHVybiBlbnRyaWVzKGFwcGx5KGFycmF5LCAwLCBjcmVhdGVNYXAsIHNldE1hcCksIDApOyB9LFxuICAgIGtleTogZnVuY3Rpb24oZCkgeyBrZXlzLnB1c2goZCk7IHJldHVybiBuZXN0OyB9LFxuICAgIHNvcnRLZXlzOiBmdW5jdGlvbihvcmRlcikgeyBzb3J0S2V5c1trZXlzLmxlbmd0aCAtIDFdID0gb3JkZXI7IHJldHVybiBuZXN0OyB9LFxuICAgIHNvcnRWYWx1ZXM6IGZ1bmN0aW9uKG9yZGVyKSB7IHNvcnRWYWx1ZXMgPSBvcmRlcjsgcmV0dXJuIG5lc3Q7IH0sXG4gICAgcm9sbHVwOiBmdW5jdGlvbihmKSB7IHJvbGx1cCA9IGY7IHJldHVybiBuZXN0OyB9XG4gIH07XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVPYmplY3QoKSB7XG4gIHJldHVybiB7fTtcbn1cblxuZnVuY3Rpb24gc2V0T2JqZWN0KG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVNYXAoKSB7XG4gIHJldHVybiBtYXAkMSgpO1xufVxuXG5mdW5jdGlvbiBzZXRNYXAobWFwLCBrZXksIHZhbHVlKSB7XG4gIG1hcC5zZXQoa2V5LCB2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIFNldCgpIHt9XG5cbnZhciBwcm90byA9IG1hcCQxLnByb3RvdHlwZTtcblxuU2V0LnByb3RvdHlwZSA9IHNldCQyLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFNldCxcbiAgaGFzOiBwcm90by5oYXMsXG4gIGFkZDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YWx1ZSArPSBcIlwiO1xuICAgIHRoaXNbcHJlZml4ICsgdmFsdWVdID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIHJlbW92ZTogcHJvdG8ucmVtb3ZlLFxuICBjbGVhcjogcHJvdG8uY2xlYXIsXG4gIHZhbHVlczogcHJvdG8ua2V5cyxcbiAgc2l6ZTogcHJvdG8uc2l6ZSxcbiAgZW1wdHk6IHByb3RvLmVtcHR5LFxuICBlYWNoOiBwcm90by5lYWNoXG59O1xuXG5mdW5jdGlvbiBzZXQkMihvYmplY3QsIGYpIHtcbiAgdmFyIHNldCA9IG5ldyBTZXQ7XG5cbiAgLy8gQ29weSBjb25zdHJ1Y3Rvci5cbiAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIFNldCkgb2JqZWN0LmVhY2goZnVuY3Rpb24odmFsdWUpIHsgc2V0LmFkZCh2YWx1ZSk7IH0pO1xuXG4gIC8vIE90aGVyd2lzZSwgYXNzdW1lIGl04oCZcyBhbiBhcnJheS5cbiAgZWxzZSBpZiAob2JqZWN0KSB7XG4gICAgdmFyIGkgPSAtMSwgbiA9IG9iamVjdC5sZW5ndGg7XG4gICAgaWYgKGYgPT0gbnVsbCkgd2hpbGUgKCsraSA8IG4pIHNldC5hZGQob2JqZWN0W2ldKTtcbiAgICBlbHNlIHdoaWxlICgrK2kgPCBuKSBzZXQuYWRkKGYob2JqZWN0W2ldLCBpLCBvYmplY3QpKTtcbiAgfVxuXG4gIHJldHVybiBzZXQ7XG59XG5cbnZhciBrZXlzID0gZnVuY3Rpb24obWFwKSB7XG4gIHZhciBrZXlzID0gW107XG4gIGZvciAodmFyIGtleSBpbiBtYXApIGtleXMucHVzaChrZXkpO1xuICByZXR1cm4ga2V5cztcbn07XG5cbnZhciB2YWx1ZXMgPSBmdW5jdGlvbihtYXApIHtcbiAgdmFyIHZhbHVlcyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gbWFwKSB2YWx1ZXMucHVzaChtYXBba2V5XSk7XG4gIHJldHVybiB2YWx1ZXM7XG59O1xuXG52YXIgZW50cmllcyA9IGZ1bmN0aW9uKG1hcCkge1xuICB2YXIgZW50cmllcyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gbWFwKSBlbnRyaWVzLnB1c2goe2tleToga2V5LCB2YWx1ZTogbWFwW2tleV19KTtcbiAgcmV0dXJuIGVudHJpZXM7XG59O1xuXG5mdW5jdGlvbiBvYmplY3RDb252ZXJ0ZXIoY29sdW1ucykge1xuICByZXR1cm4gbmV3IEZ1bmN0aW9uKFwiZFwiLCBcInJldHVybiB7XCIgKyBjb2x1bW5zLm1hcChmdW5jdGlvbihuYW1lLCBpKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG5hbWUpICsgXCI6IGRbXCIgKyBpICsgXCJdXCI7XG4gIH0pLmpvaW4oXCIsXCIpICsgXCJ9XCIpO1xufVxuXG5mdW5jdGlvbiBjdXN0b21Db252ZXJ0ZXIoY29sdW1ucywgZikge1xuICB2YXIgb2JqZWN0ID0gb2JqZWN0Q29udmVydGVyKGNvbHVtbnMpO1xuICByZXR1cm4gZnVuY3Rpb24ocm93LCBpKSB7XG4gICAgcmV0dXJuIGYob2JqZWN0KHJvdyksIGksIGNvbHVtbnMpO1xuICB9O1xufVxuXG4vLyBDb21wdXRlIHVuaXF1ZSBjb2x1bW5zIGluIG9yZGVyIG9mIGRpc2NvdmVyeS5cbmZ1bmN0aW9uIGluZmVyQ29sdW1ucyhyb3dzKSB7XG4gIHZhciBjb2x1bW5TZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpLFxuICAgICAgY29sdW1ucyA9IFtdO1xuXG4gIHJvd3MuZm9yRWFjaChmdW5jdGlvbihyb3cpIHtcbiAgICBmb3IgKHZhciBjb2x1bW4gaW4gcm93KSB7XG4gICAgICBpZiAoIShjb2x1bW4gaW4gY29sdW1uU2V0KSkge1xuICAgICAgICBjb2x1bW5zLnB1c2goY29sdW1uU2V0W2NvbHVtbl0gPSBjb2x1bW4pO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGNvbHVtbnM7XG59XG5cbnZhciBkc3YgPSBmdW5jdGlvbihkZWxpbWl0ZXIpIHtcbiAgdmFyIHJlRm9ybWF0ID0gbmV3IFJlZ0V4cChcIltcXFwiXCIgKyBkZWxpbWl0ZXIgKyBcIlxcblxccl1cIiksXG4gICAgICBkZWxpbWl0ZXJDb2RlID0gZGVsaW1pdGVyLmNoYXJDb2RlQXQoMCk7XG5cbiAgZnVuY3Rpb24gcGFyc2UodGV4dCwgZikge1xuICAgIHZhciBjb252ZXJ0LCBjb2x1bW5zLCByb3dzID0gcGFyc2VSb3dzKHRleHQsIGZ1bmN0aW9uKHJvdywgaSkge1xuICAgICAgaWYgKGNvbnZlcnQpIHJldHVybiBjb252ZXJ0KHJvdywgaSAtIDEpO1xuICAgICAgY29sdW1ucyA9IHJvdywgY29udmVydCA9IGYgPyBjdXN0b21Db252ZXJ0ZXIocm93LCBmKSA6IG9iamVjdENvbnZlcnRlcihyb3cpO1xuICAgIH0pO1xuICAgIHJvd3MuY29sdW1ucyA9IGNvbHVtbnM7XG4gICAgcmV0dXJuIHJvd3M7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVJvd3ModGV4dCwgZikge1xuICAgIHZhciBFT0wgPSB7fSwgLy8gc2VudGluZWwgdmFsdWUgZm9yIGVuZC1vZi1saW5lXG4gICAgICAgIEVPRiA9IHt9LCAvLyBzZW50aW5lbCB2YWx1ZSBmb3IgZW5kLW9mLWZpbGVcbiAgICAgICAgcm93cyA9IFtdLCAvLyBvdXRwdXQgcm93c1xuICAgICAgICBOID0gdGV4dC5sZW5ndGgsXG4gICAgICAgIEkgPSAwLCAvLyBjdXJyZW50IGNoYXJhY3RlciBpbmRleFxuICAgICAgICBuID0gMCwgLy8gdGhlIGN1cnJlbnQgbGluZSBudW1iZXJcbiAgICAgICAgdCwgLy8gdGhlIGN1cnJlbnQgdG9rZW5cbiAgICAgICAgZW9sOyAvLyBpcyB0aGUgY3VycmVudCB0b2tlbiBmb2xsb3dlZCBieSBFT0w/XG5cbiAgICBmdW5jdGlvbiB0b2tlbigpIHtcbiAgICAgIGlmIChJID49IE4pIHJldHVybiBFT0Y7IC8vIHNwZWNpYWwgY2FzZTogZW5kIG9mIGZpbGVcbiAgICAgIGlmIChlb2wpIHJldHVybiBlb2wgPSBmYWxzZSwgRU9MOyAvLyBzcGVjaWFsIGNhc2U6IGVuZCBvZiBsaW5lXG5cbiAgICAgIC8vIHNwZWNpYWwgY2FzZTogcXVvdGVzXG4gICAgICB2YXIgaiA9IEksIGM7XG4gICAgICBpZiAodGV4dC5jaGFyQ29kZUF0KGopID09PSAzNCkge1xuICAgICAgICB2YXIgaSA9IGo7XG4gICAgICAgIHdoaWxlIChpKysgPCBOKSB7XG4gICAgICAgICAgaWYgKHRleHQuY2hhckNvZGVBdChpKSA9PT0gMzQpIHtcbiAgICAgICAgICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoaSArIDEpICE9PSAzNCkgYnJlYWs7XG4gICAgICAgICAgICArK2k7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIEkgPSBpICsgMjtcbiAgICAgICAgYyA9IHRleHQuY2hhckNvZGVBdChpICsgMSk7XG4gICAgICAgIGlmIChjID09PSAxMykge1xuICAgICAgICAgIGVvbCA9IHRydWU7XG4gICAgICAgICAgaWYgKHRleHQuY2hhckNvZGVBdChpICsgMikgPT09IDEwKSArK0k7XG4gICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gMTApIHtcbiAgICAgICAgICBlb2wgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0ZXh0LnNsaWNlKGogKyAxLCBpKS5yZXBsYWNlKC9cIlwiL2csIFwiXFxcIlwiKTtcbiAgICAgIH1cblxuICAgICAgLy8gY29tbW9uIGNhc2U6IGZpbmQgbmV4dCBkZWxpbWl0ZXIgb3IgbmV3bGluZVxuICAgICAgd2hpbGUgKEkgPCBOKSB7XG4gICAgICAgIHZhciBrID0gMTtcbiAgICAgICAgYyA9IHRleHQuY2hhckNvZGVBdChJKyspO1xuICAgICAgICBpZiAoYyA9PT0gMTApIGVvbCA9IHRydWU7IC8vIFxcblxuICAgICAgICBlbHNlIGlmIChjID09PSAxMykgeyBlb2wgPSB0cnVlOyBpZiAodGV4dC5jaGFyQ29kZUF0KEkpID09PSAxMCkgKytJLCArK2s7IH0gLy8gXFxyfFxcclxcblxuICAgICAgICBlbHNlIGlmIChjICE9PSBkZWxpbWl0ZXJDb2RlKSBjb250aW51ZTtcbiAgICAgICAgcmV0dXJuIHRleHQuc2xpY2UoaiwgSSAtIGspO1xuICAgICAgfVxuXG4gICAgICAvLyBzcGVjaWFsIGNhc2U6IGxhc3QgdG9rZW4gYmVmb3JlIEVPRlxuICAgICAgcmV0dXJuIHRleHQuc2xpY2Uoaik7XG4gICAgfVxuXG4gICAgd2hpbGUgKCh0ID0gdG9rZW4oKSkgIT09IEVPRikge1xuICAgICAgdmFyIGEgPSBbXTtcbiAgICAgIHdoaWxlICh0ICE9PSBFT0wgJiYgdCAhPT0gRU9GKSB7XG4gICAgICAgIGEucHVzaCh0KTtcbiAgICAgICAgdCA9IHRva2VuKCk7XG4gICAgICB9XG4gICAgICBpZiAoZiAmJiAoYSA9IGYoYSwgbisrKSkgPT0gbnVsbCkgY29udGludWU7XG4gICAgICByb3dzLnB1c2goYSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJvd3M7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXQocm93cywgY29sdW1ucykge1xuICAgIGlmIChjb2x1bW5zID09IG51bGwpIGNvbHVtbnMgPSBpbmZlckNvbHVtbnMocm93cyk7XG4gICAgcmV0dXJuIFtjb2x1bW5zLm1hcChmb3JtYXRWYWx1ZSkuam9pbihkZWxpbWl0ZXIpXS5jb25jYXQocm93cy5tYXAoZnVuY3Rpb24ocm93KSB7XG4gICAgICByZXR1cm4gY29sdW1ucy5tYXAoZnVuY3Rpb24oY29sdW1uKSB7XG4gICAgICAgIHJldHVybiBmb3JtYXRWYWx1ZShyb3dbY29sdW1uXSk7XG4gICAgICB9KS5qb2luKGRlbGltaXRlcik7XG4gICAgfSkpLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRSb3dzKHJvd3MpIHtcbiAgICByZXR1cm4gcm93cy5tYXAoZm9ybWF0Um93KS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0Um93KHJvdykge1xuICAgIHJldHVybiByb3cubWFwKGZvcm1hdFZhbHVlKS5qb2luKGRlbGltaXRlcik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRWYWx1ZSh0ZXh0KSB7XG4gICAgcmV0dXJuIHRleHQgPT0gbnVsbCA/IFwiXCJcbiAgICAgICAgOiByZUZvcm1hdC50ZXN0KHRleHQgKz0gXCJcIikgPyBcIlxcXCJcIiArIHRleHQucmVwbGFjZSgvXFxcIi9nLCBcIlxcXCJcXFwiXCIpICsgXCJcXFwiXCJcbiAgICAgICAgOiB0ZXh0O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXJzZTogcGFyc2UsXG4gICAgcGFyc2VSb3dzOiBwYXJzZVJvd3MsXG4gICAgZm9ybWF0OiBmb3JtYXQsXG4gICAgZm9ybWF0Um93czogZm9ybWF0Um93c1xuICB9O1xufTtcblxudmFyIGNzdiA9IGRzdihcIixcIik7XG5cbnZhciBjc3ZQYXJzZSA9IGNzdi5wYXJzZTtcbnZhciBjc3ZQYXJzZVJvd3MgPSBjc3YucGFyc2VSb3dzO1xudmFyIGNzdkZvcm1hdCA9IGNzdi5mb3JtYXQ7XG52YXIgY3N2Rm9ybWF0Um93cyA9IGNzdi5mb3JtYXRSb3dzO1xuXG52YXIgdHN2ID0gZHN2KFwiXFx0XCIpO1xuXG52YXIgdHN2UGFyc2UgPSB0c3YucGFyc2U7XG52YXIgdHN2UGFyc2VSb3dzID0gdHN2LnBhcnNlUm93cztcbnZhciB0c3ZGb3JtYXQgPSB0c3YuZm9ybWF0O1xudmFyIHRzdkZvcm1hdFJvd3MgPSB0c3YuZm9ybWF0Um93cztcblxudmFyIGNlbnRlciQxID0gZnVuY3Rpb24oeCwgeSkge1xuICB2YXIgbm9kZXM7XG5cbiAgaWYgKHggPT0gbnVsbCkgeCA9IDA7XG4gIGlmICh5ID09IG51bGwpIHkgPSAwO1xuXG4gIGZ1bmN0aW9uIGZvcmNlKCkge1xuICAgIHZhciBpLFxuICAgICAgICBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgICBub2RlLFxuICAgICAgICBzeCA9IDAsXG4gICAgICAgIHN5ID0gMDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIG5vZGUgPSBub2Rlc1tpXSwgc3ggKz0gbm9kZS54LCBzeSArPSBub2RlLnk7XG4gICAgfVxuXG4gICAgZm9yIChzeCA9IHN4IC8gbiAtIHgsIHN5ID0gc3kgLyBuIC0geSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIG5vZGUgPSBub2Rlc1tpXSwgbm9kZS54IC09IHN4LCBub2RlLnkgLT0gc3k7XG4gICAgfVxuICB9XG5cbiAgZm9yY2UuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICBub2RlcyA9IF87XG4gIH07XG5cbiAgZm9yY2UueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gK18sIGZvcmNlKSA6IHg7XG4gIH07XG5cbiAgZm9yY2UueSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5ID0gK18sIGZvcmNlKSA6IHk7XG4gIH07XG5cbiAgcmV0dXJuIGZvcmNlO1xufTtcblxudmFyIGNvbnN0YW50JDYgPSBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn07XG5cbnZhciBqaWdnbGUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIDFlLTY7XG59O1xuXG52YXIgdHJlZV9hZGQgPSBmdW5jdGlvbihkKSB7XG4gIHZhciB4ID0gK3RoaXMuX3guY2FsbChudWxsLCBkKSxcbiAgICAgIHkgPSArdGhpcy5feS5jYWxsKG51bGwsIGQpO1xuICByZXR1cm4gYWRkKHRoaXMuY292ZXIoeCwgeSksIHgsIHksIGQpO1xufTtcblxuZnVuY3Rpb24gYWRkKHRyZWUsIHgsIHksIGQpIHtcbiAgaWYgKGlzTmFOKHgpIHx8IGlzTmFOKHkpKSByZXR1cm4gdHJlZTsgLy8gaWdub3JlIGludmFsaWQgcG9pbnRzXG5cbiAgdmFyIHBhcmVudCxcbiAgICAgIG5vZGUgPSB0cmVlLl9yb290LFxuICAgICAgbGVhZiA9IHtkYXRhOiBkfSxcbiAgICAgIHgwID0gdHJlZS5feDAsXG4gICAgICB5MCA9IHRyZWUuX3kwLFxuICAgICAgeDEgPSB0cmVlLl94MSxcbiAgICAgIHkxID0gdHJlZS5feTEsXG4gICAgICB4bSxcbiAgICAgIHltLFxuICAgICAgeHAsXG4gICAgICB5cCxcbiAgICAgIHJpZ2h0LFxuICAgICAgYm90dG9tLFxuICAgICAgaSxcbiAgICAgIGo7XG5cbiAgLy8gSWYgdGhlIHRyZWUgaXMgZW1wdHksIGluaXRpYWxpemUgdGhlIHJvb3QgYXMgYSBsZWFmLlxuICBpZiAoIW5vZGUpIHJldHVybiB0cmVlLl9yb290ID0gbGVhZiwgdHJlZTtcblxuICAvLyBGaW5kIHRoZSBleGlzdGluZyBsZWFmIGZvciB0aGUgbmV3IHBvaW50LCBvciBhZGQgaXQuXG4gIHdoaWxlIChub2RlLmxlbmd0aCkge1xuICAgIGlmIChyaWdodCA9IHggPj0gKHhtID0gKHgwICsgeDEpIC8gMikpIHgwID0geG07IGVsc2UgeDEgPSB4bTtcbiAgICBpZiAoYm90dG9tID0geSA+PSAoeW0gPSAoeTAgKyB5MSkgLyAyKSkgeTAgPSB5bTsgZWxzZSB5MSA9IHltO1xuICAgIGlmIChwYXJlbnQgPSBub2RlLCAhKG5vZGUgPSBub2RlW2kgPSBib3R0b20gPDwgMSB8IHJpZ2h0XSkpIHJldHVybiBwYXJlbnRbaV0gPSBsZWFmLCB0cmVlO1xuICB9XG5cbiAgLy8gSXMgdGhlIG5ldyBwb2ludCBpcyBleGFjdGx5IGNvaW5jaWRlbnQgd2l0aCB0aGUgZXhpc3RpbmcgcG9pbnQ/XG4gIHhwID0gK3RyZWUuX3guY2FsbChudWxsLCBub2RlLmRhdGEpO1xuICB5cCA9ICt0cmVlLl95LmNhbGwobnVsbCwgbm9kZS5kYXRhKTtcbiAgaWYgKHggPT09IHhwICYmIHkgPT09IHlwKSByZXR1cm4gbGVhZi5uZXh0ID0gbm9kZSwgcGFyZW50ID8gcGFyZW50W2ldID0gbGVhZiA6IHRyZWUuX3Jvb3QgPSBsZWFmLCB0cmVlO1xuXG4gIC8vIE90aGVyd2lzZSwgc3BsaXQgdGhlIGxlYWYgbm9kZSB1bnRpbCB0aGUgb2xkIGFuZCBuZXcgcG9pbnQgYXJlIHNlcGFyYXRlZC5cbiAgZG8ge1xuICAgIHBhcmVudCA9IHBhcmVudCA/IHBhcmVudFtpXSA9IG5ldyBBcnJheSg0KSA6IHRyZWUuX3Jvb3QgPSBuZXcgQXJyYXkoNCk7XG4gICAgaWYgKHJpZ2h0ID0geCA+PSAoeG0gPSAoeDAgKyB4MSkgLyAyKSkgeDAgPSB4bTsgZWxzZSB4MSA9IHhtO1xuICAgIGlmIChib3R0b20gPSB5ID49ICh5bSA9ICh5MCArIHkxKSAvIDIpKSB5MCA9IHltOyBlbHNlIHkxID0geW07XG4gIH0gd2hpbGUgKChpID0gYm90dG9tIDw8IDEgfCByaWdodCkgPT09IChqID0gKHlwID49IHltKSA8PCAxIHwgKHhwID49IHhtKSkpO1xuICByZXR1cm4gcGFyZW50W2pdID0gbm9kZSwgcGFyZW50W2ldID0gbGVhZiwgdHJlZTtcbn1cblxuZnVuY3Rpb24gYWRkQWxsKGRhdGEpIHtcbiAgdmFyIGQsIGksIG4gPSBkYXRhLmxlbmd0aCxcbiAgICAgIHgsXG4gICAgICB5LFxuICAgICAgeHogPSBuZXcgQXJyYXkobiksXG4gICAgICB5eiA9IG5ldyBBcnJheShuKSxcbiAgICAgIHgwID0gSW5maW5pdHksXG4gICAgICB5MCA9IEluZmluaXR5LFxuICAgICAgeDEgPSAtSW5maW5pdHksXG4gICAgICB5MSA9IC1JbmZpbml0eTtcblxuICAvLyBDb21wdXRlIHRoZSBwb2ludHMgYW5kIHRoZWlyIGV4dGVudC5cbiAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgIGlmIChpc05hTih4ID0gK3RoaXMuX3guY2FsbChudWxsLCBkID0gZGF0YVtpXSkpIHx8IGlzTmFOKHkgPSArdGhpcy5feS5jYWxsKG51bGwsIGQpKSkgY29udGludWU7XG4gICAgeHpbaV0gPSB4O1xuICAgIHl6W2ldID0geTtcbiAgICBpZiAoeCA8IHgwKSB4MCA9IHg7XG4gICAgaWYgKHggPiB4MSkgeDEgPSB4O1xuICAgIGlmICh5IDwgeTApIHkwID0geTtcbiAgICBpZiAoeSA+IHkxKSB5MSA9IHk7XG4gIH1cblxuICAvLyBJZiB0aGVyZSB3ZXJlIG5vICh2YWxpZCkgcG9pbnRzLCBpbmhlcml0IHRoZSBleGlzdGluZyBleHRlbnQuXG4gIGlmICh4MSA8IHgwKSB4MCA9IHRoaXMuX3gwLCB4MSA9IHRoaXMuX3gxO1xuICBpZiAoeTEgPCB5MCkgeTAgPSB0aGlzLl95MCwgeTEgPSB0aGlzLl95MTtcblxuICAvLyBFeHBhbmQgdGhlIHRyZWUgdG8gY292ZXIgdGhlIG5ldyBwb2ludHMuXG4gIHRoaXMuY292ZXIoeDAsIHkwKS5jb3Zlcih4MSwgeTEpO1xuXG4gIC8vIEFkZCB0aGUgbmV3IHBvaW50cy5cbiAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgIGFkZCh0aGlzLCB4eltpXSwgeXpbaV0sIGRhdGFbaV0pO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbnZhciB0cmVlX2NvdmVyID0gZnVuY3Rpb24oeCwgeSkge1xuICBpZiAoaXNOYU4oeCA9ICt4KSB8fCBpc05hTih5ID0gK3kpKSByZXR1cm4gdGhpczsgLy8gaWdub3JlIGludmFsaWQgcG9pbnRzXG5cbiAgdmFyIHgwID0gdGhpcy5feDAsXG4gICAgICB5MCA9IHRoaXMuX3kwLFxuICAgICAgeDEgPSB0aGlzLl94MSxcbiAgICAgIHkxID0gdGhpcy5feTE7XG5cbiAgLy8gSWYgdGhlIHF1YWR0cmVlIGhhcyBubyBleHRlbnQsIGluaXRpYWxpemUgdGhlbS5cbiAgLy8gSW50ZWdlciBleHRlbnQgYXJlIG5lY2Vzc2FyeSBzbyB0aGF0IGlmIHdlIGxhdGVyIGRvdWJsZSB0aGUgZXh0ZW50LFxuICAvLyB0aGUgZXhpc3RpbmcgcXVhZHJhbnQgYm91bmRhcmllcyBkb27igJl0IGNoYW5nZSBkdWUgdG8gZmxvYXRpbmcgcG9pbnQgZXJyb3IhXG4gIGlmIChpc05hTih4MCkpIHtcbiAgICB4MSA9ICh4MCA9IE1hdGguZmxvb3IoeCkpICsgMTtcbiAgICB5MSA9ICh5MCA9IE1hdGguZmxvb3IoeSkpICsgMTtcbiAgfVxuXG4gIC8vIE90aGVyd2lzZSwgZG91YmxlIHJlcGVhdGVkbHkgdG8gY292ZXIuXG4gIGVsc2UgaWYgKHgwID4geCB8fCB4ID4geDEgfHwgeTAgPiB5IHx8IHkgPiB5MSkge1xuICAgIHZhciB6ID0geDEgLSB4MCxcbiAgICAgICAgbm9kZSA9IHRoaXMuX3Jvb3QsXG4gICAgICAgIHBhcmVudCxcbiAgICAgICAgaTtcblxuICAgIHN3aXRjaCAoaSA9ICh5IDwgKHkwICsgeTEpIC8gMikgPDwgMSB8ICh4IDwgKHgwICsgeDEpIC8gMikpIHtcbiAgICAgIGNhc2UgMDoge1xuICAgICAgICBkbyBwYXJlbnQgPSBuZXcgQXJyYXkoNCksIHBhcmVudFtpXSA9IG5vZGUsIG5vZGUgPSBwYXJlbnQ7XG4gICAgICAgIHdoaWxlICh6ICo9IDIsIHgxID0geDAgKyB6LCB5MSA9IHkwICsgeiwgeCA+IHgxIHx8IHkgPiB5MSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAxOiB7XG4gICAgICAgIGRvIHBhcmVudCA9IG5ldyBBcnJheSg0KSwgcGFyZW50W2ldID0gbm9kZSwgbm9kZSA9IHBhcmVudDtcbiAgICAgICAgd2hpbGUgKHogKj0gMiwgeDAgPSB4MSAtIHosIHkxID0geTAgKyB6LCB4MCA+IHggfHwgeSA+IHkxKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIDI6IHtcbiAgICAgICAgZG8gcGFyZW50ID0gbmV3IEFycmF5KDQpLCBwYXJlbnRbaV0gPSBub2RlLCBub2RlID0gcGFyZW50O1xuICAgICAgICB3aGlsZSAoeiAqPSAyLCB4MSA9IHgwICsgeiwgeTAgPSB5MSAtIHosIHggPiB4MSB8fCB5MCA+IHkpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMzoge1xuICAgICAgICBkbyBwYXJlbnQgPSBuZXcgQXJyYXkoNCksIHBhcmVudFtpXSA9IG5vZGUsIG5vZGUgPSBwYXJlbnQ7XG4gICAgICAgIHdoaWxlICh6ICo9IDIsIHgwID0geDEgLSB6LCB5MCA9IHkxIC0geiwgeDAgPiB4IHx8IHkwID4geSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLl9yb290ICYmIHRoaXMuX3Jvb3QubGVuZ3RoKSB0aGlzLl9yb290ID0gbm9kZTtcbiAgfVxuXG4gIC8vIElmIHRoZSBxdWFkdHJlZSBjb3ZlcnMgdGhlIHBvaW50IGFscmVhZHksIGp1c3QgcmV0dXJuLlxuICBlbHNlIHJldHVybiB0aGlzO1xuXG4gIHRoaXMuX3gwID0geDA7XG4gIHRoaXMuX3kwID0geTA7XG4gIHRoaXMuX3gxID0geDE7XG4gIHRoaXMuX3kxID0geTE7XG4gIHJldHVybiB0aGlzO1xufTtcblxudmFyIHRyZWVfZGF0YSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgZGF0YSA9IFtdO1xuICB0aGlzLnZpc2l0KGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpZiAoIW5vZGUubGVuZ3RoKSBkbyBkYXRhLnB1c2gobm9kZS5kYXRhKTsgd2hpbGUgKG5vZGUgPSBub2RlLm5leHQpXG4gIH0pO1xuICByZXR1cm4gZGF0YTtcbn07XG5cbnZhciB0cmVlX2V4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5jb3ZlcigrX1swXVswXSwgK19bMF1bMV0pLmNvdmVyKCtfWzFdWzBdLCArX1sxXVsxXSlcbiAgICAgIDogaXNOYU4odGhpcy5feDApID8gdW5kZWZpbmVkIDogW1t0aGlzLl94MCwgdGhpcy5feTBdLCBbdGhpcy5feDEsIHRoaXMuX3kxXV07XG59O1xuXG52YXIgUXVhZCA9IGZ1bmN0aW9uKG5vZGUsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHRoaXMubm9kZSA9IG5vZGU7XG4gIHRoaXMueDAgPSB4MDtcbiAgdGhpcy55MCA9IHkwO1xuICB0aGlzLngxID0geDE7XG4gIHRoaXMueTEgPSB5MTtcbn07XG5cbnZhciB0cmVlX2ZpbmQgPSBmdW5jdGlvbih4LCB5LCByYWRpdXMpIHtcbiAgdmFyIGRhdGEsXG4gICAgICB4MCA9IHRoaXMuX3gwLFxuICAgICAgeTAgPSB0aGlzLl95MCxcbiAgICAgIHgxLFxuICAgICAgeTEsXG4gICAgICB4MixcbiAgICAgIHkyLFxuICAgICAgeDMgPSB0aGlzLl94MSxcbiAgICAgIHkzID0gdGhpcy5feTEsXG4gICAgICBxdWFkcyA9IFtdLFxuICAgICAgbm9kZSA9IHRoaXMuX3Jvb3QsXG4gICAgICBxLFxuICAgICAgaTtcblxuICBpZiAobm9kZSkgcXVhZHMucHVzaChuZXcgUXVhZChub2RlLCB4MCwgeTAsIHgzLCB5MykpO1xuICBpZiAocmFkaXVzID09IG51bGwpIHJhZGl1cyA9IEluZmluaXR5O1xuICBlbHNlIHtcbiAgICB4MCA9IHggLSByYWRpdXMsIHkwID0geSAtIHJhZGl1cztcbiAgICB4MyA9IHggKyByYWRpdXMsIHkzID0geSArIHJhZGl1cztcbiAgICByYWRpdXMgKj0gcmFkaXVzO1xuICB9XG5cbiAgd2hpbGUgKHEgPSBxdWFkcy5wb3AoKSkge1xuXG4gICAgLy8gU3RvcCBzZWFyY2hpbmcgaWYgdGhpcyBxdWFkcmFudCBjYW7igJl0IGNvbnRhaW4gYSBjbG9zZXIgbm9kZS5cbiAgICBpZiAoIShub2RlID0gcS5ub2RlKVxuICAgICAgICB8fCAoeDEgPSBxLngwKSA+IHgzXG4gICAgICAgIHx8ICh5MSA9IHEueTApID4geTNcbiAgICAgICAgfHwgKHgyID0gcS54MSkgPCB4MFxuICAgICAgICB8fCAoeTIgPSBxLnkxKSA8IHkwKSBjb250aW51ZTtcblxuICAgIC8vIEJpc2VjdCB0aGUgY3VycmVudCBxdWFkcmFudC5cbiAgICBpZiAobm9kZS5sZW5ndGgpIHtcbiAgICAgIHZhciB4bSA9ICh4MSArIHgyKSAvIDIsXG4gICAgICAgICAgeW0gPSAoeTEgKyB5MikgLyAyO1xuXG4gICAgICBxdWFkcy5wdXNoKFxuICAgICAgICBuZXcgUXVhZChub2RlWzNdLCB4bSwgeW0sIHgyLCB5MiksXG4gICAgICAgIG5ldyBRdWFkKG5vZGVbMl0sIHgxLCB5bSwgeG0sIHkyKSxcbiAgICAgICAgbmV3IFF1YWQobm9kZVsxXSwgeG0sIHkxLCB4MiwgeW0pLFxuICAgICAgICBuZXcgUXVhZChub2RlWzBdLCB4MSwgeTEsIHhtLCB5bSlcbiAgICAgICk7XG5cbiAgICAgIC8vIFZpc2l0IHRoZSBjbG9zZXN0IHF1YWRyYW50IGZpcnN0LlxuICAgICAgaWYgKGkgPSAoeSA+PSB5bSkgPDwgMSB8ICh4ID49IHhtKSkge1xuICAgICAgICBxID0gcXVhZHNbcXVhZHMubGVuZ3RoIC0gMV07XG4gICAgICAgIHF1YWRzW3F1YWRzLmxlbmd0aCAtIDFdID0gcXVhZHNbcXVhZHMubGVuZ3RoIC0gMSAtIGldO1xuICAgICAgICBxdWFkc1txdWFkcy5sZW5ndGggLSAxIC0gaV0gPSBxO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFZpc2l0IHRoaXMgcG9pbnQuIChWaXNpdGluZyBjb2luY2lkZW50IHBvaW50cyBpc27igJl0IG5lY2Vzc2FyeSEpXG4gICAgZWxzZSB7XG4gICAgICB2YXIgZHggPSB4IC0gK3RoaXMuX3guY2FsbChudWxsLCBub2RlLmRhdGEpLFxuICAgICAgICAgIGR5ID0geSAtICt0aGlzLl95LmNhbGwobnVsbCwgbm9kZS5kYXRhKSxcbiAgICAgICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgICAgaWYgKGQyIDwgcmFkaXVzKSB7XG4gICAgICAgIHZhciBkID0gTWF0aC5zcXJ0KHJhZGl1cyA9IGQyKTtcbiAgICAgICAgeDAgPSB4IC0gZCwgeTAgPSB5IC0gZDtcbiAgICAgICAgeDMgPSB4ICsgZCwgeTMgPSB5ICsgZDtcbiAgICAgICAgZGF0YSA9IG5vZGUuZGF0YTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn07XG5cbnZhciB0cmVlX3JlbW92ZSA9IGZ1bmN0aW9uKGQpIHtcbiAgaWYgKGlzTmFOKHggPSArdGhpcy5feC5jYWxsKG51bGwsIGQpKSB8fCBpc05hTih5ID0gK3RoaXMuX3kuY2FsbChudWxsLCBkKSkpIHJldHVybiB0aGlzOyAvLyBpZ25vcmUgaW52YWxpZCBwb2ludHNcblxuICB2YXIgcGFyZW50LFxuICAgICAgbm9kZSA9IHRoaXMuX3Jvb3QsXG4gICAgICByZXRhaW5lcixcbiAgICAgIHByZXZpb3VzLFxuICAgICAgbmV4dCxcbiAgICAgIHgwID0gdGhpcy5feDAsXG4gICAgICB5MCA9IHRoaXMuX3kwLFxuICAgICAgeDEgPSB0aGlzLl94MSxcbiAgICAgIHkxID0gdGhpcy5feTEsXG4gICAgICB4LFxuICAgICAgeSxcbiAgICAgIHhtLFxuICAgICAgeW0sXG4gICAgICByaWdodCxcbiAgICAgIGJvdHRvbSxcbiAgICAgIGksXG4gICAgICBqO1xuXG4gIC8vIElmIHRoZSB0cmVlIGlzIGVtcHR5LCBpbml0aWFsaXplIHRoZSByb290IGFzIGEgbGVhZi5cbiAgaWYgKCFub2RlKSByZXR1cm4gdGhpcztcblxuICAvLyBGaW5kIHRoZSBsZWFmIG5vZGUgZm9yIHRoZSBwb2ludC5cbiAgLy8gV2hpbGUgZGVzY2VuZGluZywgYWxzbyByZXRhaW4gdGhlIGRlZXBlc3QgcGFyZW50IHdpdGggYSBub24tcmVtb3ZlZCBzaWJsaW5nLlxuICBpZiAobm9kZS5sZW5ndGgpIHdoaWxlICh0cnVlKSB7XG4gICAgaWYgKHJpZ2h0ID0geCA+PSAoeG0gPSAoeDAgKyB4MSkgLyAyKSkgeDAgPSB4bTsgZWxzZSB4MSA9IHhtO1xuICAgIGlmIChib3R0b20gPSB5ID49ICh5bSA9ICh5MCArIHkxKSAvIDIpKSB5MCA9IHltOyBlbHNlIHkxID0geW07XG4gICAgaWYgKCEocGFyZW50ID0gbm9kZSwgbm9kZSA9IG5vZGVbaSA9IGJvdHRvbSA8PCAxIHwgcmlnaHRdKSkgcmV0dXJuIHRoaXM7XG4gICAgaWYgKCFub2RlLmxlbmd0aCkgYnJlYWs7XG4gICAgaWYgKHBhcmVudFsoaSArIDEpICYgM10gfHwgcGFyZW50WyhpICsgMikgJiAzXSB8fCBwYXJlbnRbKGkgKyAzKSAmIDNdKSByZXRhaW5lciA9IHBhcmVudCwgaiA9IGk7XG4gIH1cblxuICAvLyBGaW5kIHRoZSBwb2ludCB0byByZW1vdmUuXG4gIHdoaWxlIChub2RlLmRhdGEgIT09IGQpIGlmICghKHByZXZpb3VzID0gbm9kZSwgbm9kZSA9IG5vZGUubmV4dCkpIHJldHVybiB0aGlzO1xuICBpZiAobmV4dCA9IG5vZGUubmV4dCkgZGVsZXRlIG5vZGUubmV4dDtcblxuICAvLyBJZiB0aGVyZSBhcmUgbXVsdGlwbGUgY29pbmNpZGVudCBwb2ludHMsIHJlbW92ZSBqdXN0IHRoZSBwb2ludC5cbiAgaWYgKHByZXZpb3VzKSByZXR1cm4gKG5leHQgPyBwcmV2aW91cy5uZXh0ID0gbmV4dCA6IGRlbGV0ZSBwcmV2aW91cy5uZXh0KSwgdGhpcztcblxuICAvLyBJZiB0aGlzIGlzIHRoZSByb290IHBvaW50LCByZW1vdmUgaXQuXG4gIGlmICghcGFyZW50KSByZXR1cm4gdGhpcy5fcm9vdCA9IG5leHQsIHRoaXM7XG5cbiAgLy8gUmVtb3ZlIHRoaXMgbGVhZi5cbiAgbmV4dCA/IHBhcmVudFtpXSA9IG5leHQgOiBkZWxldGUgcGFyZW50W2ldO1xuXG4gIC8vIElmIHRoZSBwYXJlbnQgbm93IGNvbnRhaW5zIGV4YWN0bHkgb25lIGxlYWYsIGNvbGxhcHNlIHN1cGVyZmx1b3VzIHBhcmVudHMuXG4gIGlmICgobm9kZSA9IHBhcmVudFswXSB8fCBwYXJlbnRbMV0gfHwgcGFyZW50WzJdIHx8IHBhcmVudFszXSlcbiAgICAgICYmIG5vZGUgPT09IChwYXJlbnRbM10gfHwgcGFyZW50WzJdIHx8IHBhcmVudFsxXSB8fCBwYXJlbnRbMF0pXG4gICAgICAmJiAhbm9kZS5sZW5ndGgpIHtcbiAgICBpZiAocmV0YWluZXIpIHJldGFpbmVyW2pdID0gbm9kZTtcbiAgICBlbHNlIHRoaXMuX3Jvb3QgPSBub2RlO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiByZW1vdmVBbGwoZGF0YSkge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IGRhdGEubGVuZ3RoOyBpIDwgbjsgKytpKSB0aGlzLnJlbW92ZShkYXRhW2ldKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbnZhciB0cmVlX3Jvb3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX3Jvb3Q7XG59O1xuXG52YXIgdHJlZV9zaXplID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzaXplID0gMDtcbiAgdGhpcy52aXNpdChmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKCFub2RlLmxlbmd0aCkgZG8gKytzaXplOyB3aGlsZSAobm9kZSA9IG5vZGUubmV4dClcbiAgfSk7XG4gIHJldHVybiBzaXplO1xufTtcblxudmFyIHRyZWVfdmlzaXQgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICB2YXIgcXVhZHMgPSBbXSwgcSwgbm9kZSA9IHRoaXMuX3Jvb3QsIGNoaWxkLCB4MCwgeTAsIHgxLCB5MTtcbiAgaWYgKG5vZGUpIHF1YWRzLnB1c2gobmV3IFF1YWQobm9kZSwgdGhpcy5feDAsIHRoaXMuX3kwLCB0aGlzLl94MSwgdGhpcy5feTEpKTtcbiAgd2hpbGUgKHEgPSBxdWFkcy5wb3AoKSkge1xuICAgIGlmICghY2FsbGJhY2sobm9kZSA9IHEubm9kZSwgeDAgPSBxLngwLCB5MCA9IHEueTAsIHgxID0gcS54MSwgeTEgPSBxLnkxKSAmJiBub2RlLmxlbmd0aCkge1xuICAgICAgdmFyIHhtID0gKHgwICsgeDEpIC8gMiwgeW0gPSAoeTAgKyB5MSkgLyAyO1xuICAgICAgaWYgKGNoaWxkID0gbm9kZVszXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeG0sIHltLCB4MSwgeTEpKTtcbiAgICAgIGlmIChjaGlsZCA9IG5vZGVbMl0pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHgwLCB5bSwgeG0sIHkxKSk7XG4gICAgICBpZiAoY2hpbGQgPSBub2RlWzFdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4bSwgeTAsIHgxLCB5bSkpO1xuICAgICAgaWYgKGNoaWxkID0gbm9kZVswXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeDAsIHkwLCB4bSwgeW0pKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG52YXIgdHJlZV92aXNpdEFmdGVyID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgdmFyIHF1YWRzID0gW10sIG5leHQgPSBbXSwgcTtcbiAgaWYgKHRoaXMuX3Jvb3QpIHF1YWRzLnB1c2gobmV3IFF1YWQodGhpcy5fcm9vdCwgdGhpcy5feDAsIHRoaXMuX3kwLCB0aGlzLl94MSwgdGhpcy5feTEpKTtcbiAgd2hpbGUgKHEgPSBxdWFkcy5wb3AoKSkge1xuICAgIHZhciBub2RlID0gcS5ub2RlO1xuICAgIGlmIChub2RlLmxlbmd0aCkge1xuICAgICAgdmFyIGNoaWxkLCB4MCA9IHEueDAsIHkwID0gcS55MCwgeDEgPSBxLngxLCB5MSA9IHEueTEsIHhtID0gKHgwICsgeDEpIC8gMiwgeW0gPSAoeTAgKyB5MSkgLyAyO1xuICAgICAgaWYgKGNoaWxkID0gbm9kZVswXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeDAsIHkwLCB4bSwgeW0pKTtcbiAgICAgIGlmIChjaGlsZCA9IG5vZGVbMV0pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHhtLCB5MCwgeDEsIHltKSk7XG4gICAgICBpZiAoY2hpbGQgPSBub2RlWzJdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4MCwgeW0sIHhtLCB5MSkpO1xuICAgICAgaWYgKGNoaWxkID0gbm9kZVszXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeG0sIHltLCB4MSwgeTEpKTtcbiAgICB9XG4gICAgbmV4dC5wdXNoKHEpO1xuICB9XG4gIHdoaWxlIChxID0gbmV4dC5wb3AoKSkge1xuICAgIGNhbGxiYWNrKHEubm9kZSwgcS54MCwgcS55MCwgcS54MSwgcS55MSk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBkZWZhdWx0WChkKSB7XG4gIHJldHVybiBkWzBdO1xufVxuXG52YXIgdHJlZV94ID0gZnVuY3Rpb24oXykge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aGlzLl94ID0gXywgdGhpcykgOiB0aGlzLl94O1xufTtcblxuZnVuY3Rpb24gZGVmYXVsdFkoZCkge1xuICByZXR1cm4gZFsxXTtcbn1cblxudmFyIHRyZWVfeSA9IGZ1bmN0aW9uKF8pIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGhpcy5feSA9IF8sIHRoaXMpIDogdGhpcy5feTtcbn07XG5cbmZ1bmN0aW9uIHF1YWR0cmVlKG5vZGVzLCB4LCB5KSB7XG4gIHZhciB0cmVlID0gbmV3IFF1YWR0cmVlKHggPT0gbnVsbCA/IGRlZmF1bHRYIDogeCwgeSA9PSBudWxsID8gZGVmYXVsdFkgOiB5LCBOYU4sIE5hTiwgTmFOLCBOYU4pO1xuICByZXR1cm4gbm9kZXMgPT0gbnVsbCA/IHRyZWUgOiB0cmVlLmFkZEFsbChub2Rlcyk7XG59XG5cbmZ1bmN0aW9uIFF1YWR0cmVlKHgsIHksIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHRoaXMuX3ggPSB4O1xuICB0aGlzLl95ID0geTtcbiAgdGhpcy5feDAgPSB4MDtcbiAgdGhpcy5feTAgPSB5MDtcbiAgdGhpcy5feDEgPSB4MTtcbiAgdGhpcy5feTEgPSB5MTtcbiAgdGhpcy5fcm9vdCA9IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gbGVhZl9jb3B5KGxlYWYpIHtcbiAgdmFyIGNvcHkgPSB7ZGF0YTogbGVhZi5kYXRhfSwgbmV4dCA9IGNvcHk7XG4gIHdoaWxlIChsZWFmID0gbGVhZi5uZXh0KSBuZXh0ID0gbmV4dC5uZXh0ID0ge2RhdGE6IGxlYWYuZGF0YX07XG4gIHJldHVybiBjb3B5O1xufVxuXG52YXIgdHJlZVByb3RvID0gcXVhZHRyZWUucHJvdG90eXBlID0gUXVhZHRyZWUucHJvdG90eXBlO1xuXG50cmVlUHJvdG8uY29weSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgY29weSA9IG5ldyBRdWFkdHJlZSh0aGlzLl94LCB0aGlzLl95LCB0aGlzLl94MCwgdGhpcy5feTAsIHRoaXMuX3gxLCB0aGlzLl95MSksXG4gICAgICBub2RlID0gdGhpcy5fcm9vdCxcbiAgICAgIG5vZGVzLFxuICAgICAgY2hpbGQ7XG5cbiAgaWYgKCFub2RlKSByZXR1cm4gY29weTtcblxuICBpZiAoIW5vZGUubGVuZ3RoKSByZXR1cm4gY29weS5fcm9vdCA9IGxlYWZfY29weShub2RlKSwgY29weTtcblxuICBub2RlcyA9IFt7c291cmNlOiBub2RlLCB0YXJnZXQ6IGNvcHkuX3Jvb3QgPSBuZXcgQXJyYXkoNCl9XTtcbiAgd2hpbGUgKG5vZGUgPSBub2Rlcy5wb3AoKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgKytpKSB7XG4gICAgICBpZiAoY2hpbGQgPSBub2RlLnNvdXJjZVtpXSkge1xuICAgICAgICBpZiAoY2hpbGQubGVuZ3RoKSBub2Rlcy5wdXNoKHtzb3VyY2U6IGNoaWxkLCB0YXJnZXQ6IG5vZGUudGFyZ2V0W2ldID0gbmV3IEFycmF5KDQpfSk7XG4gICAgICAgIGVsc2Ugbm9kZS50YXJnZXRbaV0gPSBsZWFmX2NvcHkoY2hpbGQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjb3B5O1xufTtcblxudHJlZVByb3RvLmFkZCA9IHRyZWVfYWRkO1xudHJlZVByb3RvLmFkZEFsbCA9IGFkZEFsbDtcbnRyZWVQcm90by5jb3ZlciA9IHRyZWVfY292ZXI7XG50cmVlUHJvdG8uZGF0YSA9IHRyZWVfZGF0YTtcbnRyZWVQcm90by5leHRlbnQgPSB0cmVlX2V4dGVudDtcbnRyZWVQcm90by5maW5kID0gdHJlZV9maW5kO1xudHJlZVByb3RvLnJlbW92ZSA9IHRyZWVfcmVtb3ZlO1xudHJlZVByb3RvLnJlbW92ZUFsbCA9IHJlbW92ZUFsbDtcbnRyZWVQcm90by5yb290ID0gdHJlZV9yb290O1xudHJlZVByb3RvLnNpemUgPSB0cmVlX3NpemU7XG50cmVlUHJvdG8udmlzaXQgPSB0cmVlX3Zpc2l0O1xudHJlZVByb3RvLnZpc2l0QWZ0ZXIgPSB0cmVlX3Zpc2l0QWZ0ZXI7XG50cmVlUHJvdG8ueCA9IHRyZWVfeDtcbnRyZWVQcm90by55ID0gdHJlZV95O1xuXG5mdW5jdGlvbiB4KGQpIHtcbiAgcmV0dXJuIGQueCArIGQudng7XG59XG5cbmZ1bmN0aW9uIHkoZCkge1xuICByZXR1cm4gZC55ICsgZC52eTtcbn1cblxudmFyIGNvbGxpZGUgPSBmdW5jdGlvbihyYWRpdXMpIHtcbiAgdmFyIG5vZGVzLFxuICAgICAgcmFkaWksXG4gICAgICBzdHJlbmd0aCA9IDEsXG4gICAgICBpdGVyYXRpb25zID0gMTtcblxuICBpZiAodHlwZW9mIHJhZGl1cyAhPT0gXCJmdW5jdGlvblwiKSByYWRpdXMgPSBjb25zdGFudCQ2KHJhZGl1cyA9PSBudWxsID8gMSA6ICtyYWRpdXMpO1xuXG4gIGZ1bmN0aW9uIGZvcmNlKCkge1xuICAgIHZhciBpLCBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgICB0cmVlLFxuICAgICAgICBub2RlLFxuICAgICAgICB4aSxcbiAgICAgICAgeWksXG4gICAgICAgIHJpLFxuICAgICAgICByaTI7XG5cbiAgICBmb3IgKHZhciBrID0gMDsgayA8IGl0ZXJhdGlvbnM7ICsraykge1xuICAgICAgdHJlZSA9IHF1YWR0cmVlKG5vZGVzLCB4LCB5KS52aXNpdEFmdGVyKHByZXBhcmUpO1xuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBub2RlID0gbm9kZXNbaV07XG4gICAgICAgIHJpID0gcmFkaWlbbm9kZS5pbmRleF0sIHJpMiA9IHJpICogcmk7XG4gICAgICAgIHhpID0gbm9kZS54ICsgbm9kZS52eDtcbiAgICAgICAgeWkgPSBub2RlLnkgKyBub2RlLnZ5O1xuICAgICAgICB0cmVlLnZpc2l0KGFwcGx5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhcHBseShxdWFkLCB4MCwgeTAsIHgxLCB5MSkge1xuICAgICAgdmFyIGRhdGEgPSBxdWFkLmRhdGEsIHJqID0gcXVhZC5yLCByID0gcmkgKyByajtcbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIGlmIChkYXRhLmluZGV4ID4gbm9kZS5pbmRleCkge1xuICAgICAgICAgIHZhciB4ID0geGkgLSBkYXRhLnggLSBkYXRhLnZ4LFxuICAgICAgICAgICAgICB5ID0geWkgLSBkYXRhLnkgLSBkYXRhLnZ5LFxuICAgICAgICAgICAgICBsID0geCAqIHggKyB5ICogeTtcbiAgICAgICAgICBpZiAobCA8IHIgKiByKSB7XG4gICAgICAgICAgICBpZiAoeCA9PT0gMCkgeCA9IGppZ2dsZSgpLCBsICs9IHggKiB4O1xuICAgICAgICAgICAgaWYgKHkgPT09IDApIHkgPSBqaWdnbGUoKSwgbCArPSB5ICogeTtcbiAgICAgICAgICAgIGwgPSAociAtIChsID0gTWF0aC5zcXJ0KGwpKSkgLyBsICogc3RyZW5ndGg7XG4gICAgICAgICAgICBub2RlLnZ4ICs9ICh4ICo9IGwpICogKHIgPSAocmogKj0gcmopIC8gKHJpMiArIHJqKSk7XG4gICAgICAgICAgICBub2RlLnZ5ICs9ICh5ICo9IGwpICogcjtcbiAgICAgICAgICAgIGRhdGEudnggLT0geCAqIChyID0gMSAtIHIpO1xuICAgICAgICAgICAgZGF0YS52eSAtPSB5ICogcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHgwID4geGkgKyByIHx8IHgxIDwgeGkgLSByIHx8IHkwID4geWkgKyByIHx8IHkxIDwgeWkgLSByO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHByZXBhcmUocXVhZCkge1xuICAgIGlmIChxdWFkLmRhdGEpIHJldHVybiBxdWFkLnIgPSByYWRpaVtxdWFkLmRhdGEuaW5kZXhdO1xuICAgIGZvciAodmFyIGkgPSBxdWFkLnIgPSAwOyBpIDwgNDsgKytpKSB7XG4gICAgICBpZiAocXVhZFtpXSAmJiBxdWFkW2ldLnIgPiBxdWFkLnIpIHtcbiAgICAgICAgcXVhZC5yID0gcXVhZFtpXS5yO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgaWYgKCFub2RlcykgcmV0dXJuO1xuICAgIHZhciBpLCBuID0gbm9kZXMubGVuZ3RoLCBub2RlO1xuICAgIHJhZGlpID0gbmV3IEFycmF5KG4pO1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIG5vZGUgPSBub2Rlc1tpXSwgcmFkaWlbbm9kZS5pbmRleF0gPSArcmFkaXVzKG5vZGUsIGksIG5vZGVzKTtcbiAgfVxuXG4gIGZvcmNlLmluaXRpYWxpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgbm9kZXMgPSBfO1xuICAgIGluaXRpYWxpemUoKTtcbiAgfTtcblxuICBmb3JjZS5pdGVyYXRpb25zID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGl0ZXJhdGlvbnMgPSArXywgZm9yY2UpIDogaXRlcmF0aW9ucztcbiAgfTtcblxuICBmb3JjZS5zdHJlbmd0aCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdHJlbmd0aCA9ICtfLCBmb3JjZSkgOiBzdHJlbmd0aDtcbiAgfTtcblxuICBmb3JjZS5yYWRpdXMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFkaXVzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQ2KCtfKSwgaW5pdGlhbGl6ZSgpLCBmb3JjZSkgOiByYWRpdXM7XG4gIH07XG5cbiAgcmV0dXJuIGZvcmNlO1xufTtcblxuZnVuY3Rpb24gaW5kZXgoZCkge1xuICByZXR1cm4gZC5pbmRleDtcbn1cblxuZnVuY3Rpb24gZmluZChub2RlQnlJZCwgbm9kZUlkKSB7XG4gIHZhciBub2RlID0gbm9kZUJ5SWQuZ2V0KG5vZGVJZCk7XG4gIGlmICghbm9kZSkgdGhyb3cgbmV3IEVycm9yKFwibWlzc2luZzogXCIgKyBub2RlSWQpO1xuICByZXR1cm4gbm9kZTtcbn1cblxudmFyIGxpbmsgPSBmdW5jdGlvbihsaW5rcykge1xuICB2YXIgaWQgPSBpbmRleCxcbiAgICAgIHN0cmVuZ3RoID0gZGVmYXVsdFN0cmVuZ3RoLFxuICAgICAgc3RyZW5ndGhzLFxuICAgICAgZGlzdGFuY2UgPSBjb25zdGFudCQ2KDMwKSxcbiAgICAgIGRpc3RhbmNlcyxcbiAgICAgIG5vZGVzLFxuICAgICAgY291bnQsXG4gICAgICBiaWFzLFxuICAgICAgaXRlcmF0aW9ucyA9IDE7XG5cbiAgaWYgKGxpbmtzID09IG51bGwpIGxpbmtzID0gW107XG5cbiAgZnVuY3Rpb24gZGVmYXVsdFN0cmVuZ3RoKGxpbmspIHtcbiAgICByZXR1cm4gMSAvIE1hdGgubWluKGNvdW50W2xpbmsuc291cmNlLmluZGV4XSwgY291bnRbbGluay50YXJnZXQuaW5kZXhdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcmNlKGFscGhhKSB7XG4gICAgZm9yICh2YXIgayA9IDAsIG4gPSBsaW5rcy5sZW5ndGg7IGsgPCBpdGVyYXRpb25zOyArK2spIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsaW5rLCBzb3VyY2UsIHRhcmdldCwgeCwgeSwgbCwgYjsgaSA8IG47ICsraSkge1xuICAgICAgICBsaW5rID0gbGlua3NbaV0sIHNvdXJjZSA9IGxpbmsuc291cmNlLCB0YXJnZXQgPSBsaW5rLnRhcmdldDtcbiAgICAgICAgeCA9IHRhcmdldC54ICsgdGFyZ2V0LnZ4IC0gc291cmNlLnggLSBzb3VyY2UudnggfHwgamlnZ2xlKCk7XG4gICAgICAgIHkgPSB0YXJnZXQueSArIHRhcmdldC52eSAtIHNvdXJjZS55IC0gc291cmNlLnZ5IHx8IGppZ2dsZSgpO1xuICAgICAgICBsID0gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpO1xuICAgICAgICBsID0gKGwgLSBkaXN0YW5jZXNbaV0pIC8gbCAqIGFscGhhICogc3RyZW5ndGhzW2ldO1xuICAgICAgICB4ICo9IGwsIHkgKj0gbDtcbiAgICAgICAgdGFyZ2V0LnZ4IC09IHggKiAoYiA9IGJpYXNbaV0pO1xuICAgICAgICB0YXJnZXQudnkgLT0geSAqIGI7XG4gICAgICAgIHNvdXJjZS52eCArPSB4ICogKGIgPSAxIC0gYik7XG4gICAgICAgIHNvdXJjZS52eSArPSB5ICogYjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgIGlmICghbm9kZXMpIHJldHVybjtcblxuICAgIHZhciBpLFxuICAgICAgICBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgICBtID0gbGlua3MubGVuZ3RoLFxuICAgICAgICBub2RlQnlJZCA9IG1hcCQxKG5vZGVzLCBpZCksXG4gICAgICAgIGxpbms7XG5cbiAgICBmb3IgKGkgPSAwLCBjb3VudCA9IG5ldyBBcnJheShuKTsgaSA8IG07ICsraSkge1xuICAgICAgbGluayA9IGxpbmtzW2ldLCBsaW5rLmluZGV4ID0gaTtcbiAgICAgIGlmICh0eXBlb2YgbGluay5zb3VyY2UgIT09IFwib2JqZWN0XCIpIGxpbmsuc291cmNlID0gZmluZChub2RlQnlJZCwgbGluay5zb3VyY2UpO1xuICAgICAgaWYgKHR5cGVvZiBsaW5rLnRhcmdldCAhPT0gXCJvYmplY3RcIikgbGluay50YXJnZXQgPSBmaW5kKG5vZGVCeUlkLCBsaW5rLnRhcmdldCk7XG4gICAgICBjb3VudFtsaW5rLnNvdXJjZS5pbmRleF0gPSAoY291bnRbbGluay5zb3VyY2UuaW5kZXhdIHx8IDApICsgMTtcbiAgICAgIGNvdW50W2xpbmsudGFyZ2V0LmluZGV4XSA9IChjb3VudFtsaW5rLnRhcmdldC5pbmRleF0gfHwgMCkgKyAxO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDAsIGJpYXMgPSBuZXcgQXJyYXkobSk7IGkgPCBtOyArK2kpIHtcbiAgICAgIGxpbmsgPSBsaW5rc1tpXSwgYmlhc1tpXSA9IGNvdW50W2xpbmsuc291cmNlLmluZGV4XSAvIChjb3VudFtsaW5rLnNvdXJjZS5pbmRleF0gKyBjb3VudFtsaW5rLnRhcmdldC5pbmRleF0pO1xuICAgIH1cblxuICAgIHN0cmVuZ3RocyA9IG5ldyBBcnJheShtKSwgaW5pdGlhbGl6ZVN0cmVuZ3RoKCk7XG4gICAgZGlzdGFuY2VzID0gbmV3IEFycmF5KG0pLCBpbml0aWFsaXplRGlzdGFuY2UoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemVTdHJlbmd0aCgpIHtcbiAgICBpZiAoIW5vZGVzKSByZXR1cm47XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IGxpbmtzLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgc3RyZW5ndGhzW2ldID0gK3N0cmVuZ3RoKGxpbmtzW2ldLCBpLCBsaW5rcyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZURpc3RhbmNlKCkge1xuICAgIGlmICghbm9kZXMpIHJldHVybjtcblxuICAgIGZvciAodmFyIGkgPSAwLCBuID0gbGlua3MubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICBkaXN0YW5jZXNbaV0gPSArZGlzdGFuY2UobGlua3NbaV0sIGksIGxpbmtzKTtcbiAgICB9XG4gIH1cblxuICBmb3JjZS5pbml0aWFsaXplID0gZnVuY3Rpb24oXykge1xuICAgIG5vZGVzID0gXztcbiAgICBpbml0aWFsaXplKCk7XG4gIH07XG5cbiAgZm9yY2UubGlua3MgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAobGlua3MgPSBfLCBpbml0aWFsaXplKCksIGZvcmNlKSA6IGxpbmtzO1xuICB9O1xuXG4gIGZvcmNlLmlkID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGlkID0gXywgZm9yY2UpIDogaWQ7XG4gIH07XG5cbiAgZm9yY2UuaXRlcmF0aW9ucyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpdGVyYXRpb25zID0gK18sIGZvcmNlKSA6IGl0ZXJhdGlvbnM7XG4gIH07XG5cbiAgZm9yY2Uuc3RyZW5ndGggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3RyZW5ndGggPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDYoK18pLCBpbml0aWFsaXplU3RyZW5ndGgoKSwgZm9yY2UpIDogc3RyZW5ndGg7XG4gIH07XG5cbiAgZm9yY2UuZGlzdGFuY2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZGlzdGFuY2UgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDYoK18pLCBpbml0aWFsaXplRGlzdGFuY2UoKSwgZm9yY2UpIDogZGlzdGFuY2U7XG4gIH07XG5cbiAgcmV0dXJuIGZvcmNlO1xufTtcblxuZnVuY3Rpb24geCQxKGQpIHtcbiAgcmV0dXJuIGQueDtcbn1cblxuZnVuY3Rpb24geSQxKGQpIHtcbiAgcmV0dXJuIGQueTtcbn1cblxudmFyIGluaXRpYWxSYWRpdXMgPSAxMDtcbnZhciBpbml0aWFsQW5nbGUgPSBNYXRoLlBJICogKDMgLSBNYXRoLnNxcnQoNSkpO1xuXG52YXIgc2ltdWxhdGlvbiA9IGZ1bmN0aW9uKG5vZGVzKSB7XG4gIHZhciBzaW11bGF0aW9uLFxuICAgICAgYWxwaGEgPSAxLFxuICAgICAgYWxwaGFNaW4gPSAwLjAwMSxcbiAgICAgIGFscGhhRGVjYXkgPSAxIC0gTWF0aC5wb3coYWxwaGFNaW4sIDEgLyAzMDApLFxuICAgICAgYWxwaGFUYXJnZXQgPSAwLFxuICAgICAgdmVsb2NpdHlEZWNheSA9IDAuNixcbiAgICAgIGZvcmNlcyA9IG1hcCQxKCksXG4gICAgICBzdGVwcGVyID0gdGltZXIoc3RlcCksXG4gICAgICBldmVudCA9IGRpc3BhdGNoKFwidGlja1wiLCBcImVuZFwiKTtcblxuICBpZiAobm9kZXMgPT0gbnVsbCkgbm9kZXMgPSBbXTtcblxuICBmdW5jdGlvbiBzdGVwKCkge1xuICAgIHRpY2soKTtcbiAgICBldmVudC5jYWxsKFwidGlja1wiLCBzaW11bGF0aW9uKTtcbiAgICBpZiAoYWxwaGEgPCBhbHBoYU1pbikge1xuICAgICAgc3RlcHBlci5zdG9wKCk7XG4gICAgICBldmVudC5jYWxsKFwiZW5kXCIsIHNpbXVsYXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRpY2soKSB7XG4gICAgdmFyIGksIG4gPSBub2Rlcy5sZW5ndGgsIG5vZGU7XG5cbiAgICBhbHBoYSArPSAoYWxwaGFUYXJnZXQgLSBhbHBoYSkgKiBhbHBoYURlY2F5O1xuXG4gICAgZm9yY2VzLmVhY2goZnVuY3Rpb24oZm9yY2UpIHtcbiAgICAgIGZvcmNlKGFscGhhKTtcbiAgICB9KTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgIGlmIChub2RlLmZ4ID09IG51bGwpIG5vZGUueCArPSBub2RlLnZ4ICo9IHZlbG9jaXR5RGVjYXk7XG4gICAgICBlbHNlIG5vZGUueCA9IG5vZGUuZngsIG5vZGUudnggPSAwO1xuICAgICAgaWYgKG5vZGUuZnkgPT0gbnVsbCkgbm9kZS55ICs9IG5vZGUudnkgKj0gdmVsb2NpdHlEZWNheTtcbiAgICAgIGVsc2Ugbm9kZS55ID0gbm9kZS5meSwgbm9kZS52eSA9IDA7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZU5vZGVzKCkge1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gbm9kZXMubGVuZ3RoLCBub2RlOyBpIDwgbjsgKytpKSB7XG4gICAgICBub2RlID0gbm9kZXNbaV0sIG5vZGUuaW5kZXggPSBpO1xuICAgICAgaWYgKGlzTmFOKG5vZGUueCkgfHwgaXNOYU4obm9kZS55KSkge1xuICAgICAgICB2YXIgcmFkaXVzID0gaW5pdGlhbFJhZGl1cyAqIE1hdGguc3FydChpKSwgYW5nbGUgPSBpICogaW5pdGlhbEFuZ2xlO1xuICAgICAgICBub2RlLnggPSByYWRpdXMgKiBNYXRoLmNvcyhhbmdsZSk7XG4gICAgICAgIG5vZGUueSA9IHJhZGl1cyAqIE1hdGguc2luKGFuZ2xlKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc05hTihub2RlLnZ4KSB8fCBpc05hTihub2RlLnZ5KSkge1xuICAgICAgICBub2RlLnZ4ID0gbm9kZS52eSA9IDA7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZUZvcmNlKGZvcmNlKSB7XG4gICAgaWYgKGZvcmNlLmluaXRpYWxpemUpIGZvcmNlLmluaXRpYWxpemUobm9kZXMpO1xuICAgIHJldHVybiBmb3JjZTtcbiAgfVxuXG4gIGluaXRpYWxpemVOb2RlcygpO1xuXG4gIHJldHVybiBzaW11bGF0aW9uID0ge1xuICAgIHRpY2s6IHRpY2ssXG5cbiAgICByZXN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzdGVwcGVyLnJlc3RhcnQoc3RlcCksIHNpbXVsYXRpb247XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHN0ZXBwZXIuc3RvcCgpLCBzaW11bGF0aW9uO1xuICAgIH0sXG5cbiAgICBub2RlczogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAobm9kZXMgPSBfLCBpbml0aWFsaXplTm9kZXMoKSwgZm9yY2VzLmVhY2goaW5pdGlhbGl6ZUZvcmNlKSwgc2ltdWxhdGlvbikgOiBub2RlcztcbiAgICB9LFxuXG4gICAgYWxwaGE6IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGFscGhhID0gK18sIHNpbXVsYXRpb24pIDogYWxwaGE7XG4gICAgfSxcblxuICAgIGFscGhhTWluOiBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChhbHBoYU1pbiA9ICtfLCBzaW11bGF0aW9uKSA6IGFscGhhTWluO1xuICAgIH0sXG5cbiAgICBhbHBoYURlY2F5OiBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChhbHBoYURlY2F5ID0gK18sIHNpbXVsYXRpb24pIDogK2FscGhhRGVjYXk7XG4gICAgfSxcblxuICAgIGFscGhhVGFyZ2V0OiBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChhbHBoYVRhcmdldCA9ICtfLCBzaW11bGF0aW9uKSA6IGFscGhhVGFyZ2V0O1xuICAgIH0sXG5cbiAgICB2ZWxvY2l0eURlY2F5OiBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh2ZWxvY2l0eURlY2F5ID0gMSAtIF8sIHNpbXVsYXRpb24pIDogMSAtIHZlbG9jaXR5RGVjYXk7XG4gICAgfSxcblxuICAgIGZvcmNlOiBmdW5jdGlvbihuYW1lLCBfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyAoKF8gPT0gbnVsbCA/IGZvcmNlcy5yZW1vdmUobmFtZSkgOiBmb3JjZXMuc2V0KG5hbWUsIGluaXRpYWxpemVGb3JjZShfKSkpLCBzaW11bGF0aW9uKSA6IGZvcmNlcy5nZXQobmFtZSk7XG4gICAgfSxcblxuICAgIGZpbmQ6IGZ1bmN0aW9uKHgsIHksIHJhZGl1cykge1xuICAgICAgdmFyIGkgPSAwLFxuICAgICAgICAgIG4gPSBub2Rlcy5sZW5ndGgsXG4gICAgICAgICAgZHgsXG4gICAgICAgICAgZHksXG4gICAgICAgICAgZDIsXG4gICAgICAgICAgbm9kZSxcbiAgICAgICAgICBjbG9zZXN0O1xuXG4gICAgICBpZiAocmFkaXVzID09IG51bGwpIHJhZGl1cyA9IEluZmluaXR5O1xuICAgICAgZWxzZSByYWRpdXMgKj0gcmFkaXVzO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgZHggPSB4IC0gbm9kZS54O1xuICAgICAgICBkeSA9IHkgLSBub2RlLnk7XG4gICAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICAgIGlmIChkMiA8IHJhZGl1cykgY2xvc2VzdCA9IG5vZGUsIHJhZGl1cyA9IGQyO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY2xvc2VzdDtcbiAgICB9LFxuXG4gICAgb246IGZ1bmN0aW9uKG5hbWUsIF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMSA/IChldmVudC5vbihuYW1lLCBfKSwgc2ltdWxhdGlvbikgOiBldmVudC5vbihuYW1lKTtcbiAgICB9XG4gIH07XG59O1xuXG52YXIgbWFueUJvZHkgPSBmdW5jdGlvbigpIHtcbiAgdmFyIG5vZGVzLFxuICAgICAgbm9kZSxcbiAgICAgIGFscGhhLFxuICAgICAgc3RyZW5ndGggPSBjb25zdGFudCQ2KC0zMCksXG4gICAgICBzdHJlbmd0aHMsXG4gICAgICBkaXN0YW5jZU1pbjIgPSAxLFxuICAgICAgZGlzdGFuY2VNYXgyID0gSW5maW5pdHksXG4gICAgICB0aGV0YTIgPSAwLjgxO1xuXG4gIGZ1bmN0aW9uIGZvcmNlKF8pIHtcbiAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aCwgdHJlZSA9IHF1YWR0cmVlKG5vZGVzLCB4JDEsIHkkMSkudmlzaXRBZnRlcihhY2N1bXVsYXRlKTtcbiAgICBmb3IgKGFscGhhID0gXywgaSA9IDA7IGkgPCBuOyArK2kpIG5vZGUgPSBub2Rlc1tpXSwgdHJlZS52aXNpdChhcHBseSk7XG4gIH1cblxuICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgIGlmICghbm9kZXMpIHJldHVybjtcbiAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aCwgbm9kZTtcbiAgICBzdHJlbmd0aHMgPSBuZXcgQXJyYXkobik7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgbm9kZSA9IG5vZGVzW2ldLCBzdHJlbmd0aHNbbm9kZS5pbmRleF0gPSArc3RyZW5ndGgobm9kZSwgaSwgbm9kZXMpO1xuICB9XG5cbiAgZnVuY3Rpb24gYWNjdW11bGF0ZShxdWFkKSB7XG4gICAgdmFyIHN0cmVuZ3RoID0gMCwgcSwgYywgeCwgeSwgaTtcblxuICAgIC8vIEZvciBpbnRlcm5hbCBub2RlcywgYWNjdW11bGF0ZSBmb3JjZXMgZnJvbSBjaGlsZCBxdWFkcmFudHMuXG4gICAgaWYgKHF1YWQubGVuZ3RoKSB7XG4gICAgICBmb3IgKHggPSB5ID0gaSA9IDA7IGkgPCA0OyArK2kpIHtcbiAgICAgICAgaWYgKChxID0gcXVhZFtpXSkgJiYgKGMgPSBxLnZhbHVlKSkge1xuICAgICAgICAgIHN0cmVuZ3RoICs9IGMsIHggKz0gYyAqIHEueCwgeSArPSBjICogcS55O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBxdWFkLnggPSB4IC8gc3RyZW5ndGg7XG4gICAgICBxdWFkLnkgPSB5IC8gc3RyZW5ndGg7XG4gICAgfVxuXG4gICAgLy8gRm9yIGxlYWYgbm9kZXMsIGFjY3VtdWxhdGUgZm9yY2VzIGZyb20gY29pbmNpZGVudCBxdWFkcmFudHMuXG4gICAgZWxzZSB7XG4gICAgICBxID0gcXVhZDtcbiAgICAgIHEueCA9IHEuZGF0YS54O1xuICAgICAgcS55ID0gcS5kYXRhLnk7XG4gICAgICBkbyBzdHJlbmd0aCArPSBzdHJlbmd0aHNbcS5kYXRhLmluZGV4XTtcbiAgICAgIHdoaWxlIChxID0gcS5uZXh0KTtcbiAgICB9XG5cbiAgICBxdWFkLnZhbHVlID0gc3RyZW5ndGg7XG4gIH1cblxuICBmdW5jdGlvbiBhcHBseShxdWFkLCB4MSwgXywgeDIpIHtcbiAgICBpZiAoIXF1YWQudmFsdWUpIHJldHVybiB0cnVlO1xuXG4gICAgdmFyIHggPSBxdWFkLnggLSBub2RlLngsXG4gICAgICAgIHkgPSBxdWFkLnkgLSBub2RlLnksXG4gICAgICAgIHcgPSB4MiAtIHgxLFxuICAgICAgICBsID0geCAqIHggKyB5ICogeTtcblxuICAgIC8vIEFwcGx5IHRoZSBCYXJuZXMtSHV0IGFwcHJveGltYXRpb24gaWYgcG9zc2libGUuXG4gICAgLy8gTGltaXQgZm9yY2VzIGZvciB2ZXJ5IGNsb3NlIG5vZGVzOyByYW5kb21pemUgZGlyZWN0aW9uIGlmIGNvaW5jaWRlbnQuXG4gICAgaWYgKHcgKiB3IC8gdGhldGEyIDwgbCkge1xuICAgICAgaWYgKGwgPCBkaXN0YW5jZU1heDIpIHtcbiAgICAgICAgaWYgKHggPT09IDApIHggPSBqaWdnbGUoKSwgbCArPSB4ICogeDtcbiAgICAgICAgaWYgKHkgPT09IDApIHkgPSBqaWdnbGUoKSwgbCArPSB5ICogeTtcbiAgICAgICAgaWYgKGwgPCBkaXN0YW5jZU1pbjIpIGwgPSBNYXRoLnNxcnQoZGlzdGFuY2VNaW4yICogbCk7XG4gICAgICAgIG5vZGUudnggKz0geCAqIHF1YWQudmFsdWUgKiBhbHBoYSAvIGw7XG4gICAgICAgIG5vZGUudnkgKz0geSAqIHF1YWQudmFsdWUgKiBhbHBoYSAvIGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBPdGhlcndpc2UsIHByb2Nlc3MgcG9pbnRzIGRpcmVjdGx5LlxuICAgIGVsc2UgaWYgKHF1YWQubGVuZ3RoIHx8IGwgPj0gZGlzdGFuY2VNYXgyKSByZXR1cm47XG5cbiAgICAvLyBMaW1pdCBmb3JjZXMgZm9yIHZlcnkgY2xvc2Ugbm9kZXM7IHJhbmRvbWl6ZSBkaXJlY3Rpb24gaWYgY29pbmNpZGVudC5cbiAgICBpZiAocXVhZC5kYXRhICE9PSBub2RlIHx8IHF1YWQubmV4dCkge1xuICAgICAgaWYgKHggPT09IDApIHggPSBqaWdnbGUoKSwgbCArPSB4ICogeDtcbiAgICAgIGlmICh5ID09PSAwKSB5ID0gamlnZ2xlKCksIGwgKz0geSAqIHk7XG4gICAgICBpZiAobCA8IGRpc3RhbmNlTWluMikgbCA9IE1hdGguc3FydChkaXN0YW5jZU1pbjIgKiBsKTtcbiAgICB9XG5cbiAgICBkbyBpZiAocXVhZC5kYXRhICE9PSBub2RlKSB7XG4gICAgICB3ID0gc3RyZW5ndGhzW3F1YWQuZGF0YS5pbmRleF0gKiBhbHBoYSAvIGw7XG4gICAgICBub2RlLnZ4ICs9IHggKiB3O1xuICAgICAgbm9kZS52eSArPSB5ICogdztcbiAgICB9IHdoaWxlIChxdWFkID0gcXVhZC5uZXh0KTtcbiAgfVxuXG4gIGZvcmNlLmluaXRpYWxpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgbm9kZXMgPSBfO1xuICAgIGluaXRpYWxpemUoKTtcbiAgfTtcblxuICBmb3JjZS5zdHJlbmd0aCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdHJlbmd0aCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkNigrXyksIGluaXRpYWxpemUoKSwgZm9yY2UpIDogc3RyZW5ndGg7XG4gIH07XG5cbiAgZm9yY2UuZGlzdGFuY2VNaW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZGlzdGFuY2VNaW4yID0gXyAqIF8sIGZvcmNlKSA6IE1hdGguc3FydChkaXN0YW5jZU1pbjIpO1xuICB9O1xuXG4gIGZvcmNlLmRpc3RhbmNlTWF4ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRpc3RhbmNlTWF4MiA9IF8gKiBfLCBmb3JjZSkgOiBNYXRoLnNxcnQoZGlzdGFuY2VNYXgyKTtcbiAgfTtcblxuICBmb3JjZS50aGV0YSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aGV0YTIgPSBfICogXywgZm9yY2UpIDogTWF0aC5zcXJ0KHRoZXRhMik7XG4gIH07XG5cbiAgcmV0dXJuIGZvcmNlO1xufTtcblxudmFyIHgkMiA9IGZ1bmN0aW9uKHgpIHtcbiAgdmFyIHN0cmVuZ3RoID0gY29uc3RhbnQkNigwLjEpLFxuICAgICAgbm9kZXMsXG4gICAgICBzdHJlbmd0aHMsXG4gICAgICB4ejtcblxuICBpZiAodHlwZW9mIHggIT09IFwiZnVuY3Rpb25cIikgeCA9IGNvbnN0YW50JDYoeCA9PSBudWxsID8gMCA6ICt4KTtcblxuICBmdW5jdGlvbiBmb3JjZShhbHBoYSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gbm9kZXMubGVuZ3RoLCBub2RlOyBpIDwgbjsgKytpKSB7XG4gICAgICBub2RlID0gbm9kZXNbaV0sIG5vZGUudnggKz0gKHh6W2ldIC0gbm9kZS54KSAqIHN0cmVuZ3Roc1tpXSAqIGFscGhhO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgaWYgKCFub2RlcykgcmV0dXJuO1xuICAgIHZhciBpLCBuID0gbm9kZXMubGVuZ3RoO1xuICAgIHN0cmVuZ3RocyA9IG5ldyBBcnJheShuKTtcbiAgICB4eiA9IG5ldyBBcnJheShuKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBzdHJlbmd0aHNbaV0gPSBpc05hTih4eltpXSA9ICt4KG5vZGVzW2ldLCBpLCBub2RlcykpID8gMCA6ICtzdHJlbmd0aChub2Rlc1tpXSwgaSwgbm9kZXMpO1xuICAgIH1cbiAgfVxuXG4gIGZvcmNlLmluaXRpYWxpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgbm9kZXMgPSBfO1xuICAgIGluaXRpYWxpemUoKTtcbiAgfTtcblxuICBmb3JjZS5zdHJlbmd0aCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdHJlbmd0aCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkNigrXyksIGluaXRpYWxpemUoKSwgZm9yY2UpIDogc3RyZW5ndGg7XG4gIH07XG5cbiAgZm9yY2UueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQ2KCtfKSwgaW5pdGlhbGl6ZSgpLCBmb3JjZSkgOiB4O1xuICB9O1xuXG4gIHJldHVybiBmb3JjZTtcbn07XG5cbnZhciB5JDIgPSBmdW5jdGlvbih5KSB7XG4gIHZhciBzdHJlbmd0aCA9IGNvbnN0YW50JDYoMC4xKSxcbiAgICAgIG5vZGVzLFxuICAgICAgc3RyZW5ndGhzLFxuICAgICAgeXo7XG5cbiAgaWYgKHR5cGVvZiB5ICE9PSBcImZ1bmN0aW9uXCIpIHkgPSBjb25zdGFudCQ2KHkgPT0gbnVsbCA/IDAgOiAreSk7XG5cbiAgZnVuY3Rpb24gZm9yY2UoYWxwaGEpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IG5vZGVzLmxlbmd0aCwgbm9kZTsgaSA8IG47ICsraSkge1xuICAgICAgbm9kZSA9IG5vZGVzW2ldLCBub2RlLnZ5ICs9ICh5eltpXSAtIG5vZGUueSkgKiBzdHJlbmd0aHNbaV0gKiBhbHBoYTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgIGlmICghbm9kZXMpIHJldHVybjtcbiAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aDtcbiAgICBzdHJlbmd0aHMgPSBuZXcgQXJyYXkobik7XG4gICAgeXogPSBuZXcgQXJyYXkobik7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgc3RyZW5ndGhzW2ldID0gaXNOYU4oeXpbaV0gPSAreShub2Rlc1tpXSwgaSwgbm9kZXMpKSA/IDAgOiArc3RyZW5ndGgobm9kZXNbaV0sIGksIG5vZGVzKTtcbiAgICB9XG4gIH1cblxuICBmb3JjZS5pbml0aWFsaXplID0gZnVuY3Rpb24oXykge1xuICAgIG5vZGVzID0gXztcbiAgICBpbml0aWFsaXplKCk7XG4gIH07XG5cbiAgZm9yY2Uuc3RyZW5ndGggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3RyZW5ndGggPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDYoK18pLCBpbml0aWFsaXplKCksIGZvcmNlKSA6IHN0cmVuZ3RoO1xuICB9O1xuXG4gIGZvcmNlLnkgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkNigrXyksIGluaXRpYWxpemUoKSwgZm9yY2UpIDogeTtcbiAgfTtcblxuICByZXR1cm4gZm9yY2U7XG59O1xuXG4vLyBDb21wdXRlcyB0aGUgZGVjaW1hbCBjb2VmZmljaWVudCBhbmQgZXhwb25lbnQgb2YgdGhlIHNwZWNpZmllZCBudW1iZXIgeCB3aXRoXG4vLyBzaWduaWZpY2FudCBkaWdpdHMgcCwgd2hlcmUgeCBpcyBwb3NpdGl2ZSBhbmQgcCBpcyBpbiBbMSwgMjFdIG9yIHVuZGVmaW5lZC5cbi8vIEZvciBleGFtcGxlLCBmb3JtYXREZWNpbWFsKDEuMjMpIHJldHVybnMgW1wiMTIzXCIsIDBdLlxudmFyIGZvcm1hdERlY2ltYWwgPSBmdW5jdGlvbih4LCBwKSB7XG4gIGlmICgoaSA9ICh4ID0gcCA/IHgudG9FeHBvbmVudGlhbChwIC0gMSkgOiB4LnRvRXhwb25lbnRpYWwoKSkuaW5kZXhPZihcImVcIikpIDwgMCkgcmV0dXJuIG51bGw7IC8vIE5hTiwgwrFJbmZpbml0eVxuICB2YXIgaSwgY29lZmZpY2llbnQgPSB4LnNsaWNlKDAsIGkpO1xuXG4gIC8vIFRoZSBzdHJpbmcgcmV0dXJuZWQgYnkgdG9FeHBvbmVudGlhbCBlaXRoZXIgaGFzIHRoZSBmb3JtIFxcZFxcLlxcZCtlWy0rXVxcZCtcbiAgLy8gKGUuZy4sIDEuMmUrMykgb3IgdGhlIGZvcm0gXFxkZVstK11cXGQrIChlLmcuLCAxZSszKS5cbiAgcmV0dXJuIFtcbiAgICBjb2VmZmljaWVudC5sZW5ndGggPiAxID8gY29lZmZpY2llbnRbMF0gKyBjb2VmZmljaWVudC5zbGljZSgyKSA6IGNvZWZmaWNpZW50LFxuICAgICt4LnNsaWNlKGkgKyAxKVxuICBdO1xufTtcblxudmFyIGV4cG9uZW50JDEgPSBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4ID0gZm9ybWF0RGVjaW1hbChNYXRoLmFicyh4KSksIHggPyB4WzFdIDogTmFOO1xufTtcblxudmFyIGZvcm1hdEdyb3VwID0gZnVuY3Rpb24oZ3JvdXBpbmcsIHRob3VzYW5kcykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIHdpZHRoKSB7XG4gICAgdmFyIGkgPSB2YWx1ZS5sZW5ndGgsXG4gICAgICAgIHQgPSBbXSxcbiAgICAgICAgaiA9IDAsXG4gICAgICAgIGcgPSBncm91cGluZ1swXSxcbiAgICAgICAgbGVuZ3RoID0gMDtcblxuICAgIHdoaWxlIChpID4gMCAmJiBnID4gMCkge1xuICAgICAgaWYgKGxlbmd0aCArIGcgKyAxID4gd2lkdGgpIGcgPSBNYXRoLm1heCgxLCB3aWR0aCAtIGxlbmd0aCk7XG4gICAgICB0LnB1c2godmFsdWUuc3Vic3RyaW5nKGkgLT0gZywgaSArIGcpKTtcbiAgICAgIGlmICgobGVuZ3RoICs9IGcgKyAxKSA+IHdpZHRoKSBicmVhaztcbiAgICAgIGcgPSBncm91cGluZ1tqID0gKGogKyAxKSAlIGdyb3VwaW5nLmxlbmd0aF07XG4gICAgfVxuXG4gICAgcmV0dXJuIHQucmV2ZXJzZSgpLmpvaW4odGhvdXNhbmRzKTtcbiAgfTtcbn07XG5cbnZhciBmb3JtYXROdW1lcmFscyA9IGZ1bmN0aW9uKG51bWVyYWxzKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKC9bMC05XS9nLCBmdW5jdGlvbihpKSB7XG4gICAgICByZXR1cm4gbnVtZXJhbHNbK2ldO1xuICAgIH0pO1xuICB9O1xufTtcblxudmFyIGZvcm1hdERlZmF1bHQgPSBmdW5jdGlvbih4LCBwKSB7XG4gIHggPSB4LnRvUHJlY2lzaW9uKHApO1xuXG4gIG91dDogZm9yICh2YXIgbiA9IHgubGVuZ3RoLCBpID0gMSwgaTAgPSAtMSwgaTE7IGkgPCBuOyArK2kpIHtcbiAgICBzd2l0Y2ggKHhbaV0pIHtcbiAgICAgIGNhc2UgXCIuXCI6IGkwID0gaTEgPSBpOyBicmVhaztcbiAgICAgIGNhc2UgXCIwXCI6IGlmIChpMCA9PT0gMCkgaTAgPSBpOyBpMSA9IGk7IGJyZWFrO1xuICAgICAgY2FzZSBcImVcIjogYnJlYWsgb3V0O1xuICAgICAgZGVmYXVsdDogaWYgKGkwID4gMCkgaTAgPSAwOyBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaTAgPiAwID8geC5zbGljZSgwLCBpMCkgKyB4LnNsaWNlKGkxICsgMSkgOiB4O1xufTtcblxudmFyIHByZWZpeEV4cG9uZW50O1xuXG52YXIgZm9ybWF0UHJlZml4QXV0byA9IGZ1bmN0aW9uKHgsIHApIHtcbiAgdmFyIGQgPSBmb3JtYXREZWNpbWFsKHgsIHApO1xuICBpZiAoIWQpIHJldHVybiB4ICsgXCJcIjtcbiAgdmFyIGNvZWZmaWNpZW50ID0gZFswXSxcbiAgICAgIGV4cG9uZW50ID0gZFsxXSxcbiAgICAgIGkgPSBleHBvbmVudCAtIChwcmVmaXhFeHBvbmVudCA9IE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50IC8gMykpKSAqIDMpICsgMSxcbiAgICAgIG4gPSBjb2VmZmljaWVudC5sZW5ndGg7XG4gIHJldHVybiBpID09PSBuID8gY29lZmZpY2llbnRcbiAgICAgIDogaSA+IG4gPyBjb2VmZmljaWVudCArIG5ldyBBcnJheShpIC0gbiArIDEpLmpvaW4oXCIwXCIpXG4gICAgICA6IGkgPiAwID8gY29lZmZpY2llbnQuc2xpY2UoMCwgaSkgKyBcIi5cIiArIGNvZWZmaWNpZW50LnNsaWNlKGkpXG4gICAgICA6IFwiMC5cIiArIG5ldyBBcnJheSgxIC0gaSkuam9pbihcIjBcIikgKyBmb3JtYXREZWNpbWFsKHgsIE1hdGgubWF4KDAsIHAgKyBpIC0gMSkpWzBdOyAvLyBsZXNzIHRoYW4gMXkhXG59O1xuXG52YXIgZm9ybWF0Um91bmRlZCA9IGZ1bmN0aW9uKHgsIHApIHtcbiAgdmFyIGQgPSBmb3JtYXREZWNpbWFsKHgsIHApO1xuICBpZiAoIWQpIHJldHVybiB4ICsgXCJcIjtcbiAgdmFyIGNvZWZmaWNpZW50ID0gZFswXSxcbiAgICAgIGV4cG9uZW50ID0gZFsxXTtcbiAgcmV0dXJuIGV4cG9uZW50IDwgMCA/IFwiMC5cIiArIG5ldyBBcnJheSgtZXhwb25lbnQpLmpvaW4oXCIwXCIpICsgY29lZmZpY2llbnRcbiAgICAgIDogY29lZmZpY2llbnQubGVuZ3RoID4gZXhwb25lbnQgKyAxID8gY29lZmZpY2llbnQuc2xpY2UoMCwgZXhwb25lbnQgKyAxKSArIFwiLlwiICsgY29lZmZpY2llbnQuc2xpY2UoZXhwb25lbnQgKyAxKVxuICAgICAgOiBjb2VmZmljaWVudCArIG5ldyBBcnJheShleHBvbmVudCAtIGNvZWZmaWNpZW50Lmxlbmd0aCArIDIpLmpvaW4oXCIwXCIpO1xufTtcblxudmFyIGZvcm1hdFR5cGVzID0ge1xuICBcIlwiOiBmb3JtYXREZWZhdWx0LFxuICBcIiVcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4gKHggKiAxMDApLnRvRml4ZWQocCk7IH0sXG4gIFwiYlwiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDIpOyB9LFxuICBcImNcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4geCArIFwiXCI7IH0sXG4gIFwiZFwiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDEwKTsgfSxcbiAgXCJlXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuIHgudG9FeHBvbmVudGlhbChwKTsgfSxcbiAgXCJmXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuIHgudG9GaXhlZChwKTsgfSxcbiAgXCJnXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuIHgudG9QcmVjaXNpb24ocCk7IH0sXG4gIFwib1wiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDgpOyB9LFxuICBcInBcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4gZm9ybWF0Um91bmRlZCh4ICogMTAwLCBwKTsgfSxcbiAgXCJyXCI6IGZvcm1hdFJvdW5kZWQsXG4gIFwic1wiOiBmb3JtYXRQcmVmaXhBdXRvLFxuICBcIlhcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTsgfSxcbiAgXCJ4XCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoMTYpOyB9XG59O1xuXG4vLyBbW2ZpbGxdYWxpZ25dW3NpZ25dW3N5bWJvbF1bMF1bd2lkdGhdWyxdWy5wcmVjaXNpb25dW3R5cGVdXG52YXIgcmUgPSAvXig/OiguKT8oWzw+PV5dKSk/KFsrXFwtXFwoIF0pPyhbJCNdKT8oMCk/KFxcZCspPygsKT8oXFwuXFxkKyk/KFthLXolXSk/JC9pO1xuXG5mdW5jdGlvbiBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKSB7XG4gIHJldHVybiBuZXcgRm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcik7XG59XG5cbmZvcm1hdFNwZWNpZmllci5wcm90b3R5cGUgPSBGb3JtYXRTcGVjaWZpZXIucHJvdG90eXBlOyAvLyBpbnN0YW5jZW9mXG5cbmZ1bmN0aW9uIEZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpIHtcbiAgaWYgKCEobWF0Y2ggPSByZS5leGVjKHNwZWNpZmllcikpKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGZvcm1hdDogXCIgKyBzcGVjaWZpZXIpO1xuXG4gIHZhciBtYXRjaCxcbiAgICAgIGZpbGwgPSBtYXRjaFsxXSB8fCBcIiBcIixcbiAgICAgIGFsaWduID0gbWF0Y2hbMl0gfHwgXCI+XCIsXG4gICAgICBzaWduID0gbWF0Y2hbM10gfHwgXCItXCIsXG4gICAgICBzeW1ib2wgPSBtYXRjaFs0XSB8fCBcIlwiLFxuICAgICAgemVybyA9ICEhbWF0Y2hbNV0sXG4gICAgICB3aWR0aCA9IG1hdGNoWzZdICYmICttYXRjaFs2XSxcbiAgICAgIGNvbW1hID0gISFtYXRjaFs3XSxcbiAgICAgIHByZWNpc2lvbiA9IG1hdGNoWzhdICYmICttYXRjaFs4XS5zbGljZSgxKSxcbiAgICAgIHR5cGUgPSBtYXRjaFs5XSB8fCBcIlwiO1xuXG4gIC8vIFRoZSBcIm5cIiB0eXBlIGlzIGFuIGFsaWFzIGZvciBcIixnXCIuXG4gIGlmICh0eXBlID09PSBcIm5cIikgY29tbWEgPSB0cnVlLCB0eXBlID0gXCJnXCI7XG5cbiAgLy8gTWFwIGludmFsaWQgdHlwZXMgdG8gdGhlIGRlZmF1bHQgZm9ybWF0LlxuICBlbHNlIGlmICghZm9ybWF0VHlwZXNbdHlwZV0pIHR5cGUgPSBcIlwiO1xuXG4gIC8vIElmIHplcm8gZmlsbCBpcyBzcGVjaWZpZWQsIHBhZGRpbmcgZ29lcyBhZnRlciBzaWduIGFuZCBiZWZvcmUgZGlnaXRzLlxuICBpZiAoemVybyB8fCAoZmlsbCA9PT0gXCIwXCIgJiYgYWxpZ24gPT09IFwiPVwiKSkgemVybyA9IHRydWUsIGZpbGwgPSBcIjBcIiwgYWxpZ24gPSBcIj1cIjtcblxuICB0aGlzLmZpbGwgPSBmaWxsO1xuICB0aGlzLmFsaWduID0gYWxpZ247XG4gIHRoaXMuc2lnbiA9IHNpZ247XG4gIHRoaXMuc3ltYm9sID0gc3ltYm9sO1xuICB0aGlzLnplcm8gPSB6ZXJvO1xuICB0aGlzLndpZHRoID0gd2lkdGg7XG4gIHRoaXMuY29tbWEgPSBjb21tYTtcbiAgdGhpcy5wcmVjaXNpb24gPSBwcmVjaXNpb247XG4gIHRoaXMudHlwZSA9IHR5cGU7XG59XG5cbkZvcm1hdFNwZWNpZmllci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZmlsbFxuICAgICAgKyB0aGlzLmFsaWduXG4gICAgICArIHRoaXMuc2lnblxuICAgICAgKyB0aGlzLnN5bWJvbFxuICAgICAgKyAodGhpcy56ZXJvID8gXCIwXCIgOiBcIlwiKVxuICAgICAgKyAodGhpcy53aWR0aCA9PSBudWxsID8gXCJcIiA6IE1hdGgubWF4KDEsIHRoaXMud2lkdGggfCAwKSlcbiAgICAgICsgKHRoaXMuY29tbWEgPyBcIixcIiA6IFwiXCIpXG4gICAgICArICh0aGlzLnByZWNpc2lvbiA9PSBudWxsID8gXCJcIiA6IFwiLlwiICsgTWF0aC5tYXgoMCwgdGhpcy5wcmVjaXNpb24gfCAwKSlcbiAgICAgICsgdGhpcy50eXBlO1xufTtcblxudmFyIGlkZW50aXR5JDMgPSBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4O1xufTtcblxudmFyIHByZWZpeGVzID0gW1wieVwiLFwielwiLFwiYVwiLFwiZlwiLFwicFwiLFwiblwiLFwiXFx4QjVcIixcIm1cIixcIlwiLFwia1wiLFwiTVwiLFwiR1wiLFwiVFwiLFwiUFwiLFwiRVwiLFwiWlwiLFwiWVwiXTtcblxudmFyIGZvcm1hdExvY2FsZSA9IGZ1bmN0aW9uKGxvY2FsZSkge1xuICB2YXIgZ3JvdXAgPSBsb2NhbGUuZ3JvdXBpbmcgJiYgbG9jYWxlLnRob3VzYW5kcyA/IGZvcm1hdEdyb3VwKGxvY2FsZS5ncm91cGluZywgbG9jYWxlLnRob3VzYW5kcykgOiBpZGVudGl0eSQzLFxuICAgICAgY3VycmVuY3kgPSBsb2NhbGUuY3VycmVuY3ksXG4gICAgICBkZWNpbWFsID0gbG9jYWxlLmRlY2ltYWwsXG4gICAgICBudW1lcmFscyA9IGxvY2FsZS5udW1lcmFscyA/IGZvcm1hdE51bWVyYWxzKGxvY2FsZS5udW1lcmFscykgOiBpZGVudGl0eSQzLFxuICAgICAgcGVyY2VudCA9IGxvY2FsZS5wZXJjZW50IHx8IFwiJVwiO1xuXG4gIGZ1bmN0aW9uIG5ld0Zvcm1hdChzcGVjaWZpZXIpIHtcbiAgICBzcGVjaWZpZXIgPSBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKTtcblxuICAgIHZhciBmaWxsID0gc3BlY2lmaWVyLmZpbGwsXG4gICAgICAgIGFsaWduID0gc3BlY2lmaWVyLmFsaWduLFxuICAgICAgICBzaWduID0gc3BlY2lmaWVyLnNpZ24sXG4gICAgICAgIHN5bWJvbCA9IHNwZWNpZmllci5zeW1ib2wsXG4gICAgICAgIHplcm8gPSBzcGVjaWZpZXIuemVybyxcbiAgICAgICAgd2lkdGggPSBzcGVjaWZpZXIud2lkdGgsXG4gICAgICAgIGNvbW1hID0gc3BlY2lmaWVyLmNvbW1hLFxuICAgICAgICBwcmVjaXNpb24gPSBzcGVjaWZpZXIucHJlY2lzaW9uLFxuICAgICAgICB0eXBlID0gc3BlY2lmaWVyLnR5cGU7XG5cbiAgICAvLyBDb21wdXRlIHRoZSBwcmVmaXggYW5kIHN1ZmZpeC5cbiAgICAvLyBGb3IgU0ktcHJlZml4LCB0aGUgc3VmZml4IGlzIGxhemlseSBjb21wdXRlZC5cbiAgICB2YXIgcHJlZml4ID0gc3ltYm9sID09PSBcIiRcIiA/IGN1cnJlbmN5WzBdIDogc3ltYm9sID09PSBcIiNcIiAmJiAvW2JveFhdLy50ZXN0KHR5cGUpID8gXCIwXCIgKyB0eXBlLnRvTG93ZXJDYXNlKCkgOiBcIlwiLFxuICAgICAgICBzdWZmaXggPSBzeW1ib2wgPT09IFwiJFwiID8gY3VycmVuY3lbMV0gOiAvWyVwXS8udGVzdCh0eXBlKSA/IHBlcmNlbnQgOiBcIlwiO1xuXG4gICAgLy8gV2hhdCBmb3JtYXQgZnVuY3Rpb24gc2hvdWxkIHdlIHVzZT9cbiAgICAvLyBJcyB0aGlzIGFuIGludGVnZXIgdHlwZT9cbiAgICAvLyBDYW4gdGhpcyB0eXBlIGdlbmVyYXRlIGV4cG9uZW50aWFsIG5vdGF0aW9uP1xuICAgIHZhciBmb3JtYXRUeXBlID0gZm9ybWF0VHlwZXNbdHlwZV0sXG4gICAgICAgIG1heWJlU3VmZml4ID0gIXR5cGUgfHwgL1tkZWZncHJzJV0vLnRlc3QodHlwZSk7XG5cbiAgICAvLyBTZXQgdGhlIGRlZmF1bHQgcHJlY2lzaW9uIGlmIG5vdCBzcGVjaWZpZWQsXG4gICAgLy8gb3IgY2xhbXAgdGhlIHNwZWNpZmllZCBwcmVjaXNpb24gdG8gdGhlIHN1cHBvcnRlZCByYW5nZS5cbiAgICAvLyBGb3Igc2lnbmlmaWNhbnQgcHJlY2lzaW9uLCBpdCBtdXN0IGJlIGluIFsxLCAyMV0uXG4gICAgLy8gRm9yIGZpeGVkIHByZWNpc2lvbiwgaXQgbXVzdCBiZSBpbiBbMCwgMjBdLlxuICAgIHByZWNpc2lvbiA9IHByZWNpc2lvbiA9PSBudWxsID8gKHR5cGUgPyA2IDogMTIpXG4gICAgICAgIDogL1tncHJzXS8udGVzdCh0eXBlKSA/IE1hdGgubWF4KDEsIE1hdGgubWluKDIxLCBwcmVjaXNpb24pKVxuICAgICAgICA6IE1hdGgubWF4KDAsIE1hdGgubWluKDIwLCBwcmVjaXNpb24pKTtcblxuICAgIGZ1bmN0aW9uIGZvcm1hdCh2YWx1ZSkge1xuICAgICAgdmFyIHZhbHVlUHJlZml4ID0gcHJlZml4LFxuICAgICAgICAgIHZhbHVlU3VmZml4ID0gc3VmZml4LFxuICAgICAgICAgIGksIG4sIGM7XG5cbiAgICAgIGlmICh0eXBlID09PSBcImNcIikge1xuICAgICAgICB2YWx1ZVN1ZmZpeCA9IGZvcm1hdFR5cGUodmFsdWUpICsgdmFsdWVTdWZmaXg7XG4gICAgICAgIHZhbHVlID0gXCJcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gK3ZhbHVlO1xuXG4gICAgICAgIC8vIFBlcmZvcm0gdGhlIGluaXRpYWwgZm9ybWF0dGluZy5cbiAgICAgICAgdmFyIHZhbHVlTmVnYXRpdmUgPSB2YWx1ZSA8IDA7XG4gICAgICAgIHZhbHVlID0gZm9ybWF0VHlwZShNYXRoLmFicyh2YWx1ZSksIHByZWNpc2lvbik7XG5cbiAgICAgICAgLy8gSWYgYSBuZWdhdGl2ZSB2YWx1ZSByb3VuZHMgdG8gemVybyBkdXJpbmcgZm9ybWF0dGluZywgdHJlYXQgYXMgcG9zaXRpdmUuXG4gICAgICAgIGlmICh2YWx1ZU5lZ2F0aXZlICYmICt2YWx1ZSA9PT0gMCkgdmFsdWVOZWdhdGl2ZSA9IGZhbHNlO1xuXG4gICAgICAgIC8vIENvbXB1dGUgdGhlIHByZWZpeCBhbmQgc3VmZml4LlxuICAgICAgICB2YWx1ZVByZWZpeCA9ICh2YWx1ZU5lZ2F0aXZlID8gKHNpZ24gPT09IFwiKFwiID8gc2lnbiA6IFwiLVwiKSA6IHNpZ24gPT09IFwiLVwiIHx8IHNpZ24gPT09IFwiKFwiID8gXCJcIiA6IHNpZ24pICsgdmFsdWVQcmVmaXg7XG4gICAgICAgIHZhbHVlU3VmZml4ID0gdmFsdWVTdWZmaXggKyAodHlwZSA9PT0gXCJzXCIgPyBwcmVmaXhlc1s4ICsgcHJlZml4RXhwb25lbnQgLyAzXSA6IFwiXCIpICsgKHZhbHVlTmVnYXRpdmUgJiYgc2lnbiA9PT0gXCIoXCIgPyBcIilcIiA6IFwiXCIpO1xuXG4gICAgICAgIC8vIEJyZWFrIHRoZSBmb3JtYXR0ZWQgdmFsdWUgaW50byB0aGUgaW50ZWdlciDigJx2YWx1ZeKAnSBwYXJ0IHRoYXQgY2FuIGJlXG4gICAgICAgIC8vIGdyb3VwZWQsIGFuZCBmcmFjdGlvbmFsIG9yIGV4cG9uZW50aWFsIOKAnHN1ZmZpeOKAnSBwYXJ0IHRoYXQgaXMgbm90LlxuICAgICAgICBpZiAobWF5YmVTdWZmaXgpIHtcbiAgICAgICAgICBpID0gLTEsIG4gPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgICAgIGlmIChjID0gdmFsdWUuY2hhckNvZGVBdChpKSwgNDggPiBjIHx8IGMgPiA1Nykge1xuICAgICAgICAgICAgICB2YWx1ZVN1ZmZpeCA9IChjID09PSA0NiA/IGRlY2ltYWwgKyB2YWx1ZS5zbGljZShpICsgMSkgOiB2YWx1ZS5zbGljZShpKSkgKyB2YWx1ZVN1ZmZpeDtcbiAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgwLCBpKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHRoZSBmaWxsIGNoYXJhY3RlciBpcyBub3QgXCIwXCIsIGdyb3VwaW5nIGlzIGFwcGxpZWQgYmVmb3JlIHBhZGRpbmcuXG4gICAgICBpZiAoY29tbWEgJiYgIXplcm8pIHZhbHVlID0gZ3JvdXAodmFsdWUsIEluZmluaXR5KTtcblxuICAgICAgLy8gQ29tcHV0ZSB0aGUgcGFkZGluZy5cbiAgICAgIHZhciBsZW5ndGggPSB2YWx1ZVByZWZpeC5sZW5ndGggKyB2YWx1ZS5sZW5ndGggKyB2YWx1ZVN1ZmZpeC5sZW5ndGgsXG4gICAgICAgICAgcGFkZGluZyA9IGxlbmd0aCA8IHdpZHRoID8gbmV3IEFycmF5KHdpZHRoIC0gbGVuZ3RoICsgMSkuam9pbihmaWxsKSA6IFwiXCI7XG5cbiAgICAgIC8vIElmIHRoZSBmaWxsIGNoYXJhY3RlciBpcyBcIjBcIiwgZ3JvdXBpbmcgaXMgYXBwbGllZCBhZnRlciBwYWRkaW5nLlxuICAgICAgaWYgKGNvbW1hICYmIHplcm8pIHZhbHVlID0gZ3JvdXAocGFkZGluZyArIHZhbHVlLCBwYWRkaW5nLmxlbmd0aCA/IHdpZHRoIC0gdmFsdWVTdWZmaXgubGVuZ3RoIDogSW5maW5pdHkpLCBwYWRkaW5nID0gXCJcIjtcblxuICAgICAgLy8gUmVjb25zdHJ1Y3QgdGhlIGZpbmFsIG91dHB1dCBiYXNlZCBvbiB0aGUgZGVzaXJlZCBhbGlnbm1lbnQuXG4gICAgICBzd2l0Y2ggKGFsaWduKSB7XG4gICAgICAgIGNhc2UgXCI8XCI6IHZhbHVlID0gdmFsdWVQcmVmaXggKyB2YWx1ZSArIHZhbHVlU3VmZml4ICsgcGFkZGluZzsgYnJlYWs7XG4gICAgICAgIGNhc2UgXCI9XCI6IHZhbHVlID0gdmFsdWVQcmVmaXggKyBwYWRkaW5nICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeDsgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJeXCI6IHZhbHVlID0gcGFkZGluZy5zbGljZSgwLCBsZW5ndGggPSBwYWRkaW5nLmxlbmd0aCA+PiAxKSArIHZhbHVlUHJlZml4ICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeCArIHBhZGRpbmcuc2xpY2UobGVuZ3RoKTsgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IHZhbHVlID0gcGFkZGluZyArIHZhbHVlUHJlZml4ICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeDsgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudW1lcmFscyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgZm9ybWF0LnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc3BlY2lmaWVyICsgXCJcIjtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGZvcm1hdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFByZWZpeChzcGVjaWZpZXIsIHZhbHVlKSB7XG4gICAgdmFyIGYgPSBuZXdGb3JtYXQoKHNwZWNpZmllciA9IGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpLCBzcGVjaWZpZXIudHlwZSA9IFwiZlwiLCBzcGVjaWZpZXIpKSxcbiAgICAgICAgZSA9IE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50JDEodmFsdWUpIC8gMykpKSAqIDMsXG4gICAgICAgIGsgPSBNYXRoLnBvdygxMCwgLWUpLFxuICAgICAgICBwcmVmaXggPSBwcmVmaXhlc1s4ICsgZSAvIDNdO1xuICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGYoayAqIHZhbHVlKSArIHByZWZpeDtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBmb3JtYXQ6IG5ld0Zvcm1hdCxcbiAgICBmb3JtYXRQcmVmaXg6IGZvcm1hdFByZWZpeFxuICB9O1xufTtcblxudmFyIGxvY2FsZSQxO1xuXG5cblxuZGVmYXVsdExvY2FsZSh7XG4gIGRlY2ltYWw6IFwiLlwiLFxuICB0aG91c2FuZHM6IFwiLFwiLFxuICBncm91cGluZzogWzNdLFxuICBjdXJyZW5jeTogW1wiJFwiLCBcIlwiXVxufSk7XG5cbmZ1bmN0aW9uIGRlZmF1bHRMb2NhbGUoZGVmaW5pdGlvbikge1xuICBsb2NhbGUkMSA9IGZvcm1hdExvY2FsZShkZWZpbml0aW9uKTtcbiAgZXhwb3J0cy5mb3JtYXQgPSBsb2NhbGUkMS5mb3JtYXQ7XG4gIGV4cG9ydHMuZm9ybWF0UHJlZml4ID0gbG9jYWxlJDEuZm9ybWF0UHJlZml4O1xuICByZXR1cm4gbG9jYWxlJDE7XG59XG5cbnZhciBwcmVjaXNpb25GaXhlZCA9IGZ1bmN0aW9uKHN0ZXApIHtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIC1leHBvbmVudCQxKE1hdGguYWJzKHN0ZXApKSk7XG59O1xuXG52YXIgcHJlY2lzaW9uUHJlZml4ID0gZnVuY3Rpb24oc3RlcCwgdmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50JDEodmFsdWUpIC8gMykpKSAqIDMgLSBleHBvbmVudCQxKE1hdGguYWJzKHN0ZXApKSk7XG59O1xuXG52YXIgcHJlY2lzaW9uUm91bmQgPSBmdW5jdGlvbihzdGVwLCBtYXgpIHtcbiAgc3RlcCA9IE1hdGguYWJzKHN0ZXApLCBtYXggPSBNYXRoLmFicyhtYXgpIC0gc3RlcDtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIGV4cG9uZW50JDEobWF4KSAtIGV4cG9uZW50JDEoc3RlcCkpICsgMTtcbn07XG5cbi8vIEFkZHMgZmxvYXRpbmcgcG9pbnQgbnVtYmVycyB3aXRoIHR3aWNlIHRoZSBub3JtYWwgcHJlY2lzaW9uLlxuLy8gUmVmZXJlbmNlOiBKLiBSLiBTaGV3Y2h1aywgQWRhcHRpdmUgUHJlY2lzaW9uIEZsb2F0aW5nLVBvaW50IEFyaXRobWV0aWMgYW5kXG4vLyBGYXN0IFJvYnVzdCBHZW9tZXRyaWMgUHJlZGljYXRlcywgRGlzY3JldGUgJiBDb21wdXRhdGlvbmFsIEdlb21ldHJ5IDE4KDMpXG4vLyAzMDXigJMzNjMgKDE5OTcpLlxuLy8gQ29kZSBhZGFwdGVkIGZyb20gR2VvZ3JhcGhpY0xpYiBieSBDaGFybGVzIEYuIEYuIEthcm5leSxcbi8vIGh0dHA6Ly9nZW9ncmFwaGljbGliLnNvdXJjZWZvcmdlLm5ldC9cblxudmFyIGFkZGVyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgQWRkZXI7XG59O1xuXG5mdW5jdGlvbiBBZGRlcigpIHtcbiAgdGhpcy5yZXNldCgpO1xufVxuXG5BZGRlci5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBBZGRlcixcbiAgcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucyA9IC8vIHJvdW5kZWQgdmFsdWVcbiAgICB0aGlzLnQgPSAwOyAvLyBleGFjdCBlcnJvclxuICB9LFxuICBhZGQ6IGZ1bmN0aW9uKHkpIHtcbiAgICBhZGQkMSh0ZW1wLCB5LCB0aGlzLnQpO1xuICAgIGFkZCQxKHRoaXMsIHRlbXAucywgdGhpcy5zKTtcbiAgICBpZiAodGhpcy5zKSB0aGlzLnQgKz0gdGVtcC50O1xuICAgIGVsc2UgdGhpcy5zID0gdGVtcC50O1xuICB9LFxuICB2YWx1ZU9mOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5zO1xuICB9XG59O1xuXG52YXIgdGVtcCA9IG5ldyBBZGRlcjtcblxuZnVuY3Rpb24gYWRkJDEoYWRkZXIsIGEsIGIpIHtcbiAgdmFyIHggPSBhZGRlci5zID0gYSArIGIsXG4gICAgICBidiA9IHggLSBhLFxuICAgICAgYXYgPSB4IC0gYnY7XG4gIGFkZGVyLnQgPSAoYSAtIGF2KSArIChiIC0gYnYpO1xufVxuXG52YXIgZXBzaWxvbiQyID0gMWUtNjtcbnZhciBlcHNpbG9uMiQxID0gMWUtMTI7XG52YXIgcGkkMyA9IE1hdGguUEk7XG52YXIgaGFsZlBpJDIgPSBwaSQzIC8gMjtcbnZhciBxdWFydGVyUGkgPSBwaSQzIC8gNDtcbnZhciB0YXUkMyA9IHBpJDMgKiAyO1xuXG52YXIgZGVncmVlcyQxID0gMTgwIC8gcGkkMztcbnZhciByYWRpYW5zID0gcGkkMyAvIDE4MDtcblxudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIGF0YW4gPSBNYXRoLmF0YW47XG52YXIgYXRhbjIgPSBNYXRoLmF0YW4yO1xudmFyIGNvcyQxID0gTWF0aC5jb3M7XG52YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBleHAgPSBNYXRoLmV4cDtcblxudmFyIGxvZyA9IE1hdGgubG9nO1xudmFyIHBvdyA9IE1hdGgucG93O1xudmFyIHNpbiQxID0gTWF0aC5zaW47XG52YXIgc2lnbiA9IE1hdGguc2lnbiB8fCBmdW5jdGlvbih4KSB7IHJldHVybiB4ID4gMCA/IDEgOiB4IDwgMCA/IC0xIDogMDsgfTtcbnZhciBzcXJ0ID0gTWF0aC5zcXJ0O1xudmFyIHRhbiA9IE1hdGgudGFuO1xuXG5mdW5jdGlvbiBhY29zKHgpIHtcbiAgcmV0dXJuIHggPiAxID8gMCA6IHggPCAtMSA/IHBpJDMgOiBNYXRoLmFjb3MoeCk7XG59XG5cbmZ1bmN0aW9uIGFzaW4oeCkge1xuICByZXR1cm4geCA+IDEgPyBoYWxmUGkkMiA6IHggPCAtMSA/IC1oYWxmUGkkMiA6IE1hdGguYXNpbih4KTtcbn1cblxuZnVuY3Rpb24gaGF2ZXJzaW4oeCkge1xuICByZXR1cm4gKHggPSBzaW4kMSh4IC8gMikpICogeDtcbn1cblxuZnVuY3Rpb24gbm9vcCQxKCkge31cblxuZnVuY3Rpb24gc3RyZWFtR2VvbWV0cnkoZ2VvbWV0cnksIHN0cmVhbSkge1xuICBpZiAoZ2VvbWV0cnkgJiYgc3RyZWFtR2VvbWV0cnlUeXBlLmhhc093blByb3BlcnR5KGdlb21ldHJ5LnR5cGUpKSB7XG4gICAgc3RyZWFtR2VvbWV0cnlUeXBlW2dlb21ldHJ5LnR5cGVdKGdlb21ldHJ5LCBzdHJlYW0pO1xuICB9XG59XG5cbnZhciBzdHJlYW1PYmplY3RUeXBlID0ge1xuICBGZWF0dXJlOiBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICAgIHN0cmVhbUdlb21ldHJ5KG9iamVjdC5nZW9tZXRyeSwgc3RyZWFtKTtcbiAgfSxcbiAgRmVhdHVyZUNvbGxlY3Rpb246IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgdmFyIGZlYXR1cmVzID0gb2JqZWN0LmZlYXR1cmVzLCBpID0gLTEsIG4gPSBmZWF0dXJlcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIHN0cmVhbUdlb21ldHJ5KGZlYXR1cmVzW2ldLmdlb21ldHJ5LCBzdHJlYW0pO1xuICB9XG59O1xuXG52YXIgc3RyZWFtR2VvbWV0cnlUeXBlID0ge1xuICBTcGhlcmU6IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgc3RyZWFtLnNwaGVyZSgpO1xuICB9LFxuICBQb2ludDogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICBvYmplY3QgPSBvYmplY3QuY29vcmRpbmF0ZXM7XG4gICAgc3RyZWFtLnBvaW50KG9iamVjdFswXSwgb2JqZWN0WzFdLCBvYmplY3RbMl0pO1xuICB9LFxuICBNdWx0aVBvaW50OiBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICAgIHZhciBjb29yZGluYXRlcyA9IG9iamVjdC5jb29yZGluYXRlcywgaSA9IC0xLCBuID0gY29vcmRpbmF0ZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBvYmplY3QgPSBjb29yZGluYXRlc1tpXSwgc3RyZWFtLnBvaW50KG9iamVjdFswXSwgb2JqZWN0WzFdLCBvYmplY3RbMl0pO1xuICB9LFxuICBMaW5lU3RyaW5nOiBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICAgIHN0cmVhbUxpbmUob2JqZWN0LmNvb3JkaW5hdGVzLCBzdHJlYW0sIDApO1xuICB9LFxuICBNdWx0aUxpbmVTdHJpbmc6IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgdmFyIGNvb3JkaW5hdGVzID0gb2JqZWN0LmNvb3JkaW5hdGVzLCBpID0gLTEsIG4gPSBjb29yZGluYXRlcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIHN0cmVhbUxpbmUoY29vcmRpbmF0ZXNbaV0sIHN0cmVhbSwgMCk7XG4gIH0sXG4gIFBvbHlnb246IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgc3RyZWFtUG9seWdvbihvYmplY3QuY29vcmRpbmF0ZXMsIHN0cmVhbSk7XG4gIH0sXG4gIE11bHRpUG9seWdvbjogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICB2YXIgY29vcmRpbmF0ZXMgPSBvYmplY3QuY29vcmRpbmF0ZXMsIGkgPSAtMSwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgc3RyZWFtUG9seWdvbihjb29yZGluYXRlc1tpXSwgc3RyZWFtKTtcbiAgfSxcbiAgR2VvbWV0cnlDb2xsZWN0aW9uOiBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICAgIHZhciBnZW9tZXRyaWVzID0gb2JqZWN0Lmdlb21ldHJpZXMsIGkgPSAtMSwgbiA9IGdlb21ldHJpZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBzdHJlYW1HZW9tZXRyeShnZW9tZXRyaWVzW2ldLCBzdHJlYW0pO1xuICB9XG59O1xuXG5mdW5jdGlvbiBzdHJlYW1MaW5lKGNvb3JkaW5hdGVzLCBzdHJlYW0sIGNsb3NlZCkge1xuICB2YXIgaSA9IC0xLCBuID0gY29vcmRpbmF0ZXMubGVuZ3RoIC0gY2xvc2VkLCBjb29yZGluYXRlO1xuICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gIHdoaWxlICgrK2kgPCBuKSBjb29yZGluYXRlID0gY29vcmRpbmF0ZXNbaV0sIHN0cmVhbS5wb2ludChjb29yZGluYXRlWzBdLCBjb29yZGluYXRlWzFdLCBjb29yZGluYXRlWzJdKTtcbiAgc3RyZWFtLmxpbmVFbmQoKTtcbn1cblxuZnVuY3Rpb24gc3RyZWFtUG9seWdvbihjb29yZGluYXRlcywgc3RyZWFtKSB7XG4gIHZhciBpID0gLTEsIG4gPSBjb29yZGluYXRlcy5sZW5ndGg7XG4gIHN0cmVhbS5wb2x5Z29uU3RhcnQoKTtcbiAgd2hpbGUgKCsraSA8IG4pIHN0cmVhbUxpbmUoY29vcmRpbmF0ZXNbaV0sIHN0cmVhbSwgMSk7XG4gIHN0cmVhbS5wb2x5Z29uRW5kKCk7XG59XG5cbnZhciBnZW9TdHJlYW0gPSBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICBpZiAob2JqZWN0ICYmIHN0cmVhbU9iamVjdFR5cGUuaGFzT3duUHJvcGVydHkob2JqZWN0LnR5cGUpKSB7XG4gICAgc3RyZWFtT2JqZWN0VHlwZVtvYmplY3QudHlwZV0ob2JqZWN0LCBzdHJlYW0pO1xuICB9IGVsc2Uge1xuICAgIHN0cmVhbUdlb21ldHJ5KG9iamVjdCwgc3RyZWFtKTtcbiAgfVxufTtcblxudmFyIGFyZWFSaW5nU3VtID0gYWRkZXIoKTtcblxudmFyIGFyZWFTdW0gPSBhZGRlcigpO1xudmFyIGxhbWJkYTAwO1xudmFyIHBoaTAwO1xudmFyIGxhbWJkYTA7XG52YXIgY29zUGhpMDtcbnZhciBzaW5QaGkwO1xuXG52YXIgYXJlYVN0cmVhbSA9IHtcbiAgcG9pbnQ6IG5vb3AkMSxcbiAgbGluZVN0YXJ0OiBub29wJDEsXG4gIGxpbmVFbmQ6IG5vb3AkMSxcbiAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICBhcmVhUmluZ1N1bS5yZXNldCgpO1xuICAgIGFyZWFTdHJlYW0ubGluZVN0YXJ0ID0gYXJlYVJpbmdTdGFydDtcbiAgICBhcmVhU3RyZWFtLmxpbmVFbmQgPSBhcmVhUmluZ0VuZDtcbiAgfSxcbiAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZWFSaW5nID0gK2FyZWFSaW5nU3VtO1xuICAgIGFyZWFTdW0uYWRkKGFyZWFSaW5nIDwgMCA/IHRhdSQzICsgYXJlYVJpbmcgOiBhcmVhUmluZyk7XG4gICAgdGhpcy5saW5lU3RhcnQgPSB0aGlzLmxpbmVFbmQgPSB0aGlzLnBvaW50ID0gbm9vcCQxO1xuICB9LFxuICBzcGhlcmU6IGZ1bmN0aW9uKCkge1xuICAgIGFyZWFTdW0uYWRkKHRhdSQzKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gYXJlYVJpbmdTdGFydCgpIHtcbiAgYXJlYVN0cmVhbS5wb2ludCA9IGFyZWFQb2ludEZpcnN0O1xufVxuXG5mdW5jdGlvbiBhcmVhUmluZ0VuZCgpIHtcbiAgYXJlYVBvaW50KGxhbWJkYTAwLCBwaGkwMCk7XG59XG5cbmZ1bmN0aW9uIGFyZWFQb2ludEZpcnN0KGxhbWJkYSwgcGhpKSB7XG4gIGFyZWFTdHJlYW0ucG9pbnQgPSBhcmVhUG9pbnQ7XG4gIGxhbWJkYTAwID0gbGFtYmRhLCBwaGkwMCA9IHBoaTtcbiAgbGFtYmRhICo9IHJhZGlhbnMsIHBoaSAqPSByYWRpYW5zO1xuICBsYW1iZGEwID0gbGFtYmRhLCBjb3NQaGkwID0gY29zJDEocGhpID0gcGhpIC8gMiArIHF1YXJ0ZXJQaSksIHNpblBoaTAgPSBzaW4kMShwaGkpO1xufVxuXG5mdW5jdGlvbiBhcmVhUG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgbGFtYmRhICo9IHJhZGlhbnMsIHBoaSAqPSByYWRpYW5zO1xuICBwaGkgPSBwaGkgLyAyICsgcXVhcnRlclBpOyAvLyBoYWxmIHRoZSBhbmd1bGFyIGRpc3RhbmNlIGZyb20gc291dGggcG9sZVxuXG4gIC8vIFNwaGVyaWNhbCBleGNlc3MgRSBmb3IgYSBzcGhlcmljYWwgdHJpYW5nbGUgd2l0aCB2ZXJ0aWNlczogc291dGggcG9sZSxcbiAgLy8gcHJldmlvdXMgcG9pbnQsIGN1cnJlbnQgcG9pbnQuICBVc2VzIGEgZm9ybXVsYSBkZXJpdmVkIGZyb20gQ2Fnbm9saeKAmXNcbiAgLy8gdGhlb3JlbS4gIFNlZSBUb2RodW50ZXIsIFNwaGVyaWNhbCBUcmlnLiAoMTg3MSksIFNlYy4gMTAzLCBFcS4gKDIpLlxuICB2YXIgZExhbWJkYSA9IGxhbWJkYSAtIGxhbWJkYTAsXG4gICAgICBzZExhbWJkYSA9IGRMYW1iZGEgPj0gMCA/IDEgOiAtMSxcbiAgICAgIGFkTGFtYmRhID0gc2RMYW1iZGEgKiBkTGFtYmRhLFxuICAgICAgY29zUGhpID0gY29zJDEocGhpKSxcbiAgICAgIHNpblBoaSA9IHNpbiQxKHBoaSksXG4gICAgICBrID0gc2luUGhpMCAqIHNpblBoaSxcbiAgICAgIHUgPSBjb3NQaGkwICogY29zUGhpICsgayAqIGNvcyQxKGFkTGFtYmRhKSxcbiAgICAgIHYgPSBrICogc2RMYW1iZGEgKiBzaW4kMShhZExhbWJkYSk7XG4gIGFyZWFSaW5nU3VtLmFkZChhdGFuMih2LCB1KSk7XG5cbiAgLy8gQWR2YW5jZSB0aGUgcHJldmlvdXMgcG9pbnRzLlxuICBsYW1iZGEwID0gbGFtYmRhLCBjb3NQaGkwID0gY29zUGhpLCBzaW5QaGkwID0gc2luUGhpO1xufVxuXG52YXIgYXJlYSA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICBhcmVhU3VtLnJlc2V0KCk7XG4gIGdlb1N0cmVhbShvYmplY3QsIGFyZWFTdHJlYW0pO1xuICByZXR1cm4gYXJlYVN1bSAqIDI7XG59O1xuXG5mdW5jdGlvbiBzcGhlcmljYWwoY2FydGVzaWFuKSB7XG4gIHJldHVybiBbYXRhbjIoY2FydGVzaWFuWzFdLCBjYXJ0ZXNpYW5bMF0pLCBhc2luKGNhcnRlc2lhblsyXSldO1xufVxuXG5mdW5jdGlvbiBjYXJ0ZXNpYW4oc3BoZXJpY2FsKSB7XG4gIHZhciBsYW1iZGEgPSBzcGhlcmljYWxbMF0sIHBoaSA9IHNwaGVyaWNhbFsxXSwgY29zUGhpID0gY29zJDEocGhpKTtcbiAgcmV0dXJuIFtjb3NQaGkgKiBjb3MkMShsYW1iZGEpLCBjb3NQaGkgKiBzaW4kMShsYW1iZGEpLCBzaW4kMShwaGkpXTtcbn1cblxuZnVuY3Rpb24gY2FydGVzaWFuRG90KGEsIGIpIHtcbiAgcmV0dXJuIGFbMF0gKiBiWzBdICsgYVsxXSAqIGJbMV0gKyBhWzJdICogYlsyXTtcbn1cblxuZnVuY3Rpb24gY2FydGVzaWFuQ3Jvc3MoYSwgYikge1xuICByZXR1cm4gW2FbMV0gKiBiWzJdIC0gYVsyXSAqIGJbMV0sIGFbMl0gKiBiWzBdIC0gYVswXSAqIGJbMl0sIGFbMF0gKiBiWzFdIC0gYVsxXSAqIGJbMF1dO1xufVxuXG4vLyBUT0RPIHJldHVybiBhXG5mdW5jdGlvbiBjYXJ0ZXNpYW5BZGRJblBsYWNlKGEsIGIpIHtcbiAgYVswXSArPSBiWzBdLCBhWzFdICs9IGJbMV0sIGFbMl0gKz0gYlsyXTtcbn1cblxuZnVuY3Rpb24gY2FydGVzaWFuU2NhbGUodmVjdG9yLCBrKSB7XG4gIHJldHVybiBbdmVjdG9yWzBdICogaywgdmVjdG9yWzFdICogaywgdmVjdG9yWzJdICoga107XG59XG5cbi8vIFRPRE8gcmV0dXJuIGRcbmZ1bmN0aW9uIGNhcnRlc2lhbk5vcm1hbGl6ZUluUGxhY2UoZCkge1xuICB2YXIgbCA9IHNxcnQoZFswXSAqIGRbMF0gKyBkWzFdICogZFsxXSArIGRbMl0gKiBkWzJdKTtcbiAgZFswXSAvPSBsLCBkWzFdIC89IGwsIGRbMl0gLz0gbDtcbn1cblxudmFyIGxhbWJkYTAkMTtcbnZhciBwaGkwO1xudmFyIGxhbWJkYTE7XG52YXIgcGhpMTtcbnZhciBsYW1iZGEyO1xudmFyIGxhbWJkYTAwJDE7XG52YXIgcGhpMDAkMTtcbnZhciBwMDtcbnZhciBkZWx0YVN1bSA9IGFkZGVyKCk7XG52YXIgcmFuZ2VzO1xudmFyIHJhbmdlO1xuXG52YXIgYm91bmRzU3RyZWFtID0ge1xuICBwb2ludDogYm91bmRzUG9pbnQsXG4gIGxpbmVTdGFydDogYm91bmRzTGluZVN0YXJ0LFxuICBsaW5lRW5kOiBib3VuZHNMaW5lRW5kLFxuICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIGJvdW5kc1N0cmVhbS5wb2ludCA9IGJvdW5kc1JpbmdQb2ludDtcbiAgICBib3VuZHNTdHJlYW0ubGluZVN0YXJ0ID0gYm91bmRzUmluZ1N0YXJ0O1xuICAgIGJvdW5kc1N0cmVhbS5saW5lRW5kID0gYm91bmRzUmluZ0VuZDtcbiAgICBkZWx0YVN1bS5yZXNldCgpO1xuICAgIGFyZWFTdHJlYW0ucG9seWdvblN0YXJ0KCk7XG4gIH0sXG4gIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGFyZWFTdHJlYW0ucG9seWdvbkVuZCgpO1xuICAgIGJvdW5kc1N0cmVhbS5wb2ludCA9IGJvdW5kc1BvaW50O1xuICAgIGJvdW5kc1N0cmVhbS5saW5lU3RhcnQgPSBib3VuZHNMaW5lU3RhcnQ7XG4gICAgYm91bmRzU3RyZWFtLmxpbmVFbmQgPSBib3VuZHNMaW5lRW5kO1xuICAgIGlmIChhcmVhUmluZ1N1bSA8IDApIGxhbWJkYTAkMSA9IC0obGFtYmRhMSA9IDE4MCksIHBoaTAgPSAtKHBoaTEgPSA5MCk7XG4gICAgZWxzZSBpZiAoZGVsdGFTdW0gPiBlcHNpbG9uJDIpIHBoaTEgPSA5MDtcbiAgICBlbHNlIGlmIChkZWx0YVN1bSA8IC1lcHNpbG9uJDIpIHBoaTAgPSAtOTA7XG4gICAgcmFuZ2VbMF0gPSBsYW1iZGEwJDEsIHJhbmdlWzFdID0gbGFtYmRhMTtcbiAgfVxufTtcblxuZnVuY3Rpb24gYm91bmRzUG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgcmFuZ2VzLnB1c2gocmFuZ2UgPSBbbGFtYmRhMCQxID0gbGFtYmRhLCBsYW1iZGExID0gbGFtYmRhXSk7XG4gIGlmIChwaGkgPCBwaGkwKSBwaGkwID0gcGhpO1xuICBpZiAocGhpID4gcGhpMSkgcGhpMSA9IHBoaTtcbn1cblxuZnVuY3Rpb24gbGluZVBvaW50KGxhbWJkYSwgcGhpKSB7XG4gIHZhciBwID0gY2FydGVzaWFuKFtsYW1iZGEgKiByYWRpYW5zLCBwaGkgKiByYWRpYW5zXSk7XG4gIGlmIChwMCkge1xuICAgIHZhciBub3JtYWwgPSBjYXJ0ZXNpYW5Dcm9zcyhwMCwgcCksXG4gICAgICAgIGVxdWF0b3JpYWwgPSBbbm9ybWFsWzFdLCAtbm9ybWFsWzBdLCAwXSxcbiAgICAgICAgaW5mbGVjdGlvbiA9IGNhcnRlc2lhbkNyb3NzKGVxdWF0b3JpYWwsIG5vcm1hbCk7XG4gICAgY2FydGVzaWFuTm9ybWFsaXplSW5QbGFjZShpbmZsZWN0aW9uKTtcbiAgICBpbmZsZWN0aW9uID0gc3BoZXJpY2FsKGluZmxlY3Rpb24pO1xuICAgIHZhciBkZWx0YSA9IGxhbWJkYSAtIGxhbWJkYTIsXG4gICAgICAgIHNpZ24kJDEgPSBkZWx0YSA+IDAgPyAxIDogLTEsXG4gICAgICAgIGxhbWJkYWkgPSBpbmZsZWN0aW9uWzBdICogZGVncmVlcyQxICogc2lnbiQkMSxcbiAgICAgICAgcGhpaSxcbiAgICAgICAgYW50aW1lcmlkaWFuID0gYWJzKGRlbHRhKSA+IDE4MDtcbiAgICBpZiAoYW50aW1lcmlkaWFuIF4gKHNpZ24kJDEgKiBsYW1iZGEyIDwgbGFtYmRhaSAmJiBsYW1iZGFpIDwgc2lnbiQkMSAqIGxhbWJkYSkpIHtcbiAgICAgIHBoaWkgPSBpbmZsZWN0aW9uWzFdICogZGVncmVlcyQxO1xuICAgICAgaWYgKHBoaWkgPiBwaGkxKSBwaGkxID0gcGhpaTtcbiAgICB9IGVsc2UgaWYgKGxhbWJkYWkgPSAobGFtYmRhaSArIDM2MCkgJSAzNjAgLSAxODAsIGFudGltZXJpZGlhbiBeIChzaWduJCQxICogbGFtYmRhMiA8IGxhbWJkYWkgJiYgbGFtYmRhaSA8IHNpZ24kJDEgKiBsYW1iZGEpKSB7XG4gICAgICBwaGlpID0gLWluZmxlY3Rpb25bMV0gKiBkZWdyZWVzJDE7XG4gICAgICBpZiAocGhpaSA8IHBoaTApIHBoaTAgPSBwaGlpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocGhpIDwgcGhpMCkgcGhpMCA9IHBoaTtcbiAgICAgIGlmIChwaGkgPiBwaGkxKSBwaGkxID0gcGhpO1xuICAgIH1cbiAgICBpZiAoYW50aW1lcmlkaWFuKSB7XG4gICAgICBpZiAobGFtYmRhIDwgbGFtYmRhMikge1xuICAgICAgICBpZiAoYW5nbGUobGFtYmRhMCQxLCBsYW1iZGEpID4gYW5nbGUobGFtYmRhMCQxLCBsYW1iZGExKSkgbGFtYmRhMSA9IGxhbWJkYTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChhbmdsZShsYW1iZGEsIGxhbWJkYTEpID4gYW5nbGUobGFtYmRhMCQxLCBsYW1iZGExKSkgbGFtYmRhMCQxID0gbGFtYmRhO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobGFtYmRhMSA+PSBsYW1iZGEwJDEpIHtcbiAgICAgICAgaWYgKGxhbWJkYSA8IGxhbWJkYTAkMSkgbGFtYmRhMCQxID0gbGFtYmRhO1xuICAgICAgICBpZiAobGFtYmRhID4gbGFtYmRhMSkgbGFtYmRhMSA9IGxhbWJkYTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChsYW1iZGEgPiBsYW1iZGEyKSB7XG4gICAgICAgICAgaWYgKGFuZ2xlKGxhbWJkYTAkMSwgbGFtYmRhKSA+IGFuZ2xlKGxhbWJkYTAkMSwgbGFtYmRhMSkpIGxhbWJkYTEgPSBsYW1iZGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGFuZ2xlKGxhbWJkYSwgbGFtYmRhMSkgPiBhbmdsZShsYW1iZGEwJDEsIGxhbWJkYTEpKSBsYW1iZGEwJDEgPSBsYW1iZGE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmFuZ2VzLnB1c2gocmFuZ2UgPSBbbGFtYmRhMCQxID0gbGFtYmRhLCBsYW1iZGExID0gbGFtYmRhXSk7XG4gIH1cbiAgaWYgKHBoaSA8IHBoaTApIHBoaTAgPSBwaGk7XG4gIGlmIChwaGkgPiBwaGkxKSBwaGkxID0gcGhpO1xuICBwMCA9IHAsIGxhbWJkYTIgPSBsYW1iZGE7XG59XG5cbmZ1bmN0aW9uIGJvdW5kc0xpbmVTdGFydCgpIHtcbiAgYm91bmRzU3RyZWFtLnBvaW50ID0gbGluZVBvaW50O1xufVxuXG5mdW5jdGlvbiBib3VuZHNMaW5lRW5kKCkge1xuICByYW5nZVswXSA9IGxhbWJkYTAkMSwgcmFuZ2VbMV0gPSBsYW1iZGExO1xuICBib3VuZHNTdHJlYW0ucG9pbnQgPSBib3VuZHNQb2ludDtcbiAgcDAgPSBudWxsO1xufVxuXG5mdW5jdGlvbiBib3VuZHNSaW5nUG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgaWYgKHAwKSB7XG4gICAgdmFyIGRlbHRhID0gbGFtYmRhIC0gbGFtYmRhMjtcbiAgICBkZWx0YVN1bS5hZGQoYWJzKGRlbHRhKSA+IDE4MCA/IGRlbHRhICsgKGRlbHRhID4gMCA/IDM2MCA6IC0zNjApIDogZGVsdGEpO1xuICB9IGVsc2Uge1xuICAgIGxhbWJkYTAwJDEgPSBsYW1iZGEsIHBoaTAwJDEgPSBwaGk7XG4gIH1cbiAgYXJlYVN0cmVhbS5wb2ludChsYW1iZGEsIHBoaSk7XG4gIGxpbmVQb2ludChsYW1iZGEsIHBoaSk7XG59XG5cbmZ1bmN0aW9uIGJvdW5kc1JpbmdTdGFydCgpIHtcbiAgYXJlYVN0cmVhbS5saW5lU3RhcnQoKTtcbn1cblxuZnVuY3Rpb24gYm91bmRzUmluZ0VuZCgpIHtcbiAgYm91bmRzUmluZ1BvaW50KGxhbWJkYTAwJDEsIHBoaTAwJDEpO1xuICBhcmVhU3RyZWFtLmxpbmVFbmQoKTtcbiAgaWYgKGFicyhkZWx0YVN1bSkgPiBlcHNpbG9uJDIpIGxhbWJkYTAkMSA9IC0obGFtYmRhMSA9IDE4MCk7XG4gIHJhbmdlWzBdID0gbGFtYmRhMCQxLCByYW5nZVsxXSA9IGxhbWJkYTE7XG4gIHAwID0gbnVsbDtcbn1cblxuLy8gRmluZHMgdGhlIGxlZnQtcmlnaHQgZGlzdGFuY2UgYmV0d2VlbiB0d28gbG9uZ2l0dWRlcy5cbi8vIFRoaXMgaXMgYWxtb3N0IHRoZSBzYW1lIGFzIChsYW1iZGExIC0gbGFtYmRhMCArIDM2MMKwKSAlIDM2MMKwLCBleGNlcHQgdGhhdCB3ZSB3YW50XG4vLyB0aGUgZGlzdGFuY2UgYmV0d2VlbiDCsTE4MMKwIHRvIGJlIDM2MMKwLlxuZnVuY3Rpb24gYW5nbGUobGFtYmRhMCwgbGFtYmRhMSkge1xuICByZXR1cm4gKGxhbWJkYTEgLT0gbGFtYmRhMCkgPCAwID8gbGFtYmRhMSArIDM2MCA6IGxhbWJkYTE7XG59XG5cbmZ1bmN0aW9uIHJhbmdlQ29tcGFyZShhLCBiKSB7XG4gIHJldHVybiBhWzBdIC0gYlswXTtcbn1cblxuZnVuY3Rpb24gcmFuZ2VDb250YWlucyhyYW5nZSwgeCkge1xuICByZXR1cm4gcmFuZ2VbMF0gPD0gcmFuZ2VbMV0gPyByYW5nZVswXSA8PSB4ICYmIHggPD0gcmFuZ2VbMV0gOiB4IDwgcmFuZ2VbMF0gfHwgcmFuZ2VbMV0gPCB4O1xufVxuXG52YXIgYm91bmRzID0gZnVuY3Rpb24oZmVhdHVyZSkge1xuICB2YXIgaSwgbiwgYSwgYiwgbWVyZ2VkLCBkZWx0YU1heCwgZGVsdGE7XG5cbiAgcGhpMSA9IGxhbWJkYTEgPSAtKGxhbWJkYTAkMSA9IHBoaTAgPSBJbmZpbml0eSk7XG4gIHJhbmdlcyA9IFtdO1xuICBnZW9TdHJlYW0oZmVhdHVyZSwgYm91bmRzU3RyZWFtKTtcblxuICAvLyBGaXJzdCwgc29ydCByYW5nZXMgYnkgdGhlaXIgbWluaW11bSBsb25naXR1ZGVzLlxuICBpZiAobiA9IHJhbmdlcy5sZW5ndGgpIHtcbiAgICByYW5nZXMuc29ydChyYW5nZUNvbXBhcmUpO1xuXG4gICAgLy8gVGhlbiwgbWVyZ2UgYW55IHJhbmdlcyB0aGF0IG92ZXJsYXAuXG4gICAgZm9yIChpID0gMSwgYSA9IHJhbmdlc1swXSwgbWVyZ2VkID0gW2FdOyBpIDwgbjsgKytpKSB7XG4gICAgICBiID0gcmFuZ2VzW2ldO1xuICAgICAgaWYgKHJhbmdlQ29udGFpbnMoYSwgYlswXSkgfHwgcmFuZ2VDb250YWlucyhhLCBiWzFdKSkge1xuICAgICAgICBpZiAoYW5nbGUoYVswXSwgYlsxXSkgPiBhbmdsZShhWzBdLCBhWzFdKSkgYVsxXSA9IGJbMV07XG4gICAgICAgIGlmIChhbmdsZShiWzBdLCBhWzFdKSA+IGFuZ2xlKGFbMF0sIGFbMV0pKSBhWzBdID0gYlswXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1lcmdlZC5wdXNoKGEgPSBiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBGaW5hbGx5LCBmaW5kIHRoZSBsYXJnZXN0IGdhcCBiZXR3ZWVuIHRoZSBtZXJnZWQgcmFuZ2VzLlxuICAgIC8vIFRoZSBmaW5hbCBib3VuZGluZyBib3ggd2lsbCBiZSB0aGUgaW52ZXJzZSBvZiB0aGlzIGdhcC5cbiAgICBmb3IgKGRlbHRhTWF4ID0gLUluZmluaXR5LCBuID0gbWVyZ2VkLmxlbmd0aCAtIDEsIGkgPSAwLCBhID0gbWVyZ2VkW25dOyBpIDw9IG47IGEgPSBiLCArK2kpIHtcbiAgICAgIGIgPSBtZXJnZWRbaV07XG4gICAgICBpZiAoKGRlbHRhID0gYW5nbGUoYVsxXSwgYlswXSkpID4gZGVsdGFNYXgpIGRlbHRhTWF4ID0gZGVsdGEsIGxhbWJkYTAkMSA9IGJbMF0sIGxhbWJkYTEgPSBhWzFdO1xuICAgIH1cbiAgfVxuXG4gIHJhbmdlcyA9IHJhbmdlID0gbnVsbDtcblxuICByZXR1cm4gbGFtYmRhMCQxID09PSBJbmZpbml0eSB8fCBwaGkwID09PSBJbmZpbml0eVxuICAgICAgPyBbW05hTiwgTmFOXSwgW05hTiwgTmFOXV1cbiAgICAgIDogW1tsYW1iZGEwJDEsIHBoaTBdLCBbbGFtYmRhMSwgcGhpMV1dO1xufTtcblxudmFyIFcwO1xudmFyIFcxO1xudmFyIFgwO1xudmFyIFkwO1xudmFyIFowO1xudmFyIFgxO1xudmFyIFkxO1xudmFyIFoxO1xudmFyIFgyO1xudmFyIFkyO1xudmFyIFoyO1xudmFyIGxhbWJkYTAwJDI7XG52YXIgcGhpMDAkMjtcbnZhciB4MDtcbnZhciB5MDtcbnZhciB6MDsgLy8gcHJldmlvdXMgcG9pbnRcblxudmFyIGNlbnRyb2lkU3RyZWFtID0ge1xuICBzcGhlcmU6IG5vb3AkMSxcbiAgcG9pbnQ6IGNlbnRyb2lkUG9pbnQsXG4gIGxpbmVTdGFydDogY2VudHJvaWRMaW5lU3RhcnQsXG4gIGxpbmVFbmQ6IGNlbnRyb2lkTGluZUVuZCxcbiAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICBjZW50cm9pZFN0cmVhbS5saW5lU3RhcnQgPSBjZW50cm9pZFJpbmdTdGFydDtcbiAgICBjZW50cm9pZFN0cmVhbS5saW5lRW5kID0gY2VudHJvaWRSaW5nRW5kO1xuICB9LFxuICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICBjZW50cm9pZFN0cmVhbS5saW5lU3RhcnQgPSBjZW50cm9pZExpbmVTdGFydDtcbiAgICBjZW50cm9pZFN0cmVhbS5saW5lRW5kID0gY2VudHJvaWRMaW5lRW5kO1xuICB9XG59O1xuXG4vLyBBcml0aG1ldGljIG1lYW4gb2YgQ2FydGVzaWFuIHZlY3RvcnMuXG5mdW5jdGlvbiBjZW50cm9pZFBvaW50KGxhbWJkYSwgcGhpKSB7XG4gIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcbiAgdmFyIGNvc1BoaSA9IGNvcyQxKHBoaSk7XG4gIGNlbnRyb2lkUG9pbnRDYXJ0ZXNpYW4oY29zUGhpICogY29zJDEobGFtYmRhKSwgY29zUGhpICogc2luJDEobGFtYmRhKSwgc2luJDEocGhpKSk7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkUG9pbnRDYXJ0ZXNpYW4oeCwgeSwgeikge1xuICArK1cwO1xuICBYMCArPSAoeCAtIFgwKSAvIFcwO1xuICBZMCArPSAoeSAtIFkwKSAvIFcwO1xuICBaMCArPSAoeiAtIFowKSAvIFcwO1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZExpbmVTdGFydCgpIHtcbiAgY2VudHJvaWRTdHJlYW0ucG9pbnQgPSBjZW50cm9pZExpbmVQb2ludEZpcnN0O1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZExpbmVQb2ludEZpcnN0KGxhbWJkYSwgcGhpKSB7XG4gIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcbiAgdmFyIGNvc1BoaSA9IGNvcyQxKHBoaSk7XG4gIHgwID0gY29zUGhpICogY29zJDEobGFtYmRhKTtcbiAgeTAgPSBjb3NQaGkgKiBzaW4kMShsYW1iZGEpO1xuICB6MCA9IHNpbiQxKHBoaSk7XG4gIGNlbnRyb2lkU3RyZWFtLnBvaW50ID0gY2VudHJvaWRMaW5lUG9pbnQ7XG4gIGNlbnRyb2lkUG9pbnRDYXJ0ZXNpYW4oeDAsIHkwLCB6MCk7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkTGluZVBvaW50KGxhbWJkYSwgcGhpKSB7XG4gIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcbiAgdmFyIGNvc1BoaSA9IGNvcyQxKHBoaSksXG4gICAgICB4ID0gY29zUGhpICogY29zJDEobGFtYmRhKSxcbiAgICAgIHkgPSBjb3NQaGkgKiBzaW4kMShsYW1iZGEpLFxuICAgICAgeiA9IHNpbiQxKHBoaSksXG4gICAgICB3ID0gYXRhbjIoc3FydCgodyA9IHkwICogeiAtIHowICogeSkgKiB3ICsgKHcgPSB6MCAqIHggLSB4MCAqIHopICogdyArICh3ID0geDAgKiB5IC0geTAgKiB4KSAqIHcpLCB4MCAqIHggKyB5MCAqIHkgKyB6MCAqIHopO1xuICBXMSArPSB3O1xuICBYMSArPSB3ICogKHgwICsgKHgwID0geCkpO1xuICBZMSArPSB3ICogKHkwICsgKHkwID0geSkpO1xuICBaMSArPSB3ICogKHowICsgKHowID0geikpO1xuICBjZW50cm9pZFBvaW50Q2FydGVzaWFuKHgwLCB5MCwgejApO1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZExpbmVFbmQoKSB7XG4gIGNlbnRyb2lkU3RyZWFtLnBvaW50ID0gY2VudHJvaWRQb2ludDtcbn1cblxuLy8gU2VlIEouIEUuIEJyb2NrLCBUaGUgSW5lcnRpYSBUZW5zb3IgZm9yIGEgU3BoZXJpY2FsIFRyaWFuZ2xlLFxuLy8gSi4gQXBwbGllZCBNZWNoYW5pY3MgNDIsIDIzOSAoMTk3NSkuXG5mdW5jdGlvbiBjZW50cm9pZFJpbmdTdGFydCgpIHtcbiAgY2VudHJvaWRTdHJlYW0ucG9pbnQgPSBjZW50cm9pZFJpbmdQb2ludEZpcnN0O1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZFJpbmdFbmQoKSB7XG4gIGNlbnRyb2lkUmluZ1BvaW50KGxhbWJkYTAwJDIsIHBoaTAwJDIpO1xuICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkUG9pbnQ7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkUmluZ1BvaW50Rmlyc3QobGFtYmRhLCBwaGkpIHtcbiAgbGFtYmRhMDAkMiA9IGxhbWJkYSwgcGhpMDAkMiA9IHBoaTtcbiAgbGFtYmRhICo9IHJhZGlhbnMsIHBoaSAqPSByYWRpYW5zO1xuICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkUmluZ1BvaW50O1xuICB2YXIgY29zUGhpID0gY29zJDEocGhpKTtcbiAgeDAgPSBjb3NQaGkgKiBjb3MkMShsYW1iZGEpO1xuICB5MCA9IGNvc1BoaSAqIHNpbiQxKGxhbWJkYSk7XG4gIHowID0gc2luJDEocGhpKTtcbiAgY2VudHJvaWRQb2ludENhcnRlc2lhbih4MCwgeTAsIHowKTtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRSaW5nUG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgbGFtYmRhICo9IHJhZGlhbnMsIHBoaSAqPSByYWRpYW5zO1xuICB2YXIgY29zUGhpID0gY29zJDEocGhpKSxcbiAgICAgIHggPSBjb3NQaGkgKiBjb3MkMShsYW1iZGEpLFxuICAgICAgeSA9IGNvc1BoaSAqIHNpbiQxKGxhbWJkYSksXG4gICAgICB6ID0gc2luJDEocGhpKSxcbiAgICAgIGN4ID0geTAgKiB6IC0gejAgKiB5LFxuICAgICAgY3kgPSB6MCAqIHggLSB4MCAqIHosXG4gICAgICBjeiA9IHgwICogeSAtIHkwICogeCxcbiAgICAgIG0gPSBzcXJ0KGN4ICogY3ggKyBjeSAqIGN5ICsgY3ogKiBjeiksXG4gICAgICB3ID0gYXNpbihtKSwgLy8gbGluZSB3ZWlnaHQgPSBhbmdsZVxuICAgICAgdiA9IG0gJiYgLXcgLyBtOyAvLyBhcmVhIHdlaWdodCBtdWx0aXBsaWVyXG4gIFgyICs9IHYgKiBjeDtcbiAgWTIgKz0gdiAqIGN5O1xuICBaMiArPSB2ICogY3o7XG4gIFcxICs9IHc7XG4gIFgxICs9IHcgKiAoeDAgKyAoeDAgPSB4KSk7XG4gIFkxICs9IHcgKiAoeTAgKyAoeTAgPSB5KSk7XG4gIFoxICs9IHcgKiAoejAgKyAoejAgPSB6KSk7XG4gIGNlbnRyb2lkUG9pbnRDYXJ0ZXNpYW4oeDAsIHkwLCB6MCk7XG59XG5cbnZhciBjZW50cm9pZCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICBXMCA9IFcxID1cbiAgWDAgPSBZMCA9IFowID1cbiAgWDEgPSBZMSA9IFoxID1cbiAgWDIgPSBZMiA9IFoyID0gMDtcbiAgZ2VvU3RyZWFtKG9iamVjdCwgY2VudHJvaWRTdHJlYW0pO1xuXG4gIHZhciB4ID0gWDIsXG4gICAgICB5ID0gWTIsXG4gICAgICB6ID0gWjIsXG4gICAgICBtID0geCAqIHggKyB5ICogeSArIHogKiB6O1xuXG4gIC8vIElmIHRoZSBhcmVhLXdlaWdodGVkIGNjZW50cm9pZCBpcyB1bmRlZmluZWQsIGZhbGwgYmFjayB0byBsZW5ndGgtd2VpZ2h0ZWQgY2NlbnRyb2lkLlxuICBpZiAobSA8IGVwc2lsb24yJDEpIHtcbiAgICB4ID0gWDEsIHkgPSBZMSwgeiA9IFoxO1xuICAgIC8vIElmIHRoZSBmZWF0dXJlIGhhcyB6ZXJvIGxlbmd0aCwgZmFsbCBiYWNrIHRvIGFyaXRobWV0aWMgbWVhbiBvZiBwb2ludCB2ZWN0b3JzLlxuICAgIGlmIChXMSA8IGVwc2lsb24kMikgeCA9IFgwLCB5ID0gWTAsIHogPSBaMDtcbiAgICBtID0geCAqIHggKyB5ICogeSArIHogKiB6O1xuICAgIC8vIElmIHRoZSBmZWF0dXJlIHN0aWxsIGhhcyBhbiB1bmRlZmluZWQgY2NlbnRyb2lkLCB0aGVuIHJldHVybi5cbiAgICBpZiAobSA8IGVwc2lsb24yJDEpIHJldHVybiBbTmFOLCBOYU5dO1xuICB9XG5cbiAgcmV0dXJuIFthdGFuMih5LCB4KSAqIGRlZ3JlZXMkMSwgYXNpbih6IC8gc3FydChtKSkgKiBkZWdyZWVzJDFdO1xufTtcblxudmFyIGNvbnN0YW50JDcgPSBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn07XG5cbnZhciBjb21wb3NlID0gZnVuY3Rpb24oYSwgYikge1xuXG4gIGZ1bmN0aW9uIGNvbXBvc2UoeCwgeSkge1xuICAgIHJldHVybiB4ID0gYSh4LCB5KSwgYih4WzBdLCB4WzFdKTtcbiAgfVxuXG4gIGlmIChhLmludmVydCAmJiBiLmludmVydCkgY29tcG9zZS5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgcmV0dXJuIHggPSBiLmludmVydCh4LCB5KSwgeCAmJiBhLmludmVydCh4WzBdLCB4WzFdKTtcbiAgfTtcblxuICByZXR1cm4gY29tcG9zZTtcbn07XG5cbmZ1bmN0aW9uIHJvdGF0aW9uSWRlbnRpdHkobGFtYmRhLCBwaGkpIHtcbiAgcmV0dXJuIFtsYW1iZGEgPiBwaSQzID8gbGFtYmRhIC0gdGF1JDMgOiBsYW1iZGEgPCAtcGkkMyA/IGxhbWJkYSArIHRhdSQzIDogbGFtYmRhLCBwaGldO1xufVxuXG5yb3RhdGlvbklkZW50aXR5LmludmVydCA9IHJvdGF0aW9uSWRlbnRpdHk7XG5cbmZ1bmN0aW9uIHJvdGF0ZVJhZGlhbnMoZGVsdGFMYW1iZGEsIGRlbHRhUGhpLCBkZWx0YUdhbW1hKSB7XG4gIHJldHVybiAoZGVsdGFMYW1iZGEgJT0gdGF1JDMpID8gKGRlbHRhUGhpIHx8IGRlbHRhR2FtbWEgPyBjb21wb3NlKHJvdGF0aW9uTGFtYmRhKGRlbHRhTGFtYmRhKSwgcm90YXRpb25QaGlHYW1tYShkZWx0YVBoaSwgZGVsdGFHYW1tYSkpXG4gICAgOiByb3RhdGlvbkxhbWJkYShkZWx0YUxhbWJkYSkpXG4gICAgOiAoZGVsdGFQaGkgfHwgZGVsdGFHYW1tYSA/IHJvdGF0aW9uUGhpR2FtbWEoZGVsdGFQaGksIGRlbHRhR2FtbWEpXG4gICAgOiByb3RhdGlvbklkZW50aXR5KTtcbn1cblxuZnVuY3Rpb24gZm9yd2FyZFJvdGF0aW9uTGFtYmRhKGRlbHRhTGFtYmRhKSB7XG4gIHJldHVybiBmdW5jdGlvbihsYW1iZGEsIHBoaSkge1xuICAgIHJldHVybiBsYW1iZGEgKz0gZGVsdGFMYW1iZGEsIFtsYW1iZGEgPiBwaSQzID8gbGFtYmRhIC0gdGF1JDMgOiBsYW1iZGEgPCAtcGkkMyA/IGxhbWJkYSArIHRhdSQzIDogbGFtYmRhLCBwaGldO1xuICB9O1xufVxuXG5mdW5jdGlvbiByb3RhdGlvbkxhbWJkYShkZWx0YUxhbWJkYSkge1xuICB2YXIgcm90YXRpb24gPSBmb3J3YXJkUm90YXRpb25MYW1iZGEoZGVsdGFMYW1iZGEpO1xuICByb3RhdGlvbi5pbnZlcnQgPSBmb3J3YXJkUm90YXRpb25MYW1iZGEoLWRlbHRhTGFtYmRhKTtcbiAgcmV0dXJuIHJvdGF0aW9uO1xufVxuXG5mdW5jdGlvbiByb3RhdGlvblBoaUdhbW1hKGRlbHRhUGhpLCBkZWx0YUdhbW1hKSB7XG4gIHZhciBjb3NEZWx0YVBoaSA9IGNvcyQxKGRlbHRhUGhpKSxcbiAgICAgIHNpbkRlbHRhUGhpID0gc2luJDEoZGVsdGFQaGkpLFxuICAgICAgY29zRGVsdGFHYW1tYSA9IGNvcyQxKGRlbHRhR2FtbWEpLFxuICAgICAgc2luRGVsdGFHYW1tYSA9IHNpbiQxKGRlbHRhR2FtbWEpO1xuXG4gIGZ1bmN0aW9uIHJvdGF0aW9uKGxhbWJkYSwgcGhpKSB7XG4gICAgdmFyIGNvc1BoaSA9IGNvcyQxKHBoaSksXG4gICAgICAgIHggPSBjb3MkMShsYW1iZGEpICogY29zUGhpLFxuICAgICAgICB5ID0gc2luJDEobGFtYmRhKSAqIGNvc1BoaSxcbiAgICAgICAgeiA9IHNpbiQxKHBoaSksXG4gICAgICAgIGsgPSB6ICogY29zRGVsdGFQaGkgKyB4ICogc2luRGVsdGFQaGk7XG4gICAgcmV0dXJuIFtcbiAgICAgIGF0YW4yKHkgKiBjb3NEZWx0YUdhbW1hIC0gayAqIHNpbkRlbHRhR2FtbWEsIHggKiBjb3NEZWx0YVBoaSAtIHogKiBzaW5EZWx0YVBoaSksXG4gICAgICBhc2luKGsgKiBjb3NEZWx0YUdhbW1hICsgeSAqIHNpbkRlbHRhR2FtbWEpXG4gICAgXTtcbiAgfVxuXG4gIHJvdGF0aW9uLmludmVydCA9IGZ1bmN0aW9uKGxhbWJkYSwgcGhpKSB7XG4gICAgdmFyIGNvc1BoaSA9IGNvcyQxKHBoaSksXG4gICAgICAgIHggPSBjb3MkMShsYW1iZGEpICogY29zUGhpLFxuICAgICAgICB5ID0gc2luJDEobGFtYmRhKSAqIGNvc1BoaSxcbiAgICAgICAgeiA9IHNpbiQxKHBoaSksXG4gICAgICAgIGsgPSB6ICogY29zRGVsdGFHYW1tYSAtIHkgKiBzaW5EZWx0YUdhbW1hO1xuICAgIHJldHVybiBbXG4gICAgICBhdGFuMih5ICogY29zRGVsdGFHYW1tYSArIHogKiBzaW5EZWx0YUdhbW1hLCB4ICogY29zRGVsdGFQaGkgKyBrICogc2luRGVsdGFQaGkpLFxuICAgICAgYXNpbihrICogY29zRGVsdGFQaGkgLSB4ICogc2luRGVsdGFQaGkpXG4gICAgXTtcbiAgfTtcblxuICByZXR1cm4gcm90YXRpb247XG59XG5cbnZhciByb3RhdGlvbiA9IGZ1bmN0aW9uKHJvdGF0ZSkge1xuICByb3RhdGUgPSByb3RhdGVSYWRpYW5zKHJvdGF0ZVswXSAqIHJhZGlhbnMsIHJvdGF0ZVsxXSAqIHJhZGlhbnMsIHJvdGF0ZS5sZW5ndGggPiAyID8gcm90YXRlWzJdICogcmFkaWFucyA6IDApO1xuXG4gIGZ1bmN0aW9uIGZvcndhcmQoY29vcmRpbmF0ZXMpIHtcbiAgICBjb29yZGluYXRlcyA9IHJvdGF0ZShjb29yZGluYXRlc1swXSAqIHJhZGlhbnMsIGNvb3JkaW5hdGVzWzFdICogcmFkaWFucyk7XG4gICAgcmV0dXJuIGNvb3JkaW5hdGVzWzBdICo9IGRlZ3JlZXMkMSwgY29vcmRpbmF0ZXNbMV0gKj0gZGVncmVlcyQxLCBjb29yZGluYXRlcztcbiAgfVxuXG4gIGZvcndhcmQuaW52ZXJ0ID0gZnVuY3Rpb24oY29vcmRpbmF0ZXMpIHtcbiAgICBjb29yZGluYXRlcyA9IHJvdGF0ZS5pbnZlcnQoY29vcmRpbmF0ZXNbMF0gKiByYWRpYW5zLCBjb29yZGluYXRlc1sxXSAqIHJhZGlhbnMpO1xuICAgIHJldHVybiBjb29yZGluYXRlc1swXSAqPSBkZWdyZWVzJDEsIGNvb3JkaW5hdGVzWzFdICo9IGRlZ3JlZXMkMSwgY29vcmRpbmF0ZXM7XG4gIH07XG5cbiAgcmV0dXJuIGZvcndhcmQ7XG59O1xuXG4vLyBHZW5lcmF0ZXMgYSBjaXJjbGUgY2VudGVyZWQgYXQgWzDCsCwgMMKwXSwgd2l0aCBhIGdpdmVuIHJhZGl1cyBhbmQgcHJlY2lzaW9uLlxuZnVuY3Rpb24gY2lyY2xlU3RyZWFtKHN0cmVhbSwgcmFkaXVzLCBkZWx0YSwgZGlyZWN0aW9uLCB0MCwgdDEpIHtcbiAgaWYgKCFkZWx0YSkgcmV0dXJuO1xuICB2YXIgY29zUmFkaXVzID0gY29zJDEocmFkaXVzKSxcbiAgICAgIHNpblJhZGl1cyA9IHNpbiQxKHJhZGl1cyksXG4gICAgICBzdGVwID0gZGlyZWN0aW9uICogZGVsdGE7XG4gIGlmICh0MCA9PSBudWxsKSB7XG4gICAgdDAgPSByYWRpdXMgKyBkaXJlY3Rpb24gKiB0YXUkMztcbiAgICB0MSA9IHJhZGl1cyAtIHN0ZXAgLyAyO1xuICB9IGVsc2Uge1xuICAgIHQwID0gY2lyY2xlUmFkaXVzKGNvc1JhZGl1cywgdDApO1xuICAgIHQxID0gY2lyY2xlUmFkaXVzKGNvc1JhZGl1cywgdDEpO1xuICAgIGlmIChkaXJlY3Rpb24gPiAwID8gdDAgPCB0MSA6IHQwID4gdDEpIHQwICs9IGRpcmVjdGlvbiAqIHRhdSQzO1xuICB9XG4gIGZvciAodmFyIHBvaW50LCB0ID0gdDA7IGRpcmVjdGlvbiA+IDAgPyB0ID4gdDEgOiB0IDwgdDE7IHQgLT0gc3RlcCkge1xuICAgIHBvaW50ID0gc3BoZXJpY2FsKFtjb3NSYWRpdXMsIC1zaW5SYWRpdXMgKiBjb3MkMSh0KSwgLXNpblJhZGl1cyAqIHNpbiQxKHQpXSk7XG4gICAgc3RyZWFtLnBvaW50KHBvaW50WzBdLCBwb2ludFsxXSk7XG4gIH1cbn1cblxuLy8gUmV0dXJucyB0aGUgc2lnbmVkIGFuZ2xlIG9mIGEgY2FydGVzaWFuIHBvaW50IHJlbGF0aXZlIHRvIFtjb3NSYWRpdXMsIDAsIDBdLlxuZnVuY3Rpb24gY2lyY2xlUmFkaXVzKGNvc1JhZGl1cywgcG9pbnQpIHtcbiAgcG9pbnQgPSBjYXJ0ZXNpYW4ocG9pbnQpLCBwb2ludFswXSAtPSBjb3NSYWRpdXM7XG4gIGNhcnRlc2lhbk5vcm1hbGl6ZUluUGxhY2UocG9pbnQpO1xuICB2YXIgcmFkaXVzID0gYWNvcygtcG9pbnRbMV0pO1xuICByZXR1cm4gKCgtcG9pbnRbMl0gPCAwID8gLXJhZGl1cyA6IHJhZGl1cykgKyB0YXUkMyAtIGVwc2lsb24kMikgJSB0YXUkMztcbn1cblxudmFyIGNpcmNsZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgY2VudGVyID0gY29uc3RhbnQkNyhbMCwgMF0pLFxuICAgICAgcmFkaXVzID0gY29uc3RhbnQkNyg5MCksXG4gICAgICBwcmVjaXNpb24gPSBjb25zdGFudCQ3KDYpLFxuICAgICAgcmluZyxcbiAgICAgIHJvdGF0ZSxcbiAgICAgIHN0cmVhbSA9IHtwb2ludDogcG9pbnR9O1xuXG4gIGZ1bmN0aW9uIHBvaW50KHgsIHkpIHtcbiAgICByaW5nLnB1c2goeCA9IHJvdGF0ZSh4LCB5KSk7XG4gICAgeFswXSAqPSBkZWdyZWVzJDEsIHhbMV0gKj0gZGVncmVlcyQxO1xuICB9XG5cbiAgZnVuY3Rpb24gY2lyY2xlKCkge1xuICAgIHZhciBjID0gY2VudGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgIHIgPSByYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSAqIHJhZGlhbnMsXG4gICAgICAgIHAgPSBwcmVjaXNpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKSAqIHJhZGlhbnM7XG4gICAgcmluZyA9IFtdO1xuICAgIHJvdGF0ZSA9IHJvdGF0ZVJhZGlhbnMoLWNbMF0gKiByYWRpYW5zLCAtY1sxXSAqIHJhZGlhbnMsIDApLmludmVydDtcbiAgICBjaXJjbGVTdHJlYW0oc3RyZWFtLCByLCBwLCAxKTtcbiAgICBjID0ge3R5cGU6IFwiUG9seWdvblwiLCBjb29yZGluYXRlczogW3JpbmddfTtcbiAgICByaW5nID0gcm90YXRlID0gbnVsbDtcbiAgICByZXR1cm4gYztcbiAgfVxuXG4gIGNpcmNsZS5jZW50ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2VudGVyID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQ3KFsrX1swXSwgK19bMV1dKSwgY2lyY2xlKSA6IGNlbnRlcjtcbiAgfTtcblxuICBjaXJjbGUucmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhZGl1cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkNygrXyksIGNpcmNsZSkgOiByYWRpdXM7XG4gIH07XG5cbiAgY2lyY2xlLnByZWNpc2lvbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwcmVjaXNpb24gPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDcoK18pLCBjaXJjbGUpIDogcHJlY2lzaW9uO1xuICB9O1xuXG4gIHJldHVybiBjaXJjbGU7XG59O1xuXG52YXIgY2xpcEJ1ZmZlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgbGluZXMgPSBbXSxcbiAgICAgIGxpbmU7XG4gIHJldHVybiB7XG4gICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIGxpbmUucHVzaChbeCwgeV0pO1xuICAgIH0sXG4gICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIGxpbmVzLnB1c2gobGluZSA9IFtdKTtcbiAgICB9LFxuICAgIGxpbmVFbmQ6IG5vb3AkMSxcbiAgICByZWpvaW46IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKGxpbmVzLmxlbmd0aCA+IDEpIGxpbmVzLnB1c2gobGluZXMucG9wKCkuY29uY2F0KGxpbmVzLnNoaWZ0KCkpKTtcbiAgICB9LFxuICAgIHJlc3VsdDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbGluZXM7XG4gICAgICBsaW5lcyA9IFtdO1xuICAgICAgbGluZSA9IG51bGw7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfTtcbn07XG5cbnZhciBjbGlwTGluZSA9IGZ1bmN0aW9uKGEsIGIsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciBheCA9IGFbMF0sXG4gICAgICBheSA9IGFbMV0sXG4gICAgICBieCA9IGJbMF0sXG4gICAgICBieSA9IGJbMV0sXG4gICAgICB0MCA9IDAsXG4gICAgICB0MSA9IDEsXG4gICAgICBkeCA9IGJ4IC0gYXgsXG4gICAgICBkeSA9IGJ5IC0gYXksXG4gICAgICByO1xuXG4gIHIgPSB4MCAtIGF4O1xuICBpZiAoIWR4ICYmIHIgPiAwKSByZXR1cm47XG4gIHIgLz0gZHg7XG4gIGlmIChkeCA8IDApIHtcbiAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICB9IGVsc2UgaWYgKGR4ID4gMCkge1xuICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gIH1cblxuICByID0geDEgLSBheDtcbiAgaWYgKCFkeCAmJiByIDwgMCkgcmV0dXJuO1xuICByIC89IGR4O1xuICBpZiAoZHggPCAwKSB7XG4gICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgfSBlbHNlIGlmIChkeCA+IDApIHtcbiAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICB9XG5cbiAgciA9IHkwIC0gYXk7XG4gIGlmICghZHkgJiYgciA+IDApIHJldHVybjtcbiAgciAvPSBkeTtcbiAgaWYgKGR5IDwgMCkge1xuICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gIH0gZWxzZSBpZiAoZHkgPiAwKSB7XG4gICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgfVxuXG4gIHIgPSB5MSAtIGF5O1xuICBpZiAoIWR5ICYmIHIgPCAwKSByZXR1cm47XG4gIHIgLz0gZHk7XG4gIGlmIChkeSA8IDApIHtcbiAgICBpZiAociA+IHQxKSByZXR1cm47XG4gICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuICB9IGVsc2UgaWYgKGR5ID4gMCkge1xuICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gIH1cblxuICBpZiAodDAgPiAwKSBhWzBdID0gYXggKyB0MCAqIGR4LCBhWzFdID0gYXkgKyB0MCAqIGR5O1xuICBpZiAodDEgPCAxKSBiWzBdID0gYXggKyB0MSAqIGR4LCBiWzFdID0gYXkgKyB0MSAqIGR5O1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cbnZhciBwb2ludEVxdWFsID0gZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYWJzKGFbMF0gLSBiWzBdKSA8IGVwc2lsb24kMiAmJiBhYnMoYVsxXSAtIGJbMV0pIDwgZXBzaWxvbiQyO1xufTtcblxuZnVuY3Rpb24gSW50ZXJzZWN0aW9uKHBvaW50LCBwb2ludHMsIG90aGVyLCBlbnRyeSkge1xuICB0aGlzLnggPSBwb2ludDtcbiAgdGhpcy56ID0gcG9pbnRzO1xuICB0aGlzLm8gPSBvdGhlcjsgLy8gYW5vdGhlciBpbnRlcnNlY3Rpb25cbiAgdGhpcy5lID0gZW50cnk7IC8vIGlzIGFuIGVudHJ5P1xuICB0aGlzLnYgPSBmYWxzZTsgLy8gdmlzaXRlZFxuICB0aGlzLm4gPSB0aGlzLnAgPSBudWxsOyAvLyBuZXh0ICYgcHJldmlvdXNcbn1cblxuLy8gQSBnZW5lcmFsaXplZCBwb2x5Z29uIGNsaXBwaW5nIGFsZ29yaXRobTogZ2l2ZW4gYSBwb2x5Z29uIHRoYXQgaGFzIGJlZW4gY3V0XG4vLyBpbnRvIGl0cyB2aXNpYmxlIGxpbmUgc2VnbWVudHMsIGFuZCByZWpvaW5zIHRoZSBzZWdtZW50cyBieSBpbnRlcnBvbGF0aW5nXG4vLyBhbG9uZyB0aGUgY2xpcCBlZGdlLlxudmFyIGNsaXBQb2x5Z29uID0gZnVuY3Rpb24oc2VnbWVudHMsIGNvbXBhcmVJbnRlcnNlY3Rpb24sIHN0YXJ0SW5zaWRlLCBpbnRlcnBvbGF0ZSwgc3RyZWFtKSB7XG4gIHZhciBzdWJqZWN0ID0gW10sXG4gICAgICBjbGlwID0gW10sXG4gICAgICBpLFxuICAgICAgbjtcblxuICBzZWdtZW50cy5mb3JFYWNoKGZ1bmN0aW9uKHNlZ21lbnQpIHtcbiAgICBpZiAoKG4gPSBzZWdtZW50Lmxlbmd0aCAtIDEpIDw9IDApIHJldHVybjtcbiAgICB2YXIgbiwgcDAgPSBzZWdtZW50WzBdLCBwMSA9IHNlZ21lbnRbbl0sIHg7XG5cbiAgICAvLyBJZiB0aGUgZmlyc3QgYW5kIGxhc3QgcG9pbnRzIG9mIGEgc2VnbWVudCBhcmUgY29pbmNpZGVudCwgdGhlbiB0cmVhdCBhcyBhXG4gICAgLy8gY2xvc2VkIHJpbmcuIFRPRE8gaWYgYWxsIHJpbmdzIGFyZSBjbG9zZWQsIHRoZW4gdGhlIHdpbmRpbmcgb3JkZXIgb2YgdGhlXG4gICAgLy8gZXh0ZXJpb3IgcmluZyBzaG91bGQgYmUgY2hlY2tlZC5cbiAgICBpZiAocG9pbnRFcXVhbChwMCwgcDEpKSB7XG4gICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBzdHJlYW0ucG9pbnQoKHAwID0gc2VnbWVudFtpXSlbMF0sIHAwWzFdKTtcbiAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3ViamVjdC5wdXNoKHggPSBuZXcgSW50ZXJzZWN0aW9uKHAwLCBzZWdtZW50LCBudWxsLCB0cnVlKSk7XG4gICAgY2xpcC5wdXNoKHgubyA9IG5ldyBJbnRlcnNlY3Rpb24ocDAsIG51bGwsIHgsIGZhbHNlKSk7XG4gICAgc3ViamVjdC5wdXNoKHggPSBuZXcgSW50ZXJzZWN0aW9uKHAxLCBzZWdtZW50LCBudWxsLCBmYWxzZSkpO1xuICAgIGNsaXAucHVzaCh4Lm8gPSBuZXcgSW50ZXJzZWN0aW9uKHAxLCBudWxsLCB4LCB0cnVlKSk7XG4gIH0pO1xuXG4gIGlmICghc3ViamVjdC5sZW5ndGgpIHJldHVybjtcblxuICBjbGlwLnNvcnQoY29tcGFyZUludGVyc2VjdGlvbik7XG4gIGxpbmskMShzdWJqZWN0KTtcbiAgbGluayQxKGNsaXApO1xuXG4gIGZvciAoaSA9IDAsIG4gPSBjbGlwLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgIGNsaXBbaV0uZSA9IHN0YXJ0SW5zaWRlID0gIXN0YXJ0SW5zaWRlO1xuICB9XG5cbiAgdmFyIHN0YXJ0ID0gc3ViamVjdFswXSxcbiAgICAgIHBvaW50cyxcbiAgICAgIHBvaW50O1xuXG4gIHdoaWxlICgxKSB7XG4gICAgLy8gRmluZCBmaXJzdCB1bnZpc2l0ZWQgaW50ZXJzZWN0aW9uLlxuICAgIHZhciBjdXJyZW50ID0gc3RhcnQsXG4gICAgICAgIGlzU3ViamVjdCA9IHRydWU7XG4gICAgd2hpbGUgKGN1cnJlbnQudikgaWYgKChjdXJyZW50ID0gY3VycmVudC5uKSA9PT0gc3RhcnQpIHJldHVybjtcbiAgICBwb2ludHMgPSBjdXJyZW50Lno7XG4gICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgIGRvIHtcbiAgICAgIGN1cnJlbnQudiA9IGN1cnJlbnQuby52ID0gdHJ1ZTtcbiAgICAgIGlmIChjdXJyZW50LmUpIHtcbiAgICAgICAgaWYgKGlzU3ViamVjdCkge1xuICAgICAgICAgIGZvciAoaSA9IDAsIG4gPSBwb2ludHMubGVuZ3RoOyBpIDwgbjsgKytpKSBzdHJlYW0ucG9pbnQoKHBvaW50ID0gcG9pbnRzW2ldKVswXSwgcG9pbnRbMV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGludGVycG9sYXRlKGN1cnJlbnQueCwgY3VycmVudC5uLngsIDEsIHN0cmVhbSk7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudCA9IGN1cnJlbnQubjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc1N1YmplY3QpIHtcbiAgICAgICAgICBwb2ludHMgPSBjdXJyZW50LnAuejtcbiAgICAgICAgICBmb3IgKGkgPSBwb2ludHMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHN0cmVhbS5wb2ludCgocG9pbnQgPSBwb2ludHNbaV0pWzBdLCBwb2ludFsxXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW50ZXJwb2xhdGUoY3VycmVudC54LCBjdXJyZW50LnAueCwgLTEsIHN0cmVhbSk7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucDtcbiAgICAgIH1cbiAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm87XG4gICAgICBwb2ludHMgPSBjdXJyZW50Lno7XG4gICAgICBpc1N1YmplY3QgPSAhaXNTdWJqZWN0O1xuICAgIH0gd2hpbGUgKCFjdXJyZW50LnYpO1xuICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGxpbmskMShhcnJheSkge1xuICBpZiAoIShuID0gYXJyYXkubGVuZ3RoKSkgcmV0dXJuO1xuICB2YXIgbixcbiAgICAgIGkgPSAwLFxuICAgICAgYSA9IGFycmF5WzBdLFxuICAgICAgYjtcbiAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICBhLm4gPSBiID0gYXJyYXlbaV07XG4gICAgYi5wID0gYTtcbiAgICBhID0gYjtcbiAgfVxuICBhLm4gPSBiID0gYXJyYXlbMF07XG4gIGIucCA9IGE7XG59XG5cbnZhciBjbGlwTWF4ID0gMWU5O1xudmFyIGNsaXBNaW4gPSAtY2xpcE1heDtcblxuLy8gVE9ETyBVc2UgZDMtcG9seWdvbuKAmXMgcG9seWdvbkNvbnRhaW5zIGhlcmUgZm9yIHRoZSByaW5nIGNoZWNrP1xuLy8gVE9ETyBFbGltaW5hdGUgZHVwbGljYXRlIGJ1ZmZlcmluZyBpbiBjbGlwQnVmZmVyIGFuZCBwb2x5Z29uLnB1c2g/XG5cbmZ1bmN0aW9uIGNsaXBFeHRlbnQoeDAsIHkwLCB4MSwgeTEpIHtcblxuICBmdW5jdGlvbiB2aXNpYmxlKHgsIHkpIHtcbiAgICByZXR1cm4geDAgPD0geCAmJiB4IDw9IHgxICYmIHkwIDw9IHkgJiYgeSA8PSB5MTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludGVycG9sYXRlKGZyb20sIHRvLCBkaXJlY3Rpb24sIHN0cmVhbSkge1xuICAgIHZhciBhID0gMCwgYTEgPSAwO1xuICAgIGlmIChmcm9tID09IG51bGxcbiAgICAgICAgfHwgKGEgPSBjb3JuZXIoZnJvbSwgZGlyZWN0aW9uKSkgIT09IChhMSA9IGNvcm5lcih0bywgZGlyZWN0aW9uKSlcbiAgICAgICAgfHwgY29tcGFyZVBvaW50KGZyb20sIHRvKSA8IDAgXiBkaXJlY3Rpb24gPiAwKSB7XG4gICAgICBkbyBzdHJlYW0ucG9pbnQoYSA9PT0gMCB8fCBhID09PSAzID8geDAgOiB4MSwgYSA+IDEgPyB5MSA6IHkwKTtcbiAgICAgIHdoaWxlICgoYSA9IChhICsgZGlyZWN0aW9uICsgNCkgJSA0KSAhPT0gYTEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHJlYW0ucG9pbnQodG9bMF0sIHRvWzFdKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjb3JuZXIocCwgZGlyZWN0aW9uKSB7XG4gICAgcmV0dXJuIGFicyhwWzBdIC0geDApIDwgZXBzaWxvbiQyID8gZGlyZWN0aW9uID4gMCA/IDAgOiAzXG4gICAgICAgIDogYWJzKHBbMF0gLSB4MSkgPCBlcHNpbG9uJDIgPyBkaXJlY3Rpb24gPiAwID8gMiA6IDFcbiAgICAgICAgOiBhYnMocFsxXSAtIHkwKSA8IGVwc2lsb24kMiA/IGRpcmVjdGlvbiA+IDAgPyAxIDogMFxuICAgICAgICA6IGRpcmVjdGlvbiA+IDAgPyAzIDogMjsgLy8gYWJzKHBbMV0gLSB5MSkgPCBlcHNpbG9uXG4gIH1cblxuICBmdW5jdGlvbiBjb21wYXJlSW50ZXJzZWN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gY29tcGFyZVBvaW50KGEueCwgYi54KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbXBhcmVQb2ludChhLCBiKSB7XG4gICAgdmFyIGNhID0gY29ybmVyKGEsIDEpLFxuICAgICAgICBjYiA9IGNvcm5lcihiLCAxKTtcbiAgICByZXR1cm4gY2EgIT09IGNiID8gY2EgLSBjYlxuICAgICAgICA6IGNhID09PSAwID8gYlsxXSAtIGFbMV1cbiAgICAgICAgOiBjYSA9PT0gMSA/IGFbMF0gLSBiWzBdXG4gICAgICAgIDogY2EgPT09IDIgPyBhWzFdIC0gYlsxXVxuICAgICAgICA6IGJbMF0gLSBhWzBdO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgIHZhciBhY3RpdmVTdHJlYW0gPSBzdHJlYW0sXG4gICAgICAgIGJ1ZmZlclN0cmVhbSA9IGNsaXBCdWZmZXIoKSxcbiAgICAgICAgc2VnbWVudHMsXG4gICAgICAgIHBvbHlnb24sXG4gICAgICAgIHJpbmcsXG4gICAgICAgIHhfXywgeV9fLCB2X18sIC8vIGZpcnN0IHBvaW50XG4gICAgICAgIHhfLCB5Xywgdl8sIC8vIHByZXZpb3VzIHBvaW50XG4gICAgICAgIGZpcnN0LFxuICAgICAgICBjbGVhbjtcblxuICAgIHZhciBjbGlwU3RyZWFtID0ge1xuICAgICAgcG9pbnQ6IHBvaW50LFxuICAgICAgbGluZVN0YXJ0OiBsaW5lU3RhcnQsXG4gICAgICBsaW5lRW5kOiBsaW5lRW5kLFxuICAgICAgcG9seWdvblN0YXJ0OiBwb2x5Z29uU3RhcnQsXG4gICAgICBwb2x5Z29uRW5kOiBwb2x5Z29uRW5kXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHBvaW50KHgsIHkpIHtcbiAgICAgIGlmICh2aXNpYmxlKHgsIHkpKSBhY3RpdmVTdHJlYW0ucG9pbnQoeCwgeSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcG9seWdvbkluc2lkZSgpIHtcbiAgICAgIHZhciB3aW5kaW5nID0gMDtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBwb2x5Z29uLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICBmb3IgKHZhciByaW5nID0gcG9seWdvbltpXSwgaiA9IDEsIG0gPSByaW5nLmxlbmd0aCwgcG9pbnQgPSByaW5nWzBdLCBhMCwgYTEsIGIwID0gcG9pbnRbMF0sIGIxID0gcG9pbnRbMV07IGogPCBtOyArK2opIHtcbiAgICAgICAgICBhMCA9IGIwLCBhMSA9IGIxLCBwb2ludCA9IHJpbmdbal0sIGIwID0gcG9pbnRbMF0sIGIxID0gcG9pbnRbMV07XG4gICAgICAgICAgaWYgKGExIDw9IHkxKSB7IGlmIChiMSA+IHkxICYmIChiMCAtIGEwKSAqICh5MSAtIGExKSA+IChiMSAtIGExKSAqICh4MCAtIGEwKSkgKyt3aW5kaW5nOyB9XG4gICAgICAgICAgZWxzZSB7IGlmIChiMSA8PSB5MSAmJiAoYjAgLSBhMCkgKiAoeTEgLSBhMSkgPCAoYjEgLSBhMSkgKiAoeDAgLSBhMCkpIC0td2luZGluZzsgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB3aW5kaW5nO1xuICAgIH1cblxuICAgIC8vIEJ1ZmZlciBnZW9tZXRyeSB3aXRoaW4gYSBwb2x5Z29uIGFuZCB0aGVuIGNsaXAgaXQgZW4gbWFzc2UuXG4gICAgZnVuY3Rpb24gcG9seWdvblN0YXJ0KCkge1xuICAgICAgYWN0aXZlU3RyZWFtID0gYnVmZmVyU3RyZWFtLCBzZWdtZW50cyA9IFtdLCBwb2x5Z29uID0gW10sIGNsZWFuID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwb2x5Z29uRW5kKCkge1xuICAgICAgdmFyIHN0YXJ0SW5zaWRlID0gcG9seWdvbkluc2lkZSgpLFxuICAgICAgICAgIGNsZWFuSW5zaWRlID0gY2xlYW4gJiYgc3RhcnRJbnNpZGUsXG4gICAgICAgICAgdmlzaWJsZSA9IChzZWdtZW50cyA9IG1lcmdlKHNlZ21lbnRzKSkubGVuZ3RoO1xuICAgICAgaWYgKGNsZWFuSW5zaWRlIHx8IHZpc2libGUpIHtcbiAgICAgICAgc3RyZWFtLnBvbHlnb25TdGFydCgpO1xuICAgICAgICBpZiAoY2xlYW5JbnNpZGUpIHtcbiAgICAgICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgICAgaW50ZXJwb2xhdGUobnVsbCwgbnVsbCwgMSwgc3RyZWFtKTtcbiAgICAgICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2aXNpYmxlKSB7XG4gICAgICAgICAgY2xpcFBvbHlnb24oc2VnbWVudHMsIGNvbXBhcmVJbnRlcnNlY3Rpb24sIHN0YXJ0SW5zaWRlLCBpbnRlcnBvbGF0ZSwgc3RyZWFtKTtcbiAgICAgICAgfVxuICAgICAgICBzdHJlYW0ucG9seWdvbkVuZCgpO1xuICAgICAgfVxuICAgICAgYWN0aXZlU3RyZWFtID0gc3RyZWFtLCBzZWdtZW50cyA9IHBvbHlnb24gPSByaW5nID0gbnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaW5lU3RhcnQoKSB7XG4gICAgICBjbGlwU3RyZWFtLnBvaW50ID0gbGluZVBvaW50O1xuICAgICAgaWYgKHBvbHlnb24pIHBvbHlnb24ucHVzaChyaW5nID0gW10pO1xuICAgICAgZmlyc3QgPSB0cnVlO1xuICAgICAgdl8gPSBmYWxzZTtcbiAgICAgIHhfID0geV8gPSBOYU47XG4gICAgfVxuXG4gICAgLy8gVE9ETyByYXRoZXIgdGhhbiBzcGVjaWFsLWNhc2UgcG9seWdvbnMsIHNpbXBseSBoYW5kbGUgdGhlbSBzZXBhcmF0ZWx5LlxuICAgIC8vIElkZWFsbHksIGNvaW5jaWRlbnQgaW50ZXJzZWN0aW9uIHBvaW50cyBzaG91bGQgYmUgaml0dGVyZWQgdG8gYXZvaWRcbiAgICAvLyBjbGlwcGluZyBpc3N1ZXMuXG4gICAgZnVuY3Rpb24gbGluZUVuZCgpIHtcbiAgICAgIGlmIChzZWdtZW50cykge1xuICAgICAgICBsaW5lUG9pbnQoeF9fLCB5X18pO1xuICAgICAgICBpZiAodl9fICYmIHZfKSBidWZmZXJTdHJlYW0ucmVqb2luKCk7XG4gICAgICAgIHNlZ21lbnRzLnB1c2goYnVmZmVyU3RyZWFtLnJlc3VsdCgpKTtcbiAgICAgIH1cbiAgICAgIGNsaXBTdHJlYW0ucG9pbnQgPSBwb2ludDtcbiAgICAgIGlmICh2XykgYWN0aXZlU3RyZWFtLmxpbmVFbmQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaW5lUG9pbnQoeCwgeSkge1xuICAgICAgdmFyIHYgPSB2aXNpYmxlKHgsIHkpO1xuICAgICAgaWYgKHBvbHlnb24pIHJpbmcucHVzaChbeCwgeV0pO1xuICAgICAgaWYgKGZpcnN0KSB7XG4gICAgICAgIHhfXyA9IHgsIHlfXyA9IHksIHZfXyA9IHY7XG4gICAgICAgIGZpcnN0ID0gZmFsc2U7XG4gICAgICAgIGlmICh2KSB7XG4gICAgICAgICAgYWN0aXZlU3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgIGFjdGl2ZVN0cmVhbS5wb2ludCh4LCB5KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHYgJiYgdl8pIGFjdGl2ZVN0cmVhbS5wb2ludCh4LCB5KTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdmFyIGEgPSBbeF8gPSBNYXRoLm1heChjbGlwTWluLCBNYXRoLm1pbihjbGlwTWF4LCB4XykpLCB5XyA9IE1hdGgubWF4KGNsaXBNaW4sIE1hdGgubWluKGNsaXBNYXgsIHlfKSldLFxuICAgICAgICAgICAgICBiID0gW3ggPSBNYXRoLm1heChjbGlwTWluLCBNYXRoLm1pbihjbGlwTWF4LCB4KSksIHkgPSBNYXRoLm1heChjbGlwTWluLCBNYXRoLm1pbihjbGlwTWF4LCB5KSldO1xuICAgICAgICAgIGlmIChjbGlwTGluZShhLCBiLCB4MCwgeTAsIHgxLCB5MSkpIHtcbiAgICAgICAgICAgIGlmICghdl8pIHtcbiAgICAgICAgICAgICAgYWN0aXZlU3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgICBhY3RpdmVTdHJlYW0ucG9pbnQoYVswXSwgYVsxXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhY3RpdmVTdHJlYW0ucG9pbnQoYlswXSwgYlsxXSk7XG4gICAgICAgICAgICBpZiAoIXYpIGFjdGl2ZVN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgICAgICBjbGVhbiA9IGZhbHNlO1xuICAgICAgICAgIH0gZWxzZSBpZiAodikge1xuICAgICAgICAgICAgYWN0aXZlU3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgYWN0aXZlU3RyZWFtLnBvaW50KHgsIHkpO1xuICAgICAgICAgICAgY2xlYW4gPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHhfID0geCwgeV8gPSB5LCB2XyA9IHY7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsaXBTdHJlYW07XG4gIH07XG59XG5cbnZhciBleHRlbnQkMSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgeDAgPSAwLFxuICAgICAgeTAgPSAwLFxuICAgICAgeDEgPSA5NjAsXG4gICAgICB5MSA9IDUwMCxcbiAgICAgIGNhY2hlLFxuICAgICAgY2FjaGVTdHJlYW0sXG4gICAgICBjbGlwO1xuXG4gIHJldHVybiBjbGlwID0ge1xuICAgIHN0cmVhbTogZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgICByZXR1cm4gY2FjaGUgJiYgY2FjaGVTdHJlYW0gPT09IHN0cmVhbSA/IGNhY2hlIDogY2FjaGUgPSBjbGlwRXh0ZW50KHgwLCB5MCwgeDEsIHkxKShjYWNoZVN0cmVhbSA9IHN0cmVhbSk7XG4gICAgfSxcbiAgICBleHRlbnQ6IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHgwID0gK19bMF1bMF0sIHkwID0gK19bMF1bMV0sIHgxID0gK19bMV1bMF0sIHkxID0gK19bMV1bMV0sIGNhY2hlID0gY2FjaGVTdHJlYW0gPSBudWxsLCBjbGlwKSA6IFtbeDAsIHkwXSwgW3gxLCB5MV1dO1xuICAgIH1cbiAgfTtcbn07XG5cbnZhciBzdW0kMSA9IGFkZGVyKCk7XG5cbnZhciBwb2x5Z29uQ29udGFpbnMgPSBmdW5jdGlvbihwb2x5Z29uLCBwb2ludCkge1xuICB2YXIgbGFtYmRhID0gcG9pbnRbMF0sXG4gICAgICBwaGkgPSBwb2ludFsxXSxcbiAgICAgIG5vcm1hbCA9IFtzaW4kMShsYW1iZGEpLCAtY29zJDEobGFtYmRhKSwgMF0sXG4gICAgICBhbmdsZSA9IDAsXG4gICAgICB3aW5kaW5nID0gMDtcblxuICBzdW0kMS5yZXNldCgpO1xuXG4gIGZvciAodmFyIGkgPSAwLCBuID0gcG9seWdvbi5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAoIShtID0gKHJpbmcgPSBwb2x5Z29uW2ldKS5sZW5ndGgpKSBjb250aW51ZTtcbiAgICB2YXIgcmluZyxcbiAgICAgICAgbSxcbiAgICAgICAgcG9pbnQwID0gcmluZ1ttIC0gMV0sXG4gICAgICAgIGxhbWJkYTAgPSBwb2ludDBbMF0sXG4gICAgICAgIHBoaTAgPSBwb2ludDBbMV0gLyAyICsgcXVhcnRlclBpLFxuICAgICAgICBzaW5QaGkwID0gc2luJDEocGhpMCksXG4gICAgICAgIGNvc1BoaTAgPSBjb3MkMShwaGkwKTtcblxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgbTsgKytqLCBsYW1iZGEwID0gbGFtYmRhMSwgc2luUGhpMCA9IHNpblBoaTEsIGNvc1BoaTAgPSBjb3NQaGkxLCBwb2ludDAgPSBwb2ludDEpIHtcbiAgICAgIHZhciBwb2ludDEgPSByaW5nW2pdLFxuICAgICAgICAgIGxhbWJkYTEgPSBwb2ludDFbMF0sXG4gICAgICAgICAgcGhpMSA9IHBvaW50MVsxXSAvIDIgKyBxdWFydGVyUGksXG4gICAgICAgICAgc2luUGhpMSA9IHNpbiQxKHBoaTEpLFxuICAgICAgICAgIGNvc1BoaTEgPSBjb3MkMShwaGkxKSxcbiAgICAgICAgICBkZWx0YSA9IGxhbWJkYTEgLSBsYW1iZGEwLFxuICAgICAgICAgIHNpZ24kJDEgPSBkZWx0YSA+PSAwID8gMSA6IC0xLFxuICAgICAgICAgIGFic0RlbHRhID0gc2lnbiQkMSAqIGRlbHRhLFxuICAgICAgICAgIGFudGltZXJpZGlhbiA9IGFic0RlbHRhID4gcGkkMyxcbiAgICAgICAgICBrID0gc2luUGhpMCAqIHNpblBoaTE7XG5cbiAgICAgIHN1bSQxLmFkZChhdGFuMihrICogc2lnbiQkMSAqIHNpbiQxKGFic0RlbHRhKSwgY29zUGhpMCAqIGNvc1BoaTEgKyBrICogY29zJDEoYWJzRGVsdGEpKSk7XG4gICAgICBhbmdsZSArPSBhbnRpbWVyaWRpYW4gPyBkZWx0YSArIHNpZ24kJDEgKiB0YXUkMyA6IGRlbHRhO1xuXG4gICAgICAvLyBBcmUgdGhlIGxvbmdpdHVkZXMgZWl0aGVyIHNpZGUgb2YgdGhlIHBvaW504oCZcyBtZXJpZGlhbiAobGFtYmRhKSxcbiAgICAgIC8vIGFuZCBhcmUgdGhlIGxhdGl0dWRlcyBzbWFsbGVyIHRoYW4gdGhlIHBhcmFsbGVsIChwaGkpP1xuICAgICAgaWYgKGFudGltZXJpZGlhbiBeIGxhbWJkYTAgPj0gbGFtYmRhIF4gbGFtYmRhMSA+PSBsYW1iZGEpIHtcbiAgICAgICAgdmFyIGFyYyA9IGNhcnRlc2lhbkNyb3NzKGNhcnRlc2lhbihwb2ludDApLCBjYXJ0ZXNpYW4ocG9pbnQxKSk7XG4gICAgICAgIGNhcnRlc2lhbk5vcm1hbGl6ZUluUGxhY2UoYXJjKTtcbiAgICAgICAgdmFyIGludGVyc2VjdGlvbiA9IGNhcnRlc2lhbkNyb3NzKG5vcm1hbCwgYXJjKTtcbiAgICAgICAgY2FydGVzaWFuTm9ybWFsaXplSW5QbGFjZShpbnRlcnNlY3Rpb24pO1xuICAgICAgICB2YXIgcGhpQXJjID0gKGFudGltZXJpZGlhbiBeIGRlbHRhID49IDAgPyAtMSA6IDEpICogYXNpbihpbnRlcnNlY3Rpb25bMl0pO1xuICAgICAgICBpZiAocGhpID4gcGhpQXJjIHx8IHBoaSA9PT0gcGhpQXJjICYmIChhcmNbMF0gfHwgYXJjWzFdKSkge1xuICAgICAgICAgIHdpbmRpbmcgKz0gYW50aW1lcmlkaWFuIF4gZGVsdGEgPj0gMCA/IDEgOiAtMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIEZpcnN0LCBkZXRlcm1pbmUgd2hldGhlciB0aGUgU291dGggcG9sZSBpcyBpbnNpZGUgb3Igb3V0c2lkZTpcbiAgLy9cbiAgLy8gSXQgaXMgaW5zaWRlIGlmOlxuICAvLyAqIHRoZSBwb2x5Z29uIHdpbmRzIGFyb3VuZCBpdCBpbiBhIGNsb2Nrd2lzZSBkaXJlY3Rpb24uXG4gIC8vICogdGhlIHBvbHlnb24gZG9lcyBub3QgKGN1bXVsYXRpdmVseSkgd2luZCBhcm91bmQgaXQsIGJ1dCBoYXMgYSBuZWdhdGl2ZVxuICAvLyAgIChjb3VudGVyLWNsb2Nrd2lzZSkgYXJlYS5cbiAgLy9cbiAgLy8gU2Vjb25kLCBjb3VudCB0aGUgKHNpZ25lZCkgbnVtYmVyIG9mIHRpbWVzIGEgc2VnbWVudCBjcm9zc2VzIGEgbGFtYmRhXG4gIC8vIGZyb20gdGhlIHBvaW50IHRvIHRoZSBTb3V0aCBwb2xlLiAgSWYgaXQgaXMgemVybywgdGhlbiB0aGUgcG9pbnQgaXMgdGhlXG4gIC8vIHNhbWUgc2lkZSBhcyB0aGUgU291dGggcG9sZS5cblxuICByZXR1cm4gKGFuZ2xlIDwgLWVwc2lsb24kMiB8fCBhbmdsZSA8IGVwc2lsb24kMiAmJiBzdW0kMSA8IC1lcHNpbG9uJDIpIF4gKHdpbmRpbmcgJiAxKTtcbn07XG5cbnZhciBsZW5ndGhTdW0gPSBhZGRlcigpO1xudmFyIGxhbWJkYTAkMjtcbnZhciBzaW5QaGkwJDE7XG52YXIgY29zUGhpMCQxO1xuXG52YXIgbGVuZ3RoU3RyZWFtID0ge1xuICBzcGhlcmU6IG5vb3AkMSxcbiAgcG9pbnQ6IG5vb3AkMSxcbiAgbGluZVN0YXJ0OiBsZW5ndGhMaW5lU3RhcnQsXG4gIGxpbmVFbmQ6IG5vb3AkMSxcbiAgcG9seWdvblN0YXJ0OiBub29wJDEsXG4gIHBvbHlnb25FbmQ6IG5vb3AkMVxufTtcblxuZnVuY3Rpb24gbGVuZ3RoTGluZVN0YXJ0KCkge1xuICBsZW5ndGhTdHJlYW0ucG9pbnQgPSBsZW5ndGhQb2ludEZpcnN0O1xuICBsZW5ndGhTdHJlYW0ubGluZUVuZCA9IGxlbmd0aExpbmVFbmQ7XG59XG5cbmZ1bmN0aW9uIGxlbmd0aExpbmVFbmQoKSB7XG4gIGxlbmd0aFN0cmVhbS5wb2ludCA9IGxlbmd0aFN0cmVhbS5saW5lRW5kID0gbm9vcCQxO1xufVxuXG5mdW5jdGlvbiBsZW5ndGhQb2ludEZpcnN0KGxhbWJkYSwgcGhpKSB7XG4gIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcbiAgbGFtYmRhMCQyID0gbGFtYmRhLCBzaW5QaGkwJDEgPSBzaW4kMShwaGkpLCBjb3NQaGkwJDEgPSBjb3MkMShwaGkpO1xuICBsZW5ndGhTdHJlYW0ucG9pbnQgPSBsZW5ndGhQb2ludDtcbn1cblxuZnVuY3Rpb24gbGVuZ3RoUG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgbGFtYmRhICo9IHJhZGlhbnMsIHBoaSAqPSByYWRpYW5zO1xuICB2YXIgc2luUGhpID0gc2luJDEocGhpKSxcbiAgICAgIGNvc1BoaSA9IGNvcyQxKHBoaSksXG4gICAgICBkZWx0YSA9IGFicyhsYW1iZGEgLSBsYW1iZGEwJDIpLFxuICAgICAgY29zRGVsdGEgPSBjb3MkMShkZWx0YSksXG4gICAgICBzaW5EZWx0YSA9IHNpbiQxKGRlbHRhKSxcbiAgICAgIHggPSBjb3NQaGkgKiBzaW5EZWx0YSxcbiAgICAgIHkgPSBjb3NQaGkwJDEgKiBzaW5QaGkgLSBzaW5QaGkwJDEgKiBjb3NQaGkgKiBjb3NEZWx0YSxcbiAgICAgIHogPSBzaW5QaGkwJDEgKiBzaW5QaGkgKyBjb3NQaGkwJDEgKiBjb3NQaGkgKiBjb3NEZWx0YTtcbiAgbGVuZ3RoU3VtLmFkZChhdGFuMihzcXJ0KHggKiB4ICsgeSAqIHkpLCB6KSk7XG4gIGxhbWJkYTAkMiA9IGxhbWJkYSwgc2luUGhpMCQxID0gc2luUGhpLCBjb3NQaGkwJDEgPSBjb3NQaGk7XG59XG5cbnZhciBsZW5ndGgkMSA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICBsZW5ndGhTdW0ucmVzZXQoKTtcbiAgZ2VvU3RyZWFtKG9iamVjdCwgbGVuZ3RoU3RyZWFtKTtcbiAgcmV0dXJuICtsZW5ndGhTdW07XG59O1xuXG52YXIgY29vcmRpbmF0ZXMgPSBbbnVsbCwgbnVsbF07XG52YXIgb2JqZWN0JDEgPSB7dHlwZTogXCJMaW5lU3RyaW5nXCIsIGNvb3JkaW5hdGVzOiBjb29yZGluYXRlc307XG5cbnZhciBkaXN0YW5jZSA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgY29vcmRpbmF0ZXNbMF0gPSBhO1xuICBjb29yZGluYXRlc1sxXSA9IGI7XG4gIHJldHVybiBsZW5ndGgkMShvYmplY3QkMSk7XG59O1xuXG52YXIgY29udGFpbnNPYmplY3RUeXBlID0ge1xuICBGZWF0dXJlOiBmdW5jdGlvbihvYmplY3QsIHBvaW50KSB7XG4gICAgcmV0dXJuIGNvbnRhaW5zR2VvbWV0cnkob2JqZWN0Lmdlb21ldHJ5LCBwb2ludCk7XG4gIH0sXG4gIEZlYXR1cmVDb2xsZWN0aW9uOiBmdW5jdGlvbihvYmplY3QsIHBvaW50KSB7XG4gICAgdmFyIGZlYXR1cmVzID0gb2JqZWN0LmZlYXR1cmVzLCBpID0gLTEsIG4gPSBmZWF0dXJlcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIGlmIChjb250YWluc0dlb21ldHJ5KGZlYXR1cmVzW2ldLmdlb21ldHJ5LCBwb2ludCkpIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxudmFyIGNvbnRhaW5zR2VvbWV0cnlUeXBlID0ge1xuICBTcGhlcmU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9LFxuICBQb2ludDogZnVuY3Rpb24ob2JqZWN0LCBwb2ludCkge1xuICAgIHJldHVybiBjb250YWluc1BvaW50KG9iamVjdC5jb29yZGluYXRlcywgcG9pbnQpO1xuICB9LFxuICBNdWx0aVBvaW50OiBmdW5jdGlvbihvYmplY3QsIHBvaW50KSB7XG4gICAgdmFyIGNvb3JkaW5hdGVzID0gb2JqZWN0LmNvb3JkaW5hdGVzLCBpID0gLTEsIG4gPSBjb29yZGluYXRlcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIGlmIChjb250YWluc1BvaW50KGNvb3JkaW5hdGVzW2ldLCBwb2ludCkpIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgTGluZVN0cmluZzogZnVuY3Rpb24ob2JqZWN0LCBwb2ludCkge1xuICAgIHJldHVybiBjb250YWluc0xpbmUob2JqZWN0LmNvb3JkaW5hdGVzLCBwb2ludCk7XG4gIH0sXG4gIE11bHRpTGluZVN0cmluZzogZnVuY3Rpb24ob2JqZWN0LCBwb2ludCkge1xuICAgIHZhciBjb29yZGluYXRlcyA9IG9iamVjdC5jb29yZGluYXRlcywgaSA9IC0xLCBuID0gY29vcmRpbmF0ZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoY29udGFpbnNMaW5lKGNvb3JkaW5hdGVzW2ldLCBwb2ludCkpIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgUG9seWdvbjogZnVuY3Rpb24ob2JqZWN0LCBwb2ludCkge1xuICAgIHJldHVybiBjb250YWluc1BvbHlnb24ob2JqZWN0LmNvb3JkaW5hdGVzLCBwb2ludCk7XG4gIH0sXG4gIE11bHRpUG9seWdvbjogZnVuY3Rpb24ob2JqZWN0LCBwb2ludCkge1xuICAgIHZhciBjb29yZGluYXRlcyA9IG9iamVjdC5jb29yZGluYXRlcywgaSA9IC0xLCBuID0gY29vcmRpbmF0ZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoY29udGFpbnNQb2x5Z29uKGNvb3JkaW5hdGVzW2ldLCBwb2ludCkpIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgR2VvbWV0cnlDb2xsZWN0aW9uOiBmdW5jdGlvbihvYmplY3QsIHBvaW50KSB7XG4gICAgdmFyIGdlb21ldHJpZXMgPSBvYmplY3QuZ2VvbWV0cmllcywgaSA9IC0xLCBuID0gZ2VvbWV0cmllcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIGlmIChjb250YWluc0dlb21ldHJ5KGdlb21ldHJpZXNbaV0sIHBvaW50KSkgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG5mdW5jdGlvbiBjb250YWluc0dlb21ldHJ5KGdlb21ldHJ5LCBwb2ludCkge1xuICByZXR1cm4gZ2VvbWV0cnkgJiYgY29udGFpbnNHZW9tZXRyeVR5cGUuaGFzT3duUHJvcGVydHkoZ2VvbWV0cnkudHlwZSlcbiAgICAgID8gY29udGFpbnNHZW9tZXRyeVR5cGVbZ2VvbWV0cnkudHlwZV0oZ2VvbWV0cnksIHBvaW50KVxuICAgICAgOiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gY29udGFpbnNQb2ludChjb29yZGluYXRlcywgcG9pbnQpIHtcbiAgcmV0dXJuIGRpc3RhbmNlKGNvb3JkaW5hdGVzLCBwb2ludCkgPT09IDA7XG59XG5cbmZ1bmN0aW9uIGNvbnRhaW5zTGluZShjb29yZGluYXRlcywgcG9pbnQpIHtcbiAgdmFyIGFiID0gZGlzdGFuY2UoY29vcmRpbmF0ZXNbMF0sIGNvb3JkaW5hdGVzWzFdKSxcbiAgICAgIGFvID0gZGlzdGFuY2UoY29vcmRpbmF0ZXNbMF0sIHBvaW50KSxcbiAgICAgIG9iID0gZGlzdGFuY2UocG9pbnQsIGNvb3JkaW5hdGVzWzFdKTtcbiAgcmV0dXJuIGFvICsgb2IgPD0gYWIgKyBlcHNpbG9uJDI7XG59XG5cbmZ1bmN0aW9uIGNvbnRhaW5zUG9seWdvbihjb29yZGluYXRlcywgcG9pbnQpIHtcbiAgcmV0dXJuICEhcG9seWdvbkNvbnRhaW5zKGNvb3JkaW5hdGVzLm1hcChyaW5nUmFkaWFucyksIHBvaW50UmFkaWFucyhwb2ludCkpO1xufVxuXG5mdW5jdGlvbiByaW5nUmFkaWFucyhyaW5nKSB7XG4gIHJldHVybiByaW5nID0gcmluZy5tYXAocG9pbnRSYWRpYW5zKSwgcmluZy5wb3AoKSwgcmluZztcbn1cblxuZnVuY3Rpb24gcG9pbnRSYWRpYW5zKHBvaW50KSB7XG4gIHJldHVybiBbcG9pbnRbMF0gKiByYWRpYW5zLCBwb2ludFsxXSAqIHJhZGlhbnNdO1xufVxuXG52YXIgY29udGFpbnMgPSBmdW5jdGlvbihvYmplY3QsIHBvaW50KSB7XG4gIHJldHVybiAob2JqZWN0ICYmIGNvbnRhaW5zT2JqZWN0VHlwZS5oYXNPd25Qcm9wZXJ0eShvYmplY3QudHlwZSlcbiAgICAgID8gY29udGFpbnNPYmplY3RUeXBlW29iamVjdC50eXBlXVxuICAgICAgOiBjb250YWluc0dlb21ldHJ5KShvYmplY3QsIHBvaW50KTtcbn07XG5cbmZ1bmN0aW9uIGdyYXRpY3VsZVgoeTAsIHkxLCBkeSkge1xuICB2YXIgeSA9IHNlcXVlbmNlKHkwLCB5MSAtIGVwc2lsb24kMiwgZHkpLmNvbmNhdCh5MSk7XG4gIHJldHVybiBmdW5jdGlvbih4KSB7IHJldHVybiB5Lm1hcChmdW5jdGlvbih5KSB7IHJldHVybiBbeCwgeV07IH0pOyB9O1xufVxuXG5mdW5jdGlvbiBncmF0aWN1bGVZKHgwLCB4MSwgZHgpIHtcbiAgdmFyIHggPSBzZXF1ZW5jZSh4MCwgeDEgLSBlcHNpbG9uJDIsIGR4KS5jb25jYXQoeDEpO1xuICByZXR1cm4gZnVuY3Rpb24oeSkgeyByZXR1cm4geC5tYXAoZnVuY3Rpb24oeCkgeyByZXR1cm4gW3gsIHldOyB9KTsgfTtcbn1cblxuZnVuY3Rpb24gZ3JhdGljdWxlKCkge1xuICB2YXIgeDEsIHgwLCBYMSwgWDAsXG4gICAgICB5MSwgeTAsIFkxLCBZMCxcbiAgICAgIGR4ID0gMTAsIGR5ID0gZHgsIERYID0gOTAsIERZID0gMzYwLFxuICAgICAgeCwgeSwgWCwgWSxcbiAgICAgIHByZWNpc2lvbiA9IDIuNTtcblxuICBmdW5jdGlvbiBncmF0aWN1bGUoKSB7XG4gICAgcmV0dXJuIHt0eXBlOiBcIk11bHRpTGluZVN0cmluZ1wiLCBjb29yZGluYXRlczogbGluZXMoKX07XG4gIH1cblxuICBmdW5jdGlvbiBsaW5lcygpIHtcbiAgICByZXR1cm4gc2VxdWVuY2UoY2VpbChYMCAvIERYKSAqIERYLCBYMSwgRFgpLm1hcChYKVxuICAgICAgICAuY29uY2F0KHNlcXVlbmNlKGNlaWwoWTAgLyBEWSkgKiBEWSwgWTEsIERZKS5tYXAoWSkpXG4gICAgICAgIC5jb25jYXQoc2VxdWVuY2UoY2VpbCh4MCAvIGR4KSAqIGR4LCB4MSwgZHgpLmZpbHRlcihmdW5jdGlvbih4KSB7IHJldHVybiBhYnMoeCAlIERYKSA+IGVwc2lsb24kMjsgfSkubWFwKHgpKVxuICAgICAgICAuY29uY2F0KHNlcXVlbmNlKGNlaWwoeTAgLyBkeSkgKiBkeSwgeTEsIGR5KS5maWx0ZXIoZnVuY3Rpb24oeSkgeyByZXR1cm4gYWJzKHkgJSBEWSkgPiBlcHNpbG9uJDI7IH0pLm1hcCh5KSk7XG4gIH1cblxuICBncmF0aWN1bGUubGluZXMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbGluZXMoKS5tYXAoZnVuY3Rpb24oY29vcmRpbmF0ZXMpIHsgcmV0dXJuIHt0eXBlOiBcIkxpbmVTdHJpbmdcIiwgY29vcmRpbmF0ZXM6IGNvb3JkaW5hdGVzfTsgfSk7XG4gIH07XG5cbiAgZ3JhdGljdWxlLm91dGxpbmUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJQb2x5Z29uXCIsXG4gICAgICBjb29yZGluYXRlczogW1xuICAgICAgICBYKFgwKS5jb25jYXQoXG4gICAgICAgIFkoWTEpLnNsaWNlKDEpLFxuICAgICAgICBYKFgxKS5yZXZlcnNlKCkuc2xpY2UoMSksXG4gICAgICAgIFkoWTApLnJldmVyc2UoKS5zbGljZSgxKSlcbiAgICAgIF1cbiAgICB9O1xuICB9O1xuXG4gIGdyYXRpY3VsZS5leHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZ3JhdGljdWxlLmV4dGVudE1pbm9yKCk7XG4gICAgcmV0dXJuIGdyYXRpY3VsZS5leHRlbnRNYWpvcihfKS5leHRlbnRNaW5vcihfKTtcbiAgfTtcblxuICBncmF0aWN1bGUuZXh0ZW50TWFqb3IgPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gW1tYMCwgWTBdLCBbWDEsIFkxXV07XG4gICAgWDAgPSArX1swXVswXSwgWDEgPSArX1sxXVswXTtcbiAgICBZMCA9ICtfWzBdWzFdLCBZMSA9ICtfWzFdWzFdO1xuICAgIGlmIChYMCA+IFgxKSBfID0gWDAsIFgwID0gWDEsIFgxID0gXztcbiAgICBpZiAoWTAgPiBZMSkgXyA9IFkwLCBZMCA9IFkxLCBZMSA9IF87XG4gICAgcmV0dXJuIGdyYXRpY3VsZS5wcmVjaXNpb24ocHJlY2lzaW9uKTtcbiAgfTtcblxuICBncmF0aWN1bGUuZXh0ZW50TWlub3IgPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gW1t4MCwgeTBdLCBbeDEsIHkxXV07XG4gICAgeDAgPSArX1swXVswXSwgeDEgPSArX1sxXVswXTtcbiAgICB5MCA9ICtfWzBdWzFdLCB5MSA9ICtfWzFdWzFdO1xuICAgIGlmICh4MCA+IHgxKSBfID0geDAsIHgwID0geDEsIHgxID0gXztcbiAgICBpZiAoeTAgPiB5MSkgXyA9IHkwLCB5MCA9IHkxLCB5MSA9IF87XG4gICAgcmV0dXJuIGdyYXRpY3VsZS5wcmVjaXNpb24ocHJlY2lzaW9uKTtcbiAgfTtcblxuICBncmF0aWN1bGUuc3RlcCA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBncmF0aWN1bGUuc3RlcE1pbm9yKCk7XG4gICAgcmV0dXJuIGdyYXRpY3VsZS5zdGVwTWFqb3IoXykuc3RlcE1pbm9yKF8pO1xuICB9O1xuXG4gIGdyYXRpY3VsZS5zdGVwTWFqb3IgPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gW0RYLCBEWV07XG4gICAgRFggPSArX1swXSwgRFkgPSArX1sxXTtcbiAgICByZXR1cm4gZ3JhdGljdWxlO1xuICB9O1xuXG4gIGdyYXRpY3VsZS5zdGVwTWlub3IgPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gW2R4LCBkeV07XG4gICAgZHggPSArX1swXSwgZHkgPSArX1sxXTtcbiAgICByZXR1cm4gZ3JhdGljdWxlO1xuICB9O1xuXG4gIGdyYXRpY3VsZS5wcmVjaXNpb24gPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcHJlY2lzaW9uO1xuICAgIHByZWNpc2lvbiA9ICtfO1xuICAgIHggPSBncmF0aWN1bGVYKHkwLCB5MSwgOTApO1xuICAgIHkgPSBncmF0aWN1bGVZKHgwLCB4MSwgcHJlY2lzaW9uKTtcbiAgICBYID0gZ3JhdGljdWxlWChZMCwgWTEsIDkwKTtcbiAgICBZID0gZ3JhdGljdWxlWShYMCwgWDEsIHByZWNpc2lvbik7XG4gICAgcmV0dXJuIGdyYXRpY3VsZTtcbiAgfTtcblxuICByZXR1cm4gZ3JhdGljdWxlXG4gICAgICAuZXh0ZW50TWFqb3IoW1stMTgwLCAtOTAgKyBlcHNpbG9uJDJdLCBbMTgwLCA5MCAtIGVwc2lsb24kMl1dKVxuICAgICAgLmV4dGVudE1pbm9yKFtbLTE4MCwgLTgwIC0gZXBzaWxvbiQyXSwgWzE4MCwgODAgKyBlcHNpbG9uJDJdXSk7XG59XG5cbmZ1bmN0aW9uIGdyYXRpY3VsZTEwKCkge1xuICByZXR1cm4gZ3JhdGljdWxlKCkoKTtcbn1cblxudmFyIGludGVycG9sYXRlJDEgPSBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciB4MCA9IGFbMF0gKiByYWRpYW5zLFxuICAgICAgeTAgPSBhWzFdICogcmFkaWFucyxcbiAgICAgIHgxID0gYlswXSAqIHJhZGlhbnMsXG4gICAgICB5MSA9IGJbMV0gKiByYWRpYW5zLFxuICAgICAgY3kwID0gY29zJDEoeTApLFxuICAgICAgc3kwID0gc2luJDEoeTApLFxuICAgICAgY3kxID0gY29zJDEoeTEpLFxuICAgICAgc3kxID0gc2luJDEoeTEpLFxuICAgICAga3gwID0gY3kwICogY29zJDEoeDApLFxuICAgICAga3kwID0gY3kwICogc2luJDEoeDApLFxuICAgICAga3gxID0gY3kxICogY29zJDEoeDEpLFxuICAgICAga3kxID0gY3kxICogc2luJDEoeDEpLFxuICAgICAgZCA9IDIgKiBhc2luKHNxcnQoaGF2ZXJzaW4oeTEgLSB5MCkgKyBjeTAgKiBjeTEgKiBoYXZlcnNpbih4MSAtIHgwKSkpLFxuICAgICAgayA9IHNpbiQxKGQpO1xuXG4gIHZhciBpbnRlcnBvbGF0ZSA9IGQgPyBmdW5jdGlvbih0KSB7XG4gICAgdmFyIEIgPSBzaW4kMSh0ICo9IGQpIC8gayxcbiAgICAgICAgQSA9IHNpbiQxKGQgLSB0KSAvIGssXG4gICAgICAgIHggPSBBICoga3gwICsgQiAqIGt4MSxcbiAgICAgICAgeSA9IEEgKiBreTAgKyBCICoga3kxLFxuICAgICAgICB6ID0gQSAqIHN5MCArIEIgKiBzeTE7XG4gICAgcmV0dXJuIFtcbiAgICAgIGF0YW4yKHksIHgpICogZGVncmVlcyQxLFxuICAgICAgYXRhbjIoeiwgc3FydCh4ICogeCArIHkgKiB5KSkgKiBkZWdyZWVzJDFcbiAgICBdO1xuICB9IDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFt4MCAqIGRlZ3JlZXMkMSwgeTAgKiBkZWdyZWVzJDFdO1xuICB9O1xuXG4gIGludGVycG9sYXRlLmRpc3RhbmNlID0gZDtcblxuICByZXR1cm4gaW50ZXJwb2xhdGU7XG59O1xuXG52YXIgaWRlbnRpdHkkNCA9IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHg7XG59O1xuXG52YXIgYXJlYVN1bSQxID0gYWRkZXIoKTtcbnZhciBhcmVhUmluZ1N1bSQxID0gYWRkZXIoKTtcbnZhciB4MDA7XG52YXIgeTAwO1xudmFyIHgwJDE7XG52YXIgeTAkMTtcblxudmFyIGFyZWFTdHJlYW0kMSA9IHtcbiAgcG9pbnQ6IG5vb3AkMSxcbiAgbGluZVN0YXJ0OiBub29wJDEsXG4gIGxpbmVFbmQ6IG5vb3AkMSxcbiAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICBhcmVhU3RyZWFtJDEubGluZVN0YXJ0ID0gYXJlYVJpbmdTdGFydCQxO1xuICAgIGFyZWFTdHJlYW0kMS5saW5lRW5kID0gYXJlYVJpbmdFbmQkMTtcbiAgfSxcbiAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgYXJlYVN0cmVhbSQxLmxpbmVTdGFydCA9IGFyZWFTdHJlYW0kMS5saW5lRW5kID0gYXJlYVN0cmVhbSQxLnBvaW50ID0gbm9vcCQxO1xuICAgIGFyZWFTdW0kMS5hZGQoYWJzKGFyZWFSaW5nU3VtJDEpKTtcbiAgICBhcmVhUmluZ1N1bSQxLnJlc2V0KCk7XG4gIH0sXG4gIHJlc3VsdDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZWEgPSBhcmVhU3VtJDEgLyAyO1xuICAgIGFyZWFTdW0kMS5yZXNldCgpO1xuICAgIHJldHVybiBhcmVhO1xuICB9XG59O1xuXG5mdW5jdGlvbiBhcmVhUmluZ1N0YXJ0JDEoKSB7XG4gIGFyZWFTdHJlYW0kMS5wb2ludCA9IGFyZWFQb2ludEZpcnN0JDE7XG59XG5cbmZ1bmN0aW9uIGFyZWFQb2ludEZpcnN0JDEoeCwgeSkge1xuICBhcmVhU3RyZWFtJDEucG9pbnQgPSBhcmVhUG9pbnQkMTtcbiAgeDAwID0geDAkMSA9IHgsIHkwMCA9IHkwJDEgPSB5O1xufVxuXG5mdW5jdGlvbiBhcmVhUG9pbnQkMSh4LCB5KSB7XG4gIGFyZWFSaW5nU3VtJDEuYWRkKHkwJDEgKiB4IC0geDAkMSAqIHkpO1xuICB4MCQxID0geCwgeTAkMSA9IHk7XG59XG5cbmZ1bmN0aW9uIGFyZWFSaW5nRW5kJDEoKSB7XG4gIGFyZWFQb2ludCQxKHgwMCwgeTAwKTtcbn1cblxudmFyIHgwJDIgPSBJbmZpbml0eTtcbnZhciB5MCQyID0geDAkMjtcbnZhciB4MSA9IC14MCQyO1xudmFyIHkxID0geDE7XG5cbnZhciBib3VuZHNTdHJlYW0kMSA9IHtcbiAgcG9pbnQ6IGJvdW5kc1BvaW50JDEsXG4gIGxpbmVTdGFydDogbm9vcCQxLFxuICBsaW5lRW5kOiBub29wJDEsXG4gIHBvbHlnb25TdGFydDogbm9vcCQxLFxuICBwb2x5Z29uRW5kOiBub29wJDEsXG4gIHJlc3VsdDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGJvdW5kcyA9IFtbeDAkMiwgeTAkMl0sIFt4MSwgeTFdXTtcbiAgICB4MSA9IHkxID0gLSh5MCQyID0geDAkMiA9IEluZmluaXR5KTtcbiAgICByZXR1cm4gYm91bmRzO1xuICB9XG59O1xuXG5mdW5jdGlvbiBib3VuZHNQb2ludCQxKHgsIHkpIHtcbiAgaWYgKHggPCB4MCQyKSB4MCQyID0geDtcbiAgaWYgKHggPiB4MSkgeDEgPSB4O1xuICBpZiAoeSA8IHkwJDIpIHkwJDIgPSB5O1xuICBpZiAoeSA+IHkxKSB5MSA9IHk7XG59XG5cbi8vIFRPRE8gRW5mb3JjZSBwb3NpdGl2ZSBhcmVhIGZvciBleHRlcmlvciwgbmVnYXRpdmUgYXJlYSBmb3IgaW50ZXJpb3I/XG5cbnZhciBYMCQxID0gMDtcbnZhciBZMCQxID0gMDtcbnZhciBaMCQxID0gMDtcbnZhciBYMSQxID0gMDtcbnZhciBZMSQxID0gMDtcbnZhciBaMSQxID0gMDtcbnZhciBYMiQxID0gMDtcbnZhciBZMiQxID0gMDtcbnZhciBaMiQxID0gMDtcbnZhciB4MDAkMTtcbnZhciB5MDAkMTtcbnZhciB4MCQzO1xudmFyIHkwJDM7XG5cbnZhciBjZW50cm9pZFN0cmVhbSQxID0ge1xuICBwb2ludDogY2VudHJvaWRQb2ludCQxLFxuICBsaW5lU3RhcnQ6IGNlbnRyb2lkTGluZVN0YXJ0JDEsXG4gIGxpbmVFbmQ6IGNlbnRyb2lkTGluZUVuZCQxLFxuICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIGNlbnRyb2lkU3RyZWFtJDEubGluZVN0YXJ0ID0gY2VudHJvaWRSaW5nU3RhcnQkMTtcbiAgICBjZW50cm9pZFN0cmVhbSQxLmxpbmVFbmQgPSBjZW50cm9pZFJpbmdFbmQkMTtcbiAgfSxcbiAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgY2VudHJvaWRTdHJlYW0kMS5wb2ludCA9IGNlbnRyb2lkUG9pbnQkMTtcbiAgICBjZW50cm9pZFN0cmVhbSQxLmxpbmVTdGFydCA9IGNlbnRyb2lkTGluZVN0YXJ0JDE7XG4gICAgY2VudHJvaWRTdHJlYW0kMS5saW5lRW5kID0gY2VudHJvaWRMaW5lRW5kJDE7XG4gIH0sXG4gIHJlc3VsdDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNlbnRyb2lkID0gWjIkMSA/IFtYMiQxIC8gWjIkMSwgWTIkMSAvIFoyJDFdXG4gICAgICAgIDogWjEkMSA/IFtYMSQxIC8gWjEkMSwgWTEkMSAvIFoxJDFdXG4gICAgICAgIDogWjAkMSA/IFtYMCQxIC8gWjAkMSwgWTAkMSAvIFowJDFdXG4gICAgICAgIDogW05hTiwgTmFOXTtcbiAgICBYMCQxID0gWTAkMSA9IFowJDEgPVxuICAgIFgxJDEgPSBZMSQxID0gWjEkMSA9XG4gICAgWDIkMSA9IFkyJDEgPSBaMiQxID0gMDtcbiAgICByZXR1cm4gY2VudHJvaWQ7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNlbnRyb2lkUG9pbnQkMSh4LCB5KSB7XG4gIFgwJDEgKz0geDtcbiAgWTAkMSArPSB5O1xuICArK1owJDE7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkTGluZVN0YXJ0JDEoKSB7XG4gIGNlbnRyb2lkU3RyZWFtJDEucG9pbnQgPSBjZW50cm9pZFBvaW50Rmlyc3RMaW5lO1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZFBvaW50Rmlyc3RMaW5lKHgsIHkpIHtcbiAgY2VudHJvaWRTdHJlYW0kMS5wb2ludCA9IGNlbnRyb2lkUG9pbnRMaW5lO1xuICBjZW50cm9pZFBvaW50JDEoeDAkMyA9IHgsIHkwJDMgPSB5KTtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRQb2ludExpbmUoeCwgeSkge1xuICB2YXIgZHggPSB4IC0geDAkMywgZHkgPSB5IC0geTAkMywgeiA9IHNxcnQoZHggKiBkeCArIGR5ICogZHkpO1xuICBYMSQxICs9IHogKiAoeDAkMyArIHgpIC8gMjtcbiAgWTEkMSArPSB6ICogKHkwJDMgKyB5KSAvIDI7XG4gIFoxJDEgKz0gejtcbiAgY2VudHJvaWRQb2ludCQxKHgwJDMgPSB4LCB5MCQzID0geSk7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkTGluZUVuZCQxKCkge1xuICBjZW50cm9pZFN0cmVhbSQxLnBvaW50ID0gY2VudHJvaWRQb2ludCQxO1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZFJpbmdTdGFydCQxKCkge1xuICBjZW50cm9pZFN0cmVhbSQxLnBvaW50ID0gY2VudHJvaWRQb2ludEZpcnN0UmluZztcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRSaW5nRW5kJDEoKSB7XG4gIGNlbnRyb2lkUG9pbnRSaW5nKHgwMCQxLCB5MDAkMSk7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkUG9pbnRGaXJzdFJpbmcoeCwgeSkge1xuICBjZW50cm9pZFN0cmVhbSQxLnBvaW50ID0gY2VudHJvaWRQb2ludFJpbmc7XG4gIGNlbnRyb2lkUG9pbnQkMSh4MDAkMSA9IHgwJDMgPSB4LCB5MDAkMSA9IHkwJDMgPSB5KTtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRQb2ludFJpbmcoeCwgeSkge1xuICB2YXIgZHggPSB4IC0geDAkMyxcbiAgICAgIGR5ID0geSAtIHkwJDMsXG4gICAgICB6ID0gc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG5cbiAgWDEkMSArPSB6ICogKHgwJDMgKyB4KSAvIDI7XG4gIFkxJDEgKz0geiAqICh5MCQzICsgeSkgLyAyO1xuICBaMSQxICs9IHo7XG5cbiAgeiA9IHkwJDMgKiB4IC0geDAkMyAqIHk7XG4gIFgyJDEgKz0geiAqICh4MCQzICsgeCk7XG4gIFkyJDEgKz0geiAqICh5MCQzICsgeSk7XG4gIFoyJDEgKz0geiAqIDM7XG4gIGNlbnRyb2lkUG9pbnQkMSh4MCQzID0geCwgeTAkMyA9IHkpO1xufVxuXG5mdW5jdGlvbiBQYXRoQ29udGV4dChjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5QYXRoQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gIF9yYWRpdXM6IDQuNSxcbiAgcG9pbnRSYWRpdXM6IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gdGhpcy5fcmFkaXVzID0gXywgdGhpcztcbiAgfSxcbiAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9saW5lID09PSAwKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX3BvaW50ID0gTmFOO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDoge1xuICAgICAgICB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTtcbiAgICAgICAgdGhpcy5fcG9pbnQgPSAxO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMToge1xuICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKHggKyB0aGlzLl9yYWRpdXMsIHkpO1xuICAgICAgICB0aGlzLl9jb250ZXh0LmFyYyh4LCB5LCB0aGlzLl9yYWRpdXMsIDAsIHRhdSQzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICByZXN1bHQ6IG5vb3AkMVxufTtcblxudmFyIGxlbmd0aFN1bSQxID0gYWRkZXIoKTtcbnZhciBsZW5ndGhSaW5nO1xudmFyIHgwMCQyO1xudmFyIHkwMCQyO1xudmFyIHgwJDQ7XG52YXIgeTAkNDtcblxudmFyIGxlbmd0aFN0cmVhbSQxID0ge1xuICBwb2ludDogbm9vcCQxLFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIGxlbmd0aFN0cmVhbSQxLnBvaW50ID0gbGVuZ3RoUG9pbnRGaXJzdCQxO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAobGVuZ3RoUmluZykgbGVuZ3RoUG9pbnQkMSh4MDAkMiwgeTAwJDIpO1xuICAgIGxlbmd0aFN0cmVhbSQxLnBvaW50ID0gbm9vcCQxO1xuICB9LFxuICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIGxlbmd0aFJpbmcgPSB0cnVlO1xuICB9LFxuICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICBsZW5ndGhSaW5nID0gbnVsbDtcbiAgfSxcbiAgcmVzdWx0OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGVuZ3RoID0gK2xlbmd0aFN1bSQxO1xuICAgIGxlbmd0aFN1bSQxLnJlc2V0KCk7XG4gICAgcmV0dXJuIGxlbmd0aDtcbiAgfVxufTtcblxuZnVuY3Rpb24gbGVuZ3RoUG9pbnRGaXJzdCQxKHgsIHkpIHtcbiAgbGVuZ3RoU3RyZWFtJDEucG9pbnQgPSBsZW5ndGhQb2ludCQxO1xuICB4MDAkMiA9IHgwJDQgPSB4LCB5MDAkMiA9IHkwJDQgPSB5O1xufVxuXG5mdW5jdGlvbiBsZW5ndGhQb2ludCQxKHgsIHkpIHtcbiAgeDAkNCAtPSB4LCB5MCQ0IC09IHk7XG4gIGxlbmd0aFN1bSQxLmFkZChzcXJ0KHgwJDQgKiB4MCQ0ICsgeTAkNCAqIHkwJDQpKTtcbiAgeDAkNCA9IHgsIHkwJDQgPSB5O1xufVxuXG5mdW5jdGlvbiBQYXRoU3RyaW5nKCkge1xuICB0aGlzLl9zdHJpbmcgPSBbXTtcbn1cblxuUGF0aFN0cmluZy5wcm90b3R5cGUgPSB7XG4gIF9yYWRpdXM6IDQuNSxcbiAgX2NpcmNsZTogY2lyY2xlJDEoNC41KSxcbiAgcG9pbnRSYWRpdXM6IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoKF8gPSArXykgIT09IHRoaXMuX3JhZGl1cykgdGhpcy5fcmFkaXVzID0gXywgdGhpcy5fY2lyY2xlID0gbnVsbDtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9saW5lID09PSAwKSB0aGlzLl9zdHJpbmcucHVzaChcIlpcIik7XG4gICAgdGhpcy5fcG9pbnQgPSBOYU47XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB7XG4gICAgICAgIHRoaXMuX3N0cmluZy5wdXNoKFwiTVwiLCB4LCBcIixcIiwgeSk7XG4gICAgICAgIHRoaXMuX3BvaW50ID0gMTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIDE6IHtcbiAgICAgICAgdGhpcy5fc3RyaW5nLnB1c2goXCJMXCIsIHgsIFwiLFwiLCB5KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIGlmICh0aGlzLl9jaXJjbGUgPT0gbnVsbCkgdGhpcy5fY2lyY2xlID0gY2lyY2xlJDEodGhpcy5fcmFkaXVzKTtcbiAgICAgICAgdGhpcy5fc3RyaW5nLnB1c2goXCJNXCIsIHgsIFwiLFwiLCB5LCB0aGlzLl9jaXJjbGUpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHJlc3VsdDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX3N0cmluZy5sZW5ndGgpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9zdHJpbmcuam9pbihcIlwiKTtcbiAgICAgIHRoaXMuX3N0cmluZyA9IFtdO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBjaXJjbGUkMShyYWRpdXMpIHtcbiAgcmV0dXJuIFwibTAsXCIgKyByYWRpdXNcbiAgICAgICsgXCJhXCIgKyByYWRpdXMgKyBcIixcIiArIHJhZGl1cyArIFwiIDAgMSwxIDAsXCIgKyAtMiAqIHJhZGl1c1xuICAgICAgKyBcImFcIiArIHJhZGl1cyArIFwiLFwiICsgcmFkaXVzICsgXCIgMCAxLDEgMCxcIiArIDIgKiByYWRpdXNcbiAgICAgICsgXCJ6XCI7XG59XG5cbnZhciBpbmRleCQxID0gZnVuY3Rpb24ocHJvamVjdGlvbiwgY29udGV4dCkge1xuICB2YXIgcG9pbnRSYWRpdXMgPSA0LjUsXG4gICAgICBwcm9qZWN0aW9uU3RyZWFtLFxuICAgICAgY29udGV4dFN0cmVhbTtcblxuICBmdW5jdGlvbiBwYXRoKG9iamVjdCkge1xuICAgIGlmIChvYmplY3QpIHtcbiAgICAgIGlmICh0eXBlb2YgcG9pbnRSYWRpdXMgPT09IFwiZnVuY3Rpb25cIikgY29udGV4dFN0cmVhbS5wb2ludFJhZGl1cygrcG9pbnRSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgICBnZW9TdHJlYW0ob2JqZWN0LCBwcm9qZWN0aW9uU3RyZWFtKGNvbnRleHRTdHJlYW0pKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRleHRTdHJlYW0ucmVzdWx0KCk7XG4gIH1cblxuICBwYXRoLmFyZWEgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICBnZW9TdHJlYW0ob2JqZWN0LCBwcm9qZWN0aW9uU3RyZWFtKGFyZWFTdHJlYW0kMSkpO1xuICAgIHJldHVybiBhcmVhU3RyZWFtJDEucmVzdWx0KCk7XG4gIH07XG5cbiAgcGF0aC5tZWFzdXJlID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgZ2VvU3RyZWFtKG9iamVjdCwgcHJvamVjdGlvblN0cmVhbShsZW5ndGhTdHJlYW0kMSkpO1xuICAgIHJldHVybiBsZW5ndGhTdHJlYW0kMS5yZXN1bHQoKTtcbiAgfTtcblxuICBwYXRoLmJvdW5kcyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIGdlb1N0cmVhbShvYmplY3QsIHByb2plY3Rpb25TdHJlYW0oYm91bmRzU3RyZWFtJDEpKTtcbiAgICByZXR1cm4gYm91bmRzU3RyZWFtJDEucmVzdWx0KCk7XG4gIH07XG5cbiAgcGF0aC5jZW50cm9pZCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIGdlb1N0cmVhbShvYmplY3QsIHByb2plY3Rpb25TdHJlYW0oY2VudHJvaWRTdHJlYW0kMSkpO1xuICAgIHJldHVybiBjZW50cm9pZFN0cmVhbSQxLnJlc3VsdCgpO1xuICB9O1xuXG4gIHBhdGgucHJvamVjdGlvbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwcm9qZWN0aW9uU3RyZWFtID0gXyA9PSBudWxsID8gKHByb2plY3Rpb24gPSBudWxsLCBpZGVudGl0eSQ0KSA6IChwcm9qZWN0aW9uID0gXykuc3RyZWFtLCBwYXRoKSA6IHByb2plY3Rpb247XG4gIH07XG5cbiAgcGF0aC5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGNvbnRleHQ7XG4gICAgY29udGV4dFN0cmVhbSA9IF8gPT0gbnVsbCA/IChjb250ZXh0ID0gbnVsbCwgbmV3IFBhdGhTdHJpbmcpIDogbmV3IFBhdGhDb250ZXh0KGNvbnRleHQgPSBfKTtcbiAgICBpZiAodHlwZW9mIHBvaW50UmFkaXVzICE9PSBcImZ1bmN0aW9uXCIpIGNvbnRleHRTdHJlYW0ucG9pbnRSYWRpdXMocG9pbnRSYWRpdXMpO1xuICAgIHJldHVybiBwYXRoO1xuICB9O1xuXG4gIHBhdGgucG9pbnRSYWRpdXMgPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcG9pbnRSYWRpdXM7XG4gICAgcG9pbnRSYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IChjb250ZXh0U3RyZWFtLnBvaW50UmFkaXVzKCtfKSwgK18pO1xuICAgIHJldHVybiBwYXRoO1xuICB9O1xuXG4gIHJldHVybiBwYXRoLnByb2plY3Rpb24ocHJvamVjdGlvbikuY29udGV4dChjb250ZXh0KTtcbn07XG5cbnZhciBjbGlwID0gZnVuY3Rpb24ocG9pbnRWaXNpYmxlLCBjbGlwTGluZSwgaW50ZXJwb2xhdGUsIHN0YXJ0KSB7XG4gIHJldHVybiBmdW5jdGlvbihyb3RhdGUsIHNpbmspIHtcbiAgICB2YXIgbGluZSA9IGNsaXBMaW5lKHNpbmspLFxuICAgICAgICByb3RhdGVkU3RhcnQgPSByb3RhdGUuaW52ZXJ0KHN0YXJ0WzBdLCBzdGFydFsxXSksXG4gICAgICAgIHJpbmdCdWZmZXIgPSBjbGlwQnVmZmVyKCksXG4gICAgICAgIHJpbmdTaW5rID0gY2xpcExpbmUocmluZ0J1ZmZlciksXG4gICAgICAgIHBvbHlnb25TdGFydGVkID0gZmFsc2UsXG4gICAgICAgIHBvbHlnb24sXG4gICAgICAgIHNlZ21lbnRzLFxuICAgICAgICByaW5nO1xuXG4gICAgdmFyIGNsaXAgPSB7XG4gICAgICBwb2ludDogcG9pbnQsXG4gICAgICBsaW5lU3RhcnQ6IGxpbmVTdGFydCxcbiAgICAgIGxpbmVFbmQ6IGxpbmVFbmQsXG4gICAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBjbGlwLnBvaW50ID0gcG9pbnRSaW5nO1xuICAgICAgICBjbGlwLmxpbmVTdGFydCA9IHJpbmdTdGFydDtcbiAgICAgICAgY2xpcC5saW5lRW5kID0gcmluZ0VuZDtcbiAgICAgICAgc2VnbWVudHMgPSBbXTtcbiAgICAgICAgcG9seWdvbiA9IFtdO1xuICAgICAgfSxcbiAgICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBjbGlwLnBvaW50ID0gcG9pbnQ7XG4gICAgICAgIGNsaXAubGluZVN0YXJ0ID0gbGluZVN0YXJ0O1xuICAgICAgICBjbGlwLmxpbmVFbmQgPSBsaW5lRW5kO1xuICAgICAgICBzZWdtZW50cyA9IG1lcmdlKHNlZ21lbnRzKTtcbiAgICAgICAgdmFyIHN0YXJ0SW5zaWRlID0gcG9seWdvbkNvbnRhaW5zKHBvbHlnb24sIHJvdGF0ZWRTdGFydCk7XG4gICAgICAgIGlmIChzZWdtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICBpZiAoIXBvbHlnb25TdGFydGVkKSBzaW5rLnBvbHlnb25TdGFydCgpLCBwb2x5Z29uU3RhcnRlZCA9IHRydWU7XG4gICAgICAgICAgY2xpcFBvbHlnb24oc2VnbWVudHMsIGNvbXBhcmVJbnRlcnNlY3Rpb24sIHN0YXJ0SW5zaWRlLCBpbnRlcnBvbGF0ZSwgc2luayk7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RhcnRJbnNpZGUpIHtcbiAgICAgICAgICBpZiAoIXBvbHlnb25TdGFydGVkKSBzaW5rLnBvbHlnb25TdGFydCgpLCBwb2x5Z29uU3RhcnRlZCA9IHRydWU7XG4gICAgICAgICAgc2luay5saW5lU3RhcnQoKTtcbiAgICAgICAgICBpbnRlcnBvbGF0ZShudWxsLCBudWxsLCAxLCBzaW5rKTtcbiAgICAgICAgICBzaW5rLmxpbmVFbmQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9seWdvblN0YXJ0ZWQpIHNpbmsucG9seWdvbkVuZCgpLCBwb2x5Z29uU3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICBzZWdtZW50cyA9IHBvbHlnb24gPSBudWxsO1xuICAgICAgfSxcbiAgICAgIHNwaGVyZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHNpbmsucG9seWdvblN0YXJ0KCk7XG4gICAgICAgIHNpbmsubGluZVN0YXJ0KCk7XG4gICAgICAgIGludGVycG9sYXRlKG51bGwsIG51bGwsIDEsIHNpbmspO1xuICAgICAgICBzaW5rLmxpbmVFbmQoKTtcbiAgICAgICAgc2luay5wb2x5Z29uRW5kKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHBvaW50KGxhbWJkYSwgcGhpKSB7XG4gICAgICB2YXIgcG9pbnQgPSByb3RhdGUobGFtYmRhLCBwaGkpO1xuICAgICAgaWYgKHBvaW50VmlzaWJsZShsYW1iZGEgPSBwb2ludFswXSwgcGhpID0gcG9pbnRbMV0pKSBzaW5rLnBvaW50KGxhbWJkYSwgcGhpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwb2ludExpbmUobGFtYmRhLCBwaGkpIHtcbiAgICAgIHZhciBwb2ludCA9IHJvdGF0ZShsYW1iZGEsIHBoaSk7XG4gICAgICBsaW5lLnBvaW50KHBvaW50WzBdLCBwb2ludFsxXSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGluZVN0YXJ0KCkge1xuICAgICAgY2xpcC5wb2ludCA9IHBvaW50TGluZTtcbiAgICAgIGxpbmUubGluZVN0YXJ0KCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGluZUVuZCgpIHtcbiAgICAgIGNsaXAucG9pbnQgPSBwb2ludDtcbiAgICAgIGxpbmUubGluZUVuZCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBvaW50UmluZyhsYW1iZGEsIHBoaSkge1xuICAgICAgcmluZy5wdXNoKFtsYW1iZGEsIHBoaV0pO1xuICAgICAgdmFyIHBvaW50ID0gcm90YXRlKGxhbWJkYSwgcGhpKTtcbiAgICAgIHJpbmdTaW5rLnBvaW50KHBvaW50WzBdLCBwb2ludFsxXSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmluZ1N0YXJ0KCkge1xuICAgICAgcmluZ1NpbmsubGluZVN0YXJ0KCk7XG4gICAgICByaW5nID0gW107XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmluZ0VuZCgpIHtcbiAgICAgIHBvaW50UmluZyhyaW5nWzBdWzBdLCByaW5nWzBdWzFdKTtcbiAgICAgIHJpbmdTaW5rLmxpbmVFbmQoKTtcblxuICAgICAgdmFyIGNsZWFuID0gcmluZ1NpbmsuY2xlYW4oKSxcbiAgICAgICAgICByaW5nU2VnbWVudHMgPSByaW5nQnVmZmVyLnJlc3VsdCgpLFxuICAgICAgICAgIGksIG4gPSByaW5nU2VnbWVudHMubGVuZ3RoLCBtLFxuICAgICAgICAgIHNlZ21lbnQsXG4gICAgICAgICAgcG9pbnQ7XG5cbiAgICAgIHJpbmcucG9wKCk7XG4gICAgICBwb2x5Z29uLnB1c2gocmluZyk7XG4gICAgICByaW5nID0gbnVsbDtcblxuICAgICAgaWYgKCFuKSByZXR1cm47XG5cbiAgICAgIC8vIE5vIGludGVyc2VjdGlvbnMuXG4gICAgICBpZiAoY2xlYW4gJiAxKSB7XG4gICAgICAgIHNlZ21lbnQgPSByaW5nU2VnbWVudHNbMF07XG4gICAgICAgIGlmICgobSA9IHNlZ21lbnQubGVuZ3RoIC0gMSkgPiAwKSB7XG4gICAgICAgICAgaWYgKCFwb2x5Z29uU3RhcnRlZCkgc2luay5wb2x5Z29uU3RhcnQoKSwgcG9seWdvblN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgIHNpbmsubGluZVN0YXJ0KCk7XG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IG07ICsraSkgc2luay5wb2ludCgocG9pbnQgPSBzZWdtZW50W2ldKVswXSwgcG9pbnRbMV0pO1xuICAgICAgICAgIHNpbmsubGluZUVuZCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gUmVqb2luIGNvbm5lY3RlZCBzZWdtZW50cy5cbiAgICAgIC8vIFRPRE8gcmV1c2UgcmluZ0J1ZmZlci5yZWpvaW4oKT9cbiAgICAgIGlmIChuID4gMSAmJiBjbGVhbiAmIDIpIHJpbmdTZWdtZW50cy5wdXNoKHJpbmdTZWdtZW50cy5wb3AoKS5jb25jYXQocmluZ1NlZ21lbnRzLnNoaWZ0KCkpKTtcblxuICAgICAgc2VnbWVudHMucHVzaChyaW5nU2VnbWVudHMuZmlsdGVyKHZhbGlkU2VnbWVudCkpO1xuICAgIH1cblxuICAgIHJldHVybiBjbGlwO1xuICB9O1xufTtcblxuZnVuY3Rpb24gdmFsaWRTZWdtZW50KHNlZ21lbnQpIHtcbiAgcmV0dXJuIHNlZ21lbnQubGVuZ3RoID4gMTtcbn1cblxuLy8gSW50ZXJzZWN0aW9ucyBhcmUgc29ydGVkIGFsb25nIHRoZSBjbGlwIGVkZ2UuIEZvciBib3RoIGFudGltZXJpZGlhbiBjdXR0aW5nXG4vLyBhbmQgY2lyY2xlIGNsaXBwaW5nLCB0aGUgc2FtZSBjb21wYXJpc29uIGlzIHVzZWQuXG5mdW5jdGlvbiBjb21wYXJlSW50ZXJzZWN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuICgoYSA9IGEueClbMF0gPCAwID8gYVsxXSAtIGhhbGZQaSQyIC0gZXBzaWxvbiQyIDogaGFsZlBpJDIgLSBhWzFdKVxuICAgICAgIC0gKChiID0gYi54KVswXSA8IDAgPyBiWzFdIC0gaGFsZlBpJDIgLSBlcHNpbG9uJDIgOiBoYWxmUGkkMiAtIGJbMV0pO1xufVxuXG52YXIgY2xpcEFudGltZXJpZGlhbiA9IGNsaXAoXG4gIGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSxcbiAgY2xpcEFudGltZXJpZGlhbkxpbmUsXG4gIGNsaXBBbnRpbWVyaWRpYW5JbnRlcnBvbGF0ZSxcbiAgWy1waSQzLCAtaGFsZlBpJDJdXG4pO1xuXG4vLyBUYWtlcyBhIGxpbmUgYW5kIGN1dHMgaW50byB2aXNpYmxlIHNlZ21lbnRzLiBSZXR1cm4gdmFsdWVzOiAwIC0gdGhlcmUgd2VyZVxuLy8gaW50ZXJzZWN0aW9ucyBvciB0aGUgbGluZSB3YXMgZW1wdHk7IDEgLSBubyBpbnRlcnNlY3Rpb25zOyAyIC0gdGhlcmUgd2VyZVxuLy8gaW50ZXJzZWN0aW9ucywgYW5kIHRoZSBmaXJzdCBhbmQgbGFzdCBzZWdtZW50cyBzaG91bGQgYmUgcmVqb2luZWQuXG5mdW5jdGlvbiBjbGlwQW50aW1lcmlkaWFuTGluZShzdHJlYW0pIHtcbiAgdmFyIGxhbWJkYTAgPSBOYU4sXG4gICAgICBwaGkwID0gTmFOLFxuICAgICAgc2lnbjAgPSBOYU4sXG4gICAgICBjbGVhbjsgLy8gbm8gaW50ZXJzZWN0aW9uc1xuXG4gIHJldHVybiB7XG4gICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgIGNsZWFuID0gMTtcbiAgICB9LFxuICAgIHBvaW50OiBmdW5jdGlvbihsYW1iZGExLCBwaGkxKSB7XG4gICAgICB2YXIgc2lnbjEgPSBsYW1iZGExID4gMCA/IHBpJDMgOiAtcGkkMyxcbiAgICAgICAgICBkZWx0YSA9IGFicyhsYW1iZGExIC0gbGFtYmRhMCk7XG4gICAgICBpZiAoYWJzKGRlbHRhIC0gcGkkMykgPCBlcHNpbG9uJDIpIHsgLy8gbGluZSBjcm9zc2VzIGEgcG9sZVxuICAgICAgICBzdHJlYW0ucG9pbnQobGFtYmRhMCwgcGhpMCA9IChwaGkwICsgcGhpMSkgLyAyID4gMCA/IGhhbGZQaSQyIDogLWhhbGZQaSQyKTtcbiAgICAgICAgc3RyZWFtLnBvaW50KHNpZ24wLCBwaGkwKTtcbiAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICBzdHJlYW0ucG9pbnQoc2lnbjEsIHBoaTApO1xuICAgICAgICBzdHJlYW0ucG9pbnQobGFtYmRhMSwgcGhpMCk7XG4gICAgICAgIGNsZWFuID0gMDtcbiAgICAgIH0gZWxzZSBpZiAoc2lnbjAgIT09IHNpZ24xICYmIGRlbHRhID49IHBpJDMpIHsgLy8gbGluZSBjcm9zc2VzIGFudGltZXJpZGlhblxuICAgICAgICBpZiAoYWJzKGxhbWJkYTAgLSBzaWduMCkgPCBlcHNpbG9uJDIpIGxhbWJkYTAgLT0gc2lnbjAgKiBlcHNpbG9uJDI7IC8vIGhhbmRsZSBkZWdlbmVyYWNpZXNcbiAgICAgICAgaWYgKGFicyhsYW1iZGExIC0gc2lnbjEpIDwgZXBzaWxvbiQyKSBsYW1iZGExIC09IHNpZ24xICogZXBzaWxvbiQyO1xuICAgICAgICBwaGkwID0gY2xpcEFudGltZXJpZGlhbkludGVyc2VjdChsYW1iZGEwLCBwaGkwLCBsYW1iZGExLCBwaGkxKTtcbiAgICAgICAgc3RyZWFtLnBvaW50KHNpZ24wLCBwaGkwKTtcbiAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICBzdHJlYW0ucG9pbnQoc2lnbjEsIHBoaTApO1xuICAgICAgICBjbGVhbiA9IDA7XG4gICAgICB9XG4gICAgICBzdHJlYW0ucG9pbnQobGFtYmRhMCA9IGxhbWJkYTEsIHBoaTAgPSBwaGkxKTtcbiAgICAgIHNpZ24wID0gc2lnbjE7XG4gICAgfSxcbiAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICBsYW1iZGEwID0gcGhpMCA9IE5hTjtcbiAgICB9LFxuICAgIGNsZWFuOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAyIC0gY2xlYW47IC8vIGlmIGludGVyc2VjdGlvbnMsIHJlam9pbiBmaXJzdCBhbmQgbGFzdCBzZWdtZW50c1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY2xpcEFudGltZXJpZGlhbkludGVyc2VjdChsYW1iZGEwLCBwaGkwLCBsYW1iZGExLCBwaGkxKSB7XG4gIHZhciBjb3NQaGkwLFxuICAgICAgY29zUGhpMSxcbiAgICAgIHNpbkxhbWJkYTBMYW1iZGExID0gc2luJDEobGFtYmRhMCAtIGxhbWJkYTEpO1xuICByZXR1cm4gYWJzKHNpbkxhbWJkYTBMYW1iZGExKSA+IGVwc2lsb24kMlxuICAgICAgPyBhdGFuKChzaW4kMShwaGkwKSAqIChjb3NQaGkxID0gY29zJDEocGhpMSkpICogc2luJDEobGFtYmRhMSlcbiAgICAgICAgICAtIHNpbiQxKHBoaTEpICogKGNvc1BoaTAgPSBjb3MkMShwaGkwKSkgKiBzaW4kMShsYW1iZGEwKSlcbiAgICAgICAgICAvIChjb3NQaGkwICogY29zUGhpMSAqIHNpbkxhbWJkYTBMYW1iZGExKSlcbiAgICAgIDogKHBoaTAgKyBwaGkxKSAvIDI7XG59XG5cbmZ1bmN0aW9uIGNsaXBBbnRpbWVyaWRpYW5JbnRlcnBvbGF0ZShmcm9tLCB0bywgZGlyZWN0aW9uLCBzdHJlYW0pIHtcbiAgdmFyIHBoaTtcbiAgaWYgKGZyb20gPT0gbnVsbCkge1xuICAgIHBoaSA9IGRpcmVjdGlvbiAqIGhhbGZQaSQyO1xuICAgIHN0cmVhbS5wb2ludCgtcGkkMywgcGhpKTtcbiAgICBzdHJlYW0ucG9pbnQoMCwgcGhpKTtcbiAgICBzdHJlYW0ucG9pbnQocGkkMywgcGhpKTtcbiAgICBzdHJlYW0ucG9pbnQocGkkMywgMCk7XG4gICAgc3RyZWFtLnBvaW50KHBpJDMsIC1waGkpO1xuICAgIHN0cmVhbS5wb2ludCgwLCAtcGhpKTtcbiAgICBzdHJlYW0ucG9pbnQoLXBpJDMsIC1waGkpO1xuICAgIHN0cmVhbS5wb2ludCgtcGkkMywgMCk7XG4gICAgc3RyZWFtLnBvaW50KC1waSQzLCBwaGkpO1xuICB9IGVsc2UgaWYgKGFicyhmcm9tWzBdIC0gdG9bMF0pID4gZXBzaWxvbiQyKSB7XG4gICAgdmFyIGxhbWJkYSA9IGZyb21bMF0gPCB0b1swXSA/IHBpJDMgOiAtcGkkMztcbiAgICBwaGkgPSBkaXJlY3Rpb24gKiBsYW1iZGEgLyAyO1xuICAgIHN0cmVhbS5wb2ludCgtbGFtYmRhLCBwaGkpO1xuICAgIHN0cmVhbS5wb2ludCgwLCBwaGkpO1xuICAgIHN0cmVhbS5wb2ludChsYW1iZGEsIHBoaSk7XG4gIH0gZWxzZSB7XG4gICAgc3RyZWFtLnBvaW50KHRvWzBdLCB0b1sxXSk7XG4gIH1cbn1cblxudmFyIGNsaXBDaXJjbGUgPSBmdW5jdGlvbihyYWRpdXMsIGRlbHRhKSB7XG4gIHZhciBjciA9IGNvcyQxKHJhZGl1cyksXG4gICAgICBzbWFsbFJhZGl1cyA9IGNyID4gMCxcbiAgICAgIG5vdEhlbWlzcGhlcmUgPSBhYnMoY3IpID4gZXBzaWxvbiQyOyAvLyBUT0RPIG9wdGltaXNlIGZvciB0aGlzIGNvbW1vbiBjYXNlXG5cbiAgZnVuY3Rpb24gaW50ZXJwb2xhdGUoZnJvbSwgdG8sIGRpcmVjdGlvbiwgc3RyZWFtKSB7XG4gICAgY2lyY2xlU3RyZWFtKHN0cmVhbSwgcmFkaXVzLCBkZWx0YSwgZGlyZWN0aW9uLCBmcm9tLCB0byk7XG4gIH1cblxuICBmdW5jdGlvbiB2aXNpYmxlKGxhbWJkYSwgcGhpKSB7XG4gICAgcmV0dXJuIGNvcyQxKGxhbWJkYSkgKiBjb3MkMShwaGkpID4gY3I7XG4gIH1cblxuICAvLyBUYWtlcyBhIGxpbmUgYW5kIGN1dHMgaW50byB2aXNpYmxlIHNlZ21lbnRzLiBSZXR1cm4gdmFsdWVzIHVzZWQgZm9yIHBvbHlnb25cbiAgLy8gY2xpcHBpbmc6IDAgLSB0aGVyZSB3ZXJlIGludGVyc2VjdGlvbnMgb3IgdGhlIGxpbmUgd2FzIGVtcHR5OyAxIC0gbm9cbiAgLy8gaW50ZXJzZWN0aW9ucyAyIC0gdGhlcmUgd2VyZSBpbnRlcnNlY3Rpb25zLCBhbmQgdGhlIGZpcnN0IGFuZCBsYXN0IHNlZ21lbnRzXG4gIC8vIHNob3VsZCBiZSByZWpvaW5lZC5cbiAgZnVuY3Rpb24gY2xpcExpbmUoc3RyZWFtKSB7XG4gICAgdmFyIHBvaW50MCwgLy8gcHJldmlvdXMgcG9pbnRcbiAgICAgICAgYzAsIC8vIGNvZGUgZm9yIHByZXZpb3VzIHBvaW50XG4gICAgICAgIHYwLCAvLyB2aXNpYmlsaXR5IG9mIHByZXZpb3VzIHBvaW50XG4gICAgICAgIHYwMCwgLy8gdmlzaWJpbGl0eSBvZiBmaXJzdCBwb2ludFxuICAgICAgICBjbGVhbjsgLy8gbm8gaW50ZXJzZWN0aW9uc1xuICAgIHJldHVybiB7XG4gICAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2MDAgPSB2MCA9IGZhbHNlO1xuICAgICAgICBjbGVhbiA9IDE7XG4gICAgICB9LFxuICAgICAgcG9pbnQ6IGZ1bmN0aW9uKGxhbWJkYSwgcGhpKSB7XG4gICAgICAgIHZhciBwb2ludDEgPSBbbGFtYmRhLCBwaGldLFxuICAgICAgICAgICAgcG9pbnQyLFxuICAgICAgICAgICAgdiA9IHZpc2libGUobGFtYmRhLCBwaGkpLFxuICAgICAgICAgICAgYyA9IHNtYWxsUmFkaXVzXG4gICAgICAgICAgICAgID8gdiA/IDAgOiBjb2RlKGxhbWJkYSwgcGhpKVxuICAgICAgICAgICAgICA6IHYgPyBjb2RlKGxhbWJkYSArIChsYW1iZGEgPCAwID8gcGkkMyA6IC1waSQzKSwgcGhpKSA6IDA7XG4gICAgICAgIGlmICghcG9pbnQwICYmICh2MDAgPSB2MCA9IHYpKSBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgIC8vIEhhbmRsZSBkZWdlbmVyYWNpZXMuXG4gICAgICAgIC8vIFRPRE8gaWdub3JlIGlmIG5vdCBjbGlwcGluZyBwb2x5Z29ucy5cbiAgICAgICAgaWYgKHYgIT09IHYwKSB7XG4gICAgICAgICAgcG9pbnQyID0gaW50ZXJzZWN0KHBvaW50MCwgcG9pbnQxKTtcbiAgICAgICAgICBpZiAoIXBvaW50MiB8fCBwb2ludEVxdWFsKHBvaW50MCwgcG9pbnQyKSB8fCBwb2ludEVxdWFsKHBvaW50MSwgcG9pbnQyKSkge1xuICAgICAgICAgICAgcG9pbnQxWzBdICs9IGVwc2lsb24kMjtcbiAgICAgICAgICAgIHBvaW50MVsxXSArPSBlcHNpbG9uJDI7XG4gICAgICAgICAgICB2ID0gdmlzaWJsZShwb2ludDFbMF0sIHBvaW50MVsxXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh2ICE9PSB2MCkge1xuICAgICAgICAgIGNsZWFuID0gMDtcbiAgICAgICAgICBpZiAodikge1xuICAgICAgICAgICAgLy8gb3V0c2lkZSBnb2luZyBpblxuICAgICAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgcG9pbnQyID0gaW50ZXJzZWN0KHBvaW50MSwgcG9pbnQwKTtcbiAgICAgICAgICAgIHN0cmVhbS5wb2ludChwb2ludDJbMF0sIHBvaW50MlsxXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGluc2lkZSBnb2luZyBvdXRcbiAgICAgICAgICAgIHBvaW50MiA9IGludGVyc2VjdChwb2ludDAsIHBvaW50MSk7XG4gICAgICAgICAgICBzdHJlYW0ucG9pbnQocG9pbnQyWzBdLCBwb2ludDJbMV0pO1xuICAgICAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcG9pbnQwID0gcG9pbnQyO1xuICAgICAgICB9IGVsc2UgaWYgKG5vdEhlbWlzcGhlcmUgJiYgcG9pbnQwICYmIHNtYWxsUmFkaXVzIF4gdikge1xuICAgICAgICAgIHZhciB0O1xuICAgICAgICAgIC8vIElmIHRoZSBjb2RlcyBmb3IgdHdvIHBvaW50cyBhcmUgZGlmZmVyZW50LCBvciBhcmUgYm90aCB6ZXJvLFxuICAgICAgICAgIC8vIGFuZCB0aGVyZSB0aGlzIHNlZ21lbnQgaW50ZXJzZWN0cyB3aXRoIHRoZSBzbWFsbCBjaXJjbGUuXG4gICAgICAgICAgaWYgKCEoYyAmIGMwKSAmJiAodCA9IGludGVyc2VjdChwb2ludDEsIHBvaW50MCwgdHJ1ZSkpKSB7XG4gICAgICAgICAgICBjbGVhbiA9IDA7XG4gICAgICAgICAgICBpZiAoc21hbGxSYWRpdXMpIHtcbiAgICAgICAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgICBzdHJlYW0ucG9pbnQodFswXVswXSwgdFswXVsxXSk7XG4gICAgICAgICAgICAgIHN0cmVhbS5wb2ludCh0WzFdWzBdLCB0WzFdWzFdKTtcbiAgICAgICAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHN0cmVhbS5wb2ludCh0WzFdWzBdLCB0WzFdWzFdKTtcbiAgICAgICAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgICBzdHJlYW0ucG9pbnQodFswXVswXSwgdFswXVsxXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh2ICYmICghcG9pbnQwIHx8ICFwb2ludEVxdWFsKHBvaW50MCwgcG9pbnQxKSkpIHtcbiAgICAgICAgICBzdHJlYW0ucG9pbnQocG9pbnQxWzBdLCBwb2ludDFbMV0pO1xuICAgICAgICB9XG4gICAgICAgIHBvaW50MCA9IHBvaW50MSwgdjAgPSB2LCBjMCA9IGM7XG4gICAgICB9LFxuICAgICAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh2MCkgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgcG9pbnQwID0gbnVsbDtcbiAgICAgIH0sXG4gICAgICAvLyBSZWpvaW4gZmlyc3QgYW5kIGxhc3Qgc2VnbWVudHMgaWYgdGhlcmUgd2VyZSBpbnRlcnNlY3Rpb25zIGFuZCB0aGUgZmlyc3RcbiAgICAgIC8vIGFuZCBsYXN0IHBvaW50cyB3ZXJlIHZpc2libGUuXG4gICAgICBjbGVhbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBjbGVhbiB8ICgodjAwICYmIHYwKSA8PCAxKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gSW50ZXJzZWN0cyB0aGUgZ3JlYXQgY2lyY2xlIGJldHdlZW4gYSBhbmQgYiB3aXRoIHRoZSBjbGlwIGNpcmNsZS5cbiAgZnVuY3Rpb24gaW50ZXJzZWN0KGEsIGIsIHR3bykge1xuICAgIHZhciBwYSA9IGNhcnRlc2lhbihhKSxcbiAgICAgICAgcGIgPSBjYXJ0ZXNpYW4oYik7XG5cbiAgICAvLyBXZSBoYXZlIHR3byBwbGFuZXMsIG4xLnAgPSBkMSBhbmQgbjIucCA9IGQyLlxuICAgIC8vIEZpbmQgaW50ZXJzZWN0aW9uIGxpbmUgcCh0KSA9IGMxIG4xICsgYzIgbjIgKyB0IChuMSDiqK8gbjIpLlxuICAgIHZhciBuMSA9IFsxLCAwLCAwXSwgLy8gbm9ybWFsXG4gICAgICAgIG4yID0gY2FydGVzaWFuQ3Jvc3MocGEsIHBiKSxcbiAgICAgICAgbjJuMiA9IGNhcnRlc2lhbkRvdChuMiwgbjIpLFxuICAgICAgICBuMW4yID0gbjJbMF0sIC8vIGNhcnRlc2lhbkRvdChuMSwgbjIpLFxuICAgICAgICBkZXRlcm1pbmFudCA9IG4ybjIgLSBuMW4yICogbjFuMjtcblxuICAgIC8vIFR3byBwb2xhciBwb2ludHMuXG4gICAgaWYgKCFkZXRlcm1pbmFudCkgcmV0dXJuICF0d28gJiYgYTtcblxuICAgIHZhciBjMSA9ICBjciAqIG4ybjIgLyBkZXRlcm1pbmFudCxcbiAgICAgICAgYzIgPSAtY3IgKiBuMW4yIC8gZGV0ZXJtaW5hbnQsXG4gICAgICAgIG4xeG4yID0gY2FydGVzaWFuQ3Jvc3MobjEsIG4yKSxcbiAgICAgICAgQSA9IGNhcnRlc2lhblNjYWxlKG4xLCBjMSksXG4gICAgICAgIEIgPSBjYXJ0ZXNpYW5TY2FsZShuMiwgYzIpO1xuICAgIGNhcnRlc2lhbkFkZEluUGxhY2UoQSwgQik7XG5cbiAgICAvLyBTb2x2ZSB8cCh0KXxeMiA9IDEuXG4gICAgdmFyIHUgPSBuMXhuMixcbiAgICAgICAgdyA9IGNhcnRlc2lhbkRvdChBLCB1KSxcbiAgICAgICAgdXUgPSBjYXJ0ZXNpYW5Eb3QodSwgdSksXG4gICAgICAgIHQyID0gdyAqIHcgLSB1dSAqIChjYXJ0ZXNpYW5Eb3QoQSwgQSkgLSAxKTtcblxuICAgIGlmICh0MiA8IDApIHJldHVybjtcblxuICAgIHZhciB0ID0gc3FydCh0MiksXG4gICAgICAgIHEgPSBjYXJ0ZXNpYW5TY2FsZSh1LCAoLXcgLSB0KSAvIHV1KTtcbiAgICBjYXJ0ZXNpYW5BZGRJblBsYWNlKHEsIEEpO1xuICAgIHEgPSBzcGhlcmljYWwocSk7XG5cbiAgICBpZiAoIXR3bykgcmV0dXJuIHE7XG5cbiAgICAvLyBUd28gaW50ZXJzZWN0aW9uIHBvaW50cy5cbiAgICB2YXIgbGFtYmRhMCA9IGFbMF0sXG4gICAgICAgIGxhbWJkYTEgPSBiWzBdLFxuICAgICAgICBwaGkwID0gYVsxXSxcbiAgICAgICAgcGhpMSA9IGJbMV0sXG4gICAgICAgIHo7XG5cbiAgICBpZiAobGFtYmRhMSA8IGxhbWJkYTApIHogPSBsYW1iZGEwLCBsYW1iZGEwID0gbGFtYmRhMSwgbGFtYmRhMSA9IHo7XG5cbiAgICB2YXIgZGVsdGEgPSBsYW1iZGExIC0gbGFtYmRhMCxcbiAgICAgICAgcG9sYXIgPSBhYnMoZGVsdGEgLSBwaSQzKSA8IGVwc2lsb24kMixcbiAgICAgICAgbWVyaWRpYW4gPSBwb2xhciB8fCBkZWx0YSA8IGVwc2lsb24kMjtcblxuICAgIGlmICghcG9sYXIgJiYgcGhpMSA8IHBoaTApIHogPSBwaGkwLCBwaGkwID0gcGhpMSwgcGhpMSA9IHo7XG5cbiAgICAvLyBDaGVjayB0aGF0IHRoZSBmaXJzdCBwb2ludCBpcyBiZXR3ZWVuIGEgYW5kIGIuXG4gICAgaWYgKG1lcmlkaWFuXG4gICAgICAgID8gcG9sYXJcbiAgICAgICAgICA/IHBoaTAgKyBwaGkxID4gMCBeIHFbMV0gPCAoYWJzKHFbMF0gLSBsYW1iZGEwKSA8IGVwc2lsb24kMiA/IHBoaTAgOiBwaGkxKVxuICAgICAgICAgIDogcGhpMCA8PSBxWzFdICYmIHFbMV0gPD0gcGhpMVxuICAgICAgICA6IGRlbHRhID4gcGkkMyBeIChsYW1iZGEwIDw9IHFbMF0gJiYgcVswXSA8PSBsYW1iZGExKSkge1xuICAgICAgdmFyIHExID0gY2FydGVzaWFuU2NhbGUodSwgKC13ICsgdCkgLyB1dSk7XG4gICAgICBjYXJ0ZXNpYW5BZGRJblBsYWNlKHExLCBBKTtcbiAgICAgIHJldHVybiBbcSwgc3BoZXJpY2FsKHExKV07XG4gICAgfVxuICB9XG5cbiAgLy8gR2VuZXJhdGVzIGEgNC1iaXQgdmVjdG9yIHJlcHJlc2VudGluZyB0aGUgbG9jYXRpb24gb2YgYSBwb2ludCByZWxhdGl2ZSB0b1xuICAvLyB0aGUgc21hbGwgY2lyY2xlJ3MgYm91bmRpbmcgYm94LlxuICBmdW5jdGlvbiBjb2RlKGxhbWJkYSwgcGhpKSB7XG4gICAgdmFyIHIgPSBzbWFsbFJhZGl1cyA/IHJhZGl1cyA6IHBpJDMgLSByYWRpdXMsXG4gICAgICAgIGNvZGUgPSAwO1xuICAgIGlmIChsYW1iZGEgPCAtcikgY29kZSB8PSAxOyAvLyBsZWZ0XG4gICAgZWxzZSBpZiAobGFtYmRhID4gcikgY29kZSB8PSAyOyAvLyByaWdodFxuICAgIGlmIChwaGkgPCAtcikgY29kZSB8PSA0OyAvLyBiZWxvd1xuICAgIGVsc2UgaWYgKHBoaSA+IHIpIGNvZGUgfD0gODsgLy8gYWJvdmVcbiAgICByZXR1cm4gY29kZTtcbiAgfVxuXG4gIHJldHVybiBjbGlwKHZpc2libGUsIGNsaXBMaW5lLCBpbnRlcnBvbGF0ZSwgc21hbGxSYWRpdXMgPyBbMCwgLXJhZGl1c10gOiBbLXBpJDMsIHJhZGl1cyAtIHBpJDNdKTtcbn07XG5cbnZhciB0cmFuc2Zvcm0gPSBmdW5jdGlvbihtZXRob2RzKSB7XG4gIHJldHVybiB7XG4gICAgc3RyZWFtOiB0cmFuc2Zvcm1lcihtZXRob2RzKVxuICB9O1xufTtcblxuZnVuY3Rpb24gdHJhbnNmb3JtZXIobWV0aG9kcykge1xuICByZXR1cm4gZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgdmFyIHMgPSBuZXcgVHJhbnNmb3JtU3RyZWFtO1xuICAgIGZvciAodmFyIGtleSBpbiBtZXRob2RzKSBzW2tleV0gPSBtZXRob2RzW2tleV07XG4gICAgcy5zdHJlYW0gPSBzdHJlYW07XG4gICAgcmV0dXJuIHM7XG4gIH07XG59XG5cbmZ1bmN0aW9uIFRyYW5zZm9ybVN0cmVhbSgpIHt9XG5cblRyYW5zZm9ybVN0cmVhbS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBUcmFuc2Zvcm1TdHJlYW0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7IHRoaXMuc3RyZWFtLnBvaW50KHgsIHkpOyB9LFxuICBzcGhlcmU6IGZ1bmN0aW9uKCkgeyB0aGlzLnN0cmVhbS5zcGhlcmUoKTsgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHsgdGhpcy5zdHJlYW0ubGluZVN0YXJ0KCk7IH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkgeyB0aGlzLnN0cmVhbS5saW5lRW5kKCk7IH0sXG4gIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7IHRoaXMuc3RyZWFtLnBvbHlnb25TdGFydCgpOyB9LFxuICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHsgdGhpcy5zdHJlYW0ucG9seWdvbkVuZCgpOyB9XG59O1xuXG5mdW5jdGlvbiBmaXRFeHRlbnQocHJvamVjdGlvbiwgZXh0ZW50LCBvYmplY3QpIHtcbiAgdmFyIHcgPSBleHRlbnRbMV1bMF0gLSBleHRlbnRbMF1bMF0sXG4gICAgICBoID0gZXh0ZW50WzFdWzFdIC0gZXh0ZW50WzBdWzFdLFxuICAgICAgY2xpcCA9IHByb2plY3Rpb24uY2xpcEV4dGVudCAmJiBwcm9qZWN0aW9uLmNsaXBFeHRlbnQoKTtcblxuICBwcm9qZWN0aW9uXG4gICAgICAuc2NhbGUoMTUwKVxuICAgICAgLnRyYW5zbGF0ZShbMCwgMF0pO1xuXG4gIGlmIChjbGlwICE9IG51bGwpIHByb2plY3Rpb24uY2xpcEV4dGVudChudWxsKTtcblxuICBnZW9TdHJlYW0ob2JqZWN0LCBwcm9qZWN0aW9uLnN0cmVhbShib3VuZHNTdHJlYW0kMSkpO1xuXG4gIHZhciBiID0gYm91bmRzU3RyZWFtJDEucmVzdWx0KCksXG4gICAgICBrID0gTWF0aC5taW4odyAvIChiWzFdWzBdIC0gYlswXVswXSksIGggLyAoYlsxXVsxXSAtIGJbMF1bMV0pKSxcbiAgICAgIHggPSArZXh0ZW50WzBdWzBdICsgKHcgLSBrICogKGJbMV1bMF0gKyBiWzBdWzBdKSkgLyAyLFxuICAgICAgeSA9ICtleHRlbnRbMF1bMV0gKyAoaCAtIGsgKiAoYlsxXVsxXSArIGJbMF1bMV0pKSAvIDI7XG5cbiAgaWYgKGNsaXAgIT0gbnVsbCkgcHJvamVjdGlvbi5jbGlwRXh0ZW50KGNsaXApO1xuXG4gIHJldHVybiBwcm9qZWN0aW9uXG4gICAgICAuc2NhbGUoayAqIDE1MClcbiAgICAgIC50cmFuc2xhdGUoW3gsIHldKTtcbn1cblxuZnVuY3Rpb24gZml0U2l6ZShwcm9qZWN0aW9uLCBzaXplLCBvYmplY3QpIHtcbiAgcmV0dXJuIGZpdEV4dGVudChwcm9qZWN0aW9uLCBbWzAsIDBdLCBzaXplXSwgb2JqZWN0KTtcbn1cblxudmFyIG1heERlcHRoID0gMTY7XG52YXIgY29zTWluRGlzdGFuY2UgPSBjb3MkMSgzMCAqIHJhZGlhbnMpOyAvLyBjb3MobWluaW11bSBhbmd1bGFyIGRpc3RhbmNlKVxuXG52YXIgcmVzYW1wbGUgPSBmdW5jdGlvbihwcm9qZWN0LCBkZWx0YTIpIHtcbiAgcmV0dXJuICtkZWx0YTIgPyByZXNhbXBsZSQxKHByb2plY3QsIGRlbHRhMikgOiByZXNhbXBsZU5vbmUocHJvamVjdCk7XG59O1xuXG5mdW5jdGlvbiByZXNhbXBsZU5vbmUocHJvamVjdCkge1xuICByZXR1cm4gdHJhbnNmb3JtZXIoe1xuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICB4ID0gcHJvamVjdCh4LCB5KTtcbiAgICAgIHRoaXMuc3RyZWFtLnBvaW50KHhbMF0sIHhbMV0pO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlc2FtcGxlJDEocHJvamVjdCwgZGVsdGEyKSB7XG5cbiAgZnVuY3Rpb24gcmVzYW1wbGVMaW5lVG8oeDAsIHkwLCBsYW1iZGEwLCBhMCwgYjAsIGMwLCB4MSwgeTEsIGxhbWJkYTEsIGExLCBiMSwgYzEsIGRlcHRoLCBzdHJlYW0pIHtcbiAgICB2YXIgZHggPSB4MSAtIHgwLFxuICAgICAgICBkeSA9IHkxIC0geTAsXG4gICAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgaWYgKGQyID4gNCAqIGRlbHRhMiAmJiBkZXB0aC0tKSB7XG4gICAgICB2YXIgYSA9IGEwICsgYTEsXG4gICAgICAgICAgYiA9IGIwICsgYjEsXG4gICAgICAgICAgYyA9IGMwICsgYzEsXG4gICAgICAgICAgbSA9IHNxcnQoYSAqIGEgKyBiICogYiArIGMgKiBjKSxcbiAgICAgICAgICBwaGkyID0gYXNpbihjIC89IG0pLFxuICAgICAgICAgIGxhbWJkYTIgPSBhYnMoYWJzKGMpIC0gMSkgPCBlcHNpbG9uJDIgfHwgYWJzKGxhbWJkYTAgLSBsYW1iZGExKSA8IGVwc2lsb24kMiA/IChsYW1iZGEwICsgbGFtYmRhMSkgLyAyIDogYXRhbjIoYiwgYSksXG4gICAgICAgICAgcCA9IHByb2plY3QobGFtYmRhMiwgcGhpMiksXG4gICAgICAgICAgeDIgPSBwWzBdLFxuICAgICAgICAgIHkyID0gcFsxXSxcbiAgICAgICAgICBkeDIgPSB4MiAtIHgwLFxuICAgICAgICAgIGR5MiA9IHkyIC0geTAsXG4gICAgICAgICAgZHogPSBkeSAqIGR4MiAtIGR4ICogZHkyO1xuICAgICAgaWYgKGR6ICogZHogLyBkMiA+IGRlbHRhMiAvLyBwZXJwZW5kaWN1bGFyIHByb2plY3RlZCBkaXN0YW5jZVxuICAgICAgICAgIHx8IGFicygoZHggKiBkeDIgKyBkeSAqIGR5MikgLyBkMiAtIDAuNSkgPiAwLjMgLy8gbWlkcG9pbnQgY2xvc2UgdG8gYW4gZW5kXG4gICAgICAgICAgfHwgYTAgKiBhMSArIGIwICogYjEgKyBjMCAqIGMxIDwgY29zTWluRGlzdGFuY2UpIHsgLy8gYW5ndWxhciBkaXN0YW5jZVxuICAgICAgICByZXNhbXBsZUxpbmVUbyh4MCwgeTAsIGxhbWJkYTAsIGEwLCBiMCwgYzAsIHgyLCB5MiwgbGFtYmRhMiwgYSAvPSBtLCBiIC89IG0sIGMsIGRlcHRoLCBzdHJlYW0pO1xuICAgICAgICBzdHJlYW0ucG9pbnQoeDIsIHkyKTtcbiAgICAgICAgcmVzYW1wbGVMaW5lVG8oeDIsIHkyLCBsYW1iZGEyLCBhLCBiLCBjLCB4MSwgeTEsIGxhbWJkYTEsIGExLCBiMSwgYzEsIGRlcHRoLCBzdHJlYW0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgdmFyIGxhbWJkYTAwLCB4MDAsIHkwMCwgYTAwLCBiMDAsIGMwMCwgLy8gZmlyc3QgcG9pbnRcbiAgICAgICAgbGFtYmRhMCwgeDAsIHkwLCBhMCwgYjAsIGMwOyAvLyBwcmV2aW91cyBwb2ludFxuXG4gICAgdmFyIHJlc2FtcGxlU3RyZWFtID0ge1xuICAgICAgcG9pbnQ6IHBvaW50LFxuICAgICAgbGluZVN0YXJ0OiBsaW5lU3RhcnQsXG4gICAgICBsaW5lRW5kOiBsaW5lRW5kLFxuICAgICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHsgc3RyZWFtLnBvbHlnb25TdGFydCgpOyByZXNhbXBsZVN0cmVhbS5saW5lU3RhcnQgPSByaW5nU3RhcnQ7IH0sXG4gICAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHsgc3RyZWFtLnBvbHlnb25FbmQoKTsgcmVzYW1wbGVTdHJlYW0ubGluZVN0YXJ0ID0gbGluZVN0YXJ0OyB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHBvaW50KHgsIHkpIHtcbiAgICAgIHggPSBwcm9qZWN0KHgsIHkpO1xuICAgICAgc3RyZWFtLnBvaW50KHhbMF0sIHhbMV0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpbmVTdGFydCgpIHtcbiAgICAgIHgwID0gTmFOO1xuICAgICAgcmVzYW1wbGVTdHJlYW0ucG9pbnQgPSBsaW5lUG9pbnQ7XG4gICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGluZVBvaW50KGxhbWJkYSwgcGhpKSB7XG4gICAgICB2YXIgYyA9IGNhcnRlc2lhbihbbGFtYmRhLCBwaGldKSwgcCA9IHByb2plY3QobGFtYmRhLCBwaGkpO1xuICAgICAgcmVzYW1wbGVMaW5lVG8oeDAsIHkwLCBsYW1iZGEwLCBhMCwgYjAsIGMwLCB4MCA9IHBbMF0sIHkwID0gcFsxXSwgbGFtYmRhMCA9IGxhbWJkYSwgYTAgPSBjWzBdLCBiMCA9IGNbMV0sIGMwID0gY1syXSwgbWF4RGVwdGgsIHN0cmVhbSk7XG4gICAgICBzdHJlYW0ucG9pbnQoeDAsIHkwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaW5lRW5kKCkge1xuICAgICAgcmVzYW1wbGVTdHJlYW0ucG9pbnQgPSBwb2ludDtcbiAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmluZ1N0YXJ0KCkge1xuICAgICAgbGluZVN0YXJ0KCk7XG4gICAgICByZXNhbXBsZVN0cmVhbS5wb2ludCA9IHJpbmdQb2ludDtcbiAgICAgIHJlc2FtcGxlU3RyZWFtLmxpbmVFbmQgPSByaW5nRW5kO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJpbmdQb2ludChsYW1iZGEsIHBoaSkge1xuICAgICAgbGluZVBvaW50KGxhbWJkYTAwID0gbGFtYmRhLCBwaGkpLCB4MDAgPSB4MCwgeTAwID0geTAsIGEwMCA9IGEwLCBiMDAgPSBiMCwgYzAwID0gYzA7XG4gICAgICByZXNhbXBsZVN0cmVhbS5wb2ludCA9IGxpbmVQb2ludDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByaW5nRW5kKCkge1xuICAgICAgcmVzYW1wbGVMaW5lVG8oeDAsIHkwLCBsYW1iZGEwLCBhMCwgYjAsIGMwLCB4MDAsIHkwMCwgbGFtYmRhMDAsIGEwMCwgYjAwLCBjMDAsIG1heERlcHRoLCBzdHJlYW0pO1xuICAgICAgcmVzYW1wbGVTdHJlYW0ubGluZUVuZCA9IGxpbmVFbmQ7XG4gICAgICBsaW5lRW5kKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc2FtcGxlU3RyZWFtO1xuICB9O1xufVxuXG52YXIgdHJhbnNmb3JtUmFkaWFucyA9IHRyYW5zZm9ybWVyKHtcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB0aGlzLnN0cmVhbS5wb2ludCh4ICogcmFkaWFucywgeSAqIHJhZGlhbnMpO1xuICB9XG59KTtcblxuZnVuY3Rpb24gcHJvamVjdGlvbihwcm9qZWN0KSB7XG4gIHJldHVybiBwcm9qZWN0aW9uTXV0YXRvcihmdW5jdGlvbigpIHsgcmV0dXJuIHByb2plY3Q7IH0pKCk7XG59XG5cbmZ1bmN0aW9uIHByb2plY3Rpb25NdXRhdG9yKHByb2plY3RBdCkge1xuICB2YXIgcHJvamVjdCxcbiAgICAgIGsgPSAxNTAsIC8vIHNjYWxlXG4gICAgICB4ID0gNDgwLCB5ID0gMjUwLCAvLyB0cmFuc2xhdGVcbiAgICAgIGR4LCBkeSwgbGFtYmRhID0gMCwgcGhpID0gMCwgLy8gY2VudGVyXG4gICAgICBkZWx0YUxhbWJkYSA9IDAsIGRlbHRhUGhpID0gMCwgZGVsdGFHYW1tYSA9IDAsIHJvdGF0ZSwgcHJvamVjdFJvdGF0ZSwgLy8gcm90YXRlXG4gICAgICB0aGV0YSA9IG51bGwsIHByZWNsaXAgPSBjbGlwQW50aW1lcmlkaWFuLCAvLyBjbGlwIGFuZ2xlXG4gICAgICB4MCA9IG51bGwsIHkwLCB4MSwgeTEsIHBvc3RjbGlwID0gaWRlbnRpdHkkNCwgLy8gY2xpcCBleHRlbnRcbiAgICAgIGRlbHRhMiA9IDAuNSwgcHJvamVjdFJlc2FtcGxlID0gcmVzYW1wbGUocHJvamVjdFRyYW5zZm9ybSwgZGVsdGEyKSwgLy8gcHJlY2lzaW9uXG4gICAgICBjYWNoZSxcbiAgICAgIGNhY2hlU3RyZWFtO1xuXG4gIGZ1bmN0aW9uIHByb2plY3Rpb24ocG9pbnQpIHtcbiAgICBwb2ludCA9IHByb2plY3RSb3RhdGUocG9pbnRbMF0gKiByYWRpYW5zLCBwb2ludFsxXSAqIHJhZGlhbnMpO1xuICAgIHJldHVybiBbcG9pbnRbMF0gKiBrICsgZHgsIGR5IC0gcG9pbnRbMV0gKiBrXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludmVydChwb2ludCkge1xuICAgIHBvaW50ID0gcHJvamVjdFJvdGF0ZS5pbnZlcnQoKHBvaW50WzBdIC0gZHgpIC8gaywgKGR5IC0gcG9pbnRbMV0pIC8gayk7XG4gICAgcmV0dXJuIHBvaW50ICYmIFtwb2ludFswXSAqIGRlZ3JlZXMkMSwgcG9pbnRbMV0gKiBkZWdyZWVzJDFdO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJvamVjdFRyYW5zZm9ybSh4LCB5KSB7XG4gICAgcmV0dXJuIHggPSBwcm9qZWN0KHgsIHkpLCBbeFswXSAqIGsgKyBkeCwgZHkgLSB4WzFdICoga107XG4gIH1cblxuICBwcm9qZWN0aW9uLnN0cmVhbSA9IGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgIHJldHVybiBjYWNoZSAmJiBjYWNoZVN0cmVhbSA9PT0gc3RyZWFtID8gY2FjaGUgOiBjYWNoZSA9IHRyYW5zZm9ybVJhZGlhbnMocHJlY2xpcChyb3RhdGUsIHByb2plY3RSZXNhbXBsZShwb3N0Y2xpcChjYWNoZVN0cmVhbSA9IHN0cmVhbSkpKSk7XG4gIH07XG5cbiAgcHJvamVjdGlvbi5jbGlwQW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocHJlY2xpcCA9ICtfID8gY2xpcENpcmNsZSh0aGV0YSA9IF8gKiByYWRpYW5zLCA2ICogcmFkaWFucykgOiAodGhldGEgPSBudWxsLCBjbGlwQW50aW1lcmlkaWFuKSwgcmVzZXQoKSkgOiB0aGV0YSAqIGRlZ3JlZXMkMTtcbiAgfTtcblxuICBwcm9qZWN0aW9uLmNsaXBFeHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocG9zdGNsaXAgPSBfID09IG51bGwgPyAoeDAgPSB5MCA9IHgxID0geTEgPSBudWxsLCBpZGVudGl0eSQ0KSA6IGNsaXBFeHRlbnQoeDAgPSArX1swXVswXSwgeTAgPSArX1swXVsxXSwgeDEgPSArX1sxXVswXSwgeTEgPSArX1sxXVsxXSksIHJlc2V0KCkpIDogeDAgPT0gbnVsbCA/IG51bGwgOiBbW3gwLCB5MF0sIFt4MSwgeTFdXTtcbiAgfTtcblxuICBwcm9qZWN0aW9uLnNjYWxlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGsgPSArXywgcmVjZW50ZXIoKSkgOiBrO1xuICB9O1xuXG4gIHByb2plY3Rpb24udHJhbnNsYXRlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHggPSArX1swXSwgeSA9ICtfWzFdLCByZWNlbnRlcigpKSA6IFt4LCB5XTtcbiAgfTtcblxuICBwcm9qZWN0aW9uLmNlbnRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChsYW1iZGEgPSBfWzBdICUgMzYwICogcmFkaWFucywgcGhpID0gX1sxXSAlIDM2MCAqIHJhZGlhbnMsIHJlY2VudGVyKCkpIDogW2xhbWJkYSAqIGRlZ3JlZXMkMSwgcGhpICogZGVncmVlcyQxXTtcbiAgfTtcblxuICBwcm9qZWN0aW9uLnJvdGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkZWx0YUxhbWJkYSA9IF9bMF0gJSAzNjAgKiByYWRpYW5zLCBkZWx0YVBoaSA9IF9bMV0gJSAzNjAgKiByYWRpYW5zLCBkZWx0YUdhbW1hID0gXy5sZW5ndGggPiAyID8gX1syXSAlIDM2MCAqIHJhZGlhbnMgOiAwLCByZWNlbnRlcigpKSA6IFtkZWx0YUxhbWJkYSAqIGRlZ3JlZXMkMSwgZGVsdGFQaGkgKiBkZWdyZWVzJDEsIGRlbHRhR2FtbWEgKiBkZWdyZWVzJDFdO1xuICB9O1xuXG4gIHByb2plY3Rpb24ucHJlY2lzaW9uID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHByb2plY3RSZXNhbXBsZSA9IHJlc2FtcGxlKHByb2plY3RUcmFuc2Zvcm0sIGRlbHRhMiA9IF8gKiBfKSwgcmVzZXQoKSkgOiBzcXJ0KGRlbHRhMik7XG4gIH07XG5cbiAgcHJvamVjdGlvbi5maXRFeHRlbnQgPSBmdW5jdGlvbihleHRlbnQsIG9iamVjdCkge1xuICAgIHJldHVybiBmaXRFeHRlbnQocHJvamVjdGlvbiwgZXh0ZW50LCBvYmplY3QpO1xuICB9O1xuXG4gIHByb2plY3Rpb24uZml0U2l6ZSA9IGZ1bmN0aW9uKHNpemUsIG9iamVjdCkge1xuICAgIHJldHVybiBmaXRTaXplKHByb2plY3Rpb24sIHNpemUsIG9iamVjdCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gcmVjZW50ZXIoKSB7XG4gICAgcHJvamVjdFJvdGF0ZSA9IGNvbXBvc2Uocm90YXRlID0gcm90YXRlUmFkaWFucyhkZWx0YUxhbWJkYSwgZGVsdGFQaGksIGRlbHRhR2FtbWEpLCBwcm9qZWN0KTtcbiAgICB2YXIgY2VudGVyID0gcHJvamVjdChsYW1iZGEsIHBoaSk7XG4gICAgZHggPSB4IC0gY2VudGVyWzBdICogaztcbiAgICBkeSA9IHkgKyBjZW50ZXJbMV0gKiBrO1xuICAgIHJldHVybiByZXNldCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgY2FjaGUgPSBjYWNoZVN0cmVhbSA9IG51bGw7XG4gICAgcmV0dXJuIHByb2plY3Rpb247XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcHJvamVjdCA9IHByb2plY3RBdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHByb2plY3Rpb24uaW52ZXJ0ID0gcHJvamVjdC5pbnZlcnQgJiYgaW52ZXJ0O1xuICAgIHJldHVybiByZWNlbnRlcigpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjb25pY1Byb2plY3Rpb24ocHJvamVjdEF0KSB7XG4gIHZhciBwaGkwID0gMCxcbiAgICAgIHBoaTEgPSBwaSQzIC8gMyxcbiAgICAgIG0gPSBwcm9qZWN0aW9uTXV0YXRvcihwcm9qZWN0QXQpLFxuICAgICAgcCA9IG0ocGhpMCwgcGhpMSk7XG5cbiAgcC5wYXJhbGxlbHMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBtKHBoaTAgPSBfWzBdICogcmFkaWFucywgcGhpMSA9IF9bMV0gKiByYWRpYW5zKSA6IFtwaGkwICogZGVncmVlcyQxLCBwaGkxICogZGVncmVlcyQxXTtcbiAgfTtcblxuICByZXR1cm4gcDtcbn1cblxuZnVuY3Rpb24gY3lsaW5kcmljYWxFcXVhbEFyZWFSYXcocGhpMCkge1xuICB2YXIgY29zUGhpMCA9IGNvcyQxKHBoaTApO1xuXG4gIGZ1bmN0aW9uIGZvcndhcmQobGFtYmRhLCBwaGkpIHtcbiAgICByZXR1cm4gW2xhbWJkYSAqIGNvc1BoaTAsIHNpbiQxKHBoaSkgLyBjb3NQaGkwXTtcbiAgfVxuXG4gIGZvcndhcmQuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgIHJldHVybiBbeCAvIGNvc1BoaTAsIGFzaW4oeSAqIGNvc1BoaTApXTtcbiAgfTtcblxuICByZXR1cm4gZm9yd2FyZDtcbn1cblxuZnVuY3Rpb24gY29uaWNFcXVhbEFyZWFSYXcoeTAsIHkxKSB7XG4gIHZhciBzeTAgPSBzaW4kMSh5MCksIG4gPSAoc3kwICsgc2luJDEoeTEpKSAvIDI7XG5cbiAgLy8gQXJlIHRoZSBwYXJhbGxlbHMgc3ltbWV0cmljYWwgYXJvdW5kIHRoZSBFcXVhdG9yP1xuICBpZiAoYWJzKG4pIDwgZXBzaWxvbiQyKSByZXR1cm4gY3lsaW5kcmljYWxFcXVhbEFyZWFSYXcoeTApO1xuXG4gIHZhciBjID0gMSArIHN5MCAqICgyICogbiAtIHN5MCksIHIwID0gc3FydChjKSAvIG47XG5cbiAgZnVuY3Rpb24gcHJvamVjdCh4LCB5KSB7XG4gICAgdmFyIHIgPSBzcXJ0KGMgLSAyICogbiAqIHNpbiQxKHkpKSAvIG47XG4gICAgcmV0dXJuIFtyICogc2luJDEoeCAqPSBuKSwgcjAgLSByICogY29zJDEoeCldO1xuICB9XG5cbiAgcHJvamVjdC5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgdmFyIHIweSA9IHIwIC0geTtcbiAgICByZXR1cm4gW2F0YW4yKHgsIGFicyhyMHkpKSAvIG4gKiBzaWduKHIweSksIGFzaW4oKGMgLSAoeCAqIHggKyByMHkgKiByMHkpICogbiAqIG4pIC8gKDIgKiBuKSldO1xuICB9O1xuXG4gIHJldHVybiBwcm9qZWN0O1xufVxuXG52YXIgY29uaWNFcXVhbEFyZWEgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGNvbmljUHJvamVjdGlvbihjb25pY0VxdWFsQXJlYVJhdylcbiAgICAgIC5zY2FsZSgxNTUuNDI0KVxuICAgICAgLmNlbnRlcihbMCwgMzMuNjQ0Ml0pO1xufTtcblxudmFyIGFsYmVycyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gY29uaWNFcXVhbEFyZWEoKVxuICAgICAgLnBhcmFsbGVscyhbMjkuNSwgNDUuNV0pXG4gICAgICAuc2NhbGUoMTA3MClcbiAgICAgIC50cmFuc2xhdGUoWzQ4MCwgMjUwXSlcbiAgICAgIC5yb3RhdGUoWzk2LCAwXSlcbiAgICAgIC5jZW50ZXIoWy0wLjYsIDM4LjddKTtcbn07XG5cbi8vIFRoZSBwcm9qZWN0aW9ucyBtdXN0IGhhdmUgbXV0dWFsbHkgZXhjbHVzaXZlIGNsaXAgcmVnaW9ucyBvbiB0aGUgc3BoZXJlLFxuLy8gYXMgdGhpcyB3aWxsIGF2b2lkIGVtaXR0aW5nIGludGVybGVhdmluZyBsaW5lcyBhbmQgcG9seWdvbnMuXG5mdW5jdGlvbiBtdWx0aXBsZXgoc3RyZWFtcykge1xuICB2YXIgbiA9IHN0cmVhbXMubGVuZ3RoO1xuICByZXR1cm4ge1xuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7IHZhciBpID0gLTE7IHdoaWxlICgrK2kgPCBuKSBzdHJlYW1zW2ldLnBvaW50KHgsIHkpOyB9LFxuICAgIHNwaGVyZTogZnVuY3Rpb24oKSB7IHZhciBpID0gLTE7IHdoaWxlICgrK2kgPCBuKSBzdHJlYW1zW2ldLnNwaGVyZSgpOyB9LFxuICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7IHZhciBpID0gLTE7IHdoaWxlICgrK2kgPCBuKSBzdHJlYW1zW2ldLmxpbmVTdGFydCgpOyB9LFxuICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkgeyB2YXIgaSA9IC0xOyB3aGlsZSAoKytpIDwgbikgc3RyZWFtc1tpXS5saW5lRW5kKCk7IH0sXG4gICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHsgdmFyIGkgPSAtMTsgd2hpbGUgKCsraSA8IG4pIHN0cmVhbXNbaV0ucG9seWdvblN0YXJ0KCk7IH0sXG4gICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7IHZhciBpID0gLTE7IHdoaWxlICgrK2kgPCBuKSBzdHJlYW1zW2ldLnBvbHlnb25FbmQoKTsgfVxuICB9O1xufVxuXG4vLyBBIGNvbXBvc2l0ZSBwcm9qZWN0aW9uIGZvciB0aGUgVW5pdGVkIFN0YXRlcywgY29uZmlndXJlZCBieSBkZWZhdWx0IGZvclxuLy8gOTYww5c1MDAuIFRoZSBwcm9qZWN0aW9uIGFsc28gd29ya3MgcXVpdGUgd2VsbCBhdCA5NjDDlzYwMCBpZiB5b3UgY2hhbmdlIHRoZVxuLy8gc2NhbGUgdG8gMTI4NSBhbmQgYWRqdXN0IHRoZSB0cmFuc2xhdGUgYWNjb3JkaW5nbHkuIFRoZSBzZXQgb2Ygc3RhbmRhcmRcbi8vIHBhcmFsbGVscyBmb3IgZWFjaCByZWdpb24gY29tZXMgZnJvbSBVU0dTLCB3aGljaCBpcyBwdWJsaXNoZWQgaGVyZTpcbi8vIGh0dHA6Ly9lZ3NjLnVzZ3MuZ292L2lzYi9wdWJzL01hcFByb2plY3Rpb25zL3Byb2plY3Rpb25zLmh0bWwjYWxiZXJzXG52YXIgYWxiZXJzVXNhID0gZnVuY3Rpb24oKSB7XG4gIHZhciBjYWNoZSxcbiAgICAgIGNhY2hlU3RyZWFtLFxuICAgICAgbG93ZXI0OCA9IGFsYmVycygpLCBsb3dlcjQ4UG9pbnQsXG4gICAgICBhbGFza2EgPSBjb25pY0VxdWFsQXJlYSgpLnJvdGF0ZShbMTU0LCAwXSkuY2VudGVyKFstMiwgNTguNV0pLnBhcmFsbGVscyhbNTUsIDY1XSksIGFsYXNrYVBvaW50LCAvLyBFUFNHOjMzMzhcbiAgICAgIGhhd2FpaSA9IGNvbmljRXF1YWxBcmVhKCkucm90YXRlKFsxNTcsIDBdKS5jZW50ZXIoWy0zLCAxOS45XSkucGFyYWxsZWxzKFs4LCAxOF0pLCBoYXdhaWlQb2ludCwgLy8gRVNSSToxMDIwMDdcbiAgICAgIHBvaW50LCBwb2ludFN0cmVhbSA9IHtwb2ludDogZnVuY3Rpb24oeCwgeSkgeyBwb2ludCA9IFt4LCB5XTsgfX07XG5cbiAgZnVuY3Rpb24gYWxiZXJzVXNhKGNvb3JkaW5hdGVzKSB7XG4gICAgdmFyIHggPSBjb29yZGluYXRlc1swXSwgeSA9IGNvb3JkaW5hdGVzWzFdO1xuICAgIHJldHVybiBwb2ludCA9IG51bGwsXG4gICAgICAgIChsb3dlcjQ4UG9pbnQucG9pbnQoeCwgeSksIHBvaW50KVxuICAgICAgICB8fCAoYWxhc2thUG9pbnQucG9pbnQoeCwgeSksIHBvaW50KVxuICAgICAgICB8fCAoaGF3YWlpUG9pbnQucG9pbnQoeCwgeSksIHBvaW50KTtcbiAgfVxuXG4gIGFsYmVyc1VzYS5pbnZlcnQgPSBmdW5jdGlvbihjb29yZGluYXRlcykge1xuICAgIHZhciBrID0gbG93ZXI0OC5zY2FsZSgpLFxuICAgICAgICB0ID0gbG93ZXI0OC50cmFuc2xhdGUoKSxcbiAgICAgICAgeCA9IChjb29yZGluYXRlc1swXSAtIHRbMF0pIC8gayxcbiAgICAgICAgeSA9IChjb29yZGluYXRlc1sxXSAtIHRbMV0pIC8gaztcbiAgICByZXR1cm4gKHkgPj0gMC4xMjAgJiYgeSA8IDAuMjM0ICYmIHggPj0gLTAuNDI1ICYmIHggPCAtMC4yMTQgPyBhbGFza2FcbiAgICAgICAgOiB5ID49IDAuMTY2ICYmIHkgPCAwLjIzNCAmJiB4ID49IC0wLjIxNCAmJiB4IDwgLTAuMTE1ID8gaGF3YWlpXG4gICAgICAgIDogbG93ZXI0OCkuaW52ZXJ0KGNvb3JkaW5hdGVzKTtcbiAgfTtcblxuICBhbGJlcnNVc2Euc3RyZWFtID0gZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgcmV0dXJuIGNhY2hlICYmIGNhY2hlU3RyZWFtID09PSBzdHJlYW0gPyBjYWNoZSA6IGNhY2hlID0gbXVsdGlwbGV4KFtsb3dlcjQ4LnN0cmVhbShjYWNoZVN0cmVhbSA9IHN0cmVhbSksIGFsYXNrYS5zdHJlYW0oc3RyZWFtKSwgaGF3YWlpLnN0cmVhbShzdHJlYW0pXSk7XG4gIH07XG5cbiAgYWxiZXJzVXNhLnByZWNpc2lvbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBsb3dlcjQ4LnByZWNpc2lvbigpO1xuICAgIGxvd2VyNDgucHJlY2lzaW9uKF8pLCBhbGFza2EucHJlY2lzaW9uKF8pLCBoYXdhaWkucHJlY2lzaW9uKF8pO1xuICAgIHJldHVybiByZXNldCgpO1xuICB9O1xuXG4gIGFsYmVyc1VzYS5zY2FsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBsb3dlcjQ4LnNjYWxlKCk7XG4gICAgbG93ZXI0OC5zY2FsZShfKSwgYWxhc2thLnNjYWxlKF8gKiAwLjM1KSwgaGF3YWlpLnNjYWxlKF8pO1xuICAgIHJldHVybiBhbGJlcnNVc2EudHJhbnNsYXRlKGxvd2VyNDgudHJhbnNsYXRlKCkpO1xuICB9O1xuXG4gIGFsYmVyc1VzYS50cmFuc2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbG93ZXI0OC50cmFuc2xhdGUoKTtcbiAgICB2YXIgayA9IGxvd2VyNDguc2NhbGUoKSwgeCA9ICtfWzBdLCB5ID0gK19bMV07XG5cbiAgICBsb3dlcjQ4UG9pbnQgPSBsb3dlcjQ4XG4gICAgICAgIC50cmFuc2xhdGUoXylcbiAgICAgICAgLmNsaXBFeHRlbnQoW1t4IC0gMC40NTUgKiBrLCB5IC0gMC4yMzggKiBrXSwgW3ggKyAwLjQ1NSAqIGssIHkgKyAwLjIzOCAqIGtdXSlcbiAgICAgICAgLnN0cmVhbShwb2ludFN0cmVhbSk7XG5cbiAgICBhbGFza2FQb2ludCA9IGFsYXNrYVxuICAgICAgICAudHJhbnNsYXRlKFt4IC0gMC4zMDcgKiBrLCB5ICsgMC4yMDEgKiBrXSlcbiAgICAgICAgLmNsaXBFeHRlbnQoW1t4IC0gMC40MjUgKiBrICsgZXBzaWxvbiQyLCB5ICsgMC4xMjAgKiBrICsgZXBzaWxvbiQyXSwgW3ggLSAwLjIxNCAqIGsgLSBlcHNpbG9uJDIsIHkgKyAwLjIzNCAqIGsgLSBlcHNpbG9uJDJdXSlcbiAgICAgICAgLnN0cmVhbShwb2ludFN0cmVhbSk7XG5cbiAgICBoYXdhaWlQb2ludCA9IGhhd2FpaVxuICAgICAgICAudHJhbnNsYXRlKFt4IC0gMC4yMDUgKiBrLCB5ICsgMC4yMTIgKiBrXSlcbiAgICAgICAgLmNsaXBFeHRlbnQoW1t4IC0gMC4yMTQgKiBrICsgZXBzaWxvbiQyLCB5ICsgMC4xNjYgKiBrICsgZXBzaWxvbiQyXSwgW3ggLSAwLjExNSAqIGsgLSBlcHNpbG9uJDIsIHkgKyAwLjIzNCAqIGsgLSBlcHNpbG9uJDJdXSlcbiAgICAgICAgLnN0cmVhbShwb2ludFN0cmVhbSk7XG5cbiAgICByZXR1cm4gcmVzZXQoKTtcbiAgfTtcblxuICBhbGJlcnNVc2EuZml0RXh0ZW50ID0gZnVuY3Rpb24oZXh0ZW50LCBvYmplY3QpIHtcbiAgICByZXR1cm4gZml0RXh0ZW50KGFsYmVyc1VzYSwgZXh0ZW50LCBvYmplY3QpO1xuICB9O1xuXG4gIGFsYmVyc1VzYS5maXRTaXplID0gZnVuY3Rpb24oc2l6ZSwgb2JqZWN0KSB7XG4gICAgcmV0dXJuIGZpdFNpemUoYWxiZXJzVXNhLCBzaXplLCBvYmplY3QpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgIGNhY2hlID0gY2FjaGVTdHJlYW0gPSBudWxsO1xuICAgIHJldHVybiBhbGJlcnNVc2E7XG4gIH1cblxuICByZXR1cm4gYWxiZXJzVXNhLnNjYWxlKDEwNzApO1xufTtcblxuZnVuY3Rpb24gYXppbXV0aGFsUmF3KHNjYWxlKSB7XG4gIHJldHVybiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdmFyIGN4ID0gY29zJDEoeCksXG4gICAgICAgIGN5ID0gY29zJDEoeSksXG4gICAgICAgIGsgPSBzY2FsZShjeCAqIGN5KTtcbiAgICByZXR1cm4gW1xuICAgICAgayAqIGN5ICogc2luJDEoeCksXG4gICAgICBrICogc2luJDEoeSlcbiAgICBdO1xuICB9XG59XG5cbmZ1bmN0aW9uIGF6aW11dGhhbEludmVydChhbmdsZSkge1xuICByZXR1cm4gZnVuY3Rpb24oeCwgeSkge1xuICAgIHZhciB6ID0gc3FydCh4ICogeCArIHkgKiB5KSxcbiAgICAgICAgYyA9IGFuZ2xlKHopLFxuICAgICAgICBzYyA9IHNpbiQxKGMpLFxuICAgICAgICBjYyA9IGNvcyQxKGMpO1xuICAgIHJldHVybiBbXG4gICAgICBhdGFuMih4ICogc2MsIHogKiBjYyksXG4gICAgICBhc2luKHogJiYgeSAqIHNjIC8geilcbiAgICBdO1xuICB9XG59XG5cbnZhciBhemltdXRoYWxFcXVhbEFyZWFSYXcgPSBhemltdXRoYWxSYXcoZnVuY3Rpb24oY3hjeSkge1xuICByZXR1cm4gc3FydCgyIC8gKDEgKyBjeGN5KSk7XG59KTtcblxuYXppbXV0aGFsRXF1YWxBcmVhUmF3LmludmVydCA9IGF6aW11dGhhbEludmVydChmdW5jdGlvbih6KSB7XG4gIHJldHVybiAyICogYXNpbih6IC8gMik7XG59KTtcblxudmFyIGF6aW11dGhhbEVxdWFsQXJlYSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcHJvamVjdGlvbihhemltdXRoYWxFcXVhbEFyZWFSYXcpXG4gICAgICAuc2NhbGUoMTI0Ljc1KVxuICAgICAgLmNsaXBBbmdsZSgxODAgLSAxZS0zKTtcbn07XG5cbnZhciBhemltdXRoYWxFcXVpZGlzdGFudFJhdyA9IGF6aW11dGhhbFJhdyhmdW5jdGlvbihjKSB7XG4gIHJldHVybiAoYyA9IGFjb3MoYykpICYmIGMgLyBzaW4kMShjKTtcbn0pO1xuXG5hemltdXRoYWxFcXVpZGlzdGFudFJhdy5pbnZlcnQgPSBhemltdXRoYWxJbnZlcnQoZnVuY3Rpb24oeikge1xuICByZXR1cm4gejtcbn0pO1xuXG52YXIgYXppbXV0aGFsRXF1aWRpc3RhbnQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHByb2plY3Rpb24oYXppbXV0aGFsRXF1aWRpc3RhbnRSYXcpXG4gICAgICAuc2NhbGUoNzkuNDE4OClcbiAgICAgIC5jbGlwQW5nbGUoMTgwIC0gMWUtMyk7XG59O1xuXG5mdW5jdGlvbiBtZXJjYXRvclJhdyhsYW1iZGEsIHBoaSkge1xuICByZXR1cm4gW2xhbWJkYSwgbG9nKHRhbigoaGFsZlBpJDIgKyBwaGkpIC8gMikpXTtcbn1cblxubWVyY2F0b3JSYXcuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICByZXR1cm4gW3gsIDIgKiBhdGFuKGV4cCh5KSkgLSBoYWxmUGkkMl07XG59O1xuXG52YXIgbWVyY2F0b3IgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG1lcmNhdG9yUHJvamVjdGlvbihtZXJjYXRvclJhdylcbiAgICAgIC5zY2FsZSg5NjEgLyB0YXUkMyk7XG59O1xuXG5mdW5jdGlvbiBtZXJjYXRvclByb2plY3Rpb24ocHJvamVjdCkge1xuICB2YXIgbSA9IHByb2plY3Rpb24ocHJvamVjdCksXG4gICAgICBjZW50ZXIgPSBtLmNlbnRlcixcbiAgICAgIHNjYWxlID0gbS5zY2FsZSxcbiAgICAgIHRyYW5zbGF0ZSA9IG0udHJhbnNsYXRlLFxuICAgICAgY2xpcEV4dGVudCA9IG0uY2xpcEV4dGVudCxcbiAgICAgIHgwID0gbnVsbCwgeTAsIHgxLCB5MTsgLy8gY2xpcCBleHRlbnRcblxuICBtLnNjYWxlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNjYWxlKF8pLCByZWNsaXAoKSkgOiBzY2FsZSgpO1xuICB9O1xuXG4gIG0udHJhbnNsYXRlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRyYW5zbGF0ZShfKSwgcmVjbGlwKCkpIDogdHJhbnNsYXRlKCk7XG4gIH07XG5cbiAgbS5jZW50ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2VudGVyKF8pLCByZWNsaXAoKSkgOiBjZW50ZXIoKTtcbiAgfTtcblxuICBtLmNsaXBFeHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoKF8gPT0gbnVsbCA/IHgwID0geTAgPSB4MSA9IHkxID0gbnVsbCA6ICh4MCA9ICtfWzBdWzBdLCB5MCA9ICtfWzBdWzFdLCB4MSA9ICtfWzFdWzBdLCB5MSA9ICtfWzFdWzFdKSksIHJlY2xpcCgpKSA6IHgwID09IG51bGwgPyBudWxsIDogW1t4MCwgeTBdLCBbeDEsIHkxXV07XG4gIH07XG5cbiAgZnVuY3Rpb24gcmVjbGlwKCkge1xuICAgIHZhciBrID0gcGkkMyAqIHNjYWxlKCksXG4gICAgICAgIHQgPSBtKHJvdGF0aW9uKG0ucm90YXRlKCkpLmludmVydChbMCwgMF0pKTtcbiAgICByZXR1cm4gY2xpcEV4dGVudCh4MCA9PSBudWxsXG4gICAgICAgID8gW1t0WzBdIC0gaywgdFsxXSAtIGtdLCBbdFswXSArIGssIHRbMV0gKyBrXV0gOiBwcm9qZWN0ID09PSBtZXJjYXRvclJhd1xuICAgICAgICA/IFtbTWF0aC5tYXgodFswXSAtIGssIHgwKSwgeTBdLCBbTWF0aC5taW4odFswXSArIGssIHgxKSwgeTFdXVxuICAgICAgICA6IFtbeDAsIE1hdGgubWF4KHRbMV0gLSBrLCB5MCldLCBbeDEsIE1hdGgubWluKHRbMV0gKyBrLCB5MSldXSk7XG4gIH1cblxuICByZXR1cm4gcmVjbGlwKCk7XG59XG5cbmZ1bmN0aW9uIHRhbnkoeSkge1xuICByZXR1cm4gdGFuKChoYWxmUGkkMiArIHkpIC8gMik7XG59XG5cbmZ1bmN0aW9uIGNvbmljQ29uZm9ybWFsUmF3KHkwLCB5MSkge1xuICB2YXIgY3kwID0gY29zJDEoeTApLFxuICAgICAgbiA9IHkwID09PSB5MSA/IHNpbiQxKHkwKSA6IGxvZyhjeTAgLyBjb3MkMSh5MSkpIC8gbG9nKHRhbnkoeTEpIC8gdGFueSh5MCkpLFxuICAgICAgZiA9IGN5MCAqIHBvdyh0YW55KHkwKSwgbikgLyBuO1xuXG4gIGlmICghbikgcmV0dXJuIG1lcmNhdG9yUmF3O1xuXG4gIGZ1bmN0aW9uIHByb2plY3QoeCwgeSkge1xuICAgIGlmIChmID4gMCkgeyBpZiAoeSA8IC1oYWxmUGkkMiArIGVwc2lsb24kMikgeSA9IC1oYWxmUGkkMiArIGVwc2lsb24kMjsgfVxuICAgIGVsc2UgeyBpZiAoeSA+IGhhbGZQaSQyIC0gZXBzaWxvbiQyKSB5ID0gaGFsZlBpJDIgLSBlcHNpbG9uJDI7IH1cbiAgICB2YXIgciA9IGYgLyBwb3codGFueSh5KSwgbik7XG4gICAgcmV0dXJuIFtyICogc2luJDEobiAqIHgpLCBmIC0gciAqIGNvcyQxKG4gKiB4KV07XG4gIH1cblxuICBwcm9qZWN0LmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB2YXIgZnkgPSBmIC0geSwgciA9IHNpZ24obikgKiBzcXJ0KHggKiB4ICsgZnkgKiBmeSk7XG4gICAgcmV0dXJuIFthdGFuMih4LCBhYnMoZnkpKSAvIG4gKiBzaWduKGZ5KSwgMiAqIGF0YW4ocG93KGYgLyByLCAxIC8gbikpIC0gaGFsZlBpJDJdO1xuICB9O1xuXG4gIHJldHVybiBwcm9qZWN0O1xufVxuXG52YXIgY29uaWNDb25mb3JtYWwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGNvbmljUHJvamVjdGlvbihjb25pY0NvbmZvcm1hbFJhdylcbiAgICAgIC5zY2FsZSgxMDkuNSlcbiAgICAgIC5wYXJhbGxlbHMoWzMwLCAzMF0pO1xufTtcblxuZnVuY3Rpb24gZXF1aXJlY3Rhbmd1bGFyUmF3KGxhbWJkYSwgcGhpKSB7XG4gIHJldHVybiBbbGFtYmRhLCBwaGldO1xufVxuXG5lcXVpcmVjdGFuZ3VsYXJSYXcuaW52ZXJ0ID0gZXF1aXJlY3Rhbmd1bGFyUmF3O1xuXG52YXIgZXF1aXJlY3Rhbmd1bGFyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBwcm9qZWN0aW9uKGVxdWlyZWN0YW5ndWxhclJhdylcbiAgICAgIC5zY2FsZSgxNTIuNjMpO1xufTtcblxuZnVuY3Rpb24gY29uaWNFcXVpZGlzdGFudFJhdyh5MCwgeTEpIHtcbiAgdmFyIGN5MCA9IGNvcyQxKHkwKSxcbiAgICAgIG4gPSB5MCA9PT0geTEgPyBzaW4kMSh5MCkgOiAoY3kwIC0gY29zJDEoeTEpKSAvICh5MSAtIHkwKSxcbiAgICAgIGcgPSBjeTAgLyBuICsgeTA7XG5cbiAgaWYgKGFicyhuKSA8IGVwc2lsb24kMikgcmV0dXJuIGVxdWlyZWN0YW5ndWxhclJhdztcblxuICBmdW5jdGlvbiBwcm9qZWN0KHgsIHkpIHtcbiAgICB2YXIgZ3kgPSBnIC0geSwgbnggPSBuICogeDtcbiAgICByZXR1cm4gW2d5ICogc2luJDEobngpLCBnIC0gZ3kgKiBjb3MkMShueCldO1xuICB9XG5cbiAgcHJvamVjdC5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgdmFyIGd5ID0gZyAtIHk7XG4gICAgcmV0dXJuIFthdGFuMih4LCBhYnMoZ3kpKSAvIG4gKiBzaWduKGd5KSwgZyAtIHNpZ24obikgKiBzcXJ0KHggKiB4ICsgZ3kgKiBneSldO1xuICB9O1xuXG4gIHJldHVybiBwcm9qZWN0O1xufVxuXG52YXIgY29uaWNFcXVpZGlzdGFudCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gY29uaWNQcm9qZWN0aW9uKGNvbmljRXF1aWRpc3RhbnRSYXcpXG4gICAgICAuc2NhbGUoMTMxLjE1NClcbiAgICAgIC5jZW50ZXIoWzAsIDEzLjkzODldKTtcbn07XG5cbmZ1bmN0aW9uIGdub21vbmljUmF3KHgsIHkpIHtcbiAgdmFyIGN5ID0gY29zJDEoeSksIGsgPSBjb3MkMSh4KSAqIGN5O1xuICByZXR1cm4gW2N5ICogc2luJDEoeCkgLyBrLCBzaW4kMSh5KSAvIGtdO1xufVxuXG5nbm9tb25pY1Jhdy5pbnZlcnQgPSBhemltdXRoYWxJbnZlcnQoYXRhbik7XG5cbnZhciBnbm9tb25pYyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcHJvamVjdGlvbihnbm9tb25pY1JhdylcbiAgICAgIC5zY2FsZSgxNDQuMDQ5KVxuICAgICAgLmNsaXBBbmdsZSg2MCk7XG59O1xuXG5mdW5jdGlvbiBzY2FsZVRyYW5zbGF0ZShreCwga3ksIHR4LCB0eSkge1xuICByZXR1cm4ga3ggPT09IDEgJiYga3kgPT09IDEgJiYgdHggPT09IDAgJiYgdHkgPT09IDAgPyBpZGVudGl0eSQ0IDogdHJhbnNmb3JtZXIoe1xuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICB0aGlzLnN0cmVhbS5wb2ludCh4ICoga3ggKyB0eCwgeSAqIGt5ICsgdHkpO1xuICAgIH1cbiAgfSk7XG59XG5cbnZhciBpZGVudGl0eSQ1ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBrID0gMSwgdHggPSAwLCB0eSA9IDAsIHN4ID0gMSwgc3kgPSAxLCB0cmFuc2Zvcm0kJDEgPSBpZGVudGl0eSQ0LCAvLyBzY2FsZSwgdHJhbnNsYXRlIGFuZCByZWZsZWN0XG4gICAgICB4MCA9IG51bGwsIHkwLCB4MSwgeTEsIGNsaXAgPSBpZGVudGl0eSQ0LCAvLyBjbGlwIGV4dGVudFxuICAgICAgY2FjaGUsXG4gICAgICBjYWNoZVN0cmVhbSxcbiAgICAgIHByb2plY3Rpb247XG5cbiAgZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgY2FjaGUgPSBjYWNoZVN0cmVhbSA9IG51bGw7XG4gICAgcmV0dXJuIHByb2plY3Rpb247XG4gIH1cblxuICByZXR1cm4gcHJvamVjdGlvbiA9IHtcbiAgICBzdHJlYW06IGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgICAgcmV0dXJuIGNhY2hlICYmIGNhY2hlU3RyZWFtID09PSBzdHJlYW0gPyBjYWNoZSA6IGNhY2hlID0gdHJhbnNmb3JtJCQxKGNsaXAoY2FjaGVTdHJlYW0gPSBzdHJlYW0pKTtcbiAgICB9LFxuICAgIGNsaXBFeHRlbnQ6IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNsaXAgPSBfID09IG51bGwgPyAoeDAgPSB5MCA9IHgxID0geTEgPSBudWxsLCBpZGVudGl0eSQ0KSA6IGNsaXBFeHRlbnQoeDAgPSArX1swXVswXSwgeTAgPSArX1swXVsxXSwgeDEgPSArX1sxXVswXSwgeTEgPSArX1sxXVsxXSksIHJlc2V0KCkpIDogeDAgPT0gbnVsbCA/IG51bGwgOiBbW3gwLCB5MF0sIFt4MSwgeTFdXTtcbiAgICB9LFxuICAgIHNjYWxlOiBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0cmFuc2Zvcm0kJDEgPSBzY2FsZVRyYW5zbGF0ZSgoayA9ICtfKSAqIHN4LCBrICogc3ksIHR4LCB0eSksIHJlc2V0KCkpIDogaztcbiAgICB9LFxuICAgIHRyYW5zbGF0ZTogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodHJhbnNmb3JtJCQxID0gc2NhbGVUcmFuc2xhdGUoayAqIHN4LCBrICogc3ksIHR4ID0gK19bMF0sIHR5ID0gK19bMV0pLCByZXNldCgpKSA6IFt0eCwgdHldO1xuICAgIH0sXG4gICAgcmVmbGVjdFg6IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRyYW5zZm9ybSQkMSA9IHNjYWxlVHJhbnNsYXRlKGsgKiAoc3ggPSBfID8gLTEgOiAxKSwgayAqIHN5LCB0eCwgdHkpLCByZXNldCgpKSA6IHN4IDwgMDtcbiAgICB9LFxuICAgIHJlZmxlY3RZOiBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0cmFuc2Zvcm0kJDEgPSBzY2FsZVRyYW5zbGF0ZShrICogc3gsIGsgKiAoc3kgPSBfID8gLTEgOiAxKSwgdHgsIHR5KSwgcmVzZXQoKSkgOiBzeSA8IDA7XG4gICAgfSxcbiAgICBmaXRFeHRlbnQ6IGZ1bmN0aW9uKGV4dGVudCwgb2JqZWN0KSB7XG4gICAgICByZXR1cm4gZml0RXh0ZW50KHByb2plY3Rpb24sIGV4dGVudCwgb2JqZWN0KTtcbiAgICB9LFxuICAgIGZpdFNpemU6IGZ1bmN0aW9uKHNpemUsIG9iamVjdCkge1xuICAgICAgcmV0dXJuIGZpdFNpemUocHJvamVjdGlvbiwgc2l6ZSwgb2JqZWN0KTtcbiAgICB9XG4gIH07XG59O1xuXG5mdW5jdGlvbiBvcnRob2dyYXBoaWNSYXcoeCwgeSkge1xuICByZXR1cm4gW2NvcyQxKHkpICogc2luJDEoeCksIHNpbiQxKHkpXTtcbn1cblxub3J0aG9ncmFwaGljUmF3LmludmVydCA9IGF6aW11dGhhbEludmVydChhc2luKTtcblxudmFyIG9ydGhvZ3JhcGhpYyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcHJvamVjdGlvbihvcnRob2dyYXBoaWNSYXcpXG4gICAgICAuc2NhbGUoMjQ5LjUpXG4gICAgICAuY2xpcEFuZ2xlKDkwICsgZXBzaWxvbiQyKTtcbn07XG5cbmZ1bmN0aW9uIHN0ZXJlb2dyYXBoaWNSYXcoeCwgeSkge1xuICB2YXIgY3kgPSBjb3MkMSh5KSwgayA9IDEgKyBjb3MkMSh4KSAqIGN5O1xuICByZXR1cm4gW2N5ICogc2luJDEoeCkgLyBrLCBzaW4kMSh5KSAvIGtdO1xufVxuXG5zdGVyZW9ncmFwaGljUmF3LmludmVydCA9IGF6aW11dGhhbEludmVydChmdW5jdGlvbih6KSB7XG4gIHJldHVybiAyICogYXRhbih6KTtcbn0pO1xuXG52YXIgc3RlcmVvZ3JhcGhpYyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcHJvamVjdGlvbihzdGVyZW9ncmFwaGljUmF3KVxuICAgICAgLnNjYWxlKDI1MClcbiAgICAgIC5jbGlwQW5nbGUoMTQyKTtcbn07XG5cbmZ1bmN0aW9uIHRyYW5zdmVyc2VNZXJjYXRvclJhdyhsYW1iZGEsIHBoaSkge1xuICByZXR1cm4gW2xvZyh0YW4oKGhhbGZQaSQyICsgcGhpKSAvIDIpKSwgLWxhbWJkYV07XG59XG5cbnRyYW5zdmVyc2VNZXJjYXRvclJhdy5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gIHJldHVybiBbLXksIDIgKiBhdGFuKGV4cCh4KSkgLSBoYWxmUGkkMl07XG59O1xuXG52YXIgdHJhbnN2ZXJzZU1lcmNhdG9yID0gZnVuY3Rpb24oKSB7XG4gIHZhciBtID0gbWVyY2F0b3JQcm9qZWN0aW9uKHRyYW5zdmVyc2VNZXJjYXRvclJhdyksXG4gICAgICBjZW50ZXIgPSBtLmNlbnRlcixcbiAgICAgIHJvdGF0ZSA9IG0ucm90YXRlO1xuXG4gIG0uY2VudGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gY2VudGVyKFstX1sxXSwgX1swXV0pIDogKF8gPSBjZW50ZXIoKSwgW19bMV0sIC1fWzBdXSk7XG4gIH07XG5cbiAgbS5yb3RhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyByb3RhdGUoW19bMF0sIF9bMV0sIF8ubGVuZ3RoID4gMiA/IF9bMl0gKyA5MCA6IDkwXSkgOiAoXyA9IHJvdGF0ZSgpLCBbX1swXSwgX1sxXSwgX1syXSAtIDkwXSk7XG4gIH07XG5cbiAgcmV0dXJuIHJvdGF0ZShbMCwgMCwgOTBdKVxuICAgICAgLnNjYWxlKDE1OS4xNTUpO1xufTtcblxuZnVuY3Rpb24gZGVmYXVsdFNlcGFyYXRpb24oYSwgYikge1xuICByZXR1cm4gYS5wYXJlbnQgPT09IGIucGFyZW50ID8gMSA6IDI7XG59XG5cbmZ1bmN0aW9uIG1lYW5YKGNoaWxkcmVuKSB7XG4gIHJldHVybiBjaGlsZHJlbi5yZWR1Y2UobWVhblhSZWR1Y2UsIDApIC8gY2hpbGRyZW4ubGVuZ3RoO1xufVxuXG5mdW5jdGlvbiBtZWFuWFJlZHVjZSh4LCBjKSB7XG4gIHJldHVybiB4ICsgYy54O1xufVxuXG5mdW5jdGlvbiBtYXhZKGNoaWxkcmVuKSB7XG4gIHJldHVybiAxICsgY2hpbGRyZW4ucmVkdWNlKG1heFlSZWR1Y2UsIDApO1xufVxuXG5mdW5jdGlvbiBtYXhZUmVkdWNlKHksIGMpIHtcbiAgcmV0dXJuIE1hdGgubWF4KHksIGMueSk7XG59XG5cbmZ1bmN0aW9uIGxlYWZMZWZ0KG5vZGUpIHtcbiAgdmFyIGNoaWxkcmVuO1xuICB3aGlsZSAoY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuKSBub2RlID0gY2hpbGRyZW5bMF07XG4gIHJldHVybiBub2RlO1xufVxuXG5mdW5jdGlvbiBsZWFmUmlnaHQobm9kZSkge1xuICB2YXIgY2hpbGRyZW47XG4gIHdoaWxlIChjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4pIG5vZGUgPSBjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGggLSAxXTtcbiAgcmV0dXJuIG5vZGU7XG59XG5cbnZhciBjbHVzdGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzZXBhcmF0aW9uID0gZGVmYXVsdFNlcGFyYXRpb24sXG4gICAgICBkeCA9IDEsXG4gICAgICBkeSA9IDEsXG4gICAgICBub2RlU2l6ZSA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGNsdXN0ZXIocm9vdCkge1xuICAgIHZhciBwcmV2aW91c05vZGUsXG4gICAgICAgIHggPSAwO1xuXG4gICAgLy8gRmlyc3Qgd2FsaywgY29tcHV0aW5nIHRoZSBpbml0aWFsIHggJiB5IHZhbHVlcy5cbiAgICByb290LmVhY2hBZnRlcihmdW5jdGlvbihub2RlKSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuICAgICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICAgIG5vZGUueCA9IG1lYW5YKGNoaWxkcmVuKTtcbiAgICAgICAgbm9kZS55ID0gbWF4WShjaGlsZHJlbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlLnggPSBwcmV2aW91c05vZGUgPyB4ICs9IHNlcGFyYXRpb24obm9kZSwgcHJldmlvdXNOb2RlKSA6IDA7XG4gICAgICAgIG5vZGUueSA9IDA7XG4gICAgICAgIHByZXZpb3VzTm9kZSA9IG5vZGU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgbGVmdCA9IGxlYWZMZWZ0KHJvb3QpLFxuICAgICAgICByaWdodCA9IGxlYWZSaWdodChyb290KSxcbiAgICAgICAgeDAgPSBsZWZ0LnggLSBzZXBhcmF0aW9uKGxlZnQsIHJpZ2h0KSAvIDIsXG4gICAgICAgIHgxID0gcmlnaHQueCArIHNlcGFyYXRpb24ocmlnaHQsIGxlZnQpIC8gMjtcblxuICAgIC8vIFNlY29uZCB3YWxrLCBub3JtYWxpemluZyB4ICYgeSB0byB0aGUgZGVzaXJlZCBzaXplLlxuICAgIHJldHVybiByb290LmVhY2hBZnRlcihub2RlU2l6ZSA/IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIG5vZGUueCA9IChub2RlLnggLSByb290LngpICogZHg7XG4gICAgICBub2RlLnkgPSAocm9vdC55IC0gbm9kZS55KSAqIGR5O1xuICAgIH0gOiBmdW5jdGlvbihub2RlKSB7XG4gICAgICBub2RlLnggPSAobm9kZS54IC0geDApIC8gKHgxIC0geDApICogZHg7XG4gICAgICBub2RlLnkgPSAoMSAtIChyb290LnkgPyBub2RlLnkgLyByb290LnkgOiAxKSkgKiBkeTtcbiAgICB9KTtcbiAgfVxuXG4gIGNsdXN0ZXIuc2VwYXJhdGlvbiA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzZXBhcmF0aW9uID0geCwgY2x1c3RlcikgOiBzZXBhcmF0aW9uO1xuICB9O1xuXG4gIGNsdXN0ZXIuc2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChub2RlU2l6ZSA9IGZhbHNlLCBkeCA9ICt4WzBdLCBkeSA9ICt4WzFdLCBjbHVzdGVyKSA6IChub2RlU2l6ZSA/IG51bGwgOiBbZHgsIGR5XSk7XG4gIH07XG5cbiAgY2x1c3Rlci5ub2RlU2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChub2RlU2l6ZSA9IHRydWUsIGR4ID0gK3hbMF0sIGR5ID0gK3hbMV0sIGNsdXN0ZXIpIDogKG5vZGVTaXplID8gW2R4LCBkeV0gOiBudWxsKTtcbiAgfTtcblxuICByZXR1cm4gY2x1c3Rlcjtcbn07XG5cbmZ1bmN0aW9uIGNvdW50KG5vZGUpIHtcbiAgdmFyIHN1bSA9IDAsXG4gICAgICBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4sXG4gICAgICBpID0gY2hpbGRyZW4gJiYgY2hpbGRyZW4ubGVuZ3RoO1xuICBpZiAoIWkpIHN1bSA9IDE7XG4gIGVsc2Ugd2hpbGUgKC0taSA+PSAwKSBzdW0gKz0gY2hpbGRyZW5baV0udmFsdWU7XG4gIG5vZGUudmFsdWUgPSBzdW07XG59XG5cbnZhciBub2RlX2NvdW50ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVhY2hBZnRlcihjb3VudCk7XG59O1xuXG52YXIgbm9kZV9lYWNoID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgdmFyIG5vZGUgPSB0aGlzLCBjdXJyZW50LCBuZXh0ID0gW25vZGVdLCBjaGlsZHJlbiwgaSwgbjtcbiAgZG8ge1xuICAgIGN1cnJlbnQgPSBuZXh0LnJldmVyc2UoKSwgbmV4dCA9IFtdO1xuICAgIHdoaWxlIChub2RlID0gY3VycmVudC5wb3AoKSkge1xuICAgICAgY2FsbGJhY2sobm9kZSksIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcbiAgICAgIGlmIChjaGlsZHJlbikgZm9yIChpID0gMCwgbiA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICBuZXh0LnB1c2goY2hpbGRyZW5baV0pO1xuICAgICAgfVxuICAgIH1cbiAgfSB3aGlsZSAobmV4dC5sZW5ndGgpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbnZhciBub2RlX2VhY2hCZWZvcmUgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICB2YXIgbm9kZSA9IHRoaXMsIG5vZGVzID0gW25vZGVdLCBjaGlsZHJlbiwgaTtcbiAgd2hpbGUgKG5vZGUgPSBub2Rlcy5wb3AoKSkge1xuICAgIGNhbGxiYWNrKG5vZGUpLCBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW47XG4gICAgaWYgKGNoaWxkcmVuKSBmb3IgKGkgPSBjaGlsZHJlbi5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgbm9kZXMucHVzaChjaGlsZHJlbltpXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxudmFyIG5vZGVfZWFjaEFmdGVyID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgdmFyIG5vZGUgPSB0aGlzLCBub2RlcyA9IFtub2RlXSwgbmV4dCA9IFtdLCBjaGlsZHJlbiwgaSwgbjtcbiAgd2hpbGUgKG5vZGUgPSBub2Rlcy5wb3AoKSkge1xuICAgIG5leHQucHVzaChub2RlKSwgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuICAgIGlmIChjaGlsZHJlbikgZm9yIChpID0gMCwgbiA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgbm9kZXMucHVzaChjaGlsZHJlbltpXSk7XG4gICAgfVxuICB9XG4gIHdoaWxlIChub2RlID0gbmV4dC5wb3AoKSkge1xuICAgIGNhbGxiYWNrKG5vZGUpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxudmFyIG5vZGVfc3VtID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaEFmdGVyKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICB2YXIgc3VtID0gK3ZhbHVlKG5vZGUuZGF0YSkgfHwgMCxcbiAgICAgICAgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuLFxuICAgICAgICBpID0gY2hpbGRyZW4gJiYgY2hpbGRyZW4ubGVuZ3RoO1xuICAgIHdoaWxlICgtLWkgPj0gMCkgc3VtICs9IGNoaWxkcmVuW2ldLnZhbHVlO1xuICAgIG5vZGUudmFsdWUgPSBzdW07XG4gIH0pO1xufTtcblxudmFyIG5vZGVfc29ydCA9IGZ1bmN0aW9uKGNvbXBhcmUpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaEJlZm9yZShmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIG5vZGUuY2hpbGRyZW4uc29ydChjb21wYXJlKTtcbiAgICB9XG4gIH0pO1xufTtcblxudmFyIG5vZGVfcGF0aCA9IGZ1bmN0aW9uKGVuZCkge1xuICB2YXIgc3RhcnQgPSB0aGlzLFxuICAgICAgYW5jZXN0b3IgPSBsZWFzdENvbW1vbkFuY2VzdG9yKHN0YXJ0LCBlbmQpLFxuICAgICAgbm9kZXMgPSBbc3RhcnRdO1xuICB3aGlsZSAoc3RhcnQgIT09IGFuY2VzdG9yKSB7XG4gICAgc3RhcnQgPSBzdGFydC5wYXJlbnQ7XG4gICAgbm9kZXMucHVzaChzdGFydCk7XG4gIH1cbiAgdmFyIGsgPSBub2Rlcy5sZW5ndGg7XG4gIHdoaWxlIChlbmQgIT09IGFuY2VzdG9yKSB7XG4gICAgbm9kZXMuc3BsaWNlKGssIDAsIGVuZCk7XG4gICAgZW5kID0gZW5kLnBhcmVudDtcbiAgfVxuICByZXR1cm4gbm9kZXM7XG59O1xuXG5mdW5jdGlvbiBsZWFzdENvbW1vbkFuY2VzdG9yKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHJldHVybiBhO1xuICB2YXIgYU5vZGVzID0gYS5hbmNlc3RvcnMoKSxcbiAgICAgIGJOb2RlcyA9IGIuYW5jZXN0b3JzKCksXG4gICAgICBjID0gbnVsbDtcbiAgYSA9IGFOb2Rlcy5wb3AoKTtcbiAgYiA9IGJOb2Rlcy5wb3AoKTtcbiAgd2hpbGUgKGEgPT09IGIpIHtcbiAgICBjID0gYTtcbiAgICBhID0gYU5vZGVzLnBvcCgpO1xuICAgIGIgPSBiTm9kZXMucG9wKCk7XG4gIH1cbiAgcmV0dXJuIGM7XG59XG5cbnZhciBub2RlX2FuY2VzdG9ycyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgbm9kZSA9IHRoaXMsIG5vZGVzID0gW25vZGVdO1xuICB3aGlsZSAobm9kZSA9IG5vZGUucGFyZW50KSB7XG4gICAgbm9kZXMucHVzaChub2RlKTtcbiAgfVxuICByZXR1cm4gbm9kZXM7XG59O1xuXG52YXIgbm9kZV9kZXNjZW5kYW50cyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgbm9kZXMgPSBbXTtcbiAgdGhpcy5lYWNoKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBub2Rlcy5wdXNoKG5vZGUpO1xuICB9KTtcbiAgcmV0dXJuIG5vZGVzO1xufTtcblxudmFyIG5vZGVfbGVhdmVzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBsZWF2ZXMgPSBbXTtcbiAgdGhpcy5lYWNoQmVmb3JlKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpZiAoIW5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIGxlYXZlcy5wdXNoKG5vZGUpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBsZWF2ZXM7XG59O1xuXG52YXIgbm9kZV9saW5rcyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcm9vdCA9IHRoaXMsIGxpbmtzID0gW107XG4gIHJvb3QuZWFjaChmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKG5vZGUgIT09IHJvb3QpIHsgLy8gRG9u4oCZdCBpbmNsdWRlIHRoZSByb2904oCZcyBwYXJlbnQsIGlmIGFueS5cbiAgICAgIGxpbmtzLnB1c2goe3NvdXJjZTogbm9kZS5wYXJlbnQsIHRhcmdldDogbm9kZX0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBsaW5rcztcbn07XG5cbmZ1bmN0aW9uIGhpZXJhcmNoeShkYXRhLCBjaGlsZHJlbikge1xuICB2YXIgcm9vdCA9IG5ldyBOb2RlKGRhdGEpLFxuICAgICAgdmFsdWVkID0gK2RhdGEudmFsdWUgJiYgKHJvb3QudmFsdWUgPSBkYXRhLnZhbHVlKSxcbiAgICAgIG5vZGUsXG4gICAgICBub2RlcyA9IFtyb290XSxcbiAgICAgIGNoaWxkLFxuICAgICAgY2hpbGRzLFxuICAgICAgaSxcbiAgICAgIG47XG5cbiAgaWYgKGNoaWxkcmVuID09IG51bGwpIGNoaWxkcmVuID0gZGVmYXVsdENoaWxkcmVuO1xuXG4gIHdoaWxlIChub2RlID0gbm9kZXMucG9wKCkpIHtcbiAgICBpZiAodmFsdWVkKSBub2RlLnZhbHVlID0gK25vZGUuZGF0YS52YWx1ZTtcbiAgICBpZiAoKGNoaWxkcyA9IGNoaWxkcmVuKG5vZGUuZGF0YSkpICYmIChuID0gY2hpbGRzLmxlbmd0aCkpIHtcbiAgICAgIG5vZGUuY2hpbGRyZW4gPSBuZXcgQXJyYXkobik7XG4gICAgICBmb3IgKGkgPSBuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgbm9kZXMucHVzaChjaGlsZCA9IG5vZGUuY2hpbGRyZW5baV0gPSBuZXcgTm9kZShjaGlsZHNbaV0pKTtcbiAgICAgICAgY2hpbGQucGFyZW50ID0gbm9kZTtcbiAgICAgICAgY2hpbGQuZGVwdGggPSBub2RlLmRlcHRoICsgMTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcm9vdC5lYWNoQmVmb3JlKGNvbXB1dGVIZWlnaHQpO1xufVxuXG5mdW5jdGlvbiBub2RlX2NvcHkoKSB7XG4gIHJldHVybiBoaWVyYXJjaHkodGhpcykuZWFjaEJlZm9yZShjb3B5RGF0YSk7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRDaGlsZHJlbihkKSB7XG4gIHJldHVybiBkLmNoaWxkcmVuO1xufVxuXG5mdW5jdGlvbiBjb3B5RGF0YShub2RlKSB7XG4gIG5vZGUuZGF0YSA9IG5vZGUuZGF0YS5kYXRhO1xufVxuXG5mdW5jdGlvbiBjb21wdXRlSGVpZ2h0KG5vZGUpIHtcbiAgdmFyIGhlaWdodCA9IDA7XG4gIGRvIG5vZGUuaGVpZ2h0ID0gaGVpZ2h0O1xuICB3aGlsZSAoKG5vZGUgPSBub2RlLnBhcmVudCkgJiYgKG5vZGUuaGVpZ2h0IDwgKytoZWlnaHQpKTtcbn1cblxuZnVuY3Rpb24gTm9kZShkYXRhKSB7XG4gIHRoaXMuZGF0YSA9IGRhdGE7XG4gIHRoaXMuZGVwdGggPVxuICB0aGlzLmhlaWdodCA9IDA7XG4gIHRoaXMucGFyZW50ID0gbnVsbDtcbn1cblxuTm9kZS5wcm90b3R5cGUgPSBoaWVyYXJjaHkucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogTm9kZSxcbiAgY291bnQ6IG5vZGVfY291bnQsXG4gIGVhY2g6IG5vZGVfZWFjaCxcbiAgZWFjaEFmdGVyOiBub2RlX2VhY2hBZnRlcixcbiAgZWFjaEJlZm9yZTogbm9kZV9lYWNoQmVmb3JlLFxuICBzdW06IG5vZGVfc3VtLFxuICBzb3J0OiBub2RlX3NvcnQsXG4gIHBhdGg6IG5vZGVfcGF0aCxcbiAgYW5jZXN0b3JzOiBub2RlX2FuY2VzdG9ycyxcbiAgZGVzY2VuZGFudHM6IG5vZGVfZGVzY2VuZGFudHMsXG4gIGxlYXZlczogbm9kZV9sZWF2ZXMsXG4gIGxpbmtzOiBub2RlX2xpbmtzLFxuICBjb3B5OiBub2RlX2NvcHlcbn07XG5cbnZhciBzbGljZSQzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuXG5mdW5jdGlvbiBzaHVmZmxlJDEoYXJyYXkpIHtcbiAgdmFyIG0gPSBhcnJheS5sZW5ndGgsXG4gICAgICB0LFxuICAgICAgaTtcblxuICB3aGlsZSAobSkge1xuICAgIGkgPSBNYXRoLnJhbmRvbSgpICogbS0tIHwgMDtcbiAgICB0ID0gYXJyYXlbbV07XG4gICAgYXJyYXlbbV0gPSBhcnJheVtpXTtcbiAgICBhcnJheVtpXSA9IHQ7XG4gIH1cblxuICByZXR1cm4gYXJyYXk7XG59XG5cbnZhciBlbmNsb3NlID0gZnVuY3Rpb24oY2lyY2xlcykge1xuICB2YXIgaSA9IDAsIG4gPSAoY2lyY2xlcyA9IHNodWZmbGUkMShzbGljZSQzLmNhbGwoY2lyY2xlcykpKS5sZW5ndGgsIEIgPSBbXSwgcCwgZTtcblxuICB3aGlsZSAoaSA8IG4pIHtcbiAgICBwID0gY2lyY2xlc1tpXTtcbiAgICBpZiAoZSAmJiBlbmNsb3Nlc1dlYWsoZSwgcCkpICsraTtcbiAgICBlbHNlIGUgPSBlbmNsb3NlQmFzaXMoQiA9IGV4dGVuZEJhc2lzKEIsIHApKSwgaSA9IDA7XG4gIH1cblxuICByZXR1cm4gZTtcbn07XG5cbmZ1bmN0aW9uIGV4dGVuZEJhc2lzKEIsIHApIHtcbiAgdmFyIGksIGo7XG5cbiAgaWYgKGVuY2xvc2VzV2Vha0FsbChwLCBCKSkgcmV0dXJuIFtwXTtcblxuICAvLyBJZiB3ZSBnZXQgaGVyZSB0aGVuIEIgbXVzdCBoYXZlIGF0IGxlYXN0IG9uZSBlbGVtZW50LlxuICBmb3IgKGkgPSAwOyBpIDwgQi5sZW5ndGg7ICsraSkge1xuICAgIGlmIChlbmNsb3Nlc05vdChwLCBCW2ldKVxuICAgICAgICAmJiBlbmNsb3Nlc1dlYWtBbGwoZW5jbG9zZUJhc2lzMihCW2ldLCBwKSwgQikpIHtcbiAgICAgIHJldHVybiBbQltpXSwgcF07XG4gICAgfVxuICB9XG5cbiAgLy8gSWYgd2UgZ2V0IGhlcmUgdGhlbiBCIG11c3QgaGF2ZSBhdCBsZWFzdCB0d28gZWxlbWVudHMuXG4gIGZvciAoaSA9IDA7IGkgPCBCLmxlbmd0aCAtIDE7ICsraSkge1xuICAgIGZvciAoaiA9IGkgKyAxOyBqIDwgQi5sZW5ndGg7ICsraikge1xuICAgICAgaWYgKGVuY2xvc2VzTm90KGVuY2xvc2VCYXNpczIoQltpXSwgQltqXSksIHApXG4gICAgICAgICAgJiYgZW5jbG9zZXNOb3QoZW5jbG9zZUJhc2lzMihCW2ldLCBwKSwgQltqXSlcbiAgICAgICAgICAmJiBlbmNsb3Nlc05vdChlbmNsb3NlQmFzaXMyKEJbal0sIHApLCBCW2ldKVxuICAgICAgICAgICYmIGVuY2xvc2VzV2Vha0FsbChlbmNsb3NlQmFzaXMzKEJbaV0sIEJbal0sIHApLCBCKSkge1xuICAgICAgICByZXR1cm4gW0JbaV0sIEJbal0sIHBdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIElmIHdlIGdldCBoZXJlIHRoZW4gc29tZXRoaW5nIGlzIHZlcnkgd3JvbmcuXG4gIHRocm93IG5ldyBFcnJvcjtcbn1cblxuZnVuY3Rpb24gZW5jbG9zZXNOb3QoYSwgYikge1xuICB2YXIgZHIgPSBhLnIgLSBiLnIsIGR4ID0gYi54IC0gYS54LCBkeSA9IGIueSAtIGEueTtcbiAgcmV0dXJuIGRyIDwgMCB8fCBkciAqIGRyIDwgZHggKiBkeCArIGR5ICogZHk7XG59XG5cbmZ1bmN0aW9uIGVuY2xvc2VzV2VhayhhLCBiKSB7XG4gIHZhciBkciA9IGEuciAtIGIuciArIDFlLTYsIGR4ID0gYi54IC0gYS54LCBkeSA9IGIueSAtIGEueTtcbiAgcmV0dXJuIGRyID4gMCAmJiBkciAqIGRyID4gZHggKiBkeCArIGR5ICogZHk7XG59XG5cbmZ1bmN0aW9uIGVuY2xvc2VzV2Vha0FsbChhLCBCKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgQi5sZW5ndGg7ICsraSkge1xuICAgIGlmICghZW5jbG9zZXNXZWFrKGEsIEJbaV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBlbmNsb3NlQmFzaXMoQikge1xuICBzd2l0Y2ggKEIubGVuZ3RoKSB7XG4gICAgY2FzZSAxOiByZXR1cm4gZW5jbG9zZUJhc2lzMShCWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiBlbmNsb3NlQmFzaXMyKEJbMF0sIEJbMV0pO1xuICAgIGNhc2UgMzogcmV0dXJuIGVuY2xvc2VCYXNpczMoQlswXSwgQlsxXSwgQlsyXSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW5jbG9zZUJhc2lzMShhKSB7XG4gIHJldHVybiB7XG4gICAgeDogYS54LFxuICAgIHk6IGEueSxcbiAgICByOiBhLnJcbiAgfTtcbn1cblxuZnVuY3Rpb24gZW5jbG9zZUJhc2lzMihhLCBiKSB7XG4gIHZhciB4MSA9IGEueCwgeTEgPSBhLnksIHIxID0gYS5yLFxuICAgICAgeDIgPSBiLngsIHkyID0gYi55LCByMiA9IGIucixcbiAgICAgIHgyMSA9IHgyIC0geDEsIHkyMSA9IHkyIC0geTEsIHIyMSA9IHIyIC0gcjEsXG4gICAgICBsID0gTWF0aC5zcXJ0KHgyMSAqIHgyMSArIHkyMSAqIHkyMSk7XG4gIHJldHVybiB7XG4gICAgeDogKHgxICsgeDIgKyB4MjEgLyBsICogcjIxKSAvIDIsXG4gICAgeTogKHkxICsgeTIgKyB5MjEgLyBsICogcjIxKSAvIDIsXG4gICAgcjogKGwgKyByMSArIHIyKSAvIDJcbiAgfTtcbn1cblxuZnVuY3Rpb24gZW5jbG9zZUJhc2lzMyhhLCBiLCBjKSB7XG4gIHZhciB4MSA9IGEueCwgeTEgPSBhLnksIHIxID0gYS5yLFxuICAgICAgeDIgPSBiLngsIHkyID0gYi55LCByMiA9IGIucixcbiAgICAgIHgzID0gYy54LCB5MyA9IGMueSwgcjMgPSBjLnIsXG4gICAgICBhMiA9IHgxIC0geDIsXG4gICAgICBhMyA9IHgxIC0geDMsXG4gICAgICBiMiA9IHkxIC0geTIsXG4gICAgICBiMyA9IHkxIC0geTMsXG4gICAgICBjMiA9IHIyIC0gcjEsXG4gICAgICBjMyA9IHIzIC0gcjEsXG4gICAgICBkMSA9IHgxICogeDEgKyB5MSAqIHkxIC0gcjEgKiByMSxcbiAgICAgIGQyID0gZDEgLSB4MiAqIHgyIC0geTIgKiB5MiArIHIyICogcjIsXG4gICAgICBkMyA9IGQxIC0geDMgKiB4MyAtIHkzICogeTMgKyByMyAqIHIzLFxuICAgICAgYWIgPSBhMyAqIGIyIC0gYTIgKiBiMyxcbiAgICAgIHhhID0gKGIyICogZDMgLSBiMyAqIGQyKSAvIChhYiAqIDIpIC0geDEsXG4gICAgICB4YiA9IChiMyAqIGMyIC0gYjIgKiBjMykgLyBhYixcbiAgICAgIHlhID0gKGEzICogZDIgLSBhMiAqIGQzKSAvIChhYiAqIDIpIC0geTEsXG4gICAgICB5YiA9IChhMiAqIGMzIC0gYTMgKiBjMikgLyBhYixcbiAgICAgIEEgPSB4YiAqIHhiICsgeWIgKiB5YiAtIDEsXG4gICAgICBCID0gMiAqIChyMSArIHhhICogeGIgKyB5YSAqIHliKSxcbiAgICAgIEMgPSB4YSAqIHhhICsgeWEgKiB5YSAtIHIxICogcjEsXG4gICAgICByID0gLShBID8gKEIgKyBNYXRoLnNxcnQoQiAqIEIgLSA0ICogQSAqIEMpKSAvICgyICogQSkgOiBDIC8gQik7XG4gIHJldHVybiB7XG4gICAgeDogeDEgKyB4YSArIHhiICogcixcbiAgICB5OiB5MSArIHlhICsgeWIgKiByLFxuICAgIHI6IHJcbiAgfTtcbn1cblxuZnVuY3Rpb24gcGxhY2UoYSwgYiwgYykge1xuICB2YXIgYXggPSBhLngsXG4gICAgICBheSA9IGEueSxcbiAgICAgIGRhID0gYi5yICsgYy5yLFxuICAgICAgZGIgPSBhLnIgKyBjLnIsXG4gICAgICBkeCA9IGIueCAtIGF4LFxuICAgICAgZHkgPSBiLnkgLSBheSxcbiAgICAgIGRjID0gZHggKiBkeCArIGR5ICogZHk7XG4gIGlmIChkYykge1xuICAgIHZhciB4ID0gMC41ICsgKChkYiAqPSBkYikgLSAoZGEgKj0gZGEpKSAvICgyICogZGMpLFxuICAgICAgICB5ID0gTWF0aC5zcXJ0KE1hdGgubWF4KDAsIDIgKiBkYSAqIChkYiArIGRjKSAtIChkYiAtPSBkYykgKiBkYiAtIGRhICogZGEpKSAvICgyICogZGMpO1xuICAgIGMueCA9IGF4ICsgeCAqIGR4ICsgeSAqIGR5O1xuICAgIGMueSA9IGF5ICsgeCAqIGR5IC0geSAqIGR4O1xuICB9IGVsc2Uge1xuICAgIGMueCA9IGF4ICsgZGI7XG4gICAgYy55ID0gYXk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW50ZXJzZWN0cyhhLCBiKSB7XG4gIHZhciBkeCA9IGIueCAtIGEueCxcbiAgICAgIGR5ID0gYi55IC0gYS55LFxuICAgICAgZHIgPSBhLnIgKyBiLnI7XG4gIHJldHVybiBkciAqIGRyIC0gMWUtNiA+IGR4ICogZHggKyBkeSAqIGR5O1xufVxuXG5mdW5jdGlvbiBzY29yZShub2RlKSB7XG4gIHZhciBhID0gbm9kZS5fLFxuICAgICAgYiA9IG5vZGUubmV4dC5fLFxuICAgICAgYWIgPSBhLnIgKyBiLnIsXG4gICAgICBkeCA9IChhLnggKiBiLnIgKyBiLnggKiBhLnIpIC8gYWIsXG4gICAgICBkeSA9IChhLnkgKiBiLnIgKyBiLnkgKiBhLnIpIC8gYWI7XG4gIHJldHVybiBkeCAqIGR4ICsgZHkgKiBkeTtcbn1cblxuZnVuY3Rpb24gTm9kZSQxKGNpcmNsZSkge1xuICB0aGlzLl8gPSBjaXJjbGU7XG4gIHRoaXMubmV4dCA9IG51bGw7XG4gIHRoaXMucHJldmlvdXMgPSBudWxsO1xufVxuXG5mdW5jdGlvbiBwYWNrRW5jbG9zZShjaXJjbGVzKSB7XG4gIGlmICghKG4gPSBjaXJjbGVzLmxlbmd0aCkpIHJldHVybiAwO1xuXG4gIHZhciBhLCBiLCBjLCBuLCBhYSwgY2EsIGksIGosIGssIHNqLCBzaztcblxuICAvLyBQbGFjZSB0aGUgZmlyc3QgY2lyY2xlLlxuICBhID0gY2lyY2xlc1swXSwgYS54ID0gMCwgYS55ID0gMDtcbiAgaWYgKCEobiA+IDEpKSByZXR1cm4gYS5yO1xuXG4gIC8vIFBsYWNlIHRoZSBzZWNvbmQgY2lyY2xlLlxuICBiID0gY2lyY2xlc1sxXSwgYS54ID0gLWIuciwgYi54ID0gYS5yLCBiLnkgPSAwO1xuICBpZiAoIShuID4gMikpIHJldHVybiBhLnIgKyBiLnI7XG5cbiAgLy8gUGxhY2UgdGhlIHRoaXJkIGNpcmNsZS5cbiAgcGxhY2UoYiwgYSwgYyA9IGNpcmNsZXNbMl0pO1xuXG4gIC8vIEluaXRpYWxpemUgdGhlIGZyb250LWNoYWluIHVzaW5nIHRoZSBmaXJzdCB0aHJlZSBjaXJjbGVzIGEsIGIgYW5kIGMuXG4gIGEgPSBuZXcgTm9kZSQxKGEpLCBiID0gbmV3IE5vZGUkMShiKSwgYyA9IG5ldyBOb2RlJDEoYyk7XG4gIGEubmV4dCA9IGMucHJldmlvdXMgPSBiO1xuICBiLm5leHQgPSBhLnByZXZpb3VzID0gYztcbiAgYy5uZXh0ID0gYi5wcmV2aW91cyA9IGE7XG5cbiAgLy8gQXR0ZW1wdCB0byBwbGFjZSBlYWNoIHJlbWFpbmluZyBjaXJjbGXigKZcbiAgcGFjazogZm9yIChpID0gMzsgaSA8IG47ICsraSkge1xuICAgIHBsYWNlKGEuXywgYi5fLCBjID0gY2lyY2xlc1tpXSksIGMgPSBuZXcgTm9kZSQxKGMpO1xuXG4gICAgLy8gRmluZCB0aGUgY2xvc2VzdCBpbnRlcnNlY3RpbmcgY2lyY2xlIG9uIHRoZSBmcm9udC1jaGFpbiwgaWYgYW55LlxuICAgIC8vIOKAnENsb3NlbmVzc+KAnSBpcyBkZXRlcm1pbmVkIGJ5IGxpbmVhciBkaXN0YW5jZSBhbG9uZyB0aGUgZnJvbnQtY2hhaW4uXG4gICAgLy8g4oCcQWhlYWTigJ0gb3Ig4oCcYmVoaW5k4oCdIGlzIGxpa2V3aXNlIGRldGVybWluZWQgYnkgbGluZWFyIGRpc3RhbmNlLlxuICAgIGogPSBiLm5leHQsIGsgPSBhLnByZXZpb3VzLCBzaiA9IGIuXy5yLCBzayA9IGEuXy5yO1xuICAgIGRvIHtcbiAgICAgIGlmIChzaiA8PSBzaykge1xuICAgICAgICBpZiAoaW50ZXJzZWN0cyhqLl8sIGMuXykpIHtcbiAgICAgICAgICBiID0gaiwgYS5uZXh0ID0gYiwgYi5wcmV2aW91cyA9IGEsIC0taTtcbiAgICAgICAgICBjb250aW51ZSBwYWNrO1xuICAgICAgICB9XG4gICAgICAgIHNqICs9IGouXy5yLCBqID0gai5uZXh0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGludGVyc2VjdHMoay5fLCBjLl8pKSB7XG4gICAgICAgICAgYSA9IGssIGEubmV4dCA9IGIsIGIucHJldmlvdXMgPSBhLCAtLWk7XG4gICAgICAgICAgY29udGludWUgcGFjaztcbiAgICAgICAgfVxuICAgICAgICBzayArPSBrLl8uciwgayA9IGsucHJldmlvdXM7XG4gICAgICB9XG4gICAgfSB3aGlsZSAoaiAhPT0gay5uZXh0KTtcblxuICAgIC8vIFN1Y2Nlc3MhIEluc2VydCB0aGUgbmV3IGNpcmNsZSBjIGJldHdlZW4gYSBhbmQgYi5cbiAgICBjLnByZXZpb3VzID0gYSwgYy5uZXh0ID0gYiwgYS5uZXh0ID0gYi5wcmV2aW91cyA9IGIgPSBjO1xuXG4gICAgLy8gQ29tcHV0ZSB0aGUgbmV3IGNsb3Nlc3QgY2lyY2xlIHBhaXIgdG8gdGhlIGNlbnRyb2lkLlxuICAgIGFhID0gc2NvcmUoYSk7XG4gICAgd2hpbGUgKChjID0gYy5uZXh0KSAhPT0gYikge1xuICAgICAgaWYgKChjYSA9IHNjb3JlKGMpKSA8IGFhKSB7XG4gICAgICAgIGEgPSBjLCBhYSA9IGNhO1xuICAgICAgfVxuICAgIH1cbiAgICBiID0gYS5uZXh0O1xuICB9XG5cbiAgLy8gQ29tcHV0ZSB0aGUgZW5jbG9zaW5nIGNpcmNsZSBvZiB0aGUgZnJvbnQgY2hhaW4uXG4gIGEgPSBbYi5fXSwgYyA9IGI7IHdoaWxlICgoYyA9IGMubmV4dCkgIT09IGIpIGEucHVzaChjLl8pOyBjID0gZW5jbG9zZShhKTtcblxuICAvLyBUcmFuc2xhdGUgdGhlIGNpcmNsZXMgdG8gcHV0IHRoZSBlbmNsb3NpbmcgY2lyY2xlIGFyb3VuZCB0aGUgb3JpZ2luLlxuICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBhID0gY2lyY2xlc1tpXSwgYS54IC09IGMueCwgYS55IC09IGMueTtcblxuICByZXR1cm4gYy5yO1xufVxuXG52YXIgc2libGluZ3MgPSBmdW5jdGlvbihjaXJjbGVzKSB7XG4gIHBhY2tFbmNsb3NlKGNpcmNsZXMpO1xuICByZXR1cm4gY2lyY2xlcztcbn07XG5cbmZ1bmN0aW9uIG9wdGlvbmFsKGYpIHtcbiAgcmV0dXJuIGYgPT0gbnVsbCA/IG51bGwgOiByZXF1aXJlZChmKTtcbn1cblxuZnVuY3Rpb24gcmVxdWlyZWQoZikge1xuICBpZiAodHlwZW9mIGYgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gZjtcbn1cblxuZnVuY3Rpb24gY29uc3RhbnRaZXJvKCkge1xuICByZXR1cm4gMDtcbn1cblxudmFyIGNvbnN0YW50JDggPSBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn07XG5cbmZ1bmN0aW9uIGRlZmF1bHRSYWRpdXMkMShkKSB7XG4gIHJldHVybiBNYXRoLnNxcnQoZC52YWx1ZSk7XG59XG5cbnZhciBpbmRleCQyID0gZnVuY3Rpb24oKSB7XG4gIHZhciByYWRpdXMgPSBudWxsLFxuICAgICAgZHggPSAxLFxuICAgICAgZHkgPSAxLFxuICAgICAgcGFkZGluZyA9IGNvbnN0YW50WmVybztcblxuICBmdW5jdGlvbiBwYWNrKHJvb3QpIHtcbiAgICByb290LnggPSBkeCAvIDIsIHJvb3QueSA9IGR5IC8gMjtcbiAgICBpZiAocmFkaXVzKSB7XG4gICAgICByb290LmVhY2hCZWZvcmUocmFkaXVzTGVhZihyYWRpdXMpKVxuICAgICAgICAgIC5lYWNoQWZ0ZXIocGFja0NoaWxkcmVuKHBhZGRpbmcsIDAuNSkpXG4gICAgICAgICAgLmVhY2hCZWZvcmUodHJhbnNsYXRlQ2hpbGQoMSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByb290LmVhY2hCZWZvcmUocmFkaXVzTGVhZihkZWZhdWx0UmFkaXVzJDEpKVxuICAgICAgICAgIC5lYWNoQWZ0ZXIocGFja0NoaWxkcmVuKGNvbnN0YW50WmVybywgMSkpXG4gICAgICAgICAgLmVhY2hBZnRlcihwYWNrQ2hpbGRyZW4ocGFkZGluZywgcm9vdC5yIC8gTWF0aC5taW4oZHgsIGR5KSkpXG4gICAgICAgICAgLmVhY2hCZWZvcmUodHJhbnNsYXRlQ2hpbGQoTWF0aC5taW4oZHgsIGR5KSAvICgyICogcm9vdC5yKSkpO1xuICAgIH1cbiAgICByZXR1cm4gcm9vdDtcbiAgfVxuXG4gIHBhY2sucmFkaXVzID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhZGl1cyA9IG9wdGlvbmFsKHgpLCBwYWNrKSA6IHJhZGl1cztcbiAgfTtcblxuICBwYWNrLnNpemUgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZHggPSAreFswXSwgZHkgPSAreFsxXSwgcGFjaykgOiBbZHgsIGR5XTtcbiAgfTtcblxuICBwYWNrLnBhZGRpbmcgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZyA9IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4IDogY29uc3RhbnQkOCgreCksIHBhY2spIDogcGFkZGluZztcbiAgfTtcblxuICByZXR1cm4gcGFjaztcbn07XG5cbmZ1bmN0aW9uIHJhZGl1c0xlYWYocmFkaXVzKSB7XG4gIHJldHVybiBmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKCFub2RlLmNoaWxkcmVuKSB7XG4gICAgICBub2RlLnIgPSBNYXRoLm1heCgwLCArcmFkaXVzKG5vZGUpIHx8IDApO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gcGFja0NoaWxkcmVuKHBhZGRpbmcsIGspIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpZiAoY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuKSB7XG4gICAgICB2YXIgY2hpbGRyZW4sXG4gICAgICAgICAgaSxcbiAgICAgICAgICBuID0gY2hpbGRyZW4ubGVuZ3RoLFxuICAgICAgICAgIHIgPSBwYWRkaW5nKG5vZGUpICogayB8fCAwLFxuICAgICAgICAgIGU7XG5cbiAgICAgIGlmIChyKSBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBjaGlsZHJlbltpXS5yICs9IHI7XG4gICAgICBlID0gcGFja0VuY2xvc2UoY2hpbGRyZW4pO1xuICAgICAgaWYgKHIpIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIGNoaWxkcmVuW2ldLnIgLT0gcjtcbiAgICAgIG5vZGUuciA9IGUgKyByO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gdHJhbnNsYXRlQ2hpbGQoaykge1xuICByZXR1cm4gZnVuY3Rpb24obm9kZSkge1xuICAgIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudDtcbiAgICBub2RlLnIgKj0gaztcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBub2RlLnggPSBwYXJlbnQueCArIGsgKiBub2RlLng7XG4gICAgICBub2RlLnkgPSBwYXJlbnQueSArIGsgKiBub2RlLnk7XG4gICAgfVxuICB9O1xufVxuXG52YXIgcm91bmROb2RlID0gZnVuY3Rpb24obm9kZSkge1xuICBub2RlLngwID0gTWF0aC5yb3VuZChub2RlLngwKTtcbiAgbm9kZS55MCA9IE1hdGgucm91bmQobm9kZS55MCk7XG4gIG5vZGUueDEgPSBNYXRoLnJvdW5kKG5vZGUueDEpO1xuICBub2RlLnkxID0gTWF0aC5yb3VuZChub2RlLnkxKTtcbn07XG5cbnZhciB0cmVlbWFwRGljZSA9IGZ1bmN0aW9uKHBhcmVudCwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgdmFyIG5vZGVzID0gcGFyZW50LmNoaWxkcmVuLFxuICAgICAgbm9kZSxcbiAgICAgIGkgPSAtMSxcbiAgICAgIG4gPSBub2Rlcy5sZW5ndGgsXG4gICAgICBrID0gcGFyZW50LnZhbHVlICYmICh4MSAtIHgwKSAvIHBhcmVudC52YWx1ZTtcblxuICB3aGlsZSAoKytpIDwgbikge1xuICAgIG5vZGUgPSBub2Rlc1tpXSwgbm9kZS55MCA9IHkwLCBub2RlLnkxID0geTE7XG4gICAgbm9kZS54MCA9IHgwLCBub2RlLngxID0geDAgKz0gbm9kZS52YWx1ZSAqIGs7XG4gIH1cbn07XG5cbnZhciBwYXJ0aXRpb24gPSBmdW5jdGlvbigpIHtcbiAgdmFyIGR4ID0gMSxcbiAgICAgIGR5ID0gMSxcbiAgICAgIHBhZGRpbmcgPSAwLFxuICAgICAgcm91bmQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBwYXJ0aXRpb24ocm9vdCkge1xuICAgIHZhciBuID0gcm9vdC5oZWlnaHQgKyAxO1xuICAgIHJvb3QueDAgPVxuICAgIHJvb3QueTAgPSBwYWRkaW5nO1xuICAgIHJvb3QueDEgPSBkeDtcbiAgICByb290LnkxID0gZHkgLyBuO1xuICAgIHJvb3QuZWFjaEJlZm9yZShwb3NpdGlvbk5vZGUoZHksIG4pKTtcbiAgICBpZiAocm91bmQpIHJvb3QuZWFjaEJlZm9yZShyb3VuZE5vZGUpO1xuICAgIHJldHVybiByb290O1xuICB9XG5cbiAgZnVuY3Rpb24gcG9zaXRpb25Ob2RlKGR5LCBuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIGlmIChub2RlLmNoaWxkcmVuKSB7XG4gICAgICAgIHRyZWVtYXBEaWNlKG5vZGUsIG5vZGUueDAsIGR5ICogKG5vZGUuZGVwdGggKyAxKSAvIG4sIG5vZGUueDEsIGR5ICogKG5vZGUuZGVwdGggKyAyKSAvIG4pO1xuICAgICAgfVxuICAgICAgdmFyIHgwID0gbm9kZS54MCxcbiAgICAgICAgICB5MCA9IG5vZGUueTAsXG4gICAgICAgICAgeDEgPSBub2RlLngxIC0gcGFkZGluZyxcbiAgICAgICAgICB5MSA9IG5vZGUueTEgLSBwYWRkaW5nO1xuICAgICAgaWYgKHgxIDwgeDApIHgwID0geDEgPSAoeDAgKyB4MSkgLyAyO1xuICAgICAgaWYgKHkxIDwgeTApIHkwID0geTEgPSAoeTAgKyB5MSkgLyAyO1xuICAgICAgbm9kZS54MCA9IHgwO1xuICAgICAgbm9kZS55MCA9IHkwO1xuICAgICAgbm9kZS54MSA9IHgxO1xuICAgICAgbm9kZS55MSA9IHkxO1xuICAgIH07XG4gIH1cblxuICBwYXJ0aXRpb24ucm91bmQgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocm91bmQgPSAhIXgsIHBhcnRpdGlvbikgOiByb3VuZDtcbiAgfTtcblxuICBwYXJ0aXRpb24uc2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkeCA9ICt4WzBdLCBkeSA9ICt4WzFdLCBwYXJ0aXRpb24pIDogW2R4LCBkeV07XG4gIH07XG5cbiAgcGFydGl0aW9uLnBhZGRpbmcgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZyA9ICt4LCBwYXJ0aXRpb24pIDogcGFkZGluZztcbiAgfTtcblxuICByZXR1cm4gcGFydGl0aW9uO1xufTtcblxudmFyIGtleVByZWZpeCQxID0gXCIkXCI7XG52YXIgcHJlcm9vdCA9IHtkZXB0aDogLTF9O1xudmFyIGFtYmlndW91cyA9IHt9O1xuXG5mdW5jdGlvbiBkZWZhdWx0SWQoZCkge1xuICByZXR1cm4gZC5pZDtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFBhcmVudElkKGQpIHtcbiAgcmV0dXJuIGQucGFyZW50SWQ7XG59XG5cbnZhciBzdHJhdGlmeSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaWQgPSBkZWZhdWx0SWQsXG4gICAgICBwYXJlbnRJZCA9IGRlZmF1bHRQYXJlbnRJZDtcblxuICBmdW5jdGlvbiBzdHJhdGlmeShkYXRhKSB7XG4gICAgdmFyIGQsXG4gICAgICAgIGksXG4gICAgICAgIG4gPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgcm9vdCxcbiAgICAgICAgcGFyZW50LFxuICAgICAgICBub2RlLFxuICAgICAgICBub2RlcyA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgbm9kZUlkLFxuICAgICAgICBub2RlS2V5LFxuICAgICAgICBub2RlQnlLZXkgPSB7fTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGQgPSBkYXRhW2ldLCBub2RlID0gbm9kZXNbaV0gPSBuZXcgTm9kZShkKTtcbiAgICAgIGlmICgobm9kZUlkID0gaWQoZCwgaSwgZGF0YSkpICE9IG51bGwgJiYgKG5vZGVJZCArPSBcIlwiKSkge1xuICAgICAgICBub2RlS2V5ID0ga2V5UHJlZml4JDEgKyAobm9kZS5pZCA9IG5vZGVJZCk7XG4gICAgICAgIG5vZGVCeUtleVtub2RlS2V5XSA9IG5vZGVLZXkgaW4gbm9kZUJ5S2V5ID8gYW1iaWd1b3VzIDogbm9kZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBub2RlID0gbm9kZXNbaV0sIG5vZGVJZCA9IHBhcmVudElkKGRhdGFbaV0sIGksIGRhdGEpO1xuICAgICAgaWYgKG5vZGVJZCA9PSBudWxsIHx8ICEobm9kZUlkICs9IFwiXCIpKSB7XG4gICAgICAgIGlmIChyb290KSB0aHJvdyBuZXcgRXJyb3IoXCJtdWx0aXBsZSByb290c1wiKTtcbiAgICAgICAgcm9vdCA9IG5vZGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJlbnQgPSBub2RlQnlLZXlba2V5UHJlZml4JDEgKyBub2RlSWRdO1xuICAgICAgICBpZiAoIXBhcmVudCkgdGhyb3cgbmV3IEVycm9yKFwibWlzc2luZzogXCIgKyBub2RlSWQpO1xuICAgICAgICBpZiAocGFyZW50ID09PSBhbWJpZ3VvdXMpIHRocm93IG5ldyBFcnJvcihcImFtYmlndW91czogXCIgKyBub2RlSWQpO1xuICAgICAgICBpZiAocGFyZW50LmNoaWxkcmVuKSBwYXJlbnQuY2hpbGRyZW4ucHVzaChub2RlKTtcbiAgICAgICAgZWxzZSBwYXJlbnQuY2hpbGRyZW4gPSBbbm9kZV07XG4gICAgICAgIG5vZGUucGFyZW50ID0gcGFyZW50O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghcm9vdCkgdGhyb3cgbmV3IEVycm9yKFwibm8gcm9vdFwiKTtcbiAgICByb290LnBhcmVudCA9IHByZXJvb3Q7XG4gICAgcm9vdC5lYWNoQmVmb3JlKGZ1bmN0aW9uKG5vZGUpIHsgbm9kZS5kZXB0aCA9IG5vZGUucGFyZW50LmRlcHRoICsgMTsgLS1uOyB9KS5lYWNoQmVmb3JlKGNvbXB1dGVIZWlnaHQpO1xuICAgIHJvb3QucGFyZW50ID0gbnVsbDtcbiAgICBpZiAobiA+IDApIHRocm93IG5ldyBFcnJvcihcImN5Y2xlXCIpO1xuXG4gICAgcmV0dXJuIHJvb3Q7XG4gIH1cblxuICBzdHJhdGlmeS5pZCA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpZCA9IHJlcXVpcmVkKHgpLCBzdHJhdGlmeSkgOiBpZDtcbiAgfTtcblxuICBzdHJhdGlmeS5wYXJlbnRJZCA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYXJlbnRJZCA9IHJlcXVpcmVkKHgpLCBzdHJhdGlmeSkgOiBwYXJlbnRJZDtcbiAgfTtcblxuICByZXR1cm4gc3RyYXRpZnk7XG59O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2VwYXJhdGlvbiQxKGEsIGIpIHtcbiAgcmV0dXJuIGEucGFyZW50ID09PSBiLnBhcmVudCA/IDEgOiAyO1xufVxuXG4vLyBmdW5jdGlvbiByYWRpYWxTZXBhcmF0aW9uKGEsIGIpIHtcbi8vICAgcmV0dXJuIChhLnBhcmVudCA9PT0gYi5wYXJlbnQgPyAxIDogMikgLyBhLmRlcHRoO1xuLy8gfVxuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gdHJhdmVyc2UgdGhlIGxlZnQgY29udG91ciBvZiBhIHN1YnRyZWUgKG9yXG4vLyBzdWJmb3Jlc3QpLiBJdCByZXR1cm5zIHRoZSBzdWNjZXNzb3Igb2YgdiBvbiB0aGlzIGNvbnRvdXIuIFRoaXMgc3VjY2Vzc29yIGlzXG4vLyBlaXRoZXIgZ2l2ZW4gYnkgdGhlIGxlZnRtb3N0IGNoaWxkIG9mIHYgb3IgYnkgdGhlIHRocmVhZCBvZiB2LiBUaGUgZnVuY3Rpb25cbi8vIHJldHVybnMgbnVsbCBpZiBhbmQgb25seSBpZiB2IGlzIG9uIHRoZSBoaWdoZXN0IGxldmVsIG9mIGl0cyBzdWJ0cmVlLlxuZnVuY3Rpb24gbmV4dExlZnQodikge1xuICB2YXIgY2hpbGRyZW4gPSB2LmNoaWxkcmVuO1xuICByZXR1cm4gY2hpbGRyZW4gPyBjaGlsZHJlblswXSA6IHYudDtcbn1cblxuLy8gVGhpcyBmdW5jdGlvbiB3b3JrcyBhbmFsb2dvdXNseSB0byBuZXh0TGVmdC5cbmZ1bmN0aW9uIG5leHRSaWdodCh2KSB7XG4gIHZhciBjaGlsZHJlbiA9IHYuY2hpbGRyZW47XG4gIHJldHVybiBjaGlsZHJlbiA/IGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdIDogdi50O1xufVxuXG4vLyBTaGlmdHMgdGhlIGN1cnJlbnQgc3VidHJlZSByb290ZWQgYXQgdysuIFRoaXMgaXMgZG9uZSBieSBpbmNyZWFzaW5nXG4vLyBwcmVsaW0odyspIGFuZCBtb2QodyspIGJ5IHNoaWZ0LlxuZnVuY3Rpb24gbW92ZVN1YnRyZWUod20sIHdwLCBzaGlmdCkge1xuICB2YXIgY2hhbmdlID0gc2hpZnQgLyAod3AuaSAtIHdtLmkpO1xuICB3cC5jIC09IGNoYW5nZTtcbiAgd3AucyArPSBzaGlmdDtcbiAgd20uYyArPSBjaGFuZ2U7XG4gIHdwLnogKz0gc2hpZnQ7XG4gIHdwLm0gKz0gc2hpZnQ7XG59XG5cbi8vIEFsbCBvdGhlciBzaGlmdHMsIGFwcGxpZWQgdG8gdGhlIHNtYWxsZXIgc3VidHJlZXMgYmV0d2VlbiB3LSBhbmQgdyssIGFyZVxuLy8gcGVyZm9ybWVkIGJ5IHRoaXMgZnVuY3Rpb24uIFRvIHByZXBhcmUgdGhlIHNoaWZ0cywgd2UgaGF2ZSB0byBhZGp1c3Rcbi8vIGNoYW5nZSh3KyksIHNoaWZ0KHcrKSwgYW5kIGNoYW5nZSh3LSkuXG5mdW5jdGlvbiBleGVjdXRlU2hpZnRzKHYpIHtcbiAgdmFyIHNoaWZ0ID0gMCxcbiAgICAgIGNoYW5nZSA9IDAsXG4gICAgICBjaGlsZHJlbiA9IHYuY2hpbGRyZW4sXG4gICAgICBpID0gY2hpbGRyZW4ubGVuZ3RoLFxuICAgICAgdztcbiAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgdyA9IGNoaWxkcmVuW2ldO1xuICAgIHcueiArPSBzaGlmdDtcbiAgICB3Lm0gKz0gc2hpZnQ7XG4gICAgc2hpZnQgKz0gdy5zICsgKGNoYW5nZSArPSB3LmMpO1xuICB9XG59XG5cbi8vIElmIHZpLeKAmXMgYW5jZXN0b3IgaXMgYSBzaWJsaW5nIG9mIHYsIHJldHVybnMgdmkt4oCZcyBhbmNlc3Rvci4gT3RoZXJ3aXNlLFxuLy8gcmV0dXJucyB0aGUgc3BlY2lmaWVkIChkZWZhdWx0KSBhbmNlc3Rvci5cbmZ1bmN0aW9uIG5leHRBbmNlc3Rvcih2aW0sIHYsIGFuY2VzdG9yKSB7XG4gIHJldHVybiB2aW0uYS5wYXJlbnQgPT09IHYucGFyZW50ID8gdmltLmEgOiBhbmNlc3Rvcjtcbn1cblxuZnVuY3Rpb24gVHJlZU5vZGUobm9kZSwgaSkge1xuICB0aGlzLl8gPSBub2RlO1xuICB0aGlzLnBhcmVudCA9IG51bGw7XG4gIHRoaXMuY2hpbGRyZW4gPSBudWxsO1xuICB0aGlzLkEgPSBudWxsOyAvLyBkZWZhdWx0IGFuY2VzdG9yXG4gIHRoaXMuYSA9IHRoaXM7IC8vIGFuY2VzdG9yXG4gIHRoaXMueiA9IDA7IC8vIHByZWxpbVxuICB0aGlzLm0gPSAwOyAvLyBtb2RcbiAgdGhpcy5jID0gMDsgLy8gY2hhbmdlXG4gIHRoaXMucyA9IDA7IC8vIHNoaWZ0XG4gIHRoaXMudCA9IG51bGw7IC8vIHRocmVhZFxuICB0aGlzLmkgPSBpOyAvLyBudW1iZXJcbn1cblxuVHJlZU5vZGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShOb2RlLnByb3RvdHlwZSk7XG5cbmZ1bmN0aW9uIHRyZWVSb290KHJvb3QpIHtcbiAgdmFyIHRyZWUgPSBuZXcgVHJlZU5vZGUocm9vdCwgMCksXG4gICAgICBub2RlLFxuICAgICAgbm9kZXMgPSBbdHJlZV0sXG4gICAgICBjaGlsZCxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgaSxcbiAgICAgIG47XG5cbiAgd2hpbGUgKG5vZGUgPSBub2Rlcy5wb3AoKSkge1xuICAgIGlmIChjaGlsZHJlbiA9IG5vZGUuXy5jaGlsZHJlbikge1xuICAgICAgbm9kZS5jaGlsZHJlbiA9IG5ldyBBcnJheShuID0gY2hpbGRyZW4ubGVuZ3RoKTtcbiAgICAgIGZvciAoaSA9IG4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICBub2Rlcy5wdXNoKGNoaWxkID0gbm9kZS5jaGlsZHJlbltpXSA9IG5ldyBUcmVlTm9kZShjaGlsZHJlbltpXSwgaSkpO1xuICAgICAgICBjaGlsZC5wYXJlbnQgPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gICh0cmVlLnBhcmVudCA9IG5ldyBUcmVlTm9kZShudWxsLCAwKSkuY2hpbGRyZW4gPSBbdHJlZV07XG4gIHJldHVybiB0cmVlO1xufVxuXG4vLyBOb2RlLWxpbmsgdHJlZSBkaWFncmFtIHVzaW5nIHRoZSBSZWluZ29sZC1UaWxmb3JkIFwidGlkeVwiIGFsZ29yaXRobVxudmFyIHRyZWUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHNlcGFyYXRpb24gPSBkZWZhdWx0U2VwYXJhdGlvbiQxLFxuICAgICAgZHggPSAxLFxuICAgICAgZHkgPSAxLFxuICAgICAgbm9kZVNpemUgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIHRyZWUocm9vdCkge1xuICAgIHZhciB0ID0gdHJlZVJvb3Qocm9vdCk7XG5cbiAgICAvLyBDb21wdXRlIHRoZSBsYXlvdXQgdXNpbmcgQnVjaGhlaW0gZXQgYWwu4oCZcyBhbGdvcml0aG0uXG4gICAgdC5lYWNoQWZ0ZXIoZmlyc3RXYWxrKSwgdC5wYXJlbnQubSA9IC10Lno7XG4gICAgdC5lYWNoQmVmb3JlKHNlY29uZFdhbGspO1xuXG4gICAgLy8gSWYgYSBmaXhlZCBub2RlIHNpemUgaXMgc3BlY2lmaWVkLCBzY2FsZSB4IGFuZCB5LlxuICAgIGlmIChub2RlU2l6ZSkgcm9vdC5lYWNoQmVmb3JlKHNpemVOb2RlKTtcblxuICAgIC8vIElmIGEgZml4ZWQgdHJlZSBzaXplIGlzIHNwZWNpZmllZCwgc2NhbGUgeCBhbmQgeSBiYXNlZCBvbiB0aGUgZXh0ZW50LlxuICAgIC8vIENvbXB1dGUgdGhlIGxlZnQtbW9zdCwgcmlnaHQtbW9zdCwgYW5kIGRlcHRoLW1vc3Qgbm9kZXMgZm9yIGV4dGVudHMuXG4gICAgZWxzZSB7XG4gICAgICB2YXIgbGVmdCA9IHJvb3QsXG4gICAgICAgICAgcmlnaHQgPSByb290LFxuICAgICAgICAgIGJvdHRvbSA9IHJvb3Q7XG4gICAgICByb290LmVhY2hCZWZvcmUoZnVuY3Rpb24obm9kZSkge1xuICAgICAgICBpZiAobm9kZS54IDwgbGVmdC54KSBsZWZ0ID0gbm9kZTtcbiAgICAgICAgaWYgKG5vZGUueCA+IHJpZ2h0LngpIHJpZ2h0ID0gbm9kZTtcbiAgICAgICAgaWYgKG5vZGUuZGVwdGggPiBib3R0b20uZGVwdGgpIGJvdHRvbSA9IG5vZGU7XG4gICAgICB9KTtcbiAgICAgIHZhciBzID0gbGVmdCA9PT0gcmlnaHQgPyAxIDogc2VwYXJhdGlvbihsZWZ0LCByaWdodCkgLyAyLFxuICAgICAgICAgIHR4ID0gcyAtIGxlZnQueCxcbiAgICAgICAgICBreCA9IGR4IC8gKHJpZ2h0LnggKyBzICsgdHgpLFxuICAgICAgICAgIGt5ID0gZHkgLyAoYm90dG9tLmRlcHRoIHx8IDEpO1xuICAgICAgcm9vdC5lYWNoQmVmb3JlKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgbm9kZS54ID0gKG5vZGUueCArIHR4KSAqIGt4O1xuICAgICAgICBub2RlLnkgPSBub2RlLmRlcHRoICoga3k7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcm9vdDtcbiAgfVxuXG4gIC8vIENvbXB1dGVzIGEgcHJlbGltaW5hcnkgeC1jb29yZGluYXRlIGZvciB2LiBCZWZvcmUgdGhhdCwgRklSU1QgV0FMSyBpc1xuICAvLyBhcHBsaWVkIHJlY3Vyc2l2ZWx5IHRvIHRoZSBjaGlsZHJlbiBvZiB2LCBhcyB3ZWxsIGFzIHRoZSBmdW5jdGlvblxuICAvLyBBUFBPUlRJT04uIEFmdGVyIHNwYWNpbmcgb3V0IHRoZSBjaGlsZHJlbiBieSBjYWxsaW5nIEVYRUNVVEUgU0hJRlRTLCB0aGVcbiAgLy8gbm9kZSB2IGlzIHBsYWNlZCB0byB0aGUgbWlkcG9pbnQgb2YgaXRzIG91dGVybW9zdCBjaGlsZHJlbi5cbiAgZnVuY3Rpb24gZmlyc3RXYWxrKHYpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB2LmNoaWxkcmVuLFxuICAgICAgICBzaWJsaW5ncyA9IHYucGFyZW50LmNoaWxkcmVuLFxuICAgICAgICB3ID0gdi5pID8gc2libGluZ3Nbdi5pIC0gMV0gOiBudWxsO1xuICAgIGlmIChjaGlsZHJlbikge1xuICAgICAgZXhlY3V0ZVNoaWZ0cyh2KTtcbiAgICAgIHZhciBtaWRwb2ludCA9IChjaGlsZHJlblswXS56ICsgY2hpbGRyZW5bY2hpbGRyZW4ubGVuZ3RoIC0gMV0ueikgLyAyO1xuICAgICAgaWYgKHcpIHtcbiAgICAgICAgdi56ID0gdy56ICsgc2VwYXJhdGlvbih2Ll8sIHcuXyk7XG4gICAgICAgIHYubSA9IHYueiAtIG1pZHBvaW50O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdi56ID0gbWlkcG9pbnQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh3KSB7XG4gICAgICB2LnogPSB3LnogKyBzZXBhcmF0aW9uKHYuXywgdy5fKTtcbiAgICB9XG4gICAgdi5wYXJlbnQuQSA9IGFwcG9ydGlvbih2LCB3LCB2LnBhcmVudC5BIHx8IHNpYmxpbmdzWzBdKTtcbiAgfVxuXG4gIC8vIENvbXB1dGVzIGFsbCByZWFsIHgtY29vcmRpbmF0ZXMgYnkgc3VtbWluZyB1cCB0aGUgbW9kaWZpZXJzIHJlY3Vyc2l2ZWx5LlxuICBmdW5jdGlvbiBzZWNvbmRXYWxrKHYpIHtcbiAgICB2Ll8ueCA9IHYueiArIHYucGFyZW50Lm07XG4gICAgdi5tICs9IHYucGFyZW50Lm07XG4gIH1cblxuICAvLyBUaGUgY29yZSBvZiB0aGUgYWxnb3JpdGhtLiBIZXJlLCBhIG5ldyBzdWJ0cmVlIGlzIGNvbWJpbmVkIHdpdGggdGhlXG4gIC8vIHByZXZpb3VzIHN1YnRyZWVzLiBUaHJlYWRzIGFyZSB1c2VkIHRvIHRyYXZlcnNlIHRoZSBpbnNpZGUgYW5kIG91dHNpZGVcbiAgLy8gY29udG91cnMgb2YgdGhlIGxlZnQgYW5kIHJpZ2h0IHN1YnRyZWUgdXAgdG8gdGhlIGhpZ2hlc3QgY29tbW9uIGxldmVsLiBUaGVcbiAgLy8gdmVydGljZXMgdXNlZCBmb3IgdGhlIHRyYXZlcnNhbHMgYXJlIHZpKywgdmktLCB2by0sIGFuZCB2byssIHdoZXJlIHRoZVxuICAvLyBzdXBlcnNjcmlwdCBvIG1lYW5zIG91dHNpZGUgYW5kIGkgbWVhbnMgaW5zaWRlLCB0aGUgc3Vic2NyaXB0IC0gbWVhbnMgbGVmdFxuICAvLyBzdWJ0cmVlIGFuZCArIG1lYW5zIHJpZ2h0IHN1YnRyZWUuIEZvciBzdW1taW5nIHVwIHRoZSBtb2RpZmllcnMgYWxvbmcgdGhlXG4gIC8vIGNvbnRvdXIsIHdlIHVzZSByZXNwZWN0aXZlIHZhcmlhYmxlcyBzaSssIHNpLSwgc28tLCBhbmQgc28rLiBXaGVuZXZlciB0d29cbiAgLy8gbm9kZXMgb2YgdGhlIGluc2lkZSBjb250b3VycyBjb25mbGljdCwgd2UgY29tcHV0ZSB0aGUgbGVmdCBvbmUgb2YgdGhlXG4gIC8vIGdyZWF0ZXN0IHVuY29tbW9uIGFuY2VzdG9ycyB1c2luZyB0aGUgZnVuY3Rpb24gQU5DRVNUT1IgYW5kIGNhbGwgTU9WRVxuICAvLyBTVUJUUkVFIHRvIHNoaWZ0IHRoZSBzdWJ0cmVlIGFuZCBwcmVwYXJlIHRoZSBzaGlmdHMgb2Ygc21hbGxlciBzdWJ0cmVlcy5cbiAgLy8gRmluYWxseSwgd2UgYWRkIGEgbmV3IHRocmVhZCAoaWYgbmVjZXNzYXJ5KS5cbiAgZnVuY3Rpb24gYXBwb3J0aW9uKHYsIHcsIGFuY2VzdG9yKSB7XG4gICAgaWYgKHcpIHtcbiAgICAgIHZhciB2aXAgPSB2LFxuICAgICAgICAgIHZvcCA9IHYsXG4gICAgICAgICAgdmltID0gdyxcbiAgICAgICAgICB2b20gPSB2aXAucGFyZW50LmNoaWxkcmVuWzBdLFxuICAgICAgICAgIHNpcCA9IHZpcC5tLFxuICAgICAgICAgIHNvcCA9IHZvcC5tLFxuICAgICAgICAgIHNpbSA9IHZpbS5tLFxuICAgICAgICAgIHNvbSA9IHZvbS5tLFxuICAgICAgICAgIHNoaWZ0O1xuICAgICAgd2hpbGUgKHZpbSA9IG5leHRSaWdodCh2aW0pLCB2aXAgPSBuZXh0TGVmdCh2aXApLCB2aW0gJiYgdmlwKSB7XG4gICAgICAgIHZvbSA9IG5leHRMZWZ0KHZvbSk7XG4gICAgICAgIHZvcCA9IG5leHRSaWdodCh2b3ApO1xuICAgICAgICB2b3AuYSA9IHY7XG4gICAgICAgIHNoaWZ0ID0gdmltLnogKyBzaW0gLSB2aXAueiAtIHNpcCArIHNlcGFyYXRpb24odmltLl8sIHZpcC5fKTtcbiAgICAgICAgaWYgKHNoaWZ0ID4gMCkge1xuICAgICAgICAgIG1vdmVTdWJ0cmVlKG5leHRBbmNlc3Rvcih2aW0sIHYsIGFuY2VzdG9yKSwgdiwgc2hpZnQpO1xuICAgICAgICAgIHNpcCArPSBzaGlmdDtcbiAgICAgICAgICBzb3AgKz0gc2hpZnQ7XG4gICAgICAgIH1cbiAgICAgICAgc2ltICs9IHZpbS5tO1xuICAgICAgICBzaXAgKz0gdmlwLm07XG4gICAgICAgIHNvbSArPSB2b20ubTtcbiAgICAgICAgc29wICs9IHZvcC5tO1xuICAgICAgfVxuICAgICAgaWYgKHZpbSAmJiAhbmV4dFJpZ2h0KHZvcCkpIHtcbiAgICAgICAgdm9wLnQgPSB2aW07XG4gICAgICAgIHZvcC5tICs9IHNpbSAtIHNvcDtcbiAgICAgIH1cbiAgICAgIGlmICh2aXAgJiYgIW5leHRMZWZ0KHZvbSkpIHtcbiAgICAgICAgdm9tLnQgPSB2aXA7XG4gICAgICAgIHZvbS5tICs9IHNpcCAtIHNvbTtcbiAgICAgICAgYW5jZXN0b3IgPSB2O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYW5jZXN0b3I7XG4gIH1cblxuICBmdW5jdGlvbiBzaXplTm9kZShub2RlKSB7XG4gICAgbm9kZS54ICo9IGR4O1xuICAgIG5vZGUueSA9IG5vZGUuZGVwdGggKiBkeTtcbiAgfVxuXG4gIHRyZWUuc2VwYXJhdGlvbiA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzZXBhcmF0aW9uID0geCwgdHJlZSkgOiBzZXBhcmF0aW9uO1xuICB9O1xuXG4gIHRyZWUuc2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChub2RlU2l6ZSA9IGZhbHNlLCBkeCA9ICt4WzBdLCBkeSA9ICt4WzFdLCB0cmVlKSA6IChub2RlU2l6ZSA/IG51bGwgOiBbZHgsIGR5XSk7XG4gIH07XG5cbiAgdHJlZS5ub2RlU2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChub2RlU2l6ZSA9IHRydWUsIGR4ID0gK3hbMF0sIGR5ID0gK3hbMV0sIHRyZWUpIDogKG5vZGVTaXplID8gW2R4LCBkeV0gOiBudWxsKTtcbiAgfTtcblxuICByZXR1cm4gdHJlZTtcbn07XG5cbnZhciB0cmVlbWFwU2xpY2UgPSBmdW5jdGlvbihwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciBub2RlcyA9IHBhcmVudC5jaGlsZHJlbixcbiAgICAgIG5vZGUsXG4gICAgICBpID0gLTEsXG4gICAgICBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgayA9IHBhcmVudC52YWx1ZSAmJiAoeTEgLSB5MCkgLyBwYXJlbnQudmFsdWU7XG5cbiAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICBub2RlID0gbm9kZXNbaV0sIG5vZGUueDAgPSB4MCwgbm9kZS54MSA9IHgxO1xuICAgIG5vZGUueTAgPSB5MCwgbm9kZS55MSA9IHkwICs9IG5vZGUudmFsdWUgKiBrO1xuICB9XG59O1xuXG52YXIgcGhpID0gKDEgKyBNYXRoLnNxcnQoNSkpIC8gMjtcblxuZnVuY3Rpb24gc3F1YXJpZnlSYXRpbyhyYXRpbywgcGFyZW50LCB4MCwgeTAsIHgxLCB5MSkge1xuICB2YXIgcm93cyA9IFtdLFxuICAgICAgbm9kZXMgPSBwYXJlbnQuY2hpbGRyZW4sXG4gICAgICByb3csXG4gICAgICBub2RlVmFsdWUsXG4gICAgICBpMCA9IDAsXG4gICAgICBpMSA9IDAsXG4gICAgICBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgZHgsIGR5LFxuICAgICAgdmFsdWUgPSBwYXJlbnQudmFsdWUsXG4gICAgICBzdW1WYWx1ZSxcbiAgICAgIG1pblZhbHVlLFxuICAgICAgbWF4VmFsdWUsXG4gICAgICBuZXdSYXRpbyxcbiAgICAgIG1pblJhdGlvLFxuICAgICAgYWxwaGEsXG4gICAgICBiZXRhO1xuXG4gIHdoaWxlIChpMCA8IG4pIHtcbiAgICBkeCA9IHgxIC0geDAsIGR5ID0geTEgLSB5MDtcblxuICAgIC8vIEZpbmQgdGhlIG5leHQgbm9uLWVtcHR5IG5vZGUuXG4gICAgZG8gc3VtVmFsdWUgPSBub2Rlc1tpMSsrXS52YWx1ZTsgd2hpbGUgKCFzdW1WYWx1ZSAmJiBpMSA8IG4pO1xuICAgIG1pblZhbHVlID0gbWF4VmFsdWUgPSBzdW1WYWx1ZTtcbiAgICBhbHBoYSA9IE1hdGgubWF4KGR5IC8gZHgsIGR4IC8gZHkpIC8gKHZhbHVlICogcmF0aW8pO1xuICAgIGJldGEgPSBzdW1WYWx1ZSAqIHN1bVZhbHVlICogYWxwaGE7XG4gICAgbWluUmF0aW8gPSBNYXRoLm1heChtYXhWYWx1ZSAvIGJldGEsIGJldGEgLyBtaW5WYWx1ZSk7XG5cbiAgICAvLyBLZWVwIGFkZGluZyBub2RlcyB3aGlsZSB0aGUgYXNwZWN0IHJhdGlvIG1haW50YWlucyBvciBpbXByb3Zlcy5cbiAgICBmb3IgKDsgaTEgPCBuOyArK2kxKSB7XG4gICAgICBzdW1WYWx1ZSArPSBub2RlVmFsdWUgPSBub2Rlc1tpMV0udmFsdWU7XG4gICAgICBpZiAobm9kZVZhbHVlIDwgbWluVmFsdWUpIG1pblZhbHVlID0gbm9kZVZhbHVlO1xuICAgICAgaWYgKG5vZGVWYWx1ZSA+IG1heFZhbHVlKSBtYXhWYWx1ZSA9IG5vZGVWYWx1ZTtcbiAgICAgIGJldGEgPSBzdW1WYWx1ZSAqIHN1bVZhbHVlICogYWxwaGE7XG4gICAgICBuZXdSYXRpbyA9IE1hdGgubWF4KG1heFZhbHVlIC8gYmV0YSwgYmV0YSAvIG1pblZhbHVlKTtcbiAgICAgIGlmIChuZXdSYXRpbyA+IG1pblJhdGlvKSB7IHN1bVZhbHVlIC09IG5vZGVWYWx1ZTsgYnJlYWs7IH1cbiAgICAgIG1pblJhdGlvID0gbmV3UmF0aW87XG4gICAgfVxuXG4gICAgLy8gUG9zaXRpb24gYW5kIHJlY29yZCB0aGUgcm93IG9yaWVudGF0aW9uLlxuICAgIHJvd3MucHVzaChyb3cgPSB7dmFsdWU6IHN1bVZhbHVlLCBkaWNlOiBkeCA8IGR5LCBjaGlsZHJlbjogbm9kZXMuc2xpY2UoaTAsIGkxKX0pO1xuICAgIGlmIChyb3cuZGljZSkgdHJlZW1hcERpY2Uocm93LCB4MCwgeTAsIHgxLCB2YWx1ZSA/IHkwICs9IGR5ICogc3VtVmFsdWUgLyB2YWx1ZSA6IHkxKTtcbiAgICBlbHNlIHRyZWVtYXBTbGljZShyb3csIHgwLCB5MCwgdmFsdWUgPyB4MCArPSBkeCAqIHN1bVZhbHVlIC8gdmFsdWUgOiB4MSwgeTEpO1xuICAgIHZhbHVlIC09IHN1bVZhbHVlLCBpMCA9IGkxO1xuICB9XG5cbiAgcmV0dXJuIHJvd3M7XG59XG5cbnZhciBzcXVhcmlmeSA9IChmdW5jdGlvbiBjdXN0b20ocmF0aW8pIHtcblxuICBmdW5jdGlvbiBzcXVhcmlmeShwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gICAgc3F1YXJpZnlSYXRpbyhyYXRpbywgcGFyZW50LCB4MCwgeTAsIHgxLCB5MSk7XG4gIH1cblxuICBzcXVhcmlmeS5yYXRpbyA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gY3VzdG9tKCh4ID0gK3gpID4gMSA/IHggOiAxKTtcbiAgfTtcblxuICByZXR1cm4gc3F1YXJpZnk7XG59KShwaGkpO1xuXG52YXIgaW5kZXgkMyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgdGlsZSA9IHNxdWFyaWZ5LFxuICAgICAgcm91bmQgPSBmYWxzZSxcbiAgICAgIGR4ID0gMSxcbiAgICAgIGR5ID0gMSxcbiAgICAgIHBhZGRpbmdTdGFjayA9IFswXSxcbiAgICAgIHBhZGRpbmdJbm5lciA9IGNvbnN0YW50WmVybyxcbiAgICAgIHBhZGRpbmdUb3AgPSBjb25zdGFudFplcm8sXG4gICAgICBwYWRkaW5nUmlnaHQgPSBjb25zdGFudFplcm8sXG4gICAgICBwYWRkaW5nQm90dG9tID0gY29uc3RhbnRaZXJvLFxuICAgICAgcGFkZGluZ0xlZnQgPSBjb25zdGFudFplcm87XG5cbiAgZnVuY3Rpb24gdHJlZW1hcChyb290KSB7XG4gICAgcm9vdC54MCA9XG4gICAgcm9vdC55MCA9IDA7XG4gICAgcm9vdC54MSA9IGR4O1xuICAgIHJvb3QueTEgPSBkeTtcbiAgICByb290LmVhY2hCZWZvcmUocG9zaXRpb25Ob2RlKTtcbiAgICBwYWRkaW5nU3RhY2sgPSBbMF07XG4gICAgaWYgKHJvdW5kKSByb290LmVhY2hCZWZvcmUocm91bmROb2RlKTtcbiAgICByZXR1cm4gcm9vdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvc2l0aW9uTm9kZShub2RlKSB7XG4gICAgdmFyIHAgPSBwYWRkaW5nU3RhY2tbbm9kZS5kZXB0aF0sXG4gICAgICAgIHgwID0gbm9kZS54MCArIHAsXG4gICAgICAgIHkwID0gbm9kZS55MCArIHAsXG4gICAgICAgIHgxID0gbm9kZS54MSAtIHAsXG4gICAgICAgIHkxID0gbm9kZS55MSAtIHA7XG4gICAgaWYgKHgxIDwgeDApIHgwID0geDEgPSAoeDAgKyB4MSkgLyAyO1xuICAgIGlmICh5MSA8IHkwKSB5MCA9IHkxID0gKHkwICsgeTEpIC8gMjtcbiAgICBub2RlLngwID0geDA7XG4gICAgbm9kZS55MCA9IHkwO1xuICAgIG5vZGUueDEgPSB4MTtcbiAgICBub2RlLnkxID0geTE7XG4gICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIHAgPSBwYWRkaW5nU3RhY2tbbm9kZS5kZXB0aCArIDFdID0gcGFkZGluZ0lubmVyKG5vZGUpIC8gMjtcbiAgICAgIHgwICs9IHBhZGRpbmdMZWZ0KG5vZGUpIC0gcDtcbiAgICAgIHkwICs9IHBhZGRpbmdUb3Aobm9kZSkgLSBwO1xuICAgICAgeDEgLT0gcGFkZGluZ1JpZ2h0KG5vZGUpIC0gcDtcbiAgICAgIHkxIC09IHBhZGRpbmdCb3R0b20obm9kZSkgLSBwO1xuICAgICAgaWYgKHgxIDwgeDApIHgwID0geDEgPSAoeDAgKyB4MSkgLyAyO1xuICAgICAgaWYgKHkxIDwgeTApIHkwID0geTEgPSAoeTAgKyB5MSkgLyAyO1xuICAgICAgdGlsZShub2RlLCB4MCwgeTAsIHgxLCB5MSk7XG4gICAgfVxuICB9XG5cbiAgdHJlZW1hcC5yb3VuZCA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyb3VuZCA9ICEheCwgdHJlZW1hcCkgOiByb3VuZDtcbiAgfTtcblxuICB0cmVlbWFwLnNpemUgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZHggPSAreFswXSwgZHkgPSAreFsxXSwgdHJlZW1hcCkgOiBbZHgsIGR5XTtcbiAgfTtcblxuICB0cmVlbWFwLnRpbGUgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlsZSA9IHJlcXVpcmVkKHgpLCB0cmVlbWFwKSA6IHRpbGU7XG4gIH07XG5cbiAgdHJlZW1hcC5wYWRkaW5nID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdHJlZW1hcC5wYWRkaW5nSW5uZXIoeCkucGFkZGluZ091dGVyKHgpIDogdHJlZW1hcC5wYWRkaW5nSW5uZXIoKTtcbiAgfTtcblxuICB0cmVlbWFwLnBhZGRpbmdJbm5lciA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nSW5uZXIgPSB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geCA6IGNvbnN0YW50JDgoK3gpLCB0cmVlbWFwKSA6IHBhZGRpbmdJbm5lcjtcbiAgfTtcblxuICB0cmVlbWFwLnBhZGRpbmdPdXRlciA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRyZWVtYXAucGFkZGluZ1RvcCh4KS5wYWRkaW5nUmlnaHQoeCkucGFkZGluZ0JvdHRvbSh4KS5wYWRkaW5nTGVmdCh4KSA6IHRyZWVtYXAucGFkZGluZ1RvcCgpO1xuICB9O1xuXG4gIHRyZWVtYXAucGFkZGluZ1RvcCA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nVG9wID0gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHggOiBjb25zdGFudCQ4KCt4KSwgdHJlZW1hcCkgOiBwYWRkaW5nVG9wO1xuICB9O1xuXG4gIHRyZWVtYXAucGFkZGluZ1JpZ2h0ID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdSaWdodCA9IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4IDogY29uc3RhbnQkOCgreCksIHRyZWVtYXApIDogcGFkZGluZ1JpZ2h0O1xuICB9O1xuXG4gIHRyZWVtYXAucGFkZGluZ0JvdHRvbSA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nQm90dG9tID0gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHggOiBjb25zdGFudCQ4KCt4KSwgdHJlZW1hcCkgOiBwYWRkaW5nQm90dG9tO1xuICB9O1xuXG4gIHRyZWVtYXAucGFkZGluZ0xlZnQgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ0xlZnQgPSB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geCA6IGNvbnN0YW50JDgoK3gpLCB0cmVlbWFwKSA6IHBhZGRpbmdMZWZ0O1xuICB9O1xuXG4gIHJldHVybiB0cmVlbWFwO1xufTtcblxudmFyIGJpbmFyeSA9IGZ1bmN0aW9uKHBhcmVudCwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgdmFyIG5vZGVzID0gcGFyZW50LmNoaWxkcmVuLFxuICAgICAgaSwgbiA9IG5vZGVzLmxlbmd0aCxcbiAgICAgIHN1bSwgc3VtcyA9IG5ldyBBcnJheShuICsgMSk7XG5cbiAgZm9yIChzdW1zWzBdID0gc3VtID0gaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICBzdW1zW2kgKyAxXSA9IHN1bSArPSBub2Rlc1tpXS52YWx1ZTtcbiAgfVxuXG4gIHBhcnRpdGlvbigwLCBuLCBwYXJlbnQudmFsdWUsIHgwLCB5MCwgeDEsIHkxKTtcblxuICBmdW5jdGlvbiBwYXJ0aXRpb24oaSwgaiwgdmFsdWUsIHgwLCB5MCwgeDEsIHkxKSB7XG4gICAgaWYgKGkgPj0gaiAtIDEpIHtcbiAgICAgIHZhciBub2RlID0gbm9kZXNbaV07XG4gICAgICBub2RlLngwID0geDAsIG5vZGUueTAgPSB5MDtcbiAgICAgIG5vZGUueDEgPSB4MSwgbm9kZS55MSA9IHkxO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB2YWx1ZU9mZnNldCA9IHN1bXNbaV0sXG4gICAgICAgIHZhbHVlVGFyZ2V0ID0gKHZhbHVlIC8gMikgKyB2YWx1ZU9mZnNldCxcbiAgICAgICAgayA9IGkgKyAxLFxuICAgICAgICBoaSA9IGogLSAxO1xuXG4gICAgd2hpbGUgKGsgPCBoaSkge1xuICAgICAgdmFyIG1pZCA9IGsgKyBoaSA+Pj4gMTtcbiAgICAgIGlmIChzdW1zW21pZF0gPCB2YWx1ZVRhcmdldCkgayA9IG1pZCArIDE7XG4gICAgICBlbHNlIGhpID0gbWlkO1xuICAgIH1cblxuICAgIGlmICgodmFsdWVUYXJnZXQgLSBzdW1zW2sgLSAxXSkgPCAoc3Vtc1trXSAtIHZhbHVlVGFyZ2V0KSAmJiBpICsgMSA8IGspIC0taztcblxuICAgIHZhciB2YWx1ZUxlZnQgPSBzdW1zW2tdIC0gdmFsdWVPZmZzZXQsXG4gICAgICAgIHZhbHVlUmlnaHQgPSB2YWx1ZSAtIHZhbHVlTGVmdDtcblxuICAgIGlmICgoeDEgLSB4MCkgPiAoeTEgLSB5MCkpIHtcbiAgICAgIHZhciB4ayA9ICh4MCAqIHZhbHVlUmlnaHQgKyB4MSAqIHZhbHVlTGVmdCkgLyB2YWx1ZTtcbiAgICAgIHBhcnRpdGlvbihpLCBrLCB2YWx1ZUxlZnQsIHgwLCB5MCwgeGssIHkxKTtcbiAgICAgIHBhcnRpdGlvbihrLCBqLCB2YWx1ZVJpZ2h0LCB4aywgeTAsIHgxLCB5MSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB5ayA9ICh5MCAqIHZhbHVlUmlnaHQgKyB5MSAqIHZhbHVlTGVmdCkgLyB2YWx1ZTtcbiAgICAgIHBhcnRpdGlvbihpLCBrLCB2YWx1ZUxlZnQsIHgwLCB5MCwgeDEsIHlrKTtcbiAgICAgIHBhcnRpdGlvbihrLCBqLCB2YWx1ZVJpZ2h0LCB4MCwgeWssIHgxLCB5MSk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgc2xpY2VEaWNlID0gZnVuY3Rpb24ocGFyZW50LCB4MCwgeTAsIHgxLCB5MSkge1xuICAocGFyZW50LmRlcHRoICYgMSA/IHRyZWVtYXBTbGljZSA6IHRyZWVtYXBEaWNlKShwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKTtcbn07XG5cbnZhciByZXNxdWFyaWZ5ID0gKGZ1bmN0aW9uIGN1c3RvbShyYXRpbykge1xuXG4gIGZ1bmN0aW9uIHJlc3F1YXJpZnkocGFyZW50LCB4MCwgeTAsIHgxLCB5MSkge1xuICAgIGlmICgocm93cyA9IHBhcmVudC5fc3F1YXJpZnkpICYmIChyb3dzLnJhdGlvID09PSByYXRpbykpIHtcbiAgICAgIHZhciByb3dzLFxuICAgICAgICAgIHJvdyxcbiAgICAgICAgICBub2RlcyxcbiAgICAgICAgICBpLFxuICAgICAgICAgIGogPSAtMSxcbiAgICAgICAgICBuLFxuICAgICAgICAgIG0gPSByb3dzLmxlbmd0aCxcbiAgICAgICAgICB2YWx1ZSA9IHBhcmVudC52YWx1ZTtcblxuICAgICAgd2hpbGUgKCsraiA8IG0pIHtcbiAgICAgICAgcm93ID0gcm93c1tqXSwgbm9kZXMgPSByb3cuY2hpbGRyZW47XG4gICAgICAgIGZvciAoaSA9IHJvdy52YWx1ZSA9IDAsIG4gPSBub2Rlcy5sZW5ndGg7IGkgPCBuOyArK2kpIHJvdy52YWx1ZSArPSBub2Rlc1tpXS52YWx1ZTtcbiAgICAgICAgaWYgKHJvdy5kaWNlKSB0cmVlbWFwRGljZShyb3csIHgwLCB5MCwgeDEsIHkwICs9ICh5MSAtIHkwKSAqIHJvdy52YWx1ZSAvIHZhbHVlKTtcbiAgICAgICAgZWxzZSB0cmVlbWFwU2xpY2Uocm93LCB4MCwgeTAsIHgwICs9ICh4MSAtIHgwKSAqIHJvdy52YWx1ZSAvIHZhbHVlLCB5MSk7XG4gICAgICAgIHZhbHVlIC09IHJvdy52YWx1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGFyZW50Ll9zcXVhcmlmeSA9IHJvd3MgPSBzcXVhcmlmeVJhdGlvKHJhdGlvLCBwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKTtcbiAgICAgIHJvd3MucmF0aW8gPSByYXRpbztcbiAgICB9XG4gIH1cblxuICByZXNxdWFyaWZ5LnJhdGlvID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBjdXN0b20oKHggPSAreCkgPiAxID8geCA6IDEpO1xuICB9O1xuXG4gIHJldHVybiByZXNxdWFyaWZ5O1xufSkocGhpKTtcblxudmFyIGFyZWEkMSA9IGZ1bmN0aW9uKHBvbHlnb24pIHtcbiAgdmFyIGkgPSAtMSxcbiAgICAgIG4gPSBwb2x5Z29uLmxlbmd0aCxcbiAgICAgIGEsXG4gICAgICBiID0gcG9seWdvbltuIC0gMV0sXG4gICAgICBhcmVhID0gMDtcblxuICB3aGlsZSAoKytpIDwgbikge1xuICAgIGEgPSBiO1xuICAgIGIgPSBwb2x5Z29uW2ldO1xuICAgIGFyZWEgKz0gYVsxXSAqIGJbMF0gLSBhWzBdICogYlsxXTtcbiAgfVxuXG4gIHJldHVybiBhcmVhIC8gMjtcbn07XG5cbnZhciBjZW50cm9pZCQxID0gZnVuY3Rpb24ocG9seWdvbikge1xuICB2YXIgaSA9IC0xLFxuICAgICAgbiA9IHBvbHlnb24ubGVuZ3RoLFxuICAgICAgeCA9IDAsXG4gICAgICB5ID0gMCxcbiAgICAgIGEsXG4gICAgICBiID0gcG9seWdvbltuIC0gMV0sXG4gICAgICBjLFxuICAgICAgayA9IDA7XG5cbiAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICBhID0gYjtcbiAgICBiID0gcG9seWdvbltpXTtcbiAgICBrICs9IGMgPSBhWzBdICogYlsxXSAtIGJbMF0gKiBhWzFdO1xuICAgIHggKz0gKGFbMF0gKyBiWzBdKSAqIGM7XG4gICAgeSArPSAoYVsxXSArIGJbMV0pICogYztcbiAgfVxuXG4gIHJldHVybiBrICo9IDMsIFt4IC8gaywgeSAvIGtdO1xufTtcblxuLy8gUmV0dXJucyB0aGUgMkQgY3Jvc3MgcHJvZHVjdCBvZiBBQiBhbmQgQUMgdmVjdG9ycywgaS5lLiwgdGhlIHotY29tcG9uZW50IG9mXG4vLyB0aGUgM0QgY3Jvc3MgcHJvZHVjdCBpbiBhIHF1YWRyYW50IEkgQ2FydGVzaWFuIGNvb3JkaW5hdGUgc3lzdGVtICgreCBpc1xuLy8gcmlnaHQsICt5IGlzIHVwKS4gUmV0dXJucyBhIHBvc2l0aXZlIHZhbHVlIGlmIEFCQyBpcyBjb3VudGVyLWNsb2Nrd2lzZSxcbi8vIG5lZ2F0aXZlIGlmIGNsb2Nrd2lzZSwgYW5kIHplcm8gaWYgdGhlIHBvaW50cyBhcmUgY29sbGluZWFyLlxudmFyIGNyb3NzJDEgPSBmdW5jdGlvbihhLCBiLCBjKSB7XG4gIHJldHVybiAoYlswXSAtIGFbMF0pICogKGNbMV0gLSBhWzFdKSAtIChiWzFdIC0gYVsxXSkgKiAoY1swXSAtIGFbMF0pO1xufTtcblxuZnVuY3Rpb24gbGV4aWNvZ3JhcGhpY09yZGVyKGEsIGIpIHtcbiAgcmV0dXJuIGFbMF0gLSBiWzBdIHx8IGFbMV0gLSBiWzFdO1xufVxuXG4vLyBDb21wdXRlcyB0aGUgdXBwZXIgY29udmV4IGh1bGwgcGVyIHRoZSBtb25vdG9uZSBjaGFpbiBhbGdvcml0aG0uXG4vLyBBc3N1bWVzIHBvaW50cy5sZW5ndGggPj0gMywgaXMgc29ydGVkIGJ5IHgsIHVuaXF1ZSBpbiB5LlxuLy8gUmV0dXJucyBhbiBhcnJheSBvZiBpbmRpY2VzIGludG8gcG9pbnRzIGluIGxlZnQtdG8tcmlnaHQgb3JkZXIuXG5mdW5jdGlvbiBjb21wdXRlVXBwZXJIdWxsSW5kZXhlcyhwb2ludHMpIHtcbiAgdmFyIG4gPSBwb2ludHMubGVuZ3RoLFxuICAgICAgaW5kZXhlcyA9IFswLCAxXSxcbiAgICAgIHNpemUgPSAyO1xuXG4gIGZvciAodmFyIGkgPSAyOyBpIDwgbjsgKytpKSB7XG4gICAgd2hpbGUgKHNpemUgPiAxICYmIGNyb3NzJDEocG9pbnRzW2luZGV4ZXNbc2l6ZSAtIDJdXSwgcG9pbnRzW2luZGV4ZXNbc2l6ZSAtIDFdXSwgcG9pbnRzW2ldKSA8PSAwKSAtLXNpemU7XG4gICAgaW5kZXhlc1tzaXplKytdID0gaTtcbiAgfVxuXG4gIHJldHVybiBpbmRleGVzLnNsaWNlKDAsIHNpemUpOyAvLyByZW1vdmUgcG9wcGVkIHBvaW50c1xufVxuXG52YXIgaHVsbCA9IGZ1bmN0aW9uKHBvaW50cykge1xuICBpZiAoKG4gPSBwb2ludHMubGVuZ3RoKSA8IDMpIHJldHVybiBudWxsO1xuXG4gIHZhciBpLFxuICAgICAgbixcbiAgICAgIHNvcnRlZFBvaW50cyA9IG5ldyBBcnJheShuKSxcbiAgICAgIGZsaXBwZWRQb2ludHMgPSBuZXcgQXJyYXkobik7XG5cbiAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgc29ydGVkUG9pbnRzW2ldID0gWytwb2ludHNbaV1bMF0sICtwb2ludHNbaV1bMV0sIGldO1xuICBzb3J0ZWRQb2ludHMuc29ydChsZXhpY29ncmFwaGljT3JkZXIpO1xuICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBmbGlwcGVkUG9pbnRzW2ldID0gW3NvcnRlZFBvaW50c1tpXVswXSwgLXNvcnRlZFBvaW50c1tpXVsxXV07XG5cbiAgdmFyIHVwcGVySW5kZXhlcyA9IGNvbXB1dGVVcHBlckh1bGxJbmRleGVzKHNvcnRlZFBvaW50cyksXG4gICAgICBsb3dlckluZGV4ZXMgPSBjb21wdXRlVXBwZXJIdWxsSW5kZXhlcyhmbGlwcGVkUG9pbnRzKTtcblxuICAvLyBDb25zdHJ1Y3QgdGhlIGh1bGwgcG9seWdvbiwgcmVtb3ZpbmcgcG9zc2libGUgZHVwbGljYXRlIGVuZHBvaW50cy5cbiAgdmFyIHNraXBMZWZ0ID0gbG93ZXJJbmRleGVzWzBdID09PSB1cHBlckluZGV4ZXNbMF0sXG4gICAgICBza2lwUmlnaHQgPSBsb3dlckluZGV4ZXNbbG93ZXJJbmRleGVzLmxlbmd0aCAtIDFdID09PSB1cHBlckluZGV4ZXNbdXBwZXJJbmRleGVzLmxlbmd0aCAtIDFdLFxuICAgICAgaHVsbCA9IFtdO1xuXG4gIC8vIEFkZCB1cHBlciBodWxsIGluIHJpZ2h0LXRvLWwgb3JkZXIuXG4gIC8vIFRoZW4gYWRkIGxvd2VyIGh1bGwgaW4gbGVmdC10by1yaWdodCBvcmRlci5cbiAgZm9yIChpID0gdXBwZXJJbmRleGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSBodWxsLnB1c2gocG9pbnRzW3NvcnRlZFBvaW50c1t1cHBlckluZGV4ZXNbaV1dWzJdXSk7XG4gIGZvciAoaSA9ICtza2lwTGVmdDsgaSA8IGxvd2VySW5kZXhlcy5sZW5ndGggLSBza2lwUmlnaHQ7ICsraSkgaHVsbC5wdXNoKHBvaW50c1tzb3J0ZWRQb2ludHNbbG93ZXJJbmRleGVzW2ldXVsyXV0pO1xuXG4gIHJldHVybiBodWxsO1xufTtcblxudmFyIGNvbnRhaW5zJDEgPSBmdW5jdGlvbihwb2x5Z29uLCBwb2ludCkge1xuICB2YXIgbiA9IHBvbHlnb24ubGVuZ3RoLFxuICAgICAgcCA9IHBvbHlnb25bbiAtIDFdLFxuICAgICAgeCA9IHBvaW50WzBdLCB5ID0gcG9pbnRbMV0sXG4gICAgICB4MCA9IHBbMF0sIHkwID0gcFsxXSxcbiAgICAgIHgxLCB5MSxcbiAgICAgIGluc2lkZSA9IGZhbHNlO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgcCA9IHBvbHlnb25baV0sIHgxID0gcFswXSwgeTEgPSBwWzFdO1xuICAgIGlmICgoKHkxID4geSkgIT09ICh5MCA+IHkpKSAmJiAoeCA8ICh4MCAtIHgxKSAqICh5IC0geTEpIC8gKHkwIC0geTEpICsgeDEpKSBpbnNpZGUgPSAhaW5zaWRlO1xuICAgIHgwID0geDEsIHkwID0geTE7XG4gIH1cblxuICByZXR1cm4gaW5zaWRlO1xufTtcblxudmFyIGxlbmd0aCQyID0gZnVuY3Rpb24ocG9seWdvbikge1xuICB2YXIgaSA9IC0xLFxuICAgICAgbiA9IHBvbHlnb24ubGVuZ3RoLFxuICAgICAgYiA9IHBvbHlnb25bbiAtIDFdLFxuICAgICAgeGEsXG4gICAgICB5YSxcbiAgICAgIHhiID0gYlswXSxcbiAgICAgIHliID0gYlsxXSxcbiAgICAgIHBlcmltZXRlciA9IDA7XG5cbiAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICB4YSA9IHhiO1xuICAgIHlhID0geWI7XG4gICAgYiA9IHBvbHlnb25baV07XG4gICAgeGIgPSBiWzBdO1xuICAgIHliID0gYlsxXTtcbiAgICB4YSAtPSB4YjtcbiAgICB5YSAtPSB5YjtcbiAgICBwZXJpbWV0ZXIgKz0gTWF0aC5zcXJ0KHhhICogeGEgKyB5YSAqIHlhKTtcbiAgfVxuXG4gIHJldHVybiBwZXJpbWV0ZXI7XG59O1xuXG52YXIgc2xpY2UkNCA9IFtdLnNsaWNlO1xuXG52YXIgbm9hYm9ydCA9IHt9O1xuXG5mdW5jdGlvbiBRdWV1ZShzaXplKSB7XG4gIHRoaXMuX3NpemUgPSBzaXplO1xuICB0aGlzLl9jYWxsID1cbiAgdGhpcy5fZXJyb3IgPSBudWxsO1xuICB0aGlzLl90YXNrcyA9IFtdO1xuICB0aGlzLl9kYXRhID0gW107XG4gIHRoaXMuX3dhaXRpbmcgPVxuICB0aGlzLl9hY3RpdmUgPVxuICB0aGlzLl9lbmRlZCA9XG4gIHRoaXMuX3N0YXJ0ID0gMDsgLy8gaW5zaWRlIGEgc3luY2hyb25vdXMgdGFzayBjYWxsYmFjaz9cbn1cblxuUXVldWUucHJvdG90eXBlID0gcXVldWUucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogUXVldWUsXG4gIGRlZmVyOiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBjYWxsYmFja1wiKTtcbiAgICBpZiAodGhpcy5fY2FsbCkgdGhyb3cgbmV3IEVycm9yKFwiZGVmZXIgYWZ0ZXIgYXdhaXRcIik7XG4gICAgaWYgKHRoaXMuX2Vycm9yICE9IG51bGwpIHJldHVybiB0aGlzO1xuICAgIHZhciB0ID0gc2xpY2UkNC5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgdC5wdXNoKGNhbGxiYWNrKTtcbiAgICArK3RoaXMuX3dhaXRpbmcsIHRoaXMuX3Rhc2tzLnB1c2godCk7XG4gICAgcG9rZSQxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBhYm9ydDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX2Vycm9yID09IG51bGwpIGFib3J0KHRoaXMsIG5ldyBFcnJvcihcImFib3J0XCIpKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgYXdhaXQ6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGNhbGxiYWNrXCIpO1xuICAgIGlmICh0aGlzLl9jYWxsKSB0aHJvdyBuZXcgRXJyb3IoXCJtdWx0aXBsZSBhd2FpdFwiKTtcbiAgICB0aGlzLl9jYWxsID0gZnVuY3Rpb24oZXJyb3IsIHJlc3VsdHMpIHsgY2FsbGJhY2suYXBwbHkobnVsbCwgW2Vycm9yXS5jb25jYXQocmVzdWx0cykpOyB9O1xuICAgIG1heWJlTm90aWZ5KHRoaXMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBhd2FpdEFsbDogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgY2FsbGJhY2tcIik7XG4gICAgaWYgKHRoaXMuX2NhbGwpIHRocm93IG5ldyBFcnJvcihcIm11bHRpcGxlIGF3YWl0XCIpO1xuICAgIHRoaXMuX2NhbGwgPSBjYWxsYmFjaztcbiAgICBtYXliZU5vdGlmeSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufTtcblxuZnVuY3Rpb24gcG9rZSQxKHEpIHtcbiAgaWYgKCFxLl9zdGFydCkge1xuICAgIHRyeSB7IHN0YXJ0JDEocSk7IH0gLy8gbGV0IHRoZSBjdXJyZW50IHRhc2sgY29tcGxldGVcbiAgICBjYXRjaCAoZSkge1xuICAgICAgaWYgKHEuX3Rhc2tzW3EuX2VuZGVkICsgcS5fYWN0aXZlIC0gMV0pIGFib3J0KHEsIGUpOyAvLyB0YXNrIGVycm9yZWQgc3luY2hyb25vdXNseVxuICAgICAgZWxzZSBpZiAoIXEuX2RhdGEpIHRocm93IGU7IC8vIGF3YWl0IGNhbGxiYWNrIGVycm9yZWQgc3luY2hyb25vdXNseVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzdGFydCQxKHEpIHtcbiAgd2hpbGUgKHEuX3N0YXJ0ID0gcS5fd2FpdGluZyAmJiBxLl9hY3RpdmUgPCBxLl9zaXplKSB7XG4gICAgdmFyIGkgPSBxLl9lbmRlZCArIHEuX2FjdGl2ZSxcbiAgICAgICAgdCA9IHEuX3Rhc2tzW2ldLFxuICAgICAgICBqID0gdC5sZW5ndGggLSAxLFxuICAgICAgICBjID0gdFtqXTtcbiAgICB0W2pdID0gZW5kKHEsIGkpO1xuICAgIC0tcS5fd2FpdGluZywgKytxLl9hY3RpdmU7XG4gICAgdCA9IGMuYXBwbHkobnVsbCwgdCk7XG4gICAgaWYgKCFxLl90YXNrc1tpXSkgY29udGludWU7IC8vIHRhc2sgZmluaXNoZWQgc3luY2hyb25vdXNseVxuICAgIHEuX3Rhc2tzW2ldID0gdCB8fCBub2Fib3J0O1xuICB9XG59XG5cbmZ1bmN0aW9uIGVuZChxLCBpKSB7XG4gIHJldHVybiBmdW5jdGlvbihlLCByKSB7XG4gICAgaWYgKCFxLl90YXNrc1tpXSkgcmV0dXJuOyAvLyBpZ25vcmUgbXVsdGlwbGUgY2FsbGJhY2tzXG4gICAgLS1xLl9hY3RpdmUsICsrcS5fZW5kZWQ7XG4gICAgcS5fdGFza3NbaV0gPSBudWxsO1xuICAgIGlmIChxLl9lcnJvciAhPSBudWxsKSByZXR1cm47IC8vIGlnbm9yZSBzZWNvbmRhcnkgZXJyb3JzXG4gICAgaWYgKGUgIT0gbnVsbCkge1xuICAgICAgYWJvcnQocSwgZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHEuX2RhdGFbaV0gPSByO1xuICAgICAgaWYgKHEuX3dhaXRpbmcpIHBva2UkMShxKTtcbiAgICAgIGVsc2UgbWF5YmVOb3RpZnkocSk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBhYm9ydChxLCBlKSB7XG4gIHZhciBpID0gcS5fdGFza3MubGVuZ3RoLCB0O1xuICBxLl9lcnJvciA9IGU7IC8vIGlnbm9yZSBhY3RpdmUgY2FsbGJhY2tzXG4gIHEuX2RhdGEgPSB1bmRlZmluZWQ7IC8vIGFsbG93IGdjXG4gIHEuX3dhaXRpbmcgPSBOYU47IC8vIHByZXZlbnQgc3RhcnRpbmdcblxuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICBpZiAodCA9IHEuX3Rhc2tzW2ldKSB7XG4gICAgICBxLl90YXNrc1tpXSA9IG51bGw7XG4gICAgICBpZiAodC5hYm9ydCkge1xuICAgICAgICB0cnkgeyB0LmFib3J0KCk7IH1cbiAgICAgICAgY2F0Y2ggKGUpIHsgLyogaWdub3JlICovIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBxLl9hY3RpdmUgPSBOYU47IC8vIGFsbG93IG5vdGlmaWNhdGlvblxuICBtYXliZU5vdGlmeShxKTtcbn1cblxuZnVuY3Rpb24gbWF5YmVOb3RpZnkocSkge1xuICBpZiAoIXEuX2FjdGl2ZSAmJiBxLl9jYWxsKSB7XG4gICAgdmFyIGQgPSBxLl9kYXRhO1xuICAgIHEuX2RhdGEgPSB1bmRlZmluZWQ7IC8vIGFsbG93IGdjXG4gICAgcS5fY2FsbChxLl9lcnJvciwgZCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcXVldWUoY29uY3VycmVuY3kpIHtcbiAgaWYgKGNvbmN1cnJlbmN5ID09IG51bGwpIGNvbmN1cnJlbmN5ID0gSW5maW5pdHk7XG4gIGVsc2UgaWYgKCEoKGNvbmN1cnJlbmN5ID0gK2NvbmN1cnJlbmN5KSA+PSAxKSkgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBjb25jdXJyZW5jeVwiKTtcbiAgcmV0dXJuIG5ldyBRdWV1ZShjb25jdXJyZW5jeSk7XG59XG5cbnZhciBkZWZhdWx0U291cmNlJDEgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIE1hdGgucmFuZG9tKCk7XG59O1xuXG52YXIgdW5pZm9ybSA9IChmdW5jdGlvbiBzb3VyY2VSYW5kb21Vbmlmb3JtKHNvdXJjZSkge1xuICBmdW5jdGlvbiByYW5kb21Vbmlmb3JtKG1pbiwgbWF4KSB7XG4gICAgbWluID0gbWluID09IG51bGwgPyAwIDogK21pbjtcbiAgICBtYXggPSBtYXggPT0gbnVsbCA/IDEgOiArbWF4O1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSBtYXggPSBtaW4sIG1pbiA9IDA7XG4gICAgZWxzZSBtYXggLT0gbWluO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzb3VyY2UoKSAqIG1heCArIG1pbjtcbiAgICB9O1xuICB9XG5cbiAgcmFuZG9tVW5pZm9ybS5zb3VyY2UgPSBzb3VyY2VSYW5kb21Vbmlmb3JtO1xuXG4gIHJldHVybiByYW5kb21Vbmlmb3JtO1xufSkoZGVmYXVsdFNvdXJjZSQxKTtcblxudmFyIG5vcm1hbCA9IChmdW5jdGlvbiBzb3VyY2VSYW5kb21Ob3JtYWwoc291cmNlKSB7XG4gIGZ1bmN0aW9uIHJhbmRvbU5vcm1hbChtdSwgc2lnbWEpIHtcbiAgICB2YXIgeCwgcjtcbiAgICBtdSA9IG11ID09IG51bGwgPyAwIDogK211O1xuICAgIHNpZ21hID0gc2lnbWEgPT0gbnVsbCA/IDEgOiArc2lnbWE7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHk7XG5cbiAgICAgIC8vIElmIGF2YWlsYWJsZSwgdXNlIHRoZSBzZWNvbmQgcHJldmlvdXNseS1nZW5lcmF0ZWQgdW5pZm9ybSByYW5kb20uXG4gICAgICBpZiAoeCAhPSBudWxsKSB5ID0geCwgeCA9IG51bGw7XG5cbiAgICAgIC8vIE90aGVyd2lzZSwgZ2VuZXJhdGUgYSBuZXcgeCBhbmQgeS5cbiAgICAgIGVsc2UgZG8ge1xuICAgICAgICB4ID0gc291cmNlKCkgKiAyIC0gMTtcbiAgICAgICAgeSA9IHNvdXJjZSgpICogMiAtIDE7XG4gICAgICAgIHIgPSB4ICogeCArIHkgKiB5O1xuICAgICAgfSB3aGlsZSAoIXIgfHwgciA+IDEpO1xuXG4gICAgICByZXR1cm4gbXUgKyBzaWdtYSAqIHkgKiBNYXRoLnNxcnQoLTIgKiBNYXRoLmxvZyhyKSAvIHIpO1xuICAgIH07XG4gIH1cblxuICByYW5kb21Ob3JtYWwuc291cmNlID0gc291cmNlUmFuZG9tTm9ybWFsO1xuXG4gIHJldHVybiByYW5kb21Ob3JtYWw7XG59KShkZWZhdWx0U291cmNlJDEpO1xuXG52YXIgbG9nTm9ybWFsID0gKGZ1bmN0aW9uIHNvdXJjZVJhbmRvbUxvZ05vcm1hbChzb3VyY2UpIHtcbiAgZnVuY3Rpb24gcmFuZG9tTG9nTm9ybWFsKCkge1xuICAgIHZhciByYW5kb21Ob3JtYWwgPSBub3JtYWwuc291cmNlKHNvdXJjZSkuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gTWF0aC5leHAocmFuZG9tTm9ybWFsKCkpO1xuICAgIH07XG4gIH1cblxuICByYW5kb21Mb2dOb3JtYWwuc291cmNlID0gc291cmNlUmFuZG9tTG9nTm9ybWFsO1xuXG4gIHJldHVybiByYW5kb21Mb2dOb3JtYWw7XG59KShkZWZhdWx0U291cmNlJDEpO1xuXG52YXIgaXJ3aW5IYWxsID0gKGZ1bmN0aW9uIHNvdXJjZVJhbmRvbUlyd2luSGFsbChzb3VyY2UpIHtcbiAgZnVuY3Rpb24gcmFuZG9tSXJ3aW5IYWxsKG4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBmb3IgKHZhciBzdW0gPSAwLCBpID0gMDsgaSA8IG47ICsraSkgc3VtICs9IHNvdXJjZSgpO1xuICAgICAgcmV0dXJuIHN1bTtcbiAgICB9O1xuICB9XG5cbiAgcmFuZG9tSXJ3aW5IYWxsLnNvdXJjZSA9IHNvdXJjZVJhbmRvbUlyd2luSGFsbDtcblxuICByZXR1cm4gcmFuZG9tSXJ3aW5IYWxsO1xufSkoZGVmYXVsdFNvdXJjZSQxKTtcblxudmFyIGJhdGVzID0gKGZ1bmN0aW9uIHNvdXJjZVJhbmRvbUJhdGVzKHNvdXJjZSkge1xuICBmdW5jdGlvbiByYW5kb21CYXRlcyhuKSB7XG4gICAgdmFyIHJhbmRvbUlyd2luSGFsbCA9IGlyd2luSGFsbC5zb3VyY2Uoc291cmNlKShuKTtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcmFuZG9tSXJ3aW5IYWxsKCkgLyBuO1xuICAgIH07XG4gIH1cblxuICByYW5kb21CYXRlcy5zb3VyY2UgPSBzb3VyY2VSYW5kb21CYXRlcztcblxuICByZXR1cm4gcmFuZG9tQmF0ZXM7XG59KShkZWZhdWx0U291cmNlJDEpO1xuXG52YXIgZXhwb25lbnRpYWwkMSA9IChmdW5jdGlvbiBzb3VyY2VSYW5kb21FeHBvbmVudGlhbChzb3VyY2UpIHtcbiAgZnVuY3Rpb24gcmFuZG9tRXhwb25lbnRpYWwobGFtYmRhKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIC1NYXRoLmxvZygxIC0gc291cmNlKCkpIC8gbGFtYmRhO1xuICAgIH07XG4gIH1cblxuICByYW5kb21FeHBvbmVudGlhbC5zb3VyY2UgPSBzb3VyY2VSYW5kb21FeHBvbmVudGlhbDtcblxuICByZXR1cm4gcmFuZG9tRXhwb25lbnRpYWw7XG59KShkZWZhdWx0U291cmNlJDEpO1xuXG52YXIgcmVxdWVzdCA9IGZ1bmN0aW9uKHVybCwgY2FsbGJhY2spIHtcbiAgdmFyIHJlcXVlc3QsXG4gICAgICBldmVudCA9IGRpc3BhdGNoKFwiYmVmb3Jlc2VuZFwiLCBcInByb2dyZXNzXCIsIFwibG9hZFwiLCBcImVycm9yXCIpLFxuICAgICAgbWltZVR5cGUsXG4gICAgICBoZWFkZXJzID0gbWFwJDEoKSxcbiAgICAgIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCxcbiAgICAgIHVzZXIgPSBudWxsLFxuICAgICAgcGFzc3dvcmQgPSBudWxsLFxuICAgICAgcmVzcG9uc2UsXG4gICAgICByZXNwb25zZVR5cGUsXG4gICAgICB0aW1lb3V0ID0gMDtcblxuICAvLyBJZiBJRSBkb2VzIG5vdCBzdXBwb3J0IENPUlMsIHVzZSBYRG9tYWluUmVxdWVzdC5cbiAgaWYgKHR5cGVvZiBYRG9tYWluUmVxdWVzdCAhPT0gXCJ1bmRlZmluZWRcIlxuICAgICAgJiYgIShcIndpdGhDcmVkZW50aWFsc1wiIGluIHhocilcbiAgICAgICYmIC9eKGh0dHAocyk/Oik/XFwvXFwvLy50ZXN0KHVybCkpIHhociA9IG5ldyBYRG9tYWluUmVxdWVzdDtcblxuICBcIm9ubG9hZFwiIGluIHhoclxuICAgICAgPyB4aHIub25sb2FkID0geGhyLm9uZXJyb3IgPSB4aHIub250aW1lb3V0ID0gcmVzcG9uZFxuICAgICAgOiB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24obykgeyB4aHIucmVhZHlTdGF0ZSA+IDMgJiYgcmVzcG9uZChvKTsgfTtcblxuICBmdW5jdGlvbiByZXNwb25kKG8pIHtcbiAgICB2YXIgc3RhdHVzID0geGhyLnN0YXR1cywgcmVzdWx0O1xuICAgIGlmICghc3RhdHVzICYmIGhhc1Jlc3BvbnNlKHhocilcbiAgICAgICAgfHwgc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDBcbiAgICAgICAgfHwgc3RhdHVzID09PSAzMDQpIHtcbiAgICAgIGlmIChyZXNwb25zZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJlc3VsdCA9IHJlc3BvbnNlLmNhbGwocmVxdWVzdCwgeGhyKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGV2ZW50LmNhbGwoXCJlcnJvclwiLCByZXF1ZXN0LCBlKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IHhocjtcbiAgICAgIH1cbiAgICAgIGV2ZW50LmNhbGwoXCJsb2FkXCIsIHJlcXVlc3QsIHJlc3VsdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV2ZW50LmNhbGwoXCJlcnJvclwiLCByZXF1ZXN0LCBvKTtcbiAgICB9XG4gIH1cblxuICB4aHIub25wcm9ncmVzcyA9IGZ1bmN0aW9uKGUpIHtcbiAgICBldmVudC5jYWxsKFwicHJvZ3Jlc3NcIiwgcmVxdWVzdCwgZSk7XG4gIH07XG5cbiAgcmVxdWVzdCA9IHtcbiAgICBoZWFkZXI6IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgICBuYW1lID0gKG5hbWUgKyBcIlwiKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gaGVhZGVycy5nZXQobmFtZSk7XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkgaGVhZGVycy5yZW1vdmUobmFtZSk7XG4gICAgICBlbHNlIGhlYWRlcnMuc2V0KG5hbWUsIHZhbHVlICsgXCJcIik7XG4gICAgICByZXR1cm4gcmVxdWVzdDtcbiAgICB9LFxuXG4gICAgLy8gSWYgbWltZVR5cGUgaXMgbm9uLW51bGwgYW5kIG5vIEFjY2VwdCBoZWFkZXIgaXMgc2V0LCBhIGRlZmF1bHQgaXMgdXNlZC5cbiAgICBtaW1lVHlwZTogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIG1pbWVUeXBlO1xuICAgICAgbWltZVR5cGUgPSB2YWx1ZSA9PSBudWxsID8gbnVsbCA6IHZhbHVlICsgXCJcIjtcbiAgICAgIHJldHVybiByZXF1ZXN0O1xuICAgIH0sXG5cbiAgICAvLyBTcGVjaWZpZXMgd2hhdCB0eXBlIHRoZSByZXNwb25zZSB2YWx1ZSBzaG91bGQgdGFrZTtcbiAgICAvLyBmb3IgaW5zdGFuY2UsIGFycmF5YnVmZmVyLCBibG9iLCBkb2N1bWVudCwgb3IgdGV4dC5cbiAgICByZXNwb25zZVR5cGU6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiByZXNwb25zZVR5cGU7XG4gICAgICByZXNwb25zZVR5cGUgPSB2YWx1ZTtcbiAgICAgIHJldHVybiByZXF1ZXN0O1xuICAgIH0sXG5cbiAgICB0aW1lb3V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGltZW91dDtcbiAgICAgIHRpbWVvdXQgPSArdmFsdWU7XG4gICAgICByZXR1cm4gcmVxdWVzdDtcbiAgICB9LFxuXG4gICAgdXNlcjogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMSA/IHVzZXIgOiAodXNlciA9IHZhbHVlID09IG51bGwgPyBudWxsIDogdmFsdWUgKyBcIlwiLCByZXF1ZXN0KTtcbiAgICB9LFxuXG4gICAgcGFzc3dvcmQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDEgPyBwYXNzd29yZCA6IChwYXNzd29yZCA9IHZhbHVlID09IG51bGwgPyBudWxsIDogdmFsdWUgKyBcIlwiLCByZXF1ZXN0KTtcbiAgICB9LFxuXG4gICAgLy8gU3BlY2lmeSBob3cgdG8gY29udmVydCB0aGUgcmVzcG9uc2UgY29udGVudCB0byBhIHNwZWNpZmljIHR5cGU7XG4gICAgLy8gY2hhbmdlcyB0aGUgY2FsbGJhY2sgdmFsdWUgb24gXCJsb2FkXCIgZXZlbnRzLlxuICAgIHJlc3BvbnNlOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmVzcG9uc2UgPSB2YWx1ZTtcbiAgICAgIHJldHVybiByZXF1ZXN0O1xuICAgIH0sXG5cbiAgICAvLyBBbGlhcyBmb3Igc2VuZChcIkdFVFwiLCDigKYpLlxuICAgIGdldDogZnVuY3Rpb24oZGF0YSwgY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiByZXF1ZXN0LnNlbmQoXCJHRVRcIiwgZGF0YSwgY2FsbGJhY2spO1xuICAgIH0sXG5cbiAgICAvLyBBbGlhcyBmb3Igc2VuZChcIlBPU1RcIiwg4oCmKS5cbiAgICBwb3N0OiBmdW5jdGlvbihkYXRhLCBjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIHJlcXVlc3Quc2VuZChcIlBPU1RcIiwgZGF0YSwgY2FsbGJhY2spO1xuICAgIH0sXG5cbiAgICAvLyBJZiBjYWxsYmFjayBpcyBub24tbnVsbCwgaXQgd2lsbCBiZSB1c2VkIGZvciBlcnJvciBhbmQgbG9hZCBldmVudHMuXG4gICAgc2VuZDogZnVuY3Rpb24obWV0aG9kLCBkYXRhLCBjYWxsYmFjaykge1xuICAgICAgeGhyLm9wZW4obWV0aG9kLCB1cmwsIHRydWUsIHVzZXIsIHBhc3N3b3JkKTtcbiAgICAgIGlmIChtaW1lVHlwZSAhPSBudWxsICYmICFoZWFkZXJzLmhhcyhcImFjY2VwdFwiKSkgaGVhZGVycy5zZXQoXCJhY2NlcHRcIiwgbWltZVR5cGUgKyBcIiwqLypcIik7XG4gICAgICBpZiAoeGhyLnNldFJlcXVlc3RIZWFkZXIpIGhlYWRlcnMuZWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkgeyB4aHIuc2V0UmVxdWVzdEhlYWRlcihuYW1lLCB2YWx1ZSk7IH0pO1xuICAgICAgaWYgKG1pbWVUeXBlICE9IG51bGwgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUpIHhoci5vdmVycmlkZU1pbWVUeXBlKG1pbWVUeXBlKTtcbiAgICAgIGlmIChyZXNwb25zZVR5cGUgIT0gbnVsbCkgeGhyLnJlc3BvbnNlVHlwZSA9IHJlc3BvbnNlVHlwZTtcbiAgICAgIGlmICh0aW1lb3V0ID4gMCkgeGhyLnRpbWVvdXQgPSB0aW1lb3V0O1xuICAgICAgaWYgKGNhbGxiYWNrID09IG51bGwgJiYgdHlwZW9mIGRhdGEgPT09IFwiZnVuY3Rpb25cIikgY2FsbGJhY2sgPSBkYXRhLCBkYXRhID0gbnVsbDtcbiAgICAgIGlmIChjYWxsYmFjayAhPSBudWxsICYmIGNhbGxiYWNrLmxlbmd0aCA9PT0gMSkgY2FsbGJhY2sgPSBmaXhDYWxsYmFjayhjYWxsYmFjayk7XG4gICAgICBpZiAoY2FsbGJhY2sgIT0gbnVsbCkgcmVxdWVzdC5vbihcImVycm9yXCIsIGNhbGxiYWNrKS5vbihcImxvYWRcIiwgZnVuY3Rpb24oeGhyKSB7IGNhbGxiYWNrKG51bGwsIHhocik7IH0pO1xuICAgICAgZXZlbnQuY2FsbChcImJlZm9yZXNlbmRcIiwgcmVxdWVzdCwgeGhyKTtcbiAgICAgIHhoci5zZW5kKGRhdGEgPT0gbnVsbCA/IG51bGwgOiBkYXRhKTtcbiAgICAgIHJldHVybiByZXF1ZXN0O1xuICAgIH0sXG5cbiAgICBhYm9ydDogZnVuY3Rpb24oKSB7XG4gICAgICB4aHIuYWJvcnQoKTtcbiAgICAgIHJldHVybiByZXF1ZXN0O1xuICAgIH0sXG5cbiAgICBvbjogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdmFsdWUgPSBldmVudC5vbi5hcHBseShldmVudCwgYXJndW1lbnRzKTtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gZXZlbnQgPyByZXF1ZXN0IDogdmFsdWU7XG4gICAgfVxuICB9O1xuXG4gIGlmIChjYWxsYmFjayAhPSBudWxsKSB7XG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGNhbGxiYWNrOiBcIiArIGNhbGxiYWNrKTtcbiAgICByZXR1cm4gcmVxdWVzdC5nZXQoY2FsbGJhY2spO1xuICB9XG5cbiAgcmV0dXJuIHJlcXVlc3Q7XG59O1xuXG5mdW5jdGlvbiBmaXhDYWxsYmFjayhjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24oZXJyb3IsIHhocikge1xuICAgIGNhbGxiYWNrKGVycm9yID09IG51bGwgPyB4aHIgOiBudWxsKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaGFzUmVzcG9uc2UoeGhyKSB7XG4gIHZhciB0eXBlID0geGhyLnJlc3BvbnNlVHlwZTtcbiAgcmV0dXJuIHR5cGUgJiYgdHlwZSAhPT0gXCJ0ZXh0XCJcbiAgICAgID8geGhyLnJlc3BvbnNlIC8vIG51bGwgb24gZXJyb3JcbiAgICAgIDogeGhyLnJlc3BvbnNlVGV4dDsgLy8gXCJcIiBvbiBlcnJvclxufVxuXG52YXIgdHlwZSQxID0gZnVuY3Rpb24oZGVmYXVsdE1pbWVUeXBlLCByZXNwb25zZSkge1xuICByZXR1cm4gZnVuY3Rpb24odXJsLCBjYWxsYmFjaykge1xuICAgIHZhciByID0gcmVxdWVzdCh1cmwpLm1pbWVUeXBlKGRlZmF1bHRNaW1lVHlwZSkucmVzcG9uc2UocmVzcG9uc2UpO1xuICAgIGlmIChjYWxsYmFjayAhPSBudWxsKSB7XG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgY2FsbGJhY2s6IFwiICsgY2FsbGJhY2spO1xuICAgICAgcmV0dXJuIHIuZ2V0KGNhbGxiYWNrKTtcbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH07XG59O1xuXG52YXIgaHRtbCA9IHR5cGUkMShcInRleHQvaHRtbFwiLCBmdW5jdGlvbih4aHIpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVJhbmdlKCkuY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50KHhoci5yZXNwb25zZVRleHQpO1xufSk7XG5cbnZhciBqc29uID0gdHlwZSQxKFwiYXBwbGljYXRpb24vanNvblwiLCBmdW5jdGlvbih4aHIpIHtcbiAgcmV0dXJuIEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCk7XG59KTtcblxudmFyIHRleHQgPSB0eXBlJDEoXCJ0ZXh0L3BsYWluXCIsIGZ1bmN0aW9uKHhocikge1xuICByZXR1cm4geGhyLnJlc3BvbnNlVGV4dDtcbn0pO1xuXG52YXIgeG1sID0gdHlwZSQxKFwiYXBwbGljYXRpb24veG1sXCIsIGZ1bmN0aW9uKHhocikge1xuICB2YXIgeG1sID0geGhyLnJlc3BvbnNlWE1MO1xuICBpZiAoIXhtbCkgdGhyb3cgbmV3IEVycm9yKFwicGFyc2UgZXJyb3JcIik7XG4gIHJldHVybiB4bWw7XG59KTtcblxudmFyIGRzdiQxID0gZnVuY3Rpb24oZGVmYXVsdE1pbWVUeXBlLCBwYXJzZSkge1xuICByZXR1cm4gZnVuY3Rpb24odXJsLCByb3csIGNhbGxiYWNrKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAzKSBjYWxsYmFjayA9IHJvdywgcm93ID0gbnVsbDtcbiAgICB2YXIgciA9IHJlcXVlc3QodXJsKS5taW1lVHlwZShkZWZhdWx0TWltZVR5cGUpO1xuICAgIHIucm93ID0gZnVuY3Rpb24oXykgeyByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHIucmVzcG9uc2UocmVzcG9uc2VPZihwYXJzZSwgcm93ID0gXykpIDogcm93OyB9O1xuICAgIHIucm93KHJvdyk7XG4gICAgcmV0dXJuIGNhbGxiYWNrID8gci5nZXQoY2FsbGJhY2spIDogcjtcbiAgfTtcbn07XG5cbmZ1bmN0aW9uIHJlc3BvbnNlT2YocGFyc2UsIHJvdykge1xuICByZXR1cm4gZnVuY3Rpb24ocmVxdWVzdCQkMSkge1xuICAgIHJldHVybiBwYXJzZShyZXF1ZXN0JCQxLnJlc3BvbnNlVGV4dCwgcm93KTtcbiAgfTtcbn1cblxudmFyIGNzdiQxID0gZHN2JDEoXCJ0ZXh0L2NzdlwiLCBjc3ZQYXJzZSk7XG5cbnZhciB0c3YkMSA9IGRzdiQxKFwidGV4dC90YWItc2VwYXJhdGVkLXZhbHVlc1wiLCB0c3ZQYXJzZSk7XG5cbnZhciBhcnJheSQyID0gQXJyYXkucHJvdG90eXBlO1xuXG52YXIgbWFwJDMgPSBhcnJheSQyLm1hcDtcbnZhciBzbGljZSQ1ID0gYXJyYXkkMi5zbGljZTtcblxudmFyIGltcGxpY2l0ID0ge25hbWU6IFwiaW1wbGljaXRcIn07XG5cbmZ1bmN0aW9uIG9yZGluYWwocmFuZ2UpIHtcbiAgdmFyIGluZGV4ID0gbWFwJDEoKSxcbiAgICAgIGRvbWFpbiA9IFtdLFxuICAgICAgdW5rbm93biA9IGltcGxpY2l0O1xuXG4gIHJhbmdlID0gcmFuZ2UgPT0gbnVsbCA/IFtdIDogc2xpY2UkNS5jYWxsKHJhbmdlKTtcblxuICBmdW5jdGlvbiBzY2FsZShkKSB7XG4gICAgdmFyIGtleSA9IGQgKyBcIlwiLCBpID0gaW5kZXguZ2V0KGtleSk7XG4gICAgaWYgKCFpKSB7XG4gICAgICBpZiAodW5rbm93biAhPT0gaW1wbGljaXQpIHJldHVybiB1bmtub3duO1xuICAgICAgaW5kZXguc2V0KGtleSwgaSA9IGRvbWFpbi5wdXNoKGQpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJhbmdlWyhpIC0gMSkgJSByYW5nZS5sZW5ndGhdO1xuICB9XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGRvbWFpbi5zbGljZSgpO1xuICAgIGRvbWFpbiA9IFtdLCBpbmRleCA9IG1hcCQxKCk7XG4gICAgdmFyIGkgPSAtMSwgbiA9IF8ubGVuZ3RoLCBkLCBrZXk7XG4gICAgd2hpbGUgKCsraSA8IG4pIGlmICghaW5kZXguaGFzKGtleSA9IChkID0gX1tpXSkgKyBcIlwiKSkgaW5kZXguc2V0KGtleSwgZG9tYWluLnB1c2goZCkpO1xuICAgIHJldHVybiBzY2FsZTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IHNsaWNlJDUuY2FsbChfKSwgc2NhbGUpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS51bmtub3duID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHVua25vd24gPSBfLCBzY2FsZSkgOiB1bmtub3duO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gb3JkaW5hbCgpXG4gICAgICAgIC5kb21haW4oZG9tYWluKVxuICAgICAgICAucmFuZ2UocmFuZ2UpXG4gICAgICAgIC51bmtub3duKHVua25vd24pO1xuICB9O1xuXG4gIHJldHVybiBzY2FsZTtcbn1cblxuZnVuY3Rpb24gYmFuZCgpIHtcbiAgdmFyIHNjYWxlID0gb3JkaW5hbCgpLnVua25vd24odW5kZWZpbmVkKSxcbiAgICAgIGRvbWFpbiA9IHNjYWxlLmRvbWFpbixcbiAgICAgIG9yZGluYWxSYW5nZSA9IHNjYWxlLnJhbmdlLFxuICAgICAgcmFuZ2UgPSBbMCwgMV0sXG4gICAgICBzdGVwLFxuICAgICAgYmFuZHdpZHRoLFxuICAgICAgcm91bmQgPSBmYWxzZSxcbiAgICAgIHBhZGRpbmdJbm5lciA9IDAsXG4gICAgICBwYWRkaW5nT3V0ZXIgPSAwLFxuICAgICAgYWxpZ24gPSAwLjU7XG5cbiAgZGVsZXRlIHNjYWxlLnVua25vd247XG5cbiAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICB2YXIgbiA9IGRvbWFpbigpLmxlbmd0aCxcbiAgICAgICAgcmV2ZXJzZSA9IHJhbmdlWzFdIDwgcmFuZ2VbMF0sXG4gICAgICAgIHN0YXJ0ID0gcmFuZ2VbcmV2ZXJzZSAtIDBdLFxuICAgICAgICBzdG9wID0gcmFuZ2VbMSAtIHJldmVyc2VdO1xuICAgIHN0ZXAgPSAoc3RvcCAtIHN0YXJ0KSAvIE1hdGgubWF4KDEsIG4gLSBwYWRkaW5nSW5uZXIgKyBwYWRkaW5nT3V0ZXIgKiAyKTtcbiAgICBpZiAocm91bmQpIHN0ZXAgPSBNYXRoLmZsb29yKHN0ZXApO1xuICAgIHN0YXJ0ICs9IChzdG9wIC0gc3RhcnQgLSBzdGVwICogKG4gLSBwYWRkaW5nSW5uZXIpKSAqIGFsaWduO1xuICAgIGJhbmR3aWR0aCA9IHN0ZXAgKiAoMSAtIHBhZGRpbmdJbm5lcik7XG4gICAgaWYgKHJvdW5kKSBzdGFydCA9IE1hdGgucm91bmQoc3RhcnQpLCBiYW5kd2lkdGggPSBNYXRoLnJvdW5kKGJhbmR3aWR0aCk7XG4gICAgdmFyIHZhbHVlcyA9IHNlcXVlbmNlKG4pLm1hcChmdW5jdGlvbihpKSB7IHJldHVybiBzdGFydCArIHN0ZXAgKiBpOyB9KTtcbiAgICByZXR1cm4gb3JkaW5hbFJhbmdlKHJldmVyc2UgPyB2YWx1ZXMucmV2ZXJzZSgpIDogdmFsdWVzKTtcbiAgfVxuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4oXyksIHJlc2NhbGUoKSkgOiBkb21haW4oKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IFsrX1swXSwgK19bMV1dLCByZXNjYWxlKCkpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZVJvdW5kID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiByYW5nZSA9IFsrX1swXSwgK19bMV1dLCByb3VuZCA9IHRydWUsIHJlc2NhbGUoKTtcbiAgfTtcblxuICBzY2FsZS5iYW5kd2lkdGggPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYmFuZHdpZHRoO1xuICB9O1xuXG4gIHNjYWxlLnN0ZXAgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gc3RlcDtcbiAgfTtcblxuICBzY2FsZS5yb3VuZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyb3VuZCA9ICEhXywgcmVzY2FsZSgpKSA6IHJvdW5kO1xuICB9O1xuXG4gIHNjYWxlLnBhZGRpbmcgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ0lubmVyID0gcGFkZGluZ091dGVyID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgXykpLCByZXNjYWxlKCkpIDogcGFkZGluZ0lubmVyO1xuICB9O1xuXG4gIHNjYWxlLnBhZGRpbmdJbm5lciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nSW5uZXIgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBfKSksIHJlc2NhbGUoKSkgOiBwYWRkaW5nSW5uZXI7XG4gIH07XG5cbiAgc2NhbGUucGFkZGluZ091dGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdPdXRlciA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIF8pKSwgcmVzY2FsZSgpKSA6IHBhZGRpbmdPdXRlcjtcbiAgfTtcblxuICBzY2FsZS5hbGlnbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChhbGlnbiA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIF8pKSwgcmVzY2FsZSgpKSA6IGFsaWduO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYmFuZCgpXG4gICAgICAgIC5kb21haW4oZG9tYWluKCkpXG4gICAgICAgIC5yYW5nZShyYW5nZSlcbiAgICAgICAgLnJvdW5kKHJvdW5kKVxuICAgICAgICAucGFkZGluZ0lubmVyKHBhZGRpbmdJbm5lcilcbiAgICAgICAgLnBhZGRpbmdPdXRlcihwYWRkaW5nT3V0ZXIpXG4gICAgICAgIC5hbGlnbihhbGlnbik7XG4gIH07XG5cbiAgcmV0dXJuIHJlc2NhbGUoKTtcbn1cblxuZnVuY3Rpb24gcG9pbnRpc2goc2NhbGUpIHtcbiAgdmFyIGNvcHkgPSBzY2FsZS5jb3B5O1xuXG4gIHNjYWxlLnBhZGRpbmcgPSBzY2FsZS5wYWRkaW5nT3V0ZXI7XG4gIGRlbGV0ZSBzY2FsZS5wYWRkaW5nSW5uZXI7XG4gIGRlbGV0ZSBzY2FsZS5wYWRkaW5nT3V0ZXI7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBwb2ludGlzaChjb3B5KCkpO1xuICB9O1xuXG4gIHJldHVybiBzY2FsZTtcbn1cblxuZnVuY3Rpb24gcG9pbnQkMSgpIHtcbiAgcmV0dXJuIHBvaW50aXNoKGJhbmQoKS5wYWRkaW5nSW5uZXIoMSkpO1xufVxuXG52YXIgY29uc3RhbnQkOSA9IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufTtcblxudmFyIG51bWJlciQyID0gZnVuY3Rpb24oeCkge1xuICByZXR1cm4gK3g7XG59O1xuXG52YXIgdW5pdCA9IFswLCAxXTtcblxuZnVuY3Rpb24gZGVpbnRlcnBvbGF0ZUxpbmVhcihhLCBiKSB7XG4gIHJldHVybiAoYiAtPSAoYSA9ICthKSlcbiAgICAgID8gZnVuY3Rpb24oeCkgeyByZXR1cm4gKHggLSBhKSAvIGI7IH1cbiAgICAgIDogY29uc3RhbnQkOShiKTtcbn1cblxuZnVuY3Rpb24gZGVpbnRlcnBvbGF0ZUNsYW1wKGRlaW50ZXJwb2xhdGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICB2YXIgZCA9IGRlaW50ZXJwb2xhdGUoYSA9ICthLCBiID0gK2IpO1xuICAgIHJldHVybiBmdW5jdGlvbih4KSB7IHJldHVybiB4IDw9IGEgPyAwIDogeCA+PSBiID8gMSA6IGQoeCk7IH07XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJlaW50ZXJwb2xhdGVDbGFtcChyZWludGVycG9sYXRlJCQxKSB7XG4gIHJldHVybiBmdW5jdGlvbihhLCBiKSB7XG4gICAgdmFyIHIgPSByZWludGVycG9sYXRlJCQxKGEgPSArYSwgYiA9ICtiKTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkgeyByZXR1cm4gdCA8PSAwID8gYSA6IHQgPj0gMSA/IGIgOiByKHQpOyB9O1xuICB9O1xufVxuXG5mdW5jdGlvbiBiaW1hcChkb21haW4sIHJhbmdlLCBkZWludGVycG9sYXRlLCByZWludGVycG9sYXRlJCQxKSB7XG4gIHZhciBkMCA9IGRvbWFpblswXSwgZDEgPSBkb21haW5bMV0sIHIwID0gcmFuZ2VbMF0sIHIxID0gcmFuZ2VbMV07XG4gIGlmIChkMSA8IGQwKSBkMCA9IGRlaW50ZXJwb2xhdGUoZDEsIGQwKSwgcjAgPSByZWludGVycG9sYXRlJCQxKHIxLCByMCk7XG4gIGVsc2UgZDAgPSBkZWludGVycG9sYXRlKGQwLCBkMSksIHIwID0gcmVpbnRlcnBvbGF0ZSQkMShyMCwgcjEpO1xuICByZXR1cm4gZnVuY3Rpb24oeCkgeyByZXR1cm4gcjAoZDAoeCkpOyB9O1xufVxuXG5mdW5jdGlvbiBwb2x5bWFwKGRvbWFpbiwgcmFuZ2UsIGRlaW50ZXJwb2xhdGUsIHJlaW50ZXJwb2xhdGUkJDEpIHtcbiAgdmFyIGogPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGgpIC0gMSxcbiAgICAgIGQgPSBuZXcgQXJyYXkoaiksXG4gICAgICByID0gbmV3IEFycmF5KGopLFxuICAgICAgaSA9IC0xO1xuXG4gIC8vIFJldmVyc2UgZGVzY2VuZGluZyBkb21haW5zLlxuICBpZiAoZG9tYWluW2pdIDwgZG9tYWluWzBdKSB7XG4gICAgZG9tYWluID0gZG9tYWluLnNsaWNlKCkucmV2ZXJzZSgpO1xuICAgIHJhbmdlID0gcmFuZ2Uuc2xpY2UoKS5yZXZlcnNlKCk7XG4gIH1cblxuICB3aGlsZSAoKytpIDwgaikge1xuICAgIGRbaV0gPSBkZWludGVycG9sYXRlKGRvbWFpbltpXSwgZG9tYWluW2kgKyAxXSk7XG4gICAgcltpXSA9IHJlaW50ZXJwb2xhdGUkJDEocmFuZ2VbaV0sIHJhbmdlW2kgKyAxXSk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oeCkge1xuICAgIHZhciBpID0gYmlzZWN0UmlnaHQoZG9tYWluLCB4LCAxLCBqKSAtIDE7XG4gICAgcmV0dXJuIHJbaV0oZFtpXSh4KSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvcHkoc291cmNlLCB0YXJnZXQpIHtcbiAgcmV0dXJuIHRhcmdldFxuICAgICAgLmRvbWFpbihzb3VyY2UuZG9tYWluKCkpXG4gICAgICAucmFuZ2Uoc291cmNlLnJhbmdlKCkpXG4gICAgICAuaW50ZXJwb2xhdGUoc291cmNlLmludGVycG9sYXRlKCkpXG4gICAgICAuY2xhbXAoc291cmNlLmNsYW1wKCkpO1xufVxuXG4vLyBkZWludGVycG9sYXRlKGEsIGIpKHgpIHRha2VzIGEgZG9tYWluIHZhbHVlIHggaW4gW2EsYl0gYW5kIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcGFyYW1ldGVyIHQgaW4gWzAsMV0uXG4vLyByZWludGVycG9sYXRlKGEsIGIpKHQpIHRha2VzIGEgcGFyYW1ldGVyIHQgaW4gWzAsMV0gYW5kIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgZG9tYWluIHZhbHVlIHggaW4gW2EsYl0uXG5mdW5jdGlvbiBjb250aW51b3VzKGRlaW50ZXJwb2xhdGUsIHJlaW50ZXJwb2xhdGUkJDEpIHtcbiAgdmFyIGRvbWFpbiA9IHVuaXQsXG4gICAgICByYW5nZSA9IHVuaXQsXG4gICAgICBpbnRlcnBvbGF0ZSA9IGludGVycG9sYXRlVmFsdWUsXG4gICAgICBjbGFtcCA9IGZhbHNlLFxuICAgICAgcGllY2V3aXNlLFxuICAgICAgb3V0cHV0LFxuICAgICAgaW5wdXQ7XG5cbiAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICBwaWVjZXdpc2UgPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGgpID4gMiA/IHBvbHltYXAgOiBiaW1hcDtcbiAgICBvdXRwdXQgPSBpbnB1dCA9IG51bGw7XG4gICAgcmV0dXJuIHNjYWxlO1xuICB9XG5cbiAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgIHJldHVybiAob3V0cHV0IHx8IChvdXRwdXQgPSBwaWVjZXdpc2UoZG9tYWluLCByYW5nZSwgY2xhbXAgPyBkZWludGVycG9sYXRlQ2xhbXAoZGVpbnRlcnBvbGF0ZSkgOiBkZWludGVycG9sYXRlLCBpbnRlcnBvbGF0ZSkpKSgreCk7XG4gIH1cblxuICBzY2FsZS5pbnZlcnQgPSBmdW5jdGlvbih5KSB7XG4gICAgcmV0dXJuIChpbnB1dCB8fCAoaW5wdXQgPSBwaWVjZXdpc2UocmFuZ2UsIGRvbWFpbiwgZGVpbnRlcnBvbGF0ZUxpbmVhciwgY2xhbXAgPyByZWludGVycG9sYXRlQ2xhbXAocmVpbnRlcnBvbGF0ZSQkMSkgOiByZWludGVycG9sYXRlJCQxKSkpKCt5KTtcbiAgfTtcblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZG9tYWluID0gbWFwJDMuY2FsbChfLCBudW1iZXIkMiksIHJlc2NhbGUoKSkgOiBkb21haW4uc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IHNsaWNlJDUuY2FsbChfKSwgcmVzY2FsZSgpKSA6IHJhbmdlLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2VSb3VuZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gcmFuZ2UgPSBzbGljZSQ1LmNhbGwoXyksIGludGVycG9sYXRlID0gaW50ZXJwb2xhdGVSb3VuZCwgcmVzY2FsZSgpO1xuICB9O1xuXG4gIHNjYWxlLmNsYW1wID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNsYW1wID0gISFfLCByZXNjYWxlKCkpIDogY2xhbXA7XG4gIH07XG5cbiAgc2NhbGUuaW50ZXJwb2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaW50ZXJwb2xhdGUgPSBfLCByZXNjYWxlKCkpIDogaW50ZXJwb2xhdGU7XG4gIH07XG5cbiAgcmV0dXJuIHJlc2NhbGUoKTtcbn1cblxudmFyIHRpY2tGb3JtYXQgPSBmdW5jdGlvbihkb21haW4sIGNvdW50LCBzcGVjaWZpZXIpIHtcbiAgdmFyIHN0YXJ0ID0gZG9tYWluWzBdLFxuICAgICAgc3RvcCA9IGRvbWFpbltkb21haW4ubGVuZ3RoIC0gMV0sXG4gICAgICBzdGVwID0gdGlja1N0ZXAoc3RhcnQsIHN0b3AsIGNvdW50ID09IG51bGwgPyAxMCA6IGNvdW50KSxcbiAgICAgIHByZWNpc2lvbjtcbiAgc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllciA9PSBudWxsID8gXCIsZlwiIDogc3BlY2lmaWVyKTtcbiAgc3dpdGNoIChzcGVjaWZpZXIudHlwZSkge1xuICAgIGNhc2UgXCJzXCI6IHtcbiAgICAgIHZhciB2YWx1ZSA9IE1hdGgubWF4KE1hdGguYWJzKHN0YXJ0KSwgTWF0aC5hYnMoc3RvcCkpO1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uUHJlZml4KHN0ZXAsIHZhbHVlKSkpIHNwZWNpZmllci5wcmVjaXNpb24gPSBwcmVjaXNpb247XG4gICAgICByZXR1cm4gZXhwb3J0cy5mb3JtYXRQcmVmaXgoc3BlY2lmaWVyLCB2YWx1ZSk7XG4gICAgfVxuICAgIGNhc2UgXCJcIjpcbiAgICBjYXNlIFwiZVwiOlxuICAgIGNhc2UgXCJnXCI6XG4gICAgY2FzZSBcInBcIjpcbiAgICBjYXNlIFwiclwiOiB7XG4gICAgICBpZiAoc3BlY2lmaWVyLnByZWNpc2lvbiA9PSBudWxsICYmICFpc05hTihwcmVjaXNpb24gPSBwcmVjaXNpb25Sb3VuZChzdGVwLCBNYXRoLm1heChNYXRoLmFicyhzdGFydCksIE1hdGguYWJzKHN0b3ApKSkpKSBzcGVjaWZpZXIucHJlY2lzaW9uID0gcHJlY2lzaW9uIC0gKHNwZWNpZmllci50eXBlID09PSBcImVcIik7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcImZcIjpcbiAgICBjYXNlIFwiJVwiOiB7XG4gICAgICBpZiAoc3BlY2lmaWVyLnByZWNpc2lvbiA9PSBudWxsICYmICFpc05hTihwcmVjaXNpb24gPSBwcmVjaXNpb25GaXhlZChzdGVwKSkpIHNwZWNpZmllci5wcmVjaXNpb24gPSBwcmVjaXNpb24gLSAoc3BlY2lmaWVyLnR5cGUgPT09IFwiJVwiKSAqIDI7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGV4cG9ydHMuZm9ybWF0KHNwZWNpZmllcik7XG59O1xuXG5mdW5jdGlvbiBsaW5lYXJpc2goc2NhbGUpIHtcbiAgdmFyIGRvbWFpbiA9IHNjYWxlLmRvbWFpbjtcblxuICBzY2FsZS50aWNrcyA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICByZXR1cm4gdGlja3MoZFswXSwgZFtkLmxlbmd0aCAtIDFdLCBjb3VudCA9PSBudWxsID8gMTAgOiBjb3VudCk7XG4gIH07XG5cbiAgc2NhbGUudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKGNvdW50LCBzcGVjaWZpZXIpIHtcbiAgICByZXR1cm4gdGlja0Zvcm1hdChkb21haW4oKSwgY291bnQsIHNwZWNpZmllcik7XG4gIH07XG5cbiAgc2NhbGUubmljZSA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gICAgaWYgKGNvdW50ID09IG51bGwpIGNvdW50ID0gMTA7XG5cbiAgICB2YXIgZCA9IGRvbWFpbigpLFxuICAgICAgICBpMCA9IDAsXG4gICAgICAgIGkxID0gZC5sZW5ndGggLSAxLFxuICAgICAgICBzdGFydCA9IGRbaTBdLFxuICAgICAgICBzdG9wID0gZFtpMV0sXG4gICAgICAgIHN0ZXA7XG5cbiAgICBpZiAoc3RvcCA8IHN0YXJ0KSB7XG4gICAgICBzdGVwID0gc3RhcnQsIHN0YXJ0ID0gc3RvcCwgc3RvcCA9IHN0ZXA7XG4gICAgICBzdGVwID0gaTAsIGkwID0gaTEsIGkxID0gc3RlcDtcbiAgICB9XG5cbiAgICBzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpO1xuXG4gICAgaWYgKHN0ZXAgPiAwKSB7XG4gICAgICBzdGFydCA9IE1hdGguZmxvb3Ioc3RhcnQgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICBzdG9wID0gTWF0aC5jZWlsKHN0b3AgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICBzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpO1xuICAgIH0gZWxzZSBpZiAoc3RlcCA8IDApIHtcbiAgICAgIHN0YXJ0ID0gTWF0aC5jZWlsKHN0YXJ0ICogc3RlcCkgLyBzdGVwO1xuICAgICAgc3RvcCA9IE1hdGguZmxvb3Ioc3RvcCAqIHN0ZXApIC8gc3RlcDtcbiAgICAgIHN0ZXAgPSB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCk7XG4gICAgfVxuXG4gICAgaWYgKHN0ZXAgPiAwKSB7XG4gICAgICBkW2kwXSA9IE1hdGguZmxvb3Ioc3RhcnQgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICBkW2kxXSA9IE1hdGguY2VpbChzdG9wIC8gc3RlcCkgKiBzdGVwO1xuICAgICAgZG9tYWluKGQpO1xuICAgIH0gZWxzZSBpZiAoc3RlcCA8IDApIHtcbiAgICAgIGRbaTBdID0gTWF0aC5jZWlsKHN0YXJ0ICogc3RlcCkgLyBzdGVwO1xuICAgICAgZFtpMV0gPSBNYXRoLmZsb29yKHN0b3AgKiBzdGVwKSAvIHN0ZXA7XG4gICAgICBkb21haW4oZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNjYWxlO1xuICB9O1xuXG4gIHJldHVybiBzY2FsZTtcbn1cblxuZnVuY3Rpb24gbGluZWFyJDIoKSB7XG4gIHZhciBzY2FsZSA9IGNvbnRpbnVvdXMoZGVpbnRlcnBvbGF0ZUxpbmVhciwgcmVpbnRlcnBvbGF0ZSk7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBsaW5lYXIkMigpKTtcbiAgfTtcblxuICByZXR1cm4gbGluZWFyaXNoKHNjYWxlKTtcbn1cblxuZnVuY3Rpb24gaWRlbnRpdHkkNigpIHtcbiAgdmFyIGRvbWFpbiA9IFswLCAxXTtcblxuICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgcmV0dXJuICt4O1xuICB9XG5cbiAgc2NhbGUuaW52ZXJ0ID0gc2NhbGU7XG5cbiAgc2NhbGUuZG9tYWluID0gc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZG9tYWluID0gbWFwJDMuY2FsbChfLCBudW1iZXIkMiksIHNjYWxlKSA6IGRvbWFpbi5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gaWRlbnRpdHkkNigpLmRvbWFpbihkb21haW4pO1xuICB9O1xuXG4gIHJldHVybiBsaW5lYXJpc2goc2NhbGUpO1xufVxuXG52YXIgbmljZSA9IGZ1bmN0aW9uKGRvbWFpbiwgaW50ZXJ2YWwpIHtcbiAgZG9tYWluID0gZG9tYWluLnNsaWNlKCk7XG5cbiAgdmFyIGkwID0gMCxcbiAgICAgIGkxID0gZG9tYWluLmxlbmd0aCAtIDEsXG4gICAgICB4MCA9IGRvbWFpbltpMF0sXG4gICAgICB4MSA9IGRvbWFpbltpMV0sXG4gICAgICB0O1xuXG4gIGlmICh4MSA8IHgwKSB7XG4gICAgdCA9IGkwLCBpMCA9IGkxLCBpMSA9IHQ7XG4gICAgdCA9IHgwLCB4MCA9IHgxLCB4MSA9IHQ7XG4gIH1cblxuICBkb21haW5baTBdID0gaW50ZXJ2YWwuZmxvb3IoeDApO1xuICBkb21haW5baTFdID0gaW50ZXJ2YWwuY2VpbCh4MSk7XG4gIHJldHVybiBkb21haW47XG59O1xuXG5mdW5jdGlvbiBkZWludGVycG9sYXRlKGEsIGIpIHtcbiAgcmV0dXJuIChiID0gTWF0aC5sb2coYiAvIGEpKVxuICAgICAgPyBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLmxvZyh4IC8gYSkgLyBiOyB9XG4gICAgICA6IGNvbnN0YW50JDkoYik7XG59XG5cbmZ1bmN0aW9uIHJlaW50ZXJwb2xhdGUkMShhLCBiKSB7XG4gIHJldHVybiBhIDwgMFxuICAgICAgPyBmdW5jdGlvbih0KSB7IHJldHVybiAtTWF0aC5wb3coLWIsIHQpICogTWF0aC5wb3coLWEsIDEgLSB0KTsgfVxuICAgICAgOiBmdW5jdGlvbih0KSB7IHJldHVybiBNYXRoLnBvdyhiLCB0KSAqIE1hdGgucG93KGEsIDEgLSB0KTsgfTtcbn1cblxuZnVuY3Rpb24gcG93MTAoeCkge1xuICByZXR1cm4gaXNGaW5pdGUoeCkgPyArKFwiMWVcIiArIHgpIDogeCA8IDAgPyAwIDogeDtcbn1cblxuZnVuY3Rpb24gcG93cChiYXNlKSB7XG4gIHJldHVybiBiYXNlID09PSAxMCA/IHBvdzEwXG4gICAgICA6IGJhc2UgPT09IE1hdGguRSA/IE1hdGguZXhwXG4gICAgICA6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucG93KGJhc2UsIHgpOyB9O1xufVxuXG5mdW5jdGlvbiBsb2dwKGJhc2UpIHtcbiAgcmV0dXJuIGJhc2UgPT09IE1hdGguRSA/IE1hdGgubG9nXG4gICAgICA6IGJhc2UgPT09IDEwICYmIE1hdGgubG9nMTBcbiAgICAgIHx8IGJhc2UgPT09IDIgJiYgTWF0aC5sb2cyXG4gICAgICB8fCAoYmFzZSA9IE1hdGgubG9nKGJhc2UpLCBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLmxvZyh4KSAvIGJhc2U7IH0pO1xufVxuXG5mdW5jdGlvbiByZWZsZWN0KGYpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gLWYoLXgpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBsb2ckMSgpIHtcbiAgdmFyIHNjYWxlID0gY29udGludW91cyhkZWludGVycG9sYXRlLCByZWludGVycG9sYXRlJDEpLmRvbWFpbihbMSwgMTBdKSxcbiAgICAgIGRvbWFpbiA9IHNjYWxlLmRvbWFpbixcbiAgICAgIGJhc2UgPSAxMCxcbiAgICAgIGxvZ3MgPSBsb2dwKDEwKSxcbiAgICAgIHBvd3MgPSBwb3dwKDEwKTtcblxuICBmdW5jdGlvbiByZXNjYWxlKCkge1xuICAgIGxvZ3MgPSBsb2dwKGJhc2UpLCBwb3dzID0gcG93cChiYXNlKTtcbiAgICBpZiAoZG9tYWluKClbMF0gPCAwKSBsb2dzID0gcmVmbGVjdChsb2dzKSwgcG93cyA9IHJlZmxlY3QocG93cyk7XG4gICAgcmV0dXJuIHNjYWxlO1xuICB9XG5cbiAgc2NhbGUuYmFzZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChiYXNlID0gK18sIHJlc2NhbGUoKSkgOiBiYXNlO1xuICB9O1xuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4oXyksIHJlc2NhbGUoKSkgOiBkb21haW4oKTtcbiAgfTtcblxuICBzY2FsZS50aWNrcyA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gICAgdmFyIGQgPSBkb21haW4oKSxcbiAgICAgICAgdSA9IGRbMF0sXG4gICAgICAgIHYgPSBkW2QubGVuZ3RoIC0gMV0sXG4gICAgICAgIHI7XG5cbiAgICBpZiAociA9IHYgPCB1KSBpID0gdSwgdSA9IHYsIHYgPSBpO1xuXG4gICAgdmFyIGkgPSBsb2dzKHUpLFxuICAgICAgICBqID0gbG9ncyh2KSxcbiAgICAgICAgcCxcbiAgICAgICAgayxcbiAgICAgICAgdCxcbiAgICAgICAgbiA9IGNvdW50ID09IG51bGwgPyAxMCA6ICtjb3VudCxcbiAgICAgICAgeiA9IFtdO1xuXG4gICAgaWYgKCEoYmFzZSAlIDEpICYmIGogLSBpIDwgbikge1xuICAgICAgaSA9IE1hdGgucm91bmQoaSkgLSAxLCBqID0gTWF0aC5yb3VuZChqKSArIDE7XG4gICAgICBpZiAodSA+IDApIGZvciAoOyBpIDwgajsgKytpKSB7XG4gICAgICAgIGZvciAoayA9IDEsIHAgPSBwb3dzKGkpOyBrIDwgYmFzZTsgKytrKSB7XG4gICAgICAgICAgdCA9IHAgKiBrO1xuICAgICAgICAgIGlmICh0IDwgdSkgY29udGludWU7XG4gICAgICAgICAgaWYgKHQgPiB2KSBicmVhaztcbiAgICAgICAgICB6LnB1c2godCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBmb3IgKDsgaSA8IGo7ICsraSkge1xuICAgICAgICBmb3IgKGsgPSBiYXNlIC0gMSwgcCA9IHBvd3MoaSk7IGsgPj0gMTsgLS1rKSB7XG4gICAgICAgICAgdCA9IHAgKiBrO1xuICAgICAgICAgIGlmICh0IDwgdSkgY29udGludWU7XG4gICAgICAgICAgaWYgKHQgPiB2KSBicmVhaztcbiAgICAgICAgICB6LnB1c2godCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgeiA9IHRpY2tzKGksIGosIE1hdGgubWluKGogLSBpLCBuKSkubWFwKHBvd3MpO1xuICAgIH1cblxuICAgIHJldHVybiByID8gei5yZXZlcnNlKCkgOiB6O1xuICB9O1xuXG4gIHNjYWxlLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihjb3VudCwgc3BlY2lmaWVyKSB7XG4gICAgaWYgKHNwZWNpZmllciA9PSBudWxsKSBzcGVjaWZpZXIgPSBiYXNlID09PSAxMCA/IFwiLjBlXCIgOiBcIixcIjtcbiAgICBpZiAodHlwZW9mIHNwZWNpZmllciAhPT0gXCJmdW5jdGlvblwiKSBzcGVjaWZpZXIgPSBleHBvcnRzLmZvcm1hdChzcGVjaWZpZXIpO1xuICAgIGlmIChjb3VudCA9PT0gSW5maW5pdHkpIHJldHVybiBzcGVjaWZpZXI7XG4gICAgaWYgKGNvdW50ID09IG51bGwpIGNvdW50ID0gMTA7XG4gICAgdmFyIGsgPSBNYXRoLm1heCgxLCBiYXNlICogY291bnQgLyBzY2FsZS50aWNrcygpLmxlbmd0aCk7IC8vIFRPRE8gZmFzdCBlc3RpbWF0ZT9cbiAgICByZXR1cm4gZnVuY3Rpb24oZCkge1xuICAgICAgdmFyIGkgPSBkIC8gcG93cyhNYXRoLnJvdW5kKGxvZ3MoZCkpKTtcbiAgICAgIGlmIChpICogYmFzZSA8IGJhc2UgLSAwLjUpIGkgKj0gYmFzZTtcbiAgICAgIHJldHVybiBpIDw9IGsgPyBzcGVjaWZpZXIoZCkgOiBcIlwiO1xuICAgIH07XG4gIH07XG5cbiAgc2NhbGUubmljZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkb21haW4obmljZShkb21haW4oKSwge1xuICAgICAgZmxvb3I6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHBvd3MoTWF0aC5mbG9vcihsb2dzKHgpKSk7IH0sXG4gICAgICBjZWlsOiBmdW5jdGlvbih4KSB7IHJldHVybiBwb3dzKE1hdGguY2VpbChsb2dzKHgpKSk7IH1cbiAgICB9KSk7XG4gIH07XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBsb2ckMSgpLmJhc2UoYmFzZSkpO1xuICB9O1xuXG4gIHJldHVybiBzY2FsZTtcbn1cblxuZnVuY3Rpb24gcmFpc2UkMSh4LCBleHBvbmVudCkge1xuICByZXR1cm4geCA8IDAgPyAtTWF0aC5wb3coLXgsIGV4cG9uZW50KSA6IE1hdGgucG93KHgsIGV4cG9uZW50KTtcbn1cblxuZnVuY3Rpb24gcG93JDEoKSB7XG4gIHZhciBleHBvbmVudCA9IDEsXG4gICAgICBzY2FsZSA9IGNvbnRpbnVvdXMoZGVpbnRlcnBvbGF0ZSwgcmVpbnRlcnBvbGF0ZSksXG4gICAgICBkb21haW4gPSBzY2FsZS5kb21haW47XG5cbiAgZnVuY3Rpb24gZGVpbnRlcnBvbGF0ZShhLCBiKSB7XG4gICAgcmV0dXJuIChiID0gcmFpc2UkMShiLCBleHBvbmVudCkgLSAoYSA9IHJhaXNlJDEoYSwgZXhwb25lbnQpKSlcbiAgICAgICAgPyBmdW5jdGlvbih4KSB7IHJldHVybiAocmFpc2UkMSh4LCBleHBvbmVudCkgLSBhKSAvIGI7IH1cbiAgICAgICAgOiBjb25zdGFudCQ5KGIpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVpbnRlcnBvbGF0ZShhLCBiKSB7XG4gICAgYiA9IHJhaXNlJDEoYiwgZXhwb25lbnQpIC0gKGEgPSByYWlzZSQxKGEsIGV4cG9uZW50KSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHsgcmV0dXJuIHJhaXNlJDEoYSArIGIgKiB0LCAxIC8gZXhwb25lbnQpOyB9O1xuICB9XG5cbiAgc2NhbGUuZXhwb25lbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZXhwb25lbnQgPSArXywgZG9tYWluKGRvbWFpbigpKSkgOiBleHBvbmVudDtcbiAgfTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNvcHkoc2NhbGUsIHBvdyQxKCkuZXhwb25lbnQoZXhwb25lbnQpKTtcbiAgfTtcblxuICByZXR1cm4gbGluZWFyaXNoKHNjYWxlKTtcbn1cblxuZnVuY3Rpb24gc3FydCQxKCkge1xuICByZXR1cm4gcG93JDEoKS5leHBvbmVudCgwLjUpO1xufVxuXG5mdW5jdGlvbiBxdWFudGlsZSgpIHtcbiAgdmFyIGRvbWFpbiA9IFtdLFxuICAgICAgcmFuZ2UgPSBbXSxcbiAgICAgIHRocmVzaG9sZHMgPSBbXTtcblxuICBmdW5jdGlvbiByZXNjYWxlKCkge1xuICAgIHZhciBpID0gMCwgbiA9IE1hdGgubWF4KDEsIHJhbmdlLmxlbmd0aCk7XG4gICAgdGhyZXNob2xkcyA9IG5ldyBBcnJheShuIC0gMSk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHRocmVzaG9sZHNbaSAtIDFdID0gdGhyZXNob2xkKGRvbWFpbiwgaSAvIG4pO1xuICAgIHJldHVybiBzY2FsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICBpZiAoIWlzTmFOKHggPSAreCkpIHJldHVybiByYW5nZVtiaXNlY3RSaWdodCh0aHJlc2hvbGRzLCB4KV07XG4gIH1cblxuICBzY2FsZS5pbnZlcnRFeHRlbnQgPSBmdW5jdGlvbih5KSB7XG4gICAgdmFyIGkgPSByYW5nZS5pbmRleE9mKHkpO1xuICAgIHJldHVybiBpIDwgMCA/IFtOYU4sIE5hTl0gOiBbXG4gICAgICBpID4gMCA/IHRocmVzaG9sZHNbaSAtIDFdIDogZG9tYWluWzBdLFxuICAgICAgaSA8IHRocmVzaG9sZHMubGVuZ3RoID8gdGhyZXNob2xkc1tpXSA6IGRvbWFpbltkb21haW4ubGVuZ3RoIC0gMV1cbiAgICBdO1xuICB9O1xuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkb21haW4uc2xpY2UoKTtcbiAgICBkb21haW4gPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IF8ubGVuZ3RoLCBkOyBpIDwgbjsgKytpKSBpZiAoZCA9IF9baV0sIGQgIT0gbnVsbCAmJiAhaXNOYU4oZCA9ICtkKSkgZG9tYWluLnB1c2goZCk7XG4gICAgZG9tYWluLnNvcnQoYXNjZW5kaW5nKTtcbiAgICByZXR1cm4gcmVzY2FsZSgpO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlID0gc2xpY2UkNS5jYWxsKF8pLCByZXNjYWxlKCkpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5xdWFudGlsZXMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhyZXNob2xkcy5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gcXVhbnRpbGUoKVxuICAgICAgICAuZG9tYWluKGRvbWFpbilcbiAgICAgICAgLnJhbmdlKHJhbmdlKTtcbiAgfTtcblxuICByZXR1cm4gc2NhbGU7XG59XG5cbmZ1bmN0aW9uIHF1YW50aXplJDEoKSB7XG4gIHZhciB4MCA9IDAsXG4gICAgICB4MSA9IDEsXG4gICAgICBuID0gMSxcbiAgICAgIGRvbWFpbiA9IFswLjVdLFxuICAgICAgcmFuZ2UgPSBbMCwgMV07XG5cbiAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgIGlmICh4IDw9IHgpIHJldHVybiByYW5nZVtiaXNlY3RSaWdodChkb21haW4sIHgsIDAsIG4pXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgdmFyIGkgPSAtMTtcbiAgICBkb21haW4gPSBuZXcgQXJyYXkobik7XG4gICAgd2hpbGUgKCsraSA8IG4pIGRvbWFpbltpXSA9ICgoaSArIDEpICogeDEgLSAoaSAtIG4pICogeDApIC8gKG4gKyAxKTtcbiAgICByZXR1cm4gc2NhbGU7XG4gIH1cblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeDAgPSArX1swXSwgeDEgPSArX1sxXSwgcmVzY2FsZSgpKSA6IFt4MCwgeDFdO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG4gPSAocmFuZ2UgPSBzbGljZSQ1LmNhbGwoXykpLmxlbmd0aCAtIDEsIHJlc2NhbGUoKSkgOiByYW5nZS5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLmludmVydEV4dGVudCA9IGZ1bmN0aW9uKHkpIHtcbiAgICB2YXIgaSA9IHJhbmdlLmluZGV4T2YoeSk7XG4gICAgcmV0dXJuIGkgPCAwID8gW05hTiwgTmFOXVxuICAgICAgICA6IGkgPCAxID8gW3gwLCBkb21haW5bMF1dXG4gICAgICAgIDogaSA+PSBuID8gW2RvbWFpbltuIC0gMV0sIHgxXVxuICAgICAgICA6IFtkb21haW5baSAtIDFdLCBkb21haW5baV1dO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gcXVhbnRpemUkMSgpXG4gICAgICAgIC5kb21haW4oW3gwLCB4MV0pXG4gICAgICAgIC5yYW5nZShyYW5nZSk7XG4gIH07XG5cbiAgcmV0dXJuIGxpbmVhcmlzaChzY2FsZSk7XG59XG5cbmZ1bmN0aW9uIHRocmVzaG9sZCQxKCkge1xuICB2YXIgZG9tYWluID0gWzAuNV0sXG4gICAgICByYW5nZSA9IFswLCAxXSxcbiAgICAgIG4gPSAxO1xuXG4gIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICBpZiAoeCA8PSB4KSByZXR1cm4gcmFuZ2VbYmlzZWN0UmlnaHQoZG9tYWluLCB4LCAwLCBuKV07XG4gIH1cblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZG9tYWluID0gc2xpY2UkNS5jYWxsKF8pLCBuID0gTWF0aC5taW4oZG9tYWluLmxlbmd0aCwgcmFuZ2UubGVuZ3RoIC0gMSksIHNjYWxlKSA6IGRvbWFpbi5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlID0gc2xpY2UkNS5jYWxsKF8pLCBuID0gTWF0aC5taW4oZG9tYWluLmxlbmd0aCwgcmFuZ2UubGVuZ3RoIC0gMSksIHNjYWxlKSA6IHJhbmdlLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUuaW52ZXJ0RXh0ZW50ID0gZnVuY3Rpb24oeSkge1xuICAgIHZhciBpID0gcmFuZ2UuaW5kZXhPZih5KTtcbiAgICByZXR1cm4gW2RvbWFpbltpIC0gMV0sIGRvbWFpbltpXV07XG4gIH07XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aHJlc2hvbGQkMSgpXG4gICAgICAgIC5kb21haW4oZG9tYWluKVxuICAgICAgICAucmFuZ2UocmFuZ2UpO1xuICB9O1xuXG4gIHJldHVybiBzY2FsZTtcbn1cblxudmFyIHQwJDEgPSBuZXcgRGF0ZTtcbnZhciB0MSQxID0gbmV3IERhdGU7XG5cbmZ1bmN0aW9uIG5ld0ludGVydmFsKGZsb29yaSwgb2Zmc2V0aSwgY291bnQsIGZpZWxkKSB7XG5cbiAgZnVuY3Rpb24gaW50ZXJ2YWwoZGF0ZSkge1xuICAgIHJldHVybiBmbG9vcmkoZGF0ZSA9IG5ldyBEYXRlKCtkYXRlKSksIGRhdGU7XG4gIH1cblxuICBpbnRlcnZhbC5mbG9vciA9IGludGVydmFsO1xuXG4gIGludGVydmFsLmNlaWwgPSBmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIGZsb29yaShkYXRlID0gbmV3IERhdGUoZGF0ZSAtIDEpKSwgb2Zmc2V0aShkYXRlLCAxKSwgZmxvb3JpKGRhdGUpLCBkYXRlO1xuICB9O1xuXG4gIGludGVydmFsLnJvdW5kID0gZnVuY3Rpb24oZGF0ZSkge1xuICAgIHZhciBkMCA9IGludGVydmFsKGRhdGUpLFxuICAgICAgICBkMSA9IGludGVydmFsLmNlaWwoZGF0ZSk7XG4gICAgcmV0dXJuIGRhdGUgLSBkMCA8IGQxIC0gZGF0ZSA/IGQwIDogZDE7XG4gIH07XG5cbiAgaW50ZXJ2YWwub2Zmc2V0ID0gZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIHJldHVybiBvZmZzZXRpKGRhdGUgPSBuZXcgRGF0ZSgrZGF0ZSksIHN0ZXAgPT0gbnVsbCA/IDEgOiBNYXRoLmZsb29yKHN0ZXApKSwgZGF0ZTtcbiAgfTtcblxuICBpbnRlcnZhbC5yYW5nZSA9IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBzdGVwKSB7XG4gICAgdmFyIHJhbmdlID0gW107XG4gICAgc3RhcnQgPSBpbnRlcnZhbC5jZWlsKHN0YXJ0KTtcbiAgICBzdGVwID0gc3RlcCA9PSBudWxsID8gMSA6IE1hdGguZmxvb3Ioc3RlcCk7XG4gICAgaWYgKCEoc3RhcnQgPCBzdG9wKSB8fCAhKHN0ZXAgPiAwKSkgcmV0dXJuIHJhbmdlOyAvLyBhbHNvIGhhbmRsZXMgSW52YWxpZCBEYXRlXG4gICAgZG8gcmFuZ2UucHVzaChuZXcgRGF0ZSgrc3RhcnQpKTsgd2hpbGUgKG9mZnNldGkoc3RhcnQsIHN0ZXApLCBmbG9vcmkoc3RhcnQpLCBzdGFydCA8IHN0b3ApXG4gICAgcmV0dXJuIHJhbmdlO1xuICB9O1xuXG4gIGludGVydmFsLmZpbHRlciA9IGZ1bmN0aW9uKHRlc3QpIHtcbiAgICByZXR1cm4gbmV3SW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgaWYgKGRhdGUgPj0gZGF0ZSkgd2hpbGUgKGZsb29yaShkYXRlKSwgIXRlc3QoZGF0ZSkpIGRhdGUuc2V0VGltZShkYXRlIC0gMSk7XG4gICAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgICAgaWYgKGRhdGUgPj0gZGF0ZSkge1xuICAgICAgICBpZiAoc3RlcCA8IDApIHdoaWxlICgrK3N0ZXAgPD0gMCkge1xuICAgICAgICAgIHdoaWxlIChvZmZzZXRpKGRhdGUsIC0xKSwgIXRlc3QoZGF0ZSkpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcbiAgICAgICAgfSBlbHNlIHdoaWxlICgtLXN0ZXAgPj0gMCkge1xuICAgICAgICAgIHdoaWxlIChvZmZzZXRpKGRhdGUsICsxKSwgIXRlc3QoZGF0ZSkpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIGlmIChjb3VudCkge1xuICAgIGludGVydmFsLmNvdW50ID0gZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgICAgdDAkMS5zZXRUaW1lKCtzdGFydCksIHQxJDEuc2V0VGltZSgrZW5kKTtcbiAgICAgIGZsb29yaSh0MCQxKSwgZmxvb3JpKHQxJDEpO1xuICAgICAgcmV0dXJuIE1hdGguZmxvb3IoY291bnQodDAkMSwgdDEkMSkpO1xuICAgIH07XG5cbiAgICBpbnRlcnZhbC5ldmVyeSA9IGZ1bmN0aW9uKHN0ZXApIHtcbiAgICAgIHN0ZXAgPSBNYXRoLmZsb29yKHN0ZXApO1xuICAgICAgcmV0dXJuICFpc0Zpbml0ZShzdGVwKSB8fCAhKHN0ZXAgPiAwKSA/IG51bGxcbiAgICAgICAgICA6ICEoc3RlcCA+IDEpID8gaW50ZXJ2YWxcbiAgICAgICAgICA6IGludGVydmFsLmZpbHRlcihmaWVsZFxuICAgICAgICAgICAgICA/IGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGZpZWxkKGQpICUgc3RlcCA9PT0gMDsgfVxuICAgICAgICAgICAgICA6IGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGludGVydmFsLmNvdW50KDAsIGQpICUgc3RlcCA9PT0gMDsgfSk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBpbnRlcnZhbDtcbn1cblxudmFyIG1pbGxpc2Vjb25kID0gbmV3SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gIC8vIG5vb3Bcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQgLSBzdGFydDtcbn0pO1xuXG4vLyBBbiBvcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24gZm9yIHRoaXMgc2ltcGxlIGNhc2UuXG5taWxsaXNlY29uZC5ldmVyeSA9IGZ1bmN0aW9uKGspIHtcbiAgayA9IE1hdGguZmxvb3Ioayk7XG4gIGlmICghaXNGaW5pdGUoaykgfHwgIShrID4gMCkpIHJldHVybiBudWxsO1xuICBpZiAoIShrID4gMSkpIHJldHVybiBtaWxsaXNlY29uZDtcbiAgcmV0dXJuIG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldFRpbWUoTWF0aC5mbG9vcihkYXRlIC8gaykgKiBrKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBrKTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gaztcbiAgfSk7XG59O1xuXG52YXIgbWlsbGlzZWNvbmRzID0gbWlsbGlzZWNvbmQucmFuZ2U7XG5cbnZhciBkdXJhdGlvblNlY29uZCQxID0gMWUzO1xudmFyIGR1cmF0aW9uTWludXRlJDEgPSA2ZTQ7XG52YXIgZHVyYXRpb25Ib3VyJDEgPSAzNmU1O1xudmFyIGR1cmF0aW9uRGF5JDEgPSA4NjRlNTtcbnZhciBkdXJhdGlvbldlZWskMSA9IDYwNDhlNTtcblxudmFyIHNlY29uZCA9IG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRUaW1lKE1hdGguZmxvb3IoZGF0ZSAvIGR1cmF0aW9uU2Vjb25kJDEpICogZHVyYXRpb25TZWNvbmQkMSk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvblNlY29uZCQxKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvblNlY29uZCQxO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENTZWNvbmRzKCk7XG59KTtcblxudmFyIHNlY29uZHMgPSBzZWNvbmQucmFuZ2U7XG5cbnZhciBtaW51dGUgPSBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VGltZShNYXRoLmZsb29yKGRhdGUgLyBkdXJhdGlvbk1pbnV0ZSQxKSAqIGR1cmF0aW9uTWludXRlJDEpO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25NaW51dGUkMSk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25NaW51dGUkMTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0TWludXRlcygpO1xufSk7XG5cbnZhciBtaW51dGVzID0gbWludXRlLnJhbmdlO1xuXG52YXIgaG91ciA9IG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgdmFyIG9mZnNldCA9IGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKSAqIGR1cmF0aW9uTWludXRlJDEgJSBkdXJhdGlvbkhvdXIkMTtcbiAgaWYgKG9mZnNldCA8IDApIG9mZnNldCArPSBkdXJhdGlvbkhvdXIkMTtcbiAgZGF0ZS5zZXRUaW1lKE1hdGguZmxvb3IoKCtkYXRlIC0gb2Zmc2V0KSAvIGR1cmF0aW9uSG91ciQxKSAqIGR1cmF0aW9uSG91ciQxICsgb2Zmc2V0KTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uSG91ciQxKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbkhvdXIkMTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0SG91cnMoKTtcbn0pO1xuXG52YXIgaG91cnMgPSBob3VyLnJhbmdlO1xuXG52YXIgZGF5ID0gbmV3SW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCAtIChlbmQuZ2V0VGltZXpvbmVPZmZzZXQoKSAtIHN0YXJ0LmdldFRpbWV6b25lT2Zmc2V0KCkpICogZHVyYXRpb25NaW51dGUkMSkgLyBkdXJhdGlvbkRheSQxO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXREYXRlKCkgLSAxO1xufSk7XG5cbnZhciBkYXlzID0gZGF5LnJhbmdlO1xuXG5mdW5jdGlvbiB3ZWVrZGF5KGkpIHtcbiAgcmV0dXJuIG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgLSAoZGF0ZS5nZXREYXkoKSArIDcgLSBpKSAlIDcpO1xuICAgIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyBzdGVwICogNyk7XG4gIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gKGVuZCAtIHN0YXJ0IC0gKGVuZC5nZXRUaW1lem9uZU9mZnNldCgpIC0gc3RhcnQuZ2V0VGltZXpvbmVPZmZzZXQoKSkgKiBkdXJhdGlvbk1pbnV0ZSQxKSAvIGR1cmF0aW9uV2VlayQxO1xuICB9KTtcbn1cblxudmFyIHN1bmRheSA9IHdlZWtkYXkoMCk7XG52YXIgbW9uZGF5ID0gd2Vla2RheSgxKTtcbnZhciB0dWVzZGF5ID0gd2Vla2RheSgyKTtcbnZhciB3ZWRuZXNkYXkgPSB3ZWVrZGF5KDMpO1xudmFyIHRodXJzZGF5ID0gd2Vla2RheSg0KTtcbnZhciBmcmlkYXkgPSB3ZWVrZGF5KDUpO1xudmFyIHNhdHVyZGF5ID0gd2Vla2RheSg2KTtcblxudmFyIHN1bmRheXMgPSBzdW5kYXkucmFuZ2U7XG52YXIgbW9uZGF5cyA9IG1vbmRheS5yYW5nZTtcbnZhciB0dWVzZGF5cyA9IHR1ZXNkYXkucmFuZ2U7XG52YXIgd2VkbmVzZGF5cyA9IHdlZG5lc2RheS5yYW5nZTtcbnZhciB0aHVyc2RheXMgPSB0aHVyc2RheS5yYW5nZTtcbnZhciBmcmlkYXlzID0gZnJpZGF5LnJhbmdlO1xudmFyIHNhdHVyZGF5cyA9IHNhdHVyZGF5LnJhbmdlO1xuXG52YXIgbW9udGggPSBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0RGF0ZSgxKTtcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRNb250aChkYXRlLmdldE1vbnRoKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZC5nZXRNb250aCgpIC0gc3RhcnQuZ2V0TW9udGgoKSArIChlbmQuZ2V0RnVsbFllYXIoKSAtIHN0YXJ0LmdldEZ1bGxZZWFyKCkpICogMTI7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldE1vbnRoKCk7XG59KTtcblxudmFyIG1vbnRocyA9IG1vbnRoLnJhbmdlO1xuXG52YXIgeWVhciA9IG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRNb250aCgwLCAxKTtcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZC5nZXRGdWxsWWVhcigpIC0gc3RhcnQuZ2V0RnVsbFllYXIoKTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0RnVsbFllYXIoKTtcbn0pO1xuXG4vLyBBbiBvcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24gZm9yIHRoaXMgc2ltcGxlIGNhc2UuXG55ZWFyLmV2ZXJ5ID0gZnVuY3Rpb24oaykge1xuICByZXR1cm4gIWlzRmluaXRlKGsgPSBNYXRoLmZsb29yKGspKSB8fCAhKGsgPiAwKSA/IG51bGwgOiBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRGdWxsWWVhcihNYXRoLmZsb29yKGRhdGUuZ2V0RnVsbFllYXIoKSAvIGspICogayk7XG4gICAgZGF0ZS5zZXRNb250aCgwLCAxKTtcbiAgICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkgKyBzdGVwICogayk7XG4gIH0pO1xufTtcblxudmFyIHllYXJzID0geWVhci5yYW5nZTtcblxudmFyIHV0Y01pbnV0ZSA9IG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRVVENTZWNvbmRzKDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25NaW51dGUkMSk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25NaW51dGUkMTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDTWludXRlcygpO1xufSk7XG5cbnZhciB1dGNNaW51dGVzID0gdXRjTWludXRlLnJhbmdlO1xuXG52YXIgdXRjSG91ciA9IG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRVVENNaW51dGVzKDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25Ib3VyJDEpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uSG91ciQxO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENIb3VycygpO1xufSk7XG5cbnZhciB1dGNIb3VycyA9IHV0Y0hvdXIucmFuZ2U7XG5cbnZhciB1dGNEYXkgPSBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uRGF5JDE7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ0RhdGUoKSAtIDE7XG59KTtcblxudmFyIHV0Y0RheXMgPSB1dGNEYXkucmFuZ2U7XG5cbmZ1bmN0aW9uIHV0Y1dlZWtkYXkoaSkge1xuICByZXR1cm4gbmV3SW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSAtIChkYXRlLmdldFVUQ0RheSgpICsgNyAtIGkpICUgNyk7XG4gICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSArIHN0ZXAgKiA3KTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25XZWVrJDE7XG4gIH0pO1xufVxuXG52YXIgdXRjU3VuZGF5ID0gdXRjV2Vla2RheSgwKTtcbnZhciB1dGNNb25kYXkgPSB1dGNXZWVrZGF5KDEpO1xudmFyIHV0Y1R1ZXNkYXkgPSB1dGNXZWVrZGF5KDIpO1xudmFyIHV0Y1dlZG5lc2RheSA9IHV0Y1dlZWtkYXkoMyk7XG52YXIgdXRjVGh1cnNkYXkgPSB1dGNXZWVrZGF5KDQpO1xudmFyIHV0Y0ZyaWRheSA9IHV0Y1dlZWtkYXkoNSk7XG52YXIgdXRjU2F0dXJkYXkgPSB1dGNXZWVrZGF5KDYpO1xuXG52YXIgdXRjU3VuZGF5cyA9IHV0Y1N1bmRheS5yYW5nZTtcbnZhciB1dGNNb25kYXlzID0gdXRjTW9uZGF5LnJhbmdlO1xudmFyIHV0Y1R1ZXNkYXlzID0gdXRjVHVlc2RheS5yYW5nZTtcbnZhciB1dGNXZWRuZXNkYXlzID0gdXRjV2VkbmVzZGF5LnJhbmdlO1xudmFyIHV0Y1RodXJzZGF5cyA9IHV0Y1RodXJzZGF5LnJhbmdlO1xudmFyIHV0Y0ZyaWRheXMgPSB1dGNGcmlkYXkucmFuZ2U7XG52YXIgdXRjU2F0dXJkYXlzID0gdXRjU2F0dXJkYXkucmFuZ2U7XG5cbnZhciB1dGNNb250aCA9IG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRVVENEYXRlKDEpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFVUQ01vbnRoKGRhdGUuZ2V0VVRDTW9udGgoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kLmdldFVUQ01vbnRoKCkgLSBzdGFydC5nZXRVVENNb250aCgpICsgKGVuZC5nZXRVVENGdWxsWWVhcigpIC0gc3RhcnQuZ2V0VVRDRnVsbFllYXIoKSkgKiAxMjtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDTW9udGgoKTtcbn0pO1xuXG52YXIgdXRjTW9udGhzID0gdXRjTW9udGgucmFuZ2U7XG5cbnZhciB1dGNZZWFyID0gbmV3SW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFVUQ01vbnRoKDAsIDEpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFVUQ0Z1bGxZZWFyKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kLmdldFVUQ0Z1bGxZZWFyKCkgLSBzdGFydC5nZXRVVENGdWxsWWVhcigpO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xufSk7XG5cbi8vIEFuIG9wdGltaXplZCBpbXBsZW1lbnRhdGlvbiBmb3IgdGhpcyBzaW1wbGUgY2FzZS5cbnV0Y1llYXIuZXZlcnkgPSBmdW5jdGlvbihrKSB7XG4gIHJldHVybiAhaXNGaW5pdGUoayA9IE1hdGguZmxvb3IoaykpIHx8ICEoayA+IDApID8gbnVsbCA6IG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKE1hdGguZmxvb3IoZGF0ZS5nZXRVVENGdWxsWWVhcigpIC8gaykgKiBrKTtcbiAgICBkYXRlLnNldFVUQ01vbnRoKDAsIDEpO1xuICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSArIHN0ZXAgKiBrKTtcbiAgfSk7XG59O1xuXG52YXIgdXRjWWVhcnMgPSB1dGNZZWFyLnJhbmdlO1xuXG5mdW5jdGlvbiBsb2NhbERhdGUoZCkge1xuICBpZiAoMCA8PSBkLnkgJiYgZC55IDwgMTAwKSB7XG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgtMSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCk7XG4gICAgZGF0ZS5zZXRGdWxsWWVhcihkLnkpO1xuICAgIHJldHVybiBkYXRlO1xuICB9XG4gIHJldHVybiBuZXcgRGF0ZShkLnksIGQubSwgZC5kLCBkLkgsIGQuTSwgZC5TLCBkLkwpO1xufVxuXG5mdW5jdGlvbiB1dGNEYXRlKGQpIHtcbiAgaWYgKDAgPD0gZC55ICYmIGQueSA8IDEwMCkge1xuICAgIHZhciBkYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMoLTEsIGQubSwgZC5kLCBkLkgsIGQuTSwgZC5TLCBkLkwpKTtcbiAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKGQueSk7XG4gICAgcmV0dXJuIGRhdGU7XG4gIH1cbiAgcmV0dXJuIG5ldyBEYXRlKERhdGUuVVRDKGQueSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCkpO1xufVxuXG5mdW5jdGlvbiBuZXdZZWFyKHkpIHtcbiAgcmV0dXJuIHt5OiB5LCBtOiAwLCBkOiAxLCBIOiAwLCBNOiAwLCBTOiAwLCBMOiAwfTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TG9jYWxlJDEobG9jYWxlKSB7XG4gIHZhciBsb2NhbGVfZGF0ZVRpbWUgPSBsb2NhbGUuZGF0ZVRpbWUsXG4gICAgICBsb2NhbGVfZGF0ZSA9IGxvY2FsZS5kYXRlLFxuICAgICAgbG9jYWxlX3RpbWUgPSBsb2NhbGUudGltZSxcbiAgICAgIGxvY2FsZV9wZXJpb2RzID0gbG9jYWxlLnBlcmlvZHMsXG4gICAgICBsb2NhbGVfd2Vla2RheXMgPSBsb2NhbGUuZGF5cyxcbiAgICAgIGxvY2FsZV9zaG9ydFdlZWtkYXlzID0gbG9jYWxlLnNob3J0RGF5cyxcbiAgICAgIGxvY2FsZV9tb250aHMgPSBsb2NhbGUubW9udGhzLFxuICAgICAgbG9jYWxlX3Nob3J0TW9udGhzID0gbG9jYWxlLnNob3J0TW9udGhzO1xuXG4gIHZhciBwZXJpb2RSZSA9IGZvcm1hdFJlKGxvY2FsZV9wZXJpb2RzKSxcbiAgICAgIHBlcmlvZExvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfcGVyaW9kcyksXG4gICAgICB3ZWVrZGF5UmUgPSBmb3JtYXRSZShsb2NhbGVfd2Vla2RheXMpLFxuICAgICAgd2Vla2RheUxvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfd2Vla2RheXMpLFxuICAgICAgc2hvcnRXZWVrZGF5UmUgPSBmb3JtYXRSZShsb2NhbGVfc2hvcnRXZWVrZGF5cyksXG4gICAgICBzaG9ydFdlZWtkYXlMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3Nob3J0V2Vla2RheXMpLFxuICAgICAgbW9udGhSZSA9IGZvcm1hdFJlKGxvY2FsZV9tb250aHMpLFxuICAgICAgbW9udGhMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX21vbnRocyksXG4gICAgICBzaG9ydE1vbnRoUmUgPSBmb3JtYXRSZShsb2NhbGVfc2hvcnRNb250aHMpLFxuICAgICAgc2hvcnRNb250aExvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfc2hvcnRNb250aHMpO1xuXG4gIHZhciBmb3JtYXRzID0ge1xuICAgIFwiYVwiOiBmb3JtYXRTaG9ydFdlZWtkYXksXG4gICAgXCJBXCI6IGZvcm1hdFdlZWtkYXksXG4gICAgXCJiXCI6IGZvcm1hdFNob3J0TW9udGgsXG4gICAgXCJCXCI6IGZvcm1hdE1vbnRoLFxuICAgIFwiY1wiOiBudWxsLFxuICAgIFwiZFwiOiBmb3JtYXREYXlPZk1vbnRoLFxuICAgIFwiZVwiOiBmb3JtYXREYXlPZk1vbnRoLFxuICAgIFwiSFwiOiBmb3JtYXRIb3VyMjQsXG4gICAgXCJJXCI6IGZvcm1hdEhvdXIxMixcbiAgICBcImpcIjogZm9ybWF0RGF5T2ZZZWFyLFxuICAgIFwiTFwiOiBmb3JtYXRNaWxsaXNlY29uZHMsXG4gICAgXCJtXCI6IGZvcm1hdE1vbnRoTnVtYmVyLFxuICAgIFwiTVwiOiBmb3JtYXRNaW51dGVzLFxuICAgIFwicFwiOiBmb3JtYXRQZXJpb2QsXG4gICAgXCJTXCI6IGZvcm1hdFNlY29uZHMsXG4gICAgXCJVXCI6IGZvcm1hdFdlZWtOdW1iZXJTdW5kYXksXG4gICAgXCJ3XCI6IGZvcm1hdFdlZWtkYXlOdW1iZXIsXG4gICAgXCJXXCI6IGZvcm1hdFdlZWtOdW1iZXJNb25kYXksXG4gICAgXCJ4XCI6IG51bGwsXG4gICAgXCJYXCI6IG51bGwsXG4gICAgXCJ5XCI6IGZvcm1hdFllYXIsXG4gICAgXCJZXCI6IGZvcm1hdEZ1bGxZZWFyLFxuICAgIFwiWlwiOiBmb3JtYXRab25lLFxuICAgIFwiJVwiOiBmb3JtYXRMaXRlcmFsUGVyY2VudFxuICB9O1xuXG4gIHZhciB1dGNGb3JtYXRzID0ge1xuICAgIFwiYVwiOiBmb3JtYXRVVENTaG9ydFdlZWtkYXksXG4gICAgXCJBXCI6IGZvcm1hdFVUQ1dlZWtkYXksXG4gICAgXCJiXCI6IGZvcm1hdFVUQ1Nob3J0TW9udGgsXG4gICAgXCJCXCI6IGZvcm1hdFVUQ01vbnRoLFxuICAgIFwiY1wiOiBudWxsLFxuICAgIFwiZFwiOiBmb3JtYXRVVENEYXlPZk1vbnRoLFxuICAgIFwiZVwiOiBmb3JtYXRVVENEYXlPZk1vbnRoLFxuICAgIFwiSFwiOiBmb3JtYXRVVENIb3VyMjQsXG4gICAgXCJJXCI6IGZvcm1hdFVUQ0hvdXIxMixcbiAgICBcImpcIjogZm9ybWF0VVRDRGF5T2ZZZWFyLFxuICAgIFwiTFwiOiBmb3JtYXRVVENNaWxsaXNlY29uZHMsXG4gICAgXCJtXCI6IGZvcm1hdFVUQ01vbnRoTnVtYmVyLFxuICAgIFwiTVwiOiBmb3JtYXRVVENNaW51dGVzLFxuICAgIFwicFwiOiBmb3JtYXRVVENQZXJpb2QsXG4gICAgXCJTXCI6IGZvcm1hdFVUQ1NlY29uZHMsXG4gICAgXCJVXCI6IGZvcm1hdFVUQ1dlZWtOdW1iZXJTdW5kYXksXG4gICAgXCJ3XCI6IGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXIsXG4gICAgXCJXXCI6IGZvcm1hdFVUQ1dlZWtOdW1iZXJNb25kYXksXG4gICAgXCJ4XCI6IG51bGwsXG4gICAgXCJYXCI6IG51bGwsXG4gICAgXCJ5XCI6IGZvcm1hdFVUQ1llYXIsXG4gICAgXCJZXCI6IGZvcm1hdFVUQ0Z1bGxZZWFyLFxuICAgIFwiWlwiOiBmb3JtYXRVVENab25lLFxuICAgIFwiJVwiOiBmb3JtYXRMaXRlcmFsUGVyY2VudFxuICB9O1xuXG4gIHZhciBwYXJzZXMgPSB7XG4gICAgXCJhXCI6IHBhcnNlU2hvcnRXZWVrZGF5LFxuICAgIFwiQVwiOiBwYXJzZVdlZWtkYXksXG4gICAgXCJiXCI6IHBhcnNlU2hvcnRNb250aCxcbiAgICBcIkJcIjogcGFyc2VNb250aCxcbiAgICBcImNcIjogcGFyc2VMb2NhbGVEYXRlVGltZSxcbiAgICBcImRcIjogcGFyc2VEYXlPZk1vbnRoLFxuICAgIFwiZVwiOiBwYXJzZURheU9mTW9udGgsXG4gICAgXCJIXCI6IHBhcnNlSG91cjI0LFxuICAgIFwiSVwiOiBwYXJzZUhvdXIyNCxcbiAgICBcImpcIjogcGFyc2VEYXlPZlllYXIsXG4gICAgXCJMXCI6IHBhcnNlTWlsbGlzZWNvbmRzLFxuICAgIFwibVwiOiBwYXJzZU1vbnRoTnVtYmVyLFxuICAgIFwiTVwiOiBwYXJzZU1pbnV0ZXMsXG4gICAgXCJwXCI6IHBhcnNlUGVyaW9kLFxuICAgIFwiU1wiOiBwYXJzZVNlY29uZHMsXG4gICAgXCJVXCI6IHBhcnNlV2Vla051bWJlclN1bmRheSxcbiAgICBcIndcIjogcGFyc2VXZWVrZGF5TnVtYmVyLFxuICAgIFwiV1wiOiBwYXJzZVdlZWtOdW1iZXJNb25kYXksXG4gICAgXCJ4XCI6IHBhcnNlTG9jYWxlRGF0ZSxcbiAgICBcIlhcIjogcGFyc2VMb2NhbGVUaW1lLFxuICAgIFwieVwiOiBwYXJzZVllYXIsXG4gICAgXCJZXCI6IHBhcnNlRnVsbFllYXIsXG4gICAgXCJaXCI6IHBhcnNlWm9uZSxcbiAgICBcIiVcIjogcGFyc2VMaXRlcmFsUGVyY2VudFxuICB9O1xuXG4gIC8vIFRoZXNlIHJlY3Vyc2l2ZSBkaXJlY3RpdmUgZGVmaW5pdGlvbnMgbXVzdCBiZSBkZWZlcnJlZC5cbiAgZm9ybWF0cy54ID0gbmV3Rm9ybWF0KGxvY2FsZV9kYXRlLCBmb3JtYXRzKTtcbiAgZm9ybWF0cy5YID0gbmV3Rm9ybWF0KGxvY2FsZV90aW1lLCBmb3JtYXRzKTtcbiAgZm9ybWF0cy5jID0gbmV3Rm9ybWF0KGxvY2FsZV9kYXRlVGltZSwgZm9ybWF0cyk7XG4gIHV0Y0Zvcm1hdHMueCA9IG5ld0Zvcm1hdChsb2NhbGVfZGF0ZSwgdXRjRm9ybWF0cyk7XG4gIHV0Y0Zvcm1hdHMuWCA9IG5ld0Zvcm1hdChsb2NhbGVfdGltZSwgdXRjRm9ybWF0cyk7XG4gIHV0Y0Zvcm1hdHMuYyA9IG5ld0Zvcm1hdChsb2NhbGVfZGF0ZVRpbWUsIHV0Y0Zvcm1hdHMpO1xuXG4gIGZ1bmN0aW9uIG5ld0Zvcm1hdChzcGVjaWZpZXIsIGZvcm1hdHMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgdmFyIHN0cmluZyA9IFtdLFxuICAgICAgICAgIGkgPSAtMSxcbiAgICAgICAgICBqID0gMCxcbiAgICAgICAgICBuID0gc3BlY2lmaWVyLmxlbmd0aCxcbiAgICAgICAgICBjLFxuICAgICAgICAgIHBhZCxcbiAgICAgICAgICBmb3JtYXQ7XG5cbiAgICAgIGlmICghKGRhdGUgaW5zdGFuY2VvZiBEYXRlKSkgZGF0ZSA9IG5ldyBEYXRlKCtkYXRlKTtcblxuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgaWYgKHNwZWNpZmllci5jaGFyQ29kZUF0KGkpID09PSAzNykge1xuICAgICAgICAgIHN0cmluZy5wdXNoKHNwZWNpZmllci5zbGljZShqLCBpKSk7XG4gICAgICAgICAgaWYgKChwYWQgPSBwYWRzW2MgPSBzcGVjaWZpZXIuY2hhckF0KCsraSldKSAhPSBudWxsKSBjID0gc3BlY2lmaWVyLmNoYXJBdCgrK2kpO1xuICAgICAgICAgIGVsc2UgcGFkID0gYyA9PT0gXCJlXCIgPyBcIiBcIiA6IFwiMFwiO1xuICAgICAgICAgIGlmIChmb3JtYXQgPSBmb3JtYXRzW2NdKSBjID0gZm9ybWF0KGRhdGUsIHBhZCk7XG4gICAgICAgICAgc3RyaW5nLnB1c2goYyk7XG4gICAgICAgICAgaiA9IGkgKyAxO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHN0cmluZy5wdXNoKHNwZWNpZmllci5zbGljZShqLCBpKSk7XG4gICAgICByZXR1cm4gc3RyaW5nLmpvaW4oXCJcIik7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5ld1BhcnNlKHNwZWNpZmllciwgbmV3RGF0ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgIHZhciBkID0gbmV3WWVhcigxOTAwKSxcbiAgICAgICAgICBpID0gcGFyc2VTcGVjaWZpZXIoZCwgc3BlY2lmaWVyLCBzdHJpbmcgKz0gXCJcIiwgMCk7XG4gICAgICBpZiAoaSAhPSBzdHJpbmcubGVuZ3RoKSByZXR1cm4gbnVsbDtcblxuICAgICAgLy8gVGhlIGFtLXBtIGZsYWcgaXMgMCBmb3IgQU0sIGFuZCAxIGZvciBQTS5cbiAgICAgIGlmIChcInBcIiBpbiBkKSBkLkggPSBkLkggJSAxMiArIGQucCAqIDEyO1xuXG4gICAgICAvLyBDb252ZXJ0IGRheS1vZi13ZWVrIGFuZCB3ZWVrLW9mLXllYXIgdG8gZGF5LW9mLXllYXIuXG4gICAgICBpZiAoXCJXXCIgaW4gZCB8fCBcIlVcIiBpbiBkKSB7XG4gICAgICAgIGlmICghKFwid1wiIGluIGQpKSBkLncgPSBcIldcIiBpbiBkID8gMSA6IDA7XG4gICAgICAgIHZhciBkYXkkJDEgPSBcIlpcIiBpbiBkID8gdXRjRGF0ZShuZXdZZWFyKGQueSkpLmdldFVUQ0RheSgpIDogbmV3RGF0ZShuZXdZZWFyKGQueSkpLmdldERheSgpO1xuICAgICAgICBkLm0gPSAwO1xuICAgICAgICBkLmQgPSBcIldcIiBpbiBkID8gKGQudyArIDYpICUgNyArIGQuVyAqIDcgLSAoZGF5JCQxICsgNSkgJSA3IDogZC53ICsgZC5VICogNyAtIChkYXkkJDEgKyA2KSAlIDc7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIGEgdGltZSB6b25lIGlzIHNwZWNpZmllZCwgYWxsIGZpZWxkcyBhcmUgaW50ZXJwcmV0ZWQgYXMgVVRDIGFuZCB0aGVuXG4gICAgICAvLyBvZmZzZXQgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpZWQgdGltZSB6b25lLlxuICAgICAgaWYgKFwiWlwiIGluIGQpIHtcbiAgICAgICAgZC5IICs9IGQuWiAvIDEwMCB8IDA7XG4gICAgICAgIGQuTSArPSBkLlogJSAxMDA7XG4gICAgICAgIHJldHVybiB1dGNEYXRlKGQpO1xuICAgICAgfVxuXG4gICAgICAvLyBPdGhlcndpc2UsIGFsbCBmaWVsZHMgYXJlIGluIGxvY2FsIHRpbWUuXG4gICAgICByZXR1cm4gbmV3RGF0ZShkKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VTcGVjaWZpZXIoZCwgc3BlY2lmaWVyLCBzdHJpbmcsIGopIHtcbiAgICB2YXIgaSA9IDAsXG4gICAgICAgIG4gPSBzcGVjaWZpZXIubGVuZ3RoLFxuICAgICAgICBtID0gc3RyaW5nLmxlbmd0aCxcbiAgICAgICAgYyxcbiAgICAgICAgcGFyc2U7XG5cbiAgICB3aGlsZSAoaSA8IG4pIHtcbiAgICAgIGlmIChqID49IG0pIHJldHVybiAtMTtcbiAgICAgIGMgPSBzcGVjaWZpZXIuY2hhckNvZGVBdChpKyspO1xuICAgICAgaWYgKGMgPT09IDM3KSB7XG4gICAgICAgIGMgPSBzcGVjaWZpZXIuY2hhckF0KGkrKyk7XG4gICAgICAgIHBhcnNlID0gcGFyc2VzW2MgaW4gcGFkcyA/IHNwZWNpZmllci5jaGFyQXQoaSsrKSA6IGNdO1xuICAgICAgICBpZiAoIXBhcnNlIHx8ICgoaiA9IHBhcnNlKGQsIHN0cmluZywgaikpIDwgMCkpIHJldHVybiAtMTtcbiAgICAgIH0gZWxzZSBpZiAoYyAhPSBzdHJpbmcuY2hhckNvZGVBdChqKyspKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gajtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlUGVyaW9kKGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gcGVyaW9kUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQucCA9IHBlcmlvZExvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVNob3J0V2Vla2RheShkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IHNob3J0V2Vla2RheVJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLncgPSBzaG9ydFdlZWtkYXlMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VXZWVrZGF5KGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gd2Vla2RheVJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLncgPSB3ZWVrZGF5TG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlU2hvcnRNb250aChkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IHNob3J0TW9udGhSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC5tID0gc2hvcnRNb250aExvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZU1vbnRoKGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gbW9udGhSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC5tID0gbW9udGhMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VMb2NhbGVEYXRlVGltZShkLCBzdHJpbmcsIGkpIHtcbiAgICByZXR1cm4gcGFyc2VTcGVjaWZpZXIoZCwgbG9jYWxlX2RhdGVUaW1lLCBzdHJpbmcsIGkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VMb2NhbGVEYXRlKGQsIHN0cmluZywgaSkge1xuICAgIHJldHVybiBwYXJzZVNwZWNpZmllcihkLCBsb2NhbGVfZGF0ZSwgc3RyaW5nLCBpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlTG9jYWxlVGltZShkLCBzdHJpbmcsIGkpIHtcbiAgICByZXR1cm4gcGFyc2VTcGVjaWZpZXIoZCwgbG9jYWxlX3RpbWUsIHN0cmluZywgaSk7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRTaG9ydFdlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRXZWVrZGF5c1tkLmdldERheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFdlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfd2Vla2RheXNbZC5nZXREYXkoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRTaG9ydE1vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3Nob3J0TW9udGhzW2QuZ2V0TW9udGgoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRNb250aChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9tb250aHNbZC5nZXRNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFBlcmlvZChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9wZXJpb2RzWysoZC5nZXRIb3VycygpID49IDEyKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENTaG9ydFdlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRXZWVrZGF5c1tkLmdldFVUQ0RheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfd2Vla2RheXNbZC5nZXRVVENEYXkoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENTaG9ydE1vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3Nob3J0TW9udGhzW2QuZ2V0VVRDTW9udGgoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENNb250aChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9tb250aHNbZC5nZXRVVENNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1BlcmlvZChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9wZXJpb2RzWysoZC5nZXRVVENIb3VycygpID49IDEyKV07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGZvcm1hdDogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICB2YXIgZiA9IG5ld0Zvcm1hdChzcGVjaWZpZXIgKz0gXCJcIiwgZm9ybWF0cyk7XG4gICAgICBmLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gZjtcbiAgICB9LFxuICAgIHBhcnNlOiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgIHZhciBwID0gbmV3UGFyc2Uoc3BlY2lmaWVyICs9IFwiXCIsIGxvY2FsRGF0ZSk7XG4gICAgICBwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gcDtcbiAgICB9LFxuICAgIHV0Y0Zvcm1hdDogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICB2YXIgZiA9IG5ld0Zvcm1hdChzcGVjaWZpZXIgKz0gXCJcIiwgdXRjRm9ybWF0cyk7XG4gICAgICBmLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gZjtcbiAgICB9LFxuICAgIHV0Y1BhcnNlOiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgIHZhciBwID0gbmV3UGFyc2Uoc3BlY2lmaWVyLCB1dGNEYXRlKTtcbiAgICAgIHAudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNwZWNpZmllcjsgfTtcbiAgICAgIHJldHVybiBwO1xuICAgIH1cbiAgfTtcbn1cblxudmFyIHBhZHMgPSB7XCItXCI6IFwiXCIsIFwiX1wiOiBcIiBcIiwgXCIwXCI6IFwiMFwifTtcbnZhciBudW1iZXJSZSA9IC9eXFxzKlxcZCsvO1xudmFyIHBlcmNlbnRSZSA9IC9eJS87XG52YXIgcmVxdW90ZVJlID0gL1tcXFxcXFxeXFwkXFwqXFwrXFw/XFx8XFxbXFxdXFwoXFwpXFwuXFx7XFx9XS9nO1xuXG5mdW5jdGlvbiBwYWQodmFsdWUsIGZpbGwsIHdpZHRoKSB7XG4gIHZhciBzaWduID0gdmFsdWUgPCAwID8gXCItXCIgOiBcIlwiLFxuICAgICAgc3RyaW5nID0gKHNpZ24gPyAtdmFsdWUgOiB2YWx1ZSkgKyBcIlwiLFxuICAgICAgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgcmV0dXJuIHNpZ24gKyAobGVuZ3RoIDwgd2lkdGggPyBuZXcgQXJyYXkod2lkdGggLSBsZW5ndGggKyAxKS5qb2luKGZpbGwpICsgc3RyaW5nIDogc3RyaW5nKTtcbn1cblxuZnVuY3Rpb24gcmVxdW90ZShzKSB7XG4gIHJldHVybiBzLnJlcGxhY2UocmVxdW90ZVJlLCBcIlxcXFwkJlwiKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0UmUobmFtZXMpIHtcbiAgcmV0dXJuIG5ldyBSZWdFeHAoXCJeKD86XCIgKyBuYW1lcy5tYXAocmVxdW90ZSkuam9pbihcInxcIikgKyBcIilcIiwgXCJpXCIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRMb29rdXAobmFtZXMpIHtcbiAgdmFyIG1hcCA9IHt9LCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gIHdoaWxlICgrK2kgPCBuKSBtYXBbbmFtZXNbaV0udG9Mb3dlckNhc2UoKV0gPSBpO1xuICByZXR1cm4gbWFwO1xufVxuXG5mdW5jdGlvbiBwYXJzZVdlZWtkYXlOdW1iZXIoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDEpKTtcbiAgcmV0dXJuIG4gPyAoZC53ID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrTnVtYmVyU3VuZGF5KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgcmV0dXJuIG4gPyAoZC5VID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrTnVtYmVyTW9uZGF5KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgcmV0dXJuIG4gPyAoZC5XID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VGdWxsWWVhcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgNCkpO1xuICByZXR1cm4gbiA/IChkLnkgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVllYXIoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC55ID0gK25bMF0gKyAoK25bMF0gPiA2OCA/IDE5MDAgOiAyMDAwKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVpvbmUoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gL14oWil8KFsrLV1cXGRcXGQpKD86XFw6PyhcXGRcXGQpKT8vLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA2KSk7XG4gIHJldHVybiBuID8gKGQuWiA9IG5bMV0gPyAwIDogLShuWzJdICsgKG5bM10gfHwgXCIwMFwiKSksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VNb250aE51bWJlcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLm0gPSBuWzBdIC0gMSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZURheU9mTW9udGgoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5kID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VEYXlPZlllYXIoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDMpKTtcbiAgcmV0dXJuIG4gPyAoZC5tID0gMCwgZC5kID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VIb3VyMjQoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5IID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VNaW51dGVzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuTSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlU2Vjb25kcyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLlMgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1pbGxpc2Vjb25kcyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMykpO1xuICByZXR1cm4gbiA/IChkLkwgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZUxpdGVyYWxQZXJjZW50KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IHBlcmNlbnRSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMSkpO1xuICByZXR1cm4gbiA/IGkgKyBuWzBdLmxlbmd0aCA6IC0xO1xufVxuXG5mdW5jdGlvbiBmb3JtYXREYXlPZk1vbnRoKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldERhdGUoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEhvdXIyNChkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRIb3VycygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0SG91cjEyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldEhvdXJzKCkgJSAxMiB8fCAxMiwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdERheU9mWWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoMSArIGRheS5jb3VudCh5ZWFyKGQpLCBkKSwgcCwgMyk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE1pbGxpc2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRNaWxsaXNlY29uZHMoKSwgcCwgMyk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE1vbnRoTnVtYmVyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldE1vbnRoKCkgKyAxLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TWludXRlcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRNaW51dGVzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRTZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFNlY29uZHMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtOdW1iZXJTdW5kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkKHN1bmRheS5jb3VudCh5ZWFyKGQpLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtkYXlOdW1iZXIoZCkge1xuICByZXR1cm4gZC5nZXREYXkoKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0V2Vla051bWJlck1vbmRheShkLCBwKSB7XG4gIHJldHVybiBwYWQobW9uZGF5LmNvdW50KHllYXIoZCksIGQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0WWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRGdWxsWWVhcigpICUgMTAwLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0RnVsbFllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0RnVsbFllYXIoKSAlIDEwMDAwLCBwLCA0KTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0Wm9uZShkKSB7XG4gIHZhciB6ID0gZC5nZXRUaW1lem9uZU9mZnNldCgpO1xuICByZXR1cm4gKHogPiAwID8gXCItXCIgOiAoeiAqPSAtMSwgXCIrXCIpKVxuICAgICAgKyBwYWQoeiAvIDYwIHwgMCwgXCIwXCIsIDIpXG4gICAgICArIHBhZCh6ICUgNjAsIFwiMFwiLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDRGF5T2ZNb250aChkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENEYXRlKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENIb3VyMjQoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDSG91cnMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0hvdXIxMihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENIb3VycygpICUgMTIgfHwgMTIsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENEYXlPZlllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKDEgKyB1dGNEYXkuY291bnQodXRjWWVhcihkKSwgZCksIHAsIDMpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENNaWxsaXNlY29uZHMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDTWlsbGlzZWNvbmRzKCksIHAsIDMpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENNb250aE51bWJlcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENNb250aCgpICsgMSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ01pbnV0ZXMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDTWludXRlcygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDU2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENTZWNvbmRzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrTnVtYmVyU3VuZGF5KGQsIHApIHtcbiAgcmV0dXJuIHBhZCh1dGNTdW5kYXkuY291bnQodXRjWWVhcihkKSwgZCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrZGF5TnVtYmVyKGQpIHtcbiAgcmV0dXJuIGQuZ2V0VVRDRGF5KCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtOdW1iZXJNb25kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkKHV0Y01vbmRheS5jb3VudCh1dGNZZWFyKGQpLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1llYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDRnVsbFllYXIoKSAlIDEwMCwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0Z1bGxZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ0Z1bGxZZWFyKCkgJSAxMDAwMCwgcCwgNCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1pvbmUoKSB7XG4gIHJldHVybiBcIiswMDAwXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdExpdGVyYWxQZXJjZW50KCkge1xuICByZXR1cm4gXCIlXCI7XG59XG5cbnZhciBsb2NhbGUkMjtcblxuXG5cblxuXG5kZWZhdWx0TG9jYWxlJDEoe1xuICBkYXRlVGltZTogXCIleCwgJVhcIixcbiAgZGF0ZTogXCIlLW0vJS1kLyVZXCIsXG4gIHRpbWU6IFwiJS1JOiVNOiVTICVwXCIsXG4gIHBlcmlvZHM6IFtcIkFNXCIsIFwiUE1cIl0sXG4gIGRheXM6IFtcIlN1bmRheVwiLCBcIk1vbmRheVwiLCBcIlR1ZXNkYXlcIiwgXCJXZWRuZXNkYXlcIiwgXCJUaHVyc2RheVwiLCBcIkZyaWRheVwiLCBcIlNhdHVyZGF5XCJdLFxuICBzaG9ydERheXM6IFtcIlN1blwiLCBcIk1vblwiLCBcIlR1ZVwiLCBcIldlZFwiLCBcIlRodVwiLCBcIkZyaVwiLCBcIlNhdFwiXSxcbiAgbW9udGhzOiBbXCJKYW51YXJ5XCIsIFwiRmVicnVhcnlcIiwgXCJNYXJjaFwiLCBcIkFwcmlsXCIsIFwiTWF5XCIsIFwiSnVuZVwiLCBcIkp1bHlcIiwgXCJBdWd1c3RcIiwgXCJTZXB0ZW1iZXJcIiwgXCJPY3RvYmVyXCIsIFwiTm92ZW1iZXJcIiwgXCJEZWNlbWJlclwiXSxcbiAgc2hvcnRNb250aHM6IFtcIkphblwiLCBcIkZlYlwiLCBcIk1hclwiLCBcIkFwclwiLCBcIk1heVwiLCBcIkp1blwiLCBcIkp1bFwiLCBcIkF1Z1wiLCBcIlNlcFwiLCBcIk9jdFwiLCBcIk5vdlwiLCBcIkRlY1wiXVxufSk7XG5cbmZ1bmN0aW9uIGRlZmF1bHRMb2NhbGUkMShkZWZpbml0aW9uKSB7XG4gIGxvY2FsZSQyID0gZm9ybWF0TG9jYWxlJDEoZGVmaW5pdGlvbik7XG4gIGV4cG9ydHMudGltZUZvcm1hdCA9IGxvY2FsZSQyLmZvcm1hdDtcbiAgZXhwb3J0cy50aW1lUGFyc2UgPSBsb2NhbGUkMi5wYXJzZTtcbiAgZXhwb3J0cy51dGNGb3JtYXQgPSBsb2NhbGUkMi51dGNGb3JtYXQ7XG4gIGV4cG9ydHMudXRjUGFyc2UgPSBsb2NhbGUkMi51dGNQYXJzZTtcbiAgcmV0dXJuIGxvY2FsZSQyO1xufVxuXG52YXIgaXNvU3BlY2lmaWVyID0gXCIlWS0lbS0lZFQlSDolTTolUy4lTFpcIjtcblxuZnVuY3Rpb24gZm9ybWF0SXNvTmF0aXZlKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUudG9JU09TdHJpbmcoKTtcbn1cblxudmFyIGZvcm1hdElzbyA9IERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nXG4gICAgPyBmb3JtYXRJc29OYXRpdmVcbiAgICA6IGV4cG9ydHMudXRjRm9ybWF0KGlzb1NwZWNpZmllcik7XG5cbmZ1bmN0aW9uIHBhcnNlSXNvTmF0aXZlKHN0cmluZykge1xuICB2YXIgZGF0ZSA9IG5ldyBEYXRlKHN0cmluZyk7XG4gIHJldHVybiBpc05hTihkYXRlKSA/IG51bGwgOiBkYXRlO1xufVxuXG52YXIgcGFyc2VJc28gPSArbmV3IERhdGUoXCIyMDAwLTAxLTAxVDAwOjAwOjAwLjAwMFpcIilcbiAgICA/IHBhcnNlSXNvTmF0aXZlXG4gICAgOiBleHBvcnRzLnV0Y1BhcnNlKGlzb1NwZWNpZmllcik7XG5cbnZhciBkdXJhdGlvblNlY29uZCA9IDEwMDA7XG52YXIgZHVyYXRpb25NaW51dGUgPSBkdXJhdGlvblNlY29uZCAqIDYwO1xudmFyIGR1cmF0aW9uSG91ciA9IGR1cmF0aW9uTWludXRlICogNjA7XG52YXIgZHVyYXRpb25EYXkgPSBkdXJhdGlvbkhvdXIgKiAyNDtcbnZhciBkdXJhdGlvbldlZWsgPSBkdXJhdGlvbkRheSAqIDc7XG52YXIgZHVyYXRpb25Nb250aCA9IGR1cmF0aW9uRGF5ICogMzA7XG52YXIgZHVyYXRpb25ZZWFyID0gZHVyYXRpb25EYXkgKiAzNjU7XG5cbmZ1bmN0aW9uIGRhdGUkMSh0KSB7XG4gIHJldHVybiBuZXcgRGF0ZSh0KTtcbn1cblxuZnVuY3Rpb24gbnVtYmVyJDModCkge1xuICByZXR1cm4gdCBpbnN0YW5jZW9mIERhdGUgPyArdCA6ICtuZXcgRGF0ZSgrdCk7XG59XG5cbmZ1bmN0aW9uIGNhbGVuZGFyKHllYXIkJDEsIG1vbnRoJCQxLCB3ZWVrLCBkYXkkJDEsIGhvdXIkJDEsIG1pbnV0ZSQkMSwgc2Vjb25kJCQxLCBtaWxsaXNlY29uZCQkMSwgZm9ybWF0KSB7XG4gIHZhciBzY2FsZSA9IGNvbnRpbnVvdXMoZGVpbnRlcnBvbGF0ZUxpbmVhciwgcmVpbnRlcnBvbGF0ZSksXG4gICAgICBpbnZlcnQgPSBzY2FsZS5pbnZlcnQsXG4gICAgICBkb21haW4gPSBzY2FsZS5kb21haW47XG5cbiAgdmFyIGZvcm1hdE1pbGxpc2Vjb25kID0gZm9ybWF0KFwiLiVMXCIpLFxuICAgICAgZm9ybWF0U2Vjb25kID0gZm9ybWF0KFwiOiVTXCIpLFxuICAgICAgZm9ybWF0TWludXRlID0gZm9ybWF0KFwiJUk6JU1cIiksXG4gICAgICBmb3JtYXRIb3VyID0gZm9ybWF0KFwiJUkgJXBcIiksXG4gICAgICBmb3JtYXREYXkgPSBmb3JtYXQoXCIlYSAlZFwiKSxcbiAgICAgIGZvcm1hdFdlZWsgPSBmb3JtYXQoXCIlYiAlZFwiKSxcbiAgICAgIGZvcm1hdE1vbnRoID0gZm9ybWF0KFwiJUJcIiksXG4gICAgICBmb3JtYXRZZWFyID0gZm9ybWF0KFwiJVlcIik7XG5cbiAgdmFyIHRpY2tJbnRlcnZhbHMgPSBbXG4gICAgW3NlY29uZCQkMSwgIDEsICAgICAgZHVyYXRpb25TZWNvbmRdLFxuICAgIFtzZWNvbmQkJDEsICA1LCAgNSAqIGR1cmF0aW9uU2Vjb25kXSxcbiAgICBbc2Vjb25kJCQxLCAxNSwgMTUgKiBkdXJhdGlvblNlY29uZF0sXG4gICAgW3NlY29uZCQkMSwgMzAsIDMwICogZHVyYXRpb25TZWNvbmRdLFxuICAgIFttaW51dGUkJDEsICAxLCAgICAgIGR1cmF0aW9uTWludXRlXSxcbiAgICBbbWludXRlJCQxLCAgNSwgIDUgKiBkdXJhdGlvbk1pbnV0ZV0sXG4gICAgW21pbnV0ZSQkMSwgMTUsIDE1ICogZHVyYXRpb25NaW51dGVdLFxuICAgIFttaW51dGUkJDEsIDMwLCAzMCAqIGR1cmF0aW9uTWludXRlXSxcbiAgICBbICBob3VyJCQxLCAgMSwgICAgICBkdXJhdGlvbkhvdXIgIF0sXG4gICAgWyAgaG91ciQkMSwgIDMsICAzICogZHVyYXRpb25Ib3VyICBdLFxuICAgIFsgIGhvdXIkJDEsICA2LCAgNiAqIGR1cmF0aW9uSG91ciAgXSxcbiAgICBbICBob3VyJCQxLCAxMiwgMTIgKiBkdXJhdGlvbkhvdXIgIF0sXG4gICAgWyAgIGRheSQkMSwgIDEsICAgICAgZHVyYXRpb25EYXkgICBdLFxuICAgIFsgICBkYXkkJDEsICAyLCAgMiAqIGR1cmF0aW9uRGF5ICAgXSxcbiAgICBbICB3ZWVrLCAgMSwgICAgICBkdXJhdGlvbldlZWsgIF0sXG4gICAgWyBtb250aCQkMSwgIDEsICAgICAgZHVyYXRpb25Nb250aCBdLFxuICAgIFsgbW9udGgkJDEsICAzLCAgMyAqIGR1cmF0aW9uTW9udGggXSxcbiAgICBbICB5ZWFyJCQxLCAgMSwgICAgICBkdXJhdGlvblllYXIgIF1cbiAgXTtcblxuICBmdW5jdGlvbiB0aWNrRm9ybWF0KGRhdGUkJDEpIHtcbiAgICByZXR1cm4gKHNlY29uZCQkMShkYXRlJCQxKSA8IGRhdGUkJDEgPyBmb3JtYXRNaWxsaXNlY29uZFxuICAgICAgICA6IG1pbnV0ZSQkMShkYXRlJCQxKSA8IGRhdGUkJDEgPyBmb3JtYXRTZWNvbmRcbiAgICAgICAgOiBob3VyJCQxKGRhdGUkJDEpIDwgZGF0ZSQkMSA/IGZvcm1hdE1pbnV0ZVxuICAgICAgICA6IGRheSQkMShkYXRlJCQxKSA8IGRhdGUkJDEgPyBmb3JtYXRIb3VyXG4gICAgICAgIDogbW9udGgkJDEoZGF0ZSQkMSkgPCBkYXRlJCQxID8gKHdlZWsoZGF0ZSQkMSkgPCBkYXRlJCQxID8gZm9ybWF0RGF5IDogZm9ybWF0V2VlaylcbiAgICAgICAgOiB5ZWFyJCQxKGRhdGUkJDEpIDwgZGF0ZSQkMSA/IGZvcm1hdE1vbnRoXG4gICAgICAgIDogZm9ybWF0WWVhcikoZGF0ZSQkMSk7XG4gIH1cblxuICBmdW5jdGlvbiB0aWNrSW50ZXJ2YWwoaW50ZXJ2YWwkJDEsIHN0YXJ0LCBzdG9wLCBzdGVwKSB7XG4gICAgaWYgKGludGVydmFsJCQxID09IG51bGwpIGludGVydmFsJCQxID0gMTA7XG5cbiAgICAvLyBJZiBhIGRlc2lyZWQgdGljayBjb3VudCBpcyBzcGVjaWZpZWQsIHBpY2sgYSByZWFzb25hYmxlIHRpY2sgaW50ZXJ2YWxcbiAgICAvLyBiYXNlZCBvbiB0aGUgZXh0ZW50IG9mIHRoZSBkb21haW4gYW5kIGEgcm91Z2ggZXN0aW1hdGUgb2YgdGljayBzaXplLlxuICAgIC8vIE90aGVyd2lzZSwgYXNzdW1lIGludGVydmFsIGlzIGFscmVhZHkgYSB0aW1lIGludGVydmFsIGFuZCB1c2UgaXQuXG4gICAgaWYgKHR5cGVvZiBpbnRlcnZhbCQkMSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgdmFyIHRhcmdldCA9IE1hdGguYWJzKHN0b3AgLSBzdGFydCkgLyBpbnRlcnZhbCQkMSxcbiAgICAgICAgICBpID0gYmlzZWN0b3IoZnVuY3Rpb24oaSkgeyByZXR1cm4gaVsyXTsgfSkucmlnaHQodGlja0ludGVydmFscywgdGFyZ2V0KTtcbiAgICAgIGlmIChpID09PSB0aWNrSW50ZXJ2YWxzLmxlbmd0aCkge1xuICAgICAgICBzdGVwID0gdGlja1N0ZXAoc3RhcnQgLyBkdXJhdGlvblllYXIsIHN0b3AgLyBkdXJhdGlvblllYXIsIGludGVydmFsJCQxKTtcbiAgICAgICAgaW50ZXJ2YWwkJDEgPSB5ZWFyJCQxO1xuICAgICAgfSBlbHNlIGlmIChpKSB7XG4gICAgICAgIGkgPSB0aWNrSW50ZXJ2YWxzW3RhcmdldCAvIHRpY2tJbnRlcnZhbHNbaSAtIDFdWzJdIDwgdGlja0ludGVydmFsc1tpXVsyXSAvIHRhcmdldCA/IGkgLSAxIDogaV07XG4gICAgICAgIHN0ZXAgPSBpWzFdO1xuICAgICAgICBpbnRlcnZhbCQkMSA9IGlbMF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGVwID0gdGlja1N0ZXAoc3RhcnQsIHN0b3AsIGludGVydmFsJCQxKTtcbiAgICAgICAgaW50ZXJ2YWwkJDEgPSBtaWxsaXNlY29uZCQkMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc3RlcCA9PSBudWxsID8gaW50ZXJ2YWwkJDEgOiBpbnRlcnZhbCQkMS5ldmVyeShzdGVwKTtcbiAgfVxuXG4gIHNjYWxlLmludmVydCA9IGZ1bmN0aW9uKHkpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoaW52ZXJ0KHkpKTtcbiAgfTtcblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBkb21haW4obWFwJDMuY2FsbChfLCBudW1iZXIkMykpIDogZG9tYWluKCkubWFwKGRhdGUkMSk7XG4gIH07XG5cbiAgc2NhbGUudGlja3MgPSBmdW5jdGlvbihpbnRlcnZhbCQkMSwgc3RlcCkge1xuICAgIHZhciBkID0gZG9tYWluKCksXG4gICAgICAgIHQwID0gZFswXSxcbiAgICAgICAgdDEgPSBkW2QubGVuZ3RoIC0gMV0sXG4gICAgICAgIHIgPSB0MSA8IHQwLFxuICAgICAgICB0O1xuICAgIGlmIChyKSB0ID0gdDAsIHQwID0gdDEsIHQxID0gdDtcbiAgICB0ID0gdGlja0ludGVydmFsKGludGVydmFsJCQxLCB0MCwgdDEsIHN0ZXApO1xuICAgIHQgPSB0ID8gdC5yYW5nZSh0MCwgdDEgKyAxKSA6IFtdOyAvLyBpbmNsdXNpdmUgc3RvcFxuICAgIHJldHVybiByID8gdC5yZXZlcnNlKCkgOiB0O1xuICB9O1xuXG4gIHNjYWxlLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihjb3VudCwgc3BlY2lmaWVyKSB7XG4gICAgcmV0dXJuIHNwZWNpZmllciA9PSBudWxsID8gdGlja0Zvcm1hdCA6IGZvcm1hdChzcGVjaWZpZXIpO1xuICB9O1xuXG4gIHNjYWxlLm5pY2UgPSBmdW5jdGlvbihpbnRlcnZhbCQkMSwgc3RlcCkge1xuICAgIHZhciBkID0gZG9tYWluKCk7XG4gICAgcmV0dXJuIChpbnRlcnZhbCQkMSA9IHRpY2tJbnRlcnZhbChpbnRlcnZhbCQkMSwgZFswXSwgZFtkLmxlbmd0aCAtIDFdLCBzdGVwKSlcbiAgICAgICAgPyBkb21haW4obmljZShkLCBpbnRlcnZhbCQkMSkpXG4gICAgICAgIDogc2NhbGU7XG4gIH07XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBjYWxlbmRhcih5ZWFyJCQxLCBtb250aCQkMSwgd2VlaywgZGF5JCQxLCBob3VyJCQxLCBtaW51dGUkJDEsIHNlY29uZCQkMSwgbWlsbGlzZWNvbmQkJDEsIGZvcm1hdCkpO1xuICB9O1xuXG4gIHJldHVybiBzY2FsZTtcbn1cblxudmFyIHRpbWUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGNhbGVuZGFyKHllYXIsIG1vbnRoLCBzdW5kYXksIGRheSwgaG91ciwgbWludXRlLCBzZWNvbmQsIG1pbGxpc2Vjb25kLCBleHBvcnRzLnRpbWVGb3JtYXQpLmRvbWFpbihbbmV3IERhdGUoMjAwMCwgMCwgMSksIG5ldyBEYXRlKDIwMDAsIDAsIDIpXSk7XG59O1xuXG52YXIgdXRjVGltZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gY2FsZW5kYXIodXRjWWVhciwgdXRjTW9udGgsIHV0Y1N1bmRheSwgdXRjRGF5LCB1dGNIb3VyLCB1dGNNaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmQsIGV4cG9ydHMudXRjRm9ybWF0KS5kb21haW4oW0RhdGUuVVRDKDIwMDAsIDAsIDEpLCBEYXRlLlVUQygyMDAwLCAwLCAyKV0pO1xufTtcblxudmFyIGNvbG9ycyA9IGZ1bmN0aW9uKHMpIHtcbiAgcmV0dXJuIHMubWF0Y2goLy57Nn0vZykubWFwKGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gXCIjXCIgKyB4O1xuICB9KTtcbn07XG5cbnZhciBjYXRlZ29yeTEwID0gY29sb3JzKFwiMWY3N2I0ZmY3ZjBlMmNhMDJjZDYyNzI4OTQ2N2JkOGM1NjRiZTM3N2MyN2Y3ZjdmYmNiZDIyMTdiZWNmXCIpO1xuXG52YXIgY2F0ZWdvcnkyMGIgPSBjb2xvcnMoXCIzOTNiNzk1MjU0YTM2YjZlY2Y5YzllZGU2Mzc5Mzk4Y2EyNTJiNWNmNmJjZWRiOWM4YzZkMzFiZDllMzllN2JhNTJlN2NiOTQ4NDNjMzlhZDQ5NGFkNjYxNmJlNzk2OWM3YjQxNzNhNTUxOTRjZTZkYmRkZTllZDZcIik7XG5cbnZhciBjYXRlZ29yeTIwYyA9IGNvbG9ycyhcIjMxODJiZDZiYWVkNjllY2FlMWM2ZGJlZmU2NTUwZGZkOGQzY2ZkYWU2YmZkZDBhMjMxYTM1NDc0YzQ3NmExZDk5YmM3ZTljMDc1NmJiMTllOWFjOGJjYmRkY2RhZGFlYjYzNjM2Mzk2OTY5NmJkYmRiZGQ5ZDlkOVwiKTtcblxudmFyIGNhdGVnb3J5MjAgPSBjb2xvcnMoXCIxZjc3YjRhZWM3ZThmZjdmMGVmZmJiNzgyY2EwMmM5OGRmOGFkNjI3MjhmZjk4OTY5NDY3YmRjNWIwZDU4YzU2NGJjNDljOTRlMzc3YzJmN2I2ZDI3ZjdmN2ZjN2M3YzdiY2JkMjJkYmRiOGQxN2JlY2Y5ZWRhZTVcIik7XG5cbnZhciBjdWJlaGVsaXgkMyA9IGN1YmVoZWxpeExvbmcoY3ViZWhlbGl4KDMwMCwgMC41LCAwLjApLCBjdWJlaGVsaXgoLTI0MCwgMC41LCAxLjApKTtcblxudmFyIHdhcm0gPSBjdWJlaGVsaXhMb25nKGN1YmVoZWxpeCgtMTAwLCAwLjc1LCAwLjM1KSwgY3ViZWhlbGl4KDgwLCAxLjUwLCAwLjgpKTtcblxudmFyIGNvb2wgPSBjdWJlaGVsaXhMb25nKGN1YmVoZWxpeCgyNjAsIDAuNzUsIDAuMzUpLCBjdWJlaGVsaXgoODAsIDEuNTAsIDAuOCkpO1xuXG52YXIgcmFpbmJvdyA9IGN1YmVoZWxpeCgpO1xuXG52YXIgcmFpbmJvdyQxID0gZnVuY3Rpb24odCkge1xuICBpZiAodCA8IDAgfHwgdCA+IDEpIHQgLT0gTWF0aC5mbG9vcih0KTtcbiAgdmFyIHRzID0gTWF0aC5hYnModCAtIDAuNSk7XG4gIHJhaW5ib3cuaCA9IDM2MCAqIHQgLSAxMDA7XG4gIHJhaW5ib3cucyA9IDEuNSAtIDEuNSAqIHRzO1xuICByYWluYm93LmwgPSAwLjggLSAwLjkgKiB0cztcbiAgcmV0dXJuIHJhaW5ib3cgKyBcIlwiO1xufTtcblxuZnVuY3Rpb24gcmFtcChyYW5nZSkge1xuICB2YXIgbiA9IHJhbmdlLmxlbmd0aDtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gcmFuZ2VbTWF0aC5tYXgoMCwgTWF0aC5taW4obiAtIDEsIE1hdGguZmxvb3IodCAqIG4pKSldO1xuICB9O1xufVxuXG52YXIgdmlyaWRpcyA9IHJhbXAoY29sb3JzKFwiNDQwMTU0NDQwMjU2NDUwNDU3NDUwNTU5NDYwNzVhNDYwODVjNDYwYTVkNDYwYjVlNDcwZDYwNDcwZTYxNDcxMDYzNDcxMTY0NDcxMzY1NDgxNDY3NDgxNjY4NDgxNzY5NDgxODZhNDgxYTZjNDgxYjZkNDgxYzZlNDgxZDZmNDgxZjcwNDgyMDcxNDgyMTczNDgyMzc0NDgyNDc1NDgyNTc2NDgyNjc3NDgyODc4NDgyOTc5NDcyYTdhNDcyYzdhNDcyZDdiNDcyZTdjNDcyZjdkNDYzMDdlNDYzMjdlNDYzMzdmNDYzNDgwNDUzNTgxNDUzNzgxNDUzODgyNDQzOTgzNDQzYTgzNDQzYjg0NDMzZDg0NDMzZTg1NDIzZjg1NDI0MDg2NDI0MTg2NDE0Mjg3NDE0NDg3NDA0NTg4NDA0Njg4M2Y0Nzg4M2Y0ODg5M2U0OTg5M2U0YTg5M2U0YzhhM2Q0ZDhhM2Q0ZThhM2M0ZjhhM2M1MDhiM2I1MThiM2I1MjhiM2E1MzhiM2E1NDhjMzk1NThjMzk1NjhjMzg1ODhjMzg1OThjMzc1YThjMzc1YjhkMzY1YzhkMzY1ZDhkMzU1ZThkMzU1ZjhkMzQ2MDhkMzQ2MThkMzM2MjhkMzM2MzhkMzI2NDhlMzI2NThlMzE2NjhlMzE2NzhlMzE2ODhlMzA2OThlMzA2YThlMmY2YjhlMmY2YzhlMmU2ZDhlMmU2ZThlMmU2ZjhlMmQ3MDhlMmQ3MThlMmM3MThlMmM3MjhlMmM3MzhlMmI3NDhlMmI3NThlMmE3NjhlMmE3NzhlMmE3ODhlMjk3OThlMjk3YThlMjk3YjhlMjg3YzhlMjg3ZDhlMjc3ZThlMjc3ZjhlMjc4MDhlMjY4MThlMjY4MjhlMjY4MjhlMjU4MzhlMjU4NDhlMjU4NThlMjQ4NjhlMjQ4NzhlMjM4ODhlMjM4OThlMjM4YThkMjI4YjhkMjI4YzhkMjI4ZDhkMjE4ZThkMjE4ZjhkMjE5MDhkMjE5MThjMjA5MjhjMjA5MjhjMjA5MzhjMWY5NDhjMWY5NThiMWY5NjhiMWY5NzhiMWY5ODhiMWY5OThhMWY5YThhMWU5YjhhMWU5Yzg5MWU5ZDg5MWY5ZTg5MWY5Zjg4MWZhMDg4MWZhMTg4MWZhMTg3MWZhMjg3MjBhMzg2MjBhNDg2MjFhNTg1MjFhNjg1MjJhNzg1MjJhODg0MjNhOTgzMjRhYTgzMjVhYjgyMjVhYzgyMjZhZDgxMjdhZDgxMjhhZTgwMjlhZjdmMmFiMDdmMmNiMTdlMmRiMjdkMmViMzdjMmZiNDdjMzFiNTdiMzJiNjdhMzRiNjc5MzViNzc5MzdiODc4MzhiOTc3M2FiYTc2M2JiYjc1M2RiYzc0M2ZiYzczNDBiZDcyNDJiZTcxNDRiZjcwNDZjMDZmNDhjMTZlNGFjMTZkNGNjMjZjNGVjMzZiNTBjNDZhNTJjNTY5NTRjNTY4NTZjNjY3NThjNzY1NWFjODY0NWNjODYzNWVjOTYyNjBjYTYwNjNjYjVmNjVjYjVlNjdjYzVjNjljZDViNmNjZDVhNmVjZTU4NzBjZjU3NzNkMDU2NzVkMDU0NzdkMTUzN2FkMTUxN2NkMjUwN2ZkMzRlODFkMzRkODRkNDRiODZkNTQ5ODlkNTQ4OGJkNjQ2OGVkNjQ1OTBkNzQzOTNkNzQxOTVkODQwOThkODNlOWJkOTNjOWRkOTNiYTBkYTM5YTJkYTM3YTVkYjM2YThkYjM0YWFkYzMyYWRkYzMwYjBkZDJmYjJkZDJkYjVkZTJiYjhkZTI5YmFkZTI4YmRkZjI2YzBkZjI1YzJkZjIzYzVlMDIxYzhlMDIwY2FlMTFmY2RlMTFkZDBlMTFjZDJlMjFiZDVlMjFhZDhlMjE5ZGFlMzE5ZGRlMzE4ZGZlMzE4ZTJlNDE4ZTVlNDE5ZTdlNDE5ZWFlNTFhZWNlNTFiZWZlNTFjZjFlNTFkZjRlNjFlZjZlNjIwZjhlNjIxZmJlNzIzZmRlNzI1XCIpKTtcblxudmFyIG1hZ21hID0gcmFtcChjb2xvcnMoXCIwMDAwMDQwMTAwMDUwMTAxMDYwMTAxMDgwMjAxMDkwMjAyMGIwMjAyMGQwMzAzMGYwMzAzMTIwNDA0MTQwNTA0MTYwNjA1MTgwNjA1MWEwNzA2MWMwODA3MWUwOTA3MjAwYTA4MjIwYjA5MjQwYzA5MjYwZDBhMjkwZTBiMmIxMDBiMmQxMTBjMmYxMjBkMzExMzBkMzQxNDBlMzYxNTBlMzgxNjBmM2IxODBmM2QxOTEwM2YxYTEwNDIxYzEwNDQxZDExNDcxZTExNDkyMDExNGIyMTExNGUyMjExNTAyNDEyNTMyNTEyNTUyNzEyNTgyOTExNWEyYTExNWMyYzExNWYyZDExNjEyZjExNjMzMTExNjUzMzEwNjczNDEwNjkzNjEwNmIzODEwNmMzOTBmNmUzYjBmNzAzZDBmNzEzZjBmNzI0MDBmNzQ0MjBmNzU0NDBmNzY0NTEwNzc0NzEwNzg0OTEwNzg0YTEwNzk0YzExN2E0ZTExN2I0ZjEyN2I1MTEyN2M1MjEzN2M1NDEzN2Q1NjE0N2Q1NzE1N2U1OTE1N2U1YTE2N2U1YzE2N2Y1ZDE3N2Y1ZjE4N2Y2MDE4ODA2MjE5ODA2NDFhODA2NTFhODA2NzFiODA2ODFjODE2YTFjODE2YjFkODE2ZDFkODE2ZTFlODE3MDFmODE3MjFmODE3MzIwODE3NTIxODE3NjIxODE3ODIyODE3OTIyODI3YjIzODI3YzIzODI3ZTI0ODI4MDI1ODI4MTI1ODE4MzI2ODE4NDI2ODE4NjI3ODE4ODI3ODE4OTI4ODE4YjI5ODE4YzI5ODE4ZTJhODE5MDJhODE5MTJiODE5MzJiODA5NDJjODA5NjJjODA5ODJkODA5OTJkODA5YjJlN2Y5YzJlN2Y5ZTJmN2ZhMDJmN2ZhMTMwN2VhMzMwN2VhNTMxN2VhNjMxN2RhODMyN2RhYTMzN2RhYjMzN2NhZDM0N2NhZTM0N2JiMDM1N2JiMjM1N2JiMzM2N2FiNTM2N2FiNzM3NzliODM3NzliYTM4NzhiYzM5NzhiZDM5NzdiZjNhNzdjMDNhNzZjMjNiNzVjNDNjNzVjNTNjNzRjNzNkNzNjODNlNzNjYTNlNzJjYzNmNzFjZDQwNzFjZjQwNzBkMDQxNmZkMjQyNmZkMzQzNmVkNTQ0NmRkNjQ1NmNkODQ1NmNkOTQ2NmJkYjQ3NmFkYzQ4NjlkZTQ5NjhkZjRhNjhlMDRjNjdlMjRkNjZlMzRlNjVlNDRmNjRlNTUwNjRlNzUyNjNlODUzNjJlOTU0NjJlYTU2NjFlYjU3NjBlYzU4NjBlZDVhNWZlZTViNWVlZjVkNWVmMDVmNWVmMTYwNWRmMjYyNWRmMjY0NWNmMzY1NWNmNDY3NWNmNDY5NWNmNTZiNWNmNjZjNWNmNjZlNWNmNzcwNWNmNzcyNWNmODc0NWNmODc2NWNmOTc4NWRmOTc5NWRmOTdiNWRmYTdkNWVmYTdmNWVmYTgxNWZmYjgzNWZmYjg1NjBmYjg3NjFmYzg5NjFmYzhhNjJmYzhjNjNmYzhlNjRmYzkwNjVmZDkyNjZmZDk0NjdmZDk2NjhmZDk4NjlmZDlhNmFmZDliNmJmZTlkNmNmZTlmNmRmZWExNmVmZWEzNmZmZWE1NzFmZWE3NzJmZWE5NzNmZWFhNzRmZWFjNzZmZWFlNzdmZWIwNzhmZWIyN2FmZWI0N2JmZWI2N2NmZWI3N2VmZWI5N2ZmZWJiODFmZWJkODJmZWJmODRmZWMxODVmZWMyODdmZWM0ODhmZWM2OGFmZWM4OGNmZWNhOGRmZWNjOGZmZWNkOTBmZWNmOTJmZWQxOTRmZWQzOTVmZWQ1OTdmZWQ3OTlmZWQ4OWFmZGRhOWNmZGRjOWVmZGRlYTBmZGUwYTFmZGUyYTNmZGUzYTVmZGU1YTdmZGU3YTlmZGU5YWFmZGViYWNmY2VjYWVmY2VlYjBmY2YwYjJmY2YyYjRmY2Y0YjZmY2Y2YjhmY2Y3YjlmY2Y5YmJmY2ZiYmRmY2ZkYmZcIikpO1xuXG52YXIgaW5mZXJubyA9IHJhbXAoY29sb3JzKFwiMDAwMDA0MDEwMDA1MDEwMTA2MDEwMTA4MDIwMTBhMDIwMjBjMDIwMjBlMDMwMjEwMDQwMzEyMDQwMzE0MDUwNDE3MDYwNDE5MDcwNTFiMDgwNTFkMDkwNjFmMGEwNzIyMGIwNzI0MGMwODI2MGQwODI5MGUwOTJiMTAwOTJkMTEwYTMwMTIwYTMyMTQwYjM0MTUwYjM3MTYwYjM5MTgwYzNjMTkwYzNlMWIwYzQxMWMwYzQzMWUwYzQ1MWYwYzQ4MjEwYzRhMjMwYzRjMjQwYzRmMjYwYzUxMjgwYjUzMjkwYjU1MmIwYjU3MmQwYjU5MmYwYTViMzEwYTVjMzIwYTVlMzQwYTVmMzYwOTYxMzgwOTYyMzkwOTYzM2IwOTY0M2QwOTY1M2UwOTY2NDAwYTY3NDIwYTY4NDQwYTY4NDUwYTY5NDcwYjZhNDkwYjZhNGEwYzZiNGMwYzZiNGQwZDZjNGYwZDZjNTEwZTZjNTIwZTZkNTQwZjZkNTUwZjZkNTcxMDZlNTkxMDZlNWExMTZlNWMxMjZlNWQxMjZlNWYxMzZlNjExMzZlNjIxNDZlNjQxNTZlNjUxNTZlNjcxNjZlNjkxNjZlNmExNzZlNmMxODZlNmQxODZlNmYxOTZlNzExOTZlNzIxYTZlNzQxYTZlNzUxYjZlNzcxYzZkNzgxYzZkN2ExZDZkN2MxZDZkN2QxZTZkN2YxZTZjODAxZjZjODIyMDZjODQyMDZiODUyMTZiODcyMTZiODgyMjZhOGEyMjZhOGMyMzY5OGQyMzY5OGYyNDY5OTAyNTY4OTIyNTY4OTMyNjY3OTUyNjY3OTcyNzY2OTgyNzY2OWEyODY1OWIyOTY0OWQyOTY0OWYyYTYzYTAyYTYzYTIyYjYyYTMyYzYxYTUyYzYwYTYyZDYwYTgyZTVmYTkyZTVlYWIyZjVlYWQzMDVkYWUzMDVjYjAzMTViYjEzMjVhYjMzMjVhYjQzMzU5YjYzNDU4YjczNTU3YjkzNTU2YmEzNjU1YmMzNzU0YmQzODUzYmYzOTUyYzAzYTUxYzEzYTUwYzMzYjRmYzQzYzRlYzYzZDRkYzczZTRjYzgzZjRiY2E0MDRhY2I0MTQ5Y2M0MjQ4Y2U0MzQ3Y2Y0NDQ2ZDA0NTQ1ZDI0NjQ0ZDM0NzQzZDQ0ODQyZDU0YTQxZDc0YjNmZDg0YzNlZDk0ZDNkZGE0ZTNjZGI1MDNiZGQ1MTNhZGU1MjM4ZGY1MzM3ZTA1NTM2ZTE1NjM1ZTI1NzM0ZTM1OTMzZTQ1YTMxZTU1YzMwZTY1ZDJmZTc1ZTJlZTg2MDJkZTk2MTJiZWE2MzJhZWI2NDI5ZWI2NjI4ZWM2NzI2ZWQ2OTI1ZWU2YTI0ZWY2YzIzZWY2ZTIxZjA2ZjIwZjE3MTFmZjE3MzFkZjI3NDFjZjM3NjFiZjM3ODE5ZjQ3OTE4ZjU3YjE3ZjU3ZDE1ZjY3ZTE0ZjY4MDEzZjc4MjEyZjc4NDEwZjg4NTBmZjg4NzBlZjg4OTBjZjk4YjBiZjk4YzBhZjk4ZTA5ZmE5MDA4ZmE5MjA3ZmE5NDA3ZmI5NjA2ZmI5NzA2ZmI5OTA2ZmI5YjA2ZmI5ZDA3ZmM5ZjA3ZmNhMTA4ZmNhMzA5ZmNhNTBhZmNhNjBjZmNhODBkZmNhYTBmZmNhYzExZmNhZTEyZmNiMDE0ZmNiMjE2ZmNiNDE4ZmJiNjFhZmJiODFkZmJiYTFmZmJiYzIxZmJiZTIzZmFjMDI2ZmFjMjI4ZmFjNDJhZmFjNjJkZjljNzJmZjljOTMyZjljYjM1ZjhjZDM3ZjhjZjNhZjdkMTNkZjdkMzQwZjZkNTQzZjZkNzQ2ZjVkOTQ5ZjVkYjRjZjRkZDRmZjRkZjUzZjRlMTU2ZjNlMzVhZjNlNTVkZjJlNjYxZjJlODY1ZjJlYTY5ZjFlYzZkZjFlZDcxZjFlZjc1ZjFmMTc5ZjJmMjdkZjJmNDgyZjNmNTg2ZjNmNjhhZjRmODhlZjVmOTkyZjZmYTk2ZjhmYjlhZjlmYzlkZmFmZGExZmNmZmE0XCIpKTtcblxudmFyIHBsYXNtYSA9IHJhbXAoY29sb3JzKFwiMGQwODg3MTAwNzg4MTMwNzg5MTYwNzhhMTkwNjhjMWIwNjhkMWQwNjhlMjAwNjhmMjIwNjkwMjQwNjkxMjYwNTkxMjgwNTkyMmEwNTkzMmMwNTk0MmUwNTk1MmYwNTk2MzEwNTk3MzMwNTk3MzUwNDk4MzcwNDk5MzgwNDlhM2EwNDlhM2MwNDliM2UwNDljM2YwNDljNDEwNDlkNDMwMzllNDQwMzllNDYwMzlmNDgwMzlmNDkwM2EwNGIwM2ExNGMwMmExNGUwMmEyNTAwMmEyNTEwMmEzNTMwMmEzNTUwMmE0NTYwMWE0NTgwMWE0NTkwMWE1NWIwMWE1NWMwMWE2NWUwMWE2NjAwMWE2NjEwMGE3NjMwMGE3NjQwMGE3NjYwMGE3NjcwMGE4NjkwMGE4NmEwMGE4NmMwMGE4NmUwMGE4NmYwMGE4NzEwMGE4NzIwMWE4NzQwMWE4NzUwMWE4NzcwMWE4NzgwMWE4N2EwMmE4N2IwMmE4N2QwM2E4N2UwM2E4ODAwNGE4ODEwNGE3ODMwNWE3ODQwNWE3ODYwNmE2ODcwN2E2ODgwOGE2OGEwOWE1OGIwYWE1OGQwYmE1OGUwY2E0OGYwZGE0OTEwZWEzOTIwZmEzOTQxMGEyOTUxMWExOTYxM2ExOTgxNGEwOTkxNTlmOWExNjlmOWMxNzllOWQxODlkOWUxOTlkYTAxYTljYTExYjliYTIxZDlhYTMxZTlhYTUxZjk5YTYyMDk4YTcyMTk3YTgyMjk2YWEyMzk1YWIyNDk0YWMyNjk0YWQyNzkzYWUyODkyYjAyOTkxYjEyYTkwYjIyYjhmYjMyYzhlYjQyZThkYjUyZjhjYjYzMDhiYjczMThhYjgzMjg5YmEzMzg4YmIzNDg4YmMzNTg3YmQzNzg2YmUzODg1YmYzOTg0YzAzYTgzYzEzYjgyYzIzYzgxYzMzZDgwYzQzZTdmYzU0MDdlYzY0MTdkYzc0MjdjYzg0MzdiYzk0NDdhY2E0NTdhY2I0Njc5Y2M0Nzc4Y2M0OTc3Y2Q0YTc2Y2U0Yjc1Y2Y0Yzc0ZDA0ZDczZDE0ZTcyZDI0ZjcxZDM1MTcxZDQ1MjcwZDU1MzZmZDU1NDZlZDY1NTZkZDc1NjZjZDg1NzZiZDk1ODZhZGE1YTZhZGE1YjY5ZGI1YzY4ZGM1ZDY3ZGQ1ZTY2ZGU1ZjY1ZGU2MTY0ZGY2MjYzZTA2MzYzZTE2NDYyZTI2NTYxZTI2NjYwZTM2ODVmZTQ2OTVlZTU2YTVkZTU2YjVkZTY2YzVjZTc2ZTViZTc2ZjVhZTg3MDU5ZTk3MTU4ZTk3MjU3ZWE3NDU3ZWI3NTU2ZWI3NjU1ZWM3NzU0ZWQ3OTUzZWQ3YTUyZWU3YjUxZWY3YzUxZWY3ZTUwZjA3ZjRmZjA4MDRlZjE4MTRkZjE4MzRjZjI4NDRiZjM4NTRiZjM4NzRhZjQ4ODQ5ZjQ4OTQ4ZjU4YjQ3ZjU4YzQ2ZjY4ZDQ1ZjY4ZjQ0Zjc5MDQ0Zjc5MTQzZjc5MzQyZjg5NDQxZjg5NTQwZjk5NzNmZjk5ODNlZjk5YTNlZmE5YjNkZmE5YzNjZmE5ZTNiZmI5ZjNhZmJhMTM5ZmJhMjM4ZmNhMzM4ZmNhNTM3ZmNhNjM2ZmNhODM1ZmNhOTM0ZmRhYjMzZmRhYzMzZmRhZTMyZmRhZjMxZmRiMTMwZmRiMjJmZmRiNDJmZmRiNTJlZmViNzJkZmViODJjZmViYTJjZmViYjJiZmViZDJhZmViZTJhZmVjMDI5ZmRjMjI5ZmRjMzI4ZmRjNTI3ZmRjNjI3ZmRjODI3ZmRjYTI2ZmRjYjI2ZmNjZDI1ZmNjZTI1ZmNkMDI1ZmNkMjI1ZmJkMzI0ZmJkNTI0ZmJkNzI0ZmFkODI0ZmFkYTI0ZjlkYzI0ZjlkZDI1ZjhkZjI1ZjhlMTI1ZjdlMjI1ZjdlNDI1ZjZlNjI2ZjZlODI2ZjVlOTI2ZjVlYjI3ZjRlZDI3ZjNlZTI3ZjNmMDI3ZjJmMjI3ZjFmNDI2ZjFmNTI1ZjBmNzI0ZjBmOTIxXCIpKTtcblxuZnVuY3Rpb24gc2VxdWVudGlhbChpbnRlcnBvbGF0b3IpIHtcbiAgdmFyIHgwID0gMCxcbiAgICAgIHgxID0gMSxcbiAgICAgIGNsYW1wID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgIHZhciB0ID0gKHggLSB4MCkgLyAoeDEgLSB4MCk7XG4gICAgcmV0dXJuIGludGVycG9sYXRvcihjbGFtcCA/IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIHQpKSA6IHQpO1xuICB9XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHgwID0gK19bMF0sIHgxID0gK19bMV0sIHNjYWxlKSA6IFt4MCwgeDFdO1xuICB9O1xuXG4gIHNjYWxlLmNsYW1wID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNsYW1wID0gISFfLCBzY2FsZSkgOiBjbGFtcDtcbiAgfTtcblxuICBzY2FsZS5pbnRlcnBvbGF0b3IgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaW50ZXJwb2xhdG9yID0gXywgc2NhbGUpIDogaW50ZXJwb2xhdG9yO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gc2VxdWVudGlhbChpbnRlcnBvbGF0b3IpLmRvbWFpbihbeDAsIHgxXSkuY2xhbXAoY2xhbXApO1xuICB9O1xuXG4gIHJldHVybiBsaW5lYXJpc2goc2NhbGUpO1xufVxuXG52YXIgY29uc3RhbnQkMTAgPSBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbiBjb25zdGFudCgpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn07XG5cbnZhciBhYnMkMSA9IE1hdGguYWJzO1xudmFyIGF0YW4yJDEgPSBNYXRoLmF0YW4yO1xudmFyIGNvcyQyID0gTWF0aC5jb3M7XG52YXIgbWF4JDIgPSBNYXRoLm1heDtcbnZhciBtaW4kMSA9IE1hdGgubWluO1xudmFyIHNpbiQyID0gTWF0aC5zaW47XG52YXIgc3FydCQyID0gTWF0aC5zcXJ0O1xuXG52YXIgZXBzaWxvbiQzID0gMWUtMTI7XG52YXIgcGkkNCA9IE1hdGguUEk7XG52YXIgaGFsZlBpJDMgPSBwaSQ0IC8gMjtcbnZhciB0YXUkNCA9IDIgKiBwaSQ0O1xuXG5mdW5jdGlvbiBhY29zJDEoeCkge1xuICByZXR1cm4geCA+IDEgPyAwIDogeCA8IC0xID8gcGkkNCA6IE1hdGguYWNvcyh4KTtcbn1cblxuZnVuY3Rpb24gYXNpbiQxKHgpIHtcbiAgcmV0dXJuIHggPj0gMSA/IGhhbGZQaSQzIDogeCA8PSAtMSA/IC1oYWxmUGkkMyA6IE1hdGguYXNpbih4KTtcbn1cblxuZnVuY3Rpb24gYXJjSW5uZXJSYWRpdXMoZCkge1xuICByZXR1cm4gZC5pbm5lclJhZGl1cztcbn1cblxuZnVuY3Rpb24gYXJjT3V0ZXJSYWRpdXMoZCkge1xuICByZXR1cm4gZC5vdXRlclJhZGl1cztcbn1cblxuZnVuY3Rpb24gYXJjU3RhcnRBbmdsZShkKSB7XG4gIHJldHVybiBkLnN0YXJ0QW5nbGU7XG59XG5cbmZ1bmN0aW9uIGFyY0VuZEFuZ2xlKGQpIHtcbiAgcmV0dXJuIGQuZW5kQW5nbGU7XG59XG5cbmZ1bmN0aW9uIGFyY1BhZEFuZ2xlKGQpIHtcbiAgcmV0dXJuIGQgJiYgZC5wYWRBbmdsZTsgLy8gTm90ZTogb3B0aW9uYWwhXG59XG5cbmZ1bmN0aW9uIGludGVyc2VjdCh4MCwgeTAsIHgxLCB5MSwgeDIsIHkyLCB4MywgeTMpIHtcbiAgdmFyIHgxMCA9IHgxIC0geDAsIHkxMCA9IHkxIC0geTAsXG4gICAgICB4MzIgPSB4MyAtIHgyLCB5MzIgPSB5MyAtIHkyLFxuICAgICAgdCA9ICh4MzIgKiAoeTAgLSB5MikgLSB5MzIgKiAoeDAgLSB4MikpIC8gKHkzMiAqIHgxMCAtIHgzMiAqIHkxMCk7XG4gIHJldHVybiBbeDAgKyB0ICogeDEwLCB5MCArIHQgKiB5MTBdO1xufVxuXG4vLyBDb21wdXRlIHBlcnBlbmRpY3VsYXIgb2Zmc2V0IGxpbmUgb2YgbGVuZ3RoIHJjLlxuLy8gaHR0cDovL21hdGh3b3JsZC53b2xmcmFtLmNvbS9DaXJjbGUtTGluZUludGVyc2VjdGlvbi5odG1sXG5mdW5jdGlvbiBjb3JuZXJUYW5nZW50cyh4MCwgeTAsIHgxLCB5MSwgcjEsIHJjLCBjdykge1xuICB2YXIgeDAxID0geDAgLSB4MSxcbiAgICAgIHkwMSA9IHkwIC0geTEsXG4gICAgICBsbyA9IChjdyA/IHJjIDogLXJjKSAvIHNxcnQkMih4MDEgKiB4MDEgKyB5MDEgKiB5MDEpLFxuICAgICAgb3ggPSBsbyAqIHkwMSxcbiAgICAgIG95ID0gLWxvICogeDAxLFxuICAgICAgeDExID0geDAgKyBveCxcbiAgICAgIHkxMSA9IHkwICsgb3ksXG4gICAgICB4MTAgPSB4MSArIG94LFxuICAgICAgeTEwID0geTEgKyBveSxcbiAgICAgIHgwMCA9ICh4MTEgKyB4MTApIC8gMixcbiAgICAgIHkwMCA9ICh5MTEgKyB5MTApIC8gMixcbiAgICAgIGR4ID0geDEwIC0geDExLFxuICAgICAgZHkgPSB5MTAgLSB5MTEsXG4gICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5LFxuICAgICAgciA9IHIxIC0gcmMsXG4gICAgICBEID0geDExICogeTEwIC0geDEwICogeTExLFxuICAgICAgZCA9IChkeSA8IDAgPyAtMSA6IDEpICogc3FydCQyKG1heCQyKDAsIHIgKiByICogZDIgLSBEICogRCkpLFxuICAgICAgY3gwID0gKEQgKiBkeSAtIGR4ICogZCkgLyBkMixcbiAgICAgIGN5MCA9ICgtRCAqIGR4IC0gZHkgKiBkKSAvIGQyLFxuICAgICAgY3gxID0gKEQgKiBkeSArIGR4ICogZCkgLyBkMixcbiAgICAgIGN5MSA9ICgtRCAqIGR4ICsgZHkgKiBkKSAvIGQyLFxuICAgICAgZHgwID0gY3gwIC0geDAwLFxuICAgICAgZHkwID0gY3kwIC0geTAwLFxuICAgICAgZHgxID0gY3gxIC0geDAwLFxuICAgICAgZHkxID0gY3kxIC0geTAwO1xuXG4gIC8vIFBpY2sgdGhlIGNsb3NlciBvZiB0aGUgdHdvIGludGVyc2VjdGlvbiBwb2ludHMuXG4gIC8vIFRPRE8gSXMgdGhlcmUgYSBmYXN0ZXIgd2F5IHRvIGRldGVybWluZSB3aGljaCBpbnRlcnNlY3Rpb24gdG8gdXNlP1xuICBpZiAoZHgwICogZHgwICsgZHkwICogZHkwID4gZHgxICogZHgxICsgZHkxICogZHkxKSBjeDAgPSBjeDEsIGN5MCA9IGN5MTtcblxuICByZXR1cm4ge1xuICAgIGN4OiBjeDAsXG4gICAgY3k6IGN5MCxcbiAgICB4MDE6IC1veCxcbiAgICB5MDE6IC1veSxcbiAgICB4MTE6IGN4MCAqIChyMSAvIHIgLSAxKSxcbiAgICB5MTE6IGN5MCAqIChyMSAvIHIgLSAxKVxuICB9O1xufVxuXG52YXIgYXJjID0gZnVuY3Rpb24oKSB7XG4gIHZhciBpbm5lclJhZGl1cyA9IGFyY0lubmVyUmFkaXVzLFxuICAgICAgb3V0ZXJSYWRpdXMgPSBhcmNPdXRlclJhZGl1cyxcbiAgICAgIGNvcm5lclJhZGl1cyA9IGNvbnN0YW50JDEwKDApLFxuICAgICAgcGFkUmFkaXVzID0gbnVsbCxcbiAgICAgIHN0YXJ0QW5nbGUgPSBhcmNTdGFydEFuZ2xlLFxuICAgICAgZW5kQW5nbGUgPSBhcmNFbmRBbmdsZSxcbiAgICAgIHBhZEFuZ2xlID0gYXJjUGFkQW5nbGUsXG4gICAgICBjb250ZXh0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBhcmMoKSB7XG4gICAgdmFyIGJ1ZmZlcixcbiAgICAgICAgcixcbiAgICAgICAgcjAgPSAraW5uZXJSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgcjEgPSArb3V0ZXJSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgYTAgPSBzdGFydEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgLSBoYWxmUGkkMyxcbiAgICAgICAgYTEgPSBlbmRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIC0gaGFsZlBpJDMsXG4gICAgICAgIGRhID0gYWJzJDEoYTEgLSBhMCksXG4gICAgICAgIGN3ID0gYTEgPiBhMDtcblxuICAgIGlmICghY29udGV4dCkgY29udGV4dCA9IGJ1ZmZlciA9IHBhdGgoKTtcblxuICAgIC8vIEVuc3VyZSB0aGF0IHRoZSBvdXRlciByYWRpdXMgaXMgYWx3YXlzIGxhcmdlciB0aGFuIHRoZSBpbm5lciByYWRpdXMuXG4gICAgaWYgKHIxIDwgcjApIHIgPSByMSwgcjEgPSByMCwgcjAgPSByO1xuXG4gICAgLy8gSXMgaXQgYSBwb2ludD9cbiAgICBpZiAoIShyMSA+IGVwc2lsb24kMykpIGNvbnRleHQubW92ZVRvKDAsIDApO1xuXG4gICAgLy8gT3IgaXMgaXQgYSBjaXJjbGUgb3IgYW5udWx1cz9cbiAgICBlbHNlIGlmIChkYSA+IHRhdSQ0IC0gZXBzaWxvbiQzKSB7XG4gICAgICBjb250ZXh0Lm1vdmVUbyhyMSAqIGNvcyQyKGEwKSwgcjEgKiBzaW4kMihhMCkpO1xuICAgICAgY29udGV4dC5hcmMoMCwgMCwgcjEsIGEwLCBhMSwgIWN3KTtcbiAgICAgIGlmIChyMCA+IGVwc2lsb24kMykge1xuICAgICAgICBjb250ZXh0Lm1vdmVUbyhyMCAqIGNvcyQyKGExKSwgcjAgKiBzaW4kMihhMSkpO1xuICAgICAgICBjb250ZXh0LmFyYygwLCAwLCByMCwgYTEsIGEwLCBjdyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gT3IgaXMgaXQgYSBjaXJjdWxhciBvciBhbm51bGFyIHNlY3Rvcj9cbiAgICBlbHNlIHtcbiAgICAgIHZhciBhMDEgPSBhMCxcbiAgICAgICAgICBhMTEgPSBhMSxcbiAgICAgICAgICBhMDAgPSBhMCxcbiAgICAgICAgICBhMTAgPSBhMSxcbiAgICAgICAgICBkYTAgPSBkYSxcbiAgICAgICAgICBkYTEgPSBkYSxcbiAgICAgICAgICBhcCA9IHBhZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgLyAyLFxuICAgICAgICAgIHJwID0gKGFwID4gZXBzaWxvbiQzKSAmJiAocGFkUmFkaXVzID8gK3BhZFJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogc3FydCQyKHIwICogcjAgKyByMSAqIHIxKSksXG4gICAgICAgICAgcmMgPSBtaW4kMShhYnMkMShyMSAtIHIwKSAvIDIsICtjb3JuZXJSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSksXG4gICAgICAgICAgcmMwID0gcmMsXG4gICAgICAgICAgcmMxID0gcmMsXG4gICAgICAgICAgdDAsXG4gICAgICAgICAgdDE7XG5cbiAgICAgIC8vIEFwcGx5IHBhZGRpbmc/IE5vdGUgdGhhdCBzaW5jZSByMSDiiaUgcjAsIGRhMSDiiaUgZGEwLlxuICAgICAgaWYgKHJwID4gZXBzaWxvbiQzKSB7XG4gICAgICAgIHZhciBwMCA9IGFzaW4kMShycCAvIHIwICogc2luJDIoYXApKSxcbiAgICAgICAgICAgIHAxID0gYXNpbiQxKHJwIC8gcjEgKiBzaW4kMihhcCkpO1xuICAgICAgICBpZiAoKGRhMCAtPSBwMCAqIDIpID4gZXBzaWxvbiQzKSBwMCAqPSAoY3cgPyAxIDogLTEpLCBhMDAgKz0gcDAsIGExMCAtPSBwMDtcbiAgICAgICAgZWxzZSBkYTAgPSAwLCBhMDAgPSBhMTAgPSAoYTAgKyBhMSkgLyAyO1xuICAgICAgICBpZiAoKGRhMSAtPSBwMSAqIDIpID4gZXBzaWxvbiQzKSBwMSAqPSAoY3cgPyAxIDogLTEpLCBhMDEgKz0gcDEsIGExMSAtPSBwMTtcbiAgICAgICAgZWxzZSBkYTEgPSAwLCBhMDEgPSBhMTEgPSAoYTAgKyBhMSkgLyAyO1xuICAgICAgfVxuXG4gICAgICB2YXIgeDAxID0gcjEgKiBjb3MkMihhMDEpLFxuICAgICAgICAgIHkwMSA9IHIxICogc2luJDIoYTAxKSxcbiAgICAgICAgICB4MTAgPSByMCAqIGNvcyQyKGExMCksXG4gICAgICAgICAgeTEwID0gcjAgKiBzaW4kMihhMTApO1xuXG4gICAgICAvLyBBcHBseSByb3VuZGVkIGNvcm5lcnM/XG4gICAgICBpZiAocmMgPiBlcHNpbG9uJDMpIHtcbiAgICAgICAgdmFyIHgxMSA9IHIxICogY29zJDIoYTExKSxcbiAgICAgICAgICAgIHkxMSA9IHIxICogc2luJDIoYTExKSxcbiAgICAgICAgICAgIHgwMCA9IHIwICogY29zJDIoYTAwKSxcbiAgICAgICAgICAgIHkwMCA9IHIwICogc2luJDIoYTAwKTtcblxuICAgICAgICAvLyBSZXN0cmljdCB0aGUgY29ybmVyIHJhZGl1cyBhY2NvcmRpbmcgdG8gdGhlIHNlY3RvciBhbmdsZS5cbiAgICAgICAgaWYgKGRhIDwgcGkkNCkge1xuICAgICAgICAgIHZhciBvYyA9IGRhMCA+IGVwc2lsb24kMyA/IGludGVyc2VjdCh4MDEsIHkwMSwgeDAwLCB5MDAsIHgxMSwgeTExLCB4MTAsIHkxMCkgOiBbeDEwLCB5MTBdLFxuICAgICAgICAgICAgICBheCA9IHgwMSAtIG9jWzBdLFxuICAgICAgICAgICAgICBheSA9IHkwMSAtIG9jWzFdLFxuICAgICAgICAgICAgICBieCA9IHgxMSAtIG9jWzBdLFxuICAgICAgICAgICAgICBieSA9IHkxMSAtIG9jWzFdLFxuICAgICAgICAgICAgICBrYyA9IDEgLyBzaW4kMihhY29zJDEoKGF4ICogYnggKyBheSAqIGJ5KSAvIChzcXJ0JDIoYXggKiBheCArIGF5ICogYXkpICogc3FydCQyKGJ4ICogYnggKyBieSAqIGJ5KSkpIC8gMiksXG4gICAgICAgICAgICAgIGxjID0gc3FydCQyKG9jWzBdICogb2NbMF0gKyBvY1sxXSAqIG9jWzFdKTtcbiAgICAgICAgICByYzAgPSBtaW4kMShyYywgKHIwIC0gbGMpIC8gKGtjIC0gMSkpO1xuICAgICAgICAgIHJjMSA9IG1pbiQxKHJjLCAocjEgLSBsYykgLyAoa2MgKyAxKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gSXMgdGhlIHNlY3RvciBjb2xsYXBzZWQgdG8gYSBsaW5lP1xuICAgICAgaWYgKCEoZGExID4gZXBzaWxvbiQzKSkgY29udGV4dC5tb3ZlVG8oeDAxLCB5MDEpO1xuXG4gICAgICAvLyBEb2VzIHRoZSBzZWN0b3LigJlzIG91dGVyIHJpbmcgaGF2ZSByb3VuZGVkIGNvcm5lcnM/XG4gICAgICBlbHNlIGlmIChyYzEgPiBlcHNpbG9uJDMpIHtcbiAgICAgICAgdDAgPSBjb3JuZXJUYW5nZW50cyh4MDAsIHkwMCwgeDAxLCB5MDEsIHIxLCByYzEsIGN3KTtcbiAgICAgICAgdDEgPSBjb3JuZXJUYW5nZW50cyh4MTEsIHkxMSwgeDEwLCB5MTAsIHIxLCByYzEsIGN3KTtcblxuICAgICAgICBjb250ZXh0Lm1vdmVUbyh0MC5jeCArIHQwLngwMSwgdDAuY3kgKyB0MC55MDEpO1xuXG4gICAgICAgIC8vIEhhdmUgdGhlIGNvcm5lcnMgbWVyZ2VkP1xuICAgICAgICBpZiAocmMxIDwgcmMpIGNvbnRleHQuYXJjKHQwLmN4LCB0MC5jeSwgcmMxLCBhdGFuMiQxKHQwLnkwMSwgdDAueDAxKSwgYXRhbjIkMSh0MS55MDEsIHQxLngwMSksICFjdyk7XG5cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCBkcmF3IHRoZSB0d28gY29ybmVycyBhbmQgdGhlIHJpbmcuXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGNvbnRleHQuYXJjKHQwLmN4LCB0MC5jeSwgcmMxLCBhdGFuMiQxKHQwLnkwMSwgdDAueDAxKSwgYXRhbjIkMSh0MC55MTEsIHQwLngxMSksICFjdyk7XG4gICAgICAgICAgY29udGV4dC5hcmMoMCwgMCwgcjEsIGF0YW4yJDEodDAuY3kgKyB0MC55MTEsIHQwLmN4ICsgdDAueDExKSwgYXRhbjIkMSh0MS5jeSArIHQxLnkxMSwgdDEuY3ggKyB0MS54MTEpLCAhY3cpO1xuICAgICAgICAgIGNvbnRleHQuYXJjKHQxLmN4LCB0MS5jeSwgcmMxLCBhdGFuMiQxKHQxLnkxMSwgdDEueDExKSwgYXRhbjIkMSh0MS55MDEsIHQxLngwMSksICFjdyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gT3IgaXMgdGhlIG91dGVyIHJpbmcganVzdCBhIGNpcmN1bGFyIGFyYz9cbiAgICAgIGVsc2UgY29udGV4dC5tb3ZlVG8oeDAxLCB5MDEpLCBjb250ZXh0LmFyYygwLCAwLCByMSwgYTAxLCBhMTEsICFjdyk7XG5cbiAgICAgIC8vIElzIHRoZXJlIG5vIGlubmVyIHJpbmcsIGFuZCBpdOKAmXMgYSBjaXJjdWxhciBzZWN0b3I/XG4gICAgICAvLyBPciBwZXJoYXBzIGl04oCZcyBhbiBhbm51bGFyIHNlY3RvciBjb2xsYXBzZWQgZHVlIHRvIHBhZGRpbmc/XG4gICAgICBpZiAoIShyMCA+IGVwc2lsb24kMykgfHwgIShkYTAgPiBlcHNpbG9uJDMpKSBjb250ZXh0LmxpbmVUbyh4MTAsIHkxMCk7XG5cbiAgICAgIC8vIERvZXMgdGhlIHNlY3RvcuKAmXMgaW5uZXIgcmluZyAob3IgcG9pbnQpIGhhdmUgcm91bmRlZCBjb3JuZXJzP1xuICAgICAgZWxzZSBpZiAocmMwID4gZXBzaWxvbiQzKSB7XG4gICAgICAgIHQwID0gY29ybmVyVGFuZ2VudHMoeDEwLCB5MTAsIHgxMSwgeTExLCByMCwgLXJjMCwgY3cpO1xuICAgICAgICB0MSA9IGNvcm5lclRhbmdlbnRzKHgwMSwgeTAxLCB4MDAsIHkwMCwgcjAsIC1yYzAsIGN3KTtcblxuICAgICAgICBjb250ZXh0LmxpbmVUbyh0MC5jeCArIHQwLngwMSwgdDAuY3kgKyB0MC55MDEpO1xuXG4gICAgICAgIC8vIEhhdmUgdGhlIGNvcm5lcnMgbWVyZ2VkP1xuICAgICAgICBpZiAocmMwIDwgcmMpIGNvbnRleHQuYXJjKHQwLmN4LCB0MC5jeSwgcmMwLCBhdGFuMiQxKHQwLnkwMSwgdDAueDAxKSwgYXRhbjIkMSh0MS55MDEsIHQxLngwMSksICFjdyk7XG5cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCBkcmF3IHRoZSB0d28gY29ybmVycyBhbmQgdGhlIHJpbmcuXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGNvbnRleHQuYXJjKHQwLmN4LCB0MC5jeSwgcmMwLCBhdGFuMiQxKHQwLnkwMSwgdDAueDAxKSwgYXRhbjIkMSh0MC55MTEsIHQwLngxMSksICFjdyk7XG4gICAgICAgICAgY29udGV4dC5hcmMoMCwgMCwgcjAsIGF0YW4yJDEodDAuY3kgKyB0MC55MTEsIHQwLmN4ICsgdDAueDExKSwgYXRhbjIkMSh0MS5jeSArIHQxLnkxMSwgdDEuY3ggKyB0MS54MTEpLCBjdyk7XG4gICAgICAgICAgY29udGV4dC5hcmModDEuY3gsIHQxLmN5LCByYzAsIGF0YW4yJDEodDEueTExLCB0MS54MTEpLCBhdGFuMiQxKHQxLnkwMSwgdDEueDAxKSwgIWN3KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBPciBpcyB0aGUgaW5uZXIgcmluZyBqdXN0IGEgY2lyY3VsYXIgYXJjP1xuICAgICAgZWxzZSBjb250ZXh0LmFyYygwLCAwLCByMCwgYTEwLCBhMDAsIGN3KTtcbiAgICB9XG5cbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuXG4gICAgaWYgKGJ1ZmZlcikgcmV0dXJuIGNvbnRleHQgPSBudWxsLCBidWZmZXIgKyBcIlwiIHx8IG51bGw7XG4gIH1cblxuICBhcmMuY2VudHJvaWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgciA9ICgraW5uZXJSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSArICtvdXRlclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSAvIDIsXG4gICAgICAgIGEgPSAoK3N0YXJ0QW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSArICtlbmRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSAvIDIgLSBwaSQ0IC8gMjtcbiAgICByZXR1cm4gW2NvcyQyKGEpICogciwgc2luJDIoYSkgKiByXTtcbiAgfTtcblxuICBhcmMuaW5uZXJSYWRpdXMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaW5uZXJSYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEwKCtfKSwgYXJjKSA6IGlubmVyUmFkaXVzO1xuICB9O1xuXG4gIGFyYy5vdXRlclJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChvdXRlclJhZGl1cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMTAoK18pLCBhcmMpIDogb3V0ZXJSYWRpdXM7XG4gIH07XG5cbiAgYXJjLmNvcm5lclJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjb3JuZXJSYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEwKCtfKSwgYXJjKSA6IGNvcm5lclJhZGl1cztcbiAgfTtcblxuICBhcmMucGFkUmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZFJhZGl1cyA9IF8gPT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEwKCtfKSwgYXJjKSA6IHBhZFJhZGl1cztcbiAgfTtcblxuICBhcmMuc3RhcnRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdGFydEFuZ2xlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxMCgrXyksIGFyYykgOiBzdGFydEFuZ2xlO1xuICB9O1xuXG4gIGFyYy5lbmRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChlbmRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMTAoK18pLCBhcmMpIDogZW5kQW5nbGU7XG4gIH07XG5cbiAgYXJjLnBhZEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZEFuZ2xlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxMCgrXyksIGFyYykgOiBwYWRBbmdsZTtcbiAgfTtcblxuICBhcmMuY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICgoY29udGV4dCA9IF8gPT0gbnVsbCA/IG51bGwgOiBfKSwgYXJjKSA6IGNvbnRleHQ7XG4gIH07XG5cbiAgcmV0dXJuIGFyYztcbn07XG5cbmZ1bmN0aW9uIExpbmVhcihjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5MaW5lYXIucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IC8vIHByb2NlZWRcbiAgICAgIGRlZmF1bHQ6IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpOyBicmVhaztcbiAgICB9XG4gIH1cbn07XG5cbnZhciBjdXJ2ZUxpbmVhciA9IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBMaW5lYXIoY29udGV4dCk7XG59O1xuXG5mdW5jdGlvbiB4JDMocCkge1xuICByZXR1cm4gcFswXTtcbn1cblxuZnVuY3Rpb24geSQzKHApIHtcbiAgcmV0dXJuIHBbMV07XG59XG5cbnZhciBsaW5lID0gZnVuY3Rpb24oKSB7XG4gIHZhciB4ID0geCQzLFxuICAgICAgeSA9IHkkMyxcbiAgICAgIGRlZmluZWQgPSBjb25zdGFudCQxMCh0cnVlKSxcbiAgICAgIGNvbnRleHQgPSBudWxsLFxuICAgICAgY3VydmUgPSBjdXJ2ZUxpbmVhcixcbiAgICAgIG91dHB1dCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gbGluZShkYXRhKSB7XG4gICAgdmFyIGksXG4gICAgICAgIG4gPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgZCxcbiAgICAgICAgZGVmaW5lZDAgPSBmYWxzZSxcbiAgICAgICAgYnVmZmVyO1xuXG4gICAgaWYgKGNvbnRleHQgPT0gbnVsbCkgb3V0cHV0ID0gY3VydmUoYnVmZmVyID0gcGF0aCgpKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPD0gbjsgKytpKSB7XG4gICAgICBpZiAoIShpIDwgbiAmJiBkZWZpbmVkKGQgPSBkYXRhW2ldLCBpLCBkYXRhKSkgPT09IGRlZmluZWQwKSB7XG4gICAgICAgIGlmIChkZWZpbmVkMCA9ICFkZWZpbmVkMCkgb3V0cHV0LmxpbmVTdGFydCgpO1xuICAgICAgICBlbHNlIG91dHB1dC5saW5lRW5kKCk7XG4gICAgICB9XG4gICAgICBpZiAoZGVmaW5lZDApIG91dHB1dC5wb2ludCgreChkLCBpLCBkYXRhKSwgK3koZCwgaSwgZGF0YSkpO1xuICAgIH1cblxuICAgIGlmIChidWZmZXIpIHJldHVybiBvdXRwdXQgPSBudWxsLCBidWZmZXIgKyBcIlwiIHx8IG51bGw7XG4gIH1cblxuICBsaW5lLnggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMTAoK18pLCBsaW5lKSA6IHg7XG4gIH07XG5cbiAgbGluZS55ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEwKCtfKSwgbGluZSkgOiB5O1xuICB9O1xuXG4gIGxpbmUuZGVmaW5lZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkZWZpbmVkID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxMCghIV8pLCBsaW5lKSA6IGRlZmluZWQ7XG4gIH07XG5cbiAgbGluZS5jdXJ2ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjdXJ2ZSA9IF8sIGNvbnRleHQgIT0gbnVsbCAmJiAob3V0cHV0ID0gY3VydmUoY29udGV4dCkpLCBsaW5lKSA6IGN1cnZlO1xuICB9O1xuXG4gIGxpbmUuY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChfID09IG51bGwgPyBjb250ZXh0ID0gb3V0cHV0ID0gbnVsbCA6IG91dHB1dCA9IGN1cnZlKGNvbnRleHQgPSBfKSwgbGluZSkgOiBjb250ZXh0O1xuICB9O1xuXG4gIHJldHVybiBsaW5lO1xufTtcblxudmFyIGFyZWEkMiA9IGZ1bmN0aW9uKCkge1xuICB2YXIgeDAgPSB4JDMsXG4gICAgICB4MSA9IG51bGwsXG4gICAgICB5MCA9IGNvbnN0YW50JDEwKDApLFxuICAgICAgeTEgPSB5JDMsXG4gICAgICBkZWZpbmVkID0gY29uc3RhbnQkMTAodHJ1ZSksXG4gICAgICBjb250ZXh0ID0gbnVsbCxcbiAgICAgIGN1cnZlID0gY3VydmVMaW5lYXIsXG4gICAgICBvdXRwdXQgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGFyZWEoZGF0YSkge1xuICAgIHZhciBpLFxuICAgICAgICBqLFxuICAgICAgICBrLFxuICAgICAgICBuID0gZGF0YS5sZW5ndGgsXG4gICAgICAgIGQsXG4gICAgICAgIGRlZmluZWQwID0gZmFsc2UsXG4gICAgICAgIGJ1ZmZlcixcbiAgICAgICAgeDB6ID0gbmV3IEFycmF5KG4pLFxuICAgICAgICB5MHogPSBuZXcgQXJyYXkobik7XG5cbiAgICBpZiAoY29udGV4dCA9PSBudWxsKSBvdXRwdXQgPSBjdXJ2ZShidWZmZXIgPSBwYXRoKCkpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8PSBuOyArK2kpIHtcbiAgICAgIGlmICghKGkgPCBuICYmIGRlZmluZWQoZCA9IGRhdGFbaV0sIGksIGRhdGEpKSA9PT0gZGVmaW5lZDApIHtcbiAgICAgICAgaWYgKGRlZmluZWQwID0gIWRlZmluZWQwKSB7XG4gICAgICAgICAgaiA9IGk7XG4gICAgICAgICAgb3V0cHV0LmFyZWFTdGFydCgpO1xuICAgICAgICAgIG91dHB1dC5saW5lU3RhcnQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXRwdXQubGluZUVuZCgpO1xuICAgICAgICAgIG91dHB1dC5saW5lU3RhcnQoKTtcbiAgICAgICAgICBmb3IgKGsgPSBpIC0gMTsgayA+PSBqOyAtLWspIHtcbiAgICAgICAgICAgIG91dHB1dC5wb2ludCh4MHpba10sIHkweltrXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG91dHB1dC5saW5lRW5kKCk7XG4gICAgICAgICAgb3V0cHV0LmFyZWFFbmQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGRlZmluZWQwKSB7XG4gICAgICAgIHgweltpXSA9ICt4MChkLCBpLCBkYXRhKSwgeTB6W2ldID0gK3kwKGQsIGksIGRhdGEpO1xuICAgICAgICBvdXRwdXQucG9pbnQoeDEgPyAreDEoZCwgaSwgZGF0YSkgOiB4MHpbaV0sIHkxID8gK3kxKGQsIGksIGRhdGEpIDogeTB6W2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYnVmZmVyKSByZXR1cm4gb3V0cHV0ID0gbnVsbCwgYnVmZmVyICsgXCJcIiB8fCBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gYXJlYWxpbmUoKSB7XG4gICAgcmV0dXJuIGxpbmUoKS5kZWZpbmVkKGRlZmluZWQpLmN1cnZlKGN1cnZlKS5jb250ZXh0KGNvbnRleHQpO1xuICB9XG5cbiAgYXJlYS54ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHgwID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxMCgrXyksIHgxID0gbnVsbCwgYXJlYSkgOiB4MDtcbiAgfTtcblxuICBhcmVhLngwID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHgwID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxMCgrXyksIGFyZWEpIDogeDA7XG4gIH07XG5cbiAgYXJlYS54MSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4MSA9IF8gPT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEwKCtfKSwgYXJlYSkgOiB4MTtcbiAgfTtcblxuICBhcmVhLnkgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeTAgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEwKCtfKSwgeTEgPSBudWxsLCBhcmVhKSA6IHkwO1xuICB9O1xuXG4gIGFyZWEueTAgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeTAgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEwKCtfKSwgYXJlYSkgOiB5MDtcbiAgfTtcblxuICBhcmVhLnkxID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkxID0gXyA9PSBudWxsID8gbnVsbCA6IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMTAoK18pLCBhcmVhKSA6IHkxO1xuICB9O1xuXG4gIGFyZWEubGluZVgwID1cbiAgYXJlYS5saW5lWTAgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYXJlYWxpbmUoKS54KHgwKS55KHkwKTtcbiAgfTtcblxuICBhcmVhLmxpbmVZMSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBhcmVhbGluZSgpLngoeDApLnkoeTEpO1xuICB9O1xuXG4gIGFyZWEubGluZVgxID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGFyZWFsaW5lKCkueCh4MSkueSh5MCk7XG4gIH07XG5cbiAgYXJlYS5kZWZpbmVkID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRlZmluZWQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEwKCEhXyksIGFyZWEpIDogZGVmaW5lZDtcbiAgfTtcblxuICBhcmVhLmN1cnZlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGN1cnZlID0gXywgY29udGV4dCAhPSBudWxsICYmIChvdXRwdXQgPSBjdXJ2ZShjb250ZXh0KSksIGFyZWEpIDogY3VydmU7XG4gIH07XG5cbiAgYXJlYS5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKF8gPT0gbnVsbCA/IGNvbnRleHQgPSBvdXRwdXQgPSBudWxsIDogb3V0cHV0ID0gY3VydmUoY29udGV4dCA9IF8pLCBhcmVhKSA6IGNvbnRleHQ7XG4gIH07XG5cbiAgcmV0dXJuIGFyZWE7XG59O1xuXG52YXIgZGVzY2VuZGluZyQxID0gZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYiA8IGEgPyAtMSA6IGIgPiBhID8gMSA6IGIgPj0gYSA/IDAgOiBOYU47XG59O1xuXG52YXIgaWRlbnRpdHkkNyA9IGZ1bmN0aW9uKGQpIHtcbiAgcmV0dXJuIGQ7XG59O1xuXG52YXIgcGllID0gZnVuY3Rpb24oKSB7XG4gIHZhciB2YWx1ZSA9IGlkZW50aXR5JDcsXG4gICAgICBzb3J0VmFsdWVzID0gZGVzY2VuZGluZyQxLFxuICAgICAgc29ydCA9IG51bGwsXG4gICAgICBzdGFydEFuZ2xlID0gY29uc3RhbnQkMTAoMCksXG4gICAgICBlbmRBbmdsZSA9IGNvbnN0YW50JDEwKHRhdSQ0KSxcbiAgICAgIHBhZEFuZ2xlID0gY29uc3RhbnQkMTAoMCk7XG5cbiAgZnVuY3Rpb24gcGllKGRhdGEpIHtcbiAgICB2YXIgaSxcbiAgICAgICAgbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICBqLFxuICAgICAgICBrLFxuICAgICAgICBzdW0gPSAwLFxuICAgICAgICBpbmRleCA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgYXJjcyA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgYTAgPSArc3RhcnRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICBkYSA9IE1hdGgubWluKHRhdSQ0LCBNYXRoLm1heCgtdGF1JDQsIGVuZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgLSBhMCkpLFxuICAgICAgICBhMSxcbiAgICAgICAgcCA9IE1hdGgubWluKE1hdGguYWJzKGRhKSAvIG4sIHBhZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpLFxuICAgICAgICBwYSA9IHAgKiAoZGEgPCAwID8gLTEgOiAxKSxcbiAgICAgICAgdjtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgodiA9IGFyY3NbaW5kZXhbaV0gPSBpXSA9ICt2YWx1ZShkYXRhW2ldLCBpLCBkYXRhKSkgPiAwKSB7XG4gICAgICAgIHN1bSArPSB2O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE9wdGlvbmFsbHkgc29ydCB0aGUgYXJjcyBieSBwcmV2aW91c2x5LWNvbXB1dGVkIHZhbHVlcyBvciBieSBkYXRhLlxuICAgIGlmIChzb3J0VmFsdWVzICE9IG51bGwpIGluZGV4LnNvcnQoZnVuY3Rpb24oaSwgaikgeyByZXR1cm4gc29ydFZhbHVlcyhhcmNzW2ldLCBhcmNzW2pdKTsgfSk7XG4gICAgZWxzZSBpZiAoc29ydCAhPSBudWxsKSBpbmRleC5zb3J0KGZ1bmN0aW9uKGksIGopIHsgcmV0dXJuIHNvcnQoZGF0YVtpXSwgZGF0YVtqXSk7IH0pO1xuXG4gICAgLy8gQ29tcHV0ZSB0aGUgYXJjcyEgVGhleSBhcmUgc3RvcmVkIGluIHRoZSBvcmlnaW5hbCBkYXRhJ3Mgb3JkZXIuXG4gICAgZm9yIChpID0gMCwgayA9IHN1bSA/IChkYSAtIG4gKiBwYSkgLyBzdW0gOiAwOyBpIDwgbjsgKytpLCBhMCA9IGExKSB7XG4gICAgICBqID0gaW5kZXhbaV0sIHYgPSBhcmNzW2pdLCBhMSA9IGEwICsgKHYgPiAwID8gdiAqIGsgOiAwKSArIHBhLCBhcmNzW2pdID0ge1xuICAgICAgICBkYXRhOiBkYXRhW2pdLFxuICAgICAgICBpbmRleDogaSxcbiAgICAgICAgdmFsdWU6IHYsXG4gICAgICAgIHN0YXJ0QW5nbGU6IGEwLFxuICAgICAgICBlbmRBbmdsZTogYTEsXG4gICAgICAgIHBhZEFuZ2xlOiBwXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBhcmNzO1xuICB9XG5cbiAgcGllLnZhbHVlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHZhbHVlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxMCgrXyksIHBpZSkgOiB2YWx1ZTtcbiAgfTtcblxuICBwaWUuc29ydFZhbHVlcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzb3J0VmFsdWVzID0gXywgc29ydCA9IG51bGwsIHBpZSkgOiBzb3J0VmFsdWVzO1xuICB9O1xuXG4gIHBpZS5zb3J0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNvcnQgPSBfLCBzb3J0VmFsdWVzID0gbnVsbCwgcGllKSA6IHNvcnQ7XG4gIH07XG5cbiAgcGllLnN0YXJ0QW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3RhcnRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMTAoK18pLCBwaWUpIDogc3RhcnRBbmdsZTtcbiAgfTtcblxuICBwaWUuZW5kQW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZW5kQW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEwKCtfKSwgcGllKSA6IGVuZEFuZ2xlO1xuICB9O1xuXG4gIHBpZS5wYWRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMTAoK18pLCBwaWUpIDogcGFkQW5nbGU7XG4gIH07XG5cbiAgcmV0dXJuIHBpZTtcbn07XG5cbnZhciBjdXJ2ZVJhZGlhbExpbmVhciA9IGN1cnZlUmFkaWFsKGN1cnZlTGluZWFyKTtcblxuZnVuY3Rpb24gUmFkaWFsKGN1cnZlKSB7XG4gIHRoaXMuX2N1cnZlID0gY3VydmU7XG59XG5cblJhZGlhbC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fY3VydmUuYXJlYVN0YXJ0KCk7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2N1cnZlLmFyZWFFbmQoKTtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9jdXJ2ZS5saW5lU3RhcnQoKTtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fY3VydmUubGluZUVuZCgpO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oYSwgcikge1xuICAgIHRoaXMuX2N1cnZlLnBvaW50KHIgKiBNYXRoLnNpbihhKSwgciAqIC1NYXRoLmNvcyhhKSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGN1cnZlUmFkaWFsKGN1cnZlKSB7XG5cbiAgZnVuY3Rpb24gcmFkaWFsKGNvbnRleHQpIHtcbiAgICByZXR1cm4gbmV3IFJhZGlhbChjdXJ2ZShjb250ZXh0KSk7XG4gIH1cblxuICByYWRpYWwuX2N1cnZlID0gY3VydmU7XG5cbiAgcmV0dXJuIHJhZGlhbDtcbn1cblxuZnVuY3Rpb24gbGluZVJhZGlhbChsKSB7XG4gIHZhciBjID0gbC5jdXJ2ZTtcblxuICBsLmFuZ2xlID0gbC54LCBkZWxldGUgbC54O1xuICBsLnJhZGl1cyA9IGwueSwgZGVsZXRlIGwueTtcblxuICBsLmN1cnZlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gYyhjdXJ2ZVJhZGlhbChfKSkgOiBjKCkuX2N1cnZlO1xuICB9O1xuXG4gIHJldHVybiBsO1xufVxuXG52YXIgbGluZVJhZGlhbCQxID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBsaW5lUmFkaWFsKGxpbmUoKS5jdXJ2ZShjdXJ2ZVJhZGlhbExpbmVhcikpO1xufTtcblxudmFyIGFyZWFSYWRpYWwgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGEgPSBhcmVhJDIoKS5jdXJ2ZShjdXJ2ZVJhZGlhbExpbmVhciksXG4gICAgICBjID0gYS5jdXJ2ZSxcbiAgICAgIHgwID0gYS5saW5lWDAsXG4gICAgICB4MSA9IGEubGluZVgxLFxuICAgICAgeTAgPSBhLmxpbmVZMCxcbiAgICAgIHkxID0gYS5saW5lWTE7XG5cbiAgYS5hbmdsZSA9IGEueCwgZGVsZXRlIGEueDtcbiAgYS5zdGFydEFuZ2xlID0gYS54MCwgZGVsZXRlIGEueDA7XG4gIGEuZW5kQW5nbGUgPSBhLngxLCBkZWxldGUgYS54MTtcbiAgYS5yYWRpdXMgPSBhLnksIGRlbGV0ZSBhLnk7XG4gIGEuaW5uZXJSYWRpdXMgPSBhLnkwLCBkZWxldGUgYS55MDtcbiAgYS5vdXRlclJhZGl1cyA9IGEueTEsIGRlbGV0ZSBhLnkxO1xuICBhLmxpbmVTdGFydEFuZ2xlID0gZnVuY3Rpb24oKSB7IHJldHVybiBsaW5lUmFkaWFsKHgwKCkpOyB9LCBkZWxldGUgYS5saW5lWDA7XG4gIGEubGluZUVuZEFuZ2xlID0gZnVuY3Rpb24oKSB7IHJldHVybiBsaW5lUmFkaWFsKHgxKCkpOyB9LCBkZWxldGUgYS5saW5lWDE7XG4gIGEubGluZUlubmVyUmFkaXVzID0gZnVuY3Rpb24oKSB7IHJldHVybiBsaW5lUmFkaWFsKHkwKCkpOyB9LCBkZWxldGUgYS5saW5lWTA7XG4gIGEubGluZU91dGVyUmFkaXVzID0gZnVuY3Rpb24oKSB7IHJldHVybiBsaW5lUmFkaWFsKHkxKCkpOyB9LCBkZWxldGUgYS5saW5lWTE7XG5cbiAgYS5jdXJ2ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IGMoY3VydmVSYWRpYWwoXykpIDogYygpLl9jdXJ2ZTtcbiAgfTtcblxuICByZXR1cm4gYTtcbn07XG5cbnZhciBwb2ludFJhZGlhbCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgcmV0dXJuIFsoeSA9ICt5KSAqIE1hdGguY29zKHggLT0gTWF0aC5QSSAvIDIpLCB5ICogTWF0aC5zaW4oeCldO1xufTtcblxudmFyIHNsaWNlJDYgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG5cbmZ1bmN0aW9uIGxpbmtTb3VyY2UoZCkge1xuICByZXR1cm4gZC5zb3VyY2U7XG59XG5cbmZ1bmN0aW9uIGxpbmtUYXJnZXQoZCkge1xuICByZXR1cm4gZC50YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIGxpbmskMihjdXJ2ZSkge1xuICB2YXIgc291cmNlID0gbGlua1NvdXJjZSxcbiAgICAgIHRhcmdldCA9IGxpbmtUYXJnZXQsXG4gICAgICB4ID0geCQzLFxuICAgICAgeSA9IHkkMyxcbiAgICAgIGNvbnRleHQgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGxpbmsoKSB7XG4gICAgdmFyIGJ1ZmZlciwgYXJndiA9IHNsaWNlJDYuY2FsbChhcmd1bWVudHMpLCBzID0gc291cmNlLmFwcGx5KHRoaXMsIGFyZ3YpLCB0ID0gdGFyZ2V0LmFwcGx5KHRoaXMsIGFyZ3YpO1xuICAgIGlmICghY29udGV4dCkgY29udGV4dCA9IGJ1ZmZlciA9IHBhdGgoKTtcbiAgICBjdXJ2ZShjb250ZXh0LCAreC5hcHBseSh0aGlzLCAoYXJndlswXSA9IHMsIGFyZ3YpKSwgK3kuYXBwbHkodGhpcywgYXJndiksICt4LmFwcGx5KHRoaXMsIChhcmd2WzBdID0gdCwgYXJndikpLCAreS5hcHBseSh0aGlzLCBhcmd2KSk7XG4gICAgaWYgKGJ1ZmZlcikgcmV0dXJuIGNvbnRleHQgPSBudWxsLCBidWZmZXIgKyBcIlwiIHx8IG51bGw7XG4gIH1cblxuICBsaW5rLnNvdXJjZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzb3VyY2UgPSBfLCBsaW5rKSA6IHNvdXJjZTtcbiAgfTtcblxuICBsaW5rLnRhcmdldCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0YXJnZXQgPSBfLCBsaW5rKSA6IHRhcmdldDtcbiAgfTtcblxuICBsaW5rLnggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMTAoK18pLCBsaW5rKSA6IHg7XG4gIH07XG5cbiAgbGluay55ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEwKCtfKSwgbGluaykgOiB5O1xuICB9O1xuXG4gIGxpbmsuY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICgoY29udGV4dCA9IF8gPT0gbnVsbCA/IG51bGwgOiBfKSwgbGluaykgOiBjb250ZXh0O1xuICB9O1xuXG4gIHJldHVybiBsaW5rO1xufVxuXG5mdW5jdGlvbiBjdXJ2ZUhvcml6b250YWwoY29udGV4dCwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgY29udGV4dC5tb3ZlVG8oeDAsIHkwKTtcbiAgY29udGV4dC5iZXppZXJDdXJ2ZVRvKHgwID0gKHgwICsgeDEpIC8gMiwgeTAsIHgwLCB5MSwgeDEsIHkxKTtcbn1cblxuZnVuY3Rpb24gY3VydmVWZXJ0aWNhbChjb250ZXh0LCB4MCwgeTAsIHgxLCB5MSkge1xuICBjb250ZXh0Lm1vdmVUbyh4MCwgeTApO1xuICBjb250ZXh0LmJlemllckN1cnZlVG8oeDAsIHkwID0gKHkwICsgeTEpIC8gMiwgeDEsIHkwLCB4MSwgeTEpO1xufVxuXG5mdW5jdGlvbiBjdXJ2ZVJhZGlhbCQxKGNvbnRleHQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciBwMCA9IHBvaW50UmFkaWFsKHgwLCB5MCksXG4gICAgICBwMSA9IHBvaW50UmFkaWFsKHgwLCB5MCA9ICh5MCArIHkxKSAvIDIpLFxuICAgICAgcDIgPSBwb2ludFJhZGlhbCh4MSwgeTApLFxuICAgICAgcDMgPSBwb2ludFJhZGlhbCh4MSwgeTEpO1xuICBjb250ZXh0Lm1vdmVUbyhwMFswXSwgcDBbMV0pO1xuICBjb250ZXh0LmJlemllckN1cnZlVG8ocDFbMF0sIHAxWzFdLCBwMlswXSwgcDJbMV0sIHAzWzBdLCBwM1sxXSk7XG59XG5cbmZ1bmN0aW9uIGxpbmtIb3Jpem9udGFsKCkge1xuICByZXR1cm4gbGluayQyKGN1cnZlSG9yaXpvbnRhbCk7XG59XG5cbmZ1bmN0aW9uIGxpbmtWZXJ0aWNhbCgpIHtcbiAgcmV0dXJuIGxpbmskMihjdXJ2ZVZlcnRpY2FsKTtcbn1cblxuZnVuY3Rpb24gbGlua1JhZGlhbCgpIHtcbiAgdmFyIGwgPSBsaW5rJDIoY3VydmVSYWRpYWwkMSk7XG4gIGwuYW5nbGUgPSBsLngsIGRlbGV0ZSBsLng7XG4gIGwucmFkaXVzID0gbC55LCBkZWxldGUgbC55O1xuICByZXR1cm4gbDtcbn1cblxudmFyIGNpcmNsZSQyID0ge1xuICBkcmF3OiBmdW5jdGlvbihjb250ZXh0LCBzaXplKSB7XG4gICAgdmFyIHIgPSBNYXRoLnNxcnQoc2l6ZSAvIHBpJDQpO1xuICAgIGNvbnRleHQubW92ZVRvKHIsIDApO1xuICAgIGNvbnRleHQuYXJjKDAsIDAsIHIsIDAsIHRhdSQ0KTtcbiAgfVxufTtcblxudmFyIGNyb3NzJDIgPSB7XG4gIGRyYXc6IGZ1bmN0aW9uKGNvbnRleHQsIHNpemUpIHtcbiAgICB2YXIgciA9IE1hdGguc3FydChzaXplIC8gNSkgLyAyO1xuICAgIGNvbnRleHQubW92ZVRvKC0zICogciwgLXIpO1xuICAgIGNvbnRleHQubGluZVRvKC1yLCAtcik7XG4gICAgY29udGV4dC5saW5lVG8oLXIsIC0zICogcik7XG4gICAgY29udGV4dC5saW5lVG8ociwgLTMgKiByKTtcbiAgICBjb250ZXh0LmxpbmVUbyhyLCAtcik7XG4gICAgY29udGV4dC5saW5lVG8oMyAqIHIsIC1yKTtcbiAgICBjb250ZXh0LmxpbmVUbygzICogciwgcik7XG4gICAgY29udGV4dC5saW5lVG8ociwgcik7XG4gICAgY29udGV4dC5saW5lVG8ociwgMyAqIHIpO1xuICAgIGNvbnRleHQubGluZVRvKC1yLCAzICogcik7XG4gICAgY29udGV4dC5saW5lVG8oLXIsIHIpO1xuICAgIGNvbnRleHQubGluZVRvKC0zICogciwgcik7XG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgfVxufTtcblxudmFyIHRhbjMwID0gTWF0aC5zcXJ0KDEgLyAzKTtcbnZhciB0YW4zMF8yID0gdGFuMzAgKiAyO1xuXG52YXIgZGlhbW9uZCA9IHtcbiAgZHJhdzogZnVuY3Rpb24oY29udGV4dCwgc2l6ZSkge1xuICAgIHZhciB5ID0gTWF0aC5zcXJ0KHNpemUgLyB0YW4zMF8yKSxcbiAgICAgICAgeCA9IHkgKiB0YW4zMDtcbiAgICBjb250ZXh0Lm1vdmVUbygwLCAteSk7XG4gICAgY29udGV4dC5saW5lVG8oeCwgMCk7XG4gICAgY29udGV4dC5saW5lVG8oMCwgeSk7XG4gICAgY29udGV4dC5saW5lVG8oLXgsIDApO1xuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gIH1cbn07XG5cbnZhciBrYSA9IDAuODkwODEzMDkxNTI5Mjg1MjI4MTA7XG52YXIga3IgPSBNYXRoLnNpbihwaSQ0IC8gMTApIC8gTWF0aC5zaW4oNyAqIHBpJDQgLyAxMCk7XG52YXIga3ggPSBNYXRoLnNpbih0YXUkNCAvIDEwKSAqIGtyO1xudmFyIGt5ID0gLU1hdGguY29zKHRhdSQ0IC8gMTApICoga3I7XG5cbnZhciBzdGFyID0ge1xuICBkcmF3OiBmdW5jdGlvbihjb250ZXh0LCBzaXplKSB7XG4gICAgdmFyIHIgPSBNYXRoLnNxcnQoc2l6ZSAqIGthKSxcbiAgICAgICAgeCA9IGt4ICogcixcbiAgICAgICAgeSA9IGt5ICogcjtcbiAgICBjb250ZXh0Lm1vdmVUbygwLCAtcik7XG4gICAgY29udGV4dC5saW5lVG8oeCwgeSk7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCA1OyArK2kpIHtcbiAgICAgIHZhciBhID0gdGF1JDQgKiBpIC8gNSxcbiAgICAgICAgICBjID0gTWF0aC5jb3MoYSksXG4gICAgICAgICAgcyA9IE1hdGguc2luKGEpO1xuICAgICAgY29udGV4dC5saW5lVG8ocyAqIHIsIC1jICogcik7XG4gICAgICBjb250ZXh0LmxpbmVUbyhjICogeCAtIHMgKiB5LCBzICogeCArIGMgKiB5KTtcbiAgICB9XG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgfVxufTtcblxudmFyIHNxdWFyZSA9IHtcbiAgZHJhdzogZnVuY3Rpb24oY29udGV4dCwgc2l6ZSkge1xuICAgIHZhciB3ID0gTWF0aC5zcXJ0KHNpemUpLFxuICAgICAgICB4ID0gLXcgLyAyO1xuICAgIGNvbnRleHQucmVjdCh4LCB4LCB3LCB3KTtcbiAgfVxufTtcblxudmFyIHNxcnQzID0gTWF0aC5zcXJ0KDMpO1xuXG52YXIgdHJpYW5nbGUgPSB7XG4gIGRyYXc6IGZ1bmN0aW9uKGNvbnRleHQsIHNpemUpIHtcbiAgICB2YXIgeSA9IC1NYXRoLnNxcnQoc2l6ZSAvIChzcXJ0MyAqIDMpKTtcbiAgICBjb250ZXh0Lm1vdmVUbygwLCB5ICogMik7XG4gICAgY29udGV4dC5saW5lVG8oLXNxcnQzICogeSwgLXkpO1xuICAgIGNvbnRleHQubGluZVRvKHNxcnQzICogeSwgLXkpO1xuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gIH1cbn07XG5cbnZhciBjID0gLTAuNTtcbnZhciBzID0gTWF0aC5zcXJ0KDMpIC8gMjtcbnZhciBrID0gMSAvIE1hdGguc3FydCgxMik7XG52YXIgYSA9IChrIC8gMiArIDEpICogMztcblxudmFyIHd5ZSA9IHtcbiAgZHJhdzogZnVuY3Rpb24oY29udGV4dCwgc2l6ZSkge1xuICAgIHZhciByID0gTWF0aC5zcXJ0KHNpemUgLyBhKSxcbiAgICAgICAgeDAgPSByIC8gMixcbiAgICAgICAgeTAgPSByICogayxcbiAgICAgICAgeDEgPSB4MCxcbiAgICAgICAgeTEgPSByICogayArIHIsXG4gICAgICAgIHgyID0gLXgxLFxuICAgICAgICB5MiA9IHkxO1xuICAgIGNvbnRleHQubW92ZVRvKHgwLCB5MCk7XG4gICAgY29udGV4dC5saW5lVG8oeDEsIHkxKTtcbiAgICBjb250ZXh0LmxpbmVUbyh4MiwgeTIpO1xuICAgIGNvbnRleHQubGluZVRvKGMgKiB4MCAtIHMgKiB5MCwgcyAqIHgwICsgYyAqIHkwKTtcbiAgICBjb250ZXh0LmxpbmVUbyhjICogeDEgLSBzICogeTEsIHMgKiB4MSArIGMgKiB5MSk7XG4gICAgY29udGV4dC5saW5lVG8oYyAqIHgyIC0gcyAqIHkyLCBzICogeDIgKyBjICogeTIpO1xuICAgIGNvbnRleHQubGluZVRvKGMgKiB4MCArIHMgKiB5MCwgYyAqIHkwIC0gcyAqIHgwKTtcbiAgICBjb250ZXh0LmxpbmVUbyhjICogeDEgKyBzICogeTEsIGMgKiB5MSAtIHMgKiB4MSk7XG4gICAgY29udGV4dC5saW5lVG8oYyAqIHgyICsgcyAqIHkyLCBjICogeTIgLSBzICogeDIpO1xuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gIH1cbn07XG5cbnZhciBzeW1ib2xzID0gW1xuICBjaXJjbGUkMixcbiAgY3Jvc3MkMixcbiAgZGlhbW9uZCxcbiAgc3F1YXJlLFxuICBzdGFyLFxuICB0cmlhbmdsZSxcbiAgd3llXG5dO1xuXG52YXIgc3ltYm9sID0gZnVuY3Rpb24oKSB7XG4gIHZhciB0eXBlID0gY29uc3RhbnQkMTAoY2lyY2xlJDIpLFxuICAgICAgc2l6ZSA9IGNvbnN0YW50JDEwKDY0KSxcbiAgICAgIGNvbnRleHQgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIHN5bWJvbCgpIHtcbiAgICB2YXIgYnVmZmVyO1xuICAgIGlmICghY29udGV4dCkgY29udGV4dCA9IGJ1ZmZlciA9IHBhdGgoKTtcbiAgICB0eXBlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykuZHJhdyhjb250ZXh0LCArc2l6ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICBpZiAoYnVmZmVyKSByZXR1cm4gY29udGV4dCA9IG51bGwsIGJ1ZmZlciArIFwiXCIgfHwgbnVsbDtcbiAgfVxuXG4gIHN5bWJvbC50eXBlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHR5cGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEwKF8pLCBzeW1ib2wpIDogdHlwZTtcbiAgfTtcblxuICBzeW1ib2wuc2l6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzaXplID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxMCgrXyksIHN5bWJvbCkgOiBzaXplO1xuICB9O1xuXG4gIHN5bWJvbC5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNvbnRleHQgPSBfID09IG51bGwgPyBudWxsIDogXywgc3ltYm9sKSA6IGNvbnRleHQ7XG4gIH07XG5cbiAgcmV0dXJuIHN5bWJvbDtcbn07XG5cbnZhciBub29wJDIgPSBmdW5jdGlvbigpIHt9O1xuXG5mdW5jdGlvbiBwb2ludCQyKHRoYXQsIHgsIHkpIHtcbiAgdGhhdC5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKFxuICAgICgyICogdGhhdC5feDAgKyB0aGF0Ll94MSkgLyAzLFxuICAgICgyICogdGhhdC5feTAgKyB0aGF0Ll95MSkgLyAzLFxuICAgICh0aGF0Ll94MCArIDIgKiB0aGF0Ll94MSkgLyAzLFxuICAgICh0aGF0Ll95MCArIDIgKiB0aGF0Ll95MSkgLyAzLFxuICAgICh0aGF0Ll94MCArIDQgKiB0aGF0Ll94MSArIHgpIC8gNixcbiAgICAodGhhdC5feTAgKyA0ICogdGhhdC5feTEgKyB5KSAvIDZcbiAgKTtcbn1cblxuZnVuY3Rpb24gQmFzaXMoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuQmFzaXMucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSBOYU47XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDM6IHBvaW50JDIodGhpcywgdGhpcy5feDEsIHRoaXMuX3kxKTsgLy8gcHJvY2VlZFxuICAgICAgY2FzZSAyOiB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MSwgdGhpcy5feTEpOyBicmVhaztcbiAgICB9XG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHRoaXMuX2NvbnRleHQubGluZVRvKCg1ICogdGhpcy5feDAgKyB0aGlzLl94MSkgLyA2LCAoNSAqIHRoaXMuX3kwICsgdGhpcy5feTEpIC8gNik7IC8vIHByb2NlZWRcbiAgICAgIGRlZmF1bHQ6IHBvaW50JDIodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgIH1cbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHg7XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB5O1xuICB9XG59O1xuXG52YXIgYmFzaXMkMiA9IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBCYXNpcyhjb250ZXh0KTtcbn07XG5cbmZ1bmN0aW9uIEJhc2lzQ2xvc2VkKGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cbkJhc2lzQ2xvc2VkLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBub29wJDIsXG4gIGFyZWFFbmQ6IG5vb3AkMixcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPSB0aGlzLl94MyA9IHRoaXMuX3g0ID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSB0aGlzLl95MyA9IHRoaXMuX3k0ID0gTmFOO1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAxOiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3gyLCB0aGlzLl95Mik7XG4gICAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAyOiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKCh0aGlzLl94MiArIDIgKiB0aGlzLl94MykgLyAzLCAodGhpcy5feTIgKyAyICogdGhpcy5feTMpIC8gMyk7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKCh0aGlzLl94MyArIDIgKiB0aGlzLl94MikgLyAzLCAodGhpcy5feTMgKyAyICogdGhpcy5feTIpIC8gMyk7XG4gICAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAzOiB7XG4gICAgICAgIHRoaXMucG9pbnQodGhpcy5feDIsIHRoaXMuX3kyKTtcbiAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3g0LCB0aGlzLl95NCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5feDIgPSB4LCB0aGlzLl95MiA9IHk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IHRoaXMuX3gzID0geCwgdGhpcy5feTMgPSB5OyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyB0aGlzLl94NCA9IHgsIHRoaXMuX3k0ID0geTsgdGhpcy5fY29udGV4dC5tb3ZlVG8oKHRoaXMuX3gwICsgNCAqIHRoaXMuX3gxICsgeCkgLyA2LCAodGhpcy5feTAgKyA0ICogdGhpcy5feTEgKyB5KSAvIDYpOyBicmVhaztcbiAgICAgIGRlZmF1bHQ6IHBvaW50JDIodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgIH1cbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHg7XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB5O1xuICB9XG59O1xuXG52YXIgYmFzaXNDbG9zZWQkMSA9IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBCYXNpc0Nsb3NlZChjb250ZXh0KTtcbn07XG5cbmZ1bmN0aW9uIEJhc2lzT3Blbihjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5CYXNpc09wZW4ucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSBOYU47XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMykpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyB2YXIgeDAgPSAodGhpcy5feDAgKyA0ICogdGhpcy5feDEgKyB4KSAvIDYsIHkwID0gKHRoaXMuX3kwICsgNCAqIHRoaXMuX3kxICsgeSkgLyA2OyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeDAsIHkwKSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgwLCB5MCk7IGJyZWFrO1xuICAgICAgY2FzZSAzOiB0aGlzLl9wb2ludCA9IDQ7IC8vIHByb2NlZWRcbiAgICAgIGRlZmF1bHQ6IHBvaW50JDIodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgIH1cbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHg7XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB5O1xuICB9XG59O1xuXG52YXIgYmFzaXNPcGVuID0gZnVuY3Rpb24oY29udGV4dCkge1xuICByZXR1cm4gbmV3IEJhc2lzT3Blbihjb250ZXh0KTtcbn07XG5cbmZ1bmN0aW9uIEJ1bmRsZShjb250ZXh0LCBiZXRhKSB7XG4gIHRoaXMuX2Jhc2lzID0gbmV3IEJhc2lzKGNvbnRleHQpO1xuICB0aGlzLl9iZXRhID0gYmV0YTtcbn1cblxuQnVuZGxlLnByb3RvdHlwZSA9IHtcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94ID0gW107XG4gICAgdGhpcy5feSA9IFtdO1xuICAgIHRoaXMuX2Jhc2lzLmxpbmVTdGFydCgpO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgeCA9IHRoaXMuX3gsXG4gICAgICAgIHkgPSB0aGlzLl95LFxuICAgICAgICBqID0geC5sZW5ndGggLSAxO1xuXG4gICAgaWYgKGogPiAwKSB7XG4gICAgICB2YXIgeDAgPSB4WzBdLFxuICAgICAgICAgIHkwID0geVswXSxcbiAgICAgICAgICBkeCA9IHhbal0gLSB4MCxcbiAgICAgICAgICBkeSA9IHlbal0gLSB5MCxcbiAgICAgICAgICBpID0gLTEsXG4gICAgICAgICAgdDtcblxuICAgICAgd2hpbGUgKCsraSA8PSBqKSB7XG4gICAgICAgIHQgPSBpIC8gajtcbiAgICAgICAgdGhpcy5fYmFzaXMucG9pbnQoXG4gICAgICAgICAgdGhpcy5fYmV0YSAqIHhbaV0gKyAoMSAtIHRoaXMuX2JldGEpICogKHgwICsgdCAqIGR4KSxcbiAgICAgICAgICB0aGlzLl9iZXRhICogeVtpXSArICgxIC0gdGhpcy5fYmV0YSkgKiAoeTAgKyB0ICogZHkpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5feCA9IHRoaXMuX3kgPSBudWxsO1xuICAgIHRoaXMuX2Jhc2lzLmxpbmVFbmQoKTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB0aGlzLl94LnB1c2goK3gpO1xuICAgIHRoaXMuX3kucHVzaCgreSk7XG4gIH1cbn07XG5cbnZhciBidW5kbGUgPSAoZnVuY3Rpb24gY3VzdG9tKGJldGEpIHtcblxuICBmdW5jdGlvbiBidW5kbGUoY29udGV4dCkge1xuICAgIHJldHVybiBiZXRhID09PSAxID8gbmV3IEJhc2lzKGNvbnRleHQpIDogbmV3IEJ1bmRsZShjb250ZXh0LCBiZXRhKTtcbiAgfVxuXG4gIGJ1bmRsZS5iZXRhID0gZnVuY3Rpb24oYmV0YSkge1xuICAgIHJldHVybiBjdXN0b20oK2JldGEpO1xuICB9O1xuXG4gIHJldHVybiBidW5kbGU7XG59KSgwLjg1KTtcblxuZnVuY3Rpb24gcG9pbnQkMyh0aGF0LCB4LCB5KSB7XG4gIHRoYXQuX2NvbnRleHQuYmV6aWVyQ3VydmVUbyhcbiAgICB0aGF0Ll94MSArIHRoYXQuX2sgKiAodGhhdC5feDIgLSB0aGF0Ll94MCksXG4gICAgdGhhdC5feTEgKyB0aGF0Ll9rICogKHRoYXQuX3kyIC0gdGhhdC5feTApLFxuICAgIHRoYXQuX3gyICsgdGhhdC5fayAqICh0aGF0Ll94MSAtIHgpLFxuICAgIHRoYXQuX3kyICsgdGhhdC5fayAqICh0aGF0Ll95MSAtIHkpLFxuICAgIHRoYXQuX3gyLFxuICAgIHRoYXQuX3kyXG4gICk7XG59XG5cbmZ1bmN0aW9uIENhcmRpbmFsKGNvbnRleHQsIHRlbnNpb24pIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMuX2sgPSAoMSAtIHRlbnNpb24pIC8gNjtcbn1cblxuQ2FyZGluYWwucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPSB0aGlzLl94MiA9XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IHRoaXMuX3kyID0gTmFOO1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAyOiB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MiwgdGhpcy5feTIpOyBicmVhaztcbiAgICAgIGNhc2UgMzogcG9pbnQkMyh0aGlzLCB0aGlzLl94MSwgdGhpcy5feTEpOyBicmVhaztcbiAgICB9XG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IHRoaXMuX3gxID0geCwgdGhpcy5feTEgPSB5OyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyAvLyBwcm9jZWVkXG4gICAgICBkZWZhdWx0OiBwb2ludCQzKHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB0aGlzLl94MiwgdGhpcy5feDIgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0gdGhpcy5feTIsIHRoaXMuX3kyID0geTtcbiAgfVxufTtcblxudmFyIGNhcmRpbmFsID0gKGZ1bmN0aW9uIGN1c3RvbSh0ZW5zaW9uKSB7XG5cbiAgZnVuY3Rpb24gY2FyZGluYWwoY29udGV4dCkge1xuICAgIHJldHVybiBuZXcgQ2FyZGluYWwoY29udGV4dCwgdGVuc2lvbik7XG4gIH1cblxuICBjYXJkaW5hbC50ZW5zaW9uID0gZnVuY3Rpb24odGVuc2lvbikge1xuICAgIHJldHVybiBjdXN0b20oK3RlbnNpb24pO1xuICB9O1xuXG4gIHJldHVybiBjYXJkaW5hbDtcbn0pKDApO1xuXG5mdW5jdGlvbiBDYXJkaW5hbENsb3NlZChjb250ZXh0LCB0ZW5zaW9uKSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLl9rID0gKDEgLSB0ZW5zaW9uKSAvIDY7XG59XG5cbkNhcmRpbmFsQ2xvc2VkLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBub29wJDIsXG4gIGFyZWFFbmQ6IG5vb3AkMixcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPSB0aGlzLl94MyA9IHRoaXMuX3g0ID0gdGhpcy5feDUgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSB0aGlzLl95MiA9IHRoaXMuX3kzID0gdGhpcy5feTQgPSB0aGlzLl95NSA9IE5hTjtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMToge1xuICAgICAgICB0aGlzLl9jb250ZXh0Lm1vdmVUbyh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMjoge1xuICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMzoge1xuICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3gzLCB0aGlzLl95Myk7XG4gICAgICAgIHRoaXMucG9pbnQodGhpcy5feDQsIHRoaXMuX3k0KTtcbiAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94NSwgdGhpcy5feTUpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX3gzID0geCwgdGhpcy5feTMgPSB5OyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyB0aGlzLl9jb250ZXh0Lm1vdmVUbyh0aGlzLl94NCA9IHgsIHRoaXMuX3k0ID0geSk7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHRoaXMuX3g1ID0geCwgdGhpcy5feTUgPSB5OyBicmVhaztcbiAgICAgIGRlZmF1bHQ6IHBvaW50JDModGhpcywgeCwgeSk7IGJyZWFrO1xuICAgIH1cbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHRoaXMuX3gyLCB0aGlzLl94MiA9IHg7XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB0aGlzLl95MiwgdGhpcy5feTIgPSB5O1xuICB9XG59O1xuXG52YXIgY2FyZGluYWxDbG9zZWQgPSAoZnVuY3Rpb24gY3VzdG9tKHRlbnNpb24pIHtcblxuICBmdW5jdGlvbiBjYXJkaW5hbCQkMShjb250ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBDYXJkaW5hbENsb3NlZChjb250ZXh0LCB0ZW5zaW9uKTtcbiAgfVxuXG4gIGNhcmRpbmFsJCQxLnRlbnNpb24gPSBmdW5jdGlvbih0ZW5zaW9uKSB7XG4gICAgcmV0dXJuIGN1c3RvbSgrdGVuc2lvbik7XG4gIH07XG5cbiAgcmV0dXJuIGNhcmRpbmFsJCQxO1xufSkoMCk7XG5cbmZ1bmN0aW9uIENhcmRpbmFsT3Blbihjb250ZXh0LCB0ZW5zaW9uKSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLl9rID0gKDEgLSB0ZW5zaW9uKSAvIDY7XG59XG5cbkNhcmRpbmFsT3Blbi5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9IHRoaXMuX3gyID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSBOYU47XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMykpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDIsIHRoaXMuX3kyKSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3gyLCB0aGlzLl95Mik7IGJyZWFrO1xuICAgICAgY2FzZSAzOiB0aGlzLl9wb2ludCA9IDQ7IC8vIHByb2NlZWRcbiAgICAgIGRlZmF1bHQ6IHBvaW50JDModGhpcywgeCwgeSk7IGJyZWFrO1xuICAgIH1cbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHRoaXMuX3gyLCB0aGlzLl94MiA9IHg7XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB0aGlzLl95MiwgdGhpcy5feTIgPSB5O1xuICB9XG59O1xuXG52YXIgY2FyZGluYWxPcGVuID0gKGZ1bmN0aW9uIGN1c3RvbSh0ZW5zaW9uKSB7XG5cbiAgZnVuY3Rpb24gY2FyZGluYWwkJDEoY29udGV4dCkge1xuICAgIHJldHVybiBuZXcgQ2FyZGluYWxPcGVuKGNvbnRleHQsIHRlbnNpb24pO1xuICB9XG5cbiAgY2FyZGluYWwkJDEudGVuc2lvbiA9IGZ1bmN0aW9uKHRlbnNpb24pIHtcbiAgICByZXR1cm4gY3VzdG9tKCt0ZW5zaW9uKTtcbiAgfTtcblxuICByZXR1cm4gY2FyZGluYWwkJDE7XG59KSgwKTtcblxuZnVuY3Rpb24gcG9pbnQkNCh0aGF0LCB4LCB5KSB7XG4gIHZhciB4MSA9IHRoYXQuX3gxLFxuICAgICAgeTEgPSB0aGF0Ll95MSxcbiAgICAgIHgyID0gdGhhdC5feDIsXG4gICAgICB5MiA9IHRoYXQuX3kyO1xuXG4gIGlmICh0aGF0Ll9sMDFfYSA+IGVwc2lsb24kMykge1xuICAgIHZhciBhID0gMiAqIHRoYXQuX2wwMV8yYSArIDMgKiB0aGF0Ll9sMDFfYSAqIHRoYXQuX2wxMl9hICsgdGhhdC5fbDEyXzJhLFxuICAgICAgICBuID0gMyAqIHRoYXQuX2wwMV9hICogKHRoYXQuX2wwMV9hICsgdGhhdC5fbDEyX2EpO1xuICAgIHgxID0gKHgxICogYSAtIHRoYXQuX3gwICogdGhhdC5fbDEyXzJhICsgdGhhdC5feDIgKiB0aGF0Ll9sMDFfMmEpIC8gbjtcbiAgICB5MSA9ICh5MSAqIGEgLSB0aGF0Ll95MCAqIHRoYXQuX2wxMl8yYSArIHRoYXQuX3kyICogdGhhdC5fbDAxXzJhKSAvIG47XG4gIH1cblxuICBpZiAodGhhdC5fbDIzX2EgPiBlcHNpbG9uJDMpIHtcbiAgICB2YXIgYiA9IDIgKiB0aGF0Ll9sMjNfMmEgKyAzICogdGhhdC5fbDIzX2EgKiB0aGF0Ll9sMTJfYSArIHRoYXQuX2wxMl8yYSxcbiAgICAgICAgbSA9IDMgKiB0aGF0Ll9sMjNfYSAqICh0aGF0Ll9sMjNfYSArIHRoYXQuX2wxMl9hKTtcbiAgICB4MiA9ICh4MiAqIGIgKyB0aGF0Ll94MSAqIHRoYXQuX2wyM18yYSAtIHggKiB0aGF0Ll9sMTJfMmEpIC8gbTtcbiAgICB5MiA9ICh5MiAqIGIgKyB0aGF0Ll95MSAqIHRoYXQuX2wyM18yYSAtIHkgKiB0aGF0Ll9sMTJfMmEpIC8gbTtcbiAgfVxuXG4gIHRoYXQuX2NvbnRleHQuYmV6aWVyQ3VydmVUbyh4MSwgeTEsIHgyLCB5MiwgdGhhdC5feDIsIHRoYXQuX3kyKTtcbn1cblxuZnVuY3Rpb24gQ2F0bXVsbFJvbShjb250ZXh0LCBhbHBoYSkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5fYWxwaGEgPSBhbHBoYTtcbn1cblxuQ2F0bXVsbFJvbS5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9IHRoaXMuX3gyID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSBOYU47XG4gICAgdGhpcy5fbDAxX2EgPSB0aGlzLl9sMTJfYSA9IHRoaXMuX2wyM19hID1cbiAgICB0aGlzLl9sMDFfMmEgPSB0aGlzLl9sMTJfMmEgPSB0aGlzLl9sMjNfMmEgPVxuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAyOiB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MiwgdGhpcy5feTIpOyBicmVhaztcbiAgICAgIGNhc2UgMzogdGhpcy5wb2ludCh0aGlzLl94MiwgdGhpcy5feTIpOyBicmVhaztcbiAgICB9XG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcblxuICAgIGlmICh0aGlzLl9wb2ludCkge1xuICAgICAgdmFyIHgyMyA9IHRoaXMuX3gyIC0geCxcbiAgICAgICAgICB5MjMgPSB0aGlzLl95MiAtIHk7XG4gICAgICB0aGlzLl9sMjNfYSA9IE1hdGguc3FydCh0aGlzLl9sMjNfMmEgPSBNYXRoLnBvdyh4MjMgKiB4MjMgKyB5MjMgKiB5MjMsIHRoaXMuX2FscGhhKSk7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyAvLyBwcm9jZWVkXG4gICAgICBkZWZhdWx0OiBwb2ludCQ0KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG5cbiAgICB0aGlzLl9sMDFfYSA9IHRoaXMuX2wxMl9hLCB0aGlzLl9sMTJfYSA9IHRoaXMuX2wyM19hO1xuICAgIHRoaXMuX2wwMV8yYSA9IHRoaXMuX2wxMl8yYSwgdGhpcy5fbDEyXzJhID0gdGhpcy5fbDIzXzJhO1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0gdGhpcy5feDIsIHRoaXMuX3gyID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHRoaXMuX3kyLCB0aGlzLl95MiA9IHk7XG4gIH1cbn07XG5cbnZhciBjYXRtdWxsUm9tID0gKGZ1bmN0aW9uIGN1c3RvbShhbHBoYSkge1xuXG4gIGZ1bmN0aW9uIGNhdG11bGxSb20oY29udGV4dCkge1xuICAgIHJldHVybiBhbHBoYSA/IG5ldyBDYXRtdWxsUm9tKGNvbnRleHQsIGFscGhhKSA6IG5ldyBDYXJkaW5hbChjb250ZXh0LCAwKTtcbiAgfVxuXG4gIGNhdG11bGxSb20uYWxwaGEgPSBmdW5jdGlvbihhbHBoYSkge1xuICAgIHJldHVybiBjdXN0b20oK2FscGhhKTtcbiAgfTtcblxuICByZXR1cm4gY2F0bXVsbFJvbTtcbn0pKDAuNSk7XG5cbmZ1bmN0aW9uIENhdG11bGxSb21DbG9zZWQoY29udGV4dCwgYWxwaGEpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMuX2FscGhhID0gYWxwaGE7XG59XG5cbkNhdG11bGxSb21DbG9zZWQucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IG5vb3AkMixcbiAgYXJlYUVuZDogbm9vcCQyLFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPSB0aGlzLl94MiA9IHRoaXMuX3gzID0gdGhpcy5feDQgPSB0aGlzLl94NSA9XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IHRoaXMuX3kyID0gdGhpcy5feTMgPSB0aGlzLl95NCA9IHRoaXMuX3k1ID0gTmFOO1xuICAgIHRoaXMuX2wwMV9hID0gdGhpcy5fbDEyX2EgPSB0aGlzLl9sMjNfYSA9XG4gICAgdGhpcy5fbDAxXzJhID0gdGhpcy5fbDEyXzJhID0gdGhpcy5fbDIzXzJhID1cbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMToge1xuICAgICAgICB0aGlzLl9jb250ZXh0Lm1vdmVUbyh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMjoge1xuICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMzoge1xuICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3gzLCB0aGlzLl95Myk7XG4gICAgICAgIHRoaXMucG9pbnQodGhpcy5feDQsIHRoaXMuX3k0KTtcbiAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94NSwgdGhpcy5feTUpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG5cbiAgICBpZiAodGhpcy5fcG9pbnQpIHtcbiAgICAgIHZhciB4MjMgPSB0aGlzLl94MiAtIHgsXG4gICAgICAgICAgeTIzID0gdGhpcy5feTIgLSB5O1xuICAgICAgdGhpcy5fbDIzX2EgPSBNYXRoLnNxcnQodGhpcy5fbDIzXzJhID0gTWF0aC5wb3coeDIzICogeDIzICsgeTIzICogeTIzLCB0aGlzLl9hbHBoYSkpO1xuICAgIH1cblxuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl94MyA9IHgsIHRoaXMuX3kzID0geTsgYnJlYWs7XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgdGhpcy5fY29udGV4dC5tb3ZlVG8odGhpcy5feDQgPSB4LCB0aGlzLl95NCA9IHkpOyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyB0aGlzLl94NSA9IHgsIHRoaXMuX3k1ID0geTsgYnJlYWs7XG4gICAgICBkZWZhdWx0OiBwb2ludCQ0KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG5cbiAgICB0aGlzLl9sMDFfYSA9IHRoaXMuX2wxMl9hLCB0aGlzLl9sMTJfYSA9IHRoaXMuX2wyM19hO1xuICAgIHRoaXMuX2wwMV8yYSA9IHRoaXMuX2wxMl8yYSwgdGhpcy5fbDEyXzJhID0gdGhpcy5fbDIzXzJhO1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0gdGhpcy5feDIsIHRoaXMuX3gyID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHRoaXMuX3kyLCB0aGlzLl95MiA9IHk7XG4gIH1cbn07XG5cbnZhciBjYXRtdWxsUm9tQ2xvc2VkID0gKGZ1bmN0aW9uIGN1c3RvbShhbHBoYSkge1xuXG4gIGZ1bmN0aW9uIGNhdG11bGxSb20kJDEoY29udGV4dCkge1xuICAgIHJldHVybiBhbHBoYSA/IG5ldyBDYXRtdWxsUm9tQ2xvc2VkKGNvbnRleHQsIGFscGhhKSA6IG5ldyBDYXJkaW5hbENsb3NlZChjb250ZXh0LCAwKTtcbiAgfVxuXG4gIGNhdG11bGxSb20kJDEuYWxwaGEgPSBmdW5jdGlvbihhbHBoYSkge1xuICAgIHJldHVybiBjdXN0b20oK2FscGhhKTtcbiAgfTtcblxuICByZXR1cm4gY2F0bXVsbFJvbSQkMTtcbn0pKDAuNSk7XG5cbmZ1bmN0aW9uIENhdG11bGxSb21PcGVuKGNvbnRleHQsIGFscGhhKSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLl9hbHBoYSA9IGFscGhhO1xufVxuXG5DYXRtdWxsUm9tT3Blbi5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9IHRoaXMuX3gyID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSBOYU47XG4gICAgdGhpcy5fbDAxX2EgPSB0aGlzLl9sMTJfYSA9IHRoaXMuX2wyM19hID1cbiAgICB0aGlzLl9sMDFfMmEgPSB0aGlzLl9sMTJfMmEgPSB0aGlzLl9sMjNfMmEgPVxuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDMpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcblxuICAgIGlmICh0aGlzLl9wb2ludCkge1xuICAgICAgdmFyIHgyMyA9IHRoaXMuX3gyIC0geCxcbiAgICAgICAgICB5MjMgPSB0aGlzLl95MiAtIHk7XG4gICAgICB0aGlzLl9sMjNfYSA9IE1hdGguc3FydCh0aGlzLl9sMjNfMmEgPSBNYXRoLnBvdyh4MjMgKiB4MjMgKyB5MjMgKiB5MjMsIHRoaXMuX2FscGhhKSk7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MiwgdGhpcy5feTIpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8odGhpcy5feDIsIHRoaXMuX3kyKTsgYnJlYWs7XG4gICAgICBjYXNlIDM6IHRoaXMuX3BvaW50ID0gNDsgLy8gcHJvY2VlZFxuICAgICAgZGVmYXVsdDogcG9pbnQkNCh0aGlzLCB4LCB5KTsgYnJlYWs7XG4gICAgfVxuXG4gICAgdGhpcy5fbDAxX2EgPSB0aGlzLl9sMTJfYSwgdGhpcy5fbDEyX2EgPSB0aGlzLl9sMjNfYTtcbiAgICB0aGlzLl9sMDFfMmEgPSB0aGlzLl9sMTJfMmEsIHRoaXMuX2wxMl8yYSA9IHRoaXMuX2wyM18yYTtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHRoaXMuX3gyLCB0aGlzLl94MiA9IHg7XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB0aGlzLl95MiwgdGhpcy5feTIgPSB5O1xuICB9XG59O1xuXG52YXIgY2F0bXVsbFJvbU9wZW4gPSAoZnVuY3Rpb24gY3VzdG9tKGFscGhhKSB7XG5cbiAgZnVuY3Rpb24gY2F0bXVsbFJvbSQkMShjb250ZXh0KSB7XG4gICAgcmV0dXJuIGFscGhhID8gbmV3IENhdG11bGxSb21PcGVuKGNvbnRleHQsIGFscGhhKSA6IG5ldyBDYXJkaW5hbE9wZW4oY29udGV4dCwgMCk7XG4gIH1cblxuICBjYXRtdWxsUm9tJCQxLmFscGhhID0gZnVuY3Rpb24oYWxwaGEpIHtcbiAgICByZXR1cm4gY3VzdG9tKCthbHBoYSk7XG4gIH07XG5cbiAgcmV0dXJuIGNhdG11bGxSb20kJDE7XG59KSgwLjUpO1xuXG5mdW5jdGlvbiBMaW5lYXJDbG9zZWQoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuTGluZWFyQ2xvc2VkLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBub29wJDIsXG4gIGFyZWFFbmQ6IG5vb3AkMixcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9wb2ludCkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBpZiAodGhpcy5fcG9pbnQpIHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpO1xuICAgIGVsc2UgdGhpcy5fcG9pbnQgPSAxLCB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTtcbiAgfVxufTtcblxudmFyIGxpbmVhckNsb3NlZCA9IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBMaW5lYXJDbG9zZWQoY29udGV4dCk7XG59O1xuXG5mdW5jdGlvbiBzaWduJDEoeCkge1xuICByZXR1cm4geCA8IDAgPyAtMSA6IDE7XG59XG5cbi8vIENhbGN1bGF0ZSB0aGUgc2xvcGVzIG9mIHRoZSB0YW5nZW50cyAoSGVybWl0ZS10eXBlIGludGVycG9sYXRpb24pIGJhc2VkIG9uXG4vLyB0aGUgZm9sbG93aW5nIHBhcGVyOiBTdGVmZmVuLCBNLiAxOTkwLiBBIFNpbXBsZSBNZXRob2QgZm9yIE1vbm90b25pY1xuLy8gSW50ZXJwb2xhdGlvbiBpbiBPbmUgRGltZW5zaW9uLiBBc3Ryb25vbXkgYW5kIEFzdHJvcGh5c2ljcywgVm9sLiAyMzksIE5PLlxuLy8gTk9WKElJKSwgUC4gNDQzLCAxOTkwLlxuZnVuY3Rpb24gc2xvcGUzKHRoYXQsIHgyLCB5Mikge1xuICB2YXIgaDAgPSB0aGF0Ll94MSAtIHRoYXQuX3gwLFxuICAgICAgaDEgPSB4MiAtIHRoYXQuX3gxLFxuICAgICAgczAgPSAodGhhdC5feTEgLSB0aGF0Ll95MCkgLyAoaDAgfHwgaDEgPCAwICYmIC0wKSxcbiAgICAgIHMxID0gKHkyIC0gdGhhdC5feTEpIC8gKGgxIHx8IGgwIDwgMCAmJiAtMCksXG4gICAgICBwID0gKHMwICogaDEgKyBzMSAqIGgwKSAvIChoMCArIGgxKTtcbiAgcmV0dXJuIChzaWduJDEoczApICsgc2lnbiQxKHMxKSkgKiBNYXRoLm1pbihNYXRoLmFicyhzMCksIE1hdGguYWJzKHMxKSwgMC41ICogTWF0aC5hYnMocCkpIHx8IDA7XG59XG5cbi8vIENhbGN1bGF0ZSBhIG9uZS1zaWRlZCBzbG9wZS5cbmZ1bmN0aW9uIHNsb3BlMih0aGF0LCB0KSB7XG4gIHZhciBoID0gdGhhdC5feDEgLSB0aGF0Ll94MDtcbiAgcmV0dXJuIGggPyAoMyAqICh0aGF0Ll95MSAtIHRoYXQuX3kwKSAvIGggLSB0KSAvIDIgOiB0O1xufVxuXG4vLyBBY2NvcmRpbmcgdG8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3ViaWNfSGVybWl0ZV9zcGxpbmUjUmVwcmVzZW50YXRpb25zXG4vLyBcInlvdSBjYW4gZXhwcmVzcyBjdWJpYyBIZXJtaXRlIGludGVycG9sYXRpb24gaW4gdGVybXMgb2YgY3ViaWMgQsOpemllciBjdXJ2ZXNcbi8vIHdpdGggcmVzcGVjdCB0byB0aGUgZm91ciB2YWx1ZXMgcDAsIHAwICsgbTAgLyAzLCBwMSAtIG0xIC8gMywgcDFcIi5cbmZ1bmN0aW9uIHBvaW50JDUodGhhdCwgdDAsIHQxKSB7XG4gIHZhciB4MCA9IHRoYXQuX3gwLFxuICAgICAgeTAgPSB0aGF0Ll95MCxcbiAgICAgIHgxID0gdGhhdC5feDEsXG4gICAgICB5MSA9IHRoYXQuX3kxLFxuICAgICAgZHggPSAoeDEgLSB4MCkgLyAzO1xuICB0aGF0Ll9jb250ZXh0LmJlemllckN1cnZlVG8oeDAgKyBkeCwgeTAgKyBkeCAqIHQwLCB4MSAtIGR4LCB5MSAtIGR4ICogdDEsIHgxLCB5MSk7XG59XG5cbmZ1bmN0aW9uIE1vbm90b25lWChjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5Nb25vdG9uZVgucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPVxuICAgIHRoaXMuX3QwID0gTmFOO1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAyOiB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MSwgdGhpcy5feTEpOyBicmVhaztcbiAgICAgIGNhc2UgMzogcG9pbnQkNSh0aGlzLCB0aGlzLl90MCwgc2xvcGUyKHRoaXMsIHRoaXMuX3QwKSk7IGJyZWFrO1xuICAgIH1cbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHZhciB0MSA9IE5hTjtcblxuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIGlmICh4ID09PSB0aGlzLl94MSAmJiB5ID09PSB0aGlzLl95MSkgcmV0dXJuOyAvLyBJZ25vcmUgY29pbmNpZGVudCBwb2ludHMuXG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyBwb2ludCQ1KHRoaXMsIHNsb3BlMih0aGlzLCB0MSA9IHNsb3BlMyh0aGlzLCB4LCB5KSksIHQxKTsgYnJlYWs7XG4gICAgICBkZWZhdWx0OiBwb2ludCQ1KHRoaXMsIHRoaXMuX3QwLCB0MSA9IHNsb3BlMyh0aGlzLCB4LCB5KSk7IGJyZWFrO1xuICAgIH1cblxuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHk7XG4gICAgdGhpcy5fdDAgPSB0MTtcbiAgfVxufTtcblxuZnVuY3Rpb24gTW9ub3RvbmVZKGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IG5ldyBSZWZsZWN0Q29udGV4dChjb250ZXh0KTtcbn1cblxuKE1vbm90b25lWS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE1vbm90b25lWC5wcm90b3R5cGUpKS5wb2ludCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgTW9ub3RvbmVYLnByb3RvdHlwZS5wb2ludC5jYWxsKHRoaXMsIHksIHgpO1xufTtcblxuZnVuY3Rpb24gUmVmbGVjdENvbnRleHQoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuUmVmbGVjdENvbnRleHQucHJvdG90eXBlID0ge1xuICBtb3ZlVG86IGZ1bmN0aW9uKHgsIHkpIHsgdGhpcy5fY29udGV4dC5tb3ZlVG8oeSwgeCk7IH0sXG4gIGNsb3NlUGF0aDogZnVuY3Rpb24oKSB7IHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7IH0sXG4gIGxpbmVUbzogZnVuY3Rpb24oeCwgeSkgeyB0aGlzLl9jb250ZXh0LmxpbmVUbyh5LCB4KTsgfSxcbiAgYmV6aWVyQ3VydmVUbzogZnVuY3Rpb24oeDEsIHkxLCB4MiwgeTIsIHgsIHkpIHsgdGhpcy5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKHkxLCB4MSwgeTIsIHgyLCB5LCB4KTsgfVxufTtcblxuZnVuY3Rpb24gbW9ub3RvbmVYKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBNb25vdG9uZVgoY29udGV4dCk7XG59XG5cbmZ1bmN0aW9uIG1vbm90b25lWShjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgTW9ub3RvbmVZKGNvbnRleHQpO1xufVxuXG5mdW5jdGlvbiBOYXR1cmFsKGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cbk5hdHVyYWwucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3ggPSBbXTtcbiAgICB0aGlzLl95ID0gW107XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB4ID0gdGhpcy5feCxcbiAgICAgICAgeSA9IHRoaXMuX3ksXG4gICAgICAgIG4gPSB4Lmxlbmd0aDtcblxuICAgIGlmIChuKSB7XG4gICAgICB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeFswXSwgeVswXSkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4WzBdLCB5WzBdKTtcbiAgICAgIGlmIChuID09PSAyKSB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHhbMV0sIHlbMV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHB4ID0gY29udHJvbFBvaW50cyh4KSxcbiAgICAgICAgICAgIHB5ID0gY29udHJvbFBvaW50cyh5KTtcbiAgICAgICAgZm9yICh2YXIgaTAgPSAwLCBpMSA9IDE7IGkxIDwgbjsgKytpMCwgKytpMSkge1xuICAgICAgICAgIHRoaXMuX2NvbnRleHQuYmV6aWVyQ3VydmVUbyhweFswXVtpMF0sIHB5WzBdW2kwXSwgcHhbMV1baTBdLCBweVsxXVtpMF0sIHhbaTFdLCB5W2kxXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiBuID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gICAgdGhpcy5feCA9IHRoaXMuX3kgPSBudWxsO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHRoaXMuX3gucHVzaCgreCk7XG4gICAgdGhpcy5feS5wdXNoKCt5KTtcbiAgfVxufTtcblxuLy8gU2VlIGh0dHBzOi8vd3d3LnBhcnRpY2xlaW5jZWxsLmNvbS8yMDEyL2Jlemllci1zcGxpbmVzLyBmb3IgZGVyaXZhdGlvbi5cbmZ1bmN0aW9uIGNvbnRyb2xQb2ludHMoeCkge1xuICB2YXIgaSxcbiAgICAgIG4gPSB4Lmxlbmd0aCAtIDEsXG4gICAgICBtLFxuICAgICAgYSA9IG5ldyBBcnJheShuKSxcbiAgICAgIGIgPSBuZXcgQXJyYXkobiksXG4gICAgICByID0gbmV3IEFycmF5KG4pO1xuICBhWzBdID0gMCwgYlswXSA9IDIsIHJbMF0gPSB4WzBdICsgMiAqIHhbMV07XG4gIGZvciAoaSA9IDE7IGkgPCBuIC0gMTsgKytpKSBhW2ldID0gMSwgYltpXSA9IDQsIHJbaV0gPSA0ICogeFtpXSArIDIgKiB4W2kgKyAxXTtcbiAgYVtuIC0gMV0gPSAyLCBiW24gLSAxXSA9IDcsIHJbbiAtIDFdID0gOCAqIHhbbiAtIDFdICsgeFtuXTtcbiAgZm9yIChpID0gMTsgaSA8IG47ICsraSkgbSA9IGFbaV0gLyBiW2kgLSAxXSwgYltpXSAtPSBtLCByW2ldIC09IG0gKiByW2kgLSAxXTtcbiAgYVtuIC0gMV0gPSByW24gLSAxXSAvIGJbbiAtIDFdO1xuICBmb3IgKGkgPSBuIC0gMjsgaSA+PSAwOyAtLWkpIGFbaV0gPSAocltpXSAtIGFbaSArIDFdKSAvIGJbaV07XG4gIGJbbiAtIDFdID0gKHhbbl0gKyBhW24gLSAxXSkgLyAyO1xuICBmb3IgKGkgPSAwOyBpIDwgbiAtIDE7ICsraSkgYltpXSA9IDIgKiB4W2kgKyAxXSAtIGFbaSArIDFdO1xuICByZXR1cm4gW2EsIGJdO1xufVxuXG52YXIgbmF0dXJhbCA9IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBOYXR1cmFsKGNvbnRleHQpO1xufTtcblxuZnVuY3Rpb24gU3RlcChjb250ZXh0LCB0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLl90ID0gdDtcbn1cblxuU3RlcC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feCA9IHRoaXMuX3kgPSBOYU47XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAoMCA8IHRoaXMuX3QgJiYgdGhpcy5fdCA8IDEgJiYgdGhpcy5fcG9pbnQgPT09IDIpIHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gsIHRoaXMuX3kpO1xuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICBpZiAodGhpcy5fbGluZSA+PSAwKSB0aGlzLl90ID0gMSAtIHRoaXMuX3QsIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IC8vIHByb2NlZWRcbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgaWYgKHRoaXMuX3QgPD0gMCkge1xuICAgICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gsIHkpO1xuICAgICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciB4MSA9IHRoaXMuX3ggKiAoMSAtIHRoaXMuX3QpICsgeCAqIHRoaXMuX3Q7XG4gICAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8oeDEsIHRoaXMuX3kpO1xuICAgICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHgxLCB5KTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5feCA9IHgsIHRoaXMuX3kgPSB5O1xuICB9XG59O1xuXG52YXIgc3RlcCA9IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBTdGVwKGNvbnRleHQsIDAuNSk7XG59O1xuXG5mdW5jdGlvbiBzdGVwQmVmb3JlKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBTdGVwKGNvbnRleHQsIDApO1xufVxuXG5mdW5jdGlvbiBzdGVwQWZ0ZXIoY29udGV4dCkge1xuICByZXR1cm4gbmV3IFN0ZXAoY29udGV4dCwgMSk7XG59XG5cbnZhciBub25lJDEgPSBmdW5jdGlvbihzZXJpZXMsIG9yZGVyKSB7XG4gIGlmICghKChuID0gc2VyaWVzLmxlbmd0aCkgPiAxKSkgcmV0dXJuO1xuICBmb3IgKHZhciBpID0gMSwgaiwgczAsIHMxID0gc2VyaWVzW29yZGVyWzBdXSwgbiwgbSA9IHMxLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgIHMwID0gczEsIHMxID0gc2VyaWVzW29yZGVyW2ldXTtcbiAgICBmb3IgKGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgICBzMVtqXVsxXSArPSBzMVtqXVswXSA9IGlzTmFOKHMwW2pdWzFdKSA/IHMwW2pdWzBdIDogczBbal1bMV07XG4gICAgfVxuICB9XG59O1xuXG52YXIgbm9uZSQyID0gZnVuY3Rpb24oc2VyaWVzKSB7XG4gIHZhciBuID0gc2VyaWVzLmxlbmd0aCwgbyA9IG5ldyBBcnJheShuKTtcbiAgd2hpbGUgKC0tbiA+PSAwKSBvW25dID0gbjtcbiAgcmV0dXJuIG87XG59O1xuXG5mdW5jdGlvbiBzdGFja1ZhbHVlKGQsIGtleSkge1xuICByZXR1cm4gZFtrZXldO1xufVxuXG52YXIgc3RhY2sgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGtleXMgPSBjb25zdGFudCQxMChbXSksXG4gICAgICBvcmRlciA9IG5vbmUkMixcbiAgICAgIG9mZnNldCA9IG5vbmUkMSxcbiAgICAgIHZhbHVlID0gc3RhY2tWYWx1ZTtcblxuICBmdW5jdGlvbiBzdGFjayhkYXRhKSB7XG4gICAgdmFyIGt6ID0ga2V5cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICBpLFxuICAgICAgICBtID0gZGF0YS5sZW5ndGgsXG4gICAgICAgIG4gPSBrei5sZW5ndGgsXG4gICAgICAgIHN6ID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBvejtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGZvciAodmFyIGtpID0ga3pbaV0sIHNpID0gc3pbaV0gPSBuZXcgQXJyYXkobSksIGogPSAwLCBzaWo7IGogPCBtOyArK2opIHtcbiAgICAgICAgc2lbal0gPSBzaWogPSBbMCwgK3ZhbHVlKGRhdGFbal0sIGtpLCBqLCBkYXRhKV07XG4gICAgICAgIHNpai5kYXRhID0gZGF0YVtqXTtcbiAgICAgIH1cbiAgICAgIHNpLmtleSA9IGtpO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDAsIG96ID0gb3JkZXIoc3opOyBpIDwgbjsgKytpKSB7XG4gICAgICBzeltveltpXV0uaW5kZXggPSBpO1xuICAgIH1cblxuICAgIG9mZnNldChzeiwgb3opO1xuICAgIHJldHVybiBzejtcbiAgfVxuXG4gIHN0YWNrLmtleXMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoa2V5cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMTAoc2xpY2UkNi5jYWxsKF8pKSwgc3RhY2spIDoga2V5cztcbiAgfTtcblxuICBzdGFjay52YWx1ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh2YWx1ZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMTAoK18pLCBzdGFjaykgOiB2YWx1ZTtcbiAgfTtcblxuICBzdGFjay5vcmRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChvcmRlciA9IF8gPT0gbnVsbCA/IG5vbmUkMiA6IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMTAoc2xpY2UkNi5jYWxsKF8pKSwgc3RhY2spIDogb3JkZXI7XG4gIH07XG5cbiAgc3RhY2sub2Zmc2V0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG9mZnNldCA9IF8gPT0gbnVsbCA/IG5vbmUkMSA6IF8sIHN0YWNrKSA6IG9mZnNldDtcbiAgfTtcblxuICByZXR1cm4gc3RhY2s7XG59O1xuXG52YXIgZXhwYW5kID0gZnVuY3Rpb24oc2VyaWVzLCBvcmRlcikge1xuICBpZiAoISgobiA9IHNlcmllcy5sZW5ndGgpID4gMCkpIHJldHVybjtcbiAgZm9yICh2YXIgaSwgbiwgaiA9IDAsIG0gPSBzZXJpZXNbMF0ubGVuZ3RoLCB5OyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh5ID0gaSA9IDA7IGkgPCBuOyArK2kpIHkgKz0gc2VyaWVzW2ldW2pdWzFdIHx8IDA7XG4gICAgaWYgKHkpIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHNlcmllc1tpXVtqXVsxXSAvPSB5O1xuICB9XG4gIG5vbmUkMShzZXJpZXMsIG9yZGVyKTtcbn07XG5cbnZhciBkaXZlcmdpbmcgPSBmdW5jdGlvbihzZXJpZXMsIG9yZGVyKSB7XG4gIGlmICghKChuID0gc2VyaWVzLmxlbmd0aCkgPiAxKSkgcmV0dXJuO1xuICBmb3IgKHZhciBpLCBqID0gMCwgZCwgZHksIHlwLCB5biwgbiwgbSA9IHNlcmllc1tvcmRlclswXV0ubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh5cCA9IHluID0gMCwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgoZHkgPSAoZCA9IHNlcmllc1tvcmRlcltpXV1bal0pWzFdIC0gZFswXSkgPj0gMCkge1xuICAgICAgICBkWzBdID0geXAsIGRbMV0gPSB5cCArPSBkeTtcbiAgICAgIH0gZWxzZSBpZiAoZHkgPCAwKSB7XG4gICAgICAgIGRbMV0gPSB5biwgZFswXSA9IHluICs9IGR5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZFswXSA9IHlwO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxudmFyIHNpbGhvdWV0dGUgPSBmdW5jdGlvbihzZXJpZXMsIG9yZGVyKSB7XG4gIGlmICghKChuID0gc2VyaWVzLmxlbmd0aCkgPiAwKSkgcmV0dXJuO1xuICBmb3IgKHZhciBqID0gMCwgczAgPSBzZXJpZXNbb3JkZXJbMF1dLCBuLCBtID0gczAubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIHkgPSAwOyBpIDwgbjsgKytpKSB5ICs9IHNlcmllc1tpXVtqXVsxXSB8fCAwO1xuICAgIHMwW2pdWzFdICs9IHMwW2pdWzBdID0gLXkgLyAyO1xuICB9XG4gIG5vbmUkMShzZXJpZXMsIG9yZGVyKTtcbn07XG5cbnZhciB3aWdnbGUgPSBmdW5jdGlvbihzZXJpZXMsIG9yZGVyKSB7XG4gIGlmICghKChuID0gc2VyaWVzLmxlbmd0aCkgPiAwKSB8fCAhKChtID0gKHMwID0gc2VyaWVzW29yZGVyWzBdXSkubGVuZ3RoKSA+IDApKSByZXR1cm47XG4gIGZvciAodmFyIHkgPSAwLCBqID0gMSwgczAsIG0sIG47IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBpID0gMCwgczEgPSAwLCBzMiA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIHZhciBzaSA9IHNlcmllc1tvcmRlcltpXV0sXG4gICAgICAgICAgc2lqMCA9IHNpW2pdWzFdIHx8IDAsXG4gICAgICAgICAgc2lqMSA9IHNpW2ogLSAxXVsxXSB8fCAwLFxuICAgICAgICAgIHMzID0gKHNpajAgLSBzaWoxKSAvIDI7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IGk7ICsraykge1xuICAgICAgICB2YXIgc2sgPSBzZXJpZXNbb3JkZXJba11dLFxuICAgICAgICAgICAgc2tqMCA9IHNrW2pdWzFdIHx8IDAsXG4gICAgICAgICAgICBza2oxID0gc2tbaiAtIDFdWzFdIHx8IDA7XG4gICAgICAgIHMzICs9IHNrajAgLSBza2oxO1xuICAgICAgfVxuICAgICAgczEgKz0gc2lqMCwgczIgKz0gczMgKiBzaWowO1xuICAgIH1cbiAgICBzMFtqIC0gMV1bMV0gKz0gczBbaiAtIDFdWzBdID0geTtcbiAgICBpZiAoczEpIHkgLT0gczIgLyBzMTtcbiAgfVxuICBzMFtqIC0gMV1bMV0gKz0gczBbaiAtIDFdWzBdID0geTtcbiAgbm9uZSQxKHNlcmllcywgb3JkZXIpO1xufTtcblxudmFyIGFzY2VuZGluZyQyID0gZnVuY3Rpb24oc2VyaWVzKSB7XG4gIHZhciBzdW1zID0gc2VyaWVzLm1hcChzdW0kMik7XG4gIHJldHVybiBub25lJDIoc2VyaWVzKS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHsgcmV0dXJuIHN1bXNbYV0gLSBzdW1zW2JdOyB9KTtcbn07XG5cbmZ1bmN0aW9uIHN1bSQyKHNlcmllcykge1xuICB2YXIgcyA9IDAsIGkgPSAtMSwgbiA9IHNlcmllcy5sZW5ndGgsIHY7XG4gIHdoaWxlICgrK2kgPCBuKSBpZiAodiA9ICtzZXJpZXNbaV1bMV0pIHMgKz0gdjtcbiAgcmV0dXJuIHM7XG59XG5cbnZhciBkZXNjZW5kaW5nJDIgPSBmdW5jdGlvbihzZXJpZXMpIHtcbiAgcmV0dXJuIGFzY2VuZGluZyQyKHNlcmllcykucmV2ZXJzZSgpO1xufTtcblxudmFyIGluc2lkZU91dCA9IGZ1bmN0aW9uKHNlcmllcykge1xuICB2YXIgbiA9IHNlcmllcy5sZW5ndGgsXG4gICAgICBpLFxuICAgICAgaixcbiAgICAgIHN1bXMgPSBzZXJpZXMubWFwKHN1bSQyKSxcbiAgICAgIG9yZGVyID0gbm9uZSQyKHNlcmllcykuc29ydChmdW5jdGlvbihhLCBiKSB7IHJldHVybiBzdW1zW2JdIC0gc3Vtc1thXTsgfSksXG4gICAgICB0b3AgPSAwLFxuICAgICAgYm90dG9tID0gMCxcbiAgICAgIHRvcHMgPSBbXSxcbiAgICAgIGJvdHRvbXMgPSBbXTtcblxuICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgaiA9IG9yZGVyW2ldO1xuICAgIGlmICh0b3AgPCBib3R0b20pIHtcbiAgICAgIHRvcCArPSBzdW1zW2pdO1xuICAgICAgdG9wcy5wdXNoKGopO1xuICAgIH0gZWxzZSB7XG4gICAgICBib3R0b20gKz0gc3Vtc1tqXTtcbiAgICAgIGJvdHRvbXMucHVzaChqKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYm90dG9tcy5yZXZlcnNlKCkuY29uY2F0KHRvcHMpO1xufTtcblxudmFyIHJldmVyc2UgPSBmdW5jdGlvbihzZXJpZXMpIHtcbiAgcmV0dXJuIG5vbmUkMihzZXJpZXMpLnJldmVyc2UoKTtcbn07XG5cbnZhciBjb25zdGFudCQxMSA9IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufTtcblxuZnVuY3Rpb24geCQ0KGQpIHtcbiAgcmV0dXJuIGRbMF07XG59XG5cbmZ1bmN0aW9uIHkkNChkKSB7XG4gIHJldHVybiBkWzFdO1xufVxuXG5mdW5jdGlvbiBSZWRCbGFja1RyZWUoKSB7XG4gIHRoaXMuXyA9IG51bGw7IC8vIHJvb3Qgbm9kZVxufVxuXG5mdW5jdGlvbiBSZWRCbGFja05vZGUobm9kZSkge1xuICBub2RlLlUgPSAvLyBwYXJlbnQgbm9kZVxuICBub2RlLkMgPSAvLyBjb2xvciAtIHRydWUgZm9yIHJlZCwgZmFsc2UgZm9yIGJsYWNrXG4gIG5vZGUuTCA9IC8vIGxlZnQgbm9kZVxuICBub2RlLlIgPSAvLyByaWdodCBub2RlXG4gIG5vZGUuUCA9IC8vIHByZXZpb3VzIG5vZGVcbiAgbm9kZS5OID0gbnVsbDsgLy8gbmV4dCBub2RlXG59XG5cblJlZEJsYWNrVHJlZS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBSZWRCbGFja1RyZWUsXG5cbiAgaW5zZXJ0OiBmdW5jdGlvbihhZnRlciwgbm9kZSkge1xuICAgIHZhciBwYXJlbnQsIGdyYW5kcGEsIHVuY2xlO1xuXG4gICAgaWYgKGFmdGVyKSB7XG4gICAgICBub2RlLlAgPSBhZnRlcjtcbiAgICAgIG5vZGUuTiA9IGFmdGVyLk47XG4gICAgICBpZiAoYWZ0ZXIuTikgYWZ0ZXIuTi5QID0gbm9kZTtcbiAgICAgIGFmdGVyLk4gPSBub2RlO1xuICAgICAgaWYgKGFmdGVyLlIpIHtcbiAgICAgICAgYWZ0ZXIgPSBhZnRlci5SO1xuICAgICAgICB3aGlsZSAoYWZ0ZXIuTCkgYWZ0ZXIgPSBhZnRlci5MO1xuICAgICAgICBhZnRlci5MID0gbm9kZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFmdGVyLlIgPSBub2RlO1xuICAgICAgfVxuICAgICAgcGFyZW50ID0gYWZ0ZXI7XG4gICAgfSBlbHNlIGlmICh0aGlzLl8pIHtcbiAgICAgIGFmdGVyID0gUmVkQmxhY2tGaXJzdCh0aGlzLl8pO1xuICAgICAgbm9kZS5QID0gbnVsbDtcbiAgICAgIG5vZGUuTiA9IGFmdGVyO1xuICAgICAgYWZ0ZXIuUCA9IGFmdGVyLkwgPSBub2RlO1xuICAgICAgcGFyZW50ID0gYWZ0ZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGUuUCA9IG5vZGUuTiA9IG51bGw7XG4gICAgICB0aGlzLl8gPSBub2RlO1xuICAgICAgcGFyZW50ID0gbnVsbDtcbiAgICB9XG4gICAgbm9kZS5MID0gbm9kZS5SID0gbnVsbDtcbiAgICBub2RlLlUgPSBwYXJlbnQ7XG4gICAgbm9kZS5DID0gdHJ1ZTtcblxuICAgIGFmdGVyID0gbm9kZTtcbiAgICB3aGlsZSAocGFyZW50ICYmIHBhcmVudC5DKSB7XG4gICAgICBncmFuZHBhID0gcGFyZW50LlU7XG4gICAgICBpZiAocGFyZW50ID09PSBncmFuZHBhLkwpIHtcbiAgICAgICAgdW5jbGUgPSBncmFuZHBhLlI7XG4gICAgICAgIGlmICh1bmNsZSAmJiB1bmNsZS5DKSB7XG4gICAgICAgICAgcGFyZW50LkMgPSB1bmNsZS5DID0gZmFsc2U7XG4gICAgICAgICAgZ3JhbmRwYS5DID0gdHJ1ZTtcbiAgICAgICAgICBhZnRlciA9IGdyYW5kcGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGFmdGVyID09PSBwYXJlbnQuUikge1xuICAgICAgICAgICAgUmVkQmxhY2tSb3RhdGVMZWZ0KHRoaXMsIHBhcmVudCk7XG4gICAgICAgICAgICBhZnRlciA9IHBhcmVudDtcbiAgICAgICAgICAgIHBhcmVudCA9IGFmdGVyLlU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBhcmVudC5DID0gZmFsc2U7XG4gICAgICAgICAgZ3JhbmRwYS5DID0gdHJ1ZTtcbiAgICAgICAgICBSZWRCbGFja1JvdGF0ZVJpZ2h0KHRoaXMsIGdyYW5kcGEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1bmNsZSA9IGdyYW5kcGEuTDtcbiAgICAgICAgaWYgKHVuY2xlICYmIHVuY2xlLkMpIHtcbiAgICAgICAgICBwYXJlbnQuQyA9IHVuY2xlLkMgPSBmYWxzZTtcbiAgICAgICAgICBncmFuZHBhLkMgPSB0cnVlO1xuICAgICAgICAgIGFmdGVyID0gZ3JhbmRwYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoYWZ0ZXIgPT09IHBhcmVudC5MKSB7XG4gICAgICAgICAgICBSZWRCbGFja1JvdGF0ZVJpZ2h0KHRoaXMsIHBhcmVudCk7XG4gICAgICAgICAgICBhZnRlciA9IHBhcmVudDtcbiAgICAgICAgICAgIHBhcmVudCA9IGFmdGVyLlU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBhcmVudC5DID0gZmFsc2U7XG4gICAgICAgICAgZ3JhbmRwYS5DID0gdHJ1ZTtcbiAgICAgICAgICBSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgZ3JhbmRwYSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHBhcmVudCA9IGFmdGVyLlU7XG4gICAgfVxuICAgIHRoaXMuXy5DID0gZmFsc2U7XG4gIH0sXG5cbiAgcmVtb3ZlOiBmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKG5vZGUuTikgbm9kZS5OLlAgPSBub2RlLlA7XG4gICAgaWYgKG5vZGUuUCkgbm9kZS5QLk4gPSBub2RlLk47XG4gICAgbm9kZS5OID0gbm9kZS5QID0gbnVsbDtcblxuICAgIHZhciBwYXJlbnQgPSBub2RlLlUsXG4gICAgICAgIHNpYmxpbmcsXG4gICAgICAgIGxlZnQgPSBub2RlLkwsXG4gICAgICAgIHJpZ2h0ID0gbm9kZS5SLFxuICAgICAgICBuZXh0LFxuICAgICAgICByZWQ7XG5cbiAgICBpZiAoIWxlZnQpIG5leHQgPSByaWdodDtcbiAgICBlbHNlIGlmICghcmlnaHQpIG5leHQgPSBsZWZ0O1xuICAgIGVsc2UgbmV4dCA9IFJlZEJsYWNrRmlyc3QocmlnaHQpO1xuXG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgaWYgKHBhcmVudC5MID09PSBub2RlKSBwYXJlbnQuTCA9IG5leHQ7XG4gICAgICBlbHNlIHBhcmVudC5SID0gbmV4dDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fID0gbmV4dDtcbiAgICB9XG5cbiAgICBpZiAobGVmdCAmJiByaWdodCkge1xuICAgICAgcmVkID0gbmV4dC5DO1xuICAgICAgbmV4dC5DID0gbm9kZS5DO1xuICAgICAgbmV4dC5MID0gbGVmdDtcbiAgICAgIGxlZnQuVSA9IG5leHQ7XG4gICAgICBpZiAobmV4dCAhPT0gcmlnaHQpIHtcbiAgICAgICAgcGFyZW50ID0gbmV4dC5VO1xuICAgICAgICBuZXh0LlUgPSBub2RlLlU7XG4gICAgICAgIG5vZGUgPSBuZXh0LlI7XG4gICAgICAgIHBhcmVudC5MID0gbm9kZTtcbiAgICAgICAgbmV4dC5SID0gcmlnaHQ7XG4gICAgICAgIHJpZ2h0LlUgPSBuZXh0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dC5VID0gcGFyZW50O1xuICAgICAgICBwYXJlbnQgPSBuZXh0O1xuICAgICAgICBub2RlID0gbmV4dC5SO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZWQgPSBub2RlLkM7XG4gICAgICBub2RlID0gbmV4dDtcbiAgICB9XG5cbiAgICBpZiAobm9kZSkgbm9kZS5VID0gcGFyZW50O1xuICAgIGlmIChyZWQpIHJldHVybjtcbiAgICBpZiAobm9kZSAmJiBub2RlLkMpIHsgbm9kZS5DID0gZmFsc2U7IHJldHVybjsgfVxuXG4gICAgZG8ge1xuICAgICAgaWYgKG5vZGUgPT09IHRoaXMuXykgYnJlYWs7XG4gICAgICBpZiAobm9kZSA9PT0gcGFyZW50LkwpIHtcbiAgICAgICAgc2libGluZyA9IHBhcmVudC5SO1xuICAgICAgICBpZiAoc2libGluZy5DKSB7XG4gICAgICAgICAgc2libGluZy5DID0gZmFsc2U7XG4gICAgICAgICAgcGFyZW50LkMgPSB0cnVlO1xuICAgICAgICAgIFJlZEJsYWNrUm90YXRlTGVmdCh0aGlzLCBwYXJlbnQpO1xuICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuUjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHNpYmxpbmcuTCAmJiBzaWJsaW5nLkwuQylcbiAgICAgICAgICAgIHx8IChzaWJsaW5nLlIgJiYgc2libGluZy5SLkMpKSB7XG4gICAgICAgICAgaWYgKCFzaWJsaW5nLlIgfHwgIXNpYmxpbmcuUi5DKSB7XG4gICAgICAgICAgICBzaWJsaW5nLkwuQyA9IGZhbHNlO1xuICAgICAgICAgICAgc2libGluZy5DID0gdHJ1ZTtcbiAgICAgICAgICAgIFJlZEJsYWNrUm90YXRlUmlnaHQodGhpcywgc2libGluZyk7XG4gICAgICAgICAgICBzaWJsaW5nID0gcGFyZW50LlI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNpYmxpbmcuQyA9IHBhcmVudC5DO1xuICAgICAgICAgIHBhcmVudC5DID0gc2libGluZy5SLkMgPSBmYWxzZTtcbiAgICAgICAgICBSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgcGFyZW50KTtcbiAgICAgICAgICBub2RlID0gdGhpcy5fO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzaWJsaW5nID0gcGFyZW50Lkw7XG4gICAgICAgIGlmIChzaWJsaW5nLkMpIHtcbiAgICAgICAgICBzaWJsaW5nLkMgPSBmYWxzZTtcbiAgICAgICAgICBwYXJlbnQuQyA9IHRydWU7XG4gICAgICAgICAgUmVkQmxhY2tSb3RhdGVSaWdodCh0aGlzLCBwYXJlbnQpO1xuICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuTDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHNpYmxpbmcuTCAmJiBzaWJsaW5nLkwuQylcbiAgICAgICAgICB8fCAoc2libGluZy5SICYmIHNpYmxpbmcuUi5DKSkge1xuICAgICAgICAgIGlmICghc2libGluZy5MIHx8ICFzaWJsaW5nLkwuQykge1xuICAgICAgICAgICAgc2libGluZy5SLkMgPSBmYWxzZTtcbiAgICAgICAgICAgIHNpYmxpbmcuQyA9IHRydWU7XG4gICAgICAgICAgICBSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgc2libGluZyk7XG4gICAgICAgICAgICBzaWJsaW5nID0gcGFyZW50Lkw7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNpYmxpbmcuQyA9IHBhcmVudC5DO1xuICAgICAgICAgIHBhcmVudC5DID0gc2libGluZy5MLkMgPSBmYWxzZTtcbiAgICAgICAgICBSZWRCbGFja1JvdGF0ZVJpZ2h0KHRoaXMsIHBhcmVudCk7XG4gICAgICAgICAgbm9kZSA9IHRoaXMuXztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc2libGluZy5DID0gdHJ1ZTtcbiAgICAgIG5vZGUgPSBwYXJlbnQ7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQuVTtcbiAgICB9IHdoaWxlICghbm9kZS5DKTtcblxuICAgIGlmIChub2RlKSBub2RlLkMgPSBmYWxzZTtcbiAgfVxufTtcblxuZnVuY3Rpb24gUmVkQmxhY2tSb3RhdGVMZWZ0KHRyZWUsIG5vZGUpIHtcbiAgdmFyIHAgPSBub2RlLFxuICAgICAgcSA9IG5vZGUuUixcbiAgICAgIHBhcmVudCA9IHAuVTtcblxuICBpZiAocGFyZW50KSB7XG4gICAgaWYgKHBhcmVudC5MID09PSBwKSBwYXJlbnQuTCA9IHE7XG4gICAgZWxzZSBwYXJlbnQuUiA9IHE7XG4gIH0gZWxzZSB7XG4gICAgdHJlZS5fID0gcTtcbiAgfVxuXG4gIHEuVSA9IHBhcmVudDtcbiAgcC5VID0gcTtcbiAgcC5SID0gcS5MO1xuICBpZiAocC5SKSBwLlIuVSA9IHA7XG4gIHEuTCA9IHA7XG59XG5cbmZ1bmN0aW9uIFJlZEJsYWNrUm90YXRlUmlnaHQodHJlZSwgbm9kZSkge1xuICB2YXIgcCA9IG5vZGUsXG4gICAgICBxID0gbm9kZS5MLFxuICAgICAgcGFyZW50ID0gcC5VO1xuXG4gIGlmIChwYXJlbnQpIHtcbiAgICBpZiAocGFyZW50LkwgPT09IHApIHBhcmVudC5MID0gcTtcbiAgICBlbHNlIHBhcmVudC5SID0gcTtcbiAgfSBlbHNlIHtcbiAgICB0cmVlLl8gPSBxO1xuICB9XG5cbiAgcS5VID0gcGFyZW50O1xuICBwLlUgPSBxO1xuICBwLkwgPSBxLlI7XG4gIGlmIChwLkwpIHAuTC5VID0gcDtcbiAgcS5SID0gcDtcbn1cblxuZnVuY3Rpb24gUmVkQmxhY2tGaXJzdChub2RlKSB7XG4gIHdoaWxlIChub2RlLkwpIG5vZGUgPSBub2RlLkw7XG4gIHJldHVybiBub2RlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVFZGdlKGxlZnQsIHJpZ2h0LCB2MCwgdjEpIHtcbiAgdmFyIGVkZ2UgPSBbbnVsbCwgbnVsbF0sXG4gICAgICBpbmRleCA9IGVkZ2VzLnB1c2goZWRnZSkgLSAxO1xuICBlZGdlLmxlZnQgPSBsZWZ0O1xuICBlZGdlLnJpZ2h0ID0gcmlnaHQ7XG4gIGlmICh2MCkgc2V0RWRnZUVuZChlZGdlLCBsZWZ0LCByaWdodCwgdjApO1xuICBpZiAodjEpIHNldEVkZ2VFbmQoZWRnZSwgcmlnaHQsIGxlZnQsIHYxKTtcbiAgY2VsbHNbbGVmdC5pbmRleF0uaGFsZmVkZ2VzLnB1c2goaW5kZXgpO1xuICBjZWxsc1tyaWdodC5pbmRleF0uaGFsZmVkZ2VzLnB1c2goaW5kZXgpO1xuICByZXR1cm4gZWRnZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQm9yZGVyRWRnZShsZWZ0LCB2MCwgdjEpIHtcbiAgdmFyIGVkZ2UgPSBbdjAsIHYxXTtcbiAgZWRnZS5sZWZ0ID0gbGVmdDtcbiAgcmV0dXJuIGVkZ2U7XG59XG5cbmZ1bmN0aW9uIHNldEVkZ2VFbmQoZWRnZSwgbGVmdCwgcmlnaHQsIHZlcnRleCkge1xuICBpZiAoIWVkZ2VbMF0gJiYgIWVkZ2VbMV0pIHtcbiAgICBlZGdlWzBdID0gdmVydGV4O1xuICAgIGVkZ2UubGVmdCA9IGxlZnQ7XG4gICAgZWRnZS5yaWdodCA9IHJpZ2h0O1xuICB9IGVsc2UgaWYgKGVkZ2UubGVmdCA9PT0gcmlnaHQpIHtcbiAgICBlZGdlWzFdID0gdmVydGV4O1xuICB9IGVsc2Uge1xuICAgIGVkZ2VbMF0gPSB2ZXJ0ZXg7XG4gIH1cbn1cblxuLy8gTGlhbmfigJNCYXJza3kgbGluZSBjbGlwcGluZy5cbmZ1bmN0aW9uIGNsaXBFZGdlKGVkZ2UsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciBhID0gZWRnZVswXSxcbiAgICAgIGIgPSBlZGdlWzFdLFxuICAgICAgYXggPSBhWzBdLFxuICAgICAgYXkgPSBhWzFdLFxuICAgICAgYnggPSBiWzBdLFxuICAgICAgYnkgPSBiWzFdLFxuICAgICAgdDAgPSAwLFxuICAgICAgdDEgPSAxLFxuICAgICAgZHggPSBieCAtIGF4LFxuICAgICAgZHkgPSBieSAtIGF5LFxuICAgICAgcjtcblxuICByID0geDAgLSBheDtcbiAgaWYgKCFkeCAmJiByID4gMCkgcmV0dXJuO1xuICByIC89IGR4O1xuICBpZiAoZHggPCAwKSB7XG4gICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xuICAgIGlmIChyIDwgdDEpIHQxID0gcjtcbiAgfSBlbHNlIGlmIChkeCA+IDApIHtcbiAgICBpZiAociA+IHQxKSByZXR1cm47XG4gICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuICB9XG5cbiAgciA9IHgxIC0gYXg7XG4gIGlmICghZHggJiYgciA8IDApIHJldHVybjtcbiAgciAvPSBkeDtcbiAgaWYgKGR4IDwgMCkge1xuICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gIH0gZWxzZSBpZiAoZHggPiAwKSB7XG4gICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xuICAgIGlmIChyIDwgdDEpIHQxID0gcjtcbiAgfVxuXG4gIHIgPSB5MCAtIGF5O1xuICBpZiAoIWR5ICYmIHIgPiAwKSByZXR1cm47XG4gIHIgLz0gZHk7XG4gIGlmIChkeSA8IDApIHtcbiAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICB9IGVsc2UgaWYgKGR5ID4gMCkge1xuICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gIH1cblxuICByID0geTEgLSBheTtcbiAgaWYgKCFkeSAmJiByIDwgMCkgcmV0dXJuO1xuICByIC89IGR5O1xuICBpZiAoZHkgPCAwKSB7XG4gICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgfSBlbHNlIGlmIChkeSA+IDApIHtcbiAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICB9XG5cbiAgaWYgKCEodDAgPiAwKSAmJiAhKHQxIDwgMSkpIHJldHVybiB0cnVlOyAvLyBUT0RPIEJldHRlciBjaGVjaz9cblxuICBpZiAodDAgPiAwKSBlZGdlWzBdID0gW2F4ICsgdDAgKiBkeCwgYXkgKyB0MCAqIGR5XTtcbiAgaWYgKHQxIDwgMSkgZWRnZVsxXSA9IFtheCArIHQxICogZHgsIGF5ICsgdDEgKiBkeV07XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBjb25uZWN0RWRnZShlZGdlLCB4MCwgeTAsIHgxLCB5MSkge1xuICB2YXIgdjEgPSBlZGdlWzFdO1xuICBpZiAodjEpIHJldHVybiB0cnVlO1xuXG4gIHZhciB2MCA9IGVkZ2VbMF0sXG4gICAgICBsZWZ0ID0gZWRnZS5sZWZ0LFxuICAgICAgcmlnaHQgPSBlZGdlLnJpZ2h0LFxuICAgICAgbHggPSBsZWZ0WzBdLFxuICAgICAgbHkgPSBsZWZ0WzFdLFxuICAgICAgcnggPSByaWdodFswXSxcbiAgICAgIHJ5ID0gcmlnaHRbMV0sXG4gICAgICBmeCA9IChseCArIHJ4KSAvIDIsXG4gICAgICBmeSA9IChseSArIHJ5KSAvIDIsXG4gICAgICBmbSxcbiAgICAgIGZiO1xuXG4gIGlmIChyeSA9PT0gbHkpIHtcbiAgICBpZiAoZnggPCB4MCB8fCBmeCA+PSB4MSkgcmV0dXJuO1xuICAgIGlmIChseCA+IHJ4KSB7XG4gICAgICBpZiAoIXYwKSB2MCA9IFtmeCwgeTBdO1xuICAgICAgZWxzZSBpZiAodjBbMV0gPj0geTEpIHJldHVybjtcbiAgICAgIHYxID0gW2Z4LCB5MV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghdjApIHYwID0gW2Z4LCB5MV07XG4gICAgICBlbHNlIGlmICh2MFsxXSA8IHkwKSByZXR1cm47XG4gICAgICB2MSA9IFtmeCwgeTBdO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmbSA9IChseCAtIHJ4KSAvIChyeSAtIGx5KTtcbiAgICBmYiA9IGZ5IC0gZm0gKiBmeDtcbiAgICBpZiAoZm0gPCAtMSB8fCBmbSA+IDEpIHtcbiAgICAgIGlmIChseCA+IHJ4KSB7XG4gICAgICAgIGlmICghdjApIHYwID0gWyh5MCAtIGZiKSAvIGZtLCB5MF07XG4gICAgICAgIGVsc2UgaWYgKHYwWzFdID49IHkxKSByZXR1cm47XG4gICAgICAgIHYxID0gWyh5MSAtIGZiKSAvIGZtLCB5MV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIXYwKSB2MCA9IFsoeTEgLSBmYikgLyBmbSwgeTFdO1xuICAgICAgICBlbHNlIGlmICh2MFsxXSA8IHkwKSByZXR1cm47XG4gICAgICAgIHYxID0gWyh5MCAtIGZiKSAvIGZtLCB5MF07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChseSA8IHJ5KSB7XG4gICAgICAgIGlmICghdjApIHYwID0gW3gwLCBmbSAqIHgwICsgZmJdO1xuICAgICAgICBlbHNlIGlmICh2MFswXSA+PSB4MSkgcmV0dXJuO1xuICAgICAgICB2MSA9IFt4MSwgZm0gKiB4MSArIGZiXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghdjApIHYwID0gW3gxLCBmbSAqIHgxICsgZmJdO1xuICAgICAgICBlbHNlIGlmICh2MFswXSA8IHgwKSByZXR1cm47XG4gICAgICAgIHYxID0gW3gwLCBmbSAqIHgwICsgZmJdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGVkZ2VbMF0gPSB2MDtcbiAgZWRnZVsxXSA9IHYxO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gY2xpcEVkZ2VzKHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciBpID0gZWRnZXMubGVuZ3RoLFxuICAgICAgZWRnZTtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgaWYgKCFjb25uZWN0RWRnZShlZGdlID0gZWRnZXNbaV0sIHgwLCB5MCwgeDEsIHkxKVxuICAgICAgICB8fCAhY2xpcEVkZ2UoZWRnZSwgeDAsIHkwLCB4MSwgeTEpXG4gICAgICAgIHx8ICEoTWF0aC5hYnMoZWRnZVswXVswXSAtIGVkZ2VbMV1bMF0pID4gZXBzaWxvbiQ0XG4gICAgICAgICAgICB8fCBNYXRoLmFicyhlZGdlWzBdWzFdIC0gZWRnZVsxXVsxXSkgPiBlcHNpbG9uJDQpKSB7XG4gICAgICBkZWxldGUgZWRnZXNbaV07XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNlbGwoc2l0ZSkge1xuICByZXR1cm4gY2VsbHNbc2l0ZS5pbmRleF0gPSB7XG4gICAgc2l0ZTogc2l0ZSxcbiAgICBoYWxmZWRnZXM6IFtdXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNlbGxIYWxmZWRnZUFuZ2xlKGNlbGwsIGVkZ2UpIHtcbiAgdmFyIHNpdGUgPSBjZWxsLnNpdGUsXG4gICAgICB2YSA9IGVkZ2UubGVmdCxcbiAgICAgIHZiID0gZWRnZS5yaWdodDtcbiAgaWYgKHNpdGUgPT09IHZiKSB2YiA9IHZhLCB2YSA9IHNpdGU7XG4gIGlmICh2YikgcmV0dXJuIE1hdGguYXRhbjIodmJbMV0gLSB2YVsxXSwgdmJbMF0gLSB2YVswXSk7XG4gIGlmIChzaXRlID09PSB2YSkgdmEgPSBlZGdlWzFdLCB2YiA9IGVkZ2VbMF07XG4gIGVsc2UgdmEgPSBlZGdlWzBdLCB2YiA9IGVkZ2VbMV07XG4gIHJldHVybiBNYXRoLmF0YW4yKHZhWzBdIC0gdmJbMF0sIHZiWzFdIC0gdmFbMV0pO1xufVxuXG5mdW5jdGlvbiBjZWxsSGFsZmVkZ2VTdGFydChjZWxsLCBlZGdlKSB7XG4gIHJldHVybiBlZGdlWysoZWRnZS5sZWZ0ICE9PSBjZWxsLnNpdGUpXTtcbn1cblxuZnVuY3Rpb24gY2VsbEhhbGZlZGdlRW5kKGNlbGwsIGVkZ2UpIHtcbiAgcmV0dXJuIGVkZ2VbKyhlZGdlLmxlZnQgPT09IGNlbGwuc2l0ZSldO1xufVxuXG5mdW5jdGlvbiBzb3J0Q2VsbEhhbGZlZGdlcygpIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSBjZWxscy5sZW5ndGgsIGNlbGwsIGhhbGZlZGdlcywgaiwgbTsgaSA8IG47ICsraSkge1xuICAgIGlmICgoY2VsbCA9IGNlbGxzW2ldKSAmJiAobSA9IChoYWxmZWRnZXMgPSBjZWxsLmhhbGZlZGdlcykubGVuZ3RoKSkge1xuICAgICAgdmFyIGluZGV4ID0gbmV3IEFycmF5KG0pLFxuICAgICAgICAgIGFycmF5ID0gbmV3IEFycmF5KG0pO1xuICAgICAgZm9yIChqID0gMDsgaiA8IG07ICsraikgaW5kZXhbal0gPSBqLCBhcnJheVtqXSA9IGNlbGxIYWxmZWRnZUFuZ2xlKGNlbGwsIGVkZ2VzW2hhbGZlZGdlc1tqXV0pO1xuICAgICAgaW5kZXguc29ydChmdW5jdGlvbihpLCBqKSB7IHJldHVybiBhcnJheVtqXSAtIGFycmF5W2ldOyB9KTtcbiAgICAgIGZvciAoaiA9IDA7IGogPCBtOyArK2opIGFycmF5W2pdID0gaGFsZmVkZ2VzW2luZGV4W2pdXTtcbiAgICAgIGZvciAoaiA9IDA7IGogPCBtOyArK2opIGhhbGZlZGdlc1tqXSA9IGFycmF5W2pdO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjbGlwQ2VsbHMoeDAsIHkwLCB4MSwgeTEpIHtcbiAgdmFyIG5DZWxscyA9IGNlbGxzLmxlbmd0aCxcbiAgICAgIGlDZWxsLFxuICAgICAgY2VsbCxcbiAgICAgIHNpdGUsXG4gICAgICBpSGFsZmVkZ2UsXG4gICAgICBoYWxmZWRnZXMsXG4gICAgICBuSGFsZmVkZ2VzLFxuICAgICAgc3RhcnQsXG4gICAgICBzdGFydFgsXG4gICAgICBzdGFydFksXG4gICAgICBlbmQsXG4gICAgICBlbmRYLFxuICAgICAgZW5kWSxcbiAgICAgIGNvdmVyID0gdHJ1ZTtcblxuICBmb3IgKGlDZWxsID0gMDsgaUNlbGwgPCBuQ2VsbHM7ICsraUNlbGwpIHtcbiAgICBpZiAoY2VsbCA9IGNlbGxzW2lDZWxsXSkge1xuICAgICAgc2l0ZSA9IGNlbGwuc2l0ZTtcbiAgICAgIGhhbGZlZGdlcyA9IGNlbGwuaGFsZmVkZ2VzO1xuICAgICAgaUhhbGZlZGdlID0gaGFsZmVkZ2VzLmxlbmd0aDtcblxuICAgICAgLy8gUmVtb3ZlIGFueSBkYW5nbGluZyBjbGlwcGVkIGVkZ2VzLlxuICAgICAgd2hpbGUgKGlIYWxmZWRnZS0tKSB7XG4gICAgICAgIGlmICghZWRnZXNbaGFsZmVkZ2VzW2lIYWxmZWRnZV1dKSB7XG4gICAgICAgICAgaGFsZmVkZ2VzLnNwbGljZShpSGFsZmVkZ2UsIDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEluc2VydCBhbnkgYm9yZGVyIGVkZ2VzIGFzIG5lY2Vzc2FyeS5cbiAgICAgIGlIYWxmZWRnZSA9IDAsIG5IYWxmZWRnZXMgPSBoYWxmZWRnZXMubGVuZ3RoO1xuICAgICAgd2hpbGUgKGlIYWxmZWRnZSA8IG5IYWxmZWRnZXMpIHtcbiAgICAgICAgZW5kID0gY2VsbEhhbGZlZGdlRW5kKGNlbGwsIGVkZ2VzW2hhbGZlZGdlc1tpSGFsZmVkZ2VdXSksIGVuZFggPSBlbmRbMF0sIGVuZFkgPSBlbmRbMV07XG4gICAgICAgIHN0YXJ0ID0gY2VsbEhhbGZlZGdlU3RhcnQoY2VsbCwgZWRnZXNbaGFsZmVkZ2VzWysraUhhbGZlZGdlICUgbkhhbGZlZGdlc11dKSwgc3RhcnRYID0gc3RhcnRbMF0sIHN0YXJ0WSA9IHN0YXJ0WzFdO1xuICAgICAgICBpZiAoTWF0aC5hYnMoZW5kWCAtIHN0YXJ0WCkgPiBlcHNpbG9uJDQgfHwgTWF0aC5hYnMoZW5kWSAtIHN0YXJ0WSkgPiBlcHNpbG9uJDQpIHtcbiAgICAgICAgICBoYWxmZWRnZXMuc3BsaWNlKGlIYWxmZWRnZSwgMCwgZWRnZXMucHVzaChjcmVhdGVCb3JkZXJFZGdlKHNpdGUsIGVuZCxcbiAgICAgICAgICAgICAgTWF0aC5hYnMoZW5kWCAtIHgwKSA8IGVwc2lsb24kNCAmJiB5MSAtIGVuZFkgPiBlcHNpbG9uJDQgPyBbeDAsIE1hdGguYWJzKHN0YXJ0WCAtIHgwKSA8IGVwc2lsb24kNCA/IHN0YXJ0WSA6IHkxXVxuICAgICAgICAgICAgICA6IE1hdGguYWJzKGVuZFkgLSB5MSkgPCBlcHNpbG9uJDQgJiYgeDEgLSBlbmRYID4gZXBzaWxvbiQ0ID8gW01hdGguYWJzKHN0YXJ0WSAtIHkxKSA8IGVwc2lsb24kNCA/IHN0YXJ0WCA6IHgxLCB5MV1cbiAgICAgICAgICAgICAgOiBNYXRoLmFicyhlbmRYIC0geDEpIDwgZXBzaWxvbiQ0ICYmIGVuZFkgLSB5MCA+IGVwc2lsb24kNCA/IFt4MSwgTWF0aC5hYnMoc3RhcnRYIC0geDEpIDwgZXBzaWxvbiQ0ID8gc3RhcnRZIDogeTBdXG4gICAgICAgICAgICAgIDogTWF0aC5hYnMoZW5kWSAtIHkwKSA8IGVwc2lsb24kNCAmJiBlbmRYIC0geDAgPiBlcHNpbG9uJDQgPyBbTWF0aC5hYnMoc3RhcnRZIC0geTApIDwgZXBzaWxvbiQ0ID8gc3RhcnRYIDogeDAsIHkwXVxuICAgICAgICAgICAgICA6IG51bGwpKSAtIDEpO1xuICAgICAgICAgICsrbkhhbGZlZGdlcztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobkhhbGZlZGdlcykgY292ZXIgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICAvLyBJZiB0aGVyZSB3ZXJlbuKAmXQgYW55IGVkZ2VzLCBoYXZlIHRoZSBjbG9zZXN0IHNpdGUgY292ZXIgdGhlIGV4dGVudC5cbiAgLy8gSXQgZG9lc27igJl0IG1hdHRlciB3aGljaCBjb3JuZXIgb2YgdGhlIGV4dGVudCB3ZSBtZWFzdXJlIVxuICBpZiAoY292ZXIpIHtcbiAgICB2YXIgZHgsIGR5LCBkMiwgZGMgPSBJbmZpbml0eTtcblxuICAgIGZvciAoaUNlbGwgPSAwLCBjb3ZlciA9IG51bGw7IGlDZWxsIDwgbkNlbGxzOyArK2lDZWxsKSB7XG4gICAgICBpZiAoY2VsbCA9IGNlbGxzW2lDZWxsXSkge1xuICAgICAgICBzaXRlID0gY2VsbC5zaXRlO1xuICAgICAgICBkeCA9IHNpdGVbMF0gLSB4MDtcbiAgICAgICAgZHkgPSBzaXRlWzFdIC0geTA7XG4gICAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICAgIGlmIChkMiA8IGRjKSBkYyA9IGQyLCBjb3ZlciA9IGNlbGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvdmVyKSB7XG4gICAgICB2YXIgdjAwID0gW3gwLCB5MF0sIHYwMSA9IFt4MCwgeTFdLCB2MTEgPSBbeDEsIHkxXSwgdjEwID0gW3gxLCB5MF07XG4gICAgICBjb3Zlci5oYWxmZWRnZXMucHVzaChcbiAgICAgICAgZWRnZXMucHVzaChjcmVhdGVCb3JkZXJFZGdlKHNpdGUgPSBjb3Zlci5zaXRlLCB2MDAsIHYwMSkpIC0gMSxcbiAgICAgICAgZWRnZXMucHVzaChjcmVhdGVCb3JkZXJFZGdlKHNpdGUsIHYwMSwgdjExKSkgLSAxLFxuICAgICAgICBlZGdlcy5wdXNoKGNyZWF0ZUJvcmRlckVkZ2Uoc2l0ZSwgdjExLCB2MTApKSAtIDEsXG4gICAgICAgIGVkZ2VzLnB1c2goY3JlYXRlQm9yZGVyRWRnZShzaXRlLCB2MTAsIHYwMCkpIC0gMVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvLyBMYXN0bHkgZGVsZXRlIGFueSBjZWxscyB3aXRoIG5vIGVkZ2VzOyB0aGVzZSB3ZXJlIGVudGlyZWx5IGNsaXBwZWQuXG4gIGZvciAoaUNlbGwgPSAwOyBpQ2VsbCA8IG5DZWxsczsgKytpQ2VsbCkge1xuICAgIGlmIChjZWxsID0gY2VsbHNbaUNlbGxdKSB7XG4gICAgICBpZiAoIWNlbGwuaGFsZmVkZ2VzLmxlbmd0aCkge1xuICAgICAgICBkZWxldGUgY2VsbHNbaUNlbGxdO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG52YXIgY2lyY2xlUG9vbCA9IFtdO1xuXG52YXIgZmlyc3RDaXJjbGU7XG5cbmZ1bmN0aW9uIENpcmNsZSgpIHtcbiAgUmVkQmxhY2tOb2RlKHRoaXMpO1xuICB0aGlzLnggPVxuICB0aGlzLnkgPVxuICB0aGlzLmFyYyA9XG4gIHRoaXMuc2l0ZSA9XG4gIHRoaXMuY3kgPSBudWxsO1xufVxuXG5mdW5jdGlvbiBhdHRhY2hDaXJjbGUoYXJjKSB7XG4gIHZhciBsQXJjID0gYXJjLlAsXG4gICAgICByQXJjID0gYXJjLk47XG5cbiAgaWYgKCFsQXJjIHx8ICFyQXJjKSByZXR1cm47XG5cbiAgdmFyIGxTaXRlID0gbEFyYy5zaXRlLFxuICAgICAgY1NpdGUgPSBhcmMuc2l0ZSxcbiAgICAgIHJTaXRlID0gckFyYy5zaXRlO1xuXG4gIGlmIChsU2l0ZSA9PT0gclNpdGUpIHJldHVybjtcblxuICB2YXIgYnggPSBjU2l0ZVswXSxcbiAgICAgIGJ5ID0gY1NpdGVbMV0sXG4gICAgICBheCA9IGxTaXRlWzBdIC0gYngsXG4gICAgICBheSA9IGxTaXRlWzFdIC0gYnksXG4gICAgICBjeCA9IHJTaXRlWzBdIC0gYngsXG4gICAgICBjeSA9IHJTaXRlWzFdIC0gYnk7XG5cbiAgdmFyIGQgPSAyICogKGF4ICogY3kgLSBheSAqIGN4KTtcbiAgaWYgKGQgPj0gLWVwc2lsb24yJDIpIHJldHVybjtcblxuICB2YXIgaGEgPSBheCAqIGF4ICsgYXkgKiBheSxcbiAgICAgIGhjID0gY3ggKiBjeCArIGN5ICogY3ksXG4gICAgICB4ID0gKGN5ICogaGEgLSBheSAqIGhjKSAvIGQsXG4gICAgICB5ID0gKGF4ICogaGMgLSBjeCAqIGhhKSAvIGQ7XG5cbiAgdmFyIGNpcmNsZSA9IGNpcmNsZVBvb2wucG9wKCkgfHwgbmV3IENpcmNsZTtcbiAgY2lyY2xlLmFyYyA9IGFyYztcbiAgY2lyY2xlLnNpdGUgPSBjU2l0ZTtcbiAgY2lyY2xlLnggPSB4ICsgYng7XG4gIGNpcmNsZS55ID0gKGNpcmNsZS5jeSA9IHkgKyBieSkgKyBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSk7IC8vIHkgYm90dG9tXG5cbiAgYXJjLmNpcmNsZSA9IGNpcmNsZTtcblxuICB2YXIgYmVmb3JlID0gbnVsbCxcbiAgICAgIG5vZGUgPSBjaXJjbGVzLl87XG5cbiAgd2hpbGUgKG5vZGUpIHtcbiAgICBpZiAoY2lyY2xlLnkgPCBub2RlLnkgfHwgKGNpcmNsZS55ID09PSBub2RlLnkgJiYgY2lyY2xlLnggPD0gbm9kZS54KSkge1xuICAgICAgaWYgKG5vZGUuTCkgbm9kZSA9IG5vZGUuTDtcbiAgICAgIGVsc2UgeyBiZWZvcmUgPSBub2RlLlA7IGJyZWFrOyB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChub2RlLlIpIG5vZGUgPSBub2RlLlI7XG4gICAgICBlbHNlIHsgYmVmb3JlID0gbm9kZTsgYnJlYWs7IH1cbiAgICB9XG4gIH1cblxuICBjaXJjbGVzLmluc2VydChiZWZvcmUsIGNpcmNsZSk7XG4gIGlmICghYmVmb3JlKSBmaXJzdENpcmNsZSA9IGNpcmNsZTtcbn1cblxuZnVuY3Rpb24gZGV0YWNoQ2lyY2xlKGFyYykge1xuICB2YXIgY2lyY2xlID0gYXJjLmNpcmNsZTtcbiAgaWYgKGNpcmNsZSkge1xuICAgIGlmICghY2lyY2xlLlApIGZpcnN0Q2lyY2xlID0gY2lyY2xlLk47XG4gICAgY2lyY2xlcy5yZW1vdmUoY2lyY2xlKTtcbiAgICBjaXJjbGVQb29sLnB1c2goY2lyY2xlKTtcbiAgICBSZWRCbGFja05vZGUoY2lyY2xlKTtcbiAgICBhcmMuY2lyY2xlID0gbnVsbDtcbiAgfVxufVxuXG52YXIgYmVhY2hQb29sID0gW107XG5cbmZ1bmN0aW9uIEJlYWNoKCkge1xuICBSZWRCbGFja05vZGUodGhpcyk7XG4gIHRoaXMuZWRnZSA9XG4gIHRoaXMuc2l0ZSA9XG4gIHRoaXMuY2lyY2xlID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQmVhY2goc2l0ZSkge1xuICB2YXIgYmVhY2ggPSBiZWFjaFBvb2wucG9wKCkgfHwgbmV3IEJlYWNoO1xuICBiZWFjaC5zaXRlID0gc2l0ZTtcbiAgcmV0dXJuIGJlYWNoO1xufVxuXG5mdW5jdGlvbiBkZXRhY2hCZWFjaChiZWFjaCkge1xuICBkZXRhY2hDaXJjbGUoYmVhY2gpO1xuICBiZWFjaGVzLnJlbW92ZShiZWFjaCk7XG4gIGJlYWNoUG9vbC5wdXNoKGJlYWNoKTtcbiAgUmVkQmxhY2tOb2RlKGJlYWNoKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQmVhY2goYmVhY2gpIHtcbiAgdmFyIGNpcmNsZSA9IGJlYWNoLmNpcmNsZSxcbiAgICAgIHggPSBjaXJjbGUueCxcbiAgICAgIHkgPSBjaXJjbGUuY3ksXG4gICAgICB2ZXJ0ZXggPSBbeCwgeV0sXG4gICAgICBwcmV2aW91cyA9IGJlYWNoLlAsXG4gICAgICBuZXh0ID0gYmVhY2guTixcbiAgICAgIGRpc2FwcGVhcmluZyA9IFtiZWFjaF07XG5cbiAgZGV0YWNoQmVhY2goYmVhY2gpO1xuXG4gIHZhciBsQXJjID0gcHJldmlvdXM7XG4gIHdoaWxlIChsQXJjLmNpcmNsZVxuICAgICAgJiYgTWF0aC5hYnMoeCAtIGxBcmMuY2lyY2xlLngpIDwgZXBzaWxvbiQ0XG4gICAgICAmJiBNYXRoLmFicyh5IC0gbEFyYy5jaXJjbGUuY3kpIDwgZXBzaWxvbiQ0KSB7XG4gICAgcHJldmlvdXMgPSBsQXJjLlA7XG4gICAgZGlzYXBwZWFyaW5nLnVuc2hpZnQobEFyYyk7XG4gICAgZGV0YWNoQmVhY2gobEFyYyk7XG4gICAgbEFyYyA9IHByZXZpb3VzO1xuICB9XG5cbiAgZGlzYXBwZWFyaW5nLnVuc2hpZnQobEFyYyk7XG4gIGRldGFjaENpcmNsZShsQXJjKTtcblxuICB2YXIgckFyYyA9IG5leHQ7XG4gIHdoaWxlIChyQXJjLmNpcmNsZVxuICAgICAgJiYgTWF0aC5hYnMoeCAtIHJBcmMuY2lyY2xlLngpIDwgZXBzaWxvbiQ0XG4gICAgICAmJiBNYXRoLmFicyh5IC0gckFyYy5jaXJjbGUuY3kpIDwgZXBzaWxvbiQ0KSB7XG4gICAgbmV4dCA9IHJBcmMuTjtcbiAgICBkaXNhcHBlYXJpbmcucHVzaChyQXJjKTtcbiAgICBkZXRhY2hCZWFjaChyQXJjKTtcbiAgICByQXJjID0gbmV4dDtcbiAgfVxuXG4gIGRpc2FwcGVhcmluZy5wdXNoKHJBcmMpO1xuICBkZXRhY2hDaXJjbGUockFyYyk7XG5cbiAgdmFyIG5BcmNzID0gZGlzYXBwZWFyaW5nLmxlbmd0aCxcbiAgICAgIGlBcmM7XG4gIGZvciAoaUFyYyA9IDE7IGlBcmMgPCBuQXJjczsgKytpQXJjKSB7XG4gICAgckFyYyA9IGRpc2FwcGVhcmluZ1tpQXJjXTtcbiAgICBsQXJjID0gZGlzYXBwZWFyaW5nW2lBcmMgLSAxXTtcbiAgICBzZXRFZGdlRW5kKHJBcmMuZWRnZSwgbEFyYy5zaXRlLCByQXJjLnNpdGUsIHZlcnRleCk7XG4gIH1cblxuICBsQXJjID0gZGlzYXBwZWFyaW5nWzBdO1xuICByQXJjID0gZGlzYXBwZWFyaW5nW25BcmNzIC0gMV07XG4gIHJBcmMuZWRnZSA9IGNyZWF0ZUVkZ2UobEFyYy5zaXRlLCByQXJjLnNpdGUsIG51bGwsIHZlcnRleCk7XG5cbiAgYXR0YWNoQ2lyY2xlKGxBcmMpO1xuICBhdHRhY2hDaXJjbGUockFyYyk7XG59XG5cbmZ1bmN0aW9uIGFkZEJlYWNoKHNpdGUpIHtcbiAgdmFyIHggPSBzaXRlWzBdLFxuICAgICAgZGlyZWN0cml4ID0gc2l0ZVsxXSxcbiAgICAgIGxBcmMsXG4gICAgICByQXJjLFxuICAgICAgZHhsLFxuICAgICAgZHhyLFxuICAgICAgbm9kZSA9IGJlYWNoZXMuXztcblxuICB3aGlsZSAobm9kZSkge1xuICAgIGR4bCA9IGxlZnRCcmVha1BvaW50KG5vZGUsIGRpcmVjdHJpeCkgLSB4O1xuICAgIGlmIChkeGwgPiBlcHNpbG9uJDQpIG5vZGUgPSBub2RlLkw7IGVsc2Uge1xuICAgICAgZHhyID0geCAtIHJpZ2h0QnJlYWtQb2ludChub2RlLCBkaXJlY3RyaXgpO1xuICAgICAgaWYgKGR4ciA+IGVwc2lsb24kNCkge1xuICAgICAgICBpZiAoIW5vZGUuUikge1xuICAgICAgICAgIGxBcmMgPSBub2RlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG5vZGUgPSBub2RlLlI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZHhsID4gLWVwc2lsb24kNCkge1xuICAgICAgICAgIGxBcmMgPSBub2RlLlA7XG4gICAgICAgICAgckFyYyA9IG5vZGU7XG4gICAgICAgIH0gZWxzZSBpZiAoZHhyID4gLWVwc2lsb24kNCkge1xuICAgICAgICAgIGxBcmMgPSBub2RlO1xuICAgICAgICAgIHJBcmMgPSBub2RlLk47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbEFyYyA9IHJBcmMgPSBub2RlO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNyZWF0ZUNlbGwoc2l0ZSk7XG4gIHZhciBuZXdBcmMgPSBjcmVhdGVCZWFjaChzaXRlKTtcbiAgYmVhY2hlcy5pbnNlcnQobEFyYywgbmV3QXJjKTtcblxuICBpZiAoIWxBcmMgJiYgIXJBcmMpIHJldHVybjtcblxuICBpZiAobEFyYyA9PT0gckFyYykge1xuICAgIGRldGFjaENpcmNsZShsQXJjKTtcbiAgICByQXJjID0gY3JlYXRlQmVhY2gobEFyYy5zaXRlKTtcbiAgICBiZWFjaGVzLmluc2VydChuZXdBcmMsIHJBcmMpO1xuICAgIG5ld0FyYy5lZGdlID0gckFyYy5lZGdlID0gY3JlYXRlRWRnZShsQXJjLnNpdGUsIG5ld0FyYy5zaXRlKTtcbiAgICBhdHRhY2hDaXJjbGUobEFyYyk7XG4gICAgYXR0YWNoQ2lyY2xlKHJBcmMpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICghckFyYykgeyAvLyAmJiBsQXJjXG4gICAgbmV3QXJjLmVkZ2UgPSBjcmVhdGVFZGdlKGxBcmMuc2l0ZSwgbmV3QXJjLnNpdGUpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGVsc2UgbEFyYyAhPT0gckFyY1xuICBkZXRhY2hDaXJjbGUobEFyYyk7XG4gIGRldGFjaENpcmNsZShyQXJjKTtcblxuICB2YXIgbFNpdGUgPSBsQXJjLnNpdGUsXG4gICAgICBheCA9IGxTaXRlWzBdLFxuICAgICAgYXkgPSBsU2l0ZVsxXSxcbiAgICAgIGJ4ID0gc2l0ZVswXSAtIGF4LFxuICAgICAgYnkgPSBzaXRlWzFdIC0gYXksXG4gICAgICByU2l0ZSA9IHJBcmMuc2l0ZSxcbiAgICAgIGN4ID0gclNpdGVbMF0gLSBheCxcbiAgICAgIGN5ID0gclNpdGVbMV0gLSBheSxcbiAgICAgIGQgPSAyICogKGJ4ICogY3kgLSBieSAqIGN4KSxcbiAgICAgIGhiID0gYnggKiBieCArIGJ5ICogYnksXG4gICAgICBoYyA9IGN4ICogY3ggKyBjeSAqIGN5LFxuICAgICAgdmVydGV4ID0gWyhjeSAqIGhiIC0gYnkgKiBoYykgLyBkICsgYXgsIChieCAqIGhjIC0gY3ggKiBoYikgLyBkICsgYXldO1xuXG4gIHNldEVkZ2VFbmQockFyYy5lZGdlLCBsU2l0ZSwgclNpdGUsIHZlcnRleCk7XG4gIG5ld0FyYy5lZGdlID0gY3JlYXRlRWRnZShsU2l0ZSwgc2l0ZSwgbnVsbCwgdmVydGV4KTtcbiAgckFyYy5lZGdlID0gY3JlYXRlRWRnZShzaXRlLCByU2l0ZSwgbnVsbCwgdmVydGV4KTtcbiAgYXR0YWNoQ2lyY2xlKGxBcmMpO1xuICBhdHRhY2hDaXJjbGUockFyYyk7XG59XG5cbmZ1bmN0aW9uIGxlZnRCcmVha1BvaW50KGFyYywgZGlyZWN0cml4KSB7XG4gIHZhciBzaXRlID0gYXJjLnNpdGUsXG4gICAgICByZm9jeCA9IHNpdGVbMF0sXG4gICAgICByZm9jeSA9IHNpdGVbMV0sXG4gICAgICBwYnkyID0gcmZvY3kgLSBkaXJlY3RyaXg7XG5cbiAgaWYgKCFwYnkyKSByZXR1cm4gcmZvY3g7XG5cbiAgdmFyIGxBcmMgPSBhcmMuUDtcbiAgaWYgKCFsQXJjKSByZXR1cm4gLUluZmluaXR5O1xuXG4gIHNpdGUgPSBsQXJjLnNpdGU7XG4gIHZhciBsZm9jeCA9IHNpdGVbMF0sXG4gICAgICBsZm9jeSA9IHNpdGVbMV0sXG4gICAgICBwbGJ5MiA9IGxmb2N5IC0gZGlyZWN0cml4O1xuXG4gIGlmICghcGxieTIpIHJldHVybiBsZm9jeDtcblxuICB2YXIgaGwgPSBsZm9jeCAtIHJmb2N4LFxuICAgICAgYWJ5MiA9IDEgLyBwYnkyIC0gMSAvIHBsYnkyLFxuICAgICAgYiA9IGhsIC8gcGxieTI7XG5cbiAgaWYgKGFieTIpIHJldHVybiAoLWIgKyBNYXRoLnNxcnQoYiAqIGIgLSAyICogYWJ5MiAqIChobCAqIGhsIC8gKC0yICogcGxieTIpIC0gbGZvY3kgKyBwbGJ5MiAvIDIgKyByZm9jeSAtIHBieTIgLyAyKSkpIC8gYWJ5MiArIHJmb2N4O1xuXG4gIHJldHVybiAocmZvY3ggKyBsZm9jeCkgLyAyO1xufVxuXG5mdW5jdGlvbiByaWdodEJyZWFrUG9pbnQoYXJjLCBkaXJlY3RyaXgpIHtcbiAgdmFyIHJBcmMgPSBhcmMuTjtcbiAgaWYgKHJBcmMpIHJldHVybiBsZWZ0QnJlYWtQb2ludChyQXJjLCBkaXJlY3RyaXgpO1xuICB2YXIgc2l0ZSA9IGFyYy5zaXRlO1xuICByZXR1cm4gc2l0ZVsxXSA9PT0gZGlyZWN0cml4ID8gc2l0ZVswXSA6IEluZmluaXR5O1xufVxuXG52YXIgZXBzaWxvbiQ0ID0gMWUtNjtcbnZhciBlcHNpbG9uMiQyID0gMWUtMTI7XG52YXIgYmVhY2hlcztcbnZhciBjZWxscztcbnZhciBjaXJjbGVzO1xudmFyIGVkZ2VzO1xuXG5mdW5jdGlvbiB0cmlhbmdsZUFyZWEoYSwgYiwgYykge1xuICByZXR1cm4gKGFbMF0gLSBjWzBdKSAqIChiWzFdIC0gYVsxXSkgLSAoYVswXSAtIGJbMF0pICogKGNbMV0gLSBhWzFdKTtcbn1cblxuZnVuY3Rpb24gbGV4aWNvZ3JhcGhpYyhhLCBiKSB7XG4gIHJldHVybiBiWzFdIC0gYVsxXVxuICAgICAgfHwgYlswXSAtIGFbMF07XG59XG5cbmZ1bmN0aW9uIERpYWdyYW0oc2l0ZXMsIGV4dGVudCkge1xuICB2YXIgc2l0ZSA9IHNpdGVzLnNvcnQobGV4aWNvZ3JhcGhpYykucG9wKCksXG4gICAgICB4LFxuICAgICAgeSxcbiAgICAgIGNpcmNsZTtcblxuICBlZGdlcyA9IFtdO1xuICBjZWxscyA9IG5ldyBBcnJheShzaXRlcy5sZW5ndGgpO1xuICBiZWFjaGVzID0gbmV3IFJlZEJsYWNrVHJlZTtcbiAgY2lyY2xlcyA9IG5ldyBSZWRCbGFja1RyZWU7XG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBjaXJjbGUgPSBmaXJzdENpcmNsZTtcbiAgICBpZiAoc2l0ZSAmJiAoIWNpcmNsZSB8fCBzaXRlWzFdIDwgY2lyY2xlLnkgfHwgKHNpdGVbMV0gPT09IGNpcmNsZS55ICYmIHNpdGVbMF0gPCBjaXJjbGUueCkpKSB7XG4gICAgICBpZiAoc2l0ZVswXSAhPT0geCB8fCBzaXRlWzFdICE9PSB5KSB7XG4gICAgICAgIGFkZEJlYWNoKHNpdGUpO1xuICAgICAgICB4ID0gc2l0ZVswXSwgeSA9IHNpdGVbMV07XG4gICAgICB9XG4gICAgICBzaXRlID0gc2l0ZXMucG9wKCk7XG4gICAgfSBlbHNlIGlmIChjaXJjbGUpIHtcbiAgICAgIHJlbW92ZUJlYWNoKGNpcmNsZS5hcmMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBzb3J0Q2VsbEhhbGZlZGdlcygpO1xuXG4gIGlmIChleHRlbnQpIHtcbiAgICB2YXIgeDAgPSArZXh0ZW50WzBdWzBdLFxuICAgICAgICB5MCA9ICtleHRlbnRbMF1bMV0sXG4gICAgICAgIHgxID0gK2V4dGVudFsxXVswXSxcbiAgICAgICAgeTEgPSArZXh0ZW50WzFdWzFdO1xuICAgIGNsaXBFZGdlcyh4MCwgeTAsIHgxLCB5MSk7XG4gICAgY2xpcENlbGxzKHgwLCB5MCwgeDEsIHkxKTtcbiAgfVxuXG4gIHRoaXMuZWRnZXMgPSBlZGdlcztcbiAgdGhpcy5jZWxscyA9IGNlbGxzO1xuXG4gIGJlYWNoZXMgPVxuICBjaXJjbGVzID1cbiAgZWRnZXMgPVxuICBjZWxscyA9IG51bGw7XG59XG5cbkRpYWdyYW0ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogRGlhZ3JhbSxcblxuICBwb2x5Z29uczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGVkZ2VzID0gdGhpcy5lZGdlcztcblxuICAgIHJldHVybiB0aGlzLmNlbGxzLm1hcChmdW5jdGlvbihjZWxsKSB7XG4gICAgICB2YXIgcG9seWdvbiA9IGNlbGwuaGFsZmVkZ2VzLm1hcChmdW5jdGlvbihpKSB7IHJldHVybiBjZWxsSGFsZmVkZ2VTdGFydChjZWxsLCBlZGdlc1tpXSk7IH0pO1xuICAgICAgcG9seWdvbi5kYXRhID0gY2VsbC5zaXRlLmRhdGE7XG4gICAgICByZXR1cm4gcG9seWdvbjtcbiAgICB9KTtcbiAgfSxcblxuICB0cmlhbmdsZXM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0cmlhbmdsZXMgPSBbXSxcbiAgICAgICAgZWRnZXMgPSB0aGlzLmVkZ2VzO1xuXG4gICAgdGhpcy5jZWxscy5mb3JFYWNoKGZ1bmN0aW9uKGNlbGwsIGkpIHtcbiAgICAgIGlmICghKG0gPSAoaGFsZmVkZ2VzID0gY2VsbC5oYWxmZWRnZXMpLmxlbmd0aCkpIHJldHVybjtcbiAgICAgIHZhciBzaXRlID0gY2VsbC5zaXRlLFxuICAgICAgICAgIGhhbGZlZGdlcyxcbiAgICAgICAgICBqID0gLTEsXG4gICAgICAgICAgbSxcbiAgICAgICAgICBzMCxcbiAgICAgICAgICBlMSA9IGVkZ2VzW2hhbGZlZGdlc1ttIC0gMV1dLFxuICAgICAgICAgIHMxID0gZTEubGVmdCA9PT0gc2l0ZSA/IGUxLnJpZ2h0IDogZTEubGVmdDtcblxuICAgICAgd2hpbGUgKCsraiA8IG0pIHtcbiAgICAgICAgczAgPSBzMTtcbiAgICAgICAgZTEgPSBlZGdlc1toYWxmZWRnZXNbal1dO1xuICAgICAgICBzMSA9IGUxLmxlZnQgPT09IHNpdGUgPyBlMS5yaWdodCA6IGUxLmxlZnQ7XG4gICAgICAgIGlmIChzMCAmJiBzMSAmJiBpIDwgczAuaW5kZXggJiYgaSA8IHMxLmluZGV4ICYmIHRyaWFuZ2xlQXJlYShzaXRlLCBzMCwgczEpIDwgMCkge1xuICAgICAgICAgIHRyaWFuZ2xlcy5wdXNoKFtzaXRlLmRhdGEsIHMwLmRhdGEsIHMxLmRhdGFdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRyaWFuZ2xlcztcbiAgfSxcblxuICBsaW5rczogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZWRnZXMuZmlsdGVyKGZ1bmN0aW9uKGVkZ2UpIHtcbiAgICAgIHJldHVybiBlZGdlLnJpZ2h0O1xuICAgIH0pLm1hcChmdW5jdGlvbihlZGdlKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzb3VyY2U6IGVkZ2UubGVmdC5kYXRhLFxuICAgICAgICB0YXJnZXQ6IGVkZ2UucmlnaHQuZGF0YVxuICAgICAgfTtcbiAgICB9KTtcbiAgfSxcblxuICBmaW5kOiBmdW5jdGlvbih4LCB5LCByYWRpdXMpIHtcbiAgICB2YXIgdGhhdCA9IHRoaXMsIGkwLCBpMSA9IHRoYXQuX2ZvdW5kIHx8IDAsIG4gPSB0aGF0LmNlbGxzLmxlbmd0aCwgY2VsbDtcblxuICAgIC8vIFVzZSB0aGUgcHJldmlvdXNseS1mb3VuZCBjZWxsLCBvciBzdGFydCB3aXRoIGFuIGFyYml0cmFyeSBvbmUuXG4gICAgd2hpbGUgKCEoY2VsbCA9IHRoYXQuY2VsbHNbaTFdKSkgaWYgKCsraTEgPj0gbikgcmV0dXJuIG51bGw7XG4gICAgdmFyIGR4ID0geCAtIGNlbGwuc2l0ZVswXSwgZHkgPSB5IC0gY2VsbC5zaXRlWzFdLCBkMiA9IGR4ICogZHggKyBkeSAqIGR5O1xuXG4gICAgLy8gVHJhdmVyc2UgdGhlIGhhbGYtZWRnZXMgdG8gZmluZCBhIGNsb3NlciBjZWxsLCBpZiBhbnkuXG4gICAgZG8ge1xuICAgICAgY2VsbCA9IHRoYXQuY2VsbHNbaTAgPSBpMV0sIGkxID0gbnVsbDtcbiAgICAgIGNlbGwuaGFsZmVkZ2VzLmZvckVhY2goZnVuY3Rpb24oZSkge1xuICAgICAgICB2YXIgZWRnZSA9IHRoYXQuZWRnZXNbZV0sIHYgPSBlZGdlLmxlZnQ7XG4gICAgICAgIGlmICgodiA9PT0gY2VsbC5zaXRlIHx8ICF2KSAmJiAhKHYgPSBlZGdlLnJpZ2h0KSkgcmV0dXJuO1xuICAgICAgICB2YXIgdnggPSB4IC0gdlswXSwgdnkgPSB5IC0gdlsxXSwgdjIgPSB2eCAqIHZ4ICsgdnkgKiB2eTtcbiAgICAgICAgaWYgKHYyIDwgZDIpIGQyID0gdjIsIGkxID0gdi5pbmRleDtcbiAgICAgIH0pO1xuICAgIH0gd2hpbGUgKGkxICE9PSBudWxsKTtcblxuICAgIHRoYXQuX2ZvdW5kID0gaTA7XG5cbiAgICByZXR1cm4gcmFkaXVzID09IG51bGwgfHwgZDIgPD0gcmFkaXVzICogcmFkaXVzID8gY2VsbC5zaXRlIDogbnVsbDtcbiAgfVxufTtcblxudmFyIHZvcm9ub2kgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHggPSB4JDQsXG4gICAgICB5ID0geSQ0LFxuICAgICAgZXh0ZW50ID0gbnVsbDtcblxuICBmdW5jdGlvbiB2b3Jvbm9pKGRhdGEpIHtcbiAgICByZXR1cm4gbmV3IERpYWdyYW0oZGF0YS5tYXAoZnVuY3Rpb24oZCwgaSkge1xuICAgICAgdmFyIHMgPSBbTWF0aC5yb3VuZCh4KGQsIGksIGRhdGEpIC8gZXBzaWxvbiQ0KSAqIGVwc2lsb24kNCwgTWF0aC5yb3VuZCh5KGQsIGksIGRhdGEpIC8gZXBzaWxvbiQ0KSAqIGVwc2lsb24kNF07XG4gICAgICBzLmluZGV4ID0gaTtcbiAgICAgIHMuZGF0YSA9IGQ7XG4gICAgICByZXR1cm4gcztcbiAgICB9KSwgZXh0ZW50KTtcbiAgfVxuXG4gIHZvcm9ub2kucG9seWdvbnMgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgcmV0dXJuIHZvcm9ub2koZGF0YSkucG9seWdvbnMoKTtcbiAgfTtcblxuICB2b3Jvbm9pLmxpbmtzID0gZnVuY3Rpb24oZGF0YSkge1xuICAgIHJldHVybiB2b3Jvbm9pKGRhdGEpLmxpbmtzKCk7XG4gIH07XG5cbiAgdm9yb25vaS50cmlhbmdsZXMgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgcmV0dXJuIHZvcm9ub2koZGF0YSkudHJpYW5nbGVzKCk7XG4gIH07XG5cbiAgdm9yb25vaS54ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHggPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDExKCtfKSwgdm9yb25vaSkgOiB4O1xuICB9O1xuXG4gIHZvcm9ub2kueSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxMSgrXyksIHZvcm9ub2kpIDogeTtcbiAgfTtcblxuICB2b3Jvbm9pLmV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChleHRlbnQgPSBfID09IG51bGwgPyBudWxsIDogW1srX1swXVswXSwgK19bMF1bMV1dLCBbK19bMV1bMF0sICtfWzFdWzFdXV0sIHZvcm9ub2kpIDogZXh0ZW50ICYmIFtbZXh0ZW50WzBdWzBdLCBleHRlbnRbMF1bMV1dLCBbZXh0ZW50WzFdWzBdLCBleHRlbnRbMV1bMV1dXTtcbiAgfTtcblxuICB2b3Jvbm9pLnNpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZXh0ZW50ID0gXyA9PSBudWxsID8gbnVsbCA6IFtbMCwgMF0sIFsrX1swXSwgK19bMV1dXSwgdm9yb25vaSkgOiBleHRlbnQgJiYgW2V4dGVudFsxXVswXSAtIGV4dGVudFswXVswXSwgZXh0ZW50WzFdWzFdIC0gZXh0ZW50WzBdWzFdXTtcbiAgfTtcblxuICByZXR1cm4gdm9yb25vaTtcbn07XG5cbnZhciBjb25zdGFudCQxMiA9IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufTtcblxuZnVuY3Rpb24gWm9vbUV2ZW50KHRhcmdldCwgdHlwZSwgdHJhbnNmb3JtKSB7XG4gIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICB0aGlzLnR5cGUgPSB0eXBlO1xuICB0aGlzLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbn1cblxuZnVuY3Rpb24gVHJhbnNmb3JtKGssIHgsIHkpIHtcbiAgdGhpcy5rID0gaztcbiAgdGhpcy54ID0geDtcbiAgdGhpcy55ID0geTtcbn1cblxuVHJhbnNmb3JtLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFRyYW5zZm9ybSxcbiAgc2NhbGU6IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gayA9PT0gMSA/IHRoaXMgOiBuZXcgVHJhbnNmb3JtKHRoaXMuayAqIGssIHRoaXMueCwgdGhpcy55KTtcbiAgfSxcbiAgdHJhbnNsYXRlOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgcmV0dXJuIHggPT09IDAgJiB5ID09PSAwID8gdGhpcyA6IG5ldyBUcmFuc2Zvcm0odGhpcy5rLCB0aGlzLnggKyB0aGlzLmsgKiB4LCB0aGlzLnkgKyB0aGlzLmsgKiB5KTtcbiAgfSxcbiAgYXBwbHk6IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgcmV0dXJuIFtwb2ludFswXSAqIHRoaXMuayArIHRoaXMueCwgcG9pbnRbMV0gKiB0aGlzLmsgKyB0aGlzLnldO1xuICB9LFxuICBhcHBseVg6IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4geCAqIHRoaXMuayArIHRoaXMueDtcbiAgfSxcbiAgYXBwbHlZOiBmdW5jdGlvbih5KSB7XG4gICAgcmV0dXJuIHkgKiB0aGlzLmsgKyB0aGlzLnk7XG4gIH0sXG4gIGludmVydDogZnVuY3Rpb24obG9jYXRpb24pIHtcbiAgICByZXR1cm4gWyhsb2NhdGlvblswXSAtIHRoaXMueCkgLyB0aGlzLmssIChsb2NhdGlvblsxXSAtIHRoaXMueSkgLyB0aGlzLmtdO1xuICB9LFxuICBpbnZlcnRYOiBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuICh4IC0gdGhpcy54KSAvIHRoaXMuaztcbiAgfSxcbiAgaW52ZXJ0WTogZnVuY3Rpb24oeSkge1xuICAgIHJldHVybiAoeSAtIHRoaXMueSkgLyB0aGlzLms7XG4gIH0sXG4gIHJlc2NhbGVYOiBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIHguY29weSgpLmRvbWFpbih4LnJhbmdlKCkubWFwKHRoaXMuaW52ZXJ0WCwgdGhpcykubWFwKHguaW52ZXJ0LCB4KSk7XG4gIH0sXG4gIHJlc2NhbGVZOiBmdW5jdGlvbih5KSB7XG4gICAgcmV0dXJuIHkuY29weSgpLmRvbWFpbih5LnJhbmdlKCkubWFwKHRoaXMuaW52ZXJ0WSwgdGhpcykubWFwKHkuaW52ZXJ0LCB5KSk7XG4gIH0sXG4gIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyB0aGlzLnggKyBcIixcIiArIHRoaXMueSArIFwiKSBzY2FsZShcIiArIHRoaXMuayArIFwiKVwiO1xuICB9XG59O1xuXG52YXIgaWRlbnRpdHkkOCA9IG5ldyBUcmFuc2Zvcm0oMSwgMCwgMCk7XG5cbnRyYW5zZm9ybSQxLnByb3RvdHlwZSA9IFRyYW5zZm9ybS5wcm90b3R5cGU7XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybSQxKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuX196b29tIHx8IGlkZW50aXR5JDg7XG59XG5cbmZ1bmN0aW9uIG5vcHJvcGFnYXRpb24kMigpIHtcbiAgZXhwb3J0cy5ldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbn1cblxudmFyIG5vZXZlbnQkMiA9IGZ1bmN0aW9uKCkge1xuICBleHBvcnRzLmV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIGV4cG9ydHMuZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG59O1xuXG4vLyBJZ25vcmUgcmlnaHQtY2xpY2ssIHNpbmNlIHRoYXQgc2hvdWxkIG9wZW4gdGhlIGNvbnRleHQgbWVudS5cbmZ1bmN0aW9uIGRlZmF1bHRGaWx0ZXIkMigpIHtcbiAgcmV0dXJuICFleHBvcnRzLmV2ZW50LmJ1dHRvbjtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdEV4dGVudCQxKCkge1xuICB2YXIgZSA9IHRoaXMsIHcsIGg7XG4gIGlmIChlIGluc3RhbmNlb2YgU1ZHRWxlbWVudCkge1xuICAgIGUgPSBlLm93bmVyU1ZHRWxlbWVudCB8fCBlO1xuICAgIHcgPSBlLndpZHRoLmJhc2VWYWwudmFsdWU7XG4gICAgaCA9IGUuaGVpZ2h0LmJhc2VWYWwudmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgdyA9IGUuY2xpZW50V2lkdGg7XG4gICAgaCA9IGUuY2xpZW50SGVpZ2h0O1xuICB9XG4gIHJldHVybiBbWzAsIDBdLCBbdywgaF1dO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0VHJhbnNmb3JtKCkge1xuICByZXR1cm4gdGhpcy5fX3pvb20gfHwgaWRlbnRpdHkkODtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFdoZWVsRGVsdGEoKSB7XG4gIHJldHVybiAtZXhwb3J0cy5ldmVudC5kZWx0YVkgKiAoZXhwb3J0cy5ldmVudC5kZWx0YU1vZGUgPyAxMjAgOiAxKSAvIDUwMDtcbn1cblxuZnVuY3Rpb24gdG91Y2hhYmxlJDEoKSB7XG4gIHJldHVybiBcIm9udG91Y2hzdGFydFwiIGluIHRoaXM7XG59XG5cbnZhciB6b29tID0gZnVuY3Rpb24oKSB7XG4gIHZhciBmaWx0ZXIgPSBkZWZhdWx0RmlsdGVyJDIsXG4gICAgICBleHRlbnQgPSBkZWZhdWx0RXh0ZW50JDEsXG4gICAgICB3aGVlbERlbHRhID0gZGVmYXVsdFdoZWVsRGVsdGEsXG4gICAgICBrMCA9IDAsXG4gICAgICBrMSA9IEluZmluaXR5LFxuICAgICAgeDAgPSAtazEsXG4gICAgICB4MSA9IGsxLFxuICAgICAgeTAgPSB4MCxcbiAgICAgIHkxID0geDEsXG4gICAgICBkdXJhdGlvbiA9IDI1MCxcbiAgICAgIGludGVycG9sYXRlID0gaW50ZXJwb2xhdGVab29tLFxuICAgICAgZ2VzdHVyZXMgPSBbXSxcbiAgICAgIGxpc3RlbmVycyA9IGRpc3BhdGNoKFwic3RhcnRcIiwgXCJ6b29tXCIsIFwiZW5kXCIpLFxuICAgICAgdG91Y2hzdGFydGluZyxcbiAgICAgIHRvdWNoZW5kaW5nLFxuICAgICAgdG91Y2hEZWxheSA9IDUwMCxcbiAgICAgIHdoZWVsRGVsYXkgPSAxNTAsXG4gICAgICBjbGlja0Rpc3RhbmNlMiA9IDA7XG5cbiAgZnVuY3Rpb24gem9vbShzZWxlY3Rpb24kJDEpIHtcbiAgICBzZWxlY3Rpb24kJDFcbiAgICAgICAgLnByb3BlcnR5KFwiX196b29tXCIsIGRlZmF1bHRUcmFuc2Zvcm0pXG4gICAgICAgIC5vbihcIndoZWVsLnpvb21cIiwgd2hlZWxlZClcbiAgICAgICAgLm9uKFwibW91c2Vkb3duLnpvb21cIiwgbW91c2Vkb3duZWQpXG4gICAgICAgIC5vbihcImRibGNsaWNrLnpvb21cIiwgZGJsY2xpY2tlZClcbiAgICAgIC5maWx0ZXIodG91Y2hhYmxlJDEpXG4gICAgICAgIC5vbihcInRvdWNoc3RhcnQuem9vbVwiLCB0b3VjaHN0YXJ0ZWQpXG4gICAgICAgIC5vbihcInRvdWNobW92ZS56b29tXCIsIHRvdWNobW92ZWQpXG4gICAgICAgIC5vbihcInRvdWNoZW5kLnpvb20gdG91Y2hjYW5jZWwuem9vbVwiLCB0b3VjaGVuZGVkKVxuICAgICAgICAuc3R5bGUoXCJ0b3VjaC1hY3Rpb25cIiwgXCJub25lXCIpXG4gICAgICAgIC5zdHlsZShcIi13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvclwiLCBcInJnYmEoMCwwLDAsMClcIik7XG4gIH1cblxuICB6b29tLnRyYW5zZm9ybSA9IGZ1bmN0aW9uKGNvbGxlY3Rpb24sIHRyYW5zZm9ybSQkMSkge1xuICAgIHZhciBzZWxlY3Rpb24kJDEgPSBjb2xsZWN0aW9uLnNlbGVjdGlvbiA/IGNvbGxlY3Rpb24uc2VsZWN0aW9uKCkgOiBjb2xsZWN0aW9uO1xuICAgIHNlbGVjdGlvbiQkMS5wcm9wZXJ0eShcIl9fem9vbVwiLCBkZWZhdWx0VHJhbnNmb3JtKTtcbiAgICBpZiAoY29sbGVjdGlvbiAhPT0gc2VsZWN0aW9uJCQxKSB7XG4gICAgICBzY2hlZHVsZShjb2xsZWN0aW9uLCB0cmFuc2Zvcm0kJDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxlY3Rpb24kJDEuaW50ZXJydXB0KCkuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICAgICAgICAuc3RhcnQoKVxuICAgICAgICAgICAgLnpvb20obnVsbCwgdHlwZW9mIHRyYW5zZm9ybSQkMSA9PT0gXCJmdW5jdGlvblwiID8gdHJhbnNmb3JtJCQxLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiB0cmFuc2Zvcm0kJDEpXG4gICAgICAgICAgICAuZW5kKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgem9vbS5zY2FsZUJ5ID0gZnVuY3Rpb24oc2VsZWN0aW9uJCQxLCBrKSB7XG4gICAgem9vbS5zY2FsZVRvKHNlbGVjdGlvbiQkMSwgZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgazAgPSB0aGlzLl9fem9vbS5rLFxuICAgICAgICAgIGsxID0gdHlwZW9mIGsgPT09IFwiZnVuY3Rpb25cIiA/IGsuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IGs7XG4gICAgICByZXR1cm4gazAgKiBrMTtcbiAgICB9KTtcbiAgfTtcblxuICB6b29tLnNjYWxlVG8gPSBmdW5jdGlvbihzZWxlY3Rpb24kJDEsIGspIHtcbiAgICB6b29tLnRyYW5zZm9ybShzZWxlY3Rpb24kJDEsIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGUgPSBleHRlbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgICB0MCA9IHRoaXMuX196b29tLFxuICAgICAgICAgIHAwID0gY2VudHJvaWQoZSksXG4gICAgICAgICAgcDEgPSB0MC5pbnZlcnQocDApLFxuICAgICAgICAgIGsxID0gdHlwZW9mIGsgPT09IFwiZnVuY3Rpb25cIiA/IGsuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IGs7XG4gICAgICByZXR1cm4gY29uc3RyYWluKHRyYW5zbGF0ZShzY2FsZSh0MCwgazEpLCBwMCwgcDEpLCBlKTtcbiAgICB9KTtcbiAgfTtcblxuICB6b29tLnRyYW5zbGF0ZUJ5ID0gZnVuY3Rpb24oc2VsZWN0aW9uJCQxLCB4LCB5KSB7XG4gICAgem9vbS50cmFuc2Zvcm0oc2VsZWN0aW9uJCQxLCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBjb25zdHJhaW4odGhpcy5fX3pvb20udHJhbnNsYXRlKFxuICAgICAgICB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogeCxcbiAgICAgICAgdHlwZW9mIHkgPT09IFwiZnVuY3Rpb25cIiA/IHkuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHlcbiAgICAgICksIGV4dGVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICB9KTtcbiAgfTtcblxuICB6b29tLnRyYW5zbGF0ZVRvID0gZnVuY3Rpb24oc2VsZWN0aW9uJCQxLCB4LCB5KSB7XG4gICAgem9vbS50cmFuc2Zvcm0oc2VsZWN0aW9uJCQxLCBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBlID0gZXh0ZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgICAgdCA9IHRoaXMuX196b29tLFxuICAgICAgICAgIHAgPSBjZW50cm9pZChlKTtcbiAgICAgIHJldHVybiBjb25zdHJhaW4oaWRlbnRpdHkkOC50cmFuc2xhdGUocFswXSwgcFsxXSkuc2NhbGUodC5rKS50cmFuc2xhdGUoXG4gICAgICAgIHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyAteC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogLXgsXG4gICAgICAgIHR5cGVvZiB5ID09PSBcImZ1bmN0aW9uXCIgPyAteS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogLXlcbiAgICAgICksIGUpO1xuICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHNjYWxlKHRyYW5zZm9ybSQkMSwgaykge1xuICAgIGsgPSBNYXRoLm1heChrMCwgTWF0aC5taW4oazEsIGspKTtcbiAgICByZXR1cm4gayA9PT0gdHJhbnNmb3JtJCQxLmsgPyB0cmFuc2Zvcm0kJDEgOiBuZXcgVHJhbnNmb3JtKGssIHRyYW5zZm9ybSQkMS54LCB0cmFuc2Zvcm0kJDEueSk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2xhdGUodHJhbnNmb3JtJCQxLCBwMCwgcDEpIHtcbiAgICB2YXIgeCA9IHAwWzBdIC0gcDFbMF0gKiB0cmFuc2Zvcm0kJDEuaywgeSA9IHAwWzFdIC0gcDFbMV0gKiB0cmFuc2Zvcm0kJDEuaztcbiAgICByZXR1cm4geCA9PT0gdHJhbnNmb3JtJCQxLnggJiYgeSA9PT0gdHJhbnNmb3JtJCQxLnkgPyB0cmFuc2Zvcm0kJDEgOiBuZXcgVHJhbnNmb3JtKHRyYW5zZm9ybSQkMS5rLCB4LCB5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnN0cmFpbih0cmFuc2Zvcm0kJDEsIGV4dGVudCkge1xuICAgIHZhciBkeDAgPSB0cmFuc2Zvcm0kJDEuaW52ZXJ0WChleHRlbnRbMF1bMF0pIC0geDAsXG4gICAgICAgIGR4MSA9IHRyYW5zZm9ybSQkMS5pbnZlcnRYKGV4dGVudFsxXVswXSkgLSB4MSxcbiAgICAgICAgZHkwID0gdHJhbnNmb3JtJCQxLmludmVydFkoZXh0ZW50WzBdWzFdKSAtIHkwLFxuICAgICAgICBkeTEgPSB0cmFuc2Zvcm0kJDEuaW52ZXJ0WShleHRlbnRbMV1bMV0pIC0geTE7XG4gICAgcmV0dXJuIHRyYW5zZm9ybSQkMS50cmFuc2xhdGUoXG4gICAgICBkeDEgPiBkeDAgPyAoZHgwICsgZHgxKSAvIDIgOiBNYXRoLm1pbigwLCBkeDApIHx8IE1hdGgubWF4KDAsIGR4MSksXG4gICAgICBkeTEgPiBkeTAgPyAoZHkwICsgZHkxKSAvIDIgOiBNYXRoLm1pbigwLCBkeTApIHx8IE1hdGgubWF4KDAsIGR5MSlcbiAgICApO1xuICB9XG5cbiAgZnVuY3Rpb24gY2VudHJvaWQoZXh0ZW50KSB7XG4gICAgcmV0dXJuIFsoK2V4dGVudFswXVswXSArICtleHRlbnRbMV1bMF0pIC8gMiwgKCtleHRlbnRbMF1bMV0gKyArZXh0ZW50WzFdWzFdKSAvIDJdO1xuICB9XG5cbiAgZnVuY3Rpb24gc2NoZWR1bGUodHJhbnNpdGlvbiQkMSwgdHJhbnNmb3JtJCQxLCBjZW50ZXIpIHtcbiAgICB0cmFuc2l0aW9uJCQxXG4gICAgICAgIC5vbihcInN0YXJ0Lnpvb21cIiwgZnVuY3Rpb24oKSB7IGdlc3R1cmUodGhpcywgYXJndW1lbnRzKS5zdGFydCgpOyB9KVxuICAgICAgICAub24oXCJpbnRlcnJ1cHQuem9vbSBlbmQuem9vbVwiLCBmdW5jdGlvbigpIHsgZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMpLmVuZCgpOyB9KVxuICAgICAgICAudHdlZW4oXCJ6b29tXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgICAgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgICAgZyA9IGdlc3R1cmUodGhhdCwgYXJncyksXG4gICAgICAgICAgICAgIGUgPSBleHRlbnQuYXBwbHkodGhhdCwgYXJncyksXG4gICAgICAgICAgICAgIHAgPSBjZW50ZXIgfHwgY2VudHJvaWQoZSksXG4gICAgICAgICAgICAgIHcgPSBNYXRoLm1heChlWzFdWzBdIC0gZVswXVswXSwgZVsxXVsxXSAtIGVbMF1bMV0pLFxuICAgICAgICAgICAgICBhID0gdGhhdC5fX3pvb20sXG4gICAgICAgICAgICAgIGIgPSB0eXBlb2YgdHJhbnNmb3JtJCQxID09PSBcImZ1bmN0aW9uXCIgPyB0cmFuc2Zvcm0kJDEuYXBwbHkodGhhdCwgYXJncykgOiB0cmFuc2Zvcm0kJDEsXG4gICAgICAgICAgICAgIGkgPSBpbnRlcnBvbGF0ZShhLmludmVydChwKS5jb25jYXQodyAvIGEuayksIGIuaW52ZXJ0KHApLmNvbmNhdCh3IC8gYi5rKSk7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIGlmICh0ID09PSAxKSB0ID0gYjsgLy8gQXZvaWQgcm91bmRpbmcgZXJyb3Igb24gZW5kLlxuICAgICAgICAgICAgZWxzZSB7IHZhciBsID0gaSh0KSwgayA9IHcgLyBsWzJdOyB0ID0gbmV3IFRyYW5zZm9ybShrLCBwWzBdIC0gbFswXSAqIGssIHBbMV0gLSBsWzFdICogayk7IH1cbiAgICAgICAgICAgIGcuem9vbShudWxsLCB0KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdlc3R1cmUodGhhdCwgYXJncykge1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gZ2VzdHVyZXMubGVuZ3RoLCBnOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKGcgPSBnZXN0dXJlc1tpXSkudGhhdCA9PT0gdGhhdCkge1xuICAgICAgICByZXR1cm4gZztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ldyBHZXN0dXJlKHRoYXQsIGFyZ3MpO1xuICB9XG5cbiAgZnVuY3Rpb24gR2VzdHVyZSh0aGF0LCBhcmdzKSB7XG4gICAgdGhpcy50aGF0ID0gdGhhdDtcbiAgICB0aGlzLmFyZ3MgPSBhcmdzO1xuICAgIHRoaXMuaW5kZXggPSAtMTtcbiAgICB0aGlzLmFjdGl2ZSA9IDA7XG4gICAgdGhpcy5leHRlbnQgPSBleHRlbnQuYXBwbHkodGhhdCwgYXJncyk7XG4gIH1cblxuICBHZXN0dXJlLnByb3RvdHlwZSA9IHtcbiAgICBzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoKyt0aGlzLmFjdGl2ZSA9PT0gMSkge1xuICAgICAgICB0aGlzLmluZGV4ID0gZ2VzdHVyZXMucHVzaCh0aGlzKSAtIDE7XG4gICAgICAgIHRoaXMuZW1pdChcInN0YXJ0XCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICB6b29tOiBmdW5jdGlvbihrZXksIHRyYW5zZm9ybSQkMSkge1xuICAgICAgaWYgKHRoaXMubW91c2UgJiYga2V5ICE9PSBcIm1vdXNlXCIpIHRoaXMubW91c2VbMV0gPSB0cmFuc2Zvcm0kJDEuaW52ZXJ0KHRoaXMubW91c2VbMF0pO1xuICAgICAgaWYgKHRoaXMudG91Y2gwICYmIGtleSAhPT0gXCJ0b3VjaFwiKSB0aGlzLnRvdWNoMFsxXSA9IHRyYW5zZm9ybSQkMS5pbnZlcnQodGhpcy50b3VjaDBbMF0pO1xuICAgICAgaWYgKHRoaXMudG91Y2gxICYmIGtleSAhPT0gXCJ0b3VjaFwiKSB0aGlzLnRvdWNoMVsxXSA9IHRyYW5zZm9ybSQkMS5pbnZlcnQodGhpcy50b3VjaDFbMF0pO1xuICAgICAgdGhpcy50aGF0Ll9fem9vbSA9IHRyYW5zZm9ybSQkMTtcbiAgICAgIHRoaXMuZW1pdChcInpvb21cIik7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGVuZDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoLS10aGlzLmFjdGl2ZSA9PT0gMCkge1xuICAgICAgICBnZXN0dXJlcy5zcGxpY2UodGhpcy5pbmRleCwgMSk7XG4gICAgICAgIHRoaXMuaW5kZXggPSAtMTtcbiAgICAgICAgdGhpcy5lbWl0KFwiZW5kXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBlbWl0OiBmdW5jdGlvbih0eXBlKSB7XG4gICAgICBjdXN0b21FdmVudChuZXcgWm9vbUV2ZW50KHpvb20sIHR5cGUsIHRoaXMudGhhdC5fX3pvb20pLCBsaXN0ZW5lcnMuYXBwbHksIGxpc3RlbmVycywgW3R5cGUsIHRoaXMudGhhdCwgdGhpcy5hcmdzXSk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHdoZWVsZWQoKSB7XG4gICAgaWYgKCFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuICAgIHZhciBnID0gZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICB0ID0gdGhpcy5fX3pvb20sXG4gICAgICAgIGsgPSBNYXRoLm1heChrMCwgTWF0aC5taW4oazEsIHQuayAqIE1hdGgucG93KDIsIHdoZWVsRGVsdGEuYXBwbHkodGhpcywgYXJndW1lbnRzKSkpKSxcbiAgICAgICAgcCA9IG1vdXNlKHRoaXMpO1xuXG4gICAgLy8gSWYgdGhlIG1vdXNlIGlzIGluIHRoZSBzYW1lIGxvY2F0aW9uIGFzIGJlZm9yZSwgcmV1c2UgaXQuXG4gICAgLy8gSWYgdGhlcmUgd2VyZSByZWNlbnQgd2hlZWwgZXZlbnRzLCByZXNldCB0aGUgd2hlZWwgaWRsZSB0aW1lb3V0LlxuICAgIGlmIChnLndoZWVsKSB7XG4gICAgICBpZiAoZy5tb3VzZVswXVswXSAhPT0gcFswXSB8fCBnLm1vdXNlWzBdWzFdICE9PSBwWzFdKSB7XG4gICAgICAgIGcubW91c2VbMV0gPSB0LmludmVydChnLm1vdXNlWzBdID0gcCk7XG4gICAgICB9XG4gICAgICBjbGVhclRpbWVvdXQoZy53aGVlbCk7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhpcyB3aGVlbCBldmVudCB3b27igJl0IHRyaWdnZXIgYSB0cmFuc2Zvcm0gY2hhbmdlLCBpZ25vcmUgaXQuXG4gICAgZWxzZSBpZiAodC5rID09PSBrKSByZXR1cm47XG5cbiAgICAvLyBPdGhlcndpc2UsIGNhcHR1cmUgdGhlIG1vdXNlIHBvaW50IGFuZCBsb2NhdGlvbiBhdCB0aGUgc3RhcnQuXG4gICAgZWxzZSB7XG4gICAgICBnLm1vdXNlID0gW3AsIHQuaW52ZXJ0KHApXTtcbiAgICAgIGludGVycnVwdCh0aGlzKTtcbiAgICAgIGcuc3RhcnQoKTtcbiAgICB9XG5cbiAgICBub2V2ZW50JDIoKTtcbiAgICBnLndoZWVsID0gc2V0VGltZW91dCh3aGVlbGlkbGVkLCB3aGVlbERlbGF5KTtcbiAgICBnLnpvb20oXCJtb3VzZVwiLCBjb25zdHJhaW4odHJhbnNsYXRlKHNjYWxlKHQsIGspLCBnLm1vdXNlWzBdLCBnLm1vdXNlWzFdKSwgZy5leHRlbnQpKTtcblxuICAgIGZ1bmN0aW9uIHdoZWVsaWRsZWQoKSB7XG4gICAgICBnLndoZWVsID0gbnVsbDtcbiAgICAgIGcuZW5kKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbW91c2Vkb3duZWQoKSB7XG4gICAgaWYgKHRvdWNoZW5kaW5nIHx8ICFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuICAgIHZhciBnID0gZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICB2ID0gc2VsZWN0KGV4cG9ydHMuZXZlbnQudmlldykub24oXCJtb3VzZW1vdmUuem9vbVwiLCBtb3VzZW1vdmVkLCB0cnVlKS5vbihcIm1vdXNldXAuem9vbVwiLCBtb3VzZXVwcGVkLCB0cnVlKSxcbiAgICAgICAgcCA9IG1vdXNlKHRoaXMpLFxuICAgICAgICB4MCA9IGV4cG9ydHMuZXZlbnQuY2xpZW50WCxcbiAgICAgICAgeTAgPSBleHBvcnRzLmV2ZW50LmNsaWVudFk7XG5cbiAgICBkcmFnRGlzYWJsZShleHBvcnRzLmV2ZW50LnZpZXcpO1xuICAgIG5vcHJvcGFnYXRpb24kMigpO1xuICAgIGcubW91c2UgPSBbcCwgdGhpcy5fX3pvb20uaW52ZXJ0KHApXTtcbiAgICBpbnRlcnJ1cHQodGhpcyk7XG4gICAgZy5zdGFydCgpO1xuXG4gICAgZnVuY3Rpb24gbW91c2Vtb3ZlZCgpIHtcbiAgICAgIG5vZXZlbnQkMigpO1xuICAgICAgaWYgKCFnLm1vdmVkKSB7XG4gICAgICAgIHZhciBkeCA9IGV4cG9ydHMuZXZlbnQuY2xpZW50WCAtIHgwLCBkeSA9IGV4cG9ydHMuZXZlbnQuY2xpZW50WSAtIHkwO1xuICAgICAgICBnLm1vdmVkID0gZHggKiBkeCArIGR5ICogZHkgPiBjbGlja0Rpc3RhbmNlMjtcbiAgICAgIH1cbiAgICAgIGcuem9vbShcIm1vdXNlXCIsIGNvbnN0cmFpbih0cmFuc2xhdGUoZy50aGF0Ll9fem9vbSwgZy5tb3VzZVswXSA9IG1vdXNlKGcudGhhdCksIGcubW91c2VbMV0pLCBnLmV4dGVudCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vdXNldXBwZWQoKSB7XG4gICAgICB2Lm9uKFwibW91c2Vtb3ZlLnpvb20gbW91c2V1cC56b29tXCIsIG51bGwpO1xuICAgICAgeWVzZHJhZyhleHBvcnRzLmV2ZW50LnZpZXcsIGcubW92ZWQpO1xuICAgICAgbm9ldmVudCQyKCk7XG4gICAgICBnLmVuZCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGRibGNsaWNrZWQoKSB7XG4gICAgaWYgKCFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuICAgIHZhciB0MCA9IHRoaXMuX196b29tLFxuICAgICAgICBwMCA9IG1vdXNlKHRoaXMpLFxuICAgICAgICBwMSA9IHQwLmludmVydChwMCksXG4gICAgICAgIGsxID0gdDAuayAqIChleHBvcnRzLmV2ZW50LnNoaWZ0S2V5ID8gMC41IDogMiksXG4gICAgICAgIHQxID0gY29uc3RyYWluKHRyYW5zbGF0ZShzY2FsZSh0MCwgazEpLCBwMCwgcDEpLCBleHRlbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG5cbiAgICBub2V2ZW50JDIoKTtcbiAgICBpZiAoZHVyYXRpb24gPiAwKSBzZWxlY3QodGhpcykudHJhbnNpdGlvbigpLmR1cmF0aW9uKGR1cmF0aW9uKS5jYWxsKHNjaGVkdWxlLCB0MSwgcDApO1xuICAgIGVsc2Ugc2VsZWN0KHRoaXMpLmNhbGwoem9vbS50cmFuc2Zvcm0sIHQxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNoc3RhcnRlZCgpIHtcbiAgICBpZiAoIWZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSByZXR1cm47XG4gICAgdmFyIGcgPSBnZXN0dXJlKHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgIHRvdWNoZXMkJDEgPSBleHBvcnRzLmV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICBzdGFydGVkLFxuICAgICAgICBuID0gdG91Y2hlcyQkMS5sZW5ndGgsIGksIHQsIHA7XG5cbiAgICBub3Byb3BhZ2F0aW9uJDIoKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICB0ID0gdG91Y2hlcyQkMVtpXSwgcCA9IHRvdWNoKHRoaXMsIHRvdWNoZXMkJDEsIHQuaWRlbnRpZmllcik7XG4gICAgICBwID0gW3AsIHRoaXMuX196b29tLmludmVydChwKSwgdC5pZGVudGlmaWVyXTtcbiAgICAgIGlmICghZy50b3VjaDApIGcudG91Y2gwID0gcCwgc3RhcnRlZCA9IHRydWU7XG4gICAgICBlbHNlIGlmICghZy50b3VjaDEpIGcudG91Y2gxID0gcDtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGlzIGlzIGEgZGJsdGFwLCByZXJvdXRlIHRvIHRoZSAob3B0aW9uYWwpIGRibGNsaWNrLnpvb20gaGFuZGxlci5cbiAgICBpZiAodG91Y2hzdGFydGluZykge1xuICAgICAgdG91Y2hzdGFydGluZyA9IGNsZWFyVGltZW91dCh0b3VjaHN0YXJ0aW5nKTtcbiAgICAgIGlmICghZy50b3VjaDEpIHtcbiAgICAgICAgZy5lbmQoKTtcbiAgICAgICAgcCA9IHNlbGVjdCh0aGlzKS5vbihcImRibGNsaWNrLnpvb21cIik7XG4gICAgICAgIGlmIChwKSBwLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3RhcnRlZCkge1xuICAgICAgdG91Y2hzdGFydGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHRvdWNoc3RhcnRpbmcgPSBudWxsOyB9LCB0b3VjaERlbGF5KTtcbiAgICAgIGludGVycnVwdCh0aGlzKTtcbiAgICAgIGcuc3RhcnQoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaG1vdmVkKCkge1xuICAgIHZhciBnID0gZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICB0b3VjaGVzJCQxID0gZXhwb3J0cy5ldmVudC5jaGFuZ2VkVG91Y2hlcyxcbiAgICAgICAgbiA9IHRvdWNoZXMkJDEubGVuZ3RoLCBpLCB0LCBwLCBsO1xuXG4gICAgbm9ldmVudCQyKCk7XG4gICAgaWYgKHRvdWNoc3RhcnRpbmcpIHRvdWNoc3RhcnRpbmcgPSBjbGVhclRpbWVvdXQodG91Y2hzdGFydGluZyk7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgdCA9IHRvdWNoZXMkJDFbaV0sIHAgPSB0b3VjaCh0aGlzLCB0b3VjaGVzJCQxLCB0LmlkZW50aWZpZXIpO1xuICAgICAgaWYgKGcudG91Y2gwICYmIGcudG91Y2gwWzJdID09PSB0LmlkZW50aWZpZXIpIGcudG91Y2gwWzBdID0gcDtcbiAgICAgIGVsc2UgaWYgKGcudG91Y2gxICYmIGcudG91Y2gxWzJdID09PSB0LmlkZW50aWZpZXIpIGcudG91Y2gxWzBdID0gcDtcbiAgICB9XG4gICAgdCA9IGcudGhhdC5fX3pvb207XG4gICAgaWYgKGcudG91Y2gxKSB7XG4gICAgICB2YXIgcDAgPSBnLnRvdWNoMFswXSwgbDAgPSBnLnRvdWNoMFsxXSxcbiAgICAgICAgICBwMSA9IGcudG91Y2gxWzBdLCBsMSA9IGcudG91Y2gxWzFdLFxuICAgICAgICAgIGRwID0gKGRwID0gcDFbMF0gLSBwMFswXSkgKiBkcCArIChkcCA9IHAxWzFdIC0gcDBbMV0pICogZHAsXG4gICAgICAgICAgZGwgPSAoZGwgPSBsMVswXSAtIGwwWzBdKSAqIGRsICsgKGRsID0gbDFbMV0gLSBsMFsxXSkgKiBkbDtcbiAgICAgIHQgPSBzY2FsZSh0LCBNYXRoLnNxcnQoZHAgLyBkbCkpO1xuICAgICAgcCA9IFsocDBbMF0gKyBwMVswXSkgLyAyLCAocDBbMV0gKyBwMVsxXSkgLyAyXTtcbiAgICAgIGwgPSBbKGwwWzBdICsgbDFbMF0pIC8gMiwgKGwwWzFdICsgbDFbMV0pIC8gMl07XG4gICAgfVxuICAgIGVsc2UgaWYgKGcudG91Y2gwKSBwID0gZy50b3VjaDBbMF0sIGwgPSBnLnRvdWNoMFsxXTtcbiAgICBlbHNlIHJldHVybjtcbiAgICBnLnpvb20oXCJ0b3VjaFwiLCBjb25zdHJhaW4odHJhbnNsYXRlKHQsIHAsIGwpLCBnLmV4dGVudCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdG91Y2hlbmRlZCgpIHtcbiAgICB2YXIgZyA9IGdlc3R1cmUodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgdG91Y2hlcyQkMSA9IGV4cG9ydHMuZXZlbnQuY2hhbmdlZFRvdWNoZXMsXG4gICAgICAgIG4gPSB0b3VjaGVzJCQxLmxlbmd0aCwgaSwgdDtcblxuICAgIG5vcHJvcGFnYXRpb24kMigpO1xuICAgIGlmICh0b3VjaGVuZGluZykgY2xlYXJUaW1lb3V0KHRvdWNoZW5kaW5nKTtcbiAgICB0b3VjaGVuZGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHRvdWNoZW5kaW5nID0gbnVsbDsgfSwgdG91Y2hEZWxheSk7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgdCA9IHRvdWNoZXMkJDFbaV07XG4gICAgICBpZiAoZy50b3VjaDAgJiYgZy50b3VjaDBbMl0gPT09IHQuaWRlbnRpZmllcikgZGVsZXRlIGcudG91Y2gwO1xuICAgICAgZWxzZSBpZiAoZy50b3VjaDEgJiYgZy50b3VjaDFbMl0gPT09IHQuaWRlbnRpZmllcikgZGVsZXRlIGcudG91Y2gxO1xuICAgIH1cbiAgICBpZiAoZy50b3VjaDEgJiYgIWcudG91Y2gwKSBnLnRvdWNoMCA9IGcudG91Y2gxLCBkZWxldGUgZy50b3VjaDE7XG4gICAgaWYgKGcudG91Y2gwKSBnLnRvdWNoMFsxXSA9IHRoaXMuX196b29tLmludmVydChnLnRvdWNoMFswXSk7XG4gICAgZWxzZSBnLmVuZCgpO1xuICB9XG5cbiAgem9vbS53aGVlbERlbHRhID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHdoZWVsRGVsdGEgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEyKCtfKSwgem9vbSkgOiB3aGVlbERlbHRhO1xuICB9O1xuXG4gIHpvb20uZmlsdGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGZpbHRlciA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMTIoISFfKSwgem9vbSkgOiBmaWx0ZXI7XG4gIH07XG5cbiAgem9vbS5leHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZXh0ZW50ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxMihbWytfWzBdWzBdLCArX1swXVsxXV0sIFsrX1sxXVswXSwgK19bMV1bMV1dXSksIHpvb20pIDogZXh0ZW50O1xuICB9O1xuXG4gIHpvb20uc2NhbGVFeHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoazAgPSArX1swXSwgazEgPSArX1sxXSwgem9vbSkgOiBbazAsIGsxXTtcbiAgfTtcblxuICB6b29tLnRyYW5zbGF0ZUV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4MCA9ICtfWzBdWzBdLCB4MSA9ICtfWzFdWzBdLCB5MCA9ICtfWzBdWzFdLCB5MSA9ICtfWzFdWzFdLCB6b29tKSA6IFtbeDAsIHkwXSwgW3gxLCB5MV1dO1xuICB9O1xuXG4gIHpvb20uZHVyYXRpb24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZHVyYXRpb24gPSArXywgem9vbSkgOiBkdXJhdGlvbjtcbiAgfTtcblxuICB6b29tLmludGVycG9sYXRlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGludGVycG9sYXRlID0gXywgem9vbSkgOiBpbnRlcnBvbGF0ZTtcbiAgfTtcblxuICB6b29tLm9uID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlID0gbGlzdGVuZXJzLm9uLmFwcGx5KGxpc3RlbmVycywgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gdmFsdWUgPT09IGxpc3RlbmVycyA/IHpvb20gOiB2YWx1ZTtcbiAgfTtcblxuICB6b29tLmNsaWNrRGlzdGFuY2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2xpY2tEaXN0YW5jZTIgPSAoXyA9ICtfKSAqIF8sIHpvb20pIDogTWF0aC5zcXJ0KGNsaWNrRGlzdGFuY2UyKTtcbiAgfTtcblxuICByZXR1cm4gem9vbTtcbn07XG5cbmV4cG9ydHMudmVyc2lvbiA9IHZlcnNpb247XG5leHBvcnRzLmJpc2VjdCA9IGJpc2VjdFJpZ2h0O1xuZXhwb3J0cy5iaXNlY3RSaWdodCA9IGJpc2VjdFJpZ2h0O1xuZXhwb3J0cy5iaXNlY3RMZWZ0ID0gYmlzZWN0TGVmdDtcbmV4cG9ydHMuYXNjZW5kaW5nID0gYXNjZW5kaW5nO1xuZXhwb3J0cy5iaXNlY3RvciA9IGJpc2VjdG9yO1xuZXhwb3J0cy5jcm9zcyA9IGNyb3NzO1xuZXhwb3J0cy5kZXNjZW5kaW5nID0gZGVzY2VuZGluZztcbmV4cG9ydHMuZGV2aWF0aW9uID0gZGV2aWF0aW9uO1xuZXhwb3J0cy5leHRlbnQgPSBleHRlbnQ7XG5leHBvcnRzLmhpc3RvZ3JhbSA9IGhpc3RvZ3JhbTtcbmV4cG9ydHMudGhyZXNob2xkRnJlZWRtYW5EaWFjb25pcyA9IGZyZWVkbWFuRGlhY29uaXM7XG5leHBvcnRzLnRocmVzaG9sZFNjb3R0ID0gc2NvdHQ7XG5leHBvcnRzLnRocmVzaG9sZFN0dXJnZXMgPSBzdHVyZ2VzO1xuZXhwb3J0cy5tYXggPSBtYXg7XG5leHBvcnRzLm1lYW4gPSBtZWFuO1xuZXhwb3J0cy5tZWRpYW4gPSBtZWRpYW47XG5leHBvcnRzLm1lcmdlID0gbWVyZ2U7XG5leHBvcnRzLm1pbiA9IG1pbjtcbmV4cG9ydHMucGFpcnMgPSBwYWlycztcbmV4cG9ydHMucGVybXV0ZSA9IHBlcm11dGU7XG5leHBvcnRzLnF1YW50aWxlID0gdGhyZXNob2xkO1xuZXhwb3J0cy5yYW5nZSA9IHNlcXVlbmNlO1xuZXhwb3J0cy5zY2FuID0gc2NhbjtcbmV4cG9ydHMuc2h1ZmZsZSA9IHNodWZmbGU7XG5leHBvcnRzLnN1bSA9IHN1bTtcbmV4cG9ydHMudGlja3MgPSB0aWNrcztcbmV4cG9ydHMudGlja0luY3JlbWVudCA9IHRpY2tJbmNyZW1lbnQ7XG5leHBvcnRzLnRpY2tTdGVwID0gdGlja1N0ZXA7XG5leHBvcnRzLnRyYW5zcG9zZSA9IHRyYW5zcG9zZTtcbmV4cG9ydHMudmFyaWFuY2UgPSB2YXJpYW5jZTtcbmV4cG9ydHMuemlwID0gemlwO1xuZXhwb3J0cy5heGlzVG9wID0gYXhpc1RvcDtcbmV4cG9ydHMuYXhpc1JpZ2h0ID0gYXhpc1JpZ2h0O1xuZXhwb3J0cy5heGlzQm90dG9tID0gYXhpc0JvdHRvbTtcbmV4cG9ydHMuYXhpc0xlZnQgPSBheGlzTGVmdDtcbmV4cG9ydHMuYnJ1c2ggPSBicnVzaDtcbmV4cG9ydHMuYnJ1c2hYID0gYnJ1c2hYO1xuZXhwb3J0cy5icnVzaFkgPSBicnVzaFk7XG5leHBvcnRzLmJydXNoU2VsZWN0aW9uID0gYnJ1c2hTZWxlY3Rpb247XG5leHBvcnRzLmNob3JkID0gY2hvcmQ7XG5leHBvcnRzLnJpYmJvbiA9IHJpYmJvbjtcbmV4cG9ydHMubmVzdCA9IG5lc3Q7XG5leHBvcnRzLnNldCA9IHNldCQyO1xuZXhwb3J0cy5tYXAgPSBtYXAkMTtcbmV4cG9ydHMua2V5cyA9IGtleXM7XG5leHBvcnRzLnZhbHVlcyA9IHZhbHVlcztcbmV4cG9ydHMuZW50cmllcyA9IGVudHJpZXM7XG5leHBvcnRzLmNvbG9yID0gY29sb3I7XG5leHBvcnRzLnJnYiA9IHJnYjtcbmV4cG9ydHMuaHNsID0gaHNsO1xuZXhwb3J0cy5sYWIgPSBsYWI7XG5leHBvcnRzLmhjbCA9IGhjbDtcbmV4cG9ydHMuY3ViZWhlbGl4ID0gY3ViZWhlbGl4O1xuZXhwb3J0cy5kaXNwYXRjaCA9IGRpc3BhdGNoO1xuZXhwb3J0cy5kcmFnID0gZHJhZztcbmV4cG9ydHMuZHJhZ0Rpc2FibGUgPSBkcmFnRGlzYWJsZTtcbmV4cG9ydHMuZHJhZ0VuYWJsZSA9IHllc2RyYWc7XG5leHBvcnRzLmRzdkZvcm1hdCA9IGRzdjtcbmV4cG9ydHMuY3N2UGFyc2UgPSBjc3ZQYXJzZTtcbmV4cG9ydHMuY3N2UGFyc2VSb3dzID0gY3N2UGFyc2VSb3dzO1xuZXhwb3J0cy5jc3ZGb3JtYXQgPSBjc3ZGb3JtYXQ7XG5leHBvcnRzLmNzdkZvcm1hdFJvd3MgPSBjc3ZGb3JtYXRSb3dzO1xuZXhwb3J0cy50c3ZQYXJzZSA9IHRzdlBhcnNlO1xuZXhwb3J0cy50c3ZQYXJzZVJvd3MgPSB0c3ZQYXJzZVJvd3M7XG5leHBvcnRzLnRzdkZvcm1hdCA9IHRzdkZvcm1hdDtcbmV4cG9ydHMudHN2Rm9ybWF0Um93cyA9IHRzdkZvcm1hdFJvd3M7XG5leHBvcnRzLmVhc2VMaW5lYXIgPSBsaW5lYXIkMTtcbmV4cG9ydHMuZWFzZVF1YWQgPSBxdWFkSW5PdXQ7XG5leHBvcnRzLmVhc2VRdWFkSW4gPSBxdWFkSW47XG5leHBvcnRzLmVhc2VRdWFkT3V0ID0gcXVhZE91dDtcbmV4cG9ydHMuZWFzZVF1YWRJbk91dCA9IHF1YWRJbk91dDtcbmV4cG9ydHMuZWFzZUN1YmljID0gY3ViaWNJbk91dDtcbmV4cG9ydHMuZWFzZUN1YmljSW4gPSBjdWJpY0luO1xuZXhwb3J0cy5lYXNlQ3ViaWNPdXQgPSBjdWJpY091dDtcbmV4cG9ydHMuZWFzZUN1YmljSW5PdXQgPSBjdWJpY0luT3V0O1xuZXhwb3J0cy5lYXNlUG9seSA9IHBvbHlJbk91dDtcbmV4cG9ydHMuZWFzZVBvbHlJbiA9IHBvbHlJbjtcbmV4cG9ydHMuZWFzZVBvbHlPdXQgPSBwb2x5T3V0O1xuZXhwb3J0cy5lYXNlUG9seUluT3V0ID0gcG9seUluT3V0O1xuZXhwb3J0cy5lYXNlU2luID0gc2luSW5PdXQ7XG5leHBvcnRzLmVhc2VTaW5JbiA9IHNpbkluO1xuZXhwb3J0cy5lYXNlU2luT3V0ID0gc2luT3V0O1xuZXhwb3J0cy5lYXNlU2luSW5PdXQgPSBzaW5Jbk91dDtcbmV4cG9ydHMuZWFzZUV4cCA9IGV4cEluT3V0O1xuZXhwb3J0cy5lYXNlRXhwSW4gPSBleHBJbjtcbmV4cG9ydHMuZWFzZUV4cE91dCA9IGV4cE91dDtcbmV4cG9ydHMuZWFzZUV4cEluT3V0ID0gZXhwSW5PdXQ7XG5leHBvcnRzLmVhc2VDaXJjbGUgPSBjaXJjbGVJbk91dDtcbmV4cG9ydHMuZWFzZUNpcmNsZUluID0gY2lyY2xlSW47XG5leHBvcnRzLmVhc2VDaXJjbGVPdXQgPSBjaXJjbGVPdXQ7XG5leHBvcnRzLmVhc2VDaXJjbGVJbk91dCA9IGNpcmNsZUluT3V0O1xuZXhwb3J0cy5lYXNlQm91bmNlID0gYm91bmNlT3V0O1xuZXhwb3J0cy5lYXNlQm91bmNlSW4gPSBib3VuY2VJbjtcbmV4cG9ydHMuZWFzZUJvdW5jZU91dCA9IGJvdW5jZU91dDtcbmV4cG9ydHMuZWFzZUJvdW5jZUluT3V0ID0gYm91bmNlSW5PdXQ7XG5leHBvcnRzLmVhc2VCYWNrID0gYmFja0luT3V0O1xuZXhwb3J0cy5lYXNlQmFja0luID0gYmFja0luO1xuZXhwb3J0cy5lYXNlQmFja091dCA9IGJhY2tPdXQ7XG5leHBvcnRzLmVhc2VCYWNrSW5PdXQgPSBiYWNrSW5PdXQ7XG5leHBvcnRzLmVhc2VFbGFzdGljID0gZWxhc3RpY091dDtcbmV4cG9ydHMuZWFzZUVsYXN0aWNJbiA9IGVsYXN0aWNJbjtcbmV4cG9ydHMuZWFzZUVsYXN0aWNPdXQgPSBlbGFzdGljT3V0O1xuZXhwb3J0cy5lYXNlRWxhc3RpY0luT3V0ID0gZWxhc3RpY0luT3V0O1xuZXhwb3J0cy5mb3JjZUNlbnRlciA9IGNlbnRlciQxO1xuZXhwb3J0cy5mb3JjZUNvbGxpZGUgPSBjb2xsaWRlO1xuZXhwb3J0cy5mb3JjZUxpbmsgPSBsaW5rO1xuZXhwb3J0cy5mb3JjZU1hbnlCb2R5ID0gbWFueUJvZHk7XG5leHBvcnRzLmZvcmNlU2ltdWxhdGlvbiA9IHNpbXVsYXRpb247XG5leHBvcnRzLmZvcmNlWCA9IHgkMjtcbmV4cG9ydHMuZm9yY2VZID0geSQyO1xuZXhwb3J0cy5mb3JtYXREZWZhdWx0TG9jYWxlID0gZGVmYXVsdExvY2FsZTtcbmV4cG9ydHMuZm9ybWF0TG9jYWxlID0gZm9ybWF0TG9jYWxlO1xuZXhwb3J0cy5mb3JtYXRTcGVjaWZpZXIgPSBmb3JtYXRTcGVjaWZpZXI7XG5leHBvcnRzLnByZWNpc2lvbkZpeGVkID0gcHJlY2lzaW9uRml4ZWQ7XG5leHBvcnRzLnByZWNpc2lvblByZWZpeCA9IHByZWNpc2lvblByZWZpeDtcbmV4cG9ydHMucHJlY2lzaW9uUm91bmQgPSBwcmVjaXNpb25Sb3VuZDtcbmV4cG9ydHMuZ2VvQXJlYSA9IGFyZWE7XG5leHBvcnRzLmdlb0JvdW5kcyA9IGJvdW5kcztcbmV4cG9ydHMuZ2VvQ2VudHJvaWQgPSBjZW50cm9pZDtcbmV4cG9ydHMuZ2VvQ2lyY2xlID0gY2lyY2xlO1xuZXhwb3J0cy5nZW9DbGlwRXh0ZW50ID0gZXh0ZW50JDE7XG5leHBvcnRzLmdlb0NvbnRhaW5zID0gY29udGFpbnM7XG5leHBvcnRzLmdlb0Rpc3RhbmNlID0gZGlzdGFuY2U7XG5leHBvcnRzLmdlb0dyYXRpY3VsZSA9IGdyYXRpY3VsZTtcbmV4cG9ydHMuZ2VvR3JhdGljdWxlMTAgPSBncmF0aWN1bGUxMDtcbmV4cG9ydHMuZ2VvSW50ZXJwb2xhdGUgPSBpbnRlcnBvbGF0ZSQxO1xuZXhwb3J0cy5nZW9MZW5ndGggPSBsZW5ndGgkMTtcbmV4cG9ydHMuZ2VvUGF0aCA9IGluZGV4JDE7XG5leHBvcnRzLmdlb0FsYmVycyA9IGFsYmVycztcbmV4cG9ydHMuZ2VvQWxiZXJzVXNhID0gYWxiZXJzVXNhO1xuZXhwb3J0cy5nZW9BemltdXRoYWxFcXVhbEFyZWEgPSBhemltdXRoYWxFcXVhbEFyZWE7XG5leHBvcnRzLmdlb0F6aW11dGhhbEVxdWFsQXJlYVJhdyA9IGF6aW11dGhhbEVxdWFsQXJlYVJhdztcbmV4cG9ydHMuZ2VvQXppbXV0aGFsRXF1aWRpc3RhbnQgPSBhemltdXRoYWxFcXVpZGlzdGFudDtcbmV4cG9ydHMuZ2VvQXppbXV0aGFsRXF1aWRpc3RhbnRSYXcgPSBhemltdXRoYWxFcXVpZGlzdGFudFJhdztcbmV4cG9ydHMuZ2VvQ29uaWNDb25mb3JtYWwgPSBjb25pY0NvbmZvcm1hbDtcbmV4cG9ydHMuZ2VvQ29uaWNDb25mb3JtYWxSYXcgPSBjb25pY0NvbmZvcm1hbFJhdztcbmV4cG9ydHMuZ2VvQ29uaWNFcXVhbEFyZWEgPSBjb25pY0VxdWFsQXJlYTtcbmV4cG9ydHMuZ2VvQ29uaWNFcXVhbEFyZWFSYXcgPSBjb25pY0VxdWFsQXJlYVJhdztcbmV4cG9ydHMuZ2VvQ29uaWNFcXVpZGlzdGFudCA9IGNvbmljRXF1aWRpc3RhbnQ7XG5leHBvcnRzLmdlb0NvbmljRXF1aWRpc3RhbnRSYXcgPSBjb25pY0VxdWlkaXN0YW50UmF3O1xuZXhwb3J0cy5nZW9FcXVpcmVjdGFuZ3VsYXIgPSBlcXVpcmVjdGFuZ3VsYXI7XG5leHBvcnRzLmdlb0VxdWlyZWN0YW5ndWxhclJhdyA9IGVxdWlyZWN0YW5ndWxhclJhdztcbmV4cG9ydHMuZ2VvR25vbW9uaWMgPSBnbm9tb25pYztcbmV4cG9ydHMuZ2VvR25vbW9uaWNSYXcgPSBnbm9tb25pY1JhdztcbmV4cG9ydHMuZ2VvSWRlbnRpdHkgPSBpZGVudGl0eSQ1O1xuZXhwb3J0cy5nZW9Qcm9qZWN0aW9uID0gcHJvamVjdGlvbjtcbmV4cG9ydHMuZ2VvUHJvamVjdGlvbk11dGF0b3IgPSBwcm9qZWN0aW9uTXV0YXRvcjtcbmV4cG9ydHMuZ2VvTWVyY2F0b3IgPSBtZXJjYXRvcjtcbmV4cG9ydHMuZ2VvTWVyY2F0b3JSYXcgPSBtZXJjYXRvclJhdztcbmV4cG9ydHMuZ2VvT3J0aG9ncmFwaGljID0gb3J0aG9ncmFwaGljO1xuZXhwb3J0cy5nZW9PcnRob2dyYXBoaWNSYXcgPSBvcnRob2dyYXBoaWNSYXc7XG5leHBvcnRzLmdlb1N0ZXJlb2dyYXBoaWMgPSBzdGVyZW9ncmFwaGljO1xuZXhwb3J0cy5nZW9TdGVyZW9ncmFwaGljUmF3ID0gc3RlcmVvZ3JhcGhpY1JhdztcbmV4cG9ydHMuZ2VvVHJhbnN2ZXJzZU1lcmNhdG9yID0gdHJhbnN2ZXJzZU1lcmNhdG9yO1xuZXhwb3J0cy5nZW9UcmFuc3ZlcnNlTWVyY2F0b3JSYXcgPSB0cmFuc3ZlcnNlTWVyY2F0b3JSYXc7XG5leHBvcnRzLmdlb1JvdGF0aW9uID0gcm90YXRpb247XG5leHBvcnRzLmdlb1N0cmVhbSA9IGdlb1N0cmVhbTtcbmV4cG9ydHMuZ2VvVHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuZXhwb3J0cy5jbHVzdGVyID0gY2x1c3RlcjtcbmV4cG9ydHMuaGllcmFyY2h5ID0gaGllcmFyY2h5O1xuZXhwb3J0cy5wYWNrID0gaW5kZXgkMjtcbmV4cG9ydHMucGFja1NpYmxpbmdzID0gc2libGluZ3M7XG5leHBvcnRzLnBhY2tFbmNsb3NlID0gZW5jbG9zZTtcbmV4cG9ydHMucGFydGl0aW9uID0gcGFydGl0aW9uO1xuZXhwb3J0cy5zdHJhdGlmeSA9IHN0cmF0aWZ5O1xuZXhwb3J0cy50cmVlID0gdHJlZTtcbmV4cG9ydHMudHJlZW1hcCA9IGluZGV4JDM7XG5leHBvcnRzLnRyZWVtYXBCaW5hcnkgPSBiaW5hcnk7XG5leHBvcnRzLnRyZWVtYXBEaWNlID0gdHJlZW1hcERpY2U7XG5leHBvcnRzLnRyZWVtYXBTbGljZSA9IHRyZWVtYXBTbGljZTtcbmV4cG9ydHMudHJlZW1hcFNsaWNlRGljZSA9IHNsaWNlRGljZTtcbmV4cG9ydHMudHJlZW1hcFNxdWFyaWZ5ID0gc3F1YXJpZnk7XG5leHBvcnRzLnRyZWVtYXBSZXNxdWFyaWZ5ID0gcmVzcXVhcmlmeTtcbmV4cG9ydHMuaW50ZXJwb2xhdGUgPSBpbnRlcnBvbGF0ZVZhbHVlO1xuZXhwb3J0cy5pbnRlcnBvbGF0ZUFycmF5ID0gYXJyYXkkMTtcbmV4cG9ydHMuaW50ZXJwb2xhdGVCYXNpcyA9IGJhc2lzJDE7XG5leHBvcnRzLmludGVycG9sYXRlQmFzaXNDbG9zZWQgPSBiYXNpc0Nsb3NlZDtcbmV4cG9ydHMuaW50ZXJwb2xhdGVEYXRlID0gZGF0ZTtcbmV4cG9ydHMuaW50ZXJwb2xhdGVOdW1iZXIgPSByZWludGVycG9sYXRlO1xuZXhwb3J0cy5pbnRlcnBvbGF0ZU9iamVjdCA9IG9iamVjdDtcbmV4cG9ydHMuaW50ZXJwb2xhdGVSb3VuZCA9IGludGVycG9sYXRlUm91bmQ7XG5leHBvcnRzLmludGVycG9sYXRlU3RyaW5nID0gaW50ZXJwb2xhdGVTdHJpbmc7XG5leHBvcnRzLmludGVycG9sYXRlVHJhbnNmb3JtQ3NzID0gaW50ZXJwb2xhdGVUcmFuc2Zvcm1Dc3M7XG5leHBvcnRzLmludGVycG9sYXRlVHJhbnNmb3JtU3ZnID0gaW50ZXJwb2xhdGVUcmFuc2Zvcm1Tdmc7XG5leHBvcnRzLmludGVycG9sYXRlWm9vbSA9IGludGVycG9sYXRlWm9vbTtcbmV4cG9ydHMuaW50ZXJwb2xhdGVSZ2IgPSBpbnRlcnBvbGF0ZVJnYjtcbmV4cG9ydHMuaW50ZXJwb2xhdGVSZ2JCYXNpcyA9IHJnYkJhc2lzO1xuZXhwb3J0cy5pbnRlcnBvbGF0ZVJnYkJhc2lzQ2xvc2VkID0gcmdiQmFzaXNDbG9zZWQ7XG5leHBvcnRzLmludGVycG9sYXRlSHNsID0gaHNsJDI7XG5leHBvcnRzLmludGVycG9sYXRlSHNsTG9uZyA9IGhzbExvbmc7XG5leHBvcnRzLmludGVycG9sYXRlTGFiID0gbGFiJDE7XG5leHBvcnRzLmludGVycG9sYXRlSGNsID0gaGNsJDI7XG5leHBvcnRzLmludGVycG9sYXRlSGNsTG9uZyA9IGhjbExvbmc7XG5leHBvcnRzLmludGVycG9sYXRlQ3ViZWhlbGl4ID0gY3ViZWhlbGl4JDI7XG5leHBvcnRzLmludGVycG9sYXRlQ3ViZWhlbGl4TG9uZyA9IGN1YmVoZWxpeExvbmc7XG5leHBvcnRzLnF1YW50aXplID0gcXVhbnRpemU7XG5leHBvcnRzLnBhdGggPSBwYXRoO1xuZXhwb3J0cy5wb2x5Z29uQXJlYSA9IGFyZWEkMTtcbmV4cG9ydHMucG9seWdvbkNlbnRyb2lkID0gY2VudHJvaWQkMTtcbmV4cG9ydHMucG9seWdvbkh1bGwgPSBodWxsO1xuZXhwb3J0cy5wb2x5Z29uQ29udGFpbnMgPSBjb250YWlucyQxO1xuZXhwb3J0cy5wb2x5Z29uTGVuZ3RoID0gbGVuZ3RoJDI7XG5leHBvcnRzLnF1YWR0cmVlID0gcXVhZHRyZWU7XG5leHBvcnRzLnF1ZXVlID0gcXVldWU7XG5leHBvcnRzLnJhbmRvbVVuaWZvcm0gPSB1bmlmb3JtO1xuZXhwb3J0cy5yYW5kb21Ob3JtYWwgPSBub3JtYWw7XG5leHBvcnRzLnJhbmRvbUxvZ05vcm1hbCA9IGxvZ05vcm1hbDtcbmV4cG9ydHMucmFuZG9tQmF0ZXMgPSBiYXRlcztcbmV4cG9ydHMucmFuZG9tSXJ3aW5IYWxsID0gaXJ3aW5IYWxsO1xuZXhwb3J0cy5yYW5kb21FeHBvbmVudGlhbCA9IGV4cG9uZW50aWFsJDE7XG5leHBvcnRzLnJlcXVlc3QgPSByZXF1ZXN0O1xuZXhwb3J0cy5odG1sID0gaHRtbDtcbmV4cG9ydHMuanNvbiA9IGpzb247XG5leHBvcnRzLnRleHQgPSB0ZXh0O1xuZXhwb3J0cy54bWwgPSB4bWw7XG5leHBvcnRzLmNzdiA9IGNzdiQxO1xuZXhwb3J0cy50c3YgPSB0c3YkMTtcbmV4cG9ydHMuc2NhbGVCYW5kID0gYmFuZDtcbmV4cG9ydHMuc2NhbGVQb2ludCA9IHBvaW50JDE7XG5leHBvcnRzLnNjYWxlSWRlbnRpdHkgPSBpZGVudGl0eSQ2O1xuZXhwb3J0cy5zY2FsZUxpbmVhciA9IGxpbmVhciQyO1xuZXhwb3J0cy5zY2FsZUxvZyA9IGxvZyQxO1xuZXhwb3J0cy5zY2FsZU9yZGluYWwgPSBvcmRpbmFsO1xuZXhwb3J0cy5zY2FsZUltcGxpY2l0ID0gaW1wbGljaXQ7XG5leHBvcnRzLnNjYWxlUG93ID0gcG93JDE7XG5leHBvcnRzLnNjYWxlU3FydCA9IHNxcnQkMTtcbmV4cG9ydHMuc2NhbGVRdWFudGlsZSA9IHF1YW50aWxlO1xuZXhwb3J0cy5zY2FsZVF1YW50aXplID0gcXVhbnRpemUkMTtcbmV4cG9ydHMuc2NhbGVUaHJlc2hvbGQgPSB0aHJlc2hvbGQkMTtcbmV4cG9ydHMuc2NhbGVUaW1lID0gdGltZTtcbmV4cG9ydHMuc2NhbGVVdGMgPSB1dGNUaW1lO1xuZXhwb3J0cy5zY2hlbWVDYXRlZ29yeTEwID0gY2F0ZWdvcnkxMDtcbmV4cG9ydHMuc2NoZW1lQ2F0ZWdvcnkyMGIgPSBjYXRlZ29yeTIwYjtcbmV4cG9ydHMuc2NoZW1lQ2F0ZWdvcnkyMGMgPSBjYXRlZ29yeTIwYztcbmV4cG9ydHMuc2NoZW1lQ2F0ZWdvcnkyMCA9IGNhdGVnb3J5MjA7XG5leHBvcnRzLmludGVycG9sYXRlQ3ViZWhlbGl4RGVmYXVsdCA9IGN1YmVoZWxpeCQzO1xuZXhwb3J0cy5pbnRlcnBvbGF0ZVJhaW5ib3cgPSByYWluYm93JDE7XG5leHBvcnRzLmludGVycG9sYXRlV2FybSA9IHdhcm07XG5leHBvcnRzLmludGVycG9sYXRlQ29vbCA9IGNvb2w7XG5leHBvcnRzLmludGVycG9sYXRlVmlyaWRpcyA9IHZpcmlkaXM7XG5leHBvcnRzLmludGVycG9sYXRlTWFnbWEgPSBtYWdtYTtcbmV4cG9ydHMuaW50ZXJwb2xhdGVJbmZlcm5vID0gaW5mZXJubztcbmV4cG9ydHMuaW50ZXJwb2xhdGVQbGFzbWEgPSBwbGFzbWE7XG5leHBvcnRzLnNjYWxlU2VxdWVudGlhbCA9IHNlcXVlbnRpYWw7XG5leHBvcnRzLmNyZWF0b3IgPSBjcmVhdG9yO1xuZXhwb3J0cy5sb2NhbCA9IGxvY2FsJDE7XG5leHBvcnRzLm1hdGNoZXIgPSBtYXRjaGVyJDE7XG5leHBvcnRzLm1vdXNlID0gbW91c2U7XG5leHBvcnRzLm5hbWVzcGFjZSA9IG5hbWVzcGFjZTtcbmV4cG9ydHMubmFtZXNwYWNlcyA9IG5hbWVzcGFjZXM7XG5leHBvcnRzLnNlbGVjdCA9IHNlbGVjdDtcbmV4cG9ydHMuc2VsZWN0QWxsID0gc2VsZWN0QWxsO1xuZXhwb3J0cy5zZWxlY3Rpb24gPSBzZWxlY3Rpb247XG5leHBvcnRzLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5leHBvcnRzLnNlbGVjdG9yQWxsID0gc2VsZWN0b3JBbGw7XG5leHBvcnRzLnN0eWxlID0gc3R5bGVWYWx1ZTtcbmV4cG9ydHMudG91Y2ggPSB0b3VjaDtcbmV4cG9ydHMudG91Y2hlcyA9IHRvdWNoZXM7XG5leHBvcnRzLndpbmRvdyA9IGRlZmF1bHRWaWV3O1xuZXhwb3J0cy5jdXN0b21FdmVudCA9IGN1c3RvbUV2ZW50O1xuZXhwb3J0cy5hcmMgPSBhcmM7XG5leHBvcnRzLmFyZWEgPSBhcmVhJDI7XG5leHBvcnRzLmxpbmUgPSBsaW5lO1xuZXhwb3J0cy5waWUgPSBwaWU7XG5leHBvcnRzLmFyZWFSYWRpYWwgPSBhcmVhUmFkaWFsO1xuZXhwb3J0cy5yYWRpYWxBcmVhID0gYXJlYVJhZGlhbDtcbmV4cG9ydHMubGluZVJhZGlhbCA9IGxpbmVSYWRpYWwkMTtcbmV4cG9ydHMucmFkaWFsTGluZSA9IGxpbmVSYWRpYWwkMTtcbmV4cG9ydHMucG9pbnRSYWRpYWwgPSBwb2ludFJhZGlhbDtcbmV4cG9ydHMubGlua0hvcml6b250YWwgPSBsaW5rSG9yaXpvbnRhbDtcbmV4cG9ydHMubGlua1ZlcnRpY2FsID0gbGlua1ZlcnRpY2FsO1xuZXhwb3J0cy5saW5rUmFkaWFsID0gbGlua1JhZGlhbDtcbmV4cG9ydHMuc3ltYm9sID0gc3ltYm9sO1xuZXhwb3J0cy5zeW1ib2xzID0gc3ltYm9scztcbmV4cG9ydHMuc3ltYm9sQ2lyY2xlID0gY2lyY2xlJDI7XG5leHBvcnRzLnN5bWJvbENyb3NzID0gY3Jvc3MkMjtcbmV4cG9ydHMuc3ltYm9sRGlhbW9uZCA9IGRpYW1vbmQ7XG5leHBvcnRzLnN5bWJvbFNxdWFyZSA9IHNxdWFyZTtcbmV4cG9ydHMuc3ltYm9sU3RhciA9IHN0YXI7XG5leHBvcnRzLnN5bWJvbFRyaWFuZ2xlID0gdHJpYW5nbGU7XG5leHBvcnRzLnN5bWJvbFd5ZSA9IHd5ZTtcbmV4cG9ydHMuY3VydmVCYXNpc0Nsb3NlZCA9IGJhc2lzQ2xvc2VkJDE7XG5leHBvcnRzLmN1cnZlQmFzaXNPcGVuID0gYmFzaXNPcGVuO1xuZXhwb3J0cy5jdXJ2ZUJhc2lzID0gYmFzaXMkMjtcbmV4cG9ydHMuY3VydmVCdW5kbGUgPSBidW5kbGU7XG5leHBvcnRzLmN1cnZlQ2FyZGluYWxDbG9zZWQgPSBjYXJkaW5hbENsb3NlZDtcbmV4cG9ydHMuY3VydmVDYXJkaW5hbE9wZW4gPSBjYXJkaW5hbE9wZW47XG5leHBvcnRzLmN1cnZlQ2FyZGluYWwgPSBjYXJkaW5hbDtcbmV4cG9ydHMuY3VydmVDYXRtdWxsUm9tQ2xvc2VkID0gY2F0bXVsbFJvbUNsb3NlZDtcbmV4cG9ydHMuY3VydmVDYXRtdWxsUm9tT3BlbiA9IGNhdG11bGxSb21PcGVuO1xuZXhwb3J0cy5jdXJ2ZUNhdG11bGxSb20gPSBjYXRtdWxsUm9tO1xuZXhwb3J0cy5jdXJ2ZUxpbmVhckNsb3NlZCA9IGxpbmVhckNsb3NlZDtcbmV4cG9ydHMuY3VydmVMaW5lYXIgPSBjdXJ2ZUxpbmVhcjtcbmV4cG9ydHMuY3VydmVNb25vdG9uZVggPSBtb25vdG9uZVg7XG5leHBvcnRzLmN1cnZlTW9ub3RvbmVZID0gbW9ub3RvbmVZO1xuZXhwb3J0cy5jdXJ2ZU5hdHVyYWwgPSBuYXR1cmFsO1xuZXhwb3J0cy5jdXJ2ZVN0ZXAgPSBzdGVwO1xuZXhwb3J0cy5jdXJ2ZVN0ZXBBZnRlciA9IHN0ZXBBZnRlcjtcbmV4cG9ydHMuY3VydmVTdGVwQmVmb3JlID0gc3RlcEJlZm9yZTtcbmV4cG9ydHMuc3RhY2sgPSBzdGFjaztcbmV4cG9ydHMuc3RhY2tPZmZzZXRFeHBhbmQgPSBleHBhbmQ7XG5leHBvcnRzLnN0YWNrT2Zmc2V0RGl2ZXJnaW5nID0gZGl2ZXJnaW5nO1xuZXhwb3J0cy5zdGFja09mZnNldE5vbmUgPSBub25lJDE7XG5leHBvcnRzLnN0YWNrT2Zmc2V0U2lsaG91ZXR0ZSA9IHNpbGhvdWV0dGU7XG5leHBvcnRzLnN0YWNrT2Zmc2V0V2lnZ2xlID0gd2lnZ2xlO1xuZXhwb3J0cy5zdGFja09yZGVyQXNjZW5kaW5nID0gYXNjZW5kaW5nJDI7XG5leHBvcnRzLnN0YWNrT3JkZXJEZXNjZW5kaW5nID0gZGVzY2VuZGluZyQyO1xuZXhwb3J0cy5zdGFja09yZGVySW5zaWRlT3V0ID0gaW5zaWRlT3V0O1xuZXhwb3J0cy5zdGFja09yZGVyTm9uZSA9IG5vbmUkMjtcbmV4cG9ydHMuc3RhY2tPcmRlclJldmVyc2UgPSByZXZlcnNlO1xuZXhwb3J0cy50aW1lSW50ZXJ2YWwgPSBuZXdJbnRlcnZhbDtcbmV4cG9ydHMudGltZU1pbGxpc2Vjb25kID0gbWlsbGlzZWNvbmQ7XG5leHBvcnRzLnRpbWVNaWxsaXNlY29uZHMgPSBtaWxsaXNlY29uZHM7XG5leHBvcnRzLnV0Y01pbGxpc2Vjb25kID0gbWlsbGlzZWNvbmQ7XG5leHBvcnRzLnV0Y01pbGxpc2Vjb25kcyA9IG1pbGxpc2Vjb25kcztcbmV4cG9ydHMudGltZVNlY29uZCA9IHNlY29uZDtcbmV4cG9ydHMudGltZVNlY29uZHMgPSBzZWNvbmRzO1xuZXhwb3J0cy51dGNTZWNvbmQgPSBzZWNvbmQ7XG5leHBvcnRzLnV0Y1NlY29uZHMgPSBzZWNvbmRzO1xuZXhwb3J0cy50aW1lTWludXRlID0gbWludXRlO1xuZXhwb3J0cy50aW1lTWludXRlcyA9IG1pbnV0ZXM7XG5leHBvcnRzLnRpbWVIb3VyID0gaG91cjtcbmV4cG9ydHMudGltZUhvdXJzID0gaG91cnM7XG5leHBvcnRzLnRpbWVEYXkgPSBkYXk7XG5leHBvcnRzLnRpbWVEYXlzID0gZGF5cztcbmV4cG9ydHMudGltZVdlZWsgPSBzdW5kYXk7XG5leHBvcnRzLnRpbWVXZWVrcyA9IHN1bmRheXM7XG5leHBvcnRzLnRpbWVTdW5kYXkgPSBzdW5kYXk7XG5leHBvcnRzLnRpbWVTdW5kYXlzID0gc3VuZGF5cztcbmV4cG9ydHMudGltZU1vbmRheSA9IG1vbmRheTtcbmV4cG9ydHMudGltZU1vbmRheXMgPSBtb25kYXlzO1xuZXhwb3J0cy50aW1lVHVlc2RheSA9IHR1ZXNkYXk7XG5leHBvcnRzLnRpbWVUdWVzZGF5cyA9IHR1ZXNkYXlzO1xuZXhwb3J0cy50aW1lV2VkbmVzZGF5ID0gd2VkbmVzZGF5O1xuZXhwb3J0cy50aW1lV2VkbmVzZGF5cyA9IHdlZG5lc2RheXM7XG5leHBvcnRzLnRpbWVUaHVyc2RheSA9IHRodXJzZGF5O1xuZXhwb3J0cy50aW1lVGh1cnNkYXlzID0gdGh1cnNkYXlzO1xuZXhwb3J0cy50aW1lRnJpZGF5ID0gZnJpZGF5O1xuZXhwb3J0cy50aW1lRnJpZGF5cyA9IGZyaWRheXM7XG5leHBvcnRzLnRpbWVTYXR1cmRheSA9IHNhdHVyZGF5O1xuZXhwb3J0cy50aW1lU2F0dXJkYXlzID0gc2F0dXJkYXlzO1xuZXhwb3J0cy50aW1lTW9udGggPSBtb250aDtcbmV4cG9ydHMudGltZU1vbnRocyA9IG1vbnRocztcbmV4cG9ydHMudGltZVllYXIgPSB5ZWFyO1xuZXhwb3J0cy50aW1lWWVhcnMgPSB5ZWFycztcbmV4cG9ydHMudXRjTWludXRlID0gdXRjTWludXRlO1xuZXhwb3J0cy51dGNNaW51dGVzID0gdXRjTWludXRlcztcbmV4cG9ydHMudXRjSG91ciA9IHV0Y0hvdXI7XG5leHBvcnRzLnV0Y0hvdXJzID0gdXRjSG91cnM7XG5leHBvcnRzLnV0Y0RheSA9IHV0Y0RheTtcbmV4cG9ydHMudXRjRGF5cyA9IHV0Y0RheXM7XG5leHBvcnRzLnV0Y1dlZWsgPSB1dGNTdW5kYXk7XG5leHBvcnRzLnV0Y1dlZWtzID0gdXRjU3VuZGF5cztcbmV4cG9ydHMudXRjU3VuZGF5ID0gdXRjU3VuZGF5O1xuZXhwb3J0cy51dGNTdW5kYXlzID0gdXRjU3VuZGF5cztcbmV4cG9ydHMudXRjTW9uZGF5ID0gdXRjTW9uZGF5O1xuZXhwb3J0cy51dGNNb25kYXlzID0gdXRjTW9uZGF5cztcbmV4cG9ydHMudXRjVHVlc2RheSA9IHV0Y1R1ZXNkYXk7XG5leHBvcnRzLnV0Y1R1ZXNkYXlzID0gdXRjVHVlc2RheXM7XG5leHBvcnRzLnV0Y1dlZG5lc2RheSA9IHV0Y1dlZG5lc2RheTtcbmV4cG9ydHMudXRjV2VkbmVzZGF5cyA9IHV0Y1dlZG5lc2RheXM7XG5leHBvcnRzLnV0Y1RodXJzZGF5ID0gdXRjVGh1cnNkYXk7XG5leHBvcnRzLnV0Y1RodXJzZGF5cyA9IHV0Y1RodXJzZGF5cztcbmV4cG9ydHMudXRjRnJpZGF5ID0gdXRjRnJpZGF5O1xuZXhwb3J0cy51dGNGcmlkYXlzID0gdXRjRnJpZGF5cztcbmV4cG9ydHMudXRjU2F0dXJkYXkgPSB1dGNTYXR1cmRheTtcbmV4cG9ydHMudXRjU2F0dXJkYXlzID0gdXRjU2F0dXJkYXlzO1xuZXhwb3J0cy51dGNNb250aCA9IHV0Y01vbnRoO1xuZXhwb3J0cy51dGNNb250aHMgPSB1dGNNb250aHM7XG5leHBvcnRzLnV0Y1llYXIgPSB1dGNZZWFyO1xuZXhwb3J0cy51dGNZZWFycyA9IHV0Y1llYXJzO1xuZXhwb3J0cy50aW1lRm9ybWF0RGVmYXVsdExvY2FsZSA9IGRlZmF1bHRMb2NhbGUkMTtcbmV4cG9ydHMudGltZUZvcm1hdExvY2FsZSA9IGZvcm1hdExvY2FsZSQxO1xuZXhwb3J0cy5pc29Gb3JtYXQgPSBmb3JtYXRJc287XG5leHBvcnRzLmlzb1BhcnNlID0gcGFyc2VJc287XG5leHBvcnRzLm5vdyA9IG5vdztcbmV4cG9ydHMudGltZXIgPSB0aW1lcjtcbmV4cG9ydHMudGltZXJGbHVzaCA9IHRpbWVyRmx1c2g7XG5leHBvcnRzLnRpbWVvdXQgPSB0aW1lb3V0JDE7XG5leHBvcnRzLmludGVydmFsID0gaW50ZXJ2YWwkMTtcbmV4cG9ydHMudHJhbnNpdGlvbiA9IHRyYW5zaXRpb247XG5leHBvcnRzLmFjdGl2ZSA9IGFjdGl2ZTtcbmV4cG9ydHMuaW50ZXJydXB0ID0gaW50ZXJydXB0O1xuZXhwb3J0cy52b3Jvbm9pID0gdm9yb25vaTtcbmV4cG9ydHMuem9vbSA9IHpvb207XG5leHBvcnRzLnpvb21UcmFuc2Zvcm0gPSB0cmFuc2Zvcm0kMTtcbmV4cG9ydHMuem9vbUlkZW50aXR5ID0gaWRlbnRpdHkkODtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxufSkpKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vZDMvYnVpbGQvZDMuanMiLCJmdW5jdGlvbiB0b09iaihzb3VyY2UpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHNvdXJjZSkucmVkdWNlKGZ1bmN0aW9uIChvdXRwdXQsIGtleSkge1xuICAgIHZhciBwYXJlbnRLZXkgPSBrZXkubWF0Y2goL1teXFxbXSovaSk7XG4gICAgdmFyIHBhdGhzID0ga2V5Lm1hdGNoKC9cXFsuKj9cXF0vZykgfHwgW107XG4gICAgcGF0aHMgPSBbcGFyZW50S2V5WzBdXS5jb25jYXQocGF0aHMpLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4ga2V5LnJlcGxhY2UoL1xcW3xcXF0vZywgJycpO1xuICAgIH0pO1xuICAgIHZhciBjdXJyZW50UGF0aCA9IG91dHB1dDtcbiAgICB3aGlsZSAocGF0aHMubGVuZ3RoKSB7XG4gICAgICB2YXIgcGF0aEtleSA9IHBhdGhzLnNoaWZ0KCk7XG5cbiAgICAgIGlmIChwYXRoS2V5IGluIGN1cnJlbnRQYXRoKSB7XG4gICAgICAgIGN1cnJlbnRQYXRoID0gY3VycmVudFBhdGhbcGF0aEtleV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdXJyZW50UGF0aFtwYXRoS2V5XSA9IHBhdGhzLmxlbmd0aCA/IGlzTmFOKHBhdGhzWzBdKSA/IHt9IDogW10gOiBzb3VyY2Vba2V5XTtcbiAgICAgICAgY3VycmVudFBhdGggPSBjdXJyZW50UGF0aFtwYXRoS2V5XTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb3V0cHV0O1xuICB9LCB7fSk7XG59XG5cbmZ1bmN0aW9uIGZyb21PYmoob2JqKSB7XG4gIGZ1bmN0aW9uIHJlY3VyKG5ld09iaiwgcHJvcE5hbWUsIGN1cnJWYWwpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjdXJyVmFsKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoY3VyclZhbCkgPT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgICBPYmplY3Qua2V5cyhjdXJyVmFsKS5mb3JFYWNoKGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgcmVjdXIobmV3T2JqLCBwcm9wTmFtZSArIFwiW1wiICsgdiArIFwiXVwiLCBjdXJyVmFsW3ZdKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG5ld09iajtcbiAgICB9XG5cbiAgICBuZXdPYmpbcHJvcE5hbWVdID0gY3VyclZhbDtcbiAgICByZXR1cm4gbmV3T2JqO1xuICB9XG5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICByZXR1cm4ga2V5cy5yZWR1Y2UoZnVuY3Rpb24obmV3T2JqLCBwcm9wTmFtZSkge1xuICAgIHJldHVybiByZWN1cihuZXdPYmosIHByb3BOYW1lLCBvYmpbcHJvcE5hbWVdKTtcbiAgfSwge30pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZnJvbU9iajogZnJvbU9iaixcbiAgdG9PYmo6IHRvT2JqXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9mb3JtLWRhdGEtdG8tb2JqZWN0L2luZGV4LmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgUmVhY3QgPSBnbG9iYWwuUmVhY3QgfHwgcmVxdWlyZSgncmVhY3QnKTtcbnZhciBjcmVhdGVSZWFjdENsYXNzID0gcmVxdWlyZSgnY3JlYXRlLXJlYWN0LWNsYXNzJyk7XG52YXIgTWl4aW4gPSByZXF1aXJlKCcuL01peGluLmpzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChDb21wb25lbnQpIHtcbiAgICByZXR1cm4gY3JlYXRlUmVhY3RDbGFzcyh7XG4gICAgICBtaXhpbnM6IFtNaXhpbl0sXG4gICAgICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgICAgICAgc2V0VmFsaWRhdGlvbnM6IHRoaXMuc2V0VmFsaWRhdGlvbnMsXG4gICAgICAgICAgc2V0VmFsdWU6IHRoaXMuc2V0VmFsdWUsXG4gICAgICAgICAgcmVzZXRWYWx1ZTogdGhpcy5yZXNldFZhbHVlLFxuICAgICAgICAgIGdldFZhbHVlOiB0aGlzLmdldFZhbHVlLFxuICAgICAgICAgIGhhc1ZhbHVlOiB0aGlzLmhhc1ZhbHVlLFxuICAgICAgICAgIGdldEVycm9yTWVzc2FnZTogdGhpcy5nZXRFcnJvck1lc3NhZ2UsXG4gICAgICAgICAgZ2V0RXJyb3JNZXNzYWdlczogdGhpcy5nZXRFcnJvck1lc3NhZ2VzLFxuICAgICAgICAgIGlzRm9ybURpc2FibGVkOiB0aGlzLmlzRm9ybURpc2FibGVkLFxuICAgICAgICAgIGlzVmFsaWQ6IHRoaXMuaXNWYWxpZCxcbiAgICAgICAgICBpc1ByaXN0aW5lOiB0aGlzLmlzUHJpc3RpbmUsXG4gICAgICAgICAgaXNGb3JtU3VibWl0dGVkOiB0aGlzLmlzRm9ybVN1Ym1pdHRlZCxcbiAgICAgICAgICBpc1JlcXVpcmVkOiB0aGlzLmlzUmVxdWlyZWQsXG4gICAgICAgICAgc2hvd1JlcXVpcmVkOiB0aGlzLnNob3dSZXF1aXJlZCxcbiAgICAgICAgICBzaG93RXJyb3I6IHRoaXMuc2hvd0Vycm9yLFxuICAgICAgICAgIGlzVmFsaWRWYWx1ZTogdGhpcy5pc1ZhbGlkVmFsdWVcbiAgICAgICAgfSwgdGhpcy5wcm9wcykpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2Zvcm1zeS1yZWFjdC9saWIvRGVjb3JhdG9yLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgUmVhY3QgPSBnbG9iYWwuUmVhY3QgfHwgcmVxdWlyZSgncmVhY3QnKTtcbnZhciBjcmVhdGVSZWFjdENsYXNzID0gcmVxdWlyZSgnY3JlYXRlLXJlYWN0LWNsYXNzJyk7XG52YXIgTWl4aW4gPSByZXF1aXJlKCcuL01peGluLmpzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDb21wb25lbnQpIHtcbiAgcmV0dXJuIGNyZWF0ZVJlYWN0Q2xhc3Moe1xuICAgIGRpc3BsYXlOYW1lOiAnRm9ybXN5KCcgKyBnZXREaXNwbGF5TmFtZShDb21wb25lbnQpICsgJyknLFxuICAgIG1peGluczogW01peGluXSxcblxuICAgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIGlubmVyUmVmID0gdGhpcy5wcm9wcy5pbm5lclJlZjtcblxuICAgICAgdmFyIHByb3BzRm9yRWxlbWVudCA9IF9leHRlbmRzKHtcbiAgICAgICAgc2V0VmFsaWRhdGlvbnM6IHRoaXMuc2V0VmFsaWRhdGlvbnMsXG4gICAgICAgIHNldFZhbHVlOiB0aGlzLnNldFZhbHVlLFxuICAgICAgICByZXNldFZhbHVlOiB0aGlzLnJlc2V0VmFsdWUsXG4gICAgICAgIGdldFZhbHVlOiB0aGlzLmdldFZhbHVlLFxuICAgICAgICBoYXNWYWx1ZTogdGhpcy5oYXNWYWx1ZSxcbiAgICAgICAgZ2V0RXJyb3JNZXNzYWdlOiB0aGlzLmdldEVycm9yTWVzc2FnZSxcbiAgICAgICAgZ2V0RXJyb3JNZXNzYWdlczogdGhpcy5nZXRFcnJvck1lc3NhZ2VzLFxuICAgICAgICBpc0Zvcm1EaXNhYmxlZDogdGhpcy5pc0Zvcm1EaXNhYmxlZCxcbiAgICAgICAgaXNWYWxpZDogdGhpcy5pc1ZhbGlkLFxuICAgICAgICBpc1ByaXN0aW5lOiB0aGlzLmlzUHJpc3RpbmUsXG4gICAgICAgIGlzRm9ybVN1Ym1pdHRlZDogdGhpcy5pc0Zvcm1TdWJtaXR0ZWQsXG4gICAgICAgIGlzUmVxdWlyZWQ6IHRoaXMuaXNSZXF1aXJlZCxcbiAgICAgICAgc2hvd1JlcXVpcmVkOiB0aGlzLnNob3dSZXF1aXJlZCxcbiAgICAgICAgc2hvd0Vycm9yOiB0aGlzLnNob3dFcnJvcixcbiAgICAgICAgaXNWYWxpZFZhbHVlOiB0aGlzLmlzVmFsaWRWYWx1ZVxuICAgICAgfSwgdGhpcy5wcm9wcyk7XG5cbiAgICAgIGlmIChpbm5lclJlZikge1xuICAgICAgICBwcm9wc0ZvckVsZW1lbnQucmVmID0gaW5uZXJSZWY7XG4gICAgICB9XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIHByb3BzRm9yRWxlbWVudCk7XG4gICAgfVxuICB9KTtcbn07XG5cbmZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKENvbXBvbmVudCkge1xuICByZXR1cm4gQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8ICh0eXBlb2YgQ29tcG9uZW50ID09PSAnc3RyaW5nJyA/IENvbXBvbmVudCA6ICdDb21wb25lbnQnKTtcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2Zvcm1zeS1yZWFjdC9saWIvSE9DLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgUHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscy5qcycpO1xudmFyIFJlYWN0ID0gZ2xvYmFsLlJlYWN0IHx8IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBjb252ZXJ0VmFsaWRhdGlvbnNUb09iamVjdCA9IGZ1bmN0aW9uIGNvbnZlcnRWYWxpZGF0aW9uc1RvT2JqZWN0KHZhbGlkYXRpb25zKSB7XG5cbiAgaWYgKHR5cGVvZiB2YWxpZGF0aW9ucyA9PT0gJ3N0cmluZycpIHtcblxuICAgIHJldHVybiB2YWxpZGF0aW9ucy5zcGxpdCgvXFwsKD8hW157XFxbXSpbfVxcXV0pL2cpLnJlZHVjZShmdW5jdGlvbiAodmFsaWRhdGlvbnMsIHZhbGlkYXRpb24pIHtcbiAgICAgIHZhciBhcmdzID0gdmFsaWRhdGlvbi5zcGxpdCgnOicpO1xuICAgICAgdmFyIHZhbGlkYXRlTWV0aG9kID0gYXJncy5zaGlmdCgpO1xuXG4gICAgICBhcmdzID0gYXJncy5tYXAoZnVuY3Rpb24gKGFyZykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKGFyZyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICByZXR1cm4gYXJnOyAvLyBJdCBpcyBhIHN0cmluZyBpZiBpdCBjYW4gbm90IHBhcnNlIGl0XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAoYXJncy5sZW5ndGggPiAxKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRm9ybXN5IGRvZXMgbm90IHN1cHBvcnQgbXVsdGlwbGUgYXJncyBvbiBzdHJpbmcgdmFsaWRhdGlvbnMuIFVzZSBvYmplY3QgZm9ybWF0IG9mIHZhbGlkYXRpb25zIGluc3RlYWQuJyk7XG4gICAgICB9XG5cbiAgICAgIHZhbGlkYXRpb25zW3ZhbGlkYXRlTWV0aG9kXSA9IGFyZ3MubGVuZ3RoID8gYXJnc1swXSA6IHRydWU7XG4gICAgICByZXR1cm4gdmFsaWRhdGlvbnM7XG4gICAgfSwge30pO1xuICB9XG5cbiAgcmV0dXJuIHZhbGlkYXRpb25zIHx8IHt9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBfdmFsdWU6IHRoaXMucHJvcHMudmFsdWUsXG4gICAgICBfaXNSZXF1aXJlZDogZmFsc2UsXG4gICAgICBfaXNWYWxpZDogdHJ1ZSxcbiAgICAgIF9pc1ByaXN0aW5lOiB0cnVlLFxuICAgICAgX3ByaXN0aW5lVmFsdWU6IHRoaXMucHJvcHMudmFsdWUsXG4gICAgICBfdmFsaWRhdGlvbkVycm9yOiBbXSxcbiAgICAgIF9leHRlcm5hbEVycm9yOiBudWxsLFxuICAgICAgX2Zvcm1TdWJtaXR0ZWQ6IGZhbHNlXG4gICAgfTtcbiAgfSxcbiAgY29udGV4dFR5cGVzOiB7XG4gICAgZm9ybXN5OiBQcm9wVHlwZXMub2JqZWN0IC8vIFdoYXQgYWJvdXQgcmVxdWlyZWQ/XG4gIH0sXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7XG4gICAgICB2YWxpZGF0aW9uRXJyb3I6ICcnLFxuICAgICAgdmFsaWRhdGlvbkVycm9yczoge31cbiAgICB9O1xuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxNb3VudDogZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHZhciBjb25maWd1cmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLnNldFZhbGlkYXRpb25zKHRoaXMucHJvcHMudmFsaWRhdGlvbnMsIHRoaXMucHJvcHMucmVxdWlyZWQpO1xuXG4gICAgICAvLyBQYXNzIGEgZnVuY3Rpb24gaW5zdGVhZD9cbiAgICAgIHRoaXMuY29udGV4dC5mb3Jtc3kuYXR0YWNoVG9Gb3JtKHRoaXMpO1xuICAgICAgLy90aGlzLnByb3BzLl9hdHRhY2hUb0Zvcm0odGhpcyk7XG4gICAgfS5iaW5kKHRoaXMpO1xuXG4gICAgaWYgKCF0aGlzLnByb3BzLm5hbWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRm9ybSBJbnB1dCByZXF1aXJlcyBhIG5hbWUgcHJvcGVydHkgd2hlbiB1c2VkJyk7XG4gICAgfVxuXG4gICAgLypcbiAgICBpZiAoIXRoaXMucHJvcHMuX2F0dGFjaFRvRm9ybSkge1xuICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNNb3VudGVkKCkpIHJldHVybjtcbiAgICAgICAgaWYgKCF0aGlzLnByb3BzLl9hdHRhY2hUb0Zvcm0pIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Zvcm0gTWl4aW4gcmVxdWlyZXMgY29tcG9uZW50IHRvIGJlIG5lc3RlZCBpbiBhIEZvcm0nKTtcbiAgICAgICAgfVxuICAgICAgICBjb25maWd1cmUoKTtcbiAgICAgIH0uYmluZCh0aGlzKSwgMCk7XG4gICAgfVxuICAgICovXG4gICAgY29uZmlndXJlKCk7XG4gIH0sXG5cbiAgLy8gV2UgaGF2ZSB0byBtYWtlIHRoZSB2YWxpZGF0ZSBtZXRob2QgaXMga2VwdCB3aGVuIG5ldyBwcm9wcyBhcmUgYWRkZWRcbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICB0aGlzLnNldFZhbGlkYXRpb25zKG5leHRQcm9wcy52YWxpZGF0aW9ucywgbmV4dFByb3BzLnJlcXVpcmVkKTtcbiAgfSxcblxuICBjb21wb25lbnREaWRVcGRhdGU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcblxuICAgIC8vIElmIHRoZSB2YWx1ZSBwYXNzZWQgaGFzIGNoYW5nZWQsIHNldCBpdC4gSWYgdmFsdWUgaXMgbm90IHBhc3NlZCBpdCB3aWxsXG4gICAgLy8gaW50ZXJuYWxseSB1cGRhdGUsIGFuZCB0aGlzIHdpbGwgbmV2ZXIgcnVuXG4gICAgaWYgKCF1dGlscy5pc1NhbWUodGhpcy5wcm9wcy52YWx1ZSwgcHJldlByb3BzLnZhbHVlKSkge1xuICAgICAgdGhpcy5zZXRWYWx1ZSh0aGlzLnByb3BzLnZhbHVlKTtcbiAgICB9XG5cbiAgICAvLyBJZiB2YWxpZGF0aW9ucyBvciByZXF1aXJlZCBpcyBjaGFuZ2VkLCBydW4gYSBuZXcgdmFsaWRhdGlvblxuICAgIGlmICghdXRpbHMuaXNTYW1lKHRoaXMucHJvcHMudmFsaWRhdGlvbnMsIHByZXZQcm9wcy52YWxpZGF0aW9ucykgfHwgIXV0aWxzLmlzU2FtZSh0aGlzLnByb3BzLnJlcXVpcmVkLCBwcmV2UHJvcHMucmVxdWlyZWQpKSB7XG4gICAgICB0aGlzLmNvbnRleHQuZm9ybXN5LnZhbGlkYXRlKHRoaXMpO1xuICAgIH1cbiAgfSxcblxuICAvLyBEZXRhY2ggaXQgd2hlbiBjb21wb25lbnQgdW5tb3VudHNcbiAgY29tcG9uZW50V2lsbFVubW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuY29udGV4dC5mb3Jtc3kuZGV0YWNoRnJvbUZvcm0odGhpcyk7XG4gICAgLy90aGlzLnByb3BzLl9kZXRhY2hGcm9tRm9ybSh0aGlzKTtcbiAgfSxcblxuICBzZXRWYWxpZGF0aW9uczogZnVuY3Rpb24gc2V0VmFsaWRhdGlvbnModmFsaWRhdGlvbnMsIHJlcXVpcmVkKSB7XG5cbiAgICAvLyBBZGQgdmFsaWRhdGlvbnMgdG8gdGhlIHN0b3JlIGl0c2VsZiBhcyB0aGUgcHJvcHMgb2JqZWN0IGNhbiBub3QgYmUgbW9kaWZpZWRcbiAgICB0aGlzLl92YWxpZGF0aW9ucyA9IGNvbnZlcnRWYWxpZGF0aW9uc1RvT2JqZWN0KHZhbGlkYXRpb25zKSB8fCB7fTtcbiAgICB0aGlzLl9yZXF1aXJlZFZhbGlkYXRpb25zID0gcmVxdWlyZWQgPT09IHRydWUgPyB7IGlzRGVmYXVsdFJlcXVpcmVkVmFsdWU6IHRydWUgfSA6IGNvbnZlcnRWYWxpZGF0aW9uc1RvT2JqZWN0KHJlcXVpcmVkKTtcbiAgfSxcblxuICAvLyBXZSB2YWxpZGF0ZSBhZnRlciB0aGUgdmFsdWUgaGFzIGJlZW4gc2V0XG4gIHNldFZhbHVlOiBmdW5jdGlvbiBzZXRWYWx1ZSh2YWx1ZSkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgX3ZhbHVlOiB2YWx1ZSxcbiAgICAgIF9pc1ByaXN0aW5lOiBmYWxzZVxuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuY29udGV4dC5mb3Jtc3kudmFsaWRhdGUodGhpcyk7XG4gICAgICAvL3RoaXMucHJvcHMuX3ZhbGlkYXRlKHRoaXMpO1xuICAgIH0uYmluZCh0aGlzKSk7XG4gIH0sXG4gIHJlc2V0VmFsdWU6IGZ1bmN0aW9uIHJlc2V0VmFsdWUoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBfdmFsdWU6IHRoaXMuc3RhdGUuX3ByaXN0aW5lVmFsdWUsXG4gICAgICBfaXNQcmlzdGluZTogdHJ1ZVxuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuY29udGV4dC5mb3Jtc3kudmFsaWRhdGUodGhpcyk7XG4gICAgICAvL3RoaXMucHJvcHMuX3ZhbGlkYXRlKHRoaXMpO1xuICAgIH0pO1xuICB9LFxuICBnZXRWYWx1ZTogZnVuY3Rpb24gZ2V0VmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuX3ZhbHVlO1xuICB9LFxuICBoYXNWYWx1ZTogZnVuY3Rpb24gaGFzVmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuX3ZhbHVlICE9PSAnJztcbiAgfSxcbiAgZ2V0RXJyb3JNZXNzYWdlOiBmdW5jdGlvbiBnZXRFcnJvck1lc3NhZ2UoKSB7XG4gICAgdmFyIG1lc3NhZ2VzID0gdGhpcy5nZXRFcnJvck1lc3NhZ2VzKCk7XG4gICAgcmV0dXJuIG1lc3NhZ2VzLmxlbmd0aCA/IG1lc3NhZ2VzWzBdIDogbnVsbDtcbiAgfSxcbiAgZ2V0RXJyb3JNZXNzYWdlczogZnVuY3Rpb24gZ2V0RXJyb3JNZXNzYWdlcygpIHtcbiAgICByZXR1cm4gIXRoaXMuaXNWYWxpZCgpIHx8IHRoaXMuc2hvd1JlcXVpcmVkKCkgPyB0aGlzLnN0YXRlLl9leHRlcm5hbEVycm9yIHx8IHRoaXMuc3RhdGUuX3ZhbGlkYXRpb25FcnJvciB8fCBbXSA6IFtdO1xuICB9LFxuICBpc0Zvcm1EaXNhYmxlZDogZnVuY3Rpb24gaXNGb3JtRGlzYWJsZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dC5mb3Jtc3kuaXNGb3JtRGlzYWJsZWQoKTtcbiAgICAvL3JldHVybiB0aGlzLnByb3BzLl9pc0Zvcm1EaXNhYmxlZCgpO1xuICB9LFxuICBpc1ZhbGlkOiBmdW5jdGlvbiBpc1ZhbGlkKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlLl9pc1ZhbGlkO1xuICB9LFxuICBpc1ByaXN0aW5lOiBmdW5jdGlvbiBpc1ByaXN0aW5lKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlLl9pc1ByaXN0aW5lO1xuICB9LFxuICBpc0Zvcm1TdWJtaXR0ZWQ6IGZ1bmN0aW9uIGlzRm9ybVN1Ym1pdHRlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5fZm9ybVN1Ym1pdHRlZDtcbiAgfSxcbiAgaXNSZXF1aXJlZDogZnVuY3Rpb24gaXNSZXF1aXJlZCgpIHtcbiAgICByZXR1cm4gISF0aGlzLnByb3BzLnJlcXVpcmVkO1xuICB9LFxuICBzaG93UmVxdWlyZWQ6IGZ1bmN0aW9uIHNob3dSZXF1aXJlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5faXNSZXF1aXJlZDtcbiAgfSxcbiAgc2hvd0Vycm9yOiBmdW5jdGlvbiBzaG93RXJyb3IoKSB7XG4gICAgcmV0dXJuICF0aGlzLnNob3dSZXF1aXJlZCgpICYmICF0aGlzLmlzVmFsaWQoKTtcbiAgfSxcbiAgaXNWYWxpZFZhbHVlOiBmdW5jdGlvbiBpc1ZhbGlkVmFsdWUodmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0LmZvcm1zeS5pc1ZhbGlkVmFsdWUuY2FsbChudWxsLCB0aGlzLCB2YWx1ZSk7XG4gICAgLy9yZXR1cm4gdGhpcy5wcm9wcy5faXNWYWxpZFZhbHVlLmNhbGwobnVsbCwgdGhpcywgdmFsdWUpO1xuICB9XG59O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vZm9ybXN5LXJlYWN0L2xpYi9NaXhpbi5qcyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbnZhciBQcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG52YXIgUmVhY3QgPSBnbG9iYWwuUmVhY3QgfHwgcmVxdWlyZSgncmVhY3QnKTtcbnZhciBjcmVhdGVSZWFjdENsYXNzID0gcmVxdWlyZSgnY3JlYXRlLXJlYWN0LWNsYXNzJyk7XG52YXIgRm9ybXN5ID0ge307XG52YXIgdmFsaWRhdGlvblJ1bGVzID0gcmVxdWlyZSgnLi92YWxpZGF0aW9uUnVsZXMuanMnKTtcbnZhciBmb3JtRGF0YVRvT2JqZWN0ID0gcmVxdWlyZSgnZm9ybS1kYXRhLXRvLW9iamVjdCcpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscy5qcycpO1xudmFyIE1peGluID0gcmVxdWlyZSgnLi9NaXhpbi5qcycpO1xudmFyIEhPQyA9IHJlcXVpcmUoJy4vSE9DLmpzJyk7XG52YXIgRGVjb3JhdG9yID0gcmVxdWlyZSgnLi9EZWNvcmF0b3IuanMnKTtcbnZhciBvcHRpb25zID0ge307XG52YXIgZW1wdHlBcnJheSA9IFtdO1xuXG5Gb3Jtc3kuTWl4aW4gPSBNaXhpbjtcbkZvcm1zeS5IT0MgPSBIT0M7XG5Gb3Jtc3kuRGVjb3JhdG9yID0gRGVjb3JhdG9yO1xuXG5Gb3Jtc3kuZGVmYXVsdHMgPSBmdW5jdGlvbiAocGFzc2VkT3B0aW9ucykge1xuICBvcHRpb25zID0gcGFzc2VkT3B0aW9ucztcbn07XG5cbkZvcm1zeS5hZGRWYWxpZGF0aW9uUnVsZSA9IGZ1bmN0aW9uIChuYW1lLCBmdW5jKSB7XG4gIHZhbGlkYXRpb25SdWxlc1tuYW1lXSA9IGZ1bmM7XG59O1xuXG5Gb3Jtc3kuRm9ybSA9IGNyZWF0ZVJlYWN0Q2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ0Zvcm1zeScsXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpc1ZhbGlkOiB0cnVlLFxuICAgICAgaXNTdWJtaXR0aW5nOiBmYWxzZSxcbiAgICAgIGNhbkNoYW5nZTogZmFsc2VcbiAgICB9O1xuICB9LFxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgb25TdWNjZXNzOiBmdW5jdGlvbiBvblN1Y2Nlc3MoKSB7fSxcbiAgICAgIG9uRXJyb3I6IGZ1bmN0aW9uIG9uRXJyb3IoKSB7fSxcbiAgICAgIG9uU3VibWl0OiBmdW5jdGlvbiBvblN1Ym1pdCgpIHt9LFxuICAgICAgb25WYWxpZFN1Ym1pdDogZnVuY3Rpb24gb25WYWxpZFN1Ym1pdCgpIHt9LFxuICAgICAgb25JbnZhbGlkU3VibWl0OiBmdW5jdGlvbiBvbkludmFsaWRTdWJtaXQoKSB7fSxcbiAgICAgIG9uVmFsaWQ6IGZ1bmN0aW9uIG9uVmFsaWQoKSB7fSxcbiAgICAgIG9uSW52YWxpZDogZnVuY3Rpb24gb25JbnZhbGlkKCkge30sXG4gICAgICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UoKSB7fSxcbiAgICAgIHZhbGlkYXRpb25FcnJvcnM6IG51bGwsXG4gICAgICBwcmV2ZW50RXh0ZXJuYWxJbnZhbGlkYXRpb246IGZhbHNlXG4gICAgfTtcbiAgfSxcblxuICBjaGlsZENvbnRleHRUeXBlczoge1xuICAgIGZvcm1zeTogUHJvcFR5cGVzLm9iamVjdFxuICB9LFxuICBnZXRDaGlsZENvbnRleHQ6IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGZvcm1zeToge1xuICAgICAgICBhdHRhY2hUb0Zvcm06IHRoaXMuYXR0YWNoVG9Gb3JtLFxuICAgICAgICBkZXRhY2hGcm9tRm9ybTogdGhpcy5kZXRhY2hGcm9tRm9ybSxcbiAgICAgICAgdmFsaWRhdGU6IHRoaXMudmFsaWRhdGUsXG4gICAgICAgIGlzRm9ybURpc2FibGVkOiB0aGlzLmlzRm9ybURpc2FibGVkLFxuICAgICAgICBpc1ZhbGlkVmFsdWU6IGZ1bmN0aW9uIGlzVmFsaWRWYWx1ZShjb21wb25lbnQsIHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLnJ1blZhbGlkYXRpb24oY29tcG9uZW50LCB2YWx1ZSkuaXNWYWxpZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH0sXG5cbiAgLy8gQWRkIGEgbWFwIHRvIHN0b3JlIHRoZSBpbnB1dHMgb2YgdGhlIGZvcm0sIGEgbW9kZWwgdG8gc3RvcmVcbiAgLy8gdGhlIHZhbHVlcyBvZiB0aGUgZm9ybSBhbmQgcmVnaXN0ZXIgY2hpbGQgaW5wdXRzXG4gIGNvbXBvbmVudFdpbGxNb3VudDogZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHRoaXMuaW5wdXRzID0gW107XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMudmFsaWRhdGVGb3JtKCk7XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbFVwZGF0ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVwZGF0ZSgpIHtcbiAgICAvLyBLZWVwIGEgcmVmZXJlbmNlIHRvIGlucHV0IG5hbWVzIGJlZm9yZSBmb3JtIHVwZGF0ZXMsXG4gICAgLy8gdG8gY2hlY2sgaWYgaW5wdXRzIGhhcyBjaGFuZ2VkIGFmdGVyIHJlbmRlclxuICAgIHRoaXMucHJldklucHV0TmFtZXMgPSB0aGlzLmlucHV0cy5tYXAoZnVuY3Rpb24gKGNvbXBvbmVudCkge1xuICAgICAgcmV0dXJuIGNvbXBvbmVudC5wcm9wcy5uYW1lO1xuICAgIH0pO1xuICB9LFxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuXG4gICAgaWYgKHRoaXMucHJvcHMudmFsaWRhdGlvbkVycm9ycyAmJiBfdHlwZW9mKHRoaXMucHJvcHMudmFsaWRhdGlvbkVycm9ycykgPT09ICdvYmplY3QnICYmIE9iamVjdC5rZXlzKHRoaXMucHJvcHMudmFsaWRhdGlvbkVycm9ycykubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5zZXRJbnB1dFZhbGlkYXRpb25FcnJvcnModGhpcy5wcm9wcy52YWxpZGF0aW9uRXJyb3JzKTtcbiAgICB9XG5cbiAgICB2YXIgbmV3SW5wdXROYW1lcyA9IHRoaXMuaW5wdXRzLm1hcChmdW5jdGlvbiAoY29tcG9uZW50KSB7XG4gICAgICByZXR1cm4gY29tcG9uZW50LnByb3BzLm5hbWU7XG4gICAgfSk7XG4gICAgaWYgKHV0aWxzLmFycmF5c0RpZmZlcih0aGlzLnByZXZJbnB1dE5hbWVzLCBuZXdJbnB1dE5hbWVzKSkge1xuICAgICAgdGhpcy52YWxpZGF0ZUZvcm0oKTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gQWxsb3cgcmVzZXR0aW5nIHRvIHNwZWNpZmllZCBkYXRhXG4gIHJlc2V0OiBmdW5jdGlvbiByZXNldChkYXRhKSB7XG4gICAgdGhpcy5zZXRGb3JtUHJpc3RpbmUodHJ1ZSk7XG4gICAgdGhpcy5yZXNldE1vZGVsKGRhdGEpO1xuICB9LFxuXG4gIC8vIFVwZGF0ZSBtb2RlbCwgc3VibWl0IHRvIHVybCBwcm9wIGFuZCBzZW5kIHRoZSBtb2RlbFxuICBzdWJtaXQ6IGZ1bmN0aW9uIHN1Ym1pdChldmVudCkge1xuXG4gICAgZXZlbnQgJiYgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIC8vIFRyaWdnZXIgZm9ybSBhcyBub3QgcHJpc3RpbmUuXG4gICAgLy8gSWYgYW55IGlucHV0cyBoYXZlIG5vdCBiZWVuIHRvdWNoZWQgeWV0IHRoaXMgd2lsbCBtYWtlIHRoZW0gZGlydHlcbiAgICAvLyBzbyB2YWxpZGF0aW9uIGJlY29tZXMgdmlzaWJsZSAoaWYgYmFzZWQgb24gaXNQcmlzdGluZSlcbiAgICB0aGlzLnNldEZvcm1QcmlzdGluZShmYWxzZSk7XG4gICAgdmFyIG1vZGVsID0gdGhpcy5nZXRNb2RlbCgpO1xuICAgIHRoaXMucHJvcHMub25TdWJtaXQobW9kZWwsIHRoaXMucmVzZXRNb2RlbCwgdGhpcy51cGRhdGVJbnB1dHNXaXRoRXJyb3IpO1xuICAgIHRoaXMuc3RhdGUuaXNWYWxpZCA/IHRoaXMucHJvcHMub25WYWxpZFN1Ym1pdChtb2RlbCwgdGhpcy5yZXNldE1vZGVsLCB0aGlzLnVwZGF0ZUlucHV0c1dpdGhFcnJvcikgOiB0aGlzLnByb3BzLm9uSW52YWxpZFN1Ym1pdChtb2RlbCwgdGhpcy5yZXNldE1vZGVsLCB0aGlzLnVwZGF0ZUlucHV0c1dpdGhFcnJvcik7XG4gIH0sXG5cbiAgbWFwTW9kZWw6IGZ1bmN0aW9uIG1hcE1vZGVsKG1vZGVsKSB7XG5cbiAgICBpZiAodGhpcy5wcm9wcy5tYXBwaW5nKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5tYXBwaW5nKG1vZGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZvcm1EYXRhVG9PYmplY3QudG9PYmooT2JqZWN0LmtleXMobW9kZWwpLnJlZHVjZShmdW5jdGlvbiAobWFwcGVkTW9kZWwsIGtleSkge1xuXG4gICAgICAgIHZhciBrZXlBcnJheSA9IGtleS5zcGxpdCgnLicpO1xuICAgICAgICB2YXIgYmFzZSA9IG1hcHBlZE1vZGVsO1xuICAgICAgICB3aGlsZSAoa2V5QXJyYXkubGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIGN1cnJlbnRLZXkgPSBrZXlBcnJheS5zaGlmdCgpO1xuICAgICAgICAgIGJhc2UgPSBiYXNlW2N1cnJlbnRLZXldID0ga2V5QXJyYXkubGVuZ3RoID8gYmFzZVtjdXJyZW50S2V5XSB8fCB7fSA6IG1vZGVsW2tleV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbWFwcGVkTW9kZWw7XG4gICAgICB9LCB7fSkpO1xuICAgIH1cbiAgfSxcblxuICBnZXRNb2RlbDogZnVuY3Rpb24gZ2V0TW9kZWwoKSB7XG4gICAgdmFyIGN1cnJlbnRWYWx1ZXMgPSB0aGlzLmdldEN1cnJlbnRWYWx1ZXMoKTtcbiAgICByZXR1cm4gdGhpcy5tYXBNb2RlbChjdXJyZW50VmFsdWVzKTtcbiAgfSxcblxuICAvLyBSZXNldCBlYWNoIGtleSBpbiB0aGUgbW9kZWwgdG8gdGhlIG9yaWdpbmFsIC8gaW5pdGlhbCAvIHNwZWNpZmllZCB2YWx1ZVxuICByZXNldE1vZGVsOiBmdW5jdGlvbiByZXNldE1vZGVsKGRhdGEpIHtcbiAgICB0aGlzLmlucHV0cy5mb3JFYWNoKGZ1bmN0aW9uIChjb21wb25lbnQpIHtcbiAgICAgIHZhciBuYW1lID0gY29tcG9uZW50LnByb3BzLm5hbWU7XG4gICAgICBpZiAoZGF0YSAmJiBkYXRhLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIGNvbXBvbmVudC5zZXRWYWx1ZShkYXRhW25hbWVdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbXBvbmVudC5yZXNldFZhbHVlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy52YWxpZGF0ZUZvcm0oKTtcbiAgfSxcblxuICBzZXRJbnB1dFZhbGlkYXRpb25FcnJvcnM6IGZ1bmN0aW9uIHNldElucHV0VmFsaWRhdGlvbkVycm9ycyhlcnJvcnMpIHtcbiAgICB0aGlzLmlucHV0cy5mb3JFYWNoKGZ1bmN0aW9uIChjb21wb25lbnQpIHtcbiAgICAgIHZhciBuYW1lID0gY29tcG9uZW50LnByb3BzLm5hbWU7XG4gICAgICB2YXIgYXJncyA9IFt7XG4gICAgICAgIF9pc1ZhbGlkOiAhKG5hbWUgaW4gZXJyb3JzKSxcbiAgICAgICAgX3ZhbGlkYXRpb25FcnJvcjogdHlwZW9mIGVycm9yc1tuYW1lXSA9PT0gJ3N0cmluZycgPyBbZXJyb3JzW25hbWVdXSA6IGVycm9yc1tuYW1lXVxuICAgICAgfV07XG4gICAgICBjb21wb25lbnQuc2V0U3RhdGUuYXBwbHkoY29tcG9uZW50LCBhcmdzKTtcbiAgICB9KTtcbiAgfSxcblxuICAvLyBDaGVja3MgaWYgdGhlIHZhbHVlcyBoYXZlIGNoYW5nZWQgZnJvbSB0aGVpciBpbml0aWFsIHZhbHVlXG4gIGlzQ2hhbmdlZDogZnVuY3Rpb24gaXNDaGFuZ2VkKCkge1xuICAgIHJldHVybiAhdXRpbHMuaXNTYW1lKHRoaXMuZ2V0UHJpc3RpbmVWYWx1ZXMoKSwgdGhpcy5nZXRDdXJyZW50VmFsdWVzKCkpO1xuICB9LFxuXG4gIGdldFByaXN0aW5lVmFsdWVzOiBmdW5jdGlvbiBnZXRQcmlzdGluZVZhbHVlcygpIHtcbiAgICByZXR1cm4gdGhpcy5pbnB1dHMucmVkdWNlKGZ1bmN0aW9uIChkYXRhLCBjb21wb25lbnQpIHtcbiAgICAgIHZhciBuYW1lID0gY29tcG9uZW50LnByb3BzLm5hbWU7XG4gICAgICBkYXRhW25hbWVdID0gY29tcG9uZW50LnByb3BzLnZhbHVlO1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSwge30pO1xuICB9LFxuXG4gIC8vIEdvIHRocm91Z2ggZXJyb3JzIGZyb20gc2VydmVyIGFuZCBncmFiIHRoZSBjb21wb25lbnRzXG4gIC8vIHN0b3JlZCBpbiB0aGUgaW5wdXRzIG1hcC4gQ2hhbmdlIHRoZWlyIHN0YXRlIHRvIGludmFsaWRcbiAgLy8gYW5kIHNldCB0aGUgc2VydmVyRXJyb3IgbWVzc2FnZVxuICB1cGRhdGVJbnB1dHNXaXRoRXJyb3I6IGZ1bmN0aW9uIHVwZGF0ZUlucHV0c1dpdGhFcnJvcihlcnJvcnMpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIE9iamVjdC5rZXlzKGVycm9ycykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSwgaW5kZXgpIHtcbiAgICAgIHZhciBjb21wb25lbnQgPSB1dGlscy5maW5kKF90aGlzMi5pbnB1dHMsIGZ1bmN0aW9uIChjb21wb25lbnQpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudC5wcm9wcy5uYW1lID09PSBuYW1lO1xuICAgICAgfSk7XG4gICAgICBpZiAoIWNvbXBvbmVudCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBhcmUgdHJ5aW5nIHRvIHVwZGF0ZSBhbiBpbnB1dCB0aGF0IGRvZXMgbm90IGV4aXN0LiAnICsgJ1ZlcmlmeSBlcnJvcnMgb2JqZWN0IHdpdGggaW5wdXQgbmFtZXMuICcgKyBKU09OLnN0cmluZ2lmeShlcnJvcnMpKTtcbiAgICAgIH1cbiAgICAgIHZhciBhcmdzID0gW3tcbiAgICAgICAgX2lzVmFsaWQ6IF90aGlzMi5wcm9wcy5wcmV2ZW50RXh0ZXJuYWxJbnZhbGlkYXRpb24gfHwgZmFsc2UsXG4gICAgICAgIF9leHRlcm5hbEVycm9yOiB0eXBlb2YgZXJyb3JzW25hbWVdID09PSAnc3RyaW5nJyA/IFtlcnJvcnNbbmFtZV1dIDogZXJyb3JzW25hbWVdXG4gICAgICB9XTtcbiAgICAgIGNvbXBvbmVudC5zZXRTdGF0ZS5hcHBseShjb21wb25lbnQsIGFyZ3MpO1xuICAgIH0pO1xuICB9LFxuXG4gIGlzRm9ybURpc2FibGVkOiBmdW5jdGlvbiBpc0Zvcm1EaXNhYmxlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5kaXNhYmxlZDtcbiAgfSxcblxuICBnZXRDdXJyZW50VmFsdWVzOiBmdW5jdGlvbiBnZXRDdXJyZW50VmFsdWVzKCkge1xuICAgIHJldHVybiB0aGlzLmlucHV0cy5yZWR1Y2UoZnVuY3Rpb24gKGRhdGEsIGNvbXBvbmVudCkge1xuICAgICAgdmFyIG5hbWUgPSBjb21wb25lbnQucHJvcHMubmFtZTtcbiAgICAgIGRhdGFbbmFtZV0gPSBjb21wb25lbnQuc3RhdGUuX3ZhbHVlO1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSwge30pO1xuICB9LFxuXG4gIHNldEZvcm1QcmlzdGluZTogZnVuY3Rpb24gc2V0Rm9ybVByaXN0aW5lKGlzUHJpc3RpbmUpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIF9mb3JtU3VibWl0dGVkOiAhaXNQcmlzdGluZVxuICAgIH0pO1xuXG4gICAgLy8gSXRlcmF0ZSB0aHJvdWdoIGVhY2ggY29tcG9uZW50IGFuZCBzZXQgaXQgYXMgcHJpc3RpbmVcbiAgICAvLyBvciBcImRpcnR5XCIuXG4gICAgdGhpcy5pbnB1dHMuZm9yRWFjaChmdW5jdGlvbiAoY29tcG9uZW50LCBpbmRleCkge1xuICAgICAgY29tcG9uZW50LnNldFN0YXRlKHtcbiAgICAgICAgX2Zvcm1TdWJtaXR0ZWQ6ICFpc1ByaXN0aW5lLFxuICAgICAgICBfaXNQcmlzdGluZTogaXNQcmlzdGluZVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgLy8gVXNlIHRoZSBiaW5kZWQgdmFsdWVzIGFuZCB0aGUgYWN0dWFsIGlucHV0IHZhbHVlIHRvXG4gIC8vIHZhbGlkYXRlIHRoZSBpbnB1dCBhbmQgc2V0IGl0cyBzdGF0ZS4gVGhlbiBjaGVjayB0aGVcbiAgLy8gc3RhdGUgb2YgdGhlIGZvcm0gaXRzZWxmXG4gIHZhbGlkYXRlOiBmdW5jdGlvbiB2YWxpZGF0ZShjb21wb25lbnQpIHtcblxuICAgIC8vIFRyaWdnZXIgb25DaGFuZ2VcbiAgICBpZiAodGhpcy5zdGF0ZS5jYW5DaGFuZ2UpIHtcbiAgICAgIHRoaXMucHJvcHMub25DaGFuZ2UodGhpcy5nZXRDdXJyZW50VmFsdWVzKCksIHRoaXMuaXNDaGFuZ2VkKCkpO1xuICAgIH1cblxuICAgIHZhciB2YWxpZGF0aW9uID0gdGhpcy5ydW5WYWxpZGF0aW9uKGNvbXBvbmVudCk7XG4gICAgLy8gUnVuIHRocm91Z2ggdGhlIHZhbGlkYXRpb25zLCBzcGxpdCB0aGVtIHVwIGFuZCBjYWxsXG4gICAgLy8gdGhlIHZhbGlkYXRvciBJRiB0aGVyZSBpcyBhIHZhbHVlIG9yIGl0IGlzIHJlcXVpcmVkXG4gICAgY29tcG9uZW50LnNldFN0YXRlKHtcbiAgICAgIF9pc1ZhbGlkOiB2YWxpZGF0aW9uLmlzVmFsaWQsXG4gICAgICBfaXNSZXF1aXJlZDogdmFsaWRhdGlvbi5pc1JlcXVpcmVkLFxuICAgICAgX3ZhbGlkYXRpb25FcnJvcjogdmFsaWRhdGlvbi5lcnJvcixcbiAgICAgIF9leHRlcm5hbEVycm9yOiBudWxsXG4gICAgfSwgdGhpcy52YWxpZGF0ZUZvcm0pO1xuICB9LFxuXG4gIC8vIENoZWNrcyB2YWxpZGF0aW9uIG9uIGN1cnJlbnQgdmFsdWUgb3IgYSBwYXNzZWQgdmFsdWVcbiAgcnVuVmFsaWRhdGlvbjogZnVuY3Rpb24gcnVuVmFsaWRhdGlvbihjb21wb25lbnQsIHZhbHVlKSB7XG5cbiAgICB2YXIgY3VycmVudFZhbHVlcyA9IHRoaXMuZ2V0Q3VycmVudFZhbHVlcygpO1xuICAgIHZhciB2YWxpZGF0aW9uRXJyb3JzID0gY29tcG9uZW50LnByb3BzLnZhbGlkYXRpb25FcnJvcnM7XG4gICAgdmFyIHZhbGlkYXRpb25FcnJvciA9IGNvbXBvbmVudC5wcm9wcy52YWxpZGF0aW9uRXJyb3I7XG4gICAgdmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoID09PSAyID8gdmFsdWUgOiBjb21wb25lbnQuc3RhdGUuX3ZhbHVlO1xuXG4gICAgdmFyIHZhbGlkYXRpb25SZXN1bHRzID0gdGhpcy5ydW5SdWxlcyh2YWx1ZSwgY3VycmVudFZhbHVlcywgY29tcG9uZW50Ll92YWxpZGF0aW9ucyk7XG4gICAgdmFyIHJlcXVpcmVkUmVzdWx0cyA9IHRoaXMucnVuUnVsZXModmFsdWUsIGN1cnJlbnRWYWx1ZXMsIGNvbXBvbmVudC5fcmVxdWlyZWRWYWxpZGF0aW9ucyk7XG5cbiAgICAvLyB0aGUgY29tcG9uZW50IGRlZmluZXMgYW4gZXhwbGljaXQgdmFsaWRhdGUgZnVuY3Rpb25cbiAgICBpZiAodHlwZW9mIGNvbXBvbmVudC52YWxpZGF0ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB2YWxpZGF0aW9uUmVzdWx0cy5mYWlsZWQgPSBjb21wb25lbnQudmFsaWRhdGUoKSA/IFtdIDogWydmYWlsZWQnXTtcbiAgICB9XG5cbiAgICB2YXIgaXNSZXF1aXJlZCA9IE9iamVjdC5rZXlzKGNvbXBvbmVudC5fcmVxdWlyZWRWYWxpZGF0aW9ucykubGVuZ3RoID8gISFyZXF1aXJlZFJlc3VsdHMuc3VjY2Vzcy5sZW5ndGggOiBmYWxzZTtcbiAgICB2YXIgaXNWYWxpZCA9ICF2YWxpZGF0aW9uUmVzdWx0cy5mYWlsZWQubGVuZ3RoICYmICEodGhpcy5wcm9wcy52YWxpZGF0aW9uRXJyb3JzICYmIHRoaXMucHJvcHMudmFsaWRhdGlvbkVycm9yc1tjb21wb25lbnQucHJvcHMubmFtZV0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGlzUmVxdWlyZWQ6IGlzUmVxdWlyZWQsXG4gICAgICBpc1ZhbGlkOiBpc1JlcXVpcmVkID8gZmFsc2UgOiBpc1ZhbGlkLFxuICAgICAgZXJyb3I6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICBpZiAoaXNWYWxpZCAmJiAhaXNSZXF1aXJlZCkge1xuICAgICAgICAgIHJldHVybiBlbXB0eUFycmF5O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbGlkYXRpb25SZXN1bHRzLmVycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gdmFsaWRhdGlvblJlc3VsdHMuZXJyb3JzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMucHJvcHMudmFsaWRhdGlvbkVycm9ycyAmJiB0aGlzLnByb3BzLnZhbGlkYXRpb25FcnJvcnNbY29tcG9uZW50LnByb3BzLm5hbWVdKSB7XG4gICAgICAgICAgcmV0dXJuIHR5cGVvZiB0aGlzLnByb3BzLnZhbGlkYXRpb25FcnJvcnNbY29tcG9uZW50LnByb3BzLm5hbWVdID09PSAnc3RyaW5nJyA/IFt0aGlzLnByb3BzLnZhbGlkYXRpb25FcnJvcnNbY29tcG9uZW50LnByb3BzLm5hbWVdXSA6IHRoaXMucHJvcHMudmFsaWRhdGlvbkVycm9yc1tjb21wb25lbnQucHJvcHMubmFtZV07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNSZXF1aXJlZCkge1xuICAgICAgICAgIHZhciBlcnJvciA9IHZhbGlkYXRpb25FcnJvcnNbcmVxdWlyZWRSZXN1bHRzLnN1Y2Nlc3NbMF1dO1xuICAgICAgICAgIHJldHVybiBlcnJvciA/IFtlcnJvcl0gOiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbGlkYXRpb25SZXN1bHRzLmZhaWxlZC5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gdmFsaWRhdGlvblJlc3VsdHMuZmFpbGVkLm1hcChmdW5jdGlvbiAoZmFpbGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsaWRhdGlvbkVycm9yc1tmYWlsZWRdID8gdmFsaWRhdGlvbkVycm9yc1tmYWlsZWRdIDogdmFsaWRhdGlvbkVycm9yO1xuICAgICAgICAgIH0pLmZpbHRlcihmdW5jdGlvbiAoeCwgcG9zLCBhcnIpIHtcbiAgICAgICAgICAgIC8vIFJlbW92ZSBkdXBsaWNhdGVzXG4gICAgICAgICAgICByZXR1cm4gYXJyLmluZGV4T2YoeCkgPT09IHBvcztcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfS5jYWxsKHRoaXMpXG4gICAgfTtcbiAgfSxcblxuICBydW5SdWxlczogZnVuY3Rpb24gcnVuUnVsZXModmFsdWUsIGN1cnJlbnRWYWx1ZXMsIHZhbGlkYXRpb25zKSB7XG5cbiAgICB2YXIgcmVzdWx0cyA9IHtcbiAgICAgIGVycm9yczogW10sXG4gICAgICBmYWlsZWQ6IFtdLFxuICAgICAgc3VjY2VzczogW11cbiAgICB9O1xuICAgIGlmIChPYmplY3Qua2V5cyh2YWxpZGF0aW9ucykubGVuZ3RoKSB7XG4gICAgICBPYmplY3Qua2V5cyh2YWxpZGF0aW9ucykuZm9yRWFjaChmdW5jdGlvbiAodmFsaWRhdGlvbk1ldGhvZCkge1xuXG4gICAgICAgIGlmICh2YWxpZGF0aW9uUnVsZXNbdmFsaWRhdGlvbk1ldGhvZF0gJiYgdHlwZW9mIHZhbGlkYXRpb25zW3ZhbGlkYXRpb25NZXRob2RdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGb3Jtc3kgZG9lcyBub3QgYWxsb3cgeW91IHRvIG92ZXJyaWRlIGRlZmF1bHQgdmFsaWRhdGlvbnM6ICcgKyB2YWxpZGF0aW9uTWV0aG9kKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdmFsaWRhdGlvblJ1bGVzW3ZhbGlkYXRpb25NZXRob2RdICYmIHR5cGVvZiB2YWxpZGF0aW9uc1t2YWxpZGF0aW9uTWV0aG9kXSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRm9ybXN5IGRvZXMgbm90IGhhdmUgdGhlIHZhbGlkYXRpb24gcnVsZTogJyArIHZhbGlkYXRpb25NZXRob2QpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiB2YWxpZGF0aW9uc1t2YWxpZGF0aW9uTWV0aG9kXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHZhciB2YWxpZGF0aW9uID0gdmFsaWRhdGlvbnNbdmFsaWRhdGlvbk1ldGhvZF0oY3VycmVudFZhbHVlcywgdmFsdWUpO1xuICAgICAgICAgIGlmICh0eXBlb2YgdmFsaWRhdGlvbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJlc3VsdHMuZXJyb3JzLnB1c2godmFsaWRhdGlvbik7XG4gICAgICAgICAgICByZXN1bHRzLmZhaWxlZC5wdXNoKHZhbGlkYXRpb25NZXRob2QpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIXZhbGlkYXRpb24pIHtcbiAgICAgICAgICAgIHJlc3VsdHMuZmFpbGVkLnB1c2godmFsaWRhdGlvbk1ldGhvZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsaWRhdGlvbnNbdmFsaWRhdGlvbk1ldGhvZF0gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB2YXIgdmFsaWRhdGlvbiA9IHZhbGlkYXRpb25SdWxlc1t2YWxpZGF0aW9uTWV0aG9kXShjdXJyZW50VmFsdWVzLCB2YWx1ZSwgdmFsaWRhdGlvbnNbdmFsaWRhdGlvbk1ldGhvZF0pO1xuICAgICAgICAgIGlmICh0eXBlb2YgdmFsaWRhdGlvbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJlc3VsdHMuZXJyb3JzLnB1c2godmFsaWRhdGlvbik7XG4gICAgICAgICAgICByZXN1bHRzLmZhaWxlZC5wdXNoKHZhbGlkYXRpb25NZXRob2QpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIXZhbGlkYXRpb24pIHtcbiAgICAgICAgICAgIHJlc3VsdHMuZmFpbGVkLnB1c2godmFsaWRhdGlvbk1ldGhvZCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdHMuc3VjY2Vzcy5wdXNoKHZhbGlkYXRpb25NZXRob2QpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0cy5zdWNjZXNzLnB1c2godmFsaWRhdGlvbk1ldGhvZCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfSxcblxuICAvLyBWYWxpZGF0ZSB0aGUgZm9ybSBieSBnb2luZyB0aHJvdWdoIGFsbCBjaGlsZCBpbnB1dCBjb21wb25lbnRzXG4gIC8vIGFuZCBjaGVjayB0aGVpciBzdGF0ZVxuICB2YWxpZGF0ZUZvcm06IGZ1bmN0aW9uIHZhbGlkYXRlRm9ybSgpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIC8vIFdlIG5lZWQgYSBjYWxsYmFjayBhcyB3ZSBhcmUgdmFsaWRhdGluZyBhbGwgaW5wdXRzIGFnYWluLiBUaGlzIHdpbGxcbiAgICAvLyBydW4gd2hlbiB0aGUgbGFzdCBjb21wb25lbnQgaGFzIHNldCBpdHMgc3RhdGVcbiAgICB2YXIgb25WYWxpZGF0aW9uQ29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgYWxsSXNWYWxpZCA9IHRoaXMuaW5wdXRzLmV2ZXJ5KGZ1bmN0aW9uIChjb21wb25lbnQpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudC5zdGF0ZS5faXNWYWxpZDtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgaXNWYWxpZDogYWxsSXNWYWxpZFxuICAgICAgfSk7XG5cbiAgICAgIGlmIChhbGxJc1ZhbGlkKSB7XG4gICAgICAgIHRoaXMucHJvcHMub25WYWxpZCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wcm9wcy5vbkludmFsaWQoKTtcbiAgICAgIH1cblxuICAgICAgLy8gVGVsbCB0aGUgZm9ybSB0aGF0IGl0IGNhbiBzdGFydCB0byB0cmlnZ2VyIGNoYW5nZSBldmVudHNcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBjYW5DaGFuZ2U6IHRydWVcbiAgICAgIH0pO1xuICAgIH0uYmluZCh0aGlzKTtcblxuICAgIC8vIFJ1biB2YWxpZGF0aW9uIGFnYWluIGluIGNhc2UgYWZmZWN0ZWQgYnkgb3RoZXIgaW5wdXRzLiBUaGVcbiAgICAvLyBsYXN0IGNvbXBvbmVudCB2YWxpZGF0ZWQgd2lsbCBydW4gdGhlIG9uVmFsaWRhdGlvbkNvbXBsZXRlIGNhbGxiYWNrXG4gICAgdGhpcy5pbnB1dHMuZm9yRWFjaChmdW5jdGlvbiAoY29tcG9uZW50LCBpbmRleCkge1xuICAgICAgdmFyIHZhbGlkYXRpb24gPSBfdGhpczMucnVuVmFsaWRhdGlvbihjb21wb25lbnQpO1xuICAgICAgaWYgKHZhbGlkYXRpb24uaXNWYWxpZCAmJiBjb21wb25lbnQuc3RhdGUuX2V4dGVybmFsRXJyb3IpIHtcbiAgICAgICAgdmFsaWRhdGlvbi5pc1ZhbGlkID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBjb21wb25lbnQuc2V0U3RhdGUoe1xuICAgICAgICBfaXNWYWxpZDogdmFsaWRhdGlvbi5pc1ZhbGlkLFxuICAgICAgICBfaXNSZXF1aXJlZDogdmFsaWRhdGlvbi5pc1JlcXVpcmVkLFxuICAgICAgICBfdmFsaWRhdGlvbkVycm9yOiB2YWxpZGF0aW9uLmVycm9yLFxuICAgICAgICBfZXh0ZXJuYWxFcnJvcjogIXZhbGlkYXRpb24uaXNWYWxpZCAmJiBjb21wb25lbnQuc3RhdGUuX2V4dGVybmFsRXJyb3IgPyBjb21wb25lbnQuc3RhdGUuX2V4dGVybmFsRXJyb3IgOiBudWxsXG4gICAgICB9LCBpbmRleCA9PT0gX3RoaXMzLmlucHV0cy5sZW5ndGggLSAxID8gb25WYWxpZGF0aW9uQ29tcGxldGUgOiBudWxsKTtcbiAgICB9KTtcblxuICAgIC8vIElmIHRoZXJlIGFyZSBubyBpbnB1dHMsIHNldCBzdGF0ZSB3aGVyZSBmb3JtIGlzIHJlYWR5IHRvIHRyaWdnZXJcbiAgICAvLyBjaGFuZ2UgZXZlbnQuIE5ldyBpbnB1dHMgbWlnaHQgYmUgYWRkZWQgbGF0ZXJcbiAgICBpZiAoIXRoaXMuaW5wdXRzLmxlbmd0aCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGNhbkNoYW5nZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIC8vIE1ldGhvZCBwdXQgb24gZWFjaCBpbnB1dCBjb21wb25lbnQgdG8gcmVnaXN0ZXJcbiAgLy8gaXRzZWxmIHRvIHRoZSBmb3JtXG4gIGF0dGFjaFRvRm9ybTogZnVuY3Rpb24gYXR0YWNoVG9Gb3JtKGNvbXBvbmVudCkge1xuXG4gICAgaWYgKHRoaXMuaW5wdXRzLmluZGV4T2YoY29tcG9uZW50KSA9PT0gLTEpIHtcbiAgICAgIHRoaXMuaW5wdXRzLnB1c2goY29tcG9uZW50KTtcbiAgICB9XG5cbiAgICB0aGlzLnZhbGlkYXRlKGNvbXBvbmVudCk7XG4gIH0sXG5cbiAgLy8gTWV0aG9kIHB1dCBvbiBlYWNoIGlucHV0IGNvbXBvbmVudCB0byB1bnJlZ2lzdGVyXG4gIC8vIGl0c2VsZiBmcm9tIHRoZSBmb3JtXG4gIGRldGFjaEZyb21Gb3JtOiBmdW5jdGlvbiBkZXRhY2hGcm9tRm9ybShjb21wb25lbnQpIHtcbiAgICB2YXIgY29tcG9uZW50UG9zID0gdGhpcy5pbnB1dHMuaW5kZXhPZihjb21wb25lbnQpO1xuXG4gICAgaWYgKGNvbXBvbmVudFBvcyAhPT0gLTEpIHtcbiAgICAgIHRoaXMuaW5wdXRzID0gdGhpcy5pbnB1dHMuc2xpY2UoMCwgY29tcG9uZW50UG9zKS5jb25jYXQodGhpcy5pbnB1dHMuc2xpY2UoY29tcG9uZW50UG9zICsgMSkpO1xuICAgIH1cblxuICAgIHRoaXMudmFsaWRhdGVGb3JtKCk7XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBtYXBwaW5nID0gX3Byb3BzLm1hcHBpbmcsXG4gICAgICAgIHZhbGlkYXRpb25FcnJvcnMgPSBfcHJvcHMudmFsaWRhdGlvbkVycm9ycyxcbiAgICAgICAgb25TdWJtaXQgPSBfcHJvcHMub25TdWJtaXQsXG4gICAgICAgIG9uVmFsaWQgPSBfcHJvcHMub25WYWxpZCxcbiAgICAgICAgb25WYWxpZFN1Ym1pdCA9IF9wcm9wcy5vblZhbGlkU3VibWl0LFxuICAgICAgICBvbkludmFsaWQgPSBfcHJvcHMub25JbnZhbGlkLFxuICAgICAgICBvbkludmFsaWRTdWJtaXQgPSBfcHJvcHMub25JbnZhbGlkU3VibWl0LFxuICAgICAgICBvbkNoYW5nZSA9IF9wcm9wcy5vbkNoYW5nZSxcbiAgICAgICAgcmVzZXQgPSBfcHJvcHMucmVzZXQsXG4gICAgICAgIHByZXZlbnRFeHRlcm5hbEludmFsaWRhdGlvbiA9IF9wcm9wcy5wcmV2ZW50RXh0ZXJuYWxJbnZhbGlkYXRpb24sXG4gICAgICAgIG9uU3VjY2VzcyA9IF9wcm9wcy5vblN1Y2Nlc3MsXG4gICAgICAgIG9uRXJyb3IgPSBfcHJvcHMub25FcnJvcixcbiAgICAgICAgbm9uRm9ybXN5UHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ21hcHBpbmcnLCAndmFsaWRhdGlvbkVycm9ycycsICdvblN1Ym1pdCcsICdvblZhbGlkJywgJ29uVmFsaWRTdWJtaXQnLCAnb25JbnZhbGlkJywgJ29uSW52YWxpZFN1Ym1pdCcsICdvbkNoYW5nZScsICdyZXNldCcsICdwcmV2ZW50RXh0ZXJuYWxJbnZhbGlkYXRpb24nLCAnb25TdWNjZXNzJywgJ29uRXJyb3InXSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdmb3JtJyxcbiAgICAgIF9leHRlbmRzKHt9LCBub25Gb3Jtc3lQcm9wcywgeyBvblN1Ym1pdDogdGhpcy5zdWJtaXQgfSksXG4gICAgICB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgKTtcbiAgfVxufSk7XG5cbmlmICghZ2xvYmFsLmV4cG9ydHMgJiYgIWdsb2JhbC5tb2R1bGUgJiYgKCFnbG9iYWwuZGVmaW5lIHx8ICFnbG9iYWwuZGVmaW5lLmFtZCkpIHtcbiAgZ2xvYmFsLkZvcm1zeSA9IEZvcm1zeTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBGb3Jtc3k7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9mb3Jtc3ktcmVhY3QvbGliL21haW4uanMiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFycmF5c0RpZmZlcjogZnVuY3Rpb24gYXJyYXlzRGlmZmVyKGEsIGIpIHtcbiAgICB2YXIgaXNEaWZmZXJlbnQgPSBmYWxzZTtcbiAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XG4gICAgICBpc0RpZmZlcmVudCA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGEuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzU2FtZShpdGVtLCBiW2luZGV4XSkpIHtcbiAgICAgICAgICBpc0RpZmZlcmVudCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0sIHRoaXMpO1xuICAgIH1cbiAgICByZXR1cm4gaXNEaWZmZXJlbnQ7XG4gIH0sXG5cbiAgb2JqZWN0c0RpZmZlcjogZnVuY3Rpb24gb2JqZWN0c0RpZmZlcihhLCBiKSB7XG4gICAgdmFyIGlzRGlmZmVyZW50ID0gZmFsc2U7XG4gICAgaWYgKE9iamVjdC5rZXlzKGEpLmxlbmd0aCAhPT0gT2JqZWN0LmtleXMoYikubGVuZ3RoKSB7XG4gICAgICBpc0RpZmZlcmVudCA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIE9iamVjdC5rZXlzKGEpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIXRoaXMuaXNTYW1lKGFba2V5XSwgYltrZXldKSkge1xuICAgICAgICAgIGlzRGlmZmVyZW50ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSwgdGhpcyk7XG4gICAgfVxuICAgIHJldHVybiBpc0RpZmZlcmVudDtcbiAgfSxcblxuICBpc1NhbWU6IGZ1bmN0aW9uIGlzU2FtZShhLCBiKSB7XG4gICAgaWYgKCh0eXBlb2YgYSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoYSkpICE9PSAodHlwZW9mIGIgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGIpKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhKSAmJiBBcnJheS5pc0FycmF5KGIpKSB7XG4gICAgICByZXR1cm4gIXRoaXMuYXJyYXlzRGlmZmVyKGEsIGIpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGEgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBhLnRvU3RyaW5nKCkgPT09IGIudG9TdHJpbmcoKTtcbiAgICB9IGVsc2UgaWYgKCh0eXBlb2YgYSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoYSkpID09PSAnb2JqZWN0JyAmJiBhICE9PSBudWxsICYmIGIgIT09IG51bGwpIHtcbiAgICAgIHJldHVybiAhdGhpcy5vYmplY3RzRGlmZmVyKGEsIGIpO1xuICAgIH1cblxuICAgIHJldHVybiBhID09PSBiO1xuICB9LFxuXG4gIGZpbmQ6IGZ1bmN0aW9uIGZpbmQoY29sbGVjdGlvbiwgZm4pIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNvbGxlY3Rpb24ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IGNvbGxlY3Rpb25baV07XG4gICAgICBpZiAoZm4oaXRlbSkpIHtcbiAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG59O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vZm9ybXN5LXJlYWN0L2xpYi91dGlscy5qcyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9pc0V4aXN0eSA9IGZ1bmN0aW9uIF9pc0V4aXN0eSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZDtcbn07XG5cbnZhciBpc0VtcHR5ID0gZnVuY3Rpb24gaXNFbXB0eSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09ICcnO1xufTtcblxudmFyIHZhbGlkYXRpb25zID0ge1xuICBpc0RlZmF1bHRSZXF1aXJlZFZhbHVlOiBmdW5jdGlvbiBpc0RlZmF1bHRSZXF1aXJlZFZhbHVlKHZhbHVlcywgdmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gJyc7XG4gIH0sXG4gIGlzRXhpc3R5OiBmdW5jdGlvbiBpc0V4aXN0eSh2YWx1ZXMsIHZhbHVlKSB7XG4gICAgcmV0dXJuIF9pc0V4aXN0eSh2YWx1ZSk7XG4gIH0sXG4gIG1hdGNoUmVnZXhwOiBmdW5jdGlvbiBtYXRjaFJlZ2V4cCh2YWx1ZXMsIHZhbHVlLCByZWdleHApIHtcbiAgICByZXR1cm4gIV9pc0V4aXN0eSh2YWx1ZSkgfHwgaXNFbXB0eSh2YWx1ZSkgfHwgcmVnZXhwLnRlc3QodmFsdWUpO1xuICB9LFxuICBpc1VuZGVmaW5lZDogZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWVzLCB2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xuICB9LFxuICBpc0VtcHR5U3RyaW5nOiBmdW5jdGlvbiBpc0VtcHR5U3RyaW5nKHZhbHVlcywgdmFsdWUpIHtcbiAgICByZXR1cm4gaXNFbXB0eSh2YWx1ZSk7XG4gIH0sXG4gIGlzRW1haWw6IGZ1bmN0aW9uIGlzRW1haWwodmFsdWVzLCB2YWx1ZSkge1xuICAgIHJldHVybiB2YWxpZGF0aW9ucy5tYXRjaFJlZ2V4cCh2YWx1ZXMsIHZhbHVlLCAvXigoKFthLXpdfFxcZHxbISNcXCQlJidcXCpcXCtcXC1cXC89XFw/XFxeX2B7XFx8fX5dfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSsoXFwuKFthLXpdfFxcZHxbISNcXCQlJidcXCpcXCtcXC1cXC89XFw/XFxeX2B7XFx8fX5dfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSspKil8KChcXHgyMikoKCgoXFx4MjB8XFx4MDkpKihcXHgwZFxceDBhKSk/KFxceDIwfFxceDA5KSspPygoW1xceDAxLVxceDA4XFx4MGJcXHgwY1xceDBlLVxceDFmXFx4N2ZdfFxceDIxfFtcXHgyMy1cXHg1Yl18W1xceDVkLVxceDdlXXxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KFxcXFwoW1xceDAxLVxceDA5XFx4MGJcXHgwY1xceDBkLVxceDdmXXxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSkpKSkqKCgoXFx4MjB8XFx4MDkpKihcXHgwZFxceDBhKSk/KFxceDIwfFxceDA5KSspPyhcXHgyMikpKUAoKChbYS16XXxcXGR8W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCgoW2Etel18XFxkfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKShbYS16XXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSooW2Etel18XFxkfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSkpXFwuKSsoKFthLXpdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoKFthLXpdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKShbYS16XXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSooW2Etel18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKSkkL2kpO1xuICB9LFxuICBpc1VybDogZnVuY3Rpb24gaXNVcmwodmFsdWVzLCB2YWx1ZSkge1xuICAgIHJldHVybiB2YWxpZGF0aW9ucy5tYXRjaFJlZ2V4cCh2YWx1ZXMsIHZhbHVlLCAvXihodHRwcz98cz9mdHApOlxcL1xcLygoKChbYS16XXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoJVtcXGRhLWZdezJ9KXxbIVxcJCYnXFwoXFwpXFwqXFwrLDs9XXw6KSpAKT8oKChcXGR8WzEtOV1cXGR8MVxcZFxcZHwyWzAtNF1cXGR8MjVbMC01XSlcXC4oXFxkfFsxLTldXFxkfDFcXGRcXGR8MlswLTRdXFxkfDI1WzAtNV0pXFwuKFxcZHxbMS05XVxcZHwxXFxkXFxkfDJbMC00XVxcZHwyNVswLTVdKVxcLihcXGR8WzEtOV1cXGR8MVxcZFxcZHwyWzAtNF1cXGR8MjVbMC01XSkpfCgoKFthLXpdfFxcZHxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KChbYS16XXxcXGR8W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKFthLXpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKihbYS16XXxcXGR8W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKSlcXC4pKygoW2Etel18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCgoW2Etel18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKFthLXpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKihbYS16XXxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSkpKVxcLj8pKDpcXGQqKT8pKFxcLygoKFthLXpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCglW1xcZGEtZl17Mn0pfFshXFwkJidcXChcXClcXCpcXCssOz1dfDp8QCkrKFxcLygoW2Etel18XFxkfC18XFwufF98fnxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KCVbXFxkYS1mXXsyfSl8WyFcXCQmJ1xcKFxcKVxcKlxcKyw7PV18OnxAKSopKik/KT8oXFw/KCgoW2Etel18XFxkfC18XFwufF98fnxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KCVbXFxkYS1mXXsyfSl8WyFcXCQmJ1xcKFxcKVxcKlxcKyw7PV18OnxAKXxbXFx1RTAwMC1cXHVGOEZGXXxcXC98XFw/KSopPygjKCgoW2Etel18XFxkfC18XFwufF98fnxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KCVbXFxkYS1mXXsyfSl8WyFcXCQmJ1xcKFxcKVxcKlxcKyw7PV18OnxAKXxcXC98XFw/KSopPyQvaSk7XG4gIH0sXG4gIGlzVHJ1ZTogZnVuY3Rpb24gaXNUcnVlKHZhbHVlcywgdmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHRydWU7XG4gIH0sXG4gIGlzRmFsc2U6IGZ1bmN0aW9uIGlzRmFsc2UodmFsdWVzLCB2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gZmFsc2U7XG4gIH0sXG4gIGlzTnVtZXJpYzogZnVuY3Rpb24gaXNOdW1lcmljKHZhbHVlcywgdmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiB2YWxpZGF0aW9ucy5tYXRjaFJlZ2V4cCh2YWx1ZXMsIHZhbHVlLCAvXlstK10/KD86XFxkKlsuXSk/XFxkKyQvKTtcbiAgfSxcbiAgaXNBbHBoYTogZnVuY3Rpb24gaXNBbHBoYSh2YWx1ZXMsIHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbGlkYXRpb25zLm1hdGNoUmVnZXhwKHZhbHVlcywgdmFsdWUsIC9eW0EtWl0rJC9pKTtcbiAgfSxcbiAgaXNBbHBoYW51bWVyaWM6IGZ1bmN0aW9uIGlzQWxwaGFudW1lcmljKHZhbHVlcywgdmFsdWUpIHtcbiAgICByZXR1cm4gdmFsaWRhdGlvbnMubWF0Y2hSZWdleHAodmFsdWVzLCB2YWx1ZSwgL15bMC05QS1aXSskL2kpO1xuICB9LFxuICBpc0ludDogZnVuY3Rpb24gaXNJbnQodmFsdWVzLCB2YWx1ZSkge1xuICAgIHJldHVybiB2YWxpZGF0aW9ucy5tYXRjaFJlZ2V4cCh2YWx1ZXMsIHZhbHVlLCAvXig/OlstK10/KD86MHxbMS05XVxcZCopKSQvKTtcbiAgfSxcbiAgaXNGbG9hdDogZnVuY3Rpb24gaXNGbG9hdCh2YWx1ZXMsIHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbGlkYXRpb25zLm1hdGNoUmVnZXhwKHZhbHVlcywgdmFsdWUsIC9eKD86Wy0rXT8oPzpcXGQrKSk/KD86XFwuXFxkKik/KD86W2VFXVtcXCtcXC1dPyg/OlxcZCspKT8kLyk7XG4gIH0sXG4gIGlzV29yZHM6IGZ1bmN0aW9uIGlzV29yZHModmFsdWVzLCB2YWx1ZSkge1xuICAgIHJldHVybiB2YWxpZGF0aW9ucy5tYXRjaFJlZ2V4cCh2YWx1ZXMsIHZhbHVlLCAvXltBLVpcXHNdKyQvaSk7XG4gIH0sXG4gIGlzU3BlY2lhbFdvcmRzOiBmdW5jdGlvbiBpc1NwZWNpYWxXb3Jkcyh2YWx1ZXMsIHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbGlkYXRpb25zLm1hdGNoUmVnZXhwKHZhbHVlcywgdmFsdWUsIC9eW0EtWlxcc1xcdTAwQzAtXFx1MDE3Rl0rJC9pKTtcbiAgfSxcbiAgaXNMZW5ndGg6IGZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlcywgdmFsdWUsIGxlbmd0aCkge1xuICAgIHJldHVybiAhX2lzRXhpc3R5KHZhbHVlKSB8fCBpc0VtcHR5KHZhbHVlKSB8fCB2YWx1ZS5sZW5ndGggPT09IGxlbmd0aDtcbiAgfSxcbiAgZXF1YWxzOiBmdW5jdGlvbiBlcXVhbHModmFsdWVzLCB2YWx1ZSwgZXFsKSB7XG4gICAgcmV0dXJuICFfaXNFeGlzdHkodmFsdWUpIHx8IGlzRW1wdHkodmFsdWUpIHx8IHZhbHVlID09IGVxbDtcbiAgfSxcbiAgZXF1YWxzRmllbGQ6IGZ1bmN0aW9uIGVxdWFsc0ZpZWxkKHZhbHVlcywgdmFsdWUsIGZpZWxkKSB7XG4gICAgcmV0dXJuIHZhbHVlID09IHZhbHVlc1tmaWVsZF07XG4gIH0sXG4gIG1heExlbmd0aDogZnVuY3Rpb24gbWF4TGVuZ3RoKHZhbHVlcywgdmFsdWUsIGxlbmd0aCkge1xuICAgIHJldHVybiAhX2lzRXhpc3R5KHZhbHVlKSB8fCB2YWx1ZS5sZW5ndGggPD0gbGVuZ3RoO1xuICB9LFxuICBtaW5MZW5ndGg6IGZ1bmN0aW9uIG1pbkxlbmd0aCh2YWx1ZXMsIHZhbHVlLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gIV9pc0V4aXN0eSh2YWx1ZSkgfHwgaXNFbXB0eSh2YWx1ZSkgfHwgdmFsdWUubGVuZ3RoID49IGxlbmd0aDtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB2YWxpZGF0aW9ucztcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2Zvcm1zeS1yZWFjdC9saWIvdmFsaWRhdGlvblJ1bGVzLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFByb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcbnZhciBjcmVhdGVDbGFzcyA9IHJlcXVpcmUoJ2NyZWF0ZS1yZWFjdC1jbGFzcycpO1xuXG52YXIgc2l6ZXJTdHlsZSA9IHtcblx0cG9zaXRpb246ICdhYnNvbHV0ZScsXG5cdHRvcDogMCxcblx0bGVmdDogMCxcblx0dmlzaWJpbGl0eTogJ2hpZGRlbicsXG5cdGhlaWdodDogMCxcblx0b3ZlcmZsb3c6ICdzY3JvbGwnLFxuXHR3aGl0ZVNwYWNlOiAncHJlJ1xufTtcblxudmFyIEF1dG9zaXplSW5wdXQgPSBjcmVhdGVDbGFzcyh7XG5cdHByb3BUeXBlczoge1xuXHRcdGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZywgLy8gY2xhc3NOYW1lIGZvciB0aGUgb3V0ZXIgZWxlbWVudFxuXHRcdGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLmFueSwgLy8gZGVmYXVsdCBmaWVsZCB2YWx1ZVxuXHRcdGlucHV0Q2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLCAvLyBjbGFzc05hbWUgZm9yIHRoZSBpbnB1dCBlbGVtZW50XG5cdFx0aW5wdXRTdHlsZTogUHJvcFR5cGVzLm9iamVjdCwgLy8gY3NzIHN0eWxlcyBmb3IgdGhlIGlucHV0IGVsZW1lbnRcblx0XHRtaW5XaWR0aDogUHJvcFR5cGVzLm9uZU9mVHlwZShbLy8gbWluaW11bSB3aWR0aCBmb3IgaW5wdXQgZWxlbWVudFxuXHRcdFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblx0XHRvbkF1dG9zaXplOiBQcm9wVHlwZXMuZnVuYywgLy8gb25BdXRvc2l6ZSBoYW5kbGVyOiBmdW5jdGlvbihuZXdXaWR0aCkge31cblx0XHRvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsIC8vIG9uQ2hhbmdlIGhhbmRsZXI6IGZ1bmN0aW9uKG5ld1ZhbHVlKSB7fVxuXHRcdHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMuc3RyaW5nLCAvLyBwbGFjZWhvbGRlciB0ZXh0XG5cdFx0cGxhY2Vob2xkZXJJc01pbldpZHRoOiBQcm9wVHlwZXMuYm9vbCwgLy8gZG9uJ3QgY29sbGFwc2Ugc2l6ZSB0byBsZXNzIHRoYW4gdGhlIHBsYWNlaG9sZGVyXG5cdFx0c3R5bGU6IFByb3BUeXBlcy5vYmplY3QsIC8vIGNzcyBzdHlsZXMgZm9yIHRoZSBvdXRlciBlbGVtZW50XG5cdFx0dmFsdWU6IFByb3BUeXBlcy5hbnkgfSxcblx0Ly8gZmllbGQgdmFsdWVcblx0Z2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdG1pbldpZHRoOiAxXG5cdFx0fTtcblx0fSxcblx0Z2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGlucHV0V2lkdGg6IHRoaXMucHJvcHMubWluV2lkdGhcblx0XHR9O1xuXHR9LFxuXHRjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG5cdFx0dGhpcy5tb3VudGVkID0gdHJ1ZTtcblx0XHR0aGlzLmNvcHlJbnB1dFN0eWxlcygpO1xuXHRcdHRoaXMudXBkYXRlSW5wdXRXaWR0aCgpO1xuXHR9LFxuXHRjb21wb25lbnREaWRVcGRhdGU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMsIHByZXZTdGF0ZSkge1xuXHRcdGlmIChwcmV2U3RhdGUuaW5wdXRXaWR0aCAhPT0gdGhpcy5zdGF0ZS5pbnB1dFdpZHRoKSB7XG5cdFx0XHRpZiAodHlwZW9mIHRoaXMucHJvcHMub25BdXRvc2l6ZSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHR0aGlzLnByb3BzLm9uQXV0b3NpemUodGhpcy5zdGF0ZS5pbnB1dFdpZHRoKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0dGhpcy51cGRhdGVJbnB1dFdpZHRoKCk7XG5cdH0sXG5cdGNvbXBvbmVudFdpbGxVbm1vdW50OiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcblx0XHR0aGlzLm1vdW50ZWQgPSBmYWxzZTtcblx0fSxcblx0aW5wdXRSZWY6IGZ1bmN0aW9uIGlucHV0UmVmKGVsKSB7XG5cdFx0dGhpcy5pbnB1dCA9IGVsO1xuXHR9LFxuXHRwbGFjZUhvbGRlclNpemVyUmVmOiBmdW5jdGlvbiBwbGFjZUhvbGRlclNpemVyUmVmKGVsKSB7XG5cdFx0dGhpcy5wbGFjZUhvbGRlclNpemVyID0gZWw7XG5cdH0sXG5cdHNpemVyUmVmOiBmdW5jdGlvbiBzaXplclJlZihlbCkge1xuXHRcdHRoaXMuc2l6ZXIgPSBlbDtcblx0fSxcblx0Y29weUlucHV0U3R5bGVzOiBmdW5jdGlvbiBjb3B5SW5wdXRTdHlsZXMoKSB7XG5cdFx0aWYgKHRoaXMubW91bnRlZCB8fCAhd2luZG93LmdldENvbXB1dGVkU3R5bGUpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0dmFyIGlucHV0U3R5bGUgPSB0aGlzLmlucHV0ICYmIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMuaW5wdXQpO1xuXHRcdGlmICghaW5wdXRTdHlsZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHR2YXIgd2lkdGhOb2RlID0gdGhpcy5zaXplcjtcblx0XHR3aWR0aE5vZGUuc3R5bGUuZm9udFNpemUgPSBpbnB1dFN0eWxlLmZvbnRTaXplO1xuXHRcdHdpZHRoTm9kZS5zdHlsZS5mb250RmFtaWx5ID0gaW5wdXRTdHlsZS5mb250RmFtaWx5O1xuXHRcdHdpZHRoTm9kZS5zdHlsZS5mb250V2VpZ2h0ID0gaW5wdXRTdHlsZS5mb250V2VpZ2h0O1xuXHRcdHdpZHRoTm9kZS5zdHlsZS5mb250U3R5bGUgPSBpbnB1dFN0eWxlLmZvbnRTdHlsZTtcblx0XHR3aWR0aE5vZGUuc3R5bGUubGV0dGVyU3BhY2luZyA9IGlucHV0U3R5bGUubGV0dGVyU3BhY2luZztcblx0XHR3aWR0aE5vZGUuc3R5bGUudGV4dFRyYW5zZm9ybSA9IGlucHV0U3R5bGUudGV4dFRyYW5zZm9ybTtcblx0XHRpZiAodGhpcy5wcm9wcy5wbGFjZWhvbGRlcikge1xuXHRcdFx0dmFyIHBsYWNlaG9sZGVyTm9kZSA9IHRoaXMucGxhY2VIb2xkZXJTaXplcjtcblx0XHRcdHBsYWNlaG9sZGVyTm9kZS5zdHlsZS5mb250U2l6ZSA9IGlucHV0U3R5bGUuZm9udFNpemU7XG5cdFx0XHRwbGFjZWhvbGRlck5vZGUuc3R5bGUuZm9udEZhbWlseSA9IGlucHV0U3R5bGUuZm9udEZhbWlseTtcblx0XHRcdHBsYWNlaG9sZGVyTm9kZS5zdHlsZS5mb250V2VpZ2h0ID0gaW5wdXRTdHlsZS5mb250V2VpZ2h0O1xuXHRcdFx0cGxhY2Vob2xkZXJOb2RlLnN0eWxlLmZvbnRTdHlsZSA9IGlucHV0U3R5bGUuZm9udFN0eWxlO1xuXHRcdFx0cGxhY2Vob2xkZXJOb2RlLnN0eWxlLmxldHRlclNwYWNpbmcgPSBpbnB1dFN0eWxlLmxldHRlclNwYWNpbmc7XG5cdFx0XHRwbGFjZWhvbGRlck5vZGUuc3R5bGUudGV4dFRyYW5zZm9ybSA9IGlucHV0U3R5bGUudGV4dFRyYW5zZm9ybTtcblx0XHR9XG5cdH0sXG5cdHVwZGF0ZUlucHV0V2lkdGg6IGZ1bmN0aW9uIHVwZGF0ZUlucHV0V2lkdGgoKSB7XG5cdFx0aWYgKCF0aGlzLm1vdW50ZWQgfHwgIXRoaXMuc2l6ZXIgfHwgdHlwZW9mIHRoaXMuc2l6ZXIuc2Nyb2xsV2lkdGggPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHZhciBuZXdJbnB1dFdpZHRoID0gdW5kZWZpbmVkO1xuXHRcdGlmICh0aGlzLnByb3BzLnBsYWNlaG9sZGVyICYmICghdGhpcy5wcm9wcy52YWx1ZSB8fCB0aGlzLnByb3BzLnZhbHVlICYmIHRoaXMucHJvcHMucGxhY2Vob2xkZXJJc01pbldpZHRoKSkge1xuXHRcdFx0bmV3SW5wdXRXaWR0aCA9IE1hdGgubWF4KHRoaXMuc2l6ZXIuc2Nyb2xsV2lkdGgsIHRoaXMucGxhY2VIb2xkZXJTaXplci5zY3JvbGxXaWR0aCkgKyAyO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRuZXdJbnB1dFdpZHRoID0gdGhpcy5zaXplci5zY3JvbGxXaWR0aCArIDI7XG5cdFx0fVxuXHRcdGlmIChuZXdJbnB1dFdpZHRoIDwgdGhpcy5wcm9wcy5taW5XaWR0aCkge1xuXHRcdFx0bmV3SW5wdXRXaWR0aCA9IHRoaXMucHJvcHMubWluV2lkdGg7XG5cdFx0fVxuXHRcdGlmIChuZXdJbnB1dFdpZHRoICE9PSB0aGlzLnN0YXRlLmlucHV0V2lkdGgpIHtcblx0XHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0XHRpbnB1dFdpZHRoOiBuZXdJbnB1dFdpZHRoXG5cdFx0XHR9KTtcblx0XHR9XG5cdH0sXG5cdGdldElucHV0OiBmdW5jdGlvbiBnZXRJbnB1dCgpIHtcblx0XHRyZXR1cm4gdGhpcy5pbnB1dDtcblx0fSxcblx0Zm9jdXM6IGZ1bmN0aW9uIGZvY3VzKCkge1xuXHRcdHRoaXMuaW5wdXQuZm9jdXMoKTtcblx0fSxcblx0Ymx1cjogZnVuY3Rpb24gYmx1cigpIHtcblx0XHR0aGlzLmlucHV0LmJsdXIoKTtcblx0fSxcblx0c2VsZWN0OiBmdW5jdGlvbiBzZWxlY3QoKSB7XG5cdFx0dGhpcy5pbnB1dC5zZWxlY3QoKTtcblx0fSxcblx0cmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG5cdFx0dmFyIHNpemVyVmFsdWUgPSBbdGhpcy5wcm9wcy5kZWZhdWx0VmFsdWUsIHRoaXMucHJvcHMudmFsdWUsICcnXS5yZWR1Y2UoZnVuY3Rpb24gKHByZXZpb3VzVmFsdWUsIGN1cnJlbnRWYWx1ZSkge1xuXHRcdFx0aWYgKHByZXZpb3VzVmFsdWUgIT09IG51bGwgJiYgcHJldmlvdXNWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHJldHVybiBwcmV2aW91c1ZhbHVlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGN1cnJlbnRWYWx1ZTtcblx0XHR9KTtcblxuXHRcdHZhciB3cmFwcGVyU3R5bGUgPSB0aGlzLnByb3BzLnN0eWxlIHx8IHt9O1xuXHRcdGlmICghd3JhcHBlclN0eWxlLmRpc3BsYXkpIHdyYXBwZXJTdHlsZS5kaXNwbGF5ID0gJ2lubGluZS1ibG9jayc7XG5cdFx0dmFyIGlucHV0U3R5bGUgPSBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcy5pbnB1dFN0eWxlKTtcblx0XHRpbnB1dFN0eWxlLndpZHRoID0gdGhpcy5zdGF0ZS5pbnB1dFdpZHRoICsgJ3B4Jztcblx0XHRpbnB1dFN0eWxlLmJveFNpemluZyA9ICdjb250ZW50LWJveCc7XG5cdFx0dmFyIGlucHV0UHJvcHMgPSBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcyk7XG5cdFx0aW5wdXRQcm9wcy5jbGFzc05hbWUgPSB0aGlzLnByb3BzLmlucHV0Q2xhc3NOYW1lO1xuXHRcdGlucHV0UHJvcHMuc3R5bGUgPSBpbnB1dFN0eWxlO1xuXHRcdC8vIGVuc3VyZSBwcm9wcyBtZWFudCBmb3IgYEF1dG9zaXplSW5wdXRgIGRvbid0IGVuZCB1cCBvbiB0aGUgYGlucHV0YFxuXHRcdGRlbGV0ZSBpbnB1dFByb3BzLmlucHV0Q2xhc3NOYW1lO1xuXHRcdGRlbGV0ZSBpbnB1dFByb3BzLmlucHV0U3R5bGU7XG5cdFx0ZGVsZXRlIGlucHV0UHJvcHMubWluV2lkdGg7XG5cdFx0ZGVsZXRlIGlucHV0UHJvcHMub25BdXRvc2l6ZTtcblx0XHRkZWxldGUgaW5wdXRQcm9wcy5wbGFjZWhvbGRlcklzTWluV2lkdGg7XG5cdFx0cmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG5cdFx0XHQnZGl2Jyxcblx0XHRcdHsgY2xhc3NOYW1lOiB0aGlzLnByb3BzLmNsYXNzTmFtZSwgc3R5bGU6IHdyYXBwZXJTdHlsZSB9LFxuXHRcdFx0UmVhY3QuY3JlYXRlRWxlbWVudCgnaW5wdXQnLCBfZXh0ZW5kcyh7fSwgaW5wdXRQcm9wcywgeyByZWY6IHRoaXMuaW5wdXRSZWYgfSkpLFxuXHRcdFx0UmVhY3QuY3JlYXRlRWxlbWVudChcblx0XHRcdFx0J2RpdicsXG5cdFx0XHRcdHsgcmVmOiB0aGlzLnNpemVyUmVmLCBzdHlsZTogc2l6ZXJTdHlsZSB9LFxuXHRcdFx0XHRzaXplclZhbHVlXG5cdFx0XHQpLFxuXHRcdFx0dGhpcy5wcm9wcy5wbGFjZWhvbGRlciA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG5cdFx0XHRcdCdkaXYnLFxuXHRcdFx0XHR7IHJlZjogdGhpcy5wbGFjZUhvbGRlclNpemVyUmVmLCBzdHlsZTogc2l6ZXJTdHlsZSB9LFxuXHRcdFx0XHR0aGlzLnByb3BzLnBsYWNlaG9sZGVyXG5cdFx0XHQpIDogbnVsbFxuXHRcdCk7XG5cdH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF1dG9zaXplSW5wdXQ7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1pbnB1dC1hdXRvc2l6ZS9saWIvQXV0b3NpemVJbnB1dC5qcyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuXHR2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCd2YWx1ZScgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gZ2V0KF94LCBfeDIsIF94MykgeyB2YXIgX2FnYWluID0gdHJ1ZTsgX2Z1bmN0aW9uOiB3aGlsZSAoX2FnYWluKSB7IHZhciBvYmplY3QgPSBfeCwgcHJvcGVydHkgPSBfeDIsIHJlY2VpdmVyID0gX3gzOyBfYWdhaW4gPSBmYWxzZTsgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IF94ID0gcGFyZW50OyBfeDIgPSBwcm9wZXJ0eTsgX3gzID0gcmVjZWl2ZXI7IF9hZ2FpbiA9IHRydWU7IGRlc2MgPSBwYXJlbnQgPSB1bmRlZmluZWQ7IGNvbnRpbnVlIF9mdW5jdGlvbjsgfSB9IGVsc2UgaWYgKCd2YWx1ZScgaW4gZGVzYykgeyByZXR1cm4gZGVzYy52YWx1ZTsgfSBlbHNlIHsgdmFyIGdldHRlciA9IGRlc2MuZ2V0OyBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOyB9IH0gfTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbicpOyB9IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gJ2Z1bmN0aW9uJyAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ1N1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgJyArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9TZWxlY3QgPSByZXF1aXJlKCcuL1NlbGVjdCcpO1xuXG52YXIgX1NlbGVjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TZWxlY3QpO1xuXG52YXIgX3V0aWxzU3RyaXBEaWFjcml0aWNzID0gcmVxdWlyZSgnLi91dGlscy9zdHJpcERpYWNyaXRpY3MnKTtcblxudmFyIF91dGlsc1N0cmlwRGlhY3JpdGljczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91dGlsc1N0cmlwRGlhY3JpdGljcyk7XG5cbnZhciBwcm9wVHlwZXMgPSB7XG5cdGF1dG9sb2FkOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wuaXNSZXF1aXJlZCwgLy8gYXV0b21hdGljYWxseSBjYWxsIHRoZSBgbG9hZE9wdGlvbnNgIHByb3Agb24tbW91bnQ7IGRlZmF1bHRzIHRvIHRydWVcblx0Y2FjaGU6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYW55LCAvLyBvYmplY3QgdG8gdXNlIHRvIGNhY2hlIHJlc3VsdHM7IHNldCB0byBudWxsL2ZhbHNlIHRvIGRpc2FibGUgY2FjaGluZ1xuXHRjaGlsZHJlbjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLmlzUmVxdWlyZWQsIC8vIENoaWxkIGZ1bmN0aW9uIHJlc3BvbnNpYmxlIGZvciBjcmVhdGluZyB0aGUgaW5uZXIgU2VsZWN0IGNvbXBvbmVudDsgKHByb3BzOiBPYmplY3QpOiBQcm9wVHlwZXMuZWxlbWVudFxuXHRpZ25vcmVBY2NlbnRzOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsIC8vIHN0cmlwIGRpYWNyaXRpY3Mgd2hlbiBmaWx0ZXJpbmc7IGRlZmF1bHRzIHRvIHRydWVcblx0aWdub3JlQ2FzZTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLCAvLyBwZXJmb3JtIGNhc2UtaW5zZW5zaXRpdmUgZmlsdGVyaW5nOyBkZWZhdWx0cyB0byB0cnVlXG5cdGxvYWRpbmdQbGFjZWhvbGRlcjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5vbmVPZlR5cGUoWy8vIHJlcGxhY2VzIHRoZSBwbGFjZWhvbGRlciB3aGlsZSBvcHRpb25zIGFyZSBsb2FkaW5nXG5cdF9wcm9wVHlwZXMyWydkZWZhdWx0J10uc3RyaW5nLCBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm5vZGVdKSxcblx0bG9hZE9wdGlvbnM6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYy5pc1JlcXVpcmVkLCAvLyBjYWxsYmFjayB0byBsb2FkIG9wdGlvbnMgYXN5bmNocm9ub3VzbHk7IChpbnB1dFZhbHVlOiBzdHJpbmcsIGNhbGxiYWNrOiBGdW5jdGlvbik6ID9Qcm9taXNlXG5cdG11bHRpOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsIC8vIG11bHRpLXZhbHVlIGlucHV0XG5cdG9wdGlvbnM6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYXJyYXkuaXNSZXF1aXJlZCwgLy8gYXJyYXkgb2Ygb3B0aW9uc1xuXHRwbGFjZWhvbGRlcjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5vbmVPZlR5cGUoWy8vIGZpZWxkIHBsYWNlaG9sZGVyLCBkaXNwbGF5ZWQgd2hlbiB0aGVyZSdzIG5vIHZhbHVlIChzaGFyZWQgd2l0aCBTZWxlY3QpXG5cdF9wcm9wVHlwZXMyWydkZWZhdWx0J10uc3RyaW5nLCBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm5vZGVdKSxcblx0bm9SZXN1bHRzVGV4dDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5vbmVPZlR5cGUoWy8vIGZpZWxkIG5vUmVzdWx0c1RleHQsIGRpc3BsYXllZCB3aGVuIG5vIG9wdGlvbnMgY29tZSBiYWNrIGZyb20gdGhlIHNlcnZlclxuXHRfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnN0cmluZywgX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ub2RlXSksXG5cdG9uQ2hhbmdlOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsIC8vIG9uQ2hhbmdlIGhhbmRsZXI6IGZ1bmN0aW9uIChuZXdWYWx1ZSkge31cblx0c2VhcmNoUHJvbXB0VGV4dDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5vbmVPZlR5cGUoWy8vIGxhYmVsIHRvIHByb21wdCBmb3Igc2VhcmNoIGlucHV0XG5cdF9wcm9wVHlwZXMyWydkZWZhdWx0J10uc3RyaW5nLCBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm5vZGVdKSxcblx0b25JbnB1dENoYW5nZTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLCAvLyBvcHRpb25hbCBmb3Iga2VlcGluZyB0cmFjayBvZiB3aGF0IGlzIGJlaW5nIHR5cGVkXG5cdHZhbHVlOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmFueSB9O1xuXG4vLyBpbml0aWFsIGZpZWxkIHZhbHVlXG52YXIgZGVmYXVsdENhY2hlID0ge307XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG5cdGF1dG9sb2FkOiB0cnVlLFxuXHRjYWNoZTogZGVmYXVsdENhY2hlLFxuXHRjaGlsZHJlbjogZGVmYXVsdENoaWxkcmVuLFxuXHRpZ25vcmVBY2NlbnRzOiB0cnVlLFxuXHRpZ25vcmVDYXNlOiB0cnVlLFxuXHRsb2FkaW5nUGxhY2Vob2xkZXI6ICdMb2FkaW5nLi4uJyxcblx0b3B0aW9uczogW10sXG5cdHNlYXJjaFByb21wdFRleHQ6ICdUeXBlIHRvIHNlYXJjaCdcbn07XG5cbnZhciBBc3luYyA9IChmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuXHRfaW5oZXJpdHMoQXN5bmMsIF9Db21wb25lbnQpO1xuXG5cdGZ1bmN0aW9uIEFzeW5jKHByb3BzLCBjb250ZXh0KSB7XG5cdFx0X2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFzeW5jKTtcblxuXHRcdF9nZXQoT2JqZWN0LmdldFByb3RvdHlwZU9mKEFzeW5jLnByb3RvdHlwZSksICdjb25zdHJ1Y3RvcicsIHRoaXMpLmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpO1xuXG5cdFx0dGhpcy5fY2FjaGUgPSBwcm9wcy5jYWNoZSA9PT0gZGVmYXVsdENhY2hlID8ge30gOiBwcm9wcy5jYWNoZTtcblxuXHRcdHRoaXMuc3RhdGUgPSB7XG5cdFx0XHRpc0xvYWRpbmc6IGZhbHNlLFxuXHRcdFx0b3B0aW9uczogcHJvcHMub3B0aW9uc1xuXHRcdH07XG5cblx0XHR0aGlzLl9vbklucHV0Q2hhbmdlID0gdGhpcy5fb25JbnB1dENoYW5nZS5iaW5kKHRoaXMpO1xuXHR9XG5cblx0X2NyZWF0ZUNsYXNzKEFzeW5jLCBbe1xuXHRcdGtleTogJ2NvbXBvbmVudERpZE1vdW50Jyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG5cdFx0XHR2YXIgYXV0b2xvYWQgPSB0aGlzLnByb3BzLmF1dG9sb2FkO1xuXG5cdFx0XHRpZiAoYXV0b2xvYWQpIHtcblx0XHRcdFx0dGhpcy5sb2FkT3B0aW9ucygnJyk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnY29tcG9uZW50V2lsbFVwZGF0ZScsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcblx0XHRcdHZhciBfdGhpcyA9IHRoaXM7XG5cblx0XHRcdHZhciBwcm9wZXJ0aWVzVG9TeW5jID0gWydvcHRpb25zJ107XG5cdFx0XHRwcm9wZXJ0aWVzVG9TeW5jLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcblx0XHRcdFx0aWYgKF90aGlzLnByb3BzW3Byb3BdICE9PSBuZXh0UHJvcHNbcHJvcF0pIHtcblx0XHRcdFx0XHRfdGhpcy5zZXRTdGF0ZShfZGVmaW5lUHJvcGVydHkoe30sIHByb3AsIG5leHRQcm9wc1twcm9wXSkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdjbGVhck9wdGlvbnMnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBjbGVhck9wdGlvbnMoKSB7XG5cdFx0XHR0aGlzLnNldFN0YXRlKHsgb3B0aW9uczogW10gfSk7XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnbG9hZE9wdGlvbnMnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBsb2FkT3B0aW9ucyhpbnB1dFZhbHVlKSB7XG5cdFx0XHR2YXIgX3RoaXMyID0gdGhpcztcblxuXHRcdFx0dmFyIGxvYWRPcHRpb25zID0gdGhpcy5wcm9wcy5sb2FkT3B0aW9ucztcblxuXHRcdFx0dmFyIGNhY2hlID0gdGhpcy5fY2FjaGU7XG5cblx0XHRcdGlmIChjYWNoZSAmJiBjYWNoZS5oYXNPd25Qcm9wZXJ0eShpbnB1dFZhbHVlKSkge1xuXHRcdFx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdFx0XHRvcHRpb25zOiBjYWNoZVtpbnB1dFZhbHVlXVxuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHZhciBjYWxsYmFjayA9IGZ1bmN0aW9uIGNhbGxiYWNrKGVycm9yLCBkYXRhKSB7XG5cdFx0XHRcdGlmIChjYWxsYmFjayA9PT0gX3RoaXMyLl9jYWxsYmFjaykge1xuXHRcdFx0XHRcdF90aGlzMi5fY2FsbGJhY2sgPSBudWxsO1xuXG5cdFx0XHRcdFx0dmFyIG9wdGlvbnMgPSBkYXRhICYmIGRhdGEub3B0aW9ucyB8fCBbXTtcblxuXHRcdFx0XHRcdGlmIChjYWNoZSkge1xuXHRcdFx0XHRcdFx0Y2FjaGVbaW5wdXRWYWx1ZV0gPSBvcHRpb25zO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdF90aGlzMi5zZXRTdGF0ZSh7XG5cdFx0XHRcdFx0XHRpc0xvYWRpbmc6IGZhbHNlLFxuXHRcdFx0XHRcdFx0b3B0aW9uczogb3B0aW9uc1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBJZ25vcmUgYWxsIGJ1dCB0aGUgbW9zdCByZWNlbnQgcmVxdWVzdFxuXHRcdFx0dGhpcy5fY2FsbGJhY2sgPSBjYWxsYmFjaztcblxuXHRcdFx0dmFyIHByb21pc2UgPSBsb2FkT3B0aW9ucyhpbnB1dFZhbHVlLCBjYWxsYmFjayk7XG5cdFx0XHRpZiAocHJvbWlzZSkge1xuXHRcdFx0XHRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcblx0XHRcdFx0XHRyZXR1cm4gY2FsbGJhY2sobnVsbCwgZGF0YSk7XG5cdFx0XHRcdH0sIGZ1bmN0aW9uIChlcnJvcikge1xuXHRcdFx0XHRcdHJldHVybiBjYWxsYmFjayhlcnJvcik7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodGhpcy5fY2FsbGJhY2sgJiYgIXRoaXMuc3RhdGUuaXNMb2FkaW5nKSB7XG5cdFx0XHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0XHRcdGlzTG9hZGluZzogdHJ1ZVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGlucHV0VmFsdWU7XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnX29uSW5wdXRDaGFuZ2UnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBfb25JbnB1dENoYW5nZShpbnB1dFZhbHVlKSB7XG5cdFx0XHR2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcblx0XHRcdHZhciBpZ25vcmVBY2NlbnRzID0gX3Byb3BzLmlnbm9yZUFjY2VudHM7XG5cdFx0XHR2YXIgaWdub3JlQ2FzZSA9IF9wcm9wcy5pZ25vcmVDYXNlO1xuXHRcdFx0dmFyIG9uSW5wdXRDaGFuZ2UgPSBfcHJvcHMub25JbnB1dENoYW5nZTtcblxuXHRcdFx0aWYgKGlnbm9yZUFjY2VudHMpIHtcblx0XHRcdFx0aW5wdXRWYWx1ZSA9ICgwLCBfdXRpbHNTdHJpcERpYWNyaXRpY3MyWydkZWZhdWx0J10pKGlucHV0VmFsdWUpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoaWdub3JlQ2FzZSkge1xuXHRcdFx0XHRpbnB1dFZhbHVlID0gaW5wdXRWYWx1ZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAob25JbnB1dENoYW5nZSkge1xuXHRcdFx0XHRvbklucHV0Q2hhbmdlKGlucHV0VmFsdWUpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGhpcy5sb2FkT3B0aW9ucyhpbnB1dFZhbHVlKTtcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdpbnB1dFZhbHVlJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gaW5wdXRWYWx1ZSgpIHtcblx0XHRcdGlmICh0aGlzLnNlbGVjdCkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5zZWxlY3Quc3RhdGUuaW5wdXRWYWx1ZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiAnJztcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdub1Jlc3VsdHNUZXh0Jyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gbm9SZXN1bHRzVGV4dCgpIHtcblx0XHRcdHZhciBfcHJvcHMyID0gdGhpcy5wcm9wcztcblx0XHRcdHZhciBsb2FkaW5nUGxhY2Vob2xkZXIgPSBfcHJvcHMyLmxvYWRpbmdQbGFjZWhvbGRlcjtcblx0XHRcdHZhciBub1Jlc3VsdHNUZXh0ID0gX3Byb3BzMi5ub1Jlc3VsdHNUZXh0O1xuXHRcdFx0dmFyIHNlYXJjaFByb21wdFRleHQgPSBfcHJvcHMyLnNlYXJjaFByb21wdFRleHQ7XG5cdFx0XHR2YXIgaXNMb2FkaW5nID0gdGhpcy5zdGF0ZS5pc0xvYWRpbmc7XG5cblx0XHRcdHZhciBpbnB1dFZhbHVlID0gdGhpcy5pbnB1dFZhbHVlKCk7XG5cblx0XHRcdGlmIChpc0xvYWRpbmcpIHtcblx0XHRcdFx0cmV0dXJuIGxvYWRpbmdQbGFjZWhvbGRlcjtcblx0XHRcdH1cblx0XHRcdGlmIChpbnB1dFZhbHVlICYmIG5vUmVzdWx0c1RleHQpIHtcblx0XHRcdFx0cmV0dXJuIG5vUmVzdWx0c1RleHQ7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gc2VhcmNoUHJvbXB0VGV4dDtcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdmb2N1cycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGZvY3VzKCkge1xuXHRcdFx0dGhpcy5zZWxlY3QuZm9jdXMoKTtcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdyZW5kZXInLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG5cdFx0XHR2YXIgX3RoaXMzID0gdGhpcztcblxuXHRcdFx0dmFyIF9wcm9wczMgPSB0aGlzLnByb3BzO1xuXHRcdFx0dmFyIGNoaWxkcmVuID0gX3Byb3BzMy5jaGlsZHJlbjtcblx0XHRcdHZhciBsb2FkaW5nUGxhY2Vob2xkZXIgPSBfcHJvcHMzLmxvYWRpbmdQbGFjZWhvbGRlcjtcblx0XHRcdHZhciBwbGFjZWhvbGRlciA9IF9wcm9wczMucGxhY2Vob2xkZXI7XG5cdFx0XHR2YXIgX3N0YXRlID0gdGhpcy5zdGF0ZTtcblx0XHRcdHZhciBpc0xvYWRpbmcgPSBfc3RhdGUuaXNMb2FkaW5nO1xuXHRcdFx0dmFyIG9wdGlvbnMgPSBfc3RhdGUub3B0aW9ucztcblxuXHRcdFx0dmFyIHByb3BzID0ge1xuXHRcdFx0XHRub1Jlc3VsdHNUZXh0OiB0aGlzLm5vUmVzdWx0c1RleHQoKSxcblx0XHRcdFx0cGxhY2Vob2xkZXI6IGlzTG9hZGluZyA/IGxvYWRpbmdQbGFjZWhvbGRlciA6IHBsYWNlaG9sZGVyLFxuXHRcdFx0XHRvcHRpb25zOiBpc0xvYWRpbmcgJiYgbG9hZGluZ1BsYWNlaG9sZGVyID8gW10gOiBvcHRpb25zLFxuXHRcdFx0XHRyZWY6IGZ1bmN0aW9uIHJlZihfcmVmKSB7XG5cdFx0XHRcdFx0cmV0dXJuIF90aGlzMy5zZWxlY3QgPSBfcmVmO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UobmV3VmFsdWVzKSB7XG5cdFx0XHRcdFx0aWYgKF90aGlzMy5wcm9wcy5tdWx0aSAmJiBfdGhpczMucHJvcHMudmFsdWUgJiYgbmV3VmFsdWVzLmxlbmd0aCA+IF90aGlzMy5wcm9wcy52YWx1ZS5sZW5ndGgpIHtcblx0XHRcdFx0XHRcdF90aGlzMy5jbGVhck9wdGlvbnMoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0X3RoaXMzLnByb3BzLm9uQ2hhbmdlKG5ld1ZhbHVlcyk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRcdHJldHVybiBjaGlsZHJlbihfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcywgcHJvcHMsIHtcblx0XHRcdFx0aXNMb2FkaW5nOiBpc0xvYWRpbmcsXG5cdFx0XHRcdG9uSW5wdXRDaGFuZ2U6IHRoaXMuX29uSW5wdXRDaGFuZ2Vcblx0XHRcdH0pKTtcblx0XHR9XG5cdH1dKTtcblxuXHRyZXR1cm4gQXN5bmM7XG59KShfcmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gQXN5bmM7XG5cbkFzeW5jLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbkFzeW5jLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuZnVuY3Rpb24gZGVmYXVsdENoaWxkcmVuKHByb3BzKSB7XG5cdHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChfU2VsZWN0MlsnZGVmYXVsdCddLCBwcm9wcyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LXNlbGVjdC9saWIvQXN5bmMuanMiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX2NyZWF0ZVJlYWN0Q2xhc3MgPSByZXF1aXJlKCdjcmVhdGUtcmVhY3QtY2xhc3MnKTtcblxudmFyIF9jcmVhdGVSZWFjdENsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZVJlYWN0Q2xhc3MpO1xuXG52YXIgX1NlbGVjdCA9IHJlcXVpcmUoJy4vU2VsZWN0Jyk7XG5cbnZhciBfU2VsZWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1NlbGVjdCk7XG5cbmZ1bmN0aW9uIHJlZHVjZShvYmopIHtcblx0dmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxIHx8IGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkID8ge30gOiBhcmd1bWVudHNbMV07XG5cblx0cmV0dXJuIE9iamVjdC5rZXlzKG9iaikucmVkdWNlKGZ1bmN0aW9uIChwcm9wcywga2V5KSB7XG5cdFx0dmFyIHZhbHVlID0gb2JqW2tleV07XG5cdFx0aWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHByb3BzW2tleV0gPSB2YWx1ZTtcblx0XHRyZXR1cm4gcHJvcHM7XG5cdH0sIHByb3BzKTtcbn1cblxudmFyIEFzeW5jQ3JlYXRhYmxlID0gKDAsIF9jcmVhdGVSZWFjdENsYXNzMlsnZGVmYXVsdCddKSh7XG5cdGRpc3BsYXlOYW1lOiAnQXN5bmNDcmVhdGFibGVTZWxlY3QnLFxuXG5cdGZvY3VzOiBmdW5jdGlvbiBmb2N1cygpIHtcblx0XHR0aGlzLnNlbGVjdC5mb2N1cygpO1xuXHR9LFxuXG5cdHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuXHRcdHZhciBfdGhpcyA9IHRoaXM7XG5cblx0XHRyZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdFx0XHRfU2VsZWN0MlsnZGVmYXVsdCddLkFzeW5jLFxuXHRcdFx0dGhpcy5wcm9wcyxcblx0XHRcdGZ1bmN0aW9uIChhc3luY1Byb3BzKSB7XG5cdFx0XHRcdHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0XHRcdFx0XHRfU2VsZWN0MlsnZGVmYXVsdCddLkNyZWF0YWJsZSxcblx0XHRcdFx0XHRfdGhpcy5wcm9wcyxcblx0XHRcdFx0XHRmdW5jdGlvbiAoY3JlYXRhYmxlUHJvcHMpIHtcblx0XHRcdFx0XHRcdHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChfU2VsZWN0MlsnZGVmYXVsdCddLCBfZXh0ZW5kcyh7fSwgcmVkdWNlKGFzeW5jUHJvcHMsIHJlZHVjZShjcmVhdGFibGVQcm9wcywge30pKSwge1xuXHRcdFx0XHRcdFx0XHRvbklucHV0Q2hhbmdlOiBmdW5jdGlvbiAoaW5wdXQpIHtcblx0XHRcdFx0XHRcdFx0XHRjcmVhdGFibGVQcm9wcy5vbklucHV0Q2hhbmdlKGlucHV0KTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gYXN5bmNQcm9wcy5vbklucHV0Q2hhbmdlKGlucHV0KTtcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0cmVmOiBmdW5jdGlvbiAocmVmKSB7XG5cdFx0XHRcdFx0XHRcdFx0X3RoaXMuc2VsZWN0ID0gcmVmO1xuXHRcdFx0XHRcdFx0XHRcdGNyZWF0YWJsZVByb3BzLnJlZihyZWYpO1xuXHRcdFx0XHRcdFx0XHRcdGFzeW5jUHJvcHMucmVmKHJlZik7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0pKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0KTtcblx0fVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXN5bmNDcmVhdGFibGU7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1zZWxlY3QvbGliL0FzeW5jQ3JlYXRhYmxlLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX2NyZWF0ZVJlYWN0Q2xhc3MgPSByZXF1aXJlKCdjcmVhdGUtcmVhY3QtY2xhc3MnKTtcblxudmFyIF9jcmVhdGVSZWFjdENsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZVJlYWN0Q2xhc3MpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9TZWxlY3QgPSByZXF1aXJlKCcuL1NlbGVjdCcpO1xuXG52YXIgX1NlbGVjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TZWxlY3QpO1xuXG52YXIgX3V0aWxzRGVmYXVsdEZpbHRlck9wdGlvbnMgPSByZXF1aXJlKCcuL3V0aWxzL2RlZmF1bHRGaWx0ZXJPcHRpb25zJyk7XG5cbnZhciBfdXRpbHNEZWZhdWx0RmlsdGVyT3B0aW9uczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91dGlsc0RlZmF1bHRGaWx0ZXJPcHRpb25zKTtcblxudmFyIF91dGlsc0RlZmF1bHRNZW51UmVuZGVyZXIgPSByZXF1aXJlKCcuL3V0aWxzL2RlZmF1bHRNZW51UmVuZGVyZXInKTtcblxudmFyIF91dGlsc0RlZmF1bHRNZW51UmVuZGVyZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdXRpbHNEZWZhdWx0TWVudVJlbmRlcmVyKTtcblxudmFyIENyZWF0YWJsZSA9ICgwLCBfY3JlYXRlUmVhY3RDbGFzczJbJ2RlZmF1bHQnXSkoe1xuXHRkaXNwbGF5TmFtZTogJ0NyZWF0YWJsZVNlbGVjdCcsXG5cblx0cHJvcFR5cGVzOiB7XG5cdFx0Ly8gQ2hpbGQgZnVuY3Rpb24gcmVzcG9uc2libGUgZm9yIGNyZWF0aW5nIHRoZSBpbm5lciBTZWxlY3QgY29tcG9uZW50XG5cdFx0Ly8gVGhpcyBjb21wb25lbnQgY2FuIGJlIHVzZWQgdG8gY29tcG9zZSBIT0NzIChlZyBDcmVhdGFibGUgYW5kIEFzeW5jKVxuXHRcdC8vIChwcm9wczogT2JqZWN0KTogUHJvcFR5cGVzLmVsZW1lbnRcblx0XHRjaGlsZHJlbjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLFxuXG5cdFx0Ly8gU2VlIFNlbGVjdC5wcm9wVHlwZXMuZmlsdGVyT3B0aW9uc1xuXHRcdGZpbHRlck9wdGlvbnM6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYW55LFxuXG5cdFx0Ly8gU2VhcmNoZXMgZm9yIGFueSBtYXRjaGluZyBvcHRpb24gd2l0aGluIHRoZSBzZXQgb2Ygb3B0aW9ucy5cblx0XHQvLyBUaGlzIGZ1bmN0aW9uIHByZXZlbnRzIGR1cGxpY2F0ZSBvcHRpb25zIGZyb20gYmVpbmcgY3JlYXRlZC5cblx0XHQvLyAoeyBvcHRpb246IE9iamVjdCwgb3B0aW9uczogQXJyYXksIGxhYmVsS2V5OiBzdHJpbmcsIHZhbHVlS2V5OiBzdHJpbmcgfSk6IGJvb2xlYW5cblx0XHRpc09wdGlvblVuaXF1ZTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLFxuXG5cdFx0Ly8gRGV0ZXJtaW5lcyBpZiB0aGUgY3VycmVudCBpbnB1dCB0ZXh0IHJlcHJlc2VudHMgYSB2YWxpZCBvcHRpb24uXG5cdFx0Ly8gKHsgbGFiZWw6IHN0cmluZyB9KTogYm9vbGVhblxuXHRcdGlzVmFsaWROZXdPcHRpb246IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcblxuXHRcdC8vIFNlZSBTZWxlY3QucHJvcFR5cGVzLm1lbnVSZW5kZXJlclxuXHRcdG1lbnVSZW5kZXJlcjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5hbnksXG5cblx0XHQvLyBGYWN0b3J5IHRvIGNyZWF0ZSBuZXcgb3B0aW9uLlxuXHRcdC8vICh7IGxhYmVsOiBzdHJpbmcsIGxhYmVsS2V5OiBzdHJpbmcsIHZhbHVlS2V5OiBzdHJpbmcgfSk6IE9iamVjdFxuXHRcdG5ld09wdGlvbkNyZWF0b3I6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcblxuXHRcdC8vIGlucHV0IGNoYW5nZSBoYW5kbGVyOiBmdW5jdGlvbiAoaW5wdXRWYWx1ZSkge31cblx0XHRvbklucHV0Q2hhbmdlOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsXG5cblx0XHQvLyBpbnB1dCBrZXlEb3duIGhhbmRsZXI6IGZ1bmN0aW9uIChldmVudCkge31cblx0XHRvbklucHV0S2V5RG93bjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLFxuXG5cdFx0Ly8gbmV3IG9wdGlvbiBjbGljayBoYW5kbGVyOiBmdW5jdGlvbiAob3B0aW9uKSB7fVxuXHRcdG9uTmV3T3B0aW9uQ2xpY2s6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcblxuXHRcdC8vIFNlZSBTZWxlY3QucHJvcFR5cGVzLm9wdGlvbnNcblx0XHRvcHRpb25zOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmFycmF5LFxuXG5cdFx0Ly8gQ3JlYXRlcyBwcm9tcHQvcGxhY2Vob2xkZXIgb3B0aW9uIHRleHQuXG5cdFx0Ly8gKGZpbHRlclRleHQ6IHN0cmluZyk6IHN0cmluZ1xuXHRcdHByb21wdFRleHRDcmVhdG9yOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsXG5cblx0XHQvLyBEZWNpZGVzIGlmIGEga2V5RG93biBldmVudCAoZWcgaXRzIGBrZXlDb2RlYCkgc2hvdWxkIHJlc3VsdCBpbiB0aGUgY3JlYXRpb24gb2YgYSBuZXcgb3B0aW9uLlxuXHRcdHNob3VsZEtleURvd25FdmVudENyZWF0ZU5ld09wdGlvbjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jXG5cdH0sXG5cblx0Ly8gRGVmYXVsdCBwcm9wIG1ldGhvZHNcblx0c3RhdGljczoge1xuXHRcdGlzT3B0aW9uVW5pcXVlOiBpc09wdGlvblVuaXF1ZSxcblx0XHRpc1ZhbGlkTmV3T3B0aW9uOiBpc1ZhbGlkTmV3T3B0aW9uLFxuXHRcdG5ld09wdGlvbkNyZWF0b3I6IG5ld09wdGlvbkNyZWF0b3IsXG5cdFx0cHJvbXB0VGV4dENyZWF0b3I6IHByb21wdFRleHRDcmVhdG9yLFxuXHRcdHNob3VsZEtleURvd25FdmVudENyZWF0ZU5ld09wdGlvbjogc2hvdWxkS2V5RG93bkV2ZW50Q3JlYXRlTmV3T3B0aW9uXG5cdH0sXG5cblx0Z2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGZpbHRlck9wdGlvbnM6IF91dGlsc0RlZmF1bHRGaWx0ZXJPcHRpb25zMlsnZGVmYXVsdCddLFxuXHRcdFx0aXNPcHRpb25VbmlxdWU6IGlzT3B0aW9uVW5pcXVlLFxuXHRcdFx0aXNWYWxpZE5ld09wdGlvbjogaXNWYWxpZE5ld09wdGlvbixcblx0XHRcdG1lbnVSZW5kZXJlcjogX3V0aWxzRGVmYXVsdE1lbnVSZW5kZXJlcjJbJ2RlZmF1bHQnXSxcblx0XHRcdG5ld09wdGlvbkNyZWF0b3I6IG5ld09wdGlvbkNyZWF0b3IsXG5cdFx0XHRwcm9tcHRUZXh0Q3JlYXRvcjogcHJvbXB0VGV4dENyZWF0b3IsXG5cdFx0XHRzaG91bGRLZXlEb3duRXZlbnRDcmVhdGVOZXdPcHRpb246IHNob3VsZEtleURvd25FdmVudENyZWF0ZU5ld09wdGlvblxuXHRcdH07XG5cdH0sXG5cblx0Y3JlYXRlTmV3T3B0aW9uOiBmdW5jdGlvbiBjcmVhdGVOZXdPcHRpb24oKSB7XG5cdFx0dmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG5cdFx0dmFyIGlzVmFsaWROZXdPcHRpb24gPSBfcHJvcHMuaXNWYWxpZE5ld09wdGlvbjtcblx0XHR2YXIgbmV3T3B0aW9uQ3JlYXRvciA9IF9wcm9wcy5uZXdPcHRpb25DcmVhdG9yO1xuXHRcdHZhciBvbk5ld09wdGlvbkNsaWNrID0gX3Byb3BzLm9uTmV3T3B0aW9uQ2xpY2s7XG5cdFx0dmFyIF9wcm9wcyRvcHRpb25zID0gX3Byb3BzLm9wdGlvbnM7XG5cdFx0dmFyIG9wdGlvbnMgPSBfcHJvcHMkb3B0aW9ucyA9PT0gdW5kZWZpbmVkID8gW10gOiBfcHJvcHMkb3B0aW9ucztcblx0XHR2YXIgc2hvdWxkS2V5RG93bkV2ZW50Q3JlYXRlTmV3T3B0aW9uID0gX3Byb3BzLnNob3VsZEtleURvd25FdmVudENyZWF0ZU5ld09wdGlvbjtcblxuXHRcdGlmIChpc1ZhbGlkTmV3T3B0aW9uKHsgbGFiZWw6IHRoaXMuaW5wdXRWYWx1ZSB9KSkge1xuXHRcdFx0dmFyIG9wdGlvbiA9IG5ld09wdGlvbkNyZWF0b3IoeyBsYWJlbDogdGhpcy5pbnB1dFZhbHVlLCBsYWJlbEtleTogdGhpcy5sYWJlbEtleSwgdmFsdWVLZXk6IHRoaXMudmFsdWVLZXkgfSk7XG5cdFx0XHR2YXIgX2lzT3B0aW9uVW5pcXVlID0gdGhpcy5pc09wdGlvblVuaXF1ZSh7IG9wdGlvbjogb3B0aW9uIH0pO1xuXG5cdFx0XHQvLyBEb24ndCBhZGQgdGhlIHNhbWUgb3B0aW9uIHR3aWNlLlxuXHRcdFx0aWYgKF9pc09wdGlvblVuaXF1ZSkge1xuXHRcdFx0XHRpZiAob25OZXdPcHRpb25DbGljaykge1xuXHRcdFx0XHRcdG9uTmV3T3B0aW9uQ2xpY2sob3B0aW9uKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRvcHRpb25zLnVuc2hpZnQob3B0aW9uKTtcblxuXHRcdFx0XHRcdHRoaXMuc2VsZWN0LnNlbGVjdFZhbHVlKG9wdGlvbik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0ZmlsdGVyT3B0aW9uczogZnVuY3Rpb24gZmlsdGVyT3B0aW9ucygpIHtcblx0XHR2YXIgX3Byb3BzMiA9IHRoaXMucHJvcHM7XG5cdFx0dmFyIGZpbHRlck9wdGlvbnMgPSBfcHJvcHMyLmZpbHRlck9wdGlvbnM7XG5cdFx0dmFyIGlzVmFsaWROZXdPcHRpb24gPSBfcHJvcHMyLmlzVmFsaWROZXdPcHRpb247XG5cdFx0dmFyIG9wdGlvbnMgPSBfcHJvcHMyLm9wdGlvbnM7XG5cdFx0dmFyIHByb21wdFRleHRDcmVhdG9yID0gX3Byb3BzMi5wcm9tcHRUZXh0Q3JlYXRvcjtcblxuXHRcdC8vIFRSSUNLWSBDaGVjayBjdXJyZW50bHkgc2VsZWN0ZWQgb3B0aW9ucyBhcyB3ZWxsLlxuXHRcdC8vIERvbid0IGRpc3BsYXkgYSBjcmVhdGUtcHJvbXB0IGZvciBhIHZhbHVlIHRoYXQncyBzZWxlY3RlZC5cblx0XHQvLyBUaGlzIGNvdmVycyBhc3luYyBlZGdlLWNhc2VzIHdoZXJlIGEgbmV3bHktY3JlYXRlZCBPcHRpb24gaXNuJ3QgeWV0IGluIHRoZSBhc3luYy1sb2FkZWQgYXJyYXkuXG5cdFx0dmFyIGV4Y2x1ZGVPcHRpb25zID0gYXJndW1lbnRzWzJdIHx8IFtdO1xuXG5cdFx0dmFyIGZpbHRlcmVkT3B0aW9ucyA9IGZpbHRlck9wdGlvbnMuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpIHx8IFtdO1xuXG5cdFx0aWYgKGlzVmFsaWROZXdPcHRpb24oeyBsYWJlbDogdGhpcy5pbnB1dFZhbHVlIH0pKSB7XG5cdFx0XHR2YXIgX25ld09wdGlvbkNyZWF0b3IgPSB0aGlzLnByb3BzLm5ld09wdGlvbkNyZWF0b3I7XG5cblx0XHRcdHZhciBvcHRpb24gPSBfbmV3T3B0aW9uQ3JlYXRvcih7XG5cdFx0XHRcdGxhYmVsOiB0aGlzLmlucHV0VmFsdWUsXG5cdFx0XHRcdGxhYmVsS2V5OiB0aGlzLmxhYmVsS2V5LFxuXHRcdFx0XHR2YWx1ZUtleTogdGhpcy52YWx1ZUtleVxuXHRcdFx0fSk7XG5cblx0XHRcdC8vIFRSSUNLWSBDb21wYXJlIHRvIGFsbCBvcHRpb25zIChub3QganVzdCBmaWx0ZXJlZCBvcHRpb25zKSBpbiBjYXNlIG9wdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHNlbGVjdGVkKS5cblx0XHRcdC8vIEZvciBtdWx0aS1zZWxlY3RzLCB0aGlzIHdvdWxkIHJlbW92ZSBpdCBmcm9tIHRoZSBmaWx0ZXJlZCBsaXN0LlxuXHRcdFx0dmFyIF9pc09wdGlvblVuaXF1ZTIgPSB0aGlzLmlzT3B0aW9uVW5pcXVlKHtcblx0XHRcdFx0b3B0aW9uOiBvcHRpb24sXG5cdFx0XHRcdG9wdGlvbnM6IGV4Y2x1ZGVPcHRpb25zLmNvbmNhdChmaWx0ZXJlZE9wdGlvbnMpXG5cdFx0XHR9KTtcblxuXHRcdFx0aWYgKF9pc09wdGlvblVuaXF1ZTIpIHtcblx0XHRcdFx0dmFyIF9wcm9tcHQgPSBwcm9tcHRUZXh0Q3JlYXRvcih0aGlzLmlucHV0VmFsdWUpO1xuXG5cdFx0XHRcdHRoaXMuX2NyZWF0ZVBsYWNlaG9sZGVyT3B0aW9uID0gX25ld09wdGlvbkNyZWF0b3Ioe1xuXHRcdFx0XHRcdGxhYmVsOiBfcHJvbXB0LFxuXHRcdFx0XHRcdGxhYmVsS2V5OiB0aGlzLmxhYmVsS2V5LFxuXHRcdFx0XHRcdHZhbHVlS2V5OiB0aGlzLnZhbHVlS2V5XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdGZpbHRlcmVkT3B0aW9ucy51bnNoaWZ0KHRoaXMuX2NyZWF0ZVBsYWNlaG9sZGVyT3B0aW9uKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmlsdGVyZWRPcHRpb25zO1xuXHR9LFxuXG5cdGlzT3B0aW9uVW5pcXVlOiBmdW5jdGlvbiBpc09wdGlvblVuaXF1ZShfcmVmMikge1xuXHRcdHZhciBvcHRpb24gPSBfcmVmMi5vcHRpb247XG5cdFx0dmFyIG9wdGlvbnMgPSBfcmVmMi5vcHRpb25zO1xuXHRcdHZhciBpc09wdGlvblVuaXF1ZSA9IHRoaXMucHJvcHMuaXNPcHRpb25VbmlxdWU7XG5cblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB0aGlzLnNlbGVjdC5maWx0ZXJPcHRpb25zKCk7XG5cblx0XHRyZXR1cm4gaXNPcHRpb25VbmlxdWUoe1xuXHRcdFx0bGFiZWxLZXk6IHRoaXMubGFiZWxLZXksXG5cdFx0XHRvcHRpb246IG9wdGlvbixcblx0XHRcdG9wdGlvbnM6IG9wdGlvbnMsXG5cdFx0XHR2YWx1ZUtleTogdGhpcy52YWx1ZUtleVxuXHRcdH0pO1xuXHR9LFxuXG5cdG1lbnVSZW5kZXJlcjogZnVuY3Rpb24gbWVudVJlbmRlcmVyKHBhcmFtcykge1xuXHRcdHZhciBtZW51UmVuZGVyZXIgPSB0aGlzLnByb3BzLm1lbnVSZW5kZXJlcjtcblxuXHRcdHJldHVybiBtZW51UmVuZGVyZXIoX2V4dGVuZHMoe30sIHBhcmFtcywge1xuXHRcdFx0b25TZWxlY3Q6IHRoaXMub25PcHRpb25TZWxlY3QsXG5cdFx0XHRzZWxlY3RWYWx1ZTogdGhpcy5vbk9wdGlvblNlbGVjdFxuXHRcdH0pKTtcblx0fSxcblxuXHRvbklucHV0Q2hhbmdlOiBmdW5jdGlvbiBvbklucHV0Q2hhbmdlKGlucHV0KSB7XG5cdFx0dmFyIG9uSW5wdXRDaGFuZ2UgPSB0aGlzLnByb3BzLm9uSW5wdXRDaGFuZ2U7XG5cblx0XHRpZiAob25JbnB1dENoYW5nZSkge1xuXHRcdFx0b25JbnB1dENoYW5nZShpbnB1dCk7XG5cdFx0fVxuXG5cdFx0Ly8gVGhpcyB2YWx1ZSBtYXkgYmUgbmVlZGVkIGluIGJldHdlZW4gU2VsZWN0IG1vdW50cyAod2hlbiB0aGlzLnNlbGVjdCBpcyBudWxsKVxuXHRcdHRoaXMuaW5wdXRWYWx1ZSA9IGlucHV0O1xuXHR9LFxuXG5cdG9uSW5wdXRLZXlEb3duOiBmdW5jdGlvbiBvbklucHV0S2V5RG93bihldmVudCkge1xuXHRcdHZhciBfcHJvcHMzID0gdGhpcy5wcm9wcztcblx0XHR2YXIgc2hvdWxkS2V5RG93bkV2ZW50Q3JlYXRlTmV3T3B0aW9uID0gX3Byb3BzMy5zaG91bGRLZXlEb3duRXZlbnRDcmVhdGVOZXdPcHRpb247XG5cdFx0dmFyIG9uSW5wdXRLZXlEb3duID0gX3Byb3BzMy5vbklucHV0S2V5RG93bjtcblxuXHRcdHZhciBmb2N1c2VkT3B0aW9uID0gdGhpcy5zZWxlY3QuZ2V0Rm9jdXNlZE9wdGlvbigpO1xuXG5cdFx0aWYgKGZvY3VzZWRPcHRpb24gJiYgZm9jdXNlZE9wdGlvbiA9PT0gdGhpcy5fY3JlYXRlUGxhY2Vob2xkZXJPcHRpb24gJiYgc2hvdWxkS2V5RG93bkV2ZW50Q3JlYXRlTmV3T3B0aW9uKHsga2V5Q29kZTogZXZlbnQua2V5Q29kZSB9KSkge1xuXHRcdFx0dGhpcy5jcmVhdGVOZXdPcHRpb24oKTtcblxuXHRcdFx0Ly8gUHJldmVudCBkZWNvcmF0ZWQgU2VsZWN0IGZyb20gZG9pbmcgYW55dGhpbmcgYWRkaXRpb25hbCB3aXRoIHRoaXMga2V5RG93biBldmVudFxuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHR9IGVsc2UgaWYgKG9uSW5wdXRLZXlEb3duKSB7XG5cdFx0XHRvbklucHV0S2V5RG93bihldmVudCk7XG5cdFx0fVxuXHR9LFxuXG5cdG9uT3B0aW9uU2VsZWN0OiBmdW5jdGlvbiBvbk9wdGlvblNlbGVjdChvcHRpb24sIGV2ZW50KSB7XG5cdFx0aWYgKG9wdGlvbiA9PT0gdGhpcy5fY3JlYXRlUGxhY2Vob2xkZXJPcHRpb24pIHtcblx0XHRcdHRoaXMuY3JlYXRlTmV3T3B0aW9uKCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuc2VsZWN0LnNlbGVjdFZhbHVlKG9wdGlvbik7XG5cdFx0fVxuXHR9LFxuXG5cdGZvY3VzOiBmdW5jdGlvbiBmb2N1cygpIHtcblx0XHR0aGlzLnNlbGVjdC5mb2N1cygpO1xuXHR9LFxuXG5cdHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuXHRcdHZhciBfdGhpcyA9IHRoaXM7XG5cblx0XHR2YXIgX3Byb3BzNCA9IHRoaXMucHJvcHM7XG5cdFx0dmFyIG5ld09wdGlvbkNyZWF0b3IgPSBfcHJvcHM0Lm5ld09wdGlvbkNyZWF0b3I7XG5cdFx0dmFyIHNob3VsZEtleURvd25FdmVudENyZWF0ZU5ld09wdGlvbiA9IF9wcm9wczQuc2hvdWxkS2V5RG93bkV2ZW50Q3JlYXRlTmV3T3B0aW9uO1xuXG5cdFx0dmFyIHJlc3RQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHM0LCBbJ25ld09wdGlvbkNyZWF0b3InLCAnc2hvdWxkS2V5RG93bkV2ZW50Q3JlYXRlTmV3T3B0aW9uJ10pO1xuXG5cdFx0dmFyIGNoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcblxuXHRcdC8vIFdlIGNhbid0IHVzZSBkZXN0cnVjdHVyaW5nIGRlZmF1bHQgdmFsdWVzIHRvIHNldCB0aGUgY2hpbGRyZW4sXG5cdFx0Ly8gYmVjYXVzZSBpdCB3b24ndCBhcHBseSB3b3JrIGlmIGBjaGlsZHJlbmAgaXMgbnVsbC4gQSBmYWxzeSBjaGVjayBpc1xuXHRcdC8vIG1vcmUgcmVsaWFibGUgaW4gcmVhbCB3b3JsZCB1c2UtY2FzZXMuXG5cdFx0aWYgKCFjaGlsZHJlbikge1xuXHRcdFx0Y2hpbGRyZW4gPSBkZWZhdWx0Q2hpbGRyZW47XG5cdFx0fVxuXG5cdFx0dmFyIHByb3BzID0gX2V4dGVuZHMoe30sIHJlc3RQcm9wcywge1xuXHRcdFx0YWxsb3dDcmVhdGU6IHRydWUsXG5cdFx0XHRmaWx0ZXJPcHRpb25zOiB0aGlzLmZpbHRlck9wdGlvbnMsXG5cdFx0XHRtZW51UmVuZGVyZXI6IHRoaXMubWVudVJlbmRlcmVyLFxuXHRcdFx0b25JbnB1dENoYW5nZTogdGhpcy5vbklucHV0Q2hhbmdlLFxuXHRcdFx0b25JbnB1dEtleURvd246IHRoaXMub25JbnB1dEtleURvd24sXG5cdFx0XHRyZWY6IGZ1bmN0aW9uIHJlZihfcmVmKSB7XG5cdFx0XHRcdF90aGlzLnNlbGVjdCA9IF9yZWY7XG5cblx0XHRcdFx0Ly8gVGhlc2UgdmFsdWVzIG1heSBiZSBuZWVkZWQgaW4gYmV0d2VlbiBTZWxlY3QgbW91bnRzICh3aGVuIHRoaXMuc2VsZWN0IGlzIG51bGwpXG5cdFx0XHRcdGlmIChfcmVmKSB7XG5cdFx0XHRcdFx0X3RoaXMubGFiZWxLZXkgPSBfcmVmLnByb3BzLmxhYmVsS2V5O1xuXHRcdFx0XHRcdF90aGlzLnZhbHVlS2V5ID0gX3JlZi5wcm9wcy52YWx1ZUtleTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIGNoaWxkcmVuKHByb3BzKTtcblx0fVxufSk7XG5cbmZ1bmN0aW9uIGRlZmF1bHRDaGlsZHJlbihwcm9wcykge1xuXHRyZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoX1NlbGVjdDJbJ2RlZmF1bHQnXSwgcHJvcHMpO1xufTtcblxuZnVuY3Rpb24gaXNPcHRpb25VbmlxdWUoX3JlZjMpIHtcblx0dmFyIG9wdGlvbiA9IF9yZWYzLm9wdGlvbjtcblx0dmFyIG9wdGlvbnMgPSBfcmVmMy5vcHRpb25zO1xuXHR2YXIgbGFiZWxLZXkgPSBfcmVmMy5sYWJlbEtleTtcblx0dmFyIHZhbHVlS2V5ID0gX3JlZjMudmFsdWVLZXk7XG5cblx0cmV0dXJuIG9wdGlvbnMuZmlsdGVyKGZ1bmN0aW9uIChleGlzdGluZ09wdGlvbikge1xuXHRcdHJldHVybiBleGlzdGluZ09wdGlvbltsYWJlbEtleV0gPT09IG9wdGlvbltsYWJlbEtleV0gfHwgZXhpc3RpbmdPcHRpb25bdmFsdWVLZXldID09PSBvcHRpb25bdmFsdWVLZXldO1xuXHR9KS5sZW5ndGggPT09IDA7XG59O1xuXG5mdW5jdGlvbiBpc1ZhbGlkTmV3T3B0aW9uKF9yZWY0KSB7XG5cdHZhciBsYWJlbCA9IF9yZWY0LmxhYmVsO1xuXG5cdHJldHVybiAhIWxhYmVsO1xufTtcblxuZnVuY3Rpb24gbmV3T3B0aW9uQ3JlYXRvcihfcmVmNSkge1xuXHR2YXIgbGFiZWwgPSBfcmVmNS5sYWJlbDtcblx0dmFyIGxhYmVsS2V5ID0gX3JlZjUubGFiZWxLZXk7XG5cdHZhciB2YWx1ZUtleSA9IF9yZWY1LnZhbHVlS2V5O1xuXG5cdHZhciBvcHRpb24gPSB7fTtcblx0b3B0aW9uW3ZhbHVlS2V5XSA9IGxhYmVsO1xuXHRvcHRpb25bbGFiZWxLZXldID0gbGFiZWw7XG5cdG9wdGlvbi5jbGFzc05hbWUgPSAnU2VsZWN0LWNyZWF0ZS1vcHRpb24tcGxhY2Vob2xkZXInO1xuXHRyZXR1cm4gb3B0aW9uO1xufTtcblxuZnVuY3Rpb24gcHJvbXB0VGV4dENyZWF0b3IobGFiZWwpIHtcblx0cmV0dXJuICdDcmVhdGUgb3B0aW9uIFwiJyArIGxhYmVsICsgJ1wiJztcbn1cblxuZnVuY3Rpb24gc2hvdWxkS2V5RG93bkV2ZW50Q3JlYXRlTmV3T3B0aW9uKF9yZWY2KSB7XG5cdHZhciBrZXlDb2RlID0gX3JlZjYua2V5Q29kZTtcblxuXHRzd2l0Y2ggKGtleUNvZGUpIHtcblx0XHRjYXNlIDk6IC8vIFRBQlxuXHRcdGNhc2UgMTM6IC8vIEVOVEVSXG5cdFx0Y2FzZSAxODg6XG5cdFx0XHQvLyBDT01NQVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRyZXR1cm4gZmFsc2U7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENyZWF0YWJsZTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LXNlbGVjdC9saWIvQ3JlYXRhYmxlLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9jcmVhdGVSZWFjdENsYXNzID0gcmVxdWlyZSgnY3JlYXRlLXJlYWN0LWNsYXNzJyk7XG5cbnZhciBfY3JlYXRlUmVhY3RDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVSZWFjdENsYXNzKTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IHJlcXVpcmUoJ2NsYXNzbmFtZXMnKTtcblxudmFyIF9jbGFzc25hbWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzbmFtZXMpO1xuXG52YXIgT3B0aW9uID0gKDAsIF9jcmVhdGVSZWFjdENsYXNzMlsnZGVmYXVsdCddKSh7XG5cdHByb3BUeXBlczoge1xuXHRcdGNoaWxkcmVuOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm5vZGUsXG5cdFx0Y2xhc3NOYW1lOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnN0cmluZywgLy8gY2xhc3NOYW1lIChiYXNlZCBvbiBtb3VzZSBwb3NpdGlvbilcblx0XHRpbnN0YW5jZVByZWZpeDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcuaXNSZXF1aXJlZCwgLy8gdW5pcXVlIHByZWZpeCBmb3IgdGhlIGlkcyAodXNlZCBmb3IgYXJpYSlcblx0XHRpc0Rpc2FibGVkOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsIC8vIHRoZSBvcHRpb24gaXMgZGlzYWJsZWRcblx0XHRpc0ZvY3VzZWQ6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCwgLy8gdGhlIG9wdGlvbiBpcyBmb2N1c2VkXG5cdFx0aXNTZWxlY3RlZDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLCAvLyB0aGUgb3B0aW9uIGlzIHNlbGVjdGVkXG5cdFx0b25Gb2N1czogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLCAvLyBtZXRob2QgdG8gaGFuZGxlIG1vdXNlRW50ZXIgb24gb3B0aW9uIGVsZW1lbnRcblx0XHRvblNlbGVjdDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLCAvLyBtZXRob2QgdG8gaGFuZGxlIGNsaWNrIG9uIG9wdGlvbiBlbGVtZW50XG5cdFx0b25VbmZvY3VzOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsIC8vIG1ldGhvZCB0byBoYW5kbGUgbW91c2VMZWF2ZSBvbiBvcHRpb24gZWxlbWVudFxuXHRcdG9wdGlvbjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5vYmplY3QuaXNSZXF1aXJlZCwgLy8gb2JqZWN0IHRoYXQgaXMgYmFzZSBmb3IgdGhhdCBvcHRpb25cblx0XHRvcHRpb25JbmRleDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5udW1iZXIgfSxcblx0Ly8gaW5kZXggb2YgdGhlIG9wdGlvbiwgdXNlZCB0byBnZW5lcmF0ZSB1bmlxdWUgaWRzIGZvciBhcmlhXG5cdGJsb2NrRXZlbnQ6IGZ1bmN0aW9uIGJsb2NrRXZlbnQoZXZlbnQpIHtcblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdGlmIChldmVudC50YXJnZXQudGFnTmFtZSAhPT0gJ0EnIHx8ICEoJ2hyZWYnIGluIGV2ZW50LnRhcmdldCkpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0aWYgKGV2ZW50LnRhcmdldC50YXJnZXQpIHtcblx0XHRcdHdpbmRvdy5vcGVuKGV2ZW50LnRhcmdldC5ocmVmLCBldmVudC50YXJnZXQudGFyZ2V0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2luZG93LmxvY2F0aW9uLmhyZWYgPSBldmVudC50YXJnZXQuaHJlZjtcblx0XHR9XG5cdH0sXG5cblx0aGFuZGxlTW91c2VEb3duOiBmdW5jdGlvbiBoYW5kbGVNb3VzZURvd24oZXZlbnQpIHtcblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdHRoaXMucHJvcHMub25TZWxlY3QodGhpcy5wcm9wcy5vcHRpb24sIGV2ZW50KTtcblx0fSxcblxuXHRoYW5kbGVNb3VzZUVudGVyOiBmdW5jdGlvbiBoYW5kbGVNb3VzZUVudGVyKGV2ZW50KSB7XG5cdFx0dGhpcy5vbkZvY3VzKGV2ZW50KTtcblx0fSxcblxuXHRoYW5kbGVNb3VzZU1vdmU6IGZ1bmN0aW9uIGhhbmRsZU1vdXNlTW92ZShldmVudCkge1xuXHRcdHRoaXMub25Gb2N1cyhldmVudCk7XG5cdH0sXG5cblx0aGFuZGxlVG91Y2hFbmQ6IGZ1bmN0aW9uIGhhbmRsZVRvdWNoRW5kKGV2ZW50KSB7XG5cdFx0Ly8gQ2hlY2sgaWYgdGhlIHZpZXcgaXMgYmVpbmcgZHJhZ2dlZCwgSW4gdGhpcyBjYXNlXG5cdFx0Ly8gd2UgZG9uJ3Qgd2FudCB0byBmaXJlIHRoZSBjbGljayBldmVudCAoYmVjYXVzZSB0aGUgdXNlciBvbmx5IHdhbnRzIHRvIHNjcm9sbClcblx0XHRpZiAodGhpcy5kcmFnZ2luZykgcmV0dXJuO1xuXG5cdFx0dGhpcy5oYW5kbGVNb3VzZURvd24oZXZlbnQpO1xuXHR9LFxuXG5cdGhhbmRsZVRvdWNoTW92ZTogZnVuY3Rpb24gaGFuZGxlVG91Y2hNb3ZlKGV2ZW50KSB7XG5cdFx0Ly8gU2V0IGEgZmxhZyB0aGF0IHRoZSB2aWV3IGlzIGJlaW5nIGRyYWdnZWRcblx0XHR0aGlzLmRyYWdnaW5nID0gdHJ1ZTtcblx0fSxcblxuXHRoYW5kbGVUb3VjaFN0YXJ0OiBmdW5jdGlvbiBoYW5kbGVUb3VjaFN0YXJ0KGV2ZW50KSB7XG5cdFx0Ly8gU2V0IGEgZmxhZyB0aGF0IHRoZSB2aWV3IGlzIG5vdCBiZWluZyBkcmFnZ2VkXG5cdFx0dGhpcy5kcmFnZ2luZyA9IGZhbHNlO1xuXHR9LFxuXG5cdG9uRm9jdXM6IGZ1bmN0aW9uIG9uRm9jdXMoZXZlbnQpIHtcblx0XHRpZiAoIXRoaXMucHJvcHMuaXNGb2N1c2VkKSB7XG5cdFx0XHR0aGlzLnByb3BzLm9uRm9jdXModGhpcy5wcm9wcy5vcHRpb24sIGV2ZW50KTtcblx0XHR9XG5cdH0sXG5cdHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuXHRcdHZhciBfcHJvcHMgPSB0aGlzLnByb3BzO1xuXHRcdHZhciBvcHRpb24gPSBfcHJvcHMub3B0aW9uO1xuXHRcdHZhciBpbnN0YW5jZVByZWZpeCA9IF9wcm9wcy5pbnN0YW5jZVByZWZpeDtcblx0XHR2YXIgb3B0aW9uSW5kZXggPSBfcHJvcHMub3B0aW9uSW5kZXg7XG5cblx0XHR2YXIgY2xhc3NOYW1lID0gKDAsIF9jbGFzc25hbWVzMlsnZGVmYXVsdCddKSh0aGlzLnByb3BzLmNsYXNzTmFtZSwgb3B0aW9uLmNsYXNzTmFtZSk7XG5cblx0XHRyZXR1cm4gb3B0aW9uLmRpc2FibGVkID8gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdFx0XHQnZGl2Jyxcblx0XHRcdHsgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG5cdFx0XHRcdG9uTW91c2VEb3duOiB0aGlzLmJsb2NrRXZlbnQsXG5cdFx0XHRcdG9uQ2xpY2s6IHRoaXMuYmxvY2tFdmVudCB9LFxuXHRcdFx0dGhpcy5wcm9wcy5jaGlsZHJlblxuXHRcdCkgOiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0XHRcdCdkaXYnLFxuXHRcdFx0eyBjbGFzc05hbWU6IGNsYXNzTmFtZSxcblx0XHRcdFx0c3R5bGU6IG9wdGlvbi5zdHlsZSxcblx0XHRcdFx0cm9sZTogJ29wdGlvbicsXG5cdFx0XHRcdG9uTW91c2VEb3duOiB0aGlzLmhhbmRsZU1vdXNlRG93bixcblx0XHRcdFx0b25Nb3VzZUVudGVyOiB0aGlzLmhhbmRsZU1vdXNlRW50ZXIsXG5cdFx0XHRcdG9uTW91c2VNb3ZlOiB0aGlzLmhhbmRsZU1vdXNlTW92ZSxcblx0XHRcdFx0b25Ub3VjaFN0YXJ0OiB0aGlzLmhhbmRsZVRvdWNoU3RhcnQsXG5cdFx0XHRcdG9uVG91Y2hNb3ZlOiB0aGlzLmhhbmRsZVRvdWNoTW92ZSxcblx0XHRcdFx0b25Ub3VjaEVuZDogdGhpcy5oYW5kbGVUb3VjaEVuZCxcblx0XHRcdFx0aWQ6IGluc3RhbmNlUHJlZml4ICsgJy1vcHRpb24tJyArIG9wdGlvbkluZGV4LFxuXHRcdFx0XHR0aXRsZTogb3B0aW9uLnRpdGxlIH0sXG5cdFx0XHR0aGlzLnByb3BzLmNoaWxkcmVuXG5cdFx0KTtcblx0fVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gT3B0aW9uO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3Qtc2VsZWN0L2xpYi9PcHRpb24uanMiLCIvKiFcbiAgQ29weXJpZ2h0IChjKSAyMDE2IEplZCBXYXRzb24uXG4gIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgc2VlXG4gIGh0dHA6Ly9qZWR3YXRzb24uZ2l0aHViLmlvL3JlYWN0LXNlbGVjdFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG5cdHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9jcmVhdGVSZWFjdENsYXNzID0gcmVxdWlyZSgnY3JlYXRlLXJlYWN0LWNsYXNzJyk7XG5cbnZhciBfY3JlYXRlUmVhY3RDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVSZWFjdENsYXNzKTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfcmVhY3REb20gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcblxudmFyIF9yZWFjdERvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdERvbSk7XG5cbnZhciBfcmVhY3RJbnB1dEF1dG9zaXplID0gcmVxdWlyZSgncmVhY3QtaW5wdXQtYXV0b3NpemUnKTtcblxudmFyIF9yZWFjdElucHV0QXV0b3NpemUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3RJbnB1dEF1dG9zaXplKTtcblxudmFyIF9jbGFzc25hbWVzID0gcmVxdWlyZSgnY2xhc3NuYW1lcycpO1xuXG52YXIgX2NsYXNzbmFtZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NuYW1lcyk7XG5cbnZhciBfdXRpbHNEZWZhdWx0QXJyb3dSZW5kZXJlciA9IHJlcXVpcmUoJy4vdXRpbHMvZGVmYXVsdEFycm93UmVuZGVyZXInKTtcblxudmFyIF91dGlsc0RlZmF1bHRBcnJvd1JlbmRlcmVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3V0aWxzRGVmYXVsdEFycm93UmVuZGVyZXIpO1xuXG52YXIgX3V0aWxzRGVmYXVsdEZpbHRlck9wdGlvbnMgPSByZXF1aXJlKCcuL3V0aWxzL2RlZmF1bHRGaWx0ZXJPcHRpb25zJyk7XG5cbnZhciBfdXRpbHNEZWZhdWx0RmlsdGVyT3B0aW9uczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91dGlsc0RlZmF1bHRGaWx0ZXJPcHRpb25zKTtcblxudmFyIF91dGlsc0RlZmF1bHRNZW51UmVuZGVyZXIgPSByZXF1aXJlKCcuL3V0aWxzL2RlZmF1bHRNZW51UmVuZGVyZXInKTtcblxudmFyIF91dGlsc0RlZmF1bHRNZW51UmVuZGVyZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdXRpbHNEZWZhdWx0TWVudVJlbmRlcmVyKTtcblxudmFyIF91dGlsc0RlZmF1bHRDbGVhclJlbmRlcmVyID0gcmVxdWlyZSgnLi91dGlscy9kZWZhdWx0Q2xlYXJSZW5kZXJlcicpO1xuXG52YXIgX3V0aWxzRGVmYXVsdENsZWFyUmVuZGVyZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdXRpbHNEZWZhdWx0Q2xlYXJSZW5kZXJlcik7XG5cbnZhciBfQXN5bmMgPSByZXF1aXJlKCcuL0FzeW5jJyk7XG5cbnZhciBfQXN5bmMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQXN5bmMpO1xuXG52YXIgX0FzeW5jQ3JlYXRhYmxlID0gcmVxdWlyZSgnLi9Bc3luY0NyZWF0YWJsZScpO1xuXG52YXIgX0FzeW5jQ3JlYXRhYmxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0FzeW5jQ3JlYXRhYmxlKTtcblxudmFyIF9DcmVhdGFibGUgPSByZXF1aXJlKCcuL0NyZWF0YWJsZScpO1xuXG52YXIgX0NyZWF0YWJsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9DcmVhdGFibGUpO1xuXG52YXIgX09wdGlvbiA9IHJlcXVpcmUoJy4vT3B0aW9uJyk7XG5cbnZhciBfT3B0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX09wdGlvbik7XG5cbnZhciBfVmFsdWUgPSByZXF1aXJlKCcuL1ZhbHVlJyk7XG5cbnZhciBfVmFsdWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVmFsdWUpO1xuXG5mdW5jdGlvbiBzdHJpbmdpZnlWYWx1ZSh2YWx1ZSkge1xuXHR2YXIgdmFsdWVUeXBlID0gdHlwZW9mIHZhbHVlO1xuXHRpZiAodmFsdWVUeXBlID09PSAnc3RyaW5nJykge1xuXHRcdHJldHVybiB2YWx1ZTtcblx0fSBlbHNlIGlmICh2YWx1ZVR5cGUgPT09ICdvYmplY3QnKSB7XG5cdFx0cmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcblx0fSBlbHNlIGlmICh2YWx1ZVR5cGUgPT09ICdudW1iZXInIHx8IHZhbHVlVHlwZSA9PT0gJ2Jvb2xlYW4nKSB7XG5cdFx0cmV0dXJuIFN0cmluZyh2YWx1ZSk7XG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuICcnO1xuXHR9XG59XG5cbnZhciBzdHJpbmdPck5vZGUgPSBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm9uZU9mVHlwZShbX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcsIF9wcm9wVHlwZXMyWydkZWZhdWx0J10ubm9kZV0pO1xuXG52YXIgaW5zdGFuY2VJZCA9IDE7XG5cbnZhciBTZWxlY3QgPSAoMCwgX2NyZWF0ZVJlYWN0Q2xhc3MyWydkZWZhdWx0J10pKHtcblxuXHRkaXNwbGF5TmFtZTogJ1NlbGVjdCcsXG5cblx0cHJvcFR5cGVzOiB7XG5cdFx0YWRkTGFiZWxUZXh0OiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnN0cmluZywgLy8gcGxhY2Vob2xkZXIgZGlzcGxheWVkIHdoZW4geW91IHdhbnQgdG8gYWRkIGEgbGFiZWwgb24gYSBtdWx0aS12YWx1ZSBpbnB1dFxuXHRcdCdhcmlhLWRlc2NyaWJlZGJ5JzogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcsIC8vIEhUTUwgSUQocykgb2YgZWxlbWVudChzKSB0aGF0IHNob3VsZCBiZSB1c2VkIHRvIGRlc2NyaWJlIHRoaXMgaW5wdXQgKGZvciBhc3Npc3RpdmUgdGVjaClcblx0XHQnYXJpYS1sYWJlbCc6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uc3RyaW5nLCAvLyBBcmlhIGxhYmVsIChmb3IgYXNzaXN0aXZlIHRlY2gpXG5cdFx0J2FyaWEtbGFiZWxsZWRieSc6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uc3RyaW5nLCAvLyBIVE1MIElEIG9mIGFuIGVsZW1lbnQgdGhhdCBzaG91bGQgYmUgdXNlZCBhcyB0aGUgbGFiZWwgKGZvciBhc3Npc3RpdmUgdGVjaClcblx0XHRhcnJvd1JlbmRlcmVyOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsIC8vIENyZWF0ZSBkcm9wLWRvd24gY2FyZXQgZWxlbWVudFxuXHRcdGF1dG9CbHVyOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsIC8vIGF1dG9tYXRpY2FsbHkgYmx1ciB0aGUgY29tcG9uZW50IHdoZW4gYW4gb3B0aW9uIGlzIHNlbGVjdGVkXG5cdFx0YXV0b2ZvY3VzOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsIC8vIGF1dG9mb2N1cyB0aGUgY29tcG9uZW50IG9uIG1vdW50XG5cdFx0YXV0b3NpemU6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCwgLy8gd2hldGhlciB0byBlbmFibGUgYXV0b3NpemluZyBvciBub3Rcblx0XHRiYWNrc3BhY2VSZW1vdmVzOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsIC8vIHdoZXRoZXIgYmFja3NwYWNlIHJlbW92ZXMgYW4gaXRlbSBpZiB0aGVyZSBpcyBubyB0ZXh0IGlucHV0XG5cdFx0YmFja3NwYWNlVG9SZW1vdmVNZXNzYWdlOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnN0cmluZywgLy8gTWVzc2FnZSB0byB1c2UgZm9yIHNjcmVlbnJlYWRlcnMgdG8gcHJlc3MgYmFja3NwYWNlIHRvIHJlbW92ZSB0aGUgY3VycmVudCBpdGVtIC0ge2xhYmVsfSBpcyByZXBsYWNlZCB3aXRoIHRoZSBpdGVtIGxhYmVsXG5cdFx0Y2xhc3NOYW1lOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnN0cmluZywgLy8gY2xhc3NOYW1lIGZvciB0aGUgb3V0ZXIgZWxlbWVudFxuXHRcdGNsZWFyQWxsVGV4dDogc3RyaW5nT3JOb2RlLCAvLyB0aXRsZSBmb3IgdGhlIFwiY2xlYXJcIiBjb250cm9sIHdoZW4gbXVsdGk6IHRydWVcblx0XHRjbGVhclJlbmRlcmVyOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsIC8vIGNyZWF0ZSBjbGVhcmFibGUgeCBlbGVtZW50XG5cdFx0Y2xlYXJWYWx1ZVRleHQ6IHN0cmluZ09yTm9kZSwgLy8gdGl0bGUgZm9yIHRoZSBcImNsZWFyXCIgY29udHJvbFxuXHRcdGNsZWFyYWJsZTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLCAvLyBzaG91bGQgaXQgYmUgcG9zc2libGUgdG8gcmVzZXQgdmFsdWVcblx0XHRkZWxldGVSZW1vdmVzOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsIC8vIHdoZXRoZXIgYmFja3NwYWNlIHJlbW92ZXMgYW4gaXRlbSBpZiB0aGVyZSBpcyBubyB0ZXh0IGlucHV0XG5cdFx0ZGVsaW1pdGVyOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnN0cmluZywgLy8gZGVsaW1pdGVyIHRvIHVzZSB0byBqb2luIG11bHRpcGxlIHZhbHVlcyBmb3IgdGhlIGhpZGRlbiBmaWVsZCB2YWx1ZVxuXHRcdGRpc2FibGVkOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsIC8vIHdoZXRoZXIgdGhlIFNlbGVjdCBpcyBkaXNhYmxlZCBvciBub3Rcblx0XHRlc2NhcGVDbGVhcnNWYWx1ZTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLCAvLyB3aGV0aGVyIGVzY2FwZSBjbGVhcnMgdGhlIHZhbHVlIHdoZW4gdGhlIG1lbnUgaXMgY2xvc2VkXG5cdFx0ZmlsdGVyT3B0aW9uOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsIC8vIG1ldGhvZCB0byBmaWx0ZXIgYSBzaW5nbGUgb3B0aW9uIChvcHRpb24sIGZpbHRlclN0cmluZylcblx0XHRmaWx0ZXJPcHRpb25zOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmFueSwgLy8gYm9vbGVhbiB0byBlbmFibGUgZGVmYXVsdCBmaWx0ZXJpbmcgb3IgZnVuY3Rpb24gdG8gZmlsdGVyIHRoZSBvcHRpb25zIGFycmF5IChbb3B0aW9uc10sIGZpbHRlclN0cmluZywgW3ZhbHVlc10pXG5cdFx0aWdub3JlQWNjZW50czogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLCAvLyB3aGV0aGVyIHRvIHN0cmlwIGRpYWNyaXRpY3Mgd2hlbiBmaWx0ZXJpbmdcblx0XHRpZ25vcmVDYXNlOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsIC8vIHdoZXRoZXIgdG8gcGVyZm9ybSBjYXNlLWluc2Vuc2l0aXZlIGZpbHRlcmluZ1xuXHRcdGlucHV0UHJvcHM6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10ub2JqZWN0LCAvLyBjdXN0b20gYXR0cmlidXRlcyBmb3IgdGhlIElucHV0XG5cdFx0aW5wdXRSZW5kZXJlcjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLCAvLyByZXR1cm5zIGEgY3VzdG9tIGlucHV0IGNvbXBvbmVudFxuXHRcdGluc3RhbmNlSWQ6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uc3RyaW5nLCAvLyBzZXQgdGhlIGNvbXBvbmVudHMgaW5zdGFuY2VJZFxuXHRcdGlzTG9hZGluZzogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLCAvLyB3aGV0aGVyIHRoZSBTZWxlY3QgaXMgbG9hZGluZyBleHRlcm5hbGx5IG9yIG5vdCAoc3VjaCBhcyBvcHRpb25zIGJlaW5nIGxvYWRlZClcblx0XHRqb2luVmFsdWVzOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsIC8vIGpvaW5zIG11bHRpcGxlIHZhbHVlcyBpbnRvIGEgc2luZ2xlIGZvcm0gZmllbGQgd2l0aCB0aGUgZGVsaW1pdGVyIChsZWdhY3kgbW9kZSlcblx0XHRsYWJlbEtleTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcsIC8vIHBhdGggb2YgdGhlIGxhYmVsIHZhbHVlIGluIG9wdGlvbiBvYmplY3RzXG5cdFx0bWF0Y2hQb3M6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uc3RyaW5nLCAvLyAoYW55fHN0YXJ0KSBtYXRjaCB0aGUgc3RhcnQgb3IgZW50aXJlIHN0cmluZyB3aGVuIGZpbHRlcmluZ1xuXHRcdG1hdGNoUHJvcDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcsIC8vIChhbnl8bGFiZWx8dmFsdWUpIHdoaWNoIG9wdGlvbiBwcm9wZXJ0eSB0byBmaWx0ZXIgb25cblx0XHRtZW51QnVmZmVyOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm51bWJlciwgLy8gb3B0aW9uYWwgYnVmZmVyIChpbiBweCkgYmV0d2VlbiB0aGUgYm90dG9tIG9mIHRoZSB2aWV3cG9ydCBhbmQgdGhlIGJvdHRvbSBvZiB0aGUgbWVudVxuXHRcdG1lbnVDb250YWluZXJTdHlsZTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5vYmplY3QsIC8vIG9wdGlvbmFsIHN0eWxlIHRvIGFwcGx5IHRvIHRoZSBtZW51IGNvbnRhaW5lclxuXHRcdG1lbnVSZW5kZXJlcjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLCAvLyByZW5kZXJzIGEgY3VzdG9tIG1lbnUgd2l0aCBvcHRpb25zXG5cdFx0bWVudVN0eWxlOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm9iamVjdCwgLy8gb3B0aW9uYWwgc3R5bGUgdG8gYXBwbHkgdG8gdGhlIG1lbnVcblx0XHRtdWx0aTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLCAvLyBtdWx0aS12YWx1ZSBpbnB1dFxuXHRcdG5hbWU6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uc3RyaW5nLCAvLyBnZW5lcmF0ZXMgYSBoaWRkZW4gPGlucHV0IC8+IHRhZyB3aXRoIHRoaXMgZmllbGQgbmFtZSBmb3IgaHRtbCBmb3Jtc1xuXHRcdG5vUmVzdWx0c1RleHQ6IHN0cmluZ09yTm9kZSwgLy8gcGxhY2Vob2xkZXIgZGlzcGxheWVkIHdoZW4gdGhlcmUgYXJlIG5vIG1hdGNoaW5nIHNlYXJjaCByZXN1bHRzXG5cdFx0b25CbHVyOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsIC8vIG9uQmx1ciBoYW5kbGVyOiBmdW5jdGlvbiAoZXZlbnQpIHt9XG5cdFx0b25CbHVyUmVzZXRzSW5wdXQ6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCwgLy8gd2hldGhlciBpbnB1dCBpcyBjbGVhcmVkIG9uIGJsdXJcblx0XHRvbkNoYW5nZTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLCAvLyBvbkNoYW5nZSBoYW5kbGVyOiBmdW5jdGlvbiAobmV3VmFsdWUpIHt9XG5cdFx0b25DbG9zZTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLCAvLyBmaXJlcyB3aGVuIHRoZSBtZW51IGlzIGNsb3NlZFxuXHRcdG9uQ2xvc2VSZXNldHNJbnB1dDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLCAvLyB3aGV0aGVyIGlucHV0IGlzIGNsZWFyZWQgd2hlbiBtZW51IGlzIGNsb3NlZCB0aHJvdWdoIHRoZSBhcnJvd1xuXHRcdG9uRm9jdXM6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYywgLy8gb25Gb2N1cyBoYW5kbGVyOiBmdW5jdGlvbiAoZXZlbnQpIHt9XG5cdFx0b25JbnB1dENoYW5nZTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLCAvLyBvbklucHV0Q2hhbmdlIGhhbmRsZXI6IGZ1bmN0aW9uIChpbnB1dFZhbHVlKSB7fVxuXHRcdG9uSW5wdXRLZXlEb3duOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsIC8vIGlucHV0IGtleURvd24gaGFuZGxlcjogZnVuY3Rpb24gKGV2ZW50KSB7fVxuXHRcdG9uTWVudVNjcm9sbFRvQm90dG9tOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsIC8vIGZpcmVzIHdoZW4gdGhlIG1lbnUgaXMgc2Nyb2xsZWQgdG8gdGhlIGJvdHRvbTsgY2FuIGJlIHVzZWQgdG8gcGFnaW5hdGUgb3B0aW9uc1xuXHRcdG9uT3BlbjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLCAvLyBmaXJlcyB3aGVuIHRoZSBtZW51IGlzIG9wZW5lZFxuXHRcdG9uVmFsdWVDbGljazogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLCAvLyBvbkNsaWNrIGhhbmRsZXIgZm9yIHZhbHVlIGxhYmVsczogZnVuY3Rpb24gKHZhbHVlLCBldmVudCkge31cblx0XHRvcGVuQWZ0ZXJGb2N1czogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLCAvLyBib29sZWFuIHRvIGVuYWJsZSBvcGVuaW5nIGRyb3Bkb3duIHdoZW4gZm9jdXNlZFxuXHRcdG9wZW5PbkZvY3VzOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsIC8vIGFsd2F5cyBvcGVuIG9wdGlvbnMgbWVudSBvbiBmb2N1c1xuXHRcdG9wdGlvbkNsYXNzTmFtZTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcsIC8vIGFkZGl0aW9uYWwgY2xhc3MoZXMpIHRvIGFwcGx5IHRvIHRoZSA8T3B0aW9uIC8+IGVsZW1lbnRzXG5cdFx0b3B0aW9uQ29tcG9uZW50OiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsIC8vIG9wdGlvbiBjb21wb25lbnQgdG8gcmVuZGVyIGluIGRyb3Bkb3duXG5cdFx0b3B0aW9uUmVuZGVyZXI6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYywgLy8gb3B0aW9uUmVuZGVyZXI6IGZ1bmN0aW9uIChvcHRpb24pIHt9XG5cdFx0b3B0aW9uczogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5hcnJheSwgLy8gYXJyYXkgb2Ygb3B0aW9uc1xuXHRcdHBhZ2VTaXplOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm51bWJlciwgLy8gbnVtYmVyIG9mIGVudHJpZXMgdG8gcGFnZSB3aGVuIHVzaW5nIHBhZ2UgdXAvZG93biBrZXlzXG5cdFx0cGxhY2Vob2xkZXI6IHN0cmluZ09yTm9kZSwgLy8gZmllbGQgcGxhY2Vob2xkZXIsIGRpc3BsYXllZCB3aGVuIHRoZXJlJ3Mgbm8gdmFsdWVcblx0XHRyZXF1aXJlZDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLCAvLyBhcHBsaWVzIEhUTUw1IHJlcXVpcmVkIGF0dHJpYnV0ZSB3aGVuIG5lZWRlZFxuXHRcdHJlc2V0VmFsdWU6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYW55LCAvLyB2YWx1ZSB0byB1c2Ugd2hlbiB5b3UgY2xlYXIgdGhlIGNvbnRyb2xcblx0XHRzY3JvbGxNZW51SW50b1ZpZXc6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCwgLy8gYm9vbGVhbiB0byBlbmFibGUgdGhlIHZpZXdwb3J0IHRvIHNoaWZ0IHNvIHRoYXQgdGhlIGZ1bGwgbWVudSBmdWxseSB2aXNpYmxlIHdoZW4gZW5nYWdlZFxuXHRcdHNlYXJjaGFibGU6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCwgLy8gd2hldGhlciB0byBlbmFibGUgc2VhcmNoaW5nIGZlYXR1cmUgb3Igbm90XG5cdFx0c2ltcGxlVmFsdWU6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCwgLy8gcGFzcyB0aGUgdmFsdWUgdG8gb25DaGFuZ2UgYXMgYSBzaW1wbGUgdmFsdWUgKGxlZ2FjeSBwcmUgMS4wIG1vZGUpLCBkZWZhdWx0cyB0byBmYWxzZVxuXHRcdHN0eWxlOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm9iamVjdCwgLy8gb3B0aW9uYWwgc3R5bGUgdG8gYXBwbHkgdG8gdGhlIGNvbnRyb2xcblx0XHR0YWJJbmRleDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcsIC8vIG9wdGlvbmFsIHRhYiBpbmRleCBvZiB0aGUgY29udHJvbFxuXHRcdHRhYlNlbGVjdHNWYWx1ZTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLCAvLyB3aGV0aGVyIHRvIHRyZWF0IHRhYmJpbmcgb3V0IHdoaWxlIGZvY3VzZWQgdG8gYmUgdmFsdWUgc2VsZWN0aW9uXG5cdFx0dmFsdWU6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYW55LCAvLyBpbml0aWFsIGZpZWxkIHZhbHVlXG5cdFx0dmFsdWVDb21wb25lbnQ6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYywgLy8gdmFsdWUgY29tcG9uZW50IHRvIHJlbmRlclxuXHRcdHZhbHVlS2V5OiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnN0cmluZywgLy8gcGF0aCBvZiB0aGUgbGFiZWwgdmFsdWUgaW4gb3B0aW9uIG9iamVjdHNcblx0XHR2YWx1ZVJlbmRlcmVyOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsIC8vIHZhbHVlUmVuZGVyZXI6IGZ1bmN0aW9uIChvcHRpb24pIHt9XG5cdFx0d3JhcHBlclN0eWxlOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm9iamVjdCB9LFxuXG5cdC8vIG9wdGlvbmFsIHN0eWxlIHRvIGFwcGx5IHRvIHRoZSBjb21wb25lbnQgd3JhcHBlclxuXHRzdGF0aWNzOiB7IEFzeW5jOiBfQXN5bmMyWydkZWZhdWx0J10sIEFzeW5jQ3JlYXRhYmxlOiBfQXN5bmNDcmVhdGFibGUyWydkZWZhdWx0J10sIENyZWF0YWJsZTogX0NyZWF0YWJsZTJbJ2RlZmF1bHQnXSB9LFxuXG5cdGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRhZGRMYWJlbFRleHQ6ICdBZGQgXCJ7bGFiZWx9XCI/Jyxcblx0XHRcdGFycm93UmVuZGVyZXI6IF91dGlsc0RlZmF1bHRBcnJvd1JlbmRlcmVyMlsnZGVmYXVsdCddLFxuXHRcdFx0YXV0b3NpemU6IHRydWUsXG5cdFx0XHRiYWNrc3BhY2VSZW1vdmVzOiB0cnVlLFxuXHRcdFx0YmFja3NwYWNlVG9SZW1vdmVNZXNzYWdlOiAnUHJlc3MgYmFja3NwYWNlIHRvIHJlbW92ZSB7bGFiZWx9Jyxcblx0XHRcdGNsZWFyYWJsZTogdHJ1ZSxcblx0XHRcdGNsZWFyQWxsVGV4dDogJ0NsZWFyIGFsbCcsXG5cdFx0XHRjbGVhclJlbmRlcmVyOiBfdXRpbHNEZWZhdWx0Q2xlYXJSZW5kZXJlcjJbJ2RlZmF1bHQnXSxcblx0XHRcdGNsZWFyVmFsdWVUZXh0OiAnQ2xlYXIgdmFsdWUnLFxuXHRcdFx0ZGVsZXRlUmVtb3ZlczogdHJ1ZSxcblx0XHRcdGRlbGltaXRlcjogJywnLFxuXHRcdFx0ZGlzYWJsZWQ6IGZhbHNlLFxuXHRcdFx0ZXNjYXBlQ2xlYXJzVmFsdWU6IHRydWUsXG5cdFx0XHRmaWx0ZXJPcHRpb25zOiBfdXRpbHNEZWZhdWx0RmlsdGVyT3B0aW9uczJbJ2RlZmF1bHQnXSxcblx0XHRcdGlnbm9yZUFjY2VudHM6IHRydWUsXG5cdFx0XHRpZ25vcmVDYXNlOiB0cnVlLFxuXHRcdFx0aW5wdXRQcm9wczoge30sXG5cdFx0XHRpc0xvYWRpbmc6IGZhbHNlLFxuXHRcdFx0am9pblZhbHVlczogZmFsc2UsXG5cdFx0XHRsYWJlbEtleTogJ2xhYmVsJyxcblx0XHRcdG1hdGNoUG9zOiAnYW55Jyxcblx0XHRcdG1hdGNoUHJvcDogJ2FueScsXG5cdFx0XHRtZW51QnVmZmVyOiAwLFxuXHRcdFx0bWVudVJlbmRlcmVyOiBfdXRpbHNEZWZhdWx0TWVudVJlbmRlcmVyMlsnZGVmYXVsdCddLFxuXHRcdFx0bXVsdGk6IGZhbHNlLFxuXHRcdFx0bm9SZXN1bHRzVGV4dDogJ05vIHJlc3VsdHMgZm91bmQnLFxuXHRcdFx0b25CbHVyUmVzZXRzSW5wdXQ6IHRydWUsXG5cdFx0XHRvbkNsb3NlUmVzZXRzSW5wdXQ6IHRydWUsXG5cdFx0XHRvcHRpb25Db21wb25lbnQ6IF9PcHRpb24yWydkZWZhdWx0J10sXG5cdFx0XHRwYWdlU2l6ZTogNSxcblx0XHRcdHBsYWNlaG9sZGVyOiAnU2VsZWN0Li4uJyxcblx0XHRcdHJlcXVpcmVkOiBmYWxzZSxcblx0XHRcdHNjcm9sbE1lbnVJbnRvVmlldzogdHJ1ZSxcblx0XHRcdHNlYXJjaGFibGU6IHRydWUsXG5cdFx0XHRzaW1wbGVWYWx1ZTogZmFsc2UsXG5cdFx0XHR0YWJTZWxlY3RzVmFsdWU6IHRydWUsXG5cdFx0XHR2YWx1ZUNvbXBvbmVudDogX1ZhbHVlMlsnZGVmYXVsdCddLFxuXHRcdFx0dmFsdWVLZXk6ICd2YWx1ZSdcblx0XHR9O1xuXHR9LFxuXG5cdGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRpbnB1dFZhbHVlOiAnJyxcblx0XHRcdGlzRm9jdXNlZDogZmFsc2UsXG5cdFx0XHRpc09wZW46IGZhbHNlLFxuXHRcdFx0aXNQc2V1ZG9Gb2N1c2VkOiBmYWxzZSxcblx0XHRcdHJlcXVpcmVkOiBmYWxzZVxuXHRcdH07XG5cdH0sXG5cblx0Y29tcG9uZW50V2lsbE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG5cdFx0dGhpcy5faW5zdGFuY2VQcmVmaXggPSAncmVhY3Qtc2VsZWN0LScgKyAodGhpcy5wcm9wcy5pbnN0YW5jZUlkIHx8ICsraW5zdGFuY2VJZCkgKyAnLSc7XG5cdFx0dmFyIHZhbHVlQXJyYXkgPSB0aGlzLmdldFZhbHVlQXJyYXkodGhpcy5wcm9wcy52YWx1ZSk7XG5cblx0XHRpZiAodGhpcy5wcm9wcy5yZXF1aXJlZCkge1xuXHRcdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRcdHJlcXVpcmVkOiB0aGlzLmhhbmRsZVJlcXVpcmVkKHZhbHVlQXJyYXlbMF0sIHRoaXMucHJvcHMubXVsdGkpXG5cdFx0XHR9KTtcblx0XHR9XG5cdH0sXG5cblx0Y29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuXHRcdGlmICh0aGlzLnByb3BzLmF1dG9mb2N1cykge1xuXHRcdFx0dGhpcy5mb2N1cygpO1xuXHRcdH1cblx0fSxcblxuXHRjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuXHRcdHZhciB2YWx1ZUFycmF5ID0gdGhpcy5nZXRWYWx1ZUFycmF5KG5leHRQcm9wcy52YWx1ZSwgbmV4dFByb3BzKTtcblxuXHRcdGlmIChuZXh0UHJvcHMucmVxdWlyZWQpIHtcblx0XHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0XHRyZXF1aXJlZDogdGhpcy5oYW5kbGVSZXF1aXJlZCh2YWx1ZUFycmF5WzBdLCBuZXh0UHJvcHMubXVsdGkpXG5cdFx0XHR9KTtcblx0XHR9XG5cdH0sXG5cblx0Y29tcG9uZW50V2lsbFVwZGF0ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVwZGF0ZShuZXh0UHJvcHMsIG5leHRTdGF0ZSkge1xuXHRcdGlmIChuZXh0U3RhdGUuaXNPcGVuICE9PSB0aGlzLnN0YXRlLmlzT3Blbikge1xuXHRcdFx0dGhpcy50b2dnbGVUb3VjaE91dHNpZGVFdmVudChuZXh0U3RhdGUuaXNPcGVuKTtcblx0XHRcdHZhciBoYW5kbGVyID0gbmV4dFN0YXRlLmlzT3BlbiA/IG5leHRQcm9wcy5vbk9wZW4gOiBuZXh0UHJvcHMub25DbG9zZTtcblx0XHRcdGhhbmRsZXIgJiYgaGFuZGxlcigpO1xuXHRcdH1cblx0fSxcblxuXHRjb21wb25lbnREaWRVcGRhdGU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMsIHByZXZTdGF0ZSkge1xuXHRcdC8vIGZvY3VzIHRvIHRoZSBzZWxlY3RlZCBvcHRpb25cblx0XHRpZiAodGhpcy5tZW51ICYmIHRoaXMuZm9jdXNlZCAmJiB0aGlzLnN0YXRlLmlzT3BlbiAmJiAhdGhpcy5oYXNTY3JvbGxlZFRvT3B0aW9uKSB7XG5cdFx0XHR2YXIgZm9jdXNlZE9wdGlvbk5vZGUgPSBfcmVhY3REb20yWydkZWZhdWx0J10uZmluZERPTU5vZGUodGhpcy5mb2N1c2VkKTtcblx0XHRcdHZhciBtZW51Tm9kZSA9IF9yZWFjdERvbTJbJ2RlZmF1bHQnXS5maW5kRE9NTm9kZSh0aGlzLm1lbnUpO1xuXHRcdFx0bWVudU5vZGUuc2Nyb2xsVG9wID0gZm9jdXNlZE9wdGlvbk5vZGUub2Zmc2V0VG9wO1xuXHRcdFx0dGhpcy5oYXNTY3JvbGxlZFRvT3B0aW9uID0gdHJ1ZTtcblx0XHR9IGVsc2UgaWYgKCF0aGlzLnN0YXRlLmlzT3Blbikge1xuXHRcdFx0dGhpcy5oYXNTY3JvbGxlZFRvT3B0aW9uID0gZmFsc2U7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuX3Njcm9sbFRvRm9jdXNlZE9wdGlvbk9uVXBkYXRlICYmIHRoaXMuZm9jdXNlZCAmJiB0aGlzLm1lbnUpIHtcblx0XHRcdHRoaXMuX3Njcm9sbFRvRm9jdXNlZE9wdGlvbk9uVXBkYXRlID0gZmFsc2U7XG5cdFx0XHR2YXIgZm9jdXNlZERPTSA9IF9yZWFjdERvbTJbJ2RlZmF1bHQnXS5maW5kRE9NTm9kZSh0aGlzLmZvY3VzZWQpO1xuXHRcdFx0dmFyIG1lbnVET00gPSBfcmVhY3REb20yWydkZWZhdWx0J10uZmluZERPTU5vZGUodGhpcy5tZW51KTtcblx0XHRcdHZhciBmb2N1c2VkUmVjdCA9IGZvY3VzZWRET00uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0XHR2YXIgbWVudVJlY3QgPSBtZW51RE9NLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdFx0aWYgKGZvY3VzZWRSZWN0LmJvdHRvbSA+IG1lbnVSZWN0LmJvdHRvbSB8fCBmb2N1c2VkUmVjdC50b3AgPCBtZW51UmVjdC50b3ApIHtcblx0XHRcdFx0bWVudURPTS5zY3JvbGxUb3AgPSBmb2N1c2VkRE9NLm9mZnNldFRvcCArIGZvY3VzZWRET00uY2xpZW50SGVpZ2h0IC0gbWVudURPTS5vZmZzZXRIZWlnaHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmICh0aGlzLnByb3BzLnNjcm9sbE1lbnVJbnRvVmlldyAmJiB0aGlzLm1lbnVDb250YWluZXIpIHtcblx0XHRcdHZhciBtZW51Q29udGFpbmVyUmVjdCA9IHRoaXMubWVudUNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHRcdGlmICh3aW5kb3cuaW5uZXJIZWlnaHQgPCBtZW51Q29udGFpbmVyUmVjdC5ib3R0b20gKyB0aGlzLnByb3BzLm1lbnVCdWZmZXIpIHtcblx0XHRcdFx0d2luZG93LnNjcm9sbEJ5KDAsIG1lbnVDb250YWluZXJSZWN0LmJvdHRvbSArIHRoaXMucHJvcHMubWVudUJ1ZmZlciAtIHdpbmRvdy5pbm5lckhlaWdodCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmIChwcmV2UHJvcHMuZGlzYWJsZWQgIT09IHRoaXMucHJvcHMuZGlzYWJsZWQpIHtcblx0XHRcdHRoaXMuc2V0U3RhdGUoeyBpc0ZvY3VzZWQ6IGZhbHNlIH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlYWN0L25vLWRpZC11cGRhdGUtc2V0LXN0YXRlXG5cdFx0XHR0aGlzLmNsb3NlTWVudSgpO1xuXHRcdH1cblx0fSxcblxuXHRjb21wb25lbnRXaWxsVW5tb3VudDogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG5cdFx0aWYgKCFkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyICYmIGRvY3VtZW50LmRldGFjaEV2ZW50KSB7XG5cdFx0XHRkb2N1bWVudC5kZXRhY2hFdmVudCgnb250b3VjaHN0YXJ0JywgdGhpcy5oYW5kbGVUb3VjaE91dHNpZGUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5oYW5kbGVUb3VjaE91dHNpZGUpO1xuXHRcdH1cblx0fSxcblxuXHR0b2dnbGVUb3VjaE91dHNpZGVFdmVudDogZnVuY3Rpb24gdG9nZ2xlVG91Y2hPdXRzaWRlRXZlbnQoZW5hYmxlZCkge1xuXHRcdGlmIChlbmFibGVkKSB7XG5cdFx0XHRpZiAoIWRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIgJiYgZG9jdW1lbnQuYXR0YWNoRXZlbnQpIHtcblx0XHRcdFx0ZG9jdW1lbnQuYXR0YWNoRXZlbnQoJ29udG91Y2hzdGFydCcsIHRoaXMuaGFuZGxlVG91Y2hPdXRzaWRlKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLmhhbmRsZVRvdWNoT3V0c2lkZSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICghZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciAmJiBkb2N1bWVudC5kZXRhY2hFdmVudCkge1xuXHRcdFx0XHRkb2N1bWVudC5kZXRhY2hFdmVudCgnb250b3VjaHN0YXJ0JywgdGhpcy5oYW5kbGVUb3VjaE91dHNpZGUpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMuaGFuZGxlVG91Y2hPdXRzaWRlKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0aGFuZGxlVG91Y2hPdXRzaWRlOiBmdW5jdGlvbiBoYW5kbGVUb3VjaE91dHNpZGUoZXZlbnQpIHtcblx0XHQvLyBoYW5kbGUgdG91Y2ggb3V0c2lkZSBvbiBpb3MgdG8gZGlzbWlzcyBtZW51XG5cdFx0aWYgKHRoaXMud3JhcHBlciAmJiAhdGhpcy53cmFwcGVyLmNvbnRhaW5zKGV2ZW50LnRhcmdldCkpIHtcblx0XHRcdHRoaXMuY2xvc2VNZW51KCk7XG5cdFx0fVxuXHR9LFxuXG5cdGZvY3VzOiBmdW5jdGlvbiBmb2N1cygpIHtcblx0XHRpZiAoIXRoaXMuaW5wdXQpIHJldHVybjtcblx0XHR0aGlzLmlucHV0LmZvY3VzKCk7XG5cdH0sXG5cblx0Ymx1cklucHV0OiBmdW5jdGlvbiBibHVySW5wdXQoKSB7XG5cdFx0aWYgKCF0aGlzLmlucHV0KSByZXR1cm47XG5cdFx0dGhpcy5pbnB1dC5ibHVyKCk7XG5cdH0sXG5cblx0aGFuZGxlVG91Y2hNb3ZlOiBmdW5jdGlvbiBoYW5kbGVUb3VjaE1vdmUoZXZlbnQpIHtcblx0XHQvLyBTZXQgYSBmbGFnIHRoYXQgdGhlIHZpZXcgaXMgYmVpbmcgZHJhZ2dlZFxuXHRcdHRoaXMuZHJhZ2dpbmcgPSB0cnVlO1xuXHR9LFxuXG5cdGhhbmRsZVRvdWNoU3RhcnQ6IGZ1bmN0aW9uIGhhbmRsZVRvdWNoU3RhcnQoZXZlbnQpIHtcblx0XHQvLyBTZXQgYSBmbGFnIHRoYXQgdGhlIHZpZXcgaXMgbm90IGJlaW5nIGRyYWdnZWRcblx0XHR0aGlzLmRyYWdnaW5nID0gZmFsc2U7XG5cdH0sXG5cblx0aGFuZGxlVG91Y2hFbmQ6IGZ1bmN0aW9uIGhhbmRsZVRvdWNoRW5kKGV2ZW50KSB7XG5cdFx0Ly8gQ2hlY2sgaWYgdGhlIHZpZXcgaXMgYmVpbmcgZHJhZ2dlZCwgSW4gdGhpcyBjYXNlXG5cdFx0Ly8gd2UgZG9uJ3Qgd2FudCB0byBmaXJlIHRoZSBjbGljayBldmVudCAoYmVjYXVzZSB0aGUgdXNlciBvbmx5IHdhbnRzIHRvIHNjcm9sbClcblx0XHRpZiAodGhpcy5kcmFnZ2luZykgcmV0dXJuO1xuXG5cdFx0Ly8gRmlyZSB0aGUgbW91c2UgZXZlbnRzXG5cdFx0dGhpcy5oYW5kbGVNb3VzZURvd24oZXZlbnQpO1xuXHR9LFxuXG5cdGhhbmRsZVRvdWNoRW5kQ2xlYXJWYWx1ZTogZnVuY3Rpb24gaGFuZGxlVG91Y2hFbmRDbGVhclZhbHVlKGV2ZW50KSB7XG5cdFx0Ly8gQ2hlY2sgaWYgdGhlIHZpZXcgaXMgYmVpbmcgZHJhZ2dlZCwgSW4gdGhpcyBjYXNlXG5cdFx0Ly8gd2UgZG9uJ3Qgd2FudCB0byBmaXJlIHRoZSBjbGljayBldmVudCAoYmVjYXVzZSB0aGUgdXNlciBvbmx5IHdhbnRzIHRvIHNjcm9sbClcblx0XHRpZiAodGhpcy5kcmFnZ2luZykgcmV0dXJuO1xuXG5cdFx0Ly8gQ2xlYXIgdGhlIHZhbHVlXG5cdFx0dGhpcy5jbGVhclZhbHVlKGV2ZW50KTtcblx0fSxcblxuXHRoYW5kbGVNb3VzZURvd246IGZ1bmN0aW9uIGhhbmRsZU1vdXNlRG93bihldmVudCkge1xuXHRcdC8vIGlmIHRoZSBldmVudCB3YXMgdHJpZ2dlcmVkIGJ5IGEgbW91c2Vkb3duIGFuZCBub3QgdGhlIHByaW1hcnlcblx0XHQvLyBidXR0b24sIG9yIGlmIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQsIGlnbm9yZSBpdC5cblx0XHRpZiAodGhpcy5wcm9wcy5kaXNhYmxlZCB8fCBldmVudC50eXBlID09PSAnbW91c2Vkb3duJyAmJiBldmVudC5idXR0b24gIT09IDApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoZXZlbnQudGFyZ2V0LnRhZ05hbWUgPT09ICdJTlBVVCcpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBwcmV2ZW50IGRlZmF1bHQgZXZlbnQgaGFuZGxlcnNcblx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0Ly8gZm9yIHRoZSBub24tc2VhcmNoYWJsZSBzZWxlY3QsIHRvZ2dsZSB0aGUgbWVudVxuXHRcdGlmICghdGhpcy5wcm9wcy5zZWFyY2hhYmxlKSB7XG5cdFx0XHR0aGlzLmZvY3VzKCk7XG5cdFx0XHRyZXR1cm4gdGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRcdGlzT3BlbjogIXRoaXMuc3RhdGUuaXNPcGVuXG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5zdGF0ZS5pc0ZvY3VzZWQpIHtcblx0XHRcdC8vIE9uIGlPUywgd2UgY2FuIGdldCBpbnRvIGEgc3RhdGUgd2hlcmUgd2UgdGhpbmsgdGhlIGlucHV0IGlzIGZvY3VzZWQgYnV0IGl0IGlzbid0IHJlYWxseSxcblx0XHRcdC8vIHNpbmNlIGlPUyBpZ25vcmVzIHByb2dyYW1tYXRpYyBjYWxscyB0byBpbnB1dC5mb2N1cygpIHRoYXQgd2VyZW4ndCB0cmlnZ2VyZWQgYnkgYSBjbGljayBldmVudC5cblx0XHRcdC8vIENhbGwgZm9jdXMoKSBhZ2FpbiBoZXJlIHRvIGJlIHNhZmUuXG5cdFx0XHR0aGlzLmZvY3VzKCk7XG5cblx0XHRcdHZhciBpbnB1dCA9IHRoaXMuaW5wdXQ7XG5cdFx0XHRpZiAodHlwZW9mIGlucHV0LmdldElucHV0ID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdC8vIEdldCB0aGUgYWN0dWFsIERPTSBpbnB1dCBpZiB0aGUgcmVmIGlzIGFuIDxBdXRvc2l6ZUlucHV0IC8+IGNvbXBvbmVudFxuXHRcdFx0XHRpbnB1dCA9IGlucHV0LmdldElucHV0KCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGNsZWFycyB0aGUgdmFsdWUgc28gdGhhdCB0aGUgY3Vyc29yIHdpbGwgYmUgYXQgdGhlIGVuZCBvZiBpbnB1dCB3aGVuIHRoZSBjb21wb25lbnQgcmUtcmVuZGVyc1xuXHRcdFx0aW5wdXQudmFsdWUgPSAnJztcblxuXHRcdFx0Ly8gaWYgdGhlIGlucHV0IGlzIGZvY3VzZWQsIGVuc3VyZSB0aGUgbWVudSBpcyBvcGVuXG5cdFx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdFx0aXNPcGVuOiB0cnVlLFxuXHRcdFx0XHRpc1BzZXVkb0ZvY3VzZWQ6IGZhbHNlXG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gb3RoZXJ3aXNlLCBmb2N1cyB0aGUgaW5wdXQgYW5kIG9wZW4gdGhlIG1lbnVcblx0XHRcdHRoaXMuX29wZW5BZnRlckZvY3VzID0gdHJ1ZTtcblx0XHRcdHRoaXMuZm9jdXMoKTtcblx0XHR9XG5cdH0sXG5cblx0aGFuZGxlTW91c2VEb3duT25BcnJvdzogZnVuY3Rpb24gaGFuZGxlTW91c2VEb3duT25BcnJvdyhldmVudCkge1xuXHRcdC8vIGlmIHRoZSBldmVudCB3YXMgdHJpZ2dlcmVkIGJ5IGEgbW91c2Vkb3duIGFuZCBub3QgdGhlIHByaW1hcnlcblx0XHQvLyBidXR0b24sIG9yIGlmIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQsIGlnbm9yZSBpdC5cblx0XHRpZiAodGhpcy5wcm9wcy5kaXNhYmxlZCB8fCBldmVudC50eXBlID09PSAnbW91c2Vkb3duJyAmJiBldmVudC5idXR0b24gIT09IDApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Ly8gSWYgdGhlIG1lbnUgaXNuJ3Qgb3BlbiwgbGV0IHRoZSBldmVudCBidWJibGUgdG8gdGhlIG1haW4gaGFuZGxlTW91c2VEb3duXG5cdFx0aWYgKCF0aGlzLnN0YXRlLmlzT3Blbikge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHQvLyBwcmV2ZW50IGRlZmF1bHQgZXZlbnQgaGFuZGxlcnNcblx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdC8vIGNsb3NlIHRoZSBtZW51XG5cdFx0dGhpcy5jbG9zZU1lbnUoKTtcblx0fSxcblxuXHRoYW5kbGVNb3VzZURvd25Pbk1lbnU6IGZ1bmN0aW9uIGhhbmRsZU1vdXNlRG93bk9uTWVudShldmVudCkge1xuXHRcdC8vIGlmIHRoZSBldmVudCB3YXMgdHJpZ2dlcmVkIGJ5IGEgbW91c2Vkb3duIGFuZCBub3QgdGhlIHByaW1hcnlcblx0XHQvLyBidXR0b24sIG9yIGlmIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQsIGlnbm9yZSBpdC5cblx0XHRpZiAodGhpcy5wcm9wcy5kaXNhYmxlZCB8fCBldmVudC50eXBlID09PSAnbW91c2Vkb3duJyAmJiBldmVudC5idXR0b24gIT09IDApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHRcdHRoaXMuX29wZW5BZnRlckZvY3VzID0gdHJ1ZTtcblx0XHR0aGlzLmZvY3VzKCk7XG5cdH0sXG5cblx0Y2xvc2VNZW51OiBmdW5jdGlvbiBjbG9zZU1lbnUoKSB7XG5cdFx0aWYgKHRoaXMucHJvcHMub25DbG9zZVJlc2V0c0lucHV0KSB7XG5cdFx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdFx0aXNPcGVuOiBmYWxzZSxcblx0XHRcdFx0aXNQc2V1ZG9Gb2N1c2VkOiB0aGlzLnN0YXRlLmlzRm9jdXNlZCAmJiAhdGhpcy5wcm9wcy5tdWx0aSxcblx0XHRcdFx0aW5wdXRWYWx1ZTogJydcblx0XHRcdH0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdFx0aXNPcGVuOiBmYWxzZSxcblx0XHRcdFx0aXNQc2V1ZG9Gb2N1c2VkOiB0aGlzLnN0YXRlLmlzRm9jdXNlZCAmJiAhdGhpcy5wcm9wcy5tdWx0aSxcblx0XHRcdFx0aW5wdXRWYWx1ZTogdGhpcy5zdGF0ZS5pbnB1dFZhbHVlXG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0dGhpcy5oYXNTY3JvbGxlZFRvT3B0aW9uID0gZmFsc2U7XG5cdH0sXG5cblx0aGFuZGxlSW5wdXRGb2N1czogZnVuY3Rpb24gaGFuZGxlSW5wdXRGb2N1cyhldmVudCkge1xuXHRcdGlmICh0aGlzLnByb3BzLmRpc2FibGVkKSByZXR1cm47XG5cdFx0dmFyIGlzT3BlbiA9IHRoaXMuc3RhdGUuaXNPcGVuIHx8IHRoaXMuX29wZW5BZnRlckZvY3VzIHx8IHRoaXMucHJvcHMub3Blbk9uRm9jdXM7XG5cdFx0aWYgKHRoaXMucHJvcHMub25Gb2N1cykge1xuXHRcdFx0dGhpcy5wcm9wcy5vbkZvY3VzKGV2ZW50KTtcblx0XHR9XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRpc0ZvY3VzZWQ6IHRydWUsXG5cdFx0XHRpc09wZW46IGlzT3BlblxuXHRcdH0pO1xuXHRcdHRoaXMuX29wZW5BZnRlckZvY3VzID0gZmFsc2U7XG5cdH0sXG5cblx0aGFuZGxlSW5wdXRCbHVyOiBmdW5jdGlvbiBoYW5kbGVJbnB1dEJsdXIoZXZlbnQpIHtcblx0XHQvLyBUaGUgY2hlY2sgZm9yIG1lbnUuY29udGFpbnMoYWN0aXZlRWxlbWVudCkgaXMgbmVjZXNzYXJ5IHRvIHByZXZlbnQgSUUxMSdzIHNjcm9sbGJhciBmcm9tIGNsb3NpbmcgdGhlIG1lbnUgaW4gY2VydGFpbiBjb250ZXh0cy5cblx0XHRpZiAodGhpcy5tZW51ICYmICh0aGlzLm1lbnUgPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgfHwgdGhpcy5tZW51LmNvbnRhaW5zKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpKSkge1xuXHRcdFx0dGhpcy5mb2N1cygpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLnByb3BzLm9uQmx1cikge1xuXHRcdFx0dGhpcy5wcm9wcy5vbkJsdXIoZXZlbnQpO1xuXHRcdH1cblx0XHR2YXIgb25CbHVycmVkU3RhdGUgPSB7XG5cdFx0XHRpc0ZvY3VzZWQ6IGZhbHNlLFxuXHRcdFx0aXNPcGVuOiBmYWxzZSxcblx0XHRcdGlzUHNldWRvRm9jdXNlZDogZmFsc2Vcblx0XHR9O1xuXHRcdGlmICh0aGlzLnByb3BzLm9uQmx1clJlc2V0c0lucHV0KSB7XG5cdFx0XHRvbkJsdXJyZWRTdGF0ZS5pbnB1dFZhbHVlID0gJyc7XG5cdFx0fVxuXHRcdHRoaXMuc2V0U3RhdGUob25CbHVycmVkU3RhdGUpO1xuXHR9LFxuXG5cdGhhbmRsZUlucHV0Q2hhbmdlOiBmdW5jdGlvbiBoYW5kbGVJbnB1dENoYW5nZShldmVudCkge1xuXHRcdHZhciBuZXdJbnB1dFZhbHVlID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuXG5cdFx0aWYgKHRoaXMuc3RhdGUuaW5wdXRWYWx1ZSAhPT0gZXZlbnQudGFyZ2V0LnZhbHVlICYmIHRoaXMucHJvcHMub25JbnB1dENoYW5nZSkge1xuXHRcdFx0dmFyIG5leHRTdGF0ZSA9IHRoaXMucHJvcHMub25JbnB1dENoYW5nZShuZXdJbnB1dFZhbHVlKTtcblx0XHRcdC8vIE5vdGU6ICE9IHVzZWQgZGVsaWJlcmF0ZWx5IGhlcmUgdG8gY2F0Y2ggdW5kZWZpbmVkIGFuZCBudWxsXG5cdFx0XHRpZiAobmV4dFN0YXRlICE9IG51bGwgJiYgdHlwZW9mIG5leHRTdGF0ZSAhPT0gJ29iamVjdCcpIHtcblx0XHRcdFx0bmV3SW5wdXRWYWx1ZSA9ICcnICsgbmV4dFN0YXRlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0aXNPcGVuOiB0cnVlLFxuXHRcdFx0aXNQc2V1ZG9Gb2N1c2VkOiBmYWxzZSxcblx0XHRcdGlucHV0VmFsdWU6IG5ld0lucHV0VmFsdWVcblx0XHR9KTtcblx0fSxcblxuXHRoYW5kbGVLZXlEb3duOiBmdW5jdGlvbiBoYW5kbGVLZXlEb3duKGV2ZW50KSB7XG5cdFx0aWYgKHRoaXMucHJvcHMuZGlzYWJsZWQpIHJldHVybjtcblxuXHRcdGlmICh0eXBlb2YgdGhpcy5wcm9wcy5vbklucHV0S2V5RG93biA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0dGhpcy5wcm9wcy5vbklucHV0S2V5RG93bihldmVudCk7XG5cdFx0XHRpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0c3dpdGNoIChldmVudC5rZXlDb2RlKSB7XG5cdFx0XHRjYXNlIDg6XG5cdFx0XHRcdC8vIGJhY2tzcGFjZVxuXHRcdFx0XHRpZiAoIXRoaXMuc3RhdGUuaW5wdXRWYWx1ZSAmJiB0aGlzLnByb3BzLmJhY2tzcGFjZVJlbW92ZXMpIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdHRoaXMucG9wVmFsdWUoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHRjYXNlIDk6XG5cdFx0XHRcdC8vIHRhYlxuXHRcdFx0XHRpZiAoZXZlbnQuc2hpZnRLZXkgfHwgIXRoaXMuc3RhdGUuaXNPcGVuIHx8ICF0aGlzLnByb3BzLnRhYlNlbGVjdHNWYWx1ZSkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLnNlbGVjdEZvY3VzZWRPcHRpb24oKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0Y2FzZSAxMzpcblx0XHRcdFx0Ly8gZW50ZXJcblx0XHRcdFx0aWYgKCF0aGlzLnN0YXRlLmlzT3BlbikgcmV0dXJuO1xuXHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0dGhpcy5zZWxlY3RGb2N1c2VkT3B0aW9uKCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAyNzpcblx0XHRcdFx0Ly8gZXNjYXBlXG5cdFx0XHRcdGlmICh0aGlzLnN0YXRlLmlzT3Blbikge1xuXHRcdFx0XHRcdHRoaXMuY2xvc2VNZW51KCk7XG5cdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdH0gZWxzZSBpZiAodGhpcy5wcm9wcy5jbGVhcmFibGUgJiYgdGhpcy5wcm9wcy5lc2NhcGVDbGVhcnNWYWx1ZSkge1xuXHRcdFx0XHRcdHRoaXMuY2xlYXJWYWx1ZShldmVudCk7XG5cdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIDM4OlxuXHRcdFx0XHQvLyB1cFxuXHRcdFx0XHR0aGlzLmZvY3VzUHJldmlvdXNPcHRpb24oKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIDQwOlxuXHRcdFx0XHQvLyBkb3duXG5cdFx0XHRcdHRoaXMuZm9jdXNOZXh0T3B0aW9uKCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAzMzpcblx0XHRcdFx0Ly8gcGFnZSB1cFxuXHRcdFx0XHR0aGlzLmZvY3VzUGFnZVVwT3B0aW9uKCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAzNDpcblx0XHRcdFx0Ly8gcGFnZSBkb3duXG5cdFx0XHRcdHRoaXMuZm9jdXNQYWdlRG93bk9wdGlvbigpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgMzU6XG5cdFx0XHRcdC8vIGVuZCBrZXlcblx0XHRcdFx0aWYgKGV2ZW50LnNoaWZ0S2V5KSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuZm9jdXNFbmRPcHRpb24oKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIDM2OlxuXHRcdFx0XHQvLyBob21lIGtleVxuXHRcdFx0XHRpZiAoZXZlbnQuc2hpZnRLZXkpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5mb2N1c1N0YXJ0T3B0aW9uKCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSA0Njpcblx0XHRcdFx0Ly8gYmFja3NwYWNlXG5cdFx0XHRcdGlmICghdGhpcy5zdGF0ZS5pbnB1dFZhbHVlICYmIHRoaXMucHJvcHMuZGVsZXRlUmVtb3Zlcykge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0dGhpcy5wb3BWYWx1ZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0fSxcblxuXHRoYW5kbGVWYWx1ZUNsaWNrOiBmdW5jdGlvbiBoYW5kbGVWYWx1ZUNsaWNrKG9wdGlvbiwgZXZlbnQpIHtcblx0XHRpZiAoIXRoaXMucHJvcHMub25WYWx1ZUNsaWNrKSByZXR1cm47XG5cdFx0dGhpcy5wcm9wcy5vblZhbHVlQ2xpY2sob3B0aW9uLCBldmVudCk7XG5cdH0sXG5cblx0aGFuZGxlTWVudVNjcm9sbDogZnVuY3Rpb24gaGFuZGxlTWVudVNjcm9sbChldmVudCkge1xuXHRcdGlmICghdGhpcy5wcm9wcy5vbk1lbnVTY3JvbGxUb0JvdHRvbSkgcmV0dXJuO1xuXHRcdHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG5cblx0XHRpZiAodGFyZ2V0LnNjcm9sbEhlaWdodCA+IHRhcmdldC5vZmZzZXRIZWlnaHQgJiYgISh0YXJnZXQuc2Nyb2xsSGVpZ2h0IC0gdGFyZ2V0Lm9mZnNldEhlaWdodCAtIHRhcmdldC5zY3JvbGxUb3ApKSB7XG5cdFx0XHR0aGlzLnByb3BzLm9uTWVudVNjcm9sbFRvQm90dG9tKCk7XG5cdFx0fVxuXHR9LFxuXG5cdGhhbmRsZVJlcXVpcmVkOiBmdW5jdGlvbiBoYW5kbGVSZXF1aXJlZCh2YWx1ZSwgbXVsdGkpIHtcblx0XHRpZiAoIXZhbHVlKSByZXR1cm4gdHJ1ZTtcblx0XHRyZXR1cm4gbXVsdGkgPyB2YWx1ZS5sZW5ndGggPT09IDAgOiBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoID09PSAwO1xuXHR9LFxuXG5cdGdldE9wdGlvbkxhYmVsOiBmdW5jdGlvbiBnZXRPcHRpb25MYWJlbChvcCkge1xuXHRcdHJldHVybiBvcFt0aGlzLnByb3BzLmxhYmVsS2V5XTtcblx0fSxcblxuXHQvKipcbiAgKiBUdXJucyBhIHZhbHVlIGludG8gYW4gYXJyYXkgZnJvbSB0aGUgZ2l2ZW4gb3B0aW9uc1xuICAqIEBwYXJhbVx0e1N0cmluZ3xOdW1iZXJ8QXJyYXl9XHR2YWx1ZVx0XHQtIHRoZSB2YWx1ZSBvZiB0aGUgc2VsZWN0IGlucHV0XG4gICogQHBhcmFtXHR7T2JqZWN0fVx0XHRuZXh0UHJvcHNcdC0gb3B0aW9uYWxseSBzcGVjaWZ5IHRoZSBuZXh0UHJvcHMgc28gdGhlIHJldHVybmVkIGFycmF5IHVzZXMgdGhlIGxhdGVzdCBjb25maWd1cmF0aW9uXG4gICogQHJldHVybnNcdHtBcnJheX1cdHRoZSB2YWx1ZSBvZiB0aGUgc2VsZWN0IHJlcHJlc2VudGVkIGluIGFuIGFycmF5XG4gICovXG5cdGdldFZhbHVlQXJyYXk6IGZ1bmN0aW9uIGdldFZhbHVlQXJyYXkodmFsdWUsIG5leHRQcm9wcykge1xuXHRcdHZhciBfdGhpcyA9IHRoaXM7XG5cblx0XHQvKiogc3VwcG9ydCBvcHRpb25hbGx5IHBhc3NpbmcgaW4gdGhlIGBuZXh0UHJvcHNgIHNvIGBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzYCB1cGRhdGVzIHdpbGwgZnVuY3Rpb24gYXMgZXhwZWN0ZWQgKi9cblx0XHR2YXIgcHJvcHMgPSB0eXBlb2YgbmV4dFByb3BzID09PSAnb2JqZWN0JyA/IG5leHRQcm9wcyA6IHRoaXMucHJvcHM7XG5cdFx0aWYgKHByb3BzLm11bHRpKSB7XG5cdFx0XHRpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykgdmFsdWUgPSB2YWx1ZS5zcGxpdChwcm9wcy5kZWxpbWl0ZXIpO1xuXHRcdFx0aWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuXHRcdFx0XHRpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIFtdO1xuXHRcdFx0XHR2YWx1ZSA9IFt2YWx1ZV07XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdmFsdWUubWFwKGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdFx0XHRyZXR1cm4gX3RoaXMuZXhwYW5kVmFsdWUodmFsdWUsIHByb3BzKTtcblx0XHRcdH0pLmZpbHRlcihmdW5jdGlvbiAoaSkge1xuXHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdH0pO1xuXHRcdH1cblx0XHR2YXIgZXhwYW5kZWRWYWx1ZSA9IHRoaXMuZXhwYW5kVmFsdWUodmFsdWUsIHByb3BzKTtcblx0XHRyZXR1cm4gZXhwYW5kZWRWYWx1ZSA/IFtleHBhbmRlZFZhbHVlXSA6IFtdO1xuXHR9LFxuXG5cdC8qKlxuICAqIFJldHJpZXZlIGEgdmFsdWUgZnJvbSB0aGUgZ2l2ZW4gb3B0aW9ucyBhbmQgdmFsdWVLZXlcbiAgKiBAcGFyYW1cdHtTdHJpbmd8TnVtYmVyfEFycmF5fVx0dmFsdWVcdC0gdGhlIHNlbGVjdGVkIHZhbHVlKHMpXG4gICogQHBhcmFtXHR7T2JqZWN0fVx0XHRwcm9wc1x0LSB0aGUgU2VsZWN0IGNvbXBvbmVudCdzIHByb3BzIChvciBuZXh0UHJvcHMpXG4gICovXG5cdGV4cGFuZFZhbHVlOiBmdW5jdGlvbiBleHBhbmRWYWx1ZSh2YWx1ZSwgcHJvcHMpIHtcblx0XHR2YXIgdmFsdWVUeXBlID0gdHlwZW9mIHZhbHVlO1xuXHRcdGlmICh2YWx1ZVR5cGUgIT09ICdzdHJpbmcnICYmIHZhbHVlVHlwZSAhPT0gJ251bWJlcicgJiYgdmFsdWVUeXBlICE9PSAnYm9vbGVhbicpIHJldHVybiB2YWx1ZTtcblx0XHR2YXIgb3B0aW9ucyA9IHByb3BzLm9wdGlvbnM7XG5cdFx0dmFyIHZhbHVlS2V5ID0gcHJvcHMudmFsdWVLZXk7XG5cblx0XHRpZiAoIW9wdGlvbnMpIHJldHVybjtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG9wdGlvbnMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGlmIChvcHRpb25zW2ldW3ZhbHVlS2V5XSA9PT0gdmFsdWUpIHJldHVybiBvcHRpb25zW2ldO1xuXHRcdH1cblx0fSxcblxuXHRzZXRWYWx1ZTogZnVuY3Rpb24gc2V0VmFsdWUodmFsdWUpIHtcblx0XHR2YXIgX3RoaXMyID0gdGhpcztcblxuXHRcdGlmICh0aGlzLnByb3BzLmF1dG9CbHVyKSB7XG5cdFx0XHR0aGlzLmJsdXJJbnB1dCgpO1xuXHRcdH1cblx0XHRpZiAoIXRoaXMucHJvcHMub25DaGFuZ2UpIHJldHVybjtcblx0XHRpZiAodGhpcy5wcm9wcy5yZXF1aXJlZCkge1xuXHRcdFx0dmFyIHJlcXVpcmVkID0gdGhpcy5oYW5kbGVSZXF1aXJlZCh2YWx1ZSwgdGhpcy5wcm9wcy5tdWx0aSk7XG5cdFx0XHR0aGlzLnNldFN0YXRlKHsgcmVxdWlyZWQ6IHJlcXVpcmVkIH0pO1xuXHRcdH1cblx0XHRpZiAodGhpcy5wcm9wcy5zaW1wbGVWYWx1ZSAmJiB2YWx1ZSkge1xuXHRcdFx0dmFsdWUgPSB0aGlzLnByb3BzLm11bHRpID8gdmFsdWUubWFwKGZ1bmN0aW9uIChpKSB7XG5cdFx0XHRcdHJldHVybiBpW190aGlzMi5wcm9wcy52YWx1ZUtleV07XG5cdFx0XHR9KS5qb2luKHRoaXMucHJvcHMuZGVsaW1pdGVyKSA6IHZhbHVlW3RoaXMucHJvcHMudmFsdWVLZXldO1xuXHRcdH1cblx0XHR0aGlzLnByb3BzLm9uQ2hhbmdlKHZhbHVlKTtcblx0fSxcblxuXHRzZWxlY3RWYWx1ZTogZnVuY3Rpb24gc2VsZWN0VmFsdWUodmFsdWUpIHtcblx0XHR2YXIgX3RoaXMzID0gdGhpcztcblxuXHRcdC8vTk9URTogdXBkYXRlIHZhbHVlIGluIHRoZSBjYWxsYmFjayB0byBtYWtlIHN1cmUgdGhlIGlucHV0IHZhbHVlIGlzIGVtcHR5IHNvIHRoYXQgdGhlcmUgYXJlIG5vIHN0eWxpbmcgaXNzdWVzIChDaHJvbWUgaGFkIGlzc3VlIG90aGVyd2lzZSlcblx0XHR0aGlzLmhhc1Njcm9sbGVkVG9PcHRpb24gPSBmYWxzZTtcblx0XHRpZiAodGhpcy5wcm9wcy5tdWx0aSkge1xuXHRcdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRcdGlucHV0VmFsdWU6ICcnLFxuXHRcdFx0XHRmb2N1c2VkSW5kZXg6IG51bGxcblx0XHRcdH0sIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0X3RoaXMzLmFkZFZhbHVlKHZhbHVlKTtcblx0XHRcdH0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdFx0aXNPcGVuOiBmYWxzZSxcblx0XHRcdFx0aW5wdXRWYWx1ZTogJycsXG5cdFx0XHRcdGlzUHNldWRvRm9jdXNlZDogdGhpcy5zdGF0ZS5pc0ZvY3VzZWRcblx0XHRcdH0sIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0X3RoaXMzLnNldFZhbHVlKHZhbHVlKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fSxcblxuXHRhZGRWYWx1ZTogZnVuY3Rpb24gYWRkVmFsdWUodmFsdWUpIHtcblx0XHR2YXIgdmFsdWVBcnJheSA9IHRoaXMuZ2V0VmFsdWVBcnJheSh0aGlzLnByb3BzLnZhbHVlKTtcblx0XHR2YXIgdmlzaWJsZU9wdGlvbnMgPSB0aGlzLl92aXNpYmxlT3B0aW9ucy5maWx0ZXIoZnVuY3Rpb24gKHZhbCkge1xuXHRcdFx0cmV0dXJuICF2YWwuZGlzYWJsZWQ7XG5cdFx0fSk7XG5cdFx0dmFyIGxhc3RWYWx1ZUluZGV4ID0gdmlzaWJsZU9wdGlvbnMuaW5kZXhPZih2YWx1ZSk7XG5cdFx0dGhpcy5zZXRWYWx1ZSh2YWx1ZUFycmF5LmNvbmNhdCh2YWx1ZSkpO1xuXHRcdGlmICh2aXNpYmxlT3B0aW9ucy5sZW5ndGggLSAxID09PSBsYXN0VmFsdWVJbmRleCkge1xuXHRcdFx0Ly8gdGhlIGxhc3Qgb3B0aW9uIHdhcyBzZWxlY3RlZDsgZm9jdXMgdGhlIHNlY29uZC1sYXN0IG9uZVxuXHRcdFx0dGhpcy5mb2N1c09wdGlvbih2aXNpYmxlT3B0aW9uc1tsYXN0VmFsdWVJbmRleCAtIDFdKTtcblx0XHR9IGVsc2UgaWYgKHZpc2libGVPcHRpb25zLmxlbmd0aCA+IGxhc3RWYWx1ZUluZGV4KSB7XG5cdFx0XHQvLyBmb2N1cyB0aGUgb3B0aW9uIGJlbG93IHRoZSBzZWxlY3RlZCBvbmVcblx0XHRcdHRoaXMuZm9jdXNPcHRpb24odmlzaWJsZU9wdGlvbnNbbGFzdFZhbHVlSW5kZXggKyAxXSk7XG5cdFx0fVxuXHR9LFxuXG5cdHBvcFZhbHVlOiBmdW5jdGlvbiBwb3BWYWx1ZSgpIHtcblx0XHR2YXIgdmFsdWVBcnJheSA9IHRoaXMuZ2V0VmFsdWVBcnJheSh0aGlzLnByb3BzLnZhbHVlKTtcblx0XHRpZiAoIXZhbHVlQXJyYXkubGVuZ3RoKSByZXR1cm47XG5cdFx0aWYgKHZhbHVlQXJyYXlbdmFsdWVBcnJheS5sZW5ndGggLSAxXS5jbGVhcmFibGVWYWx1ZSA9PT0gZmFsc2UpIHJldHVybjtcblx0XHR0aGlzLnNldFZhbHVlKHZhbHVlQXJyYXkuc2xpY2UoMCwgdmFsdWVBcnJheS5sZW5ndGggLSAxKSk7XG5cdH0sXG5cblx0cmVtb3ZlVmFsdWU6IGZ1bmN0aW9uIHJlbW92ZVZhbHVlKHZhbHVlKSB7XG5cdFx0dmFyIHZhbHVlQXJyYXkgPSB0aGlzLmdldFZhbHVlQXJyYXkodGhpcy5wcm9wcy52YWx1ZSk7XG5cdFx0dGhpcy5zZXRWYWx1ZSh2YWx1ZUFycmF5LmZpbHRlcihmdW5jdGlvbiAoaSkge1xuXHRcdFx0cmV0dXJuIGkgIT09IHZhbHVlO1xuXHRcdH0pKTtcblx0XHR0aGlzLmZvY3VzKCk7XG5cdH0sXG5cblx0Y2xlYXJWYWx1ZTogZnVuY3Rpb24gY2xlYXJWYWx1ZShldmVudCkge1xuXHRcdC8vIGlmIHRoZSBldmVudCB3YXMgdHJpZ2dlcmVkIGJ5IGEgbW91c2Vkb3duIGFuZCBub3QgdGhlIHByaW1hcnlcblx0XHQvLyBidXR0b24sIGlnbm9yZSBpdC5cblx0XHRpZiAoZXZlbnQgJiYgZXZlbnQudHlwZSA9PT0gJ21vdXNlZG93bicgJiYgZXZlbnQuYnV0dG9uICE9PSAwKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0dGhpcy5zZXRWYWx1ZSh0aGlzLmdldFJlc2V0VmFsdWUoKSk7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRpc09wZW46IGZhbHNlLFxuXHRcdFx0aW5wdXRWYWx1ZTogJydcblx0XHR9LCB0aGlzLmZvY3VzKTtcblx0fSxcblxuXHRnZXRSZXNldFZhbHVlOiBmdW5jdGlvbiBnZXRSZXNldFZhbHVlKCkge1xuXHRcdGlmICh0aGlzLnByb3BzLnJlc2V0VmFsdWUgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHJvcHMucmVzZXRWYWx1ZTtcblx0XHR9IGVsc2UgaWYgKHRoaXMucHJvcHMubXVsdGkpIHtcblx0XHRcdHJldHVybiBbXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHR9LFxuXG5cdGZvY3VzT3B0aW9uOiBmdW5jdGlvbiBmb2N1c09wdGlvbihvcHRpb24pIHtcblx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdGZvY3VzZWRPcHRpb246IG9wdGlvblxuXHRcdH0pO1xuXHR9LFxuXG5cdGZvY3VzTmV4dE9wdGlvbjogZnVuY3Rpb24gZm9jdXNOZXh0T3B0aW9uKCkge1xuXHRcdHRoaXMuZm9jdXNBZGphY2VudE9wdGlvbignbmV4dCcpO1xuXHR9LFxuXG5cdGZvY3VzUHJldmlvdXNPcHRpb246IGZ1bmN0aW9uIGZvY3VzUHJldmlvdXNPcHRpb24oKSB7XG5cdFx0dGhpcy5mb2N1c0FkamFjZW50T3B0aW9uKCdwcmV2aW91cycpO1xuXHR9LFxuXG5cdGZvY3VzUGFnZVVwT3B0aW9uOiBmdW5jdGlvbiBmb2N1c1BhZ2VVcE9wdGlvbigpIHtcblx0XHR0aGlzLmZvY3VzQWRqYWNlbnRPcHRpb24oJ3BhZ2VfdXAnKTtcblx0fSxcblxuXHRmb2N1c1BhZ2VEb3duT3B0aW9uOiBmdW5jdGlvbiBmb2N1c1BhZ2VEb3duT3B0aW9uKCkge1xuXHRcdHRoaXMuZm9jdXNBZGphY2VudE9wdGlvbigncGFnZV9kb3duJyk7XG5cdH0sXG5cblx0Zm9jdXNTdGFydE9wdGlvbjogZnVuY3Rpb24gZm9jdXNTdGFydE9wdGlvbigpIHtcblx0XHR0aGlzLmZvY3VzQWRqYWNlbnRPcHRpb24oJ3N0YXJ0Jyk7XG5cdH0sXG5cblx0Zm9jdXNFbmRPcHRpb246IGZ1bmN0aW9uIGZvY3VzRW5kT3B0aW9uKCkge1xuXHRcdHRoaXMuZm9jdXNBZGphY2VudE9wdGlvbignZW5kJyk7XG5cdH0sXG5cblx0Zm9jdXNBZGphY2VudE9wdGlvbjogZnVuY3Rpb24gZm9jdXNBZGphY2VudE9wdGlvbihkaXIpIHtcblx0XHR2YXIgb3B0aW9ucyA9IHRoaXMuX3Zpc2libGVPcHRpb25zLm1hcChmdW5jdGlvbiAob3B0aW9uLCBpbmRleCkge1xuXHRcdFx0cmV0dXJuIHsgb3B0aW9uOiBvcHRpb24sIGluZGV4OiBpbmRleCB9O1xuXHRcdH0pLmZpbHRlcihmdW5jdGlvbiAob3B0aW9uKSB7XG5cdFx0XHRyZXR1cm4gIW9wdGlvbi5vcHRpb24uZGlzYWJsZWQ7XG5cdFx0fSk7XG5cdFx0dGhpcy5fc2Nyb2xsVG9Gb2N1c2VkT3B0aW9uT25VcGRhdGUgPSB0cnVlO1xuXHRcdGlmICghdGhpcy5zdGF0ZS5pc09wZW4pIHtcblx0XHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0XHRpc09wZW46IHRydWUsXG5cdFx0XHRcdGlucHV0VmFsdWU6ICcnLFxuXHRcdFx0XHRmb2N1c2VkT3B0aW9uOiB0aGlzLl9mb2N1c2VkT3B0aW9uIHx8IChvcHRpb25zLmxlbmd0aCA/IG9wdGlvbnNbZGlyID09PSAnbmV4dCcgPyAwIDogb3B0aW9ucy5sZW5ndGggLSAxXS5vcHRpb24gOiBudWxsKVxuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGlmICghb3B0aW9ucy5sZW5ndGgpIHJldHVybjtcblx0XHR2YXIgZm9jdXNlZEluZGV4ID0gLTE7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBvcHRpb25zLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRpZiAodGhpcy5fZm9jdXNlZE9wdGlvbiA9PT0gb3B0aW9uc1tpXS5vcHRpb24pIHtcblx0XHRcdFx0Zm9jdXNlZEluZGV4ID0gaTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmIChkaXIgPT09ICduZXh0JyAmJiBmb2N1c2VkSW5kZXggIT09IC0xKSB7XG5cdFx0XHRmb2N1c2VkSW5kZXggPSAoZm9jdXNlZEluZGV4ICsgMSkgJSBvcHRpb25zLmxlbmd0aDtcblx0XHR9IGVsc2UgaWYgKGRpciA9PT0gJ3ByZXZpb3VzJykge1xuXHRcdFx0aWYgKGZvY3VzZWRJbmRleCA+IDApIHtcblx0XHRcdFx0Zm9jdXNlZEluZGV4ID0gZm9jdXNlZEluZGV4IC0gMTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvY3VzZWRJbmRleCA9IG9wdGlvbnMubGVuZ3RoIC0gMTtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKGRpciA9PT0gJ3N0YXJ0Jykge1xuXHRcdFx0Zm9jdXNlZEluZGV4ID0gMDtcblx0XHR9IGVsc2UgaWYgKGRpciA9PT0gJ2VuZCcpIHtcblx0XHRcdGZvY3VzZWRJbmRleCA9IG9wdGlvbnMubGVuZ3RoIC0gMTtcblx0XHR9IGVsc2UgaWYgKGRpciA9PT0gJ3BhZ2VfdXAnKSB7XG5cdFx0XHR2YXIgcG90ZW50aWFsSW5kZXggPSBmb2N1c2VkSW5kZXggLSB0aGlzLnByb3BzLnBhZ2VTaXplO1xuXHRcdFx0aWYgKHBvdGVudGlhbEluZGV4IDwgMCkge1xuXHRcdFx0XHRmb2N1c2VkSW5kZXggPSAwO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9jdXNlZEluZGV4ID0gcG90ZW50aWFsSW5kZXg7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChkaXIgPT09ICdwYWdlX2Rvd24nKSB7XG5cdFx0XHR2YXIgcG90ZW50aWFsSW5kZXggPSBmb2N1c2VkSW5kZXggKyB0aGlzLnByb3BzLnBhZ2VTaXplO1xuXHRcdFx0aWYgKHBvdGVudGlhbEluZGV4ID4gb3B0aW9ucy5sZW5ndGggLSAxKSB7XG5cdFx0XHRcdGZvY3VzZWRJbmRleCA9IG9wdGlvbnMubGVuZ3RoIC0gMTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvY3VzZWRJbmRleCA9IHBvdGVudGlhbEluZGV4O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChmb2N1c2VkSW5kZXggPT09IC0xKSB7XG5cdFx0XHRmb2N1c2VkSW5kZXggPSAwO1xuXHRcdH1cblxuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0Zm9jdXNlZEluZGV4OiBvcHRpb25zW2ZvY3VzZWRJbmRleF0uaW5kZXgsXG5cdFx0XHRmb2N1c2VkT3B0aW9uOiBvcHRpb25zW2ZvY3VzZWRJbmRleF0ub3B0aW9uXG5cdFx0fSk7XG5cdH0sXG5cblx0Z2V0Rm9jdXNlZE9wdGlvbjogZnVuY3Rpb24gZ2V0Rm9jdXNlZE9wdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5fZm9jdXNlZE9wdGlvbjtcblx0fSxcblxuXHRnZXRJbnB1dFZhbHVlOiBmdW5jdGlvbiBnZXRJbnB1dFZhbHVlKCkge1xuXHRcdHJldHVybiB0aGlzLnN0YXRlLmlucHV0VmFsdWU7XG5cdH0sXG5cblx0c2VsZWN0Rm9jdXNlZE9wdGlvbjogZnVuY3Rpb24gc2VsZWN0Rm9jdXNlZE9wdGlvbigpIHtcblx0XHRpZiAodGhpcy5fZm9jdXNlZE9wdGlvbikge1xuXHRcdFx0cmV0dXJuIHRoaXMuc2VsZWN0VmFsdWUodGhpcy5fZm9jdXNlZE9wdGlvbik7XG5cdFx0fVxuXHR9LFxuXG5cdHJlbmRlckxvYWRpbmc6IGZ1bmN0aW9uIHJlbmRlckxvYWRpbmcoKSB7XG5cdFx0aWYgKCF0aGlzLnByb3BzLmlzTG9hZGluZykgcmV0dXJuO1xuXHRcdHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0XHRcdCdzcGFuJyxcblx0XHRcdHsgY2xhc3NOYW1lOiAnU2VsZWN0LWxvYWRpbmctem9uZScsICdhcmlhLWhpZGRlbic6ICd0cnVlJyB9LFxuXHRcdFx0X3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCB7IGNsYXNzTmFtZTogJ1NlbGVjdC1sb2FkaW5nJyB9KVxuXHRcdCk7XG5cdH0sXG5cblx0cmVuZGVyVmFsdWU6IGZ1bmN0aW9uIHJlbmRlclZhbHVlKHZhbHVlQXJyYXksIGlzT3Blbikge1xuXHRcdHZhciBfdGhpczQgPSB0aGlzO1xuXG5cdFx0dmFyIHJlbmRlckxhYmVsID0gdGhpcy5wcm9wcy52YWx1ZVJlbmRlcmVyIHx8IHRoaXMuZ2V0T3B0aW9uTGFiZWw7XG5cdFx0dmFyIFZhbHVlQ29tcG9uZW50ID0gdGhpcy5wcm9wcy52YWx1ZUNvbXBvbmVudDtcblx0XHRpZiAoIXZhbHVlQXJyYXkubGVuZ3RoKSB7XG5cdFx0XHRyZXR1cm4gIXRoaXMuc3RhdGUuaW5wdXRWYWx1ZSA/IF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHRcdFx0XHQnZGl2Jyxcblx0XHRcdFx0eyBjbGFzc05hbWU6ICdTZWxlY3QtcGxhY2Vob2xkZXInIH0sXG5cdFx0XHRcdHRoaXMucHJvcHMucGxhY2Vob2xkZXJcblx0XHRcdCkgOiBudWxsO1xuXHRcdH1cblx0XHR2YXIgb25DbGljayA9IHRoaXMucHJvcHMub25WYWx1ZUNsaWNrID8gdGhpcy5oYW5kbGVWYWx1ZUNsaWNrIDogbnVsbDtcblx0XHRpZiAodGhpcy5wcm9wcy5tdWx0aSkge1xuXHRcdFx0cmV0dXJuIHZhbHVlQXJyYXkubWFwKGZ1bmN0aW9uICh2YWx1ZSwgaSkge1xuXHRcdFx0XHRyZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdFx0XHRcdFx0VmFsdWVDb21wb25lbnQsXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0aWQ6IF90aGlzNC5faW5zdGFuY2VQcmVmaXggKyAnLXZhbHVlLScgKyBpLFxuXHRcdFx0XHRcdFx0aW5zdGFuY2VQcmVmaXg6IF90aGlzNC5faW5zdGFuY2VQcmVmaXgsXG5cdFx0XHRcdFx0XHRkaXNhYmxlZDogX3RoaXM0LnByb3BzLmRpc2FibGVkIHx8IHZhbHVlLmNsZWFyYWJsZVZhbHVlID09PSBmYWxzZSxcblx0XHRcdFx0XHRcdGtleTogJ3ZhbHVlLScgKyBpICsgJy0nICsgdmFsdWVbX3RoaXM0LnByb3BzLnZhbHVlS2V5XSxcblx0XHRcdFx0XHRcdG9uQ2xpY2s6IG9uQ2xpY2ssXG5cdFx0XHRcdFx0XHRvblJlbW92ZTogX3RoaXM0LnJlbW92ZVZhbHVlLFxuXHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRyZW5kZXJMYWJlbCh2YWx1ZSwgaSksXG5cdFx0XHRcdFx0X3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdFx0XHRcdFx0XHQnc3BhbicsXG5cdFx0XHRcdFx0XHR7IGNsYXNzTmFtZTogJ1NlbGVjdC1hcmlhLW9ubHknIH0sXG5cdFx0XHRcdFx0XHQnwqAnXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHQpO1xuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIGlmICghdGhpcy5zdGF0ZS5pbnB1dFZhbHVlKSB7XG5cdFx0XHRpZiAoaXNPcGVuKSBvbkNsaWNrID0gbnVsbDtcblx0XHRcdHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0XHRcdFx0VmFsdWVDb21wb25lbnQsXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRpZDogdGhpcy5faW5zdGFuY2VQcmVmaXggKyAnLXZhbHVlLWl0ZW0nLFxuXHRcdFx0XHRcdGRpc2FibGVkOiB0aGlzLnByb3BzLmRpc2FibGVkLFxuXHRcdFx0XHRcdGluc3RhbmNlUHJlZml4OiB0aGlzLl9pbnN0YW5jZVByZWZpeCxcblx0XHRcdFx0XHRvbkNsaWNrOiBvbkNsaWNrLFxuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZUFycmF5WzBdXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHJlbmRlckxhYmVsKHZhbHVlQXJyYXlbMF0pXG5cdFx0XHQpO1xuXHRcdH1cblx0fSxcblxuXHRyZW5kZXJJbnB1dDogZnVuY3Rpb24gcmVuZGVySW5wdXQodmFsdWVBcnJheSwgZm9jdXNlZE9wdGlvbkluZGV4KSB7XG5cdFx0dmFyIF9jbGFzc05hbWVzLFxuXHRcdCAgICBfdGhpczUgPSB0aGlzO1xuXG5cdFx0dmFyIGNsYXNzTmFtZSA9ICgwLCBfY2xhc3NuYW1lczJbJ2RlZmF1bHQnXSkoJ1NlbGVjdC1pbnB1dCcsIHRoaXMucHJvcHMuaW5wdXRQcm9wcy5jbGFzc05hbWUpO1xuXHRcdHZhciBpc09wZW4gPSAhIXRoaXMuc3RhdGUuaXNPcGVuO1xuXG5cdFx0dmFyIGFyaWFPd25zID0gKDAsIF9jbGFzc25hbWVzMlsnZGVmYXVsdCddKSgoX2NsYXNzTmFtZXMgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc05hbWVzLCB0aGlzLl9pbnN0YW5jZVByZWZpeCArICctbGlzdCcsIGlzT3BlbiksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NOYW1lcywgdGhpcy5faW5zdGFuY2VQcmVmaXggKyAnLWJhY2tzcGFjZS1yZW1vdmUtbWVzc2FnZScsIHRoaXMucHJvcHMubXVsdGkgJiYgIXRoaXMucHJvcHMuZGlzYWJsZWQgJiYgdGhpcy5zdGF0ZS5pc0ZvY3VzZWQgJiYgIXRoaXMuc3RhdGUuaW5wdXRWYWx1ZSksIF9jbGFzc05hbWVzKSk7XG5cblx0XHQvLyBUT0RPOiBDaGVjayBob3cgdGhpcyBwcm9qZWN0IGluY2x1ZGVzIE9iamVjdC5hc3NpZ24oKVxuXHRcdHZhciBpbnB1dFByb3BzID0gX2V4dGVuZHMoe30sIHRoaXMucHJvcHMuaW5wdXRQcm9wcywge1xuXHRcdFx0cm9sZTogJ2NvbWJvYm94Jyxcblx0XHRcdCdhcmlhLWV4cGFuZGVkJzogJycgKyBpc09wZW4sXG5cdFx0XHQnYXJpYS1vd25zJzogYXJpYU93bnMsXG5cdFx0XHQnYXJpYS1oYXNwb3B1cCc6ICcnICsgaXNPcGVuLFxuXHRcdFx0J2FyaWEtYWN0aXZlZGVzY2VuZGFudCc6IGlzT3BlbiA/IHRoaXMuX2luc3RhbmNlUHJlZml4ICsgJy1vcHRpb24tJyArIGZvY3VzZWRPcHRpb25JbmRleCA6IHRoaXMuX2luc3RhbmNlUHJlZml4ICsgJy12YWx1ZScsXG5cdFx0XHQnYXJpYS1kZXNjcmliZWRieSc6IHRoaXMucHJvcHNbJ2FyaWEtZGVzY3JpYmVkYnknXSxcblx0XHRcdCdhcmlhLWxhYmVsbGVkYnknOiB0aGlzLnByb3BzWydhcmlhLWxhYmVsbGVkYnknXSxcblx0XHRcdCdhcmlhLWxhYmVsJzogdGhpcy5wcm9wc1snYXJpYS1sYWJlbCddLFxuXHRcdFx0Y2xhc3NOYW1lOiBjbGFzc05hbWUsXG5cdFx0XHR0YWJJbmRleDogdGhpcy5wcm9wcy50YWJJbmRleCxcblx0XHRcdG9uQmx1cjogdGhpcy5oYW5kbGVJbnB1dEJsdXIsXG5cdFx0XHRvbkNoYW5nZTogdGhpcy5oYW5kbGVJbnB1dENoYW5nZSxcblx0XHRcdG9uRm9jdXM6IHRoaXMuaGFuZGxlSW5wdXRGb2N1cyxcblx0XHRcdHJlZjogZnVuY3Rpb24gcmVmKF9yZWYpIHtcblx0XHRcdFx0cmV0dXJuIF90aGlzNS5pbnB1dCA9IF9yZWY7XG5cdFx0XHR9LFxuXHRcdFx0cmVxdWlyZWQ6IHRoaXMuc3RhdGUucmVxdWlyZWQsXG5cdFx0XHR2YWx1ZTogdGhpcy5zdGF0ZS5pbnB1dFZhbHVlXG5cdFx0fSk7XG5cblx0XHRpZiAodGhpcy5wcm9wcy5pbnB1dFJlbmRlcmVyKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wcm9wcy5pbnB1dFJlbmRlcmVyKGlucHV0UHJvcHMpO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLnByb3BzLmRpc2FibGVkIHx8ICF0aGlzLnByb3BzLnNlYXJjaGFibGUpIHtcblx0XHRcdHZhciBfcHJvcHMkaW5wdXRQcm9wcyA9IHRoaXMucHJvcHMuaW5wdXRQcm9wcztcblx0XHRcdHZhciBpbnB1dENsYXNzTmFtZSA9IF9wcm9wcyRpbnB1dFByb3BzLmlucHV0Q2xhc3NOYW1lO1xuXG5cdFx0XHR2YXIgZGl2UHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzJGlucHV0UHJvcHMsIFsnaW5wdXRDbGFzc05hbWUnXSk7XG5cblx0XHRcdHZhciBfYXJpYU93bnMgPSAoMCwgX2NsYXNzbmFtZXMyWydkZWZhdWx0J10pKF9kZWZpbmVQcm9wZXJ0eSh7fSwgdGhpcy5faW5zdGFuY2VQcmVmaXggKyAnLWxpc3QnLCBpc09wZW4pKTtcblxuXHRcdFx0cmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdkaXYnLCBfZXh0ZW5kcyh7fSwgZGl2UHJvcHMsIHtcblx0XHRcdFx0cm9sZTogJ2NvbWJvYm94Jyxcblx0XHRcdFx0J2FyaWEtZXhwYW5kZWQnOiBpc09wZW4sXG5cdFx0XHRcdCdhcmlhLW93bnMnOiBfYXJpYU93bnMsXG5cdFx0XHRcdCdhcmlhLWFjdGl2ZWRlc2NlbmRhbnQnOiBpc09wZW4gPyB0aGlzLl9pbnN0YW5jZVByZWZpeCArICctb3B0aW9uLScgKyBmb2N1c2VkT3B0aW9uSW5kZXggOiB0aGlzLl9pbnN0YW5jZVByZWZpeCArICctdmFsdWUnLFxuXHRcdFx0XHRjbGFzc05hbWU6IGNsYXNzTmFtZSxcblx0XHRcdFx0dGFiSW5kZXg6IHRoaXMucHJvcHMudGFiSW5kZXggfHwgMCxcblx0XHRcdFx0b25CbHVyOiB0aGlzLmhhbmRsZUlucHV0Qmx1cixcblx0XHRcdFx0b25Gb2N1czogdGhpcy5oYW5kbGVJbnB1dEZvY3VzLFxuXHRcdFx0XHRyZWY6IGZ1bmN0aW9uIChyZWYpIHtcblx0XHRcdFx0XHRyZXR1cm4gX3RoaXM1LmlucHV0ID0gcmVmO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHQnYXJpYS1yZWFkb25seSc6ICcnICsgISF0aGlzLnByb3BzLmRpc2FibGVkLFxuXHRcdFx0XHRzdHlsZTogeyBib3JkZXI6IDAsIHdpZHRoOiAxLCBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyB9IH0pKTtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5wcm9wcy5hdXRvc2l6ZSkge1xuXHRcdFx0cmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KF9yZWFjdElucHV0QXV0b3NpemUyWydkZWZhdWx0J10sIF9leHRlbmRzKHt9LCBpbnB1dFByb3BzLCB7IG1pbldpZHRoOiAnNScgfSkpO1xuXHRcdH1cblx0XHRyZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdFx0XHQnZGl2Jyxcblx0XHRcdHsgY2xhc3NOYW1lOiBjbGFzc05hbWUgfSxcblx0XHRcdF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdpbnB1dCcsIGlucHV0UHJvcHMpXG5cdFx0KTtcblx0fSxcblxuXHRyZW5kZXJDbGVhcjogZnVuY3Rpb24gcmVuZGVyQ2xlYXIoKSB7XG5cblx0XHRpZiAoIXRoaXMucHJvcHMuY2xlYXJhYmxlIHx8IHRoaXMucHJvcHMudmFsdWUgPT09IHVuZGVmaW5lZCB8fCB0aGlzLnByb3BzLnZhbHVlID09PSBudWxsIHx8IHRoaXMucHJvcHMubXVsdGkgJiYgIXRoaXMucHJvcHMudmFsdWUubGVuZ3RoIHx8IHRoaXMucHJvcHMuZGlzYWJsZWQgfHwgdGhpcy5wcm9wcy5pc0xvYWRpbmcpIHJldHVybjtcblx0XHR2YXIgY2xlYXIgPSB0aGlzLnByb3BzLmNsZWFyUmVuZGVyZXIoKTtcblxuXHRcdHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0XHRcdCdzcGFuJyxcblx0XHRcdHsgY2xhc3NOYW1lOiAnU2VsZWN0LWNsZWFyLXpvbmUnLCB0aXRsZTogdGhpcy5wcm9wcy5tdWx0aSA/IHRoaXMucHJvcHMuY2xlYXJBbGxUZXh0IDogdGhpcy5wcm9wcy5jbGVhclZhbHVlVGV4dCxcblx0XHRcdFx0J2FyaWEtbGFiZWwnOiB0aGlzLnByb3BzLm11bHRpID8gdGhpcy5wcm9wcy5jbGVhckFsbFRleHQgOiB0aGlzLnByb3BzLmNsZWFyVmFsdWVUZXh0LFxuXHRcdFx0XHRvbk1vdXNlRG93bjogdGhpcy5jbGVhclZhbHVlLFxuXHRcdFx0XHRvblRvdWNoU3RhcnQ6IHRoaXMuaGFuZGxlVG91Y2hTdGFydCxcblx0XHRcdFx0b25Ub3VjaE1vdmU6IHRoaXMuaGFuZGxlVG91Y2hNb3ZlLFxuXHRcdFx0XHRvblRvdWNoRW5kOiB0aGlzLmhhbmRsZVRvdWNoRW5kQ2xlYXJWYWx1ZVxuXHRcdFx0fSxcblx0XHRcdGNsZWFyXG5cdFx0KTtcblx0fSxcblxuXHRyZW5kZXJBcnJvdzogZnVuY3Rpb24gcmVuZGVyQXJyb3coKSB7XG5cdFx0dmFyIG9uTW91c2VEb3duID0gdGhpcy5oYW5kbGVNb3VzZURvd25PbkFycm93O1xuXHRcdHZhciBpc09wZW4gPSB0aGlzLnN0YXRlLmlzT3Blbjtcblx0XHR2YXIgYXJyb3cgPSB0aGlzLnByb3BzLmFycm93UmVuZGVyZXIoeyBvbk1vdXNlRG93bjogb25Nb3VzZURvd24sIGlzT3BlbjogaXNPcGVuIH0pO1xuXG5cdFx0cmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHRcdFx0J3NwYW4nLFxuXHRcdFx0e1xuXHRcdFx0XHRjbGFzc05hbWU6ICdTZWxlY3QtYXJyb3ctem9uZScsXG5cdFx0XHRcdG9uTW91c2VEb3duOiBvbk1vdXNlRG93blxuXHRcdFx0fSxcblx0XHRcdGFycm93XG5cdFx0KTtcblx0fSxcblxuXHRmaWx0ZXJPcHRpb25zOiBmdW5jdGlvbiBmaWx0ZXJPcHRpb25zKGV4Y2x1ZGVPcHRpb25zKSB7XG5cdFx0dmFyIGZpbHRlclZhbHVlID0gdGhpcy5zdGF0ZS5pbnB1dFZhbHVlO1xuXHRcdHZhciBvcHRpb25zID0gdGhpcy5wcm9wcy5vcHRpb25zIHx8IFtdO1xuXHRcdGlmICh0aGlzLnByb3BzLmZpbHRlck9wdGlvbnMpIHtcblx0XHRcdC8vIE1haW50YWluIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHdpdGggYm9vbGVhbiBhdHRyaWJ1dGVcblx0XHRcdHZhciBmaWx0ZXJPcHRpb25zID0gdHlwZW9mIHRoaXMucHJvcHMuZmlsdGVyT3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMucHJvcHMuZmlsdGVyT3B0aW9ucyA6IF91dGlsc0RlZmF1bHRGaWx0ZXJPcHRpb25zMlsnZGVmYXVsdCddO1xuXG5cdFx0XHRyZXR1cm4gZmlsdGVyT3B0aW9ucyhvcHRpb25zLCBmaWx0ZXJWYWx1ZSwgZXhjbHVkZU9wdGlvbnMsIHtcblx0XHRcdFx0ZmlsdGVyT3B0aW9uOiB0aGlzLnByb3BzLmZpbHRlck9wdGlvbixcblx0XHRcdFx0aWdub3JlQWNjZW50czogdGhpcy5wcm9wcy5pZ25vcmVBY2NlbnRzLFxuXHRcdFx0XHRpZ25vcmVDYXNlOiB0aGlzLnByb3BzLmlnbm9yZUNhc2UsXG5cdFx0XHRcdGxhYmVsS2V5OiB0aGlzLnByb3BzLmxhYmVsS2V5LFxuXHRcdFx0XHRtYXRjaFBvczogdGhpcy5wcm9wcy5tYXRjaFBvcyxcblx0XHRcdFx0bWF0Y2hQcm9wOiB0aGlzLnByb3BzLm1hdGNoUHJvcCxcblx0XHRcdFx0dmFsdWVLZXk6IHRoaXMucHJvcHMudmFsdWVLZXlcblx0XHRcdH0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gb3B0aW9ucztcblx0XHR9XG5cdH0sXG5cblx0b25PcHRpb25SZWY6IGZ1bmN0aW9uIG9uT3B0aW9uUmVmKHJlZiwgaXNGb2N1c2VkKSB7XG5cdFx0aWYgKGlzRm9jdXNlZCkge1xuXHRcdFx0dGhpcy5mb2N1c2VkID0gcmVmO1xuXHRcdH1cblx0fSxcblxuXHRyZW5kZXJNZW51OiBmdW5jdGlvbiByZW5kZXJNZW51KG9wdGlvbnMsIHZhbHVlQXJyYXksIGZvY3VzZWRPcHRpb24pIHtcblx0XHRpZiAob3B0aW9ucyAmJiBvcHRpb25zLmxlbmd0aCkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHJvcHMubWVudVJlbmRlcmVyKHtcblx0XHRcdFx0Zm9jdXNlZE9wdGlvbjogZm9jdXNlZE9wdGlvbixcblx0XHRcdFx0Zm9jdXNPcHRpb246IHRoaXMuZm9jdXNPcHRpb24sXG5cdFx0XHRcdGluc3RhbmNlUHJlZml4OiB0aGlzLl9pbnN0YW5jZVByZWZpeCxcblx0XHRcdFx0bGFiZWxLZXk6IHRoaXMucHJvcHMubGFiZWxLZXksXG5cdFx0XHRcdG9uRm9jdXM6IHRoaXMuZm9jdXNPcHRpb24sXG5cdFx0XHRcdG9uU2VsZWN0OiB0aGlzLnNlbGVjdFZhbHVlLFxuXHRcdFx0XHRvcHRpb25DbGFzc05hbWU6IHRoaXMucHJvcHMub3B0aW9uQ2xhc3NOYW1lLFxuXHRcdFx0XHRvcHRpb25Db21wb25lbnQ6IHRoaXMucHJvcHMub3B0aW9uQ29tcG9uZW50LFxuXHRcdFx0XHRvcHRpb25SZW5kZXJlcjogdGhpcy5wcm9wcy5vcHRpb25SZW5kZXJlciB8fCB0aGlzLmdldE9wdGlvbkxhYmVsLFxuXHRcdFx0XHRvcHRpb25zOiBvcHRpb25zLFxuXHRcdFx0XHRzZWxlY3RWYWx1ZTogdGhpcy5zZWxlY3RWYWx1ZSxcblx0XHRcdFx0dmFsdWVBcnJheTogdmFsdWVBcnJheSxcblx0XHRcdFx0dmFsdWVLZXk6IHRoaXMucHJvcHMudmFsdWVLZXksXG5cdFx0XHRcdG9uT3B0aW9uUmVmOiB0aGlzLm9uT3B0aW9uUmVmXG5cdFx0XHR9KTtcblx0XHR9IGVsc2UgaWYgKHRoaXMucHJvcHMubm9SZXN1bHRzVGV4dCkge1xuXHRcdFx0cmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHRcdFx0XHQnZGl2Jyxcblx0XHRcdFx0eyBjbGFzc05hbWU6ICdTZWxlY3Qtbm9yZXN1bHRzJyB9LFxuXHRcdFx0XHR0aGlzLnByb3BzLm5vUmVzdWx0c1RleHRcblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblx0fSxcblxuXHRyZW5kZXJIaWRkZW5GaWVsZDogZnVuY3Rpb24gcmVuZGVySGlkZGVuRmllbGQodmFsdWVBcnJheSkge1xuXHRcdHZhciBfdGhpczYgPSB0aGlzO1xuXG5cdFx0aWYgKCF0aGlzLnByb3BzLm5hbWUpIHJldHVybjtcblx0XHRpZiAodGhpcy5wcm9wcy5qb2luVmFsdWVzKSB7XG5cdFx0XHR2YXIgdmFsdWUgPSB2YWx1ZUFycmF5Lm1hcChmdW5jdGlvbiAoaSkge1xuXHRcdFx0XHRyZXR1cm4gc3RyaW5naWZ5VmFsdWUoaVtfdGhpczYucHJvcHMudmFsdWVLZXldKTtcblx0XHRcdH0pLmpvaW4odGhpcy5wcm9wcy5kZWxpbWl0ZXIpO1xuXHRcdFx0cmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdpbnB1dCcsIHtcblx0XHRcdFx0dHlwZTogJ2hpZGRlbicsXG5cdFx0XHRcdHJlZjogZnVuY3Rpb24gKHJlZikge1xuXHRcdFx0XHRcdHJldHVybiBfdGhpczYudmFsdWUgPSByZWY7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdG5hbWU6IHRoaXMucHJvcHMubmFtZSxcblx0XHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0XHRkaXNhYmxlZDogdGhpcy5wcm9wcy5kaXNhYmxlZCB9KTtcblx0XHR9XG5cdFx0cmV0dXJuIHZhbHVlQXJyYXkubWFwKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuXHRcdFx0cmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdpbnB1dCcsIHsga2V5OiAnaGlkZGVuLicgKyBpbmRleCxcblx0XHRcdFx0dHlwZTogJ2hpZGRlbicsXG5cdFx0XHRcdHJlZjogJ3ZhbHVlJyArIGluZGV4LFxuXHRcdFx0XHRuYW1lOiBfdGhpczYucHJvcHMubmFtZSxcblx0XHRcdFx0dmFsdWU6IHN0cmluZ2lmeVZhbHVlKGl0ZW1bX3RoaXM2LnByb3BzLnZhbHVlS2V5XSksXG5cdFx0XHRcdGRpc2FibGVkOiBfdGhpczYucHJvcHMuZGlzYWJsZWQgfSk7XG5cdFx0fSk7XG5cdH0sXG5cblx0Z2V0Rm9jdXNhYmxlT3B0aW9uSW5kZXg6IGZ1bmN0aW9uIGdldEZvY3VzYWJsZU9wdGlvbkluZGV4KHNlbGVjdGVkT3B0aW9uKSB7XG5cdFx0dmFyIG9wdGlvbnMgPSB0aGlzLl92aXNpYmxlT3B0aW9ucztcblx0XHRpZiAoIW9wdGlvbnMubGVuZ3RoKSByZXR1cm4gbnVsbDtcblxuXHRcdHZhciB2YWx1ZUtleSA9IHRoaXMucHJvcHMudmFsdWVLZXk7XG5cdFx0dmFyIGZvY3VzZWRPcHRpb24gPSB0aGlzLnN0YXRlLmZvY3VzZWRPcHRpb24gfHwgc2VsZWN0ZWRPcHRpb247XG5cdFx0aWYgKGZvY3VzZWRPcHRpb24gJiYgIWZvY3VzZWRPcHRpb24uZGlzYWJsZWQpIHtcblx0XHRcdHZhciBmb2N1c2VkT3B0aW9uSW5kZXggPSAtMTtcblx0XHRcdG9wdGlvbnMuc29tZShmdW5jdGlvbiAob3B0aW9uLCBpbmRleCkge1xuXHRcdFx0XHR2YXIgaXNPcHRpb25FcXVhbCA9IG9wdGlvblt2YWx1ZUtleV0gPT09IGZvY3VzZWRPcHRpb25bdmFsdWVLZXldO1xuXHRcdFx0XHRpZiAoaXNPcHRpb25FcXVhbCkge1xuXHRcdFx0XHRcdGZvY3VzZWRPcHRpb25JbmRleCA9IGluZGV4O1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBpc09wdGlvbkVxdWFsO1xuXHRcdFx0fSk7XG5cdFx0XHRpZiAoZm9jdXNlZE9wdGlvbkluZGV4ICE9PSAtMSkge1xuXHRcdFx0XHRyZXR1cm4gZm9jdXNlZE9wdGlvbkluZGV4O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgb3B0aW9ucy5sZW5ndGg7IGkrKykge1xuXHRcdFx0aWYgKCFvcHRpb25zW2ldLmRpc2FibGVkKSByZXR1cm4gaTtcblx0XHR9XG5cdFx0cmV0dXJuIG51bGw7XG5cdH0sXG5cblx0cmVuZGVyT3V0ZXI6IGZ1bmN0aW9uIHJlbmRlck91dGVyKG9wdGlvbnMsIHZhbHVlQXJyYXksIGZvY3VzZWRPcHRpb24pIHtcblx0XHR2YXIgX3RoaXM3ID0gdGhpcztcblxuXHRcdHZhciBtZW51ID0gdGhpcy5yZW5kZXJNZW51KG9wdGlvbnMsIHZhbHVlQXJyYXksIGZvY3VzZWRPcHRpb24pO1xuXHRcdGlmICghbWVudSkge1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHRcdFx0J2RpdicsXG5cdFx0XHR7IHJlZjogZnVuY3Rpb24gKHJlZikge1xuXHRcdFx0XHRcdHJldHVybiBfdGhpczcubWVudUNvbnRhaW5lciA9IHJlZjtcblx0XHRcdFx0fSwgY2xhc3NOYW1lOiAnU2VsZWN0LW1lbnUtb3V0ZXInLCBzdHlsZTogdGhpcy5wcm9wcy5tZW51Q29udGFpbmVyU3R5bGUgfSxcblx0XHRcdF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHRcdFx0XHQnZGl2Jyxcblx0XHRcdFx0eyByZWY6IGZ1bmN0aW9uIChyZWYpIHtcblx0XHRcdFx0XHRcdHJldHVybiBfdGhpczcubWVudSA9IHJlZjtcblx0XHRcdFx0XHR9LCByb2xlOiAnbGlzdGJveCcsIGNsYXNzTmFtZTogJ1NlbGVjdC1tZW51JywgaWQ6IHRoaXMuX2luc3RhbmNlUHJlZml4ICsgJy1saXN0Jyxcblx0XHRcdFx0XHRzdHlsZTogdGhpcy5wcm9wcy5tZW51U3R5bGUsXG5cdFx0XHRcdFx0b25TY3JvbGw6IHRoaXMuaGFuZGxlTWVudVNjcm9sbCxcblx0XHRcdFx0XHRvbk1vdXNlRG93bjogdGhpcy5oYW5kbGVNb3VzZURvd25Pbk1lbnUgfSxcblx0XHRcdFx0bWVudVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0cmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG5cdFx0dmFyIF90aGlzOCA9IHRoaXM7XG5cblx0XHR2YXIgdmFsdWVBcnJheSA9IHRoaXMuZ2V0VmFsdWVBcnJheSh0aGlzLnByb3BzLnZhbHVlKTtcblx0XHR2YXIgb3B0aW9ucyA9IHRoaXMuX3Zpc2libGVPcHRpb25zID0gdGhpcy5maWx0ZXJPcHRpb25zKHRoaXMucHJvcHMubXVsdGkgPyB0aGlzLmdldFZhbHVlQXJyYXkodGhpcy5wcm9wcy52YWx1ZSkgOiBudWxsKTtcblx0XHR2YXIgaXNPcGVuID0gdGhpcy5zdGF0ZS5pc09wZW47XG5cdFx0aWYgKHRoaXMucHJvcHMubXVsdGkgJiYgIW9wdGlvbnMubGVuZ3RoICYmIHZhbHVlQXJyYXkubGVuZ3RoICYmICF0aGlzLnN0YXRlLmlucHV0VmFsdWUpIGlzT3BlbiA9IGZhbHNlO1xuXHRcdHZhciBmb2N1c2VkT3B0aW9uSW5kZXggPSB0aGlzLmdldEZvY3VzYWJsZU9wdGlvbkluZGV4KHZhbHVlQXJyYXlbMF0pO1xuXG5cdFx0dmFyIGZvY3VzZWRPcHRpb24gPSBudWxsO1xuXHRcdGlmIChmb2N1c2VkT3B0aW9uSW5kZXggIT09IG51bGwpIHtcblx0XHRcdGZvY3VzZWRPcHRpb24gPSB0aGlzLl9mb2N1c2VkT3B0aW9uID0gb3B0aW9uc1tmb2N1c2VkT3B0aW9uSW5kZXhdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb2N1c2VkT3B0aW9uID0gdGhpcy5fZm9jdXNlZE9wdGlvbiA9IG51bGw7XG5cdFx0fVxuXHRcdHZhciBjbGFzc05hbWUgPSAoMCwgX2NsYXNzbmFtZXMyWydkZWZhdWx0J10pKCdTZWxlY3QnLCB0aGlzLnByb3BzLmNsYXNzTmFtZSwge1xuXHRcdFx0J1NlbGVjdC0tbXVsdGknOiB0aGlzLnByb3BzLm11bHRpLFxuXHRcdFx0J1NlbGVjdC0tc2luZ2xlJzogIXRoaXMucHJvcHMubXVsdGksXG5cdFx0XHQnaXMtY2xlYXJhYmxlJzogdGhpcy5wcm9wcy5jbGVhcmFibGUsXG5cdFx0XHQnaXMtZGlzYWJsZWQnOiB0aGlzLnByb3BzLmRpc2FibGVkLFxuXHRcdFx0J2lzLWZvY3VzZWQnOiB0aGlzLnN0YXRlLmlzRm9jdXNlZCxcblx0XHRcdCdpcy1sb2FkaW5nJzogdGhpcy5wcm9wcy5pc0xvYWRpbmcsXG5cdFx0XHQnaXMtb3Blbic6IGlzT3Blbixcblx0XHRcdCdpcy1wc2V1ZG8tZm9jdXNlZCc6IHRoaXMuc3RhdGUuaXNQc2V1ZG9Gb2N1c2VkLFxuXHRcdFx0J2lzLXNlYXJjaGFibGUnOiB0aGlzLnByb3BzLnNlYXJjaGFibGUsXG5cdFx0XHQnaGFzLXZhbHVlJzogdmFsdWVBcnJheS5sZW5ndGhcblx0XHR9KTtcblxuXHRcdHZhciByZW1vdmVNZXNzYWdlID0gbnVsbDtcblx0XHRpZiAodGhpcy5wcm9wcy5tdWx0aSAmJiAhdGhpcy5wcm9wcy5kaXNhYmxlZCAmJiB2YWx1ZUFycmF5Lmxlbmd0aCAmJiAhdGhpcy5zdGF0ZS5pbnB1dFZhbHVlICYmIHRoaXMuc3RhdGUuaXNGb2N1c2VkICYmIHRoaXMucHJvcHMuYmFja3NwYWNlUmVtb3Zlcykge1xuXHRcdFx0cmVtb3ZlTWVzc2FnZSA9IF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHRcdFx0XHQnc3BhbicsXG5cdFx0XHRcdHsgaWQ6IHRoaXMuX2luc3RhbmNlUHJlZml4ICsgJy1iYWNrc3BhY2UtcmVtb3ZlLW1lc3NhZ2UnLCBjbGFzc05hbWU6ICdTZWxlY3QtYXJpYS1vbmx5JywgJ2FyaWEtbGl2ZSc6ICdhc3NlcnRpdmUnIH0sXG5cdFx0XHRcdHRoaXMucHJvcHMuYmFja3NwYWNlVG9SZW1vdmVNZXNzYWdlLnJlcGxhY2UoJ3tsYWJlbH0nLCB2YWx1ZUFycmF5W3ZhbHVlQXJyYXkubGVuZ3RoIC0gMV1bdGhpcy5wcm9wcy5sYWJlbEtleV0pXG5cdFx0XHQpO1xuXHRcdH1cblxuXHRcdHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0XHRcdCdkaXYnLFxuXHRcdFx0eyByZWY6IGZ1bmN0aW9uIChyZWYpIHtcblx0XHRcdFx0XHRyZXR1cm4gX3RoaXM4LndyYXBwZXIgPSByZWY7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuXHRcdFx0XHRzdHlsZTogdGhpcy5wcm9wcy53cmFwcGVyU3R5bGUgfSxcblx0XHRcdHRoaXMucmVuZGVySGlkZGVuRmllbGQodmFsdWVBcnJheSksXG5cdFx0XHRfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0XHRcdFx0J2RpdicsXG5cdFx0XHRcdHsgcmVmOiBmdW5jdGlvbiAocmVmKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gX3RoaXM4LmNvbnRyb2wgPSByZWY7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRjbGFzc05hbWU6ICdTZWxlY3QtY29udHJvbCcsXG5cdFx0XHRcdFx0c3R5bGU6IHRoaXMucHJvcHMuc3R5bGUsXG5cdFx0XHRcdFx0b25LZXlEb3duOiB0aGlzLmhhbmRsZUtleURvd24sXG5cdFx0XHRcdFx0b25Nb3VzZURvd246IHRoaXMuaGFuZGxlTW91c2VEb3duLFxuXHRcdFx0XHRcdG9uVG91Y2hFbmQ6IHRoaXMuaGFuZGxlVG91Y2hFbmQsXG5cdFx0XHRcdFx0b25Ub3VjaFN0YXJ0OiB0aGlzLmhhbmRsZVRvdWNoU3RhcnQsXG5cdFx0XHRcdFx0b25Ub3VjaE1vdmU6IHRoaXMuaGFuZGxlVG91Y2hNb3ZlXG5cdFx0XHRcdH0sXG5cdFx0XHRcdF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHRcdFx0XHRcdCdzcGFuJyxcblx0XHRcdFx0XHR7IGNsYXNzTmFtZTogJ1NlbGVjdC1tdWx0aS12YWx1ZS13cmFwcGVyJywgaWQ6IHRoaXMuX2luc3RhbmNlUHJlZml4ICsgJy12YWx1ZScgfSxcblx0XHRcdFx0XHR0aGlzLnJlbmRlclZhbHVlKHZhbHVlQXJyYXksIGlzT3BlbiksXG5cdFx0XHRcdFx0dGhpcy5yZW5kZXJJbnB1dCh2YWx1ZUFycmF5LCBmb2N1c2VkT3B0aW9uSW5kZXgpXG5cdFx0XHRcdCksXG5cdFx0XHRcdHJlbW92ZU1lc3NhZ2UsXG5cdFx0XHRcdHRoaXMucmVuZGVyTG9hZGluZygpLFxuXHRcdFx0XHR0aGlzLnJlbmRlckNsZWFyKCksXG5cdFx0XHRcdHRoaXMucmVuZGVyQXJyb3coKVxuXHRcdFx0KSxcblx0XHRcdGlzT3BlbiA/IHRoaXMucmVuZGVyT3V0ZXIob3B0aW9ucywgIXRoaXMucHJvcHMubXVsdGkgPyB2YWx1ZUFycmF5IDogbnVsbCwgZm9jdXNlZE9wdGlvbikgOiBudWxsXG5cdFx0KTtcblx0fVxuXG59KTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gU2VsZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1zZWxlY3QvbGliL1NlbGVjdC5qcyIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfY3JlYXRlUmVhY3RDbGFzcyA9IHJlcXVpcmUoJ2NyZWF0ZS1yZWFjdC1jbGFzcycpO1xuXG52YXIgX2NyZWF0ZVJlYWN0Q2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlUmVhY3RDbGFzcyk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSByZXF1aXJlKCdjbGFzc25hbWVzJyk7XG5cbnZhciBfY2xhc3NuYW1lczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc25hbWVzKTtcblxudmFyIFZhbHVlID0gKDAsIF9jcmVhdGVSZWFjdENsYXNzMlsnZGVmYXVsdCddKSh7XG5cblx0ZGlzcGxheU5hbWU6ICdWYWx1ZScsXG5cblx0cHJvcFR5cGVzOiB7XG5cdFx0Y2hpbGRyZW46IF9wcm9wVHlwZXMyWydkZWZhdWx0J10ubm9kZSxcblx0XHRkaXNhYmxlZDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLCAvLyBkaXNhYmxlZCBwcm9wIHBhc3NlZCB0byBSZWFjdFNlbGVjdFxuXHRcdGlkOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnN0cmluZywgLy8gVW5pcXVlIGlkIGZvciB0aGUgdmFsdWUgLSB1c2VkIGZvciBhcmlhXG5cdFx0b25DbGljazogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLCAvLyBtZXRob2QgdG8gaGFuZGxlIGNsaWNrIG9uIHZhbHVlIGxhYmVsXG5cdFx0b25SZW1vdmU6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYywgLy8gbWV0aG9kIHRvIGhhbmRsZSByZW1vdmFsIG9mIHRoZSB2YWx1ZVxuXHRcdHZhbHVlOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm9iamVjdC5pc1JlcXVpcmVkIH0sXG5cblx0Ly8gdGhlIG9wdGlvbiBvYmplY3QgZm9yIHRoaXMgdmFsdWVcblx0aGFuZGxlTW91c2VEb3duOiBmdW5jdGlvbiBoYW5kbGVNb3VzZURvd24oZXZlbnQpIHtcblx0XHRpZiAoZXZlbnQudHlwZSA9PT0gJ21vdXNlZG93bicgJiYgZXZlbnQuYnV0dG9uICE9PSAwKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGlmICh0aGlzLnByb3BzLm9uQ2xpY2spIHtcblx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0dGhpcy5wcm9wcy5vbkNsaWNrKHRoaXMucHJvcHMudmFsdWUsIGV2ZW50KTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0aWYgKHRoaXMucHJvcHMudmFsdWUuaHJlZikge1xuXHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXG5cdG9uUmVtb3ZlOiBmdW5jdGlvbiBvblJlbW92ZShldmVudCkge1xuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0dGhpcy5wcm9wcy5vblJlbW92ZSh0aGlzLnByb3BzLnZhbHVlKTtcblx0fSxcblxuXHRoYW5kbGVUb3VjaEVuZFJlbW92ZTogZnVuY3Rpb24gaGFuZGxlVG91Y2hFbmRSZW1vdmUoZXZlbnQpIHtcblx0XHQvLyBDaGVjayBpZiB0aGUgdmlldyBpcyBiZWluZyBkcmFnZ2VkLCBJbiB0aGlzIGNhc2Vcblx0XHQvLyB3ZSBkb24ndCB3YW50IHRvIGZpcmUgdGhlIGNsaWNrIGV2ZW50IChiZWNhdXNlIHRoZSB1c2VyIG9ubHkgd2FudHMgdG8gc2Nyb2xsKVxuXHRcdGlmICh0aGlzLmRyYWdnaW5nKSByZXR1cm47XG5cblx0XHQvLyBGaXJlIHRoZSBtb3VzZSBldmVudHNcblx0XHR0aGlzLm9uUmVtb3ZlKGV2ZW50KTtcblx0fSxcblxuXHRoYW5kbGVUb3VjaE1vdmU6IGZ1bmN0aW9uIGhhbmRsZVRvdWNoTW92ZShldmVudCkge1xuXHRcdC8vIFNldCBhIGZsYWcgdGhhdCB0aGUgdmlldyBpcyBiZWluZyBkcmFnZ2VkXG5cdFx0dGhpcy5kcmFnZ2luZyA9IHRydWU7XG5cdH0sXG5cblx0aGFuZGxlVG91Y2hTdGFydDogZnVuY3Rpb24gaGFuZGxlVG91Y2hTdGFydChldmVudCkge1xuXHRcdC8vIFNldCBhIGZsYWcgdGhhdCB0aGUgdmlldyBpcyBub3QgYmVpbmcgZHJhZ2dlZFxuXHRcdHRoaXMuZHJhZ2dpbmcgPSBmYWxzZTtcblx0fSxcblxuXHRyZW5kZXJSZW1vdmVJY29uOiBmdW5jdGlvbiByZW5kZXJSZW1vdmVJY29uKCkge1xuXHRcdGlmICh0aGlzLnByb3BzLmRpc2FibGVkIHx8ICF0aGlzLnByb3BzLm9uUmVtb3ZlKSByZXR1cm47XG5cdFx0cmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuXHRcdFx0J3NwYW4nLFxuXHRcdFx0eyBjbGFzc05hbWU6ICdTZWxlY3QtdmFsdWUtaWNvbicsXG5cdFx0XHRcdCdhcmlhLWhpZGRlbic6ICd0cnVlJyxcblx0XHRcdFx0b25Nb3VzZURvd246IHRoaXMub25SZW1vdmUsXG5cdFx0XHRcdG9uVG91Y2hFbmQ6IHRoaXMuaGFuZGxlVG91Y2hFbmRSZW1vdmUsXG5cdFx0XHRcdG9uVG91Y2hTdGFydDogdGhpcy5oYW5kbGVUb3VjaFN0YXJ0LFxuXHRcdFx0XHRvblRvdWNoTW92ZTogdGhpcy5oYW5kbGVUb3VjaE1vdmUgfSxcblx0XHRcdCfDlydcblx0XHQpO1xuXHR9LFxuXG5cdHJlbmRlckxhYmVsOiBmdW5jdGlvbiByZW5kZXJMYWJlbCgpIHtcblx0XHR2YXIgY2xhc3NOYW1lID0gJ1NlbGVjdC12YWx1ZS1sYWJlbCc7XG5cdFx0cmV0dXJuIHRoaXMucHJvcHMub25DbGljayB8fCB0aGlzLnByb3BzLnZhbHVlLmhyZWYgPyBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0XHRcdCdhJyxcblx0XHRcdHsgY2xhc3NOYW1lOiBjbGFzc05hbWUsIGhyZWY6IHRoaXMucHJvcHMudmFsdWUuaHJlZiwgdGFyZ2V0OiB0aGlzLnByb3BzLnZhbHVlLnRhcmdldCwgb25Nb3VzZURvd246IHRoaXMuaGFuZGxlTW91c2VEb3duLCBvblRvdWNoRW5kOiB0aGlzLmhhbmRsZU1vdXNlRG93biB9LFxuXHRcdFx0dGhpcy5wcm9wcy5jaGlsZHJlblxuXHRcdCkgOiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0XHRcdCdzcGFuJyxcblx0XHRcdHsgY2xhc3NOYW1lOiBjbGFzc05hbWUsIHJvbGU6ICdvcHRpb24nLCAnYXJpYS1zZWxlY3RlZCc6ICd0cnVlJywgaWQ6IHRoaXMucHJvcHMuaWQgfSxcblx0XHRcdHRoaXMucHJvcHMuY2hpbGRyZW5cblx0XHQpO1xuXHR9LFxuXG5cdHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuXHRcdHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcblx0XHRcdCdkaXYnLFxuXHRcdFx0eyBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lczJbJ2RlZmF1bHQnXSkoJ1NlbGVjdC12YWx1ZScsIHRoaXMucHJvcHMudmFsdWUuY2xhc3NOYW1lKSxcblx0XHRcdFx0c3R5bGU6IHRoaXMucHJvcHMudmFsdWUuc3R5bGUsXG5cdFx0XHRcdHRpdGxlOiB0aGlzLnByb3BzLnZhbHVlLnRpdGxlXG5cdFx0XHR9LFxuXHRcdFx0dGhpcy5yZW5kZXJSZW1vdmVJY29uKCksXG5cdFx0XHR0aGlzLnJlbmRlckxhYmVsKClcblx0XHQpO1xuXHR9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFZhbHVlO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3Qtc2VsZWN0L2xpYi9WYWx1ZS5qcyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0dmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBhcnJvd1JlbmRlcmVyO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG5mdW5jdGlvbiBhcnJvd1JlbmRlcmVyKF9yZWYpIHtcblx0dmFyIG9uTW91c2VEb3duID0gX3JlZi5vbk1vdXNlRG93bjtcblxuXHRyZXR1cm4gX3JlYWN0MltcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuXHRcdGNsYXNzTmFtZTogXCJTZWxlY3QtYXJyb3dcIixcblx0XHRvbk1vdXNlRG93bjogb25Nb3VzZURvd25cblx0fSk7XG59XG5cbjtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1zZWxlY3QvbGliL3V0aWxzL2RlZmF1bHRBcnJvd1JlbmRlcmVyLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG5cdHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGNsZWFyUmVuZGVyZXI7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG5mdW5jdGlvbiBjbGVhclJlbmRlcmVyKCkge1xuXHRyZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCB7XG5cdFx0Y2xhc3NOYW1lOiAnU2VsZWN0LWNsZWFyJyxcblx0XHRkYW5nZXJvdXNseVNldElubmVySFRNTDogeyBfX2h0bWw6ICcmdGltZXM7JyB9XG5cdH0pO1xufVxuXG47XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LXNlbGVjdC9saWIvdXRpbHMvZGVmYXVsdENsZWFyUmVuZGVyZXIuanMiLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIF9zdHJpcERpYWNyaXRpY3MgPSByZXF1aXJlKCcuL3N0cmlwRGlhY3JpdGljcycpO1xuXG52YXIgX3N0cmlwRGlhY3JpdGljczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zdHJpcERpYWNyaXRpY3MpO1xuXG5mdW5jdGlvbiBmaWx0ZXJPcHRpb25zKG9wdGlvbnMsIGZpbHRlclZhbHVlLCBleGNsdWRlT3B0aW9ucywgcHJvcHMpIHtcblx0dmFyIF90aGlzID0gdGhpcztcblxuXHRpZiAocHJvcHMuaWdub3JlQWNjZW50cykge1xuXHRcdGZpbHRlclZhbHVlID0gKDAsIF9zdHJpcERpYWNyaXRpY3MyWydkZWZhdWx0J10pKGZpbHRlclZhbHVlKTtcblx0fVxuXG5cdGlmIChwcm9wcy5pZ25vcmVDYXNlKSB7XG5cdFx0ZmlsdGVyVmFsdWUgPSBmaWx0ZXJWYWx1ZS50b0xvd2VyQ2FzZSgpO1xuXHR9XG5cblx0aWYgKGV4Y2x1ZGVPcHRpb25zKSBleGNsdWRlT3B0aW9ucyA9IGV4Y2x1ZGVPcHRpb25zLm1hcChmdW5jdGlvbiAoaSkge1xuXHRcdHJldHVybiBpW3Byb3BzLnZhbHVlS2V5XTtcblx0fSk7XG5cblx0cmV0dXJuIG9wdGlvbnMuZmlsdGVyKGZ1bmN0aW9uIChvcHRpb24pIHtcblx0XHRpZiAoZXhjbHVkZU9wdGlvbnMgJiYgZXhjbHVkZU9wdGlvbnMuaW5kZXhPZihvcHRpb25bcHJvcHMudmFsdWVLZXldKSA+IC0xKSByZXR1cm4gZmFsc2U7XG5cdFx0aWYgKHByb3BzLmZpbHRlck9wdGlvbikgcmV0dXJuIHByb3BzLmZpbHRlck9wdGlvbi5jYWxsKF90aGlzLCBvcHRpb24sIGZpbHRlclZhbHVlKTtcblx0XHRpZiAoIWZpbHRlclZhbHVlKSByZXR1cm4gdHJ1ZTtcblx0XHR2YXIgdmFsdWVUZXN0ID0gU3RyaW5nKG9wdGlvbltwcm9wcy52YWx1ZUtleV0pO1xuXHRcdHZhciBsYWJlbFRlc3QgPSBTdHJpbmcob3B0aW9uW3Byb3BzLmxhYmVsS2V5XSk7XG5cdFx0aWYgKHByb3BzLmlnbm9yZUFjY2VudHMpIHtcblx0XHRcdGlmIChwcm9wcy5tYXRjaFByb3AgIT09ICdsYWJlbCcpIHZhbHVlVGVzdCA9ICgwLCBfc3RyaXBEaWFjcml0aWNzMlsnZGVmYXVsdCddKSh2YWx1ZVRlc3QpO1xuXHRcdFx0aWYgKHByb3BzLm1hdGNoUHJvcCAhPT0gJ3ZhbHVlJykgbGFiZWxUZXN0ID0gKDAsIF9zdHJpcERpYWNyaXRpY3MyWydkZWZhdWx0J10pKGxhYmVsVGVzdCk7XG5cdFx0fVxuXHRcdGlmIChwcm9wcy5pZ25vcmVDYXNlKSB7XG5cdFx0XHRpZiAocHJvcHMubWF0Y2hQcm9wICE9PSAnbGFiZWwnKSB2YWx1ZVRlc3QgPSB2YWx1ZVRlc3QudG9Mb3dlckNhc2UoKTtcblx0XHRcdGlmIChwcm9wcy5tYXRjaFByb3AgIT09ICd2YWx1ZScpIGxhYmVsVGVzdCA9IGxhYmVsVGVzdC50b0xvd2VyQ2FzZSgpO1xuXHRcdH1cblx0XHRyZXR1cm4gcHJvcHMubWF0Y2hQb3MgPT09ICdzdGFydCcgPyBwcm9wcy5tYXRjaFByb3AgIT09ICdsYWJlbCcgJiYgdmFsdWVUZXN0LnN1YnN0cigwLCBmaWx0ZXJWYWx1ZS5sZW5ndGgpID09PSBmaWx0ZXJWYWx1ZSB8fCBwcm9wcy5tYXRjaFByb3AgIT09ICd2YWx1ZScgJiYgbGFiZWxUZXN0LnN1YnN0cigwLCBmaWx0ZXJWYWx1ZS5sZW5ndGgpID09PSBmaWx0ZXJWYWx1ZSA6IHByb3BzLm1hdGNoUHJvcCAhPT0gJ2xhYmVsJyAmJiB2YWx1ZVRlc3QuaW5kZXhPZihmaWx0ZXJWYWx1ZSkgPj0gMCB8fCBwcm9wcy5tYXRjaFByb3AgIT09ICd2YWx1ZScgJiYgbGFiZWxUZXN0LmluZGV4T2YoZmlsdGVyVmFsdWUpID49IDA7XG5cdH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZpbHRlck9wdGlvbnM7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1zZWxlY3QvbGliL3V0aWxzL2RlZmF1bHRGaWx0ZXJPcHRpb25zLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBfY2xhc3NuYW1lcyA9IHJlcXVpcmUoJ2NsYXNzbmFtZXMnKTtcblxudmFyIF9jbGFzc25hbWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzbmFtZXMpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbmZ1bmN0aW9uIG1lbnVSZW5kZXJlcihfcmVmKSB7XG5cdHZhciBmb2N1c2VkT3B0aW9uID0gX3JlZi5mb2N1c2VkT3B0aW9uO1xuXHR2YXIgaW5zdGFuY2VQcmVmaXggPSBfcmVmLmluc3RhbmNlUHJlZml4O1xuXHR2YXIgbGFiZWxLZXkgPSBfcmVmLmxhYmVsS2V5O1xuXHR2YXIgb25Gb2N1cyA9IF9yZWYub25Gb2N1cztcblx0dmFyIG9uU2VsZWN0ID0gX3JlZi5vblNlbGVjdDtcblx0dmFyIG9wdGlvbkNsYXNzTmFtZSA9IF9yZWYub3B0aW9uQ2xhc3NOYW1lO1xuXHR2YXIgb3B0aW9uQ29tcG9uZW50ID0gX3JlZi5vcHRpb25Db21wb25lbnQ7XG5cdHZhciBvcHRpb25SZW5kZXJlciA9IF9yZWYub3B0aW9uUmVuZGVyZXI7XG5cdHZhciBvcHRpb25zID0gX3JlZi5vcHRpb25zO1xuXHR2YXIgdmFsdWVBcnJheSA9IF9yZWYudmFsdWVBcnJheTtcblx0dmFyIHZhbHVlS2V5ID0gX3JlZi52YWx1ZUtleTtcblx0dmFyIG9uT3B0aW9uUmVmID0gX3JlZi5vbk9wdGlvblJlZjtcblxuXHR2YXIgT3B0aW9uID0gb3B0aW9uQ29tcG9uZW50O1xuXG5cdHJldHVybiBvcHRpb25zLm1hcChmdW5jdGlvbiAob3B0aW9uLCBpKSB7XG5cdFx0dmFyIGlzU2VsZWN0ZWQgPSB2YWx1ZUFycmF5ICYmIHZhbHVlQXJyYXkuaW5kZXhPZihvcHRpb24pID4gLTE7XG5cdFx0dmFyIGlzRm9jdXNlZCA9IG9wdGlvbiA9PT0gZm9jdXNlZE9wdGlvbjtcblx0XHR2YXIgb3B0aW9uQ2xhc3MgPSAoMCwgX2NsYXNzbmFtZXMyWydkZWZhdWx0J10pKG9wdGlvbkNsYXNzTmFtZSwge1xuXHRcdFx0J1NlbGVjdC1vcHRpb24nOiB0cnVlLFxuXHRcdFx0J2lzLXNlbGVjdGVkJzogaXNTZWxlY3RlZCxcblx0XHRcdCdpcy1mb2N1c2VkJzogaXNGb2N1c2VkLFxuXHRcdFx0J2lzLWRpc2FibGVkJzogb3B0aW9uLmRpc2FibGVkXG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG5cdFx0XHRPcHRpb24sXG5cdFx0XHR7XG5cdFx0XHRcdGNsYXNzTmFtZTogb3B0aW9uQ2xhc3MsXG5cdFx0XHRcdGluc3RhbmNlUHJlZml4OiBpbnN0YW5jZVByZWZpeCxcblx0XHRcdFx0aXNEaXNhYmxlZDogb3B0aW9uLmRpc2FibGVkLFxuXHRcdFx0XHRpc0ZvY3VzZWQ6IGlzRm9jdXNlZCxcblx0XHRcdFx0aXNTZWxlY3RlZDogaXNTZWxlY3RlZCxcblx0XHRcdFx0a2V5OiAnb3B0aW9uLScgKyBpICsgJy0nICsgb3B0aW9uW3ZhbHVlS2V5XSxcblx0XHRcdFx0b25Gb2N1czogb25Gb2N1cyxcblx0XHRcdFx0b25TZWxlY3Q6IG9uU2VsZWN0LFxuXHRcdFx0XHRvcHRpb246IG9wdGlvbixcblx0XHRcdFx0b3B0aW9uSW5kZXg6IGksXG5cdFx0XHRcdHJlZjogZnVuY3Rpb24gKHJlZikge1xuXHRcdFx0XHRcdG9uT3B0aW9uUmVmKHJlZiwgaXNGb2N1c2VkKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdG9wdGlvblJlbmRlcmVyKG9wdGlvbiwgaSlcblx0XHQpO1xuXHR9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtZW51UmVuZGVyZXI7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1zZWxlY3QvbGliL3V0aWxzL2RlZmF1bHRNZW51UmVuZGVyZXIuanMiLCIndXNlIHN0cmljdCc7XG5cbnZhciBtYXAgPSBbeyAnYmFzZSc6ICdBJywgJ2xldHRlcnMnOiAvW1xcdTAwNDFcXHUyNEI2XFx1RkYyMVxcdTAwQzBcXHUwMEMxXFx1MDBDMlxcdTFFQTZcXHUxRUE0XFx1MUVBQVxcdTFFQThcXHUwMEMzXFx1MDEwMFxcdTAxMDJcXHUxRUIwXFx1MUVBRVxcdTFFQjRcXHUxRUIyXFx1MDIyNlxcdTAxRTBcXHUwMEM0XFx1MDFERVxcdTFFQTJcXHUwMEM1XFx1MDFGQVxcdTAxQ0RcXHUwMjAwXFx1MDIwMlxcdTFFQTBcXHUxRUFDXFx1MUVCNlxcdTFFMDBcXHUwMTA0XFx1MDIzQVxcdTJDNkZdL2cgfSwgeyAnYmFzZSc6ICdBQScsICdsZXR0ZXJzJzogL1tcXHVBNzMyXS9nIH0sIHsgJ2Jhc2UnOiAnQUUnLCAnbGV0dGVycyc6IC9bXFx1MDBDNlxcdTAxRkNcXHUwMUUyXS9nIH0sIHsgJ2Jhc2UnOiAnQU8nLCAnbGV0dGVycyc6IC9bXFx1QTczNF0vZyB9LCB7ICdiYXNlJzogJ0FVJywgJ2xldHRlcnMnOiAvW1xcdUE3MzZdL2cgfSwgeyAnYmFzZSc6ICdBVicsICdsZXR0ZXJzJzogL1tcXHVBNzM4XFx1QTczQV0vZyB9LCB7ICdiYXNlJzogJ0FZJywgJ2xldHRlcnMnOiAvW1xcdUE3M0NdL2cgfSwgeyAnYmFzZSc6ICdCJywgJ2xldHRlcnMnOiAvW1xcdTAwNDJcXHUyNEI3XFx1RkYyMlxcdTFFMDJcXHUxRTA0XFx1MUUwNlxcdTAyNDNcXHUwMTgyXFx1MDE4MV0vZyB9LCB7ICdiYXNlJzogJ0MnLCAnbGV0dGVycyc6IC9bXFx1MDA0M1xcdTI0QjhcXHVGRjIzXFx1MDEwNlxcdTAxMDhcXHUwMTBBXFx1MDEwQ1xcdTAwQzdcXHUxRTA4XFx1MDE4N1xcdTAyM0JcXHVBNzNFXS9nIH0sIHsgJ2Jhc2UnOiAnRCcsICdsZXR0ZXJzJzogL1tcXHUwMDQ0XFx1MjRCOVxcdUZGMjRcXHUxRTBBXFx1MDEwRVxcdTFFMENcXHUxRTEwXFx1MUUxMlxcdTFFMEVcXHUwMTEwXFx1MDE4QlxcdTAxOEFcXHUwMTg5XFx1QTc3OV0vZyB9LCB7ICdiYXNlJzogJ0RaJywgJ2xldHRlcnMnOiAvW1xcdTAxRjFcXHUwMUM0XS9nIH0sIHsgJ2Jhc2UnOiAnRHonLCAnbGV0dGVycyc6IC9bXFx1MDFGMlxcdTAxQzVdL2cgfSwgeyAnYmFzZSc6ICdFJywgJ2xldHRlcnMnOiAvW1xcdTAwNDVcXHUyNEJBXFx1RkYyNVxcdTAwQzhcXHUwMEM5XFx1MDBDQVxcdTFFQzBcXHUxRUJFXFx1MUVDNFxcdTFFQzJcXHUxRUJDXFx1MDExMlxcdTFFMTRcXHUxRTE2XFx1MDExNFxcdTAxMTZcXHUwMENCXFx1MUVCQVxcdTAxMUFcXHUwMjA0XFx1MDIwNlxcdTFFQjhcXHUxRUM2XFx1MDIyOFxcdTFFMUNcXHUwMTE4XFx1MUUxOFxcdTFFMUFcXHUwMTkwXFx1MDE4RV0vZyB9LCB7ICdiYXNlJzogJ0YnLCAnbGV0dGVycyc6IC9bXFx1MDA0NlxcdTI0QkJcXHVGRjI2XFx1MUUxRVxcdTAxOTFcXHVBNzdCXS9nIH0sIHsgJ2Jhc2UnOiAnRycsICdsZXR0ZXJzJzogL1tcXHUwMDQ3XFx1MjRCQ1xcdUZGMjdcXHUwMUY0XFx1MDExQ1xcdTFFMjBcXHUwMTFFXFx1MDEyMFxcdTAxRTZcXHUwMTIyXFx1MDFFNFxcdTAxOTNcXHVBN0EwXFx1QTc3RFxcdUE3N0VdL2cgfSwgeyAnYmFzZSc6ICdIJywgJ2xldHRlcnMnOiAvW1xcdTAwNDhcXHUyNEJEXFx1RkYyOFxcdTAxMjRcXHUxRTIyXFx1MUUyNlxcdTAyMUVcXHUxRTI0XFx1MUUyOFxcdTFFMkFcXHUwMTI2XFx1MkM2N1xcdTJDNzVcXHVBNzhEXS9nIH0sIHsgJ2Jhc2UnOiAnSScsICdsZXR0ZXJzJzogL1tcXHUwMDQ5XFx1MjRCRVxcdUZGMjlcXHUwMENDXFx1MDBDRFxcdTAwQ0VcXHUwMTI4XFx1MDEyQVxcdTAxMkNcXHUwMTMwXFx1MDBDRlxcdTFFMkVcXHUxRUM4XFx1MDFDRlxcdTAyMDhcXHUwMjBBXFx1MUVDQVxcdTAxMkVcXHUxRTJDXFx1MDE5N10vZyB9LCB7ICdiYXNlJzogJ0onLCAnbGV0dGVycyc6IC9bXFx1MDA0QVxcdTI0QkZcXHVGRjJBXFx1MDEzNFxcdTAyNDhdL2cgfSwgeyAnYmFzZSc6ICdLJywgJ2xldHRlcnMnOiAvW1xcdTAwNEJcXHUyNEMwXFx1RkYyQlxcdTFFMzBcXHUwMUU4XFx1MUUzMlxcdTAxMzZcXHUxRTM0XFx1MDE5OFxcdTJDNjlcXHVBNzQwXFx1QTc0MlxcdUE3NDRcXHVBN0EyXS9nIH0sIHsgJ2Jhc2UnOiAnTCcsICdsZXR0ZXJzJzogL1tcXHUwMDRDXFx1MjRDMVxcdUZGMkNcXHUwMTNGXFx1MDEzOVxcdTAxM0RcXHUxRTM2XFx1MUUzOFxcdTAxM0JcXHUxRTNDXFx1MUUzQVxcdTAxNDFcXHUwMjNEXFx1MkM2MlxcdTJDNjBcXHVBNzQ4XFx1QTc0NlxcdUE3ODBdL2cgfSwgeyAnYmFzZSc6ICdMSicsICdsZXR0ZXJzJzogL1tcXHUwMUM3XS9nIH0sIHsgJ2Jhc2UnOiAnTGonLCAnbGV0dGVycyc6IC9bXFx1MDFDOF0vZyB9LCB7ICdiYXNlJzogJ00nLCAnbGV0dGVycyc6IC9bXFx1MDA0RFxcdTI0QzJcXHVGRjJEXFx1MUUzRVxcdTFFNDBcXHUxRTQyXFx1MkM2RVxcdTAxOUNdL2cgfSwgeyAnYmFzZSc6ICdOJywgJ2xldHRlcnMnOiAvW1xcdTAwNEVcXHUyNEMzXFx1RkYyRVxcdTAxRjhcXHUwMTQzXFx1MDBEMVxcdTFFNDRcXHUwMTQ3XFx1MUU0NlxcdTAxNDVcXHUxRTRBXFx1MUU0OFxcdTAyMjBcXHUwMTlEXFx1QTc5MFxcdUE3QTRdL2cgfSwgeyAnYmFzZSc6ICdOSicsICdsZXR0ZXJzJzogL1tcXHUwMUNBXS9nIH0sIHsgJ2Jhc2UnOiAnTmonLCAnbGV0dGVycyc6IC9bXFx1MDFDQl0vZyB9LCB7ICdiYXNlJzogJ08nLCAnbGV0dGVycyc6IC9bXFx1MDA0RlxcdTI0QzRcXHVGRjJGXFx1MDBEMlxcdTAwRDNcXHUwMEQ0XFx1MUVEMlxcdTFFRDBcXHUxRUQ2XFx1MUVENFxcdTAwRDVcXHUxRTRDXFx1MDIyQ1xcdTFFNEVcXHUwMTRDXFx1MUU1MFxcdTFFNTJcXHUwMTRFXFx1MDIyRVxcdTAyMzBcXHUwMEQ2XFx1MDIyQVxcdTFFQ0VcXHUwMTUwXFx1MDFEMVxcdTAyMENcXHUwMjBFXFx1MDFBMFxcdTFFRENcXHUxRURBXFx1MUVFMFxcdTFFREVcXHUxRUUyXFx1MUVDQ1xcdTFFRDhcXHUwMUVBXFx1MDFFQ1xcdTAwRDhcXHUwMUZFXFx1MDE4NlxcdTAxOUZcXHVBNzRBXFx1QTc0Q10vZyB9LCB7ICdiYXNlJzogJ09JJywgJ2xldHRlcnMnOiAvW1xcdTAxQTJdL2cgfSwgeyAnYmFzZSc6ICdPTycsICdsZXR0ZXJzJzogL1tcXHVBNzRFXS9nIH0sIHsgJ2Jhc2UnOiAnT1UnLCAnbGV0dGVycyc6IC9bXFx1MDIyMl0vZyB9LCB7ICdiYXNlJzogJ1AnLCAnbGV0dGVycyc6IC9bXFx1MDA1MFxcdTI0QzVcXHVGRjMwXFx1MUU1NFxcdTFFNTZcXHUwMUE0XFx1MkM2M1xcdUE3NTBcXHVBNzUyXFx1QTc1NF0vZyB9LCB7ICdiYXNlJzogJ1EnLCAnbGV0dGVycyc6IC9bXFx1MDA1MVxcdTI0QzZcXHVGRjMxXFx1QTc1NlxcdUE3NThcXHUwMjRBXS9nIH0sIHsgJ2Jhc2UnOiAnUicsICdsZXR0ZXJzJzogL1tcXHUwMDUyXFx1MjRDN1xcdUZGMzJcXHUwMTU0XFx1MUU1OFxcdTAxNThcXHUwMjEwXFx1MDIxMlxcdTFFNUFcXHUxRTVDXFx1MDE1NlxcdTFFNUVcXHUwMjRDXFx1MkM2NFxcdUE3NUFcXHVBN0E2XFx1QTc4Ml0vZyB9LCB7ICdiYXNlJzogJ1MnLCAnbGV0dGVycyc6IC9bXFx1MDA1M1xcdTI0QzhcXHVGRjMzXFx1MUU5RVxcdTAxNUFcXHUxRTY0XFx1MDE1Q1xcdTFFNjBcXHUwMTYwXFx1MUU2NlxcdTFFNjJcXHUxRTY4XFx1MDIxOFxcdTAxNUVcXHUyQzdFXFx1QTdBOFxcdUE3ODRdL2cgfSwgeyAnYmFzZSc6ICdUJywgJ2xldHRlcnMnOiAvW1xcdTAwNTRcXHUyNEM5XFx1RkYzNFxcdTFFNkFcXHUwMTY0XFx1MUU2Q1xcdTAyMUFcXHUwMTYyXFx1MUU3MFxcdTFFNkVcXHUwMTY2XFx1MDFBQ1xcdTAxQUVcXHUwMjNFXFx1QTc4Nl0vZyB9LCB7ICdiYXNlJzogJ1RaJywgJ2xldHRlcnMnOiAvW1xcdUE3MjhdL2cgfSwgeyAnYmFzZSc6ICdVJywgJ2xldHRlcnMnOiAvW1xcdTAwNTVcXHUyNENBXFx1RkYzNVxcdTAwRDlcXHUwMERBXFx1MDBEQlxcdTAxNjhcXHUxRTc4XFx1MDE2QVxcdTFFN0FcXHUwMTZDXFx1MDBEQ1xcdTAxREJcXHUwMUQ3XFx1MDFENVxcdTAxRDlcXHUxRUU2XFx1MDE2RVxcdTAxNzBcXHUwMUQzXFx1MDIxNFxcdTAyMTZcXHUwMUFGXFx1MUVFQVxcdTFFRThcXHUxRUVFXFx1MUVFQ1xcdTFFRjBcXHUxRUU0XFx1MUU3MlxcdTAxNzJcXHUxRTc2XFx1MUU3NFxcdTAyNDRdL2cgfSwgeyAnYmFzZSc6ICdWJywgJ2xldHRlcnMnOiAvW1xcdTAwNTZcXHUyNENCXFx1RkYzNlxcdTFFN0NcXHUxRTdFXFx1MDFCMlxcdUE3NUVcXHUwMjQ1XS9nIH0sIHsgJ2Jhc2UnOiAnVlknLCAnbGV0dGVycyc6IC9bXFx1QTc2MF0vZyB9LCB7ICdiYXNlJzogJ1cnLCAnbGV0dGVycyc6IC9bXFx1MDA1N1xcdTI0Q0NcXHVGRjM3XFx1MUU4MFxcdTFFODJcXHUwMTc0XFx1MUU4NlxcdTFFODRcXHUxRTg4XFx1MkM3Ml0vZyB9LCB7ICdiYXNlJzogJ1gnLCAnbGV0dGVycyc6IC9bXFx1MDA1OFxcdTI0Q0RcXHVGRjM4XFx1MUU4QVxcdTFFOENdL2cgfSwgeyAnYmFzZSc6ICdZJywgJ2xldHRlcnMnOiAvW1xcdTAwNTlcXHUyNENFXFx1RkYzOVxcdTFFRjJcXHUwMEREXFx1MDE3NlxcdTFFRjhcXHUwMjMyXFx1MUU4RVxcdTAxNzhcXHUxRUY2XFx1MUVGNFxcdTAxQjNcXHUwMjRFXFx1MUVGRV0vZyB9LCB7ICdiYXNlJzogJ1onLCAnbGV0dGVycyc6IC9bXFx1MDA1QVxcdTI0Q0ZcXHVGRjNBXFx1MDE3OVxcdTFFOTBcXHUwMTdCXFx1MDE3RFxcdTFFOTJcXHUxRTk0XFx1MDFCNVxcdTAyMjRcXHUyQzdGXFx1MkM2QlxcdUE3NjJdL2cgfSwgeyAnYmFzZSc6ICdhJywgJ2xldHRlcnMnOiAvW1xcdTAwNjFcXHUyNEQwXFx1RkY0MVxcdTFFOUFcXHUwMEUwXFx1MDBFMVxcdTAwRTJcXHUxRUE3XFx1MUVBNVxcdTFFQUJcXHUxRUE5XFx1MDBFM1xcdTAxMDFcXHUwMTAzXFx1MUVCMVxcdTFFQUZcXHUxRUI1XFx1MUVCM1xcdTAyMjdcXHUwMUUxXFx1MDBFNFxcdTAxREZcXHUxRUEzXFx1MDBFNVxcdTAxRkJcXHUwMUNFXFx1MDIwMVxcdTAyMDNcXHUxRUExXFx1MUVBRFxcdTFFQjdcXHUxRTAxXFx1MDEwNVxcdTJDNjVcXHUwMjUwXS9nIH0sIHsgJ2Jhc2UnOiAnYWEnLCAnbGV0dGVycyc6IC9bXFx1QTczM10vZyB9LCB7ICdiYXNlJzogJ2FlJywgJ2xldHRlcnMnOiAvW1xcdTAwRTZcXHUwMUZEXFx1MDFFM10vZyB9LCB7ICdiYXNlJzogJ2FvJywgJ2xldHRlcnMnOiAvW1xcdUE3MzVdL2cgfSwgeyAnYmFzZSc6ICdhdScsICdsZXR0ZXJzJzogL1tcXHVBNzM3XS9nIH0sIHsgJ2Jhc2UnOiAnYXYnLCAnbGV0dGVycyc6IC9bXFx1QTczOVxcdUE3M0JdL2cgfSwgeyAnYmFzZSc6ICdheScsICdsZXR0ZXJzJzogL1tcXHVBNzNEXS9nIH0sIHsgJ2Jhc2UnOiAnYicsICdsZXR0ZXJzJzogL1tcXHUwMDYyXFx1MjREMVxcdUZGNDJcXHUxRTAzXFx1MUUwNVxcdTFFMDdcXHUwMTgwXFx1MDE4M1xcdTAyNTNdL2cgfSwgeyAnYmFzZSc6ICdjJywgJ2xldHRlcnMnOiAvW1xcdTAwNjNcXHUyNEQyXFx1RkY0M1xcdTAxMDdcXHUwMTA5XFx1MDEwQlxcdTAxMERcXHUwMEU3XFx1MUUwOVxcdTAxODhcXHUwMjNDXFx1QTczRlxcdTIxODRdL2cgfSwgeyAnYmFzZSc6ICdkJywgJ2xldHRlcnMnOiAvW1xcdTAwNjRcXHUyNEQzXFx1RkY0NFxcdTFFMEJcXHUwMTBGXFx1MUUwRFxcdTFFMTFcXHUxRTEzXFx1MUUwRlxcdTAxMTFcXHUwMThDXFx1MDI1NlxcdTAyNTdcXHVBNzdBXS9nIH0sIHsgJ2Jhc2UnOiAnZHonLCAnbGV0dGVycyc6IC9bXFx1MDFGM1xcdTAxQzZdL2cgfSwgeyAnYmFzZSc6ICdlJywgJ2xldHRlcnMnOiAvW1xcdTAwNjVcXHUyNEQ0XFx1RkY0NVxcdTAwRThcXHUwMEU5XFx1MDBFQVxcdTFFQzFcXHUxRUJGXFx1MUVDNVxcdTFFQzNcXHUxRUJEXFx1MDExM1xcdTFFMTVcXHUxRTE3XFx1MDExNVxcdTAxMTdcXHUwMEVCXFx1MUVCQlxcdTAxMUJcXHUwMjA1XFx1MDIwN1xcdTFFQjlcXHUxRUM3XFx1MDIyOVxcdTFFMURcXHUwMTE5XFx1MUUxOVxcdTFFMUJcXHUwMjQ3XFx1MDI1QlxcdTAxRERdL2cgfSwgeyAnYmFzZSc6ICdmJywgJ2xldHRlcnMnOiAvW1xcdTAwNjZcXHUyNEQ1XFx1RkY0NlxcdTFFMUZcXHUwMTkyXFx1QTc3Q10vZyB9LCB7ICdiYXNlJzogJ2cnLCAnbGV0dGVycyc6IC9bXFx1MDA2N1xcdTI0RDZcXHVGRjQ3XFx1MDFGNVxcdTAxMURcXHUxRTIxXFx1MDExRlxcdTAxMjFcXHUwMUU3XFx1MDEyM1xcdTAxRTVcXHUwMjYwXFx1QTdBMVxcdTFENzlcXHVBNzdGXS9nIH0sIHsgJ2Jhc2UnOiAnaCcsICdsZXR0ZXJzJzogL1tcXHUwMDY4XFx1MjREN1xcdUZGNDhcXHUwMTI1XFx1MUUyM1xcdTFFMjdcXHUwMjFGXFx1MUUyNVxcdTFFMjlcXHUxRTJCXFx1MUU5NlxcdTAxMjdcXHUyQzY4XFx1MkM3NlxcdTAyNjVdL2cgfSwgeyAnYmFzZSc6ICdodicsICdsZXR0ZXJzJzogL1tcXHUwMTk1XS9nIH0sIHsgJ2Jhc2UnOiAnaScsICdsZXR0ZXJzJzogL1tcXHUwMDY5XFx1MjREOFxcdUZGNDlcXHUwMEVDXFx1MDBFRFxcdTAwRUVcXHUwMTI5XFx1MDEyQlxcdTAxMkRcXHUwMEVGXFx1MUUyRlxcdTFFQzlcXHUwMUQwXFx1MDIwOVxcdTAyMEJcXHUxRUNCXFx1MDEyRlxcdTFFMkRcXHUwMjY4XFx1MDEzMV0vZyB9LCB7ICdiYXNlJzogJ2onLCAnbGV0dGVycyc6IC9bXFx1MDA2QVxcdTI0RDlcXHVGRjRBXFx1MDEzNVxcdTAxRjBcXHUwMjQ5XS9nIH0sIHsgJ2Jhc2UnOiAnaycsICdsZXR0ZXJzJzogL1tcXHUwMDZCXFx1MjREQVxcdUZGNEJcXHUxRTMxXFx1MDFFOVxcdTFFMzNcXHUwMTM3XFx1MUUzNVxcdTAxOTlcXHUyQzZBXFx1QTc0MVxcdUE3NDNcXHVBNzQ1XFx1QTdBM10vZyB9LCB7ICdiYXNlJzogJ2wnLCAnbGV0dGVycyc6IC9bXFx1MDA2Q1xcdTI0REJcXHVGRjRDXFx1MDE0MFxcdTAxM0FcXHUwMTNFXFx1MUUzN1xcdTFFMzlcXHUwMTNDXFx1MUUzRFxcdTFFM0JcXHUwMTdGXFx1MDE0MlxcdTAxOUFcXHUwMjZCXFx1MkM2MVxcdUE3NDlcXHVBNzgxXFx1QTc0N10vZyB9LCB7ICdiYXNlJzogJ2xqJywgJ2xldHRlcnMnOiAvW1xcdTAxQzldL2cgfSwgeyAnYmFzZSc6ICdtJywgJ2xldHRlcnMnOiAvW1xcdTAwNkRcXHUyNERDXFx1RkY0RFxcdTFFM0ZcXHUxRTQxXFx1MUU0M1xcdTAyNzFcXHUwMjZGXS9nIH0sIHsgJ2Jhc2UnOiAnbicsICdsZXR0ZXJzJzogL1tcXHUwMDZFXFx1MjRERFxcdUZGNEVcXHUwMUY5XFx1MDE0NFxcdTAwRjFcXHUxRTQ1XFx1MDE0OFxcdTFFNDdcXHUwMTQ2XFx1MUU0QlxcdTFFNDlcXHUwMTlFXFx1MDI3MlxcdTAxNDlcXHVBNzkxXFx1QTdBNV0vZyB9LCB7ICdiYXNlJzogJ25qJywgJ2xldHRlcnMnOiAvW1xcdTAxQ0NdL2cgfSwgeyAnYmFzZSc6ICdvJywgJ2xldHRlcnMnOiAvW1xcdTAwNkZcXHUyNERFXFx1RkY0RlxcdTAwRjJcXHUwMEYzXFx1MDBGNFxcdTFFRDNcXHUxRUQxXFx1MUVEN1xcdTFFRDVcXHUwMEY1XFx1MUU0RFxcdTAyMkRcXHUxRTRGXFx1MDE0RFxcdTFFNTFcXHUxRTUzXFx1MDE0RlxcdTAyMkZcXHUwMjMxXFx1MDBGNlxcdTAyMkJcXHUxRUNGXFx1MDE1MVxcdTAxRDJcXHUwMjBEXFx1MDIwRlxcdTAxQTFcXHUxRUREXFx1MUVEQlxcdTFFRTFcXHUxRURGXFx1MUVFM1xcdTFFQ0RcXHUxRUQ5XFx1MDFFQlxcdTAxRURcXHUwMEY4XFx1MDFGRlxcdTAyNTRcXHVBNzRCXFx1QTc0RFxcdTAyNzVdL2cgfSwgeyAnYmFzZSc6ICdvaScsICdsZXR0ZXJzJzogL1tcXHUwMUEzXS9nIH0sIHsgJ2Jhc2UnOiAnb3UnLCAnbGV0dGVycyc6IC9bXFx1MDIyM10vZyB9LCB7ICdiYXNlJzogJ29vJywgJ2xldHRlcnMnOiAvW1xcdUE3NEZdL2cgfSwgeyAnYmFzZSc6ICdwJywgJ2xldHRlcnMnOiAvW1xcdTAwNzBcXHUyNERGXFx1RkY1MFxcdTFFNTVcXHUxRTU3XFx1MDFBNVxcdTFEN0RcXHVBNzUxXFx1QTc1M1xcdUE3NTVdL2cgfSwgeyAnYmFzZSc6ICdxJywgJ2xldHRlcnMnOiAvW1xcdTAwNzFcXHUyNEUwXFx1RkY1MVxcdTAyNEJcXHVBNzU3XFx1QTc1OV0vZyB9LCB7ICdiYXNlJzogJ3InLCAnbGV0dGVycyc6IC9bXFx1MDA3MlxcdTI0RTFcXHVGRjUyXFx1MDE1NVxcdTFFNTlcXHUwMTU5XFx1MDIxMVxcdTAyMTNcXHUxRTVCXFx1MUU1RFxcdTAxNTdcXHUxRTVGXFx1MDI0RFxcdTAyN0RcXHVBNzVCXFx1QTdBN1xcdUE3ODNdL2cgfSwgeyAnYmFzZSc6ICdzJywgJ2xldHRlcnMnOiAvW1xcdTAwNzNcXHUyNEUyXFx1RkY1M1xcdTAwREZcXHUwMTVCXFx1MUU2NVxcdTAxNURcXHUxRTYxXFx1MDE2MVxcdTFFNjdcXHUxRTYzXFx1MUU2OVxcdTAyMTlcXHUwMTVGXFx1MDIzRlxcdUE3QTlcXHVBNzg1XFx1MUU5Ql0vZyB9LCB7ICdiYXNlJzogJ3QnLCAnbGV0dGVycyc6IC9bXFx1MDA3NFxcdTI0RTNcXHVGRjU0XFx1MUU2QlxcdTFFOTdcXHUwMTY1XFx1MUU2RFxcdTAyMUJcXHUwMTYzXFx1MUU3MVxcdTFFNkZcXHUwMTY3XFx1MDFBRFxcdTAyODhcXHUyQzY2XFx1QTc4N10vZyB9LCB7ICdiYXNlJzogJ3R6JywgJ2xldHRlcnMnOiAvW1xcdUE3MjldL2cgfSwgeyAnYmFzZSc6ICd1JywgJ2xldHRlcnMnOiAvW1xcdTAwNzVcXHUyNEU0XFx1RkY1NVxcdTAwRjlcXHUwMEZBXFx1MDBGQlxcdTAxNjlcXHUxRTc5XFx1MDE2QlxcdTFFN0JcXHUwMTZEXFx1MDBGQ1xcdTAxRENcXHUwMUQ4XFx1MDFENlxcdTAxREFcXHUxRUU3XFx1MDE2RlxcdTAxNzFcXHUwMUQ0XFx1MDIxNVxcdTAyMTdcXHUwMUIwXFx1MUVFQlxcdTFFRTlcXHUxRUVGXFx1MUVFRFxcdTFFRjFcXHUxRUU1XFx1MUU3M1xcdTAxNzNcXHUxRTc3XFx1MUU3NVxcdTAyODldL2cgfSwgeyAnYmFzZSc6ICd2JywgJ2xldHRlcnMnOiAvW1xcdTAwNzZcXHUyNEU1XFx1RkY1NlxcdTFFN0RcXHUxRTdGXFx1MDI4QlxcdUE3NUZcXHUwMjhDXS9nIH0sIHsgJ2Jhc2UnOiAndnknLCAnbGV0dGVycyc6IC9bXFx1QTc2MV0vZyB9LCB7ICdiYXNlJzogJ3cnLCAnbGV0dGVycyc6IC9bXFx1MDA3N1xcdTI0RTZcXHVGRjU3XFx1MUU4MVxcdTFFODNcXHUwMTc1XFx1MUU4N1xcdTFFODVcXHUxRTk4XFx1MUU4OVxcdTJDNzNdL2cgfSwgeyAnYmFzZSc6ICd4JywgJ2xldHRlcnMnOiAvW1xcdTAwNzhcXHUyNEU3XFx1RkY1OFxcdTFFOEJcXHUxRThEXS9nIH0sIHsgJ2Jhc2UnOiAneScsICdsZXR0ZXJzJzogL1tcXHUwMDc5XFx1MjRFOFxcdUZGNTlcXHUxRUYzXFx1MDBGRFxcdTAxNzdcXHUxRUY5XFx1MDIzM1xcdTFFOEZcXHUwMEZGXFx1MUVGN1xcdTFFOTlcXHUxRUY1XFx1MDFCNFxcdTAyNEZcXHUxRUZGXS9nIH0sIHsgJ2Jhc2UnOiAneicsICdsZXR0ZXJzJzogL1tcXHUwMDdBXFx1MjRFOVxcdUZGNUFcXHUwMTdBXFx1MUU5MVxcdTAxN0NcXHUwMTdFXFx1MUU5M1xcdTFFOTVcXHUwMUI2XFx1MDIyNVxcdTAyNDBcXHUyQzZDXFx1QTc2M10vZyB9XTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzdHJpcERpYWNyaXRpY3Moc3RyKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbWFwLmxlbmd0aDsgaSsrKSB7XG5cdFx0c3RyID0gc3RyLnJlcGxhY2UobWFwW2ldLmxldHRlcnMsIG1hcFtpXS5iYXNlKTtcblx0fVxuXHRyZXR1cm4gc3RyO1xufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LXNlbGVjdC9saWIvdXRpbHMvc3RyaXBEaWFjcml0aWNzLmpzIiwiLyogZ2xvYmFscyBfX3dlYnBhY2tfYW1kX29wdGlvbnNfXyAqL1xyXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19hbWRfb3B0aW9uc19fO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9hbWQtb3B0aW9ucy5qc1xuLy8gbW9kdWxlIGlkID0gLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2FtZC1vcHRpb25zLmpzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBGb3Jtc3ksIHsgSE9DIH0gZnJvbSAnZm9ybXN5LXJlYWN0JztcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcclxuXHJcbmNsYXNzIEZpZWxkIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICBjb25zdHJ1Y3RvciAocHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICAgIHRoaXMuY2hhbmdlVmFsdWUgPSAoZXZlbnQpID0+IHtcclxuICAgICAgdGhpcy5wcm9wcy5zZXRWYWx1ZShldmVudC5jdXJyZW50VGFyZ2V0W3RoaXMucHJvcHMudHlwZSA9PT0gJ2NoZWNrYm94JyA/XHJcbiAgICAgICAgJ2NoZWNrZWQnIDogJ3ZhbHVlJ10pO1xyXG4gICAgfTtcclxuICB9XHJcbiAgcmVuZGVyICgpIHtcclxuICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IHRoaXMucHJvcHMuZ2V0RXJyb3JNZXNzYWdlKCk7XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzaWdudXAtZmllbGQtZ3JvdXBcIj5cclxuICAgICAgICA8bGFiZWxcclxuICAgICAgICAgIGh0bWxGb3I9eyB0aGlzLnByb3BzLm5hbWUudG9Mb3dlckNhc2UoKSB9XHJcbiAgICAgICAgICBjbGFzc05hbWU9XCJzaWdudXAtZm9ybV9fbGFiZWxcIj5cclxuICAgICAgICAgIHsgdGhpcy5wcm9wcy5uYW1lIH1cclxuICAgICAgICA8L2xhYmVsPlxyXG4gICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgb25DaGFuZ2U9e3RoaXMuY2hhbmdlVmFsdWV9XHJcbiAgICAgICAgICB2YWx1ZT17dGhpcy5wcm9wcy5nZXRWYWx1ZSgpfVxyXG4gICAgICAgICAgdHlwZT17dGhpcy5wcm9wcy50eXBlIHx8ICd0ZXh0J31cclxuICAgICAgICAgIG5hbWU9eyB0aGlzLnByb3BzLm5hbWUudG9Mb3dlckNhc2UoKSB9XHJcbiAgICAgICAgICBjbGFzc05hbWU9XCJzaWdudXAtZm9ybV9faW5wdXQtZmllbGRcIi8+XHJcbiAgICAgICAgPHAgY2xhc3NOYW1lPVwiY2FwdGlvbiBzaWdudXAtZm9ybV9fY2FwdGlvblwiPlxyXG4gICAgICAgICAgeyB0aGlzLnByb3BzLnRleHQgfVxyXG4gICAgICAgIDwvcD5cclxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJzaWdudXAtZm9ybV9fZXJyb3ItbWVzc2FnZVwiPntlcnJvck1lc3NhZ2V9PC9zcGFuPlxyXG4gICAgICA8L2Rpdj5cclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5GaWVsZC5wcm9wVHlwZXMgPSB7XHJcbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcclxuICB0ZXh0OiBQcm9wVHlwZXMuc3RyaW5nLFxyXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcclxuICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG4gIHNldFZhbHVlOiBQcm9wVHlwZXMuYW55LFxyXG4gIGdldFZhbHVlOiBQcm9wVHlwZXMuZnVuYyxcclxuICB2YWxpZGF0aW9uczogUHJvcFR5cGVzLmFueSxcclxuICBnZXRFcnJvck1lc3NhZ2U6IFByb3BUeXBlcy5mdW5jLFxyXG4gIHJlZ2lzdHJhdGlvbjogUHJvcFR5cGVzLmZ1bmNcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEhPQyhGaWVsZCk7XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9jb21wb25lbnRzL0F1dGgvRmllbGQvRmllbGQuanMiLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgKiBhcyBkMyBmcm9tICdkMyc7XHJcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xyXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXhpcyBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgY29tcG9uZW50RGlkVXBkYXRlICgpIHtcclxuICAgIHRoaXMucmVuZGVyQXhpcygpO1xyXG4gIH1cclxuICBjb21wb25lbnREaWRNb3VudCAoKSB7XHJcbiAgICB0aGlzLnJlbmRlckF4aXMoKTtcclxuICB9XHJcbiAgcmVuZGVyQXhpcyAoKSB7XHJcbiAgICBjb25zdCBheGlzT3JpZW50ID0gYGF4aXMke3RoaXMucHJvcHMub3JpZW50fWA7XHJcbiAgICBsZXQgYXhpcyA9IGQzW2F4aXNPcmllbnRdKHRoaXMucHJvcHMuc2NhbGUpXHJcbiAgICAgICAgICAudGlja3ModGhpcy5wcm9wcy50aWNrcyk7XHJcblxyXG4gICAgaWYgKHRoaXMucHJvcHMuZm9ybWF0KSB7XHJcbiAgICAgIGF4aXMgPSBheGlzLnRpY2tGb3JtYXQoZDMudGltZUZvcm1hdCh0aGlzLnByb3BzLmZvcm1hdCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGQzLnNlbGVjdCh0aGlzLmF4aXNFbGVtZW50KS5jYWxsKGF4aXMpO1xyXG4gIH1cclxuICByZW5kZXIgKCkge1xyXG4gICAgY29uc3QgdHJhbnNsYXRlID0gYHRyYW5zbGF0ZSgwLCR7dGhpcy5wcm9wcy5ofSlgO1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxnIGNsYXNzTmFtZSA9IFwiYXhpc1wiXHJcbiAgICAgICAgcmVmPXsoZWwpID0+IHtcclxuICAgICAgICAgIHRoaXMuYXhpc0VsZW1lbnQgPSBlbDtcclxuICAgICAgICB9fVxyXG4gICAgICAgIHRyYW5zZm9ybSA9IHt0aGlzLnByb3BzLmF4aXNUeXBlID09PSAneCcgPyB0cmFuc2xhdGUgOiAnJ30gPlxyXG4gICAgICA8L2c+XHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuQXhpcy5wcm9wVHlwZXMgPSB7XHJcbiAgaDogUHJvcFR5cGVzLm51bWJlcixcclxuICBvcmllbnQ6IFByb3BUeXBlcy5vbmVPZihbJ0xlZnQnLCAnQm90dG9tJywgJ1JpZ2h0JywgJ1RvcCddKSxcclxuICBzY2FsZTogUHJvcFR5cGVzLmZ1bmMsXHJcbiAgYXhpc1R5cGU6IFByb3BUeXBlcy5vbmVPZihbJ3gnLCAneSddKSxcclxuICB0aWNrczogUHJvcFR5cGVzLm51bWJlcixcclxuICBmb3JtYXQ6IFByb3BUeXBlcy5zdHJpbmdcclxufTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbXBvbmVudHMvQ2hhcnQvQXhpcy9BeGlzLmpzIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcclxuaW1wb3J0IExpbmVDaGFydCBmcm9tICcuL0xpbmVDaGFydC9MaW5lQ2hhcnQnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2hhcnQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gIGNvbnN0cnVjdG9yIChwcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG4gICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgY2FsY1dpZHRoOiAyMDBcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBjb21wb25lbnREaWRNb3VudCAoKSB7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5zZXRDaGlsZFdpZHRoKTtcclxuICAgIHRoaXMuc2V0Q2hpbGRXaWR0aCgpO1xyXG4gIH1cclxuICBjb21wb25lbnRXaWxsVW5tb3VudCAoKSB7XHJcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5zZXRDaGlsZFdpZHRoKTtcclxuICB9XHJcbiAgc2V0Q2hpbGRXaWR0aCA9ICgpID0+IHtcclxuICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICBjYWxjV2lkdGg6IHRoaXMuZ2V0RWxlbWVudFdpZHRoKClcclxuICAgIH0pO1xyXG4gIH1cclxuICBnZXRFbGVtZW50V2lkdGggKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuZGl2Lm9mZnNldFdpZHRoO1xyXG4gIH1cclxuICByZW5kZXIgKCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGRpdiBjbGFzc05hbWU9eyB0aGlzLnByb3BzLnN0eWxlTmFtZSB9XHJcbiAgICAgICAgcmVmPXsgKGVsKT0+e1xyXG4gICAgICAgICAgdGhpcy5kaXYgPSBlbDtcclxuICAgICAgICB9IH0+XHJcbiAgICAgICAgICA8TGluZUNoYXJ0XHJcbiAgICAgICAgICAgIHdpZHRoPXt0aGlzLnN0YXRlLmNhbGNXaWR0aH1cclxuICAgICAgICAgICAgZGF0YT17dGhpcy5wcm9wcy5kYXRhfS8+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbkNoYXJ0LnByb3BUeXBlcyA9IHtcclxuICBwYXJlbnQ6IFByb3BUeXBlcy5zdHJpbmcsXHJcbiAgc3R5bGVOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG4gIGRhdGE6IFByb3BUeXBlcy5hcnJheVxyXG59O1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29tcG9uZW50cy9DaGFydC9DaGFydC5qcyIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XHJcblxyXG5leHBvcnQgY29uc3QgRG90cyA9IChwcm9wcykgPT4gKFxyXG4gIDxnPlxyXG4gICAge3Byb3BzLmRhdGEubWFwKChkLCBpKT0+KFxyXG4gICAgICA8Y2lyY2xlIGNsYXNzTmFtZT1cImRvdFwiIHI9XCI1XCIgY3g9e3Byb3BzLngoZC5kYXRlKX1cclxuICAgICAgICAgICAgICBjeT0ge3Byb3BzLnkoZFtwcm9wcy55RGF0YV0pfSBrZXk9e2l9IC8+KSl9XHJcbiAgPC9nPlxyXG4pO1xyXG5cclxuRG90cy5wcm9wVHlwZXMgPSB7XHJcbiAgZGF0YTogUHJvcFR5cGVzLmFycmF5LFxyXG4gIHlEYXRhOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG4gIHg6IFByb3BUeXBlcy5mdW5jLFxyXG4gIHk6IFByb3BUeXBlcy5mdW5jXHJcbn07XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9jb21wb25lbnRzL0NoYXJ0L0RvdHMvRG90cy5qcyIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJztcclxuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XHJcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHcmlkIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICBjb21wb25lbnREaWRVcGRhdGUgKCkge1xyXG4gICAgdGhpcy5yZW5kZXJHcmlkKCk7XHJcbiAgfVxyXG4gIGNvbXBvbmVudERpZE1vdW50ICgpIHtcclxuICAgIHRoaXMucmVuZGVyR3JpZCgpO1xyXG4gIH1cclxuICByZW5kZXJHcmlkICgpIHtcclxuICAgIGNvbnN0IGF4aXNPcmllbnQgPSBgYXhpcyR7dGhpcy5wcm9wcy5vcmllbnR9YDtcclxuICAgIGNvbnN0IGF4aXMgPSBkM1theGlzT3JpZW50XSh0aGlzLnByb3BzLnNjYWxlKVxyXG4gICAgICAudGlja3ModGhpcy5wcm9wcy50aWNrcylcclxuICAgICAgLnRpY2tTaXplKC10aGlzLnByb3BzLmxlbiwgMCwgMClcclxuICAgICAgLnRpY2tGb3JtYXQoJycpO1xyXG5cclxuICAgIGQzLnNlbGVjdCh0aGlzLmdyaWRFbGVtZW50KS5jYWxsKGF4aXMpO1xyXG4gIH1cclxuICByZW5kZXIgKCkge1xyXG4gICAgY29uc3QgdHJhbnNsYXRlID0gYHRyYW5zbGF0ZSgwLCR7dGhpcy5wcm9wcy5ofSlgO1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxnIGNsYXNzTmFtZSA9ICdncmlkJ1xyXG4gICAgICAgIHJlZj17KGVsKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLmdyaWRFbGVtZW50ID0gZWw7XHJcbiAgICAgICAgfX1cclxuICAgICAgICAgdHJhbnNmb3JtID0ge3RoaXMucHJvcHMuZ3JpZFR5cGUgPT09ICd4JyA/IHRyYW5zbGF0ZSA6ICcnfT5cclxuICAgICAgPC9nPlxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbkdyaWQucHJvcFR5cGVzID0ge1xyXG4gIGg6IFByb3BUeXBlcy5udW1iZXIsXHJcbiAgb3JpZW50OiBQcm9wVHlwZXMub25lT2YoWydMZWZ0JywgJ0JvdHRvbScsICdSaWdodCcsICdUb3AnXSksXHJcbiAgc2NhbGU6IFByb3BUeXBlcy5mdW5jLFxyXG4gIGdyaWRUeXBlOiBQcm9wVHlwZXMub25lT2YoWyd4JywgJ3knXSksXHJcbiAgdGlja3M6IFByb3BUeXBlcy5udW1iZXIsXHJcbiAgbGVuOiBQcm9wVHlwZXMubnVtYmVyXHJcbn07XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9jb21wb25lbnRzL0NoYXJ0L0dyaWQvR3JpZC5qcyIsImltcG9ydCAnLi9pbmRleC5zY3NzJztcclxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnO1xyXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xyXG5pbXBvcnQgeyBEb3RzIH0gZnJvbSAnLi4vRG90cy9Eb3RzJztcclxuaW1wb3J0IEdyaWQgZnJvbSAnLi4vR3JpZC9HcmlkJztcclxuaW1wb3J0IEF4aXMgZnJvbSAnLi4vQXhpcy9BeGlzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExpbmVDaGFydCBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgY29uc3RydWN0b3IgKHByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIgKCkge1xyXG4gICAgY29uc3QgbWFyZ2luID0geyB0b3A6IDIwLCByaWdodDogMjAsIGJvdHRvbTogMjAsIGxlZnQ6IDUwIH0sXHJcbiAgICAgIHcgPSB0aGlzLnByb3BzLndpZHRoIC0gKG1hcmdpbi5sZWZ0ICsgbWFyZ2luLnJpZ2h0KSxcclxuICAgICAgaCA9IHRoaXMucHJvcHMuaGVpZ2h0IC0gKG1hcmdpbi50b3AgKyBtYXJnaW4uYm90dG9tKTtcclxuICAgIGNvbnN0IHBhcnNlRGF0ZSA9IGQzLnRpbWVQYXJzZSgnJXgnKTtcclxuXHJcbiAgICB0aGlzLmRhdGEgPSB0aGlzLnByb3BzLmRhdGEubWFwKChkKSA9PiB7XHJcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBkLCB7IGRhdGU6IHBhcnNlRGF0ZShkW3RoaXMucHJvcHMueERhdGFdKSB9KTtcclxuICAgIH0pLnNvcnQoKGEsIGIpID0+IHtcclxuICAgICAgcmV0dXJuIERhdGUucGFyc2UoYVt0aGlzLnByb3BzLnhEYXRhXSkgLSBEYXRlLnBhcnNlKGJbdGhpcy5wcm9wcy54RGF0YV0pO1xyXG4gICAgfSk7XHJcbiAgICBjb25zdCB4ID0gZDMuc2NhbGVUaW1lKClcclxuICAgICAgLmRvbWFpbihkMy5leHRlbnQodGhpcy5kYXRhLCAoZCkgPT4gZC5kYXRlKSlcclxuICAgICAgLnJhbmdlUm91bmQoWzAsIHddKTtcclxuICAgIGNvbnN0IHkgPSBkMy5zY2FsZUxpbmVhcigpXHJcbiAgICAgIC5kb21haW4oWzAsIDUwMF0pXHJcbiAgICAgIC5yYW5nZShbaCwgMF0pO1xyXG4gICAgY29uc3QgbGluZSA9IGQzLmxpbmUoKVxyXG4gICAgICAueCgoZCk9PiB4KGQuZGF0ZSkpXHJcbiAgICAgIC55KChkKT0+IHkoZFt0aGlzLnByb3BzLnlEYXRhXSkpXHJcbiAgICAgIC5jdXJ2ZShkMy5jdXJ2ZUNhcmRpbmFsKTtcclxuICAgIGNvbnN0IHRyYW5zZm9ybSA9IGB0cmFuc2xhdGUoJHttYXJnaW4ubGVmdH0sJHttYXJnaW4udG9wfSlgO1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXZcclxuICAgICAgICBjbGFzc05hbWU9e3RoaXMucHJvcHMuc3R5bGVOYW1lfVxyXG4gICAgICAgIHN0eWxlPXsgeyB3aWR0aDp0aGlzLnByb3BzLndpZHRoLCBoZWlnaHQ6dGhpcy5wcm9wcy5oZWlnaHQgfSB9PlxyXG4gICAgICAgIDxzdmdcclxuICAgICAgICAgIHdpZHRoPXsgJzEwMCUnIH1cclxuICAgICAgICAgIGhlaWdodD17ICcxMDAlJyB9PlxyXG4gICAgICAgICAgPGcgdHJhbnNmb3JtPXt0cmFuc2Zvcm19PlxyXG4gICAgICAgICAgICA8R3JpZFxyXG4gICAgICAgICAgICAgIGg9e2h9XHJcbiAgICAgICAgICAgICAgbGVuPXtofVxyXG4gICAgICAgICAgICAgIHNjYWxlPXt4fVxyXG4gICAgICAgICAgICAgIGdyaWRUeXBlPVwieFwiXHJcbiAgICAgICAgICAgICAgb3JpZW50PXsnQm90dG9tJ31cclxuICAgICAgICAgICAgICB0aWNrcz17dGhpcy5kYXRhLmxlbmd0aCAqIDJ9Lz5cclxuICAgICAgICAgICAgPEdyaWRcclxuICAgICAgICAgICAgICBoPXtofVxyXG4gICAgICAgICAgICAgIGxlbj17d31cclxuICAgICAgICAgICAgICBzY2FsZT17eX1cclxuICAgICAgICAgICAgICBncmlkVHlwZT1cInlcIlxyXG4gICAgICAgICAgICAgIG9yaWVudD17J0xlZnQnfVxyXG4gICAgICAgICAgICAgIHRpY2tzPXs2fS8+XHJcbiAgICAgICAgICAgIDxBeGlzIGg9e2h9XHJcbiAgICAgICAgICAgICAgb3JpZW50PXsnTGVmdCd9XHJcbiAgICAgICAgICAgICAgc2NhbGU9e3l9XHJcbiAgICAgICAgICAgICAgYXhpc1R5cGU9XCJ5XCJcclxuICAgICAgICAgICAgICB0aWNrcz17Nn0gLz5cclxuICAgICAgICAgICAgPEF4aXMgaD17aH1cclxuICAgICAgICAgICAgICBvcmllbnQ9eydCb3R0b20nfVxyXG4gICAgICAgICAgICAgIHNjYWxlPXt4fVxyXG4gICAgICAgICAgICAgIGF4aXNUeXBlPVwieFwiXHJcbiAgICAgICAgICAgICAgdGlja3M9ezh9XHJcbiAgICAgICAgICAgICAgZm9ybWF0PXsnJWQvJW0nfS8+XHJcbiAgICAgICAgICAgIDxEb3RzXHJcbiAgICAgICAgICAgICAgeD17eH1cclxuICAgICAgICAgICAgICB5PXt5fVxyXG4gICAgICAgICAgICAgIGRhdGE9e3RoaXMuZGF0YX1cclxuICAgICAgICAgICAgICB5RGF0YT17dGhpcy5wcm9wcy55RGF0YX0gLz5cclxuICAgICAgICAgICAgPHBhdGhcclxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJsaW5lIHNoYWRvd1wiXHJcbiAgICAgICAgICAgICAgZD17bGluZSh0aGlzLmRhdGEpfVxyXG4gICAgICAgICAgICAgIHN0cm9rZUxpbmVjYXA9XCJyb3VuZFwiLz5cclxuICAgICAgICAgIDwvZz5cclxuICAgICAgICA8L3N2Zz5cclxuICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuTGluZUNoYXJ0LnByb3BUeXBlcyA9IHtcclxuICB3aWR0aDogUHJvcFR5cGVzLm51bWJlcixcclxuICBoZWlnaHQ6IFByb3BUeXBlcy5udW1iZXIsXHJcbiAgeERhdGE6IFByb3BUeXBlcy5zdHJpbmcsXHJcbiAgeURhdGE6IFByb3BUeXBlcy5zdHJpbmcsXHJcbiAgZGF0YTogUHJvcFR5cGVzLmFycmF5LFxyXG4gIHN0eWxlTmFtZTogUHJvcFR5cGVzLnN0cmluZ1xyXG59O1xyXG5cclxuTGluZUNoYXJ0LmRlZmF1bHRQcm9wcyA9IHtcclxuICB3aWR0aDo4MDAsXHJcbiAgaGVpZ2h0OjMwMCxcclxuICB4RGF0YTonZGF5JyxcclxuICB5RGF0YTonY291bnQnLFxyXG4gIGRhdGE6W1xyXG4gICAgeyBkYXk6JzAyLzExLzIwMTYnLCBjb3VudDoxODAgfSxcclxuICAgIHsgZGF5OicwMi8xLzIwMTYnLCBjb3VudDoyNTAgfSxcclxuICAgIHsgZGF5OicwMi8xMC8yMDE2JywgY291bnQ6ODMgfSxcclxuICAgIHsgZGF5OicwMi8yNC8yMDE2JywgY291bnQ6NDMwIH0sXHJcbiAgICB7IGRheTonMDIvMTUvMjAxNicsIGNvdW50OjE0MCB9LFxyXG4gICAgeyBkYXk6JzAyLzI3LzIwMTYnLCBjb3VudDozMTAgfSxcclxuICAgIHsgZGF5OicwMi8xNy8yMDE2JywgY291bnQ6NDMwIH0sXHJcbiAgICB7IGRheTonMDIvOC8yMDE2JywgY291bnQ6MTgwIH0sXHJcbiAgICB7IGRheTonMDIvMTkvMjAxNicsIGNvdW50OjE1MCB9LFxyXG4gICAgeyBkYXk6JzAyLzIvMjAxNicsIGNvdW50OjE4MCB9LFxyXG4gICAgeyBkYXk6JzAyLzMvMjAxNicsIGNvdW50OjI1MCB9XHJcbiAgXVxyXG59O1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29tcG9uZW50cy9DaGFydC9MaW5lQ2hhcnQvTGluZUNoYXJ0LmpzIiwiaW1wb3J0ICcuL2RldmljZUZvcm0uc2Nzcyc7XHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XHJcbmltcG9ydCBTZWxlY3QgZnJvbSAncmVhY3Qtc2VsZWN0JztcclxuaW1wb3J0IHsgYmluZEFjdGlvbkNyZWF0b3JzIH0gZnJvbSAncmVkdXgnO1xyXG5pbXBvcnQge1xyXG4gIGFkZERldmljZSxcclxuICBhZGRJdGVtLFxyXG4gIHNldFZhbHVlLFxyXG4gIHJlc2V0UHJvdG8sXHJcbiAgbG9hZExvY2F0aW9ucyxcclxuICBhZGRMb2NhdGlvbixcclxuICBkZWxldGVMb2NhdGlvbixcclxuICBkZXZpY2VzSW5Mb2NhdGlvblxyXG59IGZyb20gJy4uLy4uL2FjdGlvbnMvYnVpbGRlci5hY3Rpb24nO1xyXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xyXG5pbXBvcnQgRm9ybXN5LCB7IEhPQyB9IGZyb20gJ2Zvcm1zeS1yZWFjdCc7XHJcbmltcG9ydCBGaWVsZCBmcm9tICcuLi9BdXRoL0ZpZWxkL0ZpZWxkJztcclxuaW1wb3J0IFNlbGVjdExvY2F0aW9uIGZyb20gJy4uL1NlbGVjdExvY2F0aW9uL1NlbGVjdExvY2F0aW9uJztcclxuaW1wb3J0IHsgc2V0SXRlbURlZmF1bHREYXRhIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgeyBzZW5kTm90aWZpY2F0aW9uV1MgfSBmcm9tICcuLi8uLi9hY3Rpb25zL25vdGlmaWNhdGlvbnMuYWN0aW9uJztcclxuaW1wb3J0IHsgdXBkYXRlRGV2aWNlIH0gZnJvbSAnLi4vLi4vYWN0aW9ucy9kZXZpY2VzLmFjdGlvbic7XHJcblxyXG5jb25zdCBpdGVtc1RvQ2hvb3NlID0gW1xyXG4gICdUb2dnbGUnLFxyXG4gICdUaW1lcicsXHJcbiAgJ0xpbmVDaGFydCcsXHJcbiAgJ1ZhbHVlJyxcclxuICAnUmFuZ2UnXHJcbl07XHJcblxyXG5jbGFzcyBEZXZpY2VGb3JtIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICBjb25zdHJ1Y3RvciAocHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgIGl0ZW1zOiBbXVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudERpZE1vdW50ICgpIHtcclxuICAgIHRoaXMucHJvcHMubG9hZExvY2F0aW9ucygpO1xyXG4gIH1cclxuXHJcbiAgYWRkSXRlbSA9IChlKSA9PiB7XHJcbiAgICBjb25zdCBuZXdJdGVtID0ge1xyXG4gICAgICBuYW1lOiBlLnRhcmdldC52YWx1ZVxyXG4gICAgfTtcclxuXHJcbiAgICBzZXRJdGVtRGVmYXVsdERhdGEobmV3SXRlbSk7XHJcbiAgICB0aGlzLnByb3BzLmFkZEl0ZW0obmV3SXRlbSk7XHJcbiAgfTtcclxuXHJcbiAgY3JlYXRlQnV0dG9uID0gKGxhYmVsLCBpbmRleCkgPT4ge1xyXG4gICAgcmV0dXJuICg8aW5wdXRcclxuICAgICAga2V5PXsgaW5kZXggfVxyXG4gICAgICB0eXBlPVwiYnV0dG9uXCJcclxuICAgICAgY2xhc3NOYW1lPVwiZm9ybS1idXR0b25cIlxyXG4gICAgICBvbkNsaWNrPXsgdGhpcy5hZGRJdGVtIH1cclxuICAgICAgdmFsdWU9eyBsYWJlbCB9IC8+XHJcbiAgICApO1xyXG4gIH07XHJcblxyXG4gIGNyZWF0ZUJ1dHRvbnMgKCkge1xyXG4gICAgcmV0dXJuIGl0ZW1zVG9DaG9vc2UubWFwKHRoaXMuY3JlYXRlQnV0dG9uKTtcclxuICB9XHJcblxyXG4gIGhhbmRsZVVzZXJJbnB1dCA9ICgpID0+IHtcclxuICAgIHRoaXMucHJvcHMuc2V0VmFsdWUoJ25hbWUnLCB0aGlzLm5hbWUuZ2V0VmFsdWUoKSk7XHJcbiAgfTtcclxuXHJcbiAgc2VsZWN0TG9jYXRpb24gPSAodmFsdWUpID0+IHtcclxuICAgIHRoaXMucHJvcHMuc2V0VmFsdWUoJ2xvY2F0aW9uJywgdmFsdWUpO1xyXG4gIH07XHJcblxyXG4gIGhhbmRsZVN1Ym1pdCA9ICgpID0+IHtcclxuICAgIGlmICh0eXBlb2YgdGhpcy5wcm9wcy5zZXR0aW5ncy5faWQgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgIHRoaXMucHJvcHMudXBkYXRlRGV2aWNlKHRoaXMucHJvcHMuc2V0dGluZ3MsIHRoaXMucHJvcHMuc2V0dGluZ3MuX2lkKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMucHJvcHMuYWRkRGV2aWNlKHRoaXMucHJvcHMuc2V0dGluZ3MpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGVuYWJsZUJ1dHRvbiA9ICgpID0+IHtcclxuICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICBjYW5TdWJtaXQ6IHRydWVcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIGRpc2FibGVCdXR0b24gPSAoKSA9PiB7XHJcbiAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgY2FuU3VibWl0OiBmYWxzZVxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgcmVuZGVyICgpIHtcclxuICAgIGNvbnN0IGRlZmF1bHRMb2NhdGlvbiA9IHRoaXMucHJvcHMuc2V0dGluZ3MubG9jYXRpb247XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgPEZvcm1zeS5Gb3JtXHJcbiAgICAgICAgb25TdWJtaXQ9e3RoaXMuaGFuZGxlU3VibWl0fVxyXG4gICAgICAgIG9uVmFsaWQ9e3RoaXMuZW5hYmxlQnV0dG9ufVxyXG4gICAgICAgIG9uSW52YWxpZD17dGhpcy5kaXNhYmxlQnV0dG9ufVxyXG4gICAgICAgIG9uQ2hhbmdlPXsgdGhpcy5oYW5kbGVVc2VySW5wdXQgfVxyXG4gICAgICAgIGNsYXNzTmFtZT1cImRldmljZS1mb3JtXCI+XHJcbiAgICAgICAgPEZpZWxkXHJcbiAgICAgICAgICBuYW1lPVwiRGV2aWNlIG5hbWVcIlxyXG4gICAgICAgICAgdHlwZT1cInRleHRcIlxyXG4gICAgICAgICAgcmVmPXsoaW5wdXQpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5uYW1lID0gaW5wdXQ7XHJcbiAgICAgICAgICB9fVxyXG4gICAgICAgICAgdGV4dD17J1BsZWFzZSBlbnRlciBkZXZpY2UgbmFtZSd9XHJcbiAgICAgICAgICB2YWxpZGF0aW9ucz17e1xyXG4gICAgICAgICAgICBtYXRjaFJlZ2V4cDogL1tcXHdcXGRcXHNdKy9cclxuICAgICAgICAgIH19XHJcbiAgICAgICAgICB2YWxpZGF0aW9uRXJyb3I9XCJUaGlzIGlzIG5vdCBhIHZhbGlkIG5hbWVcIlxyXG4gICAgICAgICAgcmVxdWlyZWRcclxuICAgICAgICAgIHZhbHVlPXt0aGlzLnByb3BzLnNldHRpbmdzLm5hbWV9IC8+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnB1dC1jb250YWluZXJcIj5cclxuICAgICAgICAgIDxsYWJlbD5Mb2NhdGlvbjo8L2xhYmVsPlxyXG4gICAgICAgICAgICA8U2VsZWN0TG9jYXRpb25cclxuICAgICAgICAgICAgICBzZWxlY3RMb2NhdGlvbj17dGhpcy5zZWxlY3RMb2NhdGlvbn1cclxuICAgICAgICAgICAgICBsb2NhdGlvbnM9e3RoaXMucHJvcHMubG9jYXRpb25zfVxyXG4gICAgICAgICAgICAgIGFkZExvY2F0aW9uPXt0aGlzLnByb3BzLmFkZExvY2F0aW9ufVxyXG4gICAgICAgICAgICAgIGRlbGV0ZUxvY2F0aW9uPXt0aGlzLnByb3BzLmRlbGV0ZUxvY2F0aW9ufVxyXG4gICAgICAgICAgICAgIGRlZmF1bHRMb2NhdGlvbj17ZGVmYXVsdExvY2F0aW9ufVxyXG4gICAgICAgICAgICAgIGRldmljZUV4aXN0SW5Mb2NhdGlvbj17dGhpcy5wcm9wcy5kZXZpY2VFeGlzdEluTG9jYXRpb259XHJcbiAgICAgICAgICAgICAgZGV2aWNlSW5Mb2NhdGlvbj17dGhpcy5wcm9wcy5kZXZpY2VJbkxvY2F0aW9ufVxyXG4gICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdj5cclxuICAgICAgICAgIDxsYWJlbD4gRGV2aWNlIGNvbmZpZzo8L2xhYmVsPlxyXG4gICAgICAgICAgeyB0aGlzLmNyZWF0ZUJ1dHRvbnMoKSB9XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtYWluLWJ1dHRvbi13cmFwIHNpZ251cC1maWVsZC1ncm91cCBzaWdudXAtYnRuLWdyb3VwXCI+XHJcbiAgICAgICAgICA8aW5wdXQgY2xhc3NOYW1lPVwiYnRuIGJ0bi0tcHJpbWFyeSBidG4tLXNpZ251cCBidG4tLXNpZ251cC1hY3RpdmVcIlxyXG4gICAgICAgICAgICB0eXBlPVwic3VibWl0XCJcclxuICAgICAgICAgICAgdmFsdWU9XCJTYXZlXCJcclxuICAgICAgICAgICAgZGlzYWJsZWQgPSB7XHJcbiAgICAgICAgICAgICAgIXRoaXMuc3RhdGUuY2FuU3VibWl0IHx8XHJcbiAgICAgICAgICAgICAgdGhpcy5wcm9wcy5zdGF0dXMgPT09ICdQRU5ESU5HJ1xyXG4gICAgICAgICAgICB9IC8+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9Gb3Jtc3kuRm9ybT5cclxuICAgICk7XHJcbiAgfVxyXG59XHJcbmZ1bmN0aW9uIG1hcFN0YXRlVG9Qcm9wcyAoc3RvcmUpIHtcclxuICByZXR1cm4ge1xyXG4gICAgc2V0dGluZ3M6IHN0b3JlLmJ1aWxkZXIuZGV2aWNlLFxyXG4gICAgc3RhdHVzOiBzdG9yZS5idWlsZGVyLnVwbG9hZFN0YXR1cyxcclxuICAgIGxvY2F0aW9uczogc3RvcmUuYnVpbGRlci5sb2NhdGlvbnMsXHJcbiAgICBkZXZpY2VJbkxvY2F0aW9uOiBzdG9yZS5idWlsZGVyLmRldmljZUluTG9jYXRpb25cclxuICB9O1xyXG59XHJcbmZ1bmN0aW9uIG1hcERpc3BhdGNoVG9Qcm9wcyAoZGlzcGF0Y2gpIHtcclxuICByZXR1cm4ge1xyXG4gICAgc2V0VmFsdWU6IGJpbmRBY3Rpb25DcmVhdG9ycyhzZXRWYWx1ZSwgZGlzcGF0Y2gpLFxyXG4gICAgYWRkSXRlbTogIGJpbmRBY3Rpb25DcmVhdG9ycyhhZGRJdGVtLCBkaXNwYXRjaCksXHJcbiAgICByZXNldFByb3RvOiBiaW5kQWN0aW9uQ3JlYXRvcnMocmVzZXRQcm90bywgZGlzcGF0Y2gpLFxyXG4gICAgYWRkRGV2aWNlOiBiaW5kQWN0aW9uQ3JlYXRvcnMoYWRkRGV2aWNlLCBkaXNwYXRjaCksXHJcbiAgICB1cGRhdGVEZXZpY2U6IChkYXRhLCBpZCkgPT4gZGlzcGF0Y2godXBkYXRlRGV2aWNlKGRhdGEsIGlkKSksXHJcbiAgICBsb2FkTG9jYXRpb25zOiAoKSA9PiBkaXNwYXRjaChsb2FkTG9jYXRpb25zKCkpLFxyXG4gICAgYWRkTG9jYXRpb246IChsb2NhdGlvbikgPT4gZGlzcGF0Y2goYWRkTG9jYXRpb24obG9jYXRpb24pKSxcclxuICAgIGRlbGV0ZUxvY2F0aW9uOiAoaWQpID0+IGRpc3BhdGNoKGRlbGV0ZUxvY2F0aW9uKGlkKSksXHJcbiAgICBkZXZpY2VFeGlzdEluTG9jYXRpb246IChpZCwgY2FsbGJhY2spID0+XHJcbiAgICAgIGRpc3BhdGNoKGRldmljZXNJbkxvY2F0aW9uKGlkLCBjYWxsYmFjaykpXHJcbiAgfTtcclxufVxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKShEZXZpY2VGb3JtKTtcclxuXHJcbkRldmljZUZvcm0ucHJvcFR5cGVzID0ge1xyXG4gIHNldFZhbHVlOiBQcm9wVHlwZXMuZnVuYyxcclxuICBhZGRJdGVtOiBQcm9wVHlwZXMuZnVuYyxcclxuICByZXNldFByb3RvOiBQcm9wVHlwZXMuZnVuYyxcclxuICBhZGREZXZpY2U6ICBQcm9wVHlwZXMuZnVuYyxcclxuICBzZXR0aW5nczogUHJvcFR5cGVzLm9iamVjdCxcclxuICBzdGF0dXM6IFByb3BUeXBlcy5zdHJpbmcsXHJcbiAgdXBkYXRlRGV2aWNlOiBQcm9wVHlwZXMuZnVuYyxcclxuICBsb2FkTG9jYXRpb25zOiBQcm9wVHlwZXMuZnVuYyxcclxuICBsb2NhdGlvbnM6IFByb3BUeXBlcy5hcnJheSxcclxuICBhZGRMb2NhdGlvbjogUHJvcFR5cGVzLmZ1bmMsXHJcbiAgZGVsZXRlTG9jYXRpb246IFByb3BUeXBlcy5mdW5jLFxyXG4gIGRldmljZUluTG9jYXRpb246IFByb3BUeXBlcy5ib29sLFxyXG4gIGRldmljZUV4aXN0SW5Mb2NhdGlvbjogUHJvcFR5cGVzLmZ1bmNcclxufTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbXBvbmVudHMvRGV2aWNlRm9ybS9kZXZpY2VGb3JtLmpzIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcclxuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuaW1wb3J0ICcuL2luZGV4LnNjc3MnO1xyXG5pbXBvcnQgeyBTZXR0aW5nc0xpc3QgfSBmcm9tICcuLi9TZXR0aW5nc0xpc3QvU2V0dGluZ3NMaXN0JztcclxuaW1wb3J0IHtcclxuICBhZGREZXNjcmlwdGlvbixcclxuICBzZXRJdGVtVmFsdWUsXHJcbiAgc2V0UGFyYW1ldGVycyB9IGZyb20gJy4uLy4uL2FjdGlvbnMvYnVpbGRlci5hY3Rpb24nO1xyXG5pbXBvcnQgeyBiaW5kQWN0aW9uQ3JlYXRvcnMgfSBmcm9tICdyZWR1eCc7XHJcblxyXG5jb25zdCBQcm90b3R5cGUgPSAocHJvcHMpID0+IChcclxuICA8ZGl2IGNsYXNzTmFtZT1cIlByb3RvdHlwZVwiPlxyXG4gICAgPGgzPntwcm9wcy5kZXZpY2UubmFtZSB8fCAnRGV2aWNlIG5hbWUnfTwvaDM+XHJcbiAgICA8U2V0dGluZ3NMaXN0XHJcbiAgICAgIGFkZERlc2NyaXB0aW9uPXtwcm9wcy5hZGREZXNjcmlwdGlvbn1cclxuICAgICAgc2V0dGluZ3M9e3Byb3BzLmRldmljZX1cclxuICAgICAgZGVsZXRlSXRlbT17cHJvcHMuZGVsZXRlSXRlbX1cclxuICAgICAgc2V0SXRlbVZhbHVlPXtwcm9wcy5zZXRJdGVtVmFsdWV9XHJcbiAgICAgIHNldFBhcmFtZXRlcnM9e3Byb3BzLnNldFBhcmFtZXRlcnN9XHJcbiAgICAvPlxyXG4gIDwvZGl2PlxyXG4pO1xyXG5cclxuZnVuY3Rpb24gbWFwU3RhdGVUb1Byb3BzIChzdG9yZSkge1xyXG4gIHJldHVybiB7XHJcbiAgICBzZXR0aW5nczogc3RvcmUuYnVpbGRlci5kZXZpY2VcclxuICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBtYXBEaXNwYXRjaFRvUHJvcHMgKGRpc3BhdGNoKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIGFkZERlc2NyaXB0aW9uOiBiaW5kQWN0aW9uQ3JlYXRvcnMoYWRkRGVzY3JpcHRpb24sIGRpc3BhdGNoKSxcclxuICAgIHNldEl0ZW1WYWx1ZTogYmluZEFjdGlvbkNyZWF0b3JzKHNldEl0ZW1WYWx1ZSwgZGlzcGF0Y2gpLFxyXG4gICAgc2V0UGFyYW1ldGVyczogYmluZEFjdGlvbkNyZWF0b3JzKHNldFBhcmFtZXRlcnMsIGRpc3BhdGNoKVxyXG4gIH07XHJcbn1cclxuXHJcblByb3RvdHlwZS5wcm9wVHlwZXMgPSB7XHJcbiAgZGV2aWNlOiBQcm9wVHlwZXMub2JqZWN0LFxyXG4gIGFkZERlc2NyaXB0aW9uOiBQcm9wVHlwZXMuZnVuYyxcclxuICBkZWxldGVJdGVtOiBQcm9wVHlwZXMuZnVuYyxcclxuICBzZXRJdGVtVmFsdWU6IFByb3BUeXBlcy5mdW5jLFxyXG4gIHNldHRpbmdzOiBQcm9wVHlwZXMub2JqZWN0LFxyXG4gIHNldFBhcmFtZXRlcnM6IFByb3BUeXBlcy5mdW5jXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKShQcm90b3R5cGUpO1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29tcG9uZW50cy9Qcm90b3R5cGUvUHJvdG90eXBlLmpzIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcclxuaW1wb3J0ICcuL1JhbmdlU3R5bGUuc2Nzcyc7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmFuZ2VTZXR0aW5ncyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgY29uc3RydWN0b3IgKHByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcblxyXG4gICAgbGV0IG1pblZhbHVlLCBtYXhWYWx1ZTtcclxuXHJcbiAgICBpZiAodGhpcy5wcm9wcy5wYXJhbXMpIHtcclxuICAgICAgbWluVmFsdWUgPSB0aGlzLnByb3BzLnBhcmFtcy5taW5WYWx1ZTtcclxuICAgICAgbWF4VmFsdWUgPSB0aGlzLnByb3BzLnBhcmFtcy5tYXhWYWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICB2YWx1ZTogMCxcclxuICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgbWluVmFsdWU6IG1pblZhbHVlIHx8IDAsXHJcbiAgICAgICAgbWF4VmFsdWU6IG1heFZhbHVlIHx8IDEwMFxyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuc2V0TWluVmFsdWUgPSAoZSkgPT4ge1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBwYXJhbXM6IHtcclxuICAgICAgICAgIG1pblZhbHVlOiBwYXJzZUludChlLnRhcmdldC52YWx1ZSksXHJcbiAgICAgICAgICBtYXhWYWx1ZTogdGhpcy5zdGF0ZS5wYXJhbXMubWF4VmFsdWVcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnNldE1heFZhbHVlID0gKGUpID0+IHtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgICBtYXhWYWx1ZTogcGFyc2VJbnQoZS50YXJnZXQudmFsdWUpLFxyXG4gICAgICAgICAgbWluVmFsdWU6IHRoaXMuc3RhdGUucGFyYW1zLm1pblZhbHVlXHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBjb21wb25lbnREaWRNb3VudCAoKSB7XHJcbiAgICBpZiAodHlwZW9mIHRoaXMucHJvcHMuZGF0YSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgdmFsdWU6IHRoaXMucHJvcHMuZGF0YVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgKG5leHRQcm9wcykge1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIHZhbHVlOiBuZXh0UHJvcHMuZGF0YSB8fCAwXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIG9uQ2hhbmdlID0gKGUpID0+IHtcclxuICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICB2YWx1ZTogZS50YXJnZXQudmFsdWVcclxuICAgIH0pO1xyXG5cclxuICAgIGlmICh0eXBlb2YgdGhpcy5wcm9wcy5vblRpbWVyQ2hhbmdlICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICB0aGlzLnByb3BzLm9uVGltZXJDaGFuZ2UoZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXRWYWx1ZSA9IChlKSA9PiB7XHJcbiAgICBpZiAodHlwZW9mIHRoaXMucHJvcHMuc2V0VGltZXJWYWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgdGhpcy5wcm9wcy5zZXRUaW1lclZhbHVlKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnByb3BzLnNldEl0ZW1WYWx1ZSh0aGlzLnN0YXRlLnZhbHVlLFxyXG4gICAgICB0aGlzLnByb3BzLml0ZW1JZCxcclxuICAgICAgdGhpcy5wcm9wcy5kZXZpY2VJZCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXRQYXJhbXMgPSAoKSA9PiB7XHJcbiAgICB0aGlzLnByb3BzLnNldFBhcmFtZXRlcnMoXHJcbiAgICAgIHRoaXMucHJvcHMuaXRlbUlkLFxyXG4gICAgICB0aGlzLnN0YXRlLnBhcmFtcyk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIgKCkge1xyXG4gICAgY29uc3QgeyBtaW4sIG1heCB9ID0gdGhpcy5wcm9wcztcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17IGAkeyB0aGlzLnByb3BzLnN0eWxlTmFtZSB9YCB9PlxyXG4gICAgICAgIHt0aGlzLnByb3BzLnNob3dNaW5NYXggP1xyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyYW5nZS1zZXR0aW5nc1wiPlxyXG4gICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJyYW5nZS1zZXR0aW5nc19fdGl0bGVcIj5cclxuICAgICAgICAgICAgICBFbnRlciBtaW4gYW5kIG1heCB2YWx1ZXMgZm9yIHNldHRpbmdcclxuICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJhbmdlLXNldHRpbmdzX192YWxcIj5cclxuICAgICAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgICAgIHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgbmFtZT1cIm1pblwiXHJcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkVudGVyIG1pbiB2YWx1ZVwiXHJcbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17IHRoaXMuc2V0TWluVmFsdWUgfVxyXG4gICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUucGFyYW1zLm1pblZhbHVlfS8+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJhbmdlLXNldHRpbmdzX192YWxcIj5cclxuICAgICAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgICAgIHR5cGU9XCJudW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgbmFtZT1cIm1heFwiXHJcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkVudGVyIG1heCB2YWx1ZVwiXHJcbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17IHRoaXMuc2V0TWF4VmFsdWUgfVxyXG4gICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUucGFyYW1zLm1heFZhbHVlfS8+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8YnV0dG9uXHJcbiAgICAgICAgICAgICAgb25DbGljaz17IHRoaXMuc2V0UGFyYW1zIH1cclxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJidG4gcmFuZ2Utc2V0dGluZ3NfX2J0blwiPlxyXG4gICAgICAgICAgICAgICAgU3VibWl0XHJcbiAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgPC9kaXY+IDpcclxuICAgICAgICAgIG51bGxcclxuICAgICAgICB9XHJcbiAgICAgICAge3RoaXMucHJvcHMuaGlkZUxhYmVsID8gbnVsbCA6IDxwIGNsYXNzTmFtZT0ncmFuZ2VfdmFsdWUnPlxyXG4gICAgICAgICAge3RoaXMuc3RhdGUudmFsdWV9PC9wPn1cclxuICAgICAgICA8aW5wdXRcclxuICAgICAgICAgIHR5cGU9J3JhbmdlJ1xyXG4gICAgICAgICAgb25DaGFuZ2U9eyB0aGlzLm9uQ2hhbmdlIH1cclxuICAgICAgICAgIG9uTW91c2VVcD17IHRoaXMuc2V0VmFsdWUgfVxyXG4gICAgICAgICAgbWluPXttaW4gfHwgdGhpcy5zdGF0ZS5wYXJhbXMubWluVmFsdWV9XHJcbiAgICAgICAgICBtYXg9e21heCB8fCB0aGlzLnN0YXRlLnBhcmFtcy5tYXhWYWx1ZX1cclxuICAgICAgICAgIHN0ZXA9ezF9XHJcbiAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS52YWx1ZX1cclxuICAgICAgICAvPlxyXG4gICAgICA8L2Rpdj5cclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5SYW5nZVNldHRpbmdzLnByb3BUeXBlcyA9IHtcclxuICBzdHlsZU5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXHJcbiAgaXRlbUlkOiBQcm9wVHlwZXMubnVtYmVyLFxyXG4gIG1heDogUHJvcFR5cGVzLm51bWJlcixcclxuICBtaW46IFByb3BUeXBlcy5udW1iZXIsXHJcbiAgc2V0RGV2aWNlOiBQcm9wVHlwZXMuZnVuYyxcclxuICBoaWRlTGFiZWw6IFByb3BUeXBlcy5ib29sLFxyXG4gIHNldEl0ZW1WYWx1ZTogUHJvcFR5cGVzLmZ1bmMsXHJcbiAgZGF0YTogUHJvcFR5cGVzLmFueSxcclxuICBvblRpbWVyQ2hhbmdlOlByb3BUeXBlcy5mdW5jLFxyXG4gIGRldmljZUlkOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG4gIHNldFRpbWVyVmFsdWU6IFByb3BUeXBlcy5mdW5jLFxyXG4gIHNldFBhcmFtZXRlcnM6IFByb3BUeXBlcy5mdW5jLFxyXG4gIHNob3dNaW5NYXg6IFByb3BUeXBlcy5ib29sLFxyXG4gIG1heFZhbHVlOiBQcm9wVHlwZXMubnVtYmVyLFxyXG4gIG1pblZhbHVlOiBQcm9wVHlwZXMubnVtYmVyLFxyXG4gIHBhcmFtczogUHJvcFR5cGVzLm9iamVjdFxyXG59O1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29tcG9uZW50cy9SYW5nZVNldHRpbmdzL1JhbmdlLmpzIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcclxuaW1wb3J0IHsgUG9wdXAgfSBmcm9tICcuLi8uLi9jb21wb25lbnRzL1BvcHVwL1BvcHVwJztcclxuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9CdXR0b24vQnV0dG9uJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlbGVjdExvY2F0aW9uIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICBjb25zdHJ1Y3RvciAocHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuXHJcbiAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICBpbnB1dDogZmFsc2UsXHJcbiAgICAgIGxvY2F0aW9uVmFsdWU6ICcnLFxyXG4gICAgICBpbnB1dFZhbHVlOiAnJyxcclxuICAgICAgcG9wdXBTaG93bjogZmFsc2UsXHJcbiAgICAgIGlkTG9jYXRpb246ICcnXHJcbiAgICB9O1xyXG4gIH1cclxuICBzZXRQb3B1cFNob3duID0gKGlkKSA9PiB7XHJcbiAgICBjb25zdCBjdXJyZW50U3RhdGUgPSB0aGlzLnN0YXRlLnBvcHVwU2hvd247XHJcblxyXG4gICAgY29uc3QgX3NldFBvcHVwU2hvd24gPSAoKSA9PiB7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIHBvcHVwU2hvd246ICFjdXJyZW50U3RhdGUsXHJcbiAgICAgICAgaWRMb2NhdGlvbjogaWRcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGlmICh0eXBlb2YgaWQgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgIHRoaXMucHJvcHMuZGV2aWNlRXhpc3RJbkxvY2F0aW9uKGlkLCBfc2V0UG9wdXBTaG93bik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBfc2V0UG9wdXBTaG93bigpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHNob3dJbnB1dExvY2F0aW9uID0gKCkgPT4ge1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIGlucHV0OiAhdGhpcy5zdGF0ZS5pbnB1dFxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgc2V0SW5wdXRWYWx1ZSA9IChlKSA9PiB7XHJcbiAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgaW5wdXRWYWx1ZTogZS50YXJnZXQudmFsdWVcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIGRlbGV0ZVNlbGVjdGVkTG9jYXRpb24gPSAoaWQpID0+IHtcclxuICAgIHRoaXMucHJvcHMuZGVsZXRlTG9jYXRpb24oaWQpO1xyXG4gIH07XHJcblxyXG4gIHNldExvY2F0aW9uVmFsdWUgPSAobG9jYXRpb24pID0+IHtcclxuICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICBsb2NhdGlvblZhbHVlOiBsb2NhdGlvbi5sYWJlbFxyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5wcm9wcy5zZWxlY3RMb2NhdGlvbihsb2NhdGlvbi5sYWJlbCk7XHJcbiAgICB0aGlzLnNob3dJbnB1dExvY2F0aW9uKCk7XHJcbiAgfTtcclxuXHJcblxyXG4gIGFkZExvY2F0aW9uVmFsdWUgPSAoKSA9PiB7XHJcbiAgICBpZiAodGhpcy5zdGF0ZS5pbnB1dFZhbHVlLnRyaW0oKSAhPT0gJycpIHtcclxuICAgICAgdGhpcy5wcm9wcy5hZGRMb2NhdGlvbih0aGlzLnN0YXRlLmlucHV0VmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICBpbnB1dFZhbHVlOiAnJ1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIgKCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGRpdj5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJTZWxlY3QtY29udHJvbFwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiU2VsZWN0LXZhbHVlIHNlbGVjdC1tZW51LWNvbnRhaW5lclwiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZWxlY3QtbWVudS1sYWJlbFwiXHJcbiAgICAgICAgICAgIG9uQ2xpY2s9eyB0aGlzLnNob3dJbnB1dExvY2F0aW9uIH0+XHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIlNlbGVjdC12YWx1ZS1sYWJlbFwiPlxyXG4gICAgICAgICAgICAgIHsgIXRoaXMuc3RhdGUubG9jYXRpb25WYWx1ZSA/XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmRlZmF1bHRMb2NhdGlvbiA6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmxvY2F0aW9uVmFsdWUgfVxyXG4gICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgIDxpIGNsYXNzTmFtZT17YHNlbGVjdC10b2dnbGUgZmEgJHt0aGlzLnN0YXRlLmlucHV0ID9cclxuICAgICAgICAgICAgICAnZmEtY2FyZXQtdXAnIDogJ2ZhLWNhcmV0LWRvd24nfWB9PjwvaT5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIHt0aGlzLnN0YXRlLmlucHV0ID9cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIlNlbGVjdC1tZW51X19vdXRlclwiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJTZWxlY3QtaW5wdXQtbG9jYXRpb25cIj5cclxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCJcclxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkFkZCBuZXcgbG9jYXRpb25cIlxyXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cIlNlbGVjdC1pbnB1dF9hZGQtbG9jYXRpb25cIlxyXG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLnNldElucHV0VmFsdWV9XHJcbiAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuaW5wdXRWYWx1ZX0vPlxyXG4gICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1wbHVzIFNlbGVjdC1pbnB1dF9hZGQtbG9jYXRpb25faWNvblwiXHJcbiAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5hZGRMb2NhdGlvblZhbHVlfT48L2k+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICA8dWwgY2xhc3NOYW1lPVwiU2VsZWN0LW1lbnVcIj5cclxuICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLmxvY2F0aW9ucy5tYXAoKGxvY2F0aW9uLCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgPGxpIGtleT17aX0gY2xhc3NOYW1lPVwiU2VsZWN0LW9wdGlvblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiU2VsZWN0LW9wdGlvbl9faXRlbVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eyAoZSkgPT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuc2V0TG9jYXRpb25WYWx1ZShsb2NhdGlvbikpfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAge2xvY2F0aW9uLmxhYmVsfVxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtdHJhc2ggU2VsZWN0LW9wdGlvbl9faWNvblwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eyAoZSkgPT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5zZXRQb3B1cFNob3duKGxvY2F0aW9uLl9pZCkpfT5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvaT5cclxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfSl9XHJcbiAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgPC9kaXY+IDogbnVsbCB9XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxQb3B1cFxyXG4gICAgICAgICAgc2V0UG9wdXBTaG93bj17dGhpcy5zZXRQb3B1cFNob3dufVxyXG4gICAgICAgICAgcG9wdXBTaG93bj17dGhpcy5zdGF0ZS5wb3B1cFNob3dufVxyXG4gICAgICAgICAgaGVhZGVyPVwiQ29uZmlybSB0aGUgYWN0aW9uXCJcclxuICAgICAgICAgIHRleHQ9e3RoaXMucHJvcHMuZGV2aWNlSW5Mb2NhdGlvbiA/XHJcbiAgICAgICAgICAgICdZb3UgY2FuXFwndCBkZWxldGUgdGhpcyBsb2NhdGlvbiwgYmVjYXVzZSB5b3UgaGF2ZSBkZXZpY2VzIGluIGl0JyA6XHJcbiAgICAgICAgICAgICdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIHRoaXMgbG9jYXRpb24/J1xyXG4gICAgICAgICAgfT5cclxuICAgICAgICAgIDxCdXR0b25cclxuICAgICAgICAgICAgZGlzYWJsZWQ9e3RoaXMucHJvcHMuZGV2aWNlSW5Mb2NhdGlvbn1cclxuICAgICAgICAgICAgc2V0UG9wdXBTaG93bj17dGhpcy5zZXRQb3B1cFNob3dufVxyXG4gICAgICAgICAgICBva0hhbmRsZXI9eygpID0+IHtcclxuICAgICAgICAgICAgICB0aGlzLmRlbGV0ZVNlbGVjdGVkTG9jYXRpb24odGhpcy5zdGF0ZS5pZExvY2F0aW9uKTtcclxuICAgICAgICAgICAgICB0aGlzLnNldFBvcHVwU2hvd24oKTtcclxuICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgY2xhc3NOYW1lPXt0aGlzLnByb3BzLmRldmljZUluTG9jYXRpb24gP1xyXG4gICAgICAgICAgICAgICdidG4gYnRuLS1kZWZhdWx0JyA6XHJcbiAgICAgICAgICAgICAgJ2J0biBwb3B1cF9fYnRuJ31cclxuICAgICAgICAgICAgaW5uZXJUZXh0PXsnT2snfVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICAgIDxCdXR0b25cclxuICAgICAgICAgICAgb2tIYW5kbGVyPXsoKSA9PiB7XHJcbiAgICAgICAgICAgICAgdGhpcy5zZXRQb3B1cFNob3duKCk7XHJcbiAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgIGNsYXNzTmFtZT17J2J0biBidG4tLWRlZmF1bHQgcG9wdXBfX2J0bid9XHJcbiAgICAgICAgICAgIGlubmVyVGV4dD17J0NhbmNlbCd9XHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgIDwvUG9wdXA+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcblNlbGVjdExvY2F0aW9uLnByb3BUeXBlcyA9IHtcclxuICBsb2NhdGlvbnM6IFByb3BUeXBlcy5hcnJheSxcclxuICBhZGRMb2NhdGlvbjogUHJvcFR5cGVzLmZ1bmMsXHJcbiAgZGVsZXRlTG9jYXRpb246IFByb3BUeXBlcy5mdW5jLFxyXG4gIHNlbGVjdExvY2F0aW9uOiBQcm9wVHlwZXMuZnVuYyxcclxuICBkZWZhdWx0TG9jYXRpb246IFByb3BUeXBlcy5zdHJpbmcsXHJcbiAgZGV2aWNlRXhpc3RJbkxvY2F0aW9uOiBQcm9wVHlwZXMuZnVuYyxcclxuICBkZXZpY2VJbkxvY2F0aW9uOiBQcm9wVHlwZXMuYm9vbFxyXG59O1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29tcG9uZW50cy9TZWxlY3RMb2NhdGlvbi9TZWxlY3RMb2NhdGlvbi5qcyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XHJcbmltcG9ydCB7IHNldHRpbmdzQ29tcG9uZW50cyB9IGZyb20gJy4uLy4uL2RhdGEvY29tcG9uZW50c05hbWVzJztcclxuaW1wb3J0IHsgU2V0dGluZ3NMaXN0SXRlbSB9IGZyb21cclxuJy4uL1NldHRpbmdzTGlzdEl0ZW0vU2V0dGluZ3NMaXN0SXRlbSc7XHJcblxyXG5leHBvcnQgY29uc3QgU2V0dGluZ3NMaXN0ID0gKHByb3BzKSA9PiAoXHJcbiAgPGRpdiBjbGFzc05hbWU9XCJzZXR0aW5ncy1ibG9ja1wiPlxyXG4gICAge3Byb3BzLnNldHRpbmdzLml0ZW1zLm1hcCgoc2V0dGluZywgaSkgPT4ge1xyXG4gICAgICBjb25zdCBJdGVtID0gc2V0dGluZ3NDb21wb25lbnRzW3NldHRpbmcubmFtZV07XHJcblxyXG4gICAgICByZXR1cm4gKFxyXG4gICAgICAgIDxTZXR0aW5nc0xpc3RJdGVtXHJcbiAgICAgICAgICBrZXk9e2l9XHJcbiAgICAgICAgICBhZGREZXNjcmlwdGlvbj17cHJvcHMuYWRkRGVzY3JpcHRpb259XHJcbiAgICAgICAgICBzdHlsZU5hbWU9e2BzZXR0aW5ncy0ke3NldHRpbmcubmFtZS50b0xvd2VyQ2FzZSgpfWB9XHJcbiAgICAgICAgICBuYW1lPXtzZXR0aW5nLm5hbWV9XHJcbiAgICAgICAgICBkZWxldGVJdGVtPXtwcm9wcy5kZWxldGVJdGVtfVxyXG4gICAgICAgICAgc2V0SXRlbVZhbHVlPXtwcm9wcy5zZXRJdGVtVmFsdWV9XHJcbiAgICAgICAgICBzZXRQYXJhbWV0ZXJzPXtwcm9wcy5zZXRQYXJhbWV0ZXJzfVxyXG4gICAgICAgICAgY2hlY2tlZD17c2V0dGluZy5kYXRhfVxyXG4gICAgICAgICAgZGF0YT17c2V0dGluZy5kYXRhfVxyXG4gICAgICAgICAgcGFyYW1zPXtzZXR0aW5nLnBhcmFtc31cclxuICAgICAgICAgIGRlc2NyaXB0aW9uPXtzZXR0aW5nLmRlc2NyaXB0aW9ufVxyXG4gICAgICAgICAgaWQ9e2l9PlxyXG4gICAgICAgICAgPEl0ZW0vPlxyXG4gICAgICAgIDwvU2V0dGluZ3NMaXN0SXRlbT5cclxuICAgICAgKTtcclxuICAgIH0pfVxyXG4gIDwvZGl2PlxyXG4pO1xyXG5cclxuU2V0dGluZ3NMaXN0LnByb3BUeXBlcyA9IHtcclxuICBzZXR0aW5nczogUHJvcFR5cGVzLm9iamVjdCxcclxuICB3aWR0aDogUHJvcFR5cGVzLm51bWJlcixcclxuICBhZGREZXNjcmlwdGlvbjogUHJvcFR5cGVzLmZ1bmMsXHJcbiAgZGVsZXRlSXRlbTogUHJvcFR5cGVzLmZ1bmMsXHJcbiAgc2V0SXRlbVZhbHVlOiBQcm9wVHlwZXMuZnVuYyxcclxuICBzZXRQYXJhbWV0ZXJzOiBQcm9wVHlwZXMuZnVuY1xyXG59O1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29tcG9uZW50cy9TZXR0aW5nc0xpc3QvU2V0dGluZ3NMaXN0LmpzIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0ICcuL2luZGV4LnNjc3MnO1xyXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IFNldHRpbmdzTGlzdEl0ZW0gPSAocHJvcHMpID0+IChcclxuICA8ZGl2IGNsYXNzTmFtZT17IGBzZXR0aW5ncyAkeyBwcm9wcy5zdHlsZU5hbWUgfWAgfT5cclxuICAgIDxkaXYgY2xhc3NOYW1lPVwiaXRlbS1oZWFkZXJcIj5cclxuICAgICAgPHAgY2xhc3NOYW1lPVwiaXRlbS1oZWFkZXJfX25hbWVcIj57cHJvcHMubmFtZX08L3A+XHJcbiAgICAgIDxidXR0b25cclxuICAgICAgICBjbGFzc05hbWU9XCJpdGVtLWhlYWRlcl9fZGVsZXRlLWJ0blwiXHJcbiAgICAgICAgb25DbGljaz17KCk9PnByb3BzLmRlbGV0ZUl0ZW0ocHJvcHMuaWQpfVxyXG4gICAgICAvPlxyXG4gICAgPC9kaXY+XHJcbiAgICA8ZGl2PlxyXG4gICAgICA8bGFiZWw+XHJcbiAgICAgICAgPGlucHV0XHJcbiAgICAgICAgICBjbGFzc05hbWU9XCJkZXNjcmlwdGlvbi1pbnB1dFwiXHJcbiAgICAgICAgICBwbGFjZWhvbGRlcj1cIkRlc2NyaXB0aW9uXCJcclxuICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcclxuICAgICAgICAgIHZhbHVlPXtwcm9wcy5kZXNjcmlwdGlvbn1cclxuICAgICAgICAgIG9uQ2hhbmdlPXsgKGUpPT4gcHJvcHMuYWRkRGVzY3JpcHRpb24ocHJvcHMuaWQsIGUudGFyZ2V0LnZhbHVlKSB9Lz5cclxuICAgICAgPC9sYWJlbD5cclxuICAgIDwvZGl2PlxyXG4gICAgeyBSZWFjdC5jbG9uZUVsZW1lbnQocHJvcHMuY2hpbGRyZW4sIHtcclxuICAgICAgc3R5bGVOYW1lOiAnaXRlbS1ib2R5JyxcclxuICAgICAgc2V0SXRlbVZhbHVlOiBwcm9wcy5zZXRJdGVtVmFsdWUsXHJcbiAgICAgIHNldFBhcmFtZXRlcnM6IHByb3BzLnNldFBhcmFtZXRlcnMsXHJcbiAgICAgIGl0ZW1JZDogcHJvcHMuaWQsXHJcbiAgICAgIGNoZWNrZWQ6IHByb3BzLmNoZWNrZWQsXHJcbiAgICAgIGRhdGE6IHByb3BzLmRhdGEsXHJcbiAgICAgIHBhcmFtczogcHJvcHMucGFyYW1zLFxyXG4gICAgICBzaG93TWluTWF4OiB0cnVlXHJcbiAgICB9KX1cclxuIDwvZGl2PlxyXG4pO1xyXG5cclxuU2V0dGluZ3NMaXN0SXRlbS5wcm9wVHlwZXMgPSB7XHJcbiAgc3R5bGVOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG4gIHNldEl0ZW1WYWx1ZTogUHJvcFR5cGVzLmZ1bmMsXHJcbiAgY2hlY2tlZDogUHJvcFR5cGVzLmFueSxcclxuICBpZDogUHJvcFR5cGVzLm51bWJlcixcclxuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG4gIGFkZERlc2NyaXB0aW9uOiBQcm9wVHlwZXMuZnVuYyxcclxuICBkZWxldGVJdGVtOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxyXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuYW55LFxyXG4gIGRlc2NyaXB0aW9uOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG4gIGRhdGE6IFByb3BUeXBlcy5hbnksXHJcbiAgc2V0UGFyYW1ldGVyczogUHJvcFR5cGVzLmZ1bmMsXHJcbiAgcGFyYW1zOiBQcm9wVHlwZXMub2JqZWN0XHJcbn07XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9jb21wb25lbnRzL1NldHRpbmdzTGlzdEl0ZW0vU2V0dGluZ3NMaXN0SXRlbS5qcyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XHJcbmltcG9ydCAnLi9UaW1lclN0eWxlLnNjc3MnO1xyXG5pbXBvcnQgUmFuZ2VTZXR0aW5ncyBmcm9tICcuLi9SYW5nZVNldHRpbmdzL1JhbmdlJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRpbWVyU2V0dGluZ3MgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gIGNvbnN0cnVjdG9yIChwcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG5cclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgIGhvdXJzOiAwLFxyXG4gICAgICBtaW51dGVzOiAwXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50RGlkTW91bnQgKCkge1xyXG4gICAgaWYgKHR5cGVvZiB0aGlzLnByb3BzLmRhdGEgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgIGNvbnN0IHRpbWUgPSB0aGlzLnByb3BzLmRhdGEuc3BsaXQoJzonKTtcclxuXHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIGhvdXJzOnRpbWVbMF0sXHJcbiAgICAgICAgbWludXRlczp0aW1lWzFdXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY2hhbmdlSG91cnMgPSAoZXZlbnQpID0+IHtcclxuICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICBob3VyczogZXZlbnQudGFyZ2V0LnZhbHVlXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGNoYW5nZU1pbnV0ZXMgPSAoZXZlbnQpID0+IHtcclxuICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICBtaW51dGVzOiBldmVudC50YXJnZXQudmFsdWVcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgc2V0VGltZXJWYWx1ZSA9ICgpID0+IHtcclxuICAgIHRoaXMucHJvcHMuc2V0SXRlbVZhbHVlKGAke3RoaXMuc3RhdGUuaG91cnN9OiR7dGhpcy5zdGF0ZS5taW51dGVzfWAsXHJcbiAgICB0aGlzLnByb3BzLml0ZW1JZCxcclxuICAgIHRoaXMucHJvcHMuZGV2aWNlSWQpO1xyXG4gIH1cclxuXHJcbiAgaG91cnNLZXlEb3duID0gKGV2ZW50KSA9PiB7XHJcbiAgICBpZiAoKGV2ZW50LmtleUNvZGUgPCA0NyB8fCBldmVudC5rZXlDb2RlID4gNTgpICYmIGV2ZW50LmtleUNvZGUgIT09IDgpIHtcclxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH1cclxuICAgIGlmIChwYXJzZUludChldmVudC50YXJnZXQudmFsdWUgKyBldmVudC5rZXkpID4gOTkpIHtcclxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG1pbnV0ZXNLZXlEb3duID0gKGV2ZW50KSA9PiB7XHJcbiAgICBpZiAoKGV2ZW50LmtleUNvZGUgPCA0NyB8fCBldmVudC5rZXlDb2RlID4gNTgpICYmIGV2ZW50LmtleUNvZGUgIT09IDgpIHtcclxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH1cclxuICAgIGlmIChwYXJzZUludChldmVudC50YXJnZXQudmFsdWUgKyBldmVudC5rZXkpID4gNTkpIHtcclxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlbmRlciAoKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17YG0tdGltZSAke3RoaXMucHJvcHMuc3R5bGVOYW1lfWB9PlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2hvd3RpbWVcIj5cclxuICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgY2xhc3NOYW1lPVwic2hvd3RpbWVfX3RpbWVcIlxyXG4gICAgICAgICAgdHlwZT1cInRleHRcIlxyXG4gICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuaG91cnN9XHJcbiAgICAgICAgICBvbkNoYW5nZT17dGhpcy5jaGFuZ2VIb3Vyc31cclxuICAgICAgICAgIG9uS2V5RG93bj17dGhpcy5ob3Vyc0tleURvd259XHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwic2hvd3RpbWVfX3NlcGFyYXRlclwiPjo8L3NwYW4+XHJcbiAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgIGNsYXNzTmFtZT1cInNob3d0aW1lX190aW1lXCJcclxuICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcclxuICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLm1pbnV0ZXN9XHJcbiAgICAgICAgICBvbkNoYW5nZT17dGhpcy5jaGFuZ2VNaW51dGVzfVxyXG4gICAgICAgICAgb25LZXlEb3duPXt0aGlzLm1pbnV0ZXNLZXlEb3dufVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzbGlkZXJzXCI+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNsaWRlcnNfX3RpbWUtdGV4dFwiPkhvdXJzPC9kaXY+XHJcbiAgICAgICAgICA8UmFuZ2VTZXR0aW5nc1xyXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJ1LXNsaWRlci10aW1lXCJcclxuICAgICAgICAgICAgbWluPXswfVxyXG4gICAgICAgICAgICBtYXg9ezk5fVxyXG4gICAgICAgICAgICBzZXRJdGVtVmFsdWU9e3RoaXMucHJvcHMuc2V0SXRlbVZhbHVlfVxyXG4gICAgICAgICAgICBvblRpbWVyQ2hhbmdlPXt0aGlzLmNoYW5nZUhvdXJzfVxyXG4gICAgICAgICAgICBzZXRUaW1lclZhbHVlPXt0aGlzLnNldFRpbWVyVmFsdWV9XHJcbiAgICAgICAgICAgIGhpZGVMYWJlbD17dHJ1ZX1cclxuICAgICAgICAgICAgZGF0YT17dGhpcy5zdGF0ZS5ob3Vyc31cclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNsaWRlcnNfX3RpbWUtdGV4dFwiPk1pbnV0ZXM8L2Rpdj5cclxuICAgICAgICAgIDxSYW5nZVNldHRpbmdzXHJcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cInUtc2xpZGVyLXRpbWVcIlxyXG4gICAgICAgICAgICBtaW49ezB9XHJcbiAgICAgICAgICAgIG1heD17NTl9XHJcbiAgICAgICAgICAgIHNldEl0ZW1WYWx1ZT17dGhpcy5wcm9wcy5zZXRJdGVtVmFsdWV9XHJcbiAgICAgICAgICAgIG9uVGltZXJDaGFuZ2U9e3RoaXMuY2hhbmdlTWludXRlc31cclxuICAgICAgICAgICAgc2V0VGltZXJWYWx1ZT17dGhpcy5zZXRUaW1lclZhbHVlfVxyXG4gICAgICAgICAgICBoaWRlTGFiZWw9e3RydWV9XHJcbiAgICAgICAgICAgIGRhdGE9e3RoaXMuc3RhdGUubWludXRlc31cclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuVGltZXJTZXR0aW5ncy5wcm9wVHlwZXMgPSB7XHJcbiAgc3R5bGVOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG4gIHZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcclxuICBzZXRJdGVtVmFsdWU6IFByb3BUeXBlcy5mdW5jLFxyXG4gIGl0ZW1JZDogUHJvcFR5cGVzLm51bWJlcixcclxuICBuZXdWYWx1ZTogUHJvcFR5cGVzLnN0cmluZyxcclxuICBkYXRhOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG4gIGRldmljZUlkOiBQcm9wVHlwZXMuc3RyaW5nXHJcbn07XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9jb21wb25lbnRzL1RpbWVyU2V0dGluZ3MvVGltZXIuanMiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xyXG5pbXBvcnQgJy4vVG9nZ2xlU3R5bGUuc2Nzcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUb2dnbGVTZXR0aW5ncyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcblxyXG4gIGNvbnN0cnVjdG9yIChwcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG4gIH1cclxuXHJcbiAgb25DaGFuZ2VWYWx1ZSA9IChlKSA9PiB7XHJcbiAgICB0aGlzLnByb3BzLnNldEl0ZW1WYWx1ZSghdGhpcy5wcm9wcy5jaGVja2VkLFxyXG4gICAgICB0aGlzLnByb3BzLml0ZW1JZCxcclxuICAgICAgdGhpcy5wcm9wcy5kZXZpY2VJZCk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIgKCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGRpdiBjbGFzc05hbWU9eyBgJHsgdGhpcy5wcm9wcy5zdHlsZU5hbWUgfWAgfT5cclxuICAgICAgICA8bGFiZWwgY2xhc3NOYW1lPVwic3dpdGNoXCI+XHJcbiAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgdHlwZT1cImNoZWNrYm94XCJcclxuICAgICAgICAgICAgY2hlY2tlZD17dGhpcy5wcm9wcy5jaGVja2VkfVxyXG4gICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkNoYW5nZVZhbHVlfVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2xpZGVyIHJvdW5kXCI+PC9kaXY+XHJcbiAgICAgICAgPC9sYWJlbD5cclxuICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuVG9nZ2xlU2V0dGluZ3MucHJvcFR5cGVzID0ge1xyXG4gIGRldmljZTogUHJvcFR5cGVzLm9iamVjdCxcclxuICBzdHlsZU5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXHJcbiAgY2hlY2tlZDogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcclxuICBzZXRJdGVtVmFsdWU6IFByb3BUeXBlcy5mdW5jLFxyXG4gIGl0ZW1JZDogUHJvcFR5cGVzLmFueSxcclxuICBuZXdWYWx1ZTogUHJvcFR5cGVzLnN0cmluZyxcclxuICBkZXZpY2VJZDogUHJvcFR5cGVzLnN0cmluZ1xyXG59O1xyXG5Ub2dnbGVTZXR0aW5ncy5kZWZhdWx0UHJvcHMgPSB7XHJcbiAgY2hlY2tlZDogZmFsc2VcclxufTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbXBvbmVudHMvVG9nZ2xlU2V0dGluZ3MvVG9nZ2xlU2V0dGluZ3MuanMiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xyXG5pbXBvcnQgJy4vVmFsdWVTdHlsZS5zY3NzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZhbHVlU2V0dGluZ3MgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gIGNvbnN0cnVjdG9yIChwcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG5cclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgIHZhbHVlOiAnJ1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudERpZE1vdW50ICgpIHtcclxuICAgIGlmICh0eXBlb2YgdGhpcy5wcm9wcy5kYXRhICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICB2YWx1ZTogdGhpcy5wcm9wcy5kYXRhXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuICBzZXRUZXh0VmFsdWUgPSAoZSkgPT4ge1xyXG4gICAgdGhpcy5wcm9wcy5zZXRJdGVtVmFsdWUodGhpcy5zdGF0ZS52YWx1ZSxcclxuICAgICAgdGhpcy5wcm9wcy5pdGVtSWQsXHJcbiAgICAgIHRoaXMucHJvcHMuZGV2aWNlSWQpO1xyXG4gIH1cclxuXHJcbiAgb25DaGFuZ2VWYWx1ZSA9IChlKSA9PiB7XHJcbiAgICBjb25zdCBuZXdWYWx1ZSA9IGUudGFyZ2V0LnZhbHVlO1xyXG5cclxuICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICB2YWx1ZTogbmV3VmFsdWVcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyICgpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXsgYCR7IHRoaXMucHJvcHMuc3R5bGVOYW1lIH1gIH0+XHJcbiAgICAgICAgPGlucHV0XHJcbiAgICAgICAgICB0eXBlPSd0ZXh0J1xyXG4gICAgICAgICAgY2xhc3NOYW1lPSd2YWx1ZV9pbnB1dCdcclxuICAgICAgICAgIHBsYWNlaG9sZGVyPSdJbnB1dC4uLidcclxuICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLnZhbHVlfVxyXG4gICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25DaGFuZ2VWYWx1ZX1cclxuICAgICAgICAgIG9uQmx1cj17dGhpcy5zZXRUZXh0VmFsdWV9XHJcbiAgICAgICAgLz5cclxuICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuVmFsdWVTZXR0aW5ncy5wcm9wVHlwZXMgPSB7XHJcbiAgc3R5bGVOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG4gIHZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG4gIG9uQ2hhbmdlVmFsdWU6IFByb3BUeXBlcy5mdW5jLFxyXG4gIHNldEl0ZW1WYWx1ZTogUHJvcFR5cGVzLmZ1bmMsXHJcbiAgaXRlbUlkOiBQcm9wVHlwZXMubnVtYmVyLFxyXG4gIG5ld1ZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG4gIGRhdGE6IFByb3BUeXBlcy5zdHJpbmcsXHJcbiAgZGV2aWNlSWQ6IFByb3BUeXBlcy5zdHJpbmdcclxufTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbXBvbmVudHMvVmFsdWVTZXR0aW5ncy9WYWx1ZS5qcyIsImltcG9ydCBSYW5nZVNldHRpbmdzIGZyb21cclxuJy4uL2NvbXBvbmVudHMvUmFuZ2VTZXR0aW5ncy9SYW5nZSc7XHJcbmltcG9ydCBUb2dnbGVTZXR0aW5ncyBmcm9tXHJcbicuLi9jb21wb25lbnRzL1RvZ2dsZVNldHRpbmdzL1RvZ2dsZVNldHRpbmdzJztcclxuaW1wb3J0IFRpbWVyU2V0dGluZ3MgZnJvbVxyXG4nLi4vY29tcG9uZW50cy9UaW1lclNldHRpbmdzL1RpbWVyJztcclxuaW1wb3J0IFZhbHVlU2V0dGluZ3MgZnJvbVxyXG4nLi4vY29tcG9uZW50cy9WYWx1ZVNldHRpbmdzL1ZhbHVlJztcclxuaW1wb3J0IENoYXJ0IGZyb21cclxuJy4uL2NvbXBvbmVudHMvQ2hhcnQvQ2hhcnQnO1xyXG5cclxuZXhwb3J0IGNvbnN0IHNldHRpbmdzQ29tcG9uZW50cyA9IHtcclxuICBMaW5lQ2hhcnQ6Q2hhcnQsXHJcbiAgUmFuZ2U6UmFuZ2VTZXR0aW5ncyxcclxuICBUaW1lcjpUaW1lclNldHRpbmdzLFxyXG4gIFZhbHVlOlZhbHVlU2V0dGluZ3MsXHJcbiAgVG9nZ2xlOlRvZ2dsZVNldHRpbmdzXHJcbn07XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9kYXRhL2NvbXBvbmVudHNOYW1lcy5qcyIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IGJpbmRBY3Rpb25DcmVhdG9ycyB9IGZyb20gJ3JlZHV4JztcclxuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuaW1wb3J0ICcuL2J1aWxkZXIuc2Nzcyc7XHJcbmltcG9ydCBEZXZpY2VGb3JtIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvRGV2aWNlRm9ybS9kZXZpY2VGb3JtJztcclxuaW1wb3J0IFByb3RvdHlwZSBmcm9tICcuLi8uLi9jb21wb25lbnRzL1Byb3RvdHlwZS9Qcm90b3R5cGUnO1xyXG5pbXBvcnQgeyBNZXNzYWdlIH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9NZXNzYWdlL01lc3NhZ2UnO1xyXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xyXG5pbXBvcnQge1xyXG4gIHJlc2V0UHJvdG8sXHJcbiAgZGVsZXRlSXRlbSxcclxuICBlZGl0RGV2aWNlLFxyXG4gIGNsZWFyQWRkU3RhdHVzIH0gZnJvbSAnLi4vLi4vYWN0aW9ucy9idWlsZGVyLmFjdGlvbic7XHJcblxyXG5jbGFzcyBCdWlsZGVyIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICBjb21wb25lbnRXaWxsTW91bnQgKCkge1xyXG4gICAgaWYgKHR5cGVvZiB0aGlzLnByb3BzLm1hdGNoLnBhcmFtcy5pZCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgdGhpcy5wcm9wcy5lZGl0RGV2aWNlKHRoaXMucHJvcHMubWF0Y2gucGFyYW1zLmlkKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMucHJvcHMucmVzZXRCdWlsZGVyKCk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGNvbXBvbmVudERpZFVwZGF0ZSAoKSB7XHJcbiAgICBpZiAodGhpcy5wcm9wcy5zdGF0dXMgPT09ICdET05FJykge1xyXG4gICAgICBzZXRUaW1lb3V0KCgpPT57XHJcbiAgICAgICAgdGhpcy5wcm9wcy5yZXNldEJ1aWxkZXIoKTtcclxuICAgICAgICB0aGlzLnByb3BzLmhpc3RvcnkucHVzaCgnL2RldmljZXMnKTtcclxuICAgICAgfSwgMTAwMCk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJlbmRlciAoKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJidWlsZGVyIGRldmljZS1saXN0XCI+XHJcbiAgICAgICAgPGgxIGNsYXNzTmFtZT1cImRldmljZS1saXN0X190aXRsZVwiPkRldmljZSBCdWlsZGVyPC9oMT5cclxuICAgICAgICA8RGV2aWNlRm9ybSAvPlxyXG4gICAgICAgIDxNZXNzYWdlXHJcbiAgICAgICAgICBjbGVhclN0YXR1cz17dGhpcy5wcm9wcy5jbGVhckFkZFN0YXR1c31cclxuICAgICAgICAgIHN0YXR1cz17dGhpcy5wcm9wcy5zdGF0dXN9XHJcbiAgICAgICAgICBoZWFkZXI9eydFcnJvcid9XHJcbiAgICAgICAgICB0ZXh0PXt0aGlzLnByb3BzLmVycm9yVGV4dH0vPlxyXG4gICAgICAgIDxoMyBjbGFzc05hbWU9XCJidWlsZGVyX190aXRsZVwiPlByb3RvdHlwZTwvaDM+XHJcbiAgICAgICAgPFByb3RvdHlwZVxyXG4gICAgICAgICAgZGV2aWNlPXt0aGlzLnByb3BzLmRldmljZX1cclxuICAgICAgICAgIGRlbGV0ZUl0ZW09e3RoaXMucHJvcHMuZGVsZXRlSXRlbX0gLz5cclxuICAgICAgPC9zZWN0aW9uPlxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG1hcFN0YXRlVG9Qcm9wcyAoc3RvcmUpIHtcclxuICByZXR1cm4ge1xyXG4gICAgZGV2aWNlOiBzdG9yZS5idWlsZGVyLmRldmljZSxcclxuICAgIHN0YXR1czogc3RvcmUuYnVpbGRlci51cGxvYWRTdGF0dXMsXHJcbiAgICBlcnJvclRleHQ6IHN0b3JlLmJ1aWxkZXIuZXJyb3JUZXh0XHJcbiAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gbWFwRGlzcGF0Y2hUb1Byb3BzIChkaXNwYXRjaCkge1xyXG4gIHJldHVybiB7XHJcbiAgICBkZWxldGVJdGVtOiBiaW5kQWN0aW9uQ3JlYXRvcnMoZGVsZXRlSXRlbSwgZGlzcGF0Y2gpLFxyXG4gICAgcmVzZXRCdWlsZGVyOiBiaW5kQWN0aW9uQ3JlYXRvcnMocmVzZXRQcm90bywgZGlzcGF0Y2gpLFxyXG4gICAgZWRpdERldmljZTogYmluZEFjdGlvbkNyZWF0b3JzKGVkaXREZXZpY2UsIGRpc3BhdGNoKSxcclxuICAgIGNsZWFyQWRkU3RhdHVzOiBiaW5kQWN0aW9uQ3JlYXRvcnMoY2xlYXJBZGRTdGF0dXMsIGRpc3BhdGNoKVxyXG4gIH07XHJcbn1cclxuXHJcbkJ1aWxkZXIucHJvcFR5cGVzID0ge1xyXG4gIHN0YXR1czogUHJvcFR5cGVzLnN0cmluZyxcclxuICBkZXZpY2U6IFByb3BUeXBlcy5vYmplY3QsXHJcbiAgcmVzZXRCdWlsZGVyOiBQcm9wVHlwZXMuZnVuYyxcclxuICBkZWxldGVJdGVtOiBQcm9wVHlwZXMuZnVuYyxcclxuICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LFxyXG4gIG1hdGNoOiBQcm9wVHlwZXMub2JqZWN0LFxyXG4gIHBhcmFtczogUHJvcFR5cGVzLm9iamVjdCxcclxuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcclxuICBlZGl0RGV2aWNlOiBQcm9wVHlwZXMuZnVuYyxcclxuICBjbGVhckFkZFN0YXR1czogUHJvcFR5cGVzLmZ1bmMsXHJcbiAgZXJyb3JUZXh0OiBQcm9wVHlwZXMuc3RyaW5nXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKShCdWlsZGVyKTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3BhZ2VzL0J1aWxkZXIvQnVpbGRlci5qcyJdLCJzb3VyY2VSb290IjoiIn0=